
Exercise1_7.elf:     file format elf32-littlenios2
Exercise1_7.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x00027e90 memsz 0x00027e90 flags r-x
    LOAD off    0x00028eb0 vaddr 0x01027eb0 paddr 0x01029a14 align 2**12
         filesz 0x00001b64 memsz 0x00001b64 flags rw-
    LOAD off    0x0002b578 vaddr 0x0102b578 paddr 0x0102b578 align 2**12
         filesz 0x00000000 memsz 0x00050304 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00021e74  010001b8  010001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00005e84  0102202c  0102202c  0002302c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b64  01027eb0  01029a14  00028eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00050304  0102b578  0102b578  0002b578  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0002aa14  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001698  00000000  00000000  0002aa40  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00002eab  00000000  00000000  0002c0d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0003c0af  00000000  00000000  0002ef83  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000d78a  00000000  00000000  0006b032  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000262ee  00000000  00000000  000787bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000394c  00000000  00000000  0009eaac  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000395a  00000000  00000000  000a23f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00015f22  00000000  00000000  000a5d52  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  000bbc74  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000cb8  00000000  00000000  000bbca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000c269d  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000c26a0  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000c26ac  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000c26ad  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000c26ae  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000c26b9  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000c26c4  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  000c26cf  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000003  00000000  00000000  000c26da  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00086ce4  00000000  00000000  000c26dd  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001b8 l    d  .text	00000000 .text
0102202c l    d  .rodata	00000000 .rodata
01027eb0 l    d  .rwdata	00000000 .rwdata
0102b578 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
01000200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 Bresenhams_Line_Drawing_Algorithm.c
00000000 l    df *ABS*	00000000 CampusFoodFinderMain.c
00000000 l    df *ABS*	00000000 Fill.c
00000000 l    df *ABS*	00000000 GPS.c
0102b640 l     O .bss	00000064 buff.3768
0102b6a4 l     O .bss	00000064 buff.3777
00000000 l    df *ABS*	00000000 OutGraphicsCharFont1.c
00000000 l    df *ABS*	00000000 OutGraphicsCharFont2.c
00000000 l    df *ABS*	00000000 OutGraphicsCharFont3.c
00000000 l    df *ABS*	00000000 OutGraphicsCharFont4.c
00000000 l    df *ABS*	00000000 SD.c
00000000 l    df *ABS*	00000000 bluetooth.c
00000000 l    df *ABS*	00000000 distance.c
00000000 l    df *ABS*	00000000 functions.c
00000000 l    df *ABS*	00000000 profile.c
00000000 l    df *ABS*	00000000 stack.c
00000000 l    df *ABS*	00000000 states.c
00000000 l    df *ABS*	00000000 touchscreen.c
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 w_atan2.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_atan2.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
01027578 l     O .rodata	00000108 two_over_pi
010274f8 l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
01027680 l     O .rodata	00000010 init_jk
01027690 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_atan.c
010276d0 l     O .rodata	00000020 atanhi
010276f0 l     O .rodata	00000020 atanlo
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
0100bcd4 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0100cc90 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 atof.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 gmtime.c
00000000 l    df *ABS*	00000000 gmtime_r.c
00000000 l    df *ABS*	00000000 impure.c
01027eb0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 mktm_r.c
01027838 l     O .rodata	00000060 mon_lengths
010299c8 l     O .rwdata	00000008 year_lengths
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strtod.c
0100e438 l     F .text	00000048 match
010282c4 l     O .rwdata	00000014 fpi.1950
010278ac l     O .rodata	00000028 tinytens
010282b0 l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 tzlock.c
00000000 l    df *ABS*	00000000 tzvars.c
00000000 l    df *ABS*	00000000 vfprintf.c
0100ff68 l     F .text	00000058 __sprint_r
01027946 l     O .rodata	00000010 blanks.3452
01027936 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 ctype_.c
01027a57 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
01011fcc l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
010139c8 l     F .text	00000058 std
01013ad4 l     F .text	00000008 __fp_lock
01013adc l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
010146e4 l     F .text	00000024 htinit
01014770 l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
01014fd8 l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 gettzinfo.c
010282d8 l     O .rwdata	00000040 tzinfo
00000000 l    df *ABS*	00000000 locale.c
010299e0 l     O .rwdata	00000004 charset
01027c14 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
01027d5c l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
01018edc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
01018f3c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0101903c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0101915c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0101923c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
01019398 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0101985c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
01029a04 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
01019af8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
010288d4 l     O .rwdata	00001060 jtag_uart_0
01029934 l     O .rwdata	0000002c character_lcd_0
01029960 l     O .rwdata	0000002c rs232_0
0102998c l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
01019c14 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 Altera_UP_SD_Card_Avalon_Interface.c
01027df0 l     O .rodata	00000016 __func__.4813
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0101e448 l     F .text	0000022c altera_avalon_jtag_uart_irq
0101e674 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0101ecf0 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0101f900 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0101faec l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0101fde8 l     F .text	000000dc alt_file_locked
0102004c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
010207cc l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 vfprintf.c
01020ce8 l     F .text	00000058 __sprint_r
01027ea0 l     O .rodata	00000010 blanks.3391
01027e90 l     O .rodata	00000010 zeroes.3392
00000000 l    df *ABS*	00000000 alt_exit.c
01021e08 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_kill.c
01021fc8 l     F .text	00000060 alt_get_errno
01000548 g     F .text	00000058 sign
0102b608 g     O .bss	00000004 aux_status_register
0100df84 g     F .text	0000001c putchar
0100440c g     F .text	0000003c init_BT
0100240c g     F .text	00000090 deg2rad
01016278 g     F .text	00000094 _mprec_log10
01016364 g     F .text	00000088 __any_on
01017cbc g     F .text	00000070 _isatty_r
01027d34 g     O .rodata	00000028 __mprec_tinytens
010193f8 g     F .text	0000006c alt_main
01004520 g     F .text	00000190 parseBT
0100e27c g     F .text	0000008c strcpy
0100dfa8 g     F .text	000000a0 _puts_r
0107b5ec g     O .bss	00000100 alt_irq
0102b5a8 g     O .bss	00000004 endmin
0100b298 g     F .text	00000018 fabs
01017d2c g     F .text	00000078 _lseek_r
010085d0 g     F .text	00000130 sqrt
010036e4 g     F .text	00000070 FloatToLongitudeConversion
01029a14 g       *ABS*	00000000 __flash_rwdata_start
0101ee68 g     F .text	00000034 alt_up_character_lcd_send_cmd
01005df0 g     F .text	0000039c calculateDistance
0100c7f4 g     F .text	00000088 __eqdf2
0102b5ac g     O .bss	00000004 endtime
01019ffc g     F .text	000001b0 Check_for_Master_Boot_Record
01000310 g     F .text	0000007c ProgramPalette
01001fe8 g     F .text	00000424 getDistance2
0107b87c g       *ABS*	00000000 __alt_heap_start
0101dec4 g     F .text	000001f8 alt_up_sd_card_fclose
01020c74 g     F .text	00000074 _kill_r
0100df0c g     F .text	00000044 printf
01022422 g     O .rodata	00000a64 Font10x14
01007e44 g     F .text	00000220 GetPress
01078e44 g     O .bss	00001f40 XYStack
01020bb4 g     F .text	000000a0 _signal_r
01004c54 g     F .text	0000007c writetoBT
010176f8 g     F .text	00000068 __sseek
01013a30 g     F .text	000000a4 __sinit
0101783c g     F .text	00000130 __swbuf_r
0102b5d0 g     O .bss	00000004 _daylight
01004488 g     F .text	00000048 getcharBT
0101529c g     F .text	00000084 _setlocale_r
01007e04 g     F .text	00000040 WaitForTouch
010012cc g     F .text	0000003c wait_1ms2
01013b30 g     F .text	00000068 __sfmoreglue
01000d50 g     F .text	00000068 PopPixel
01019484 g     F .text	00000020 __malloc_unlock
0101f550 g     F .text	00000090 alt_up_rs232_read_fd
0100279c g     F .text	000000f4 changeInterval
0100e480 g     F .text	000014e4 _strtod_r
0100b8f0 g     F .text	00000174 __divsf3
0102b62c g     O .bss	00000004 current_sector_modified
01007444 g     F .text	00000084 closestPressed
0101e1b8 g     F .text	00000090 Read_Sector_Data_Attempt_CRC
0102b5b0 g     O .bss	00000004 starttime
01015cf4 g     F .text	000000e0 memmove
0102b5b4 g     O .bss	00000004 endhour
01013b20 g     F .text	00000010 _cleanup
010163ec g     F .text	000000bc _Balloc
0102b730 g     O .bss	000000cc lastStates
0100bbec g     F .text	00000094 __fixsfsi
0102b578 g     O .bss	00000008 RESDIS
0101ca70 g     F .text	000000c8 alt_up_sd_card_is_Present
01019d14 g     F .text	00000050 Save_Modified_Sector
0100c87c g     F .text	00000088 __gtdf2
0100d724 g     F .text	00000010 __errno
0101edec g     F .text	0000007c get_DDRAM_addr
01005930 g     F .text	000004c0 drawStats
01000000 g     F .entry	0000001c __reset
0102b624 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
01003cc4 g     F .text	00000194 OutGraphicsCharFont3
0100799c g     F .text	000000ec StartRun
01000020 g       *ABS*	00000000 __flash_exceptions_start
01017c48 g     F .text	00000074 _fstat_r
0102b5f0 g     O .bss	00000004 errno
0100cbe4 g     F .text	00000038 __make_dp
0100b2b0 g     F .text	00000224 floor
010054c0 g     F .text	00000068 drawBack
01005150 g     F .text	000000a0 ifTouched2
0100d1c4 g     F .text	0000002c __make_fp
0102b5f8 g     O .bss	00000004 alt_argv
010319b8 g       *ABS*	00000000 _gp
0101d030 g     F .text	000003a8 alt_up_sd_card_fopen
0101cbac g     F .text	000000d4 alt_up_sd_card_find_first
0102b618 g     O .bss	00000004 command_argument_register
01021e68 g     F .text	00000020 getpid
01028754 g     O .rwdata	00000180 alt_fd_list
01008064 g     F .text	0000020c GetRelease
01007ae0 g     F .text	000000c0 Stats
01008a50 g     F .text	00000828 __ieee754_rem_pio2
01007778 g     F .text	00000224 Home
0100dfa0 g     F .text	00000008 _putchar_r
0102b588 g     O .bss	00000008 avgspeed
0101c2a0 g     F .text	0000012c find_first_empty_record_in_root_directory
0101fa28 g     F .text	00000094 alt_find_dev
0100d750 g     F .text	000000a0 memcpy
01015024 g     F .text	00000248 __hexnan
0101f000 g     F .text	0000004c alt_up_character_lcd_write_fd
0100392c g     F .text	000001cc OutGraphicsCharFont2a
01013b14 g     F .text	0000000c _cleanup_r
0100ca14 g     F .text	000000f8 __floatsidf
0101fbb0 g     F .text	00000078 alt_io_redirect
0100c98c g     F .text	00000088 __ltdf2
0102202c g       *ABS*	00000000 __DTOR_END__
010050d4 g     F .text	0000007c ifTouched
0101f4dc g     F .text	00000074 alt_up_rs232_read_data
0100e048 g     F .text	00000014 puts
0101beb0 g     F .text	000001a4 find_first_empty_cluster
01001394 g     F .text	00000048 getcharGPS
010161c8 g     F .text	000000b0 __ratio
0101c9ac g     F .text	000000c4 alt_up_sd_card_open_dev
01021de4 g     F .text	00000024 __vfiprintf_internal
0101e88c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0100df50 g     F .text	00000034 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0100cdcc g     F .text	00000008 __udivsi3
0101909c g     F .text	000000c0 isatty
01020998 g     F .text	000000cc _raise_r
0102b5b8 g     O .bss	00000004 currentState
010204d8 g     F .text	00000064 __assert_func
01027c44 g     O .rodata	000000c8 __mprec_tens
01005248 g     F .text	0000005c setScreen
01000940 g     F .text	00000094 DrawSq
01015278 g     F .text	00000008 __locale_charset
01009540 g     F .text	0000052c __kernel_cos
010013dc g     F .text	00000050 GPSTestForReceivedData
01017e1c g     F .text	000000a4 __fixunsdfsi
01020448 g     F .text	00000090 alt_icache_flush
0102b5e4 g     O .bss	00000004 __malloc_top_pad
01020c70 g     F .text	00000004 _getpid_r
01000db8 g     F .text	00000040 IsStackEmpty
010299b8 g     O .rwdata	00000004 Next
0100ff3c g     F .text	00000024 strtoul
010299dc g     O .rwdata	00000004 __mb_cur_max
01015280 g     F .text	0000000c _localeconv_r
01000df8 g     F .text	000004d4 Fill
01016ae4 g     F .text	0000003c __i2b
010140c8 g     F .text	0000049c __sfvwrite_r
01020aec g     F .text	000000b4 __sigtramp_r
0101b18c g     F .text	000000c0 get_dir_divider_location
01007ca4 g     F .text	00000078 Init_LCD
01017680 g     F .text	00000070 _sbrk_r
0101ae2c g     F .text	000000d0 filename_to_upper_case
0102b7fc g     O .bss	000003e8 sendlats
0101d3d8 g     F .text	00000090 alt_up_sd_card_set_attributes
0101a1ac g     F .text	00000284 Read_File_Record_At_Offset
01017da4 g     F .text	00000078 _read_r
01028318 g     O .rwdata	0000000c __lc_ctype
010299fc g     O .rwdata	00000004 alt_max_fd
0101f444 g     F .text	00000050 alt_up_rs232_check_parity
0100d504 g     F .text	00000138 __unpack_d
0101ba4c g     F .text	00000464 find_file_in_directory
01017b24 g     F .text	00000110 _fclose_r
01001a6c g     F .text	0000057c getDistance
01013994 g     F .text	00000034 fflush
0102b5e8 g     O .bss	00000004 __malloc_max_sbrked_mem
0101fc28 g     F .text	000001c0 alt_irq_register
0100038c g     F .text	000000b4 HLine
0100a8e8 g     F .text	00000318 __kernel_sin
0100bc80 g     F .text	00000054 __extendsfdf2
01000794 g     F .text	00000124 DrawRec
0101cb38 g     F .text	00000074 alt_up_sd_card_is_FAT16
0100c164 g     F .text	00000074 __adddf3
01018a4c g     F .text	00000078 __nesf2
01001344 g     F .text	00000050 putcharGPS
010160a8 g     F .text	00000120 __b2d
0101849c g     F .text	000005b0 __umoddi3
010192a8 g     F .text	000000f0 lseek
010299bc g     O .rwdata	00000004 __fdlib_version
010299c4 g     O .rwdata	00000004 _global_impure_ptr
0100473c g     F .text	000003d0 get_info
0101b538 g     F .text	00000514 get_home_directory_cluster_for_file
0101704c g     F .text	000005f4 _realloc_r
0107b87c g       *ABS*	00000000 __bss_end
01020144 g     F .text	0000010c alt_tick
01002a7c g     F .text	000000e4 stopLog
0107af84 g     O .bss	00000100 __hexdig
01017ec0 g     F .text	000005dc __udivdi3
01005528 g     F .text	00000068 drawHomeButton
01027d0c g     O .rodata	00000028 __mprec_bigtens
01016d40 g     F .text	00000120 __s2b
01020980 g     F .text	00000018 abort
010041c8 g     F .text	00000158 ReadFromSD
01018c4c g     F .text	00000194 __floatunsidf
01002b60 g     F .text	00000a80 dumpLog
01015fc8 g     F .text	00000060 __mcmp
0102b630 g     O .bss	00000004 current_sector_index
01007d1c g     F .text	000000b8 Init_Touch
010299d8 g     O .rwdata	00000004 __ctype_ptr
0100d748 g     F .text	00000008 gmtime_r
01013afc g     F .text	00000018 __fp_lock_all
0102b5a0 g     O .bss	00000008 timeran
010200ac g     F .text	00000098 alt_alarm_stop
01022e86 g     O .rodata	0000140a Font16x27
0100fce8 g     F .text	00000024 strtol
01019f18 g     F .text	000000e4 mark_cluster
0102b634 g     O .bss	00000004 alt_irq_active
0100588c g     F .text	000000a4 drawEndRun
010000ec g     F .exceptions	000000cc alt_irq_handler
0102872c g     O .rwdata	00000028 alt_dev_null
01009a6c g     F .text	00000e7c __kernel_rem_pio2
0101c3cc g     F .text	000001b8 convert_filename_to_name_extension
01003754 g     F .text	000001d8 OutGraphicsCharFont1
0100d054 g     F .text	000000c8 __unpack_f
01003674 g     F .text	00000070 FloatToLatitudeConversion
0101f2e8 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0100ff64 g     F .text	00000004 __tz_unlock
0101f808 g     F .text	00000044 alt_dcache_flush_all
01015e94 g     F .text	00000070 __hi0bits
0102b604 g     O .bss	00000004 is_sd_card_formated_as_FAT16
0100cb0c g     F .text	000000d8 __fixdfsi
01000440 g     F .text	000000c0 VLine
0101c054 g     F .text	0000024c find_first_empty_record_in_a_subdirectory
0100fa88 g     F .text	0000001c strtod
01029a14 g       *ABS*	00000000 __ram_rwdata_end
010299f4 g     O .rwdata	00000008 alt_dev_list
010199d8 g     F .text	00000120 write
01016f64 g     F .text	000000e8 _putc_r
01008700 g     F .text	00000350 __ieee754_atan2
0102b628 g     O .bss	00000004 device_pointer
0100d704 g     F .text	00000008 atof
010299d0 g     O .rwdata	00000008 _tzname
01018ac4 g     F .text	00000078 __gtsf2
01027eb0 g       *ABS*	00000000 __ram_rodata_end
01018f68 g     F .text	000000d4 fstat
0101f5e0 g     F .text	00000094 alt_up_rs232_write_fd
01006494 g     F .text	00000288 sendCoords
01021e88 g     F .text	00000140 kill
01018bc4 g     F .text	00000088 __ledf2
010035e0 g     F .text	00000094 swapEndian
0100e130 g     F .text	00000090 strcat
01007dd4 g     F .text	00000030 ScreenTouched
01016c20 g     F .text	00000120 __pow5mult
01020d40 g     F .text	000010a4 ___vfiprintf_internal_r
0102b5d8 g     O .bss	00000004 __nlocale_changed
0100cdd4 g     F .text	00000008 __umodsi3
01002890 g     F .text	000001ec startLog
0107b87c g       *ABS*	00000000 end
01003af8 g     F .text	000001cc OutGraphicsCharFont2b
0100cef4 g     F .text	00000160 __pack_f
0100d70c g     F .text	0000000c _atoi_r
01005590 g     F .text	00000044 drawInner
0101e390 g     F .text	000000b8 altera_avalon_jtag_uart_init
01022028 g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
0101ed64 g     F .text	00000088 alt_avalon_timer_sc_init
0100ce74 g     F .text	00000080 __clzsi2
0101eab0 g     F .text	00000240 altera_avalon_jtag_uart_write
010082f8 g     F .text	00000168 cos
010055d4 g     F .text	000000c0 drawWelcome
01004020 g     F .text	00000070 OpenSD
01013a20 g     F .text	00000004 __sfp_lock_acquire
01015c10 g     F .text	000000e4 memchr
0101ef10 g     F .text	00000078 alt_up_character_lcd_write
0100ffc0 g     F .text	00001eac ___vfprintf_internal_r
0100e0d0 g     F .text	00000060 _sprintf_r
0100618c g     F .text	00000190 findTimes
01013db4 g     F .text	00000314 _free_r
010194a4 g     F .text	00000258 alt_printf
010207d0 g     F .text	000001b0 __call_exitprocs
010024f0 g     F .text	000000e0 parseSpeed
0102b5dc g     O .bss	00000004 __mlocale_changed
01001480 g     F .text	00000170 getGPSTime
010299e8 g     O .rwdata	00000004 __malloc_sbrk_base
010001b8 g     F .text	0000004c _start
01006e34 g     F .text	00000350 update_score
0102b638 g     O .bss	00000004 _alt_tick_rate
01008460 g     F .text	0000016c sin
010167b0 g     F .text	0000014c __lshift
010085cc g     F .text	00000004 atan2
0102b63c g     O .bss	00000004 _alt_nticks
01020c54 g     F .text	0000001c signal
0101973c g     F .text	00000120 read
01019b8c g     F .text	00000088 alt_sys_init
010044d0 g     F .text	00000050 BTTestForReceivedData
0101f174 g     F .text	000000b0 alt_up_character_lcd_shift_display
0100bb54 g     F .text	00000098 __floatsisf
01020698 g     F .text	00000134 __register_exitproc
010076d0 g     F .text	000000a8 Welcome
0101f404 g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
010168fc g     F .text	000001e8 __multiply
0101f224 g     F .text	00000090 alt_up_character_lcd_erase_pos
0101e724 g     F .text	00000074 altera_avalon_jtag_uart_close
01005374 g     F .text	000000d0 writeText2
01027eb0 g       *ABS*	00000000 __ram_rwdata_start
0102202c g       *ABS*	00000000 __ram_rodata_start
0100e37c g     F .text	000000bc strncpy
0102b708 g     O .bss	00000028 __malloc_current_mallinfo
0100631c g     F .text	00000178 printCoords
010164a8 g     F .text	0000017c __d2b
01001308 g     F .text	0000003c init_GPS
0102b600 g     O .bss	00000004 initialized
010025d0 g     F .text	000000e8 getSpeed
0101e248 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0100fd0c g     F .text	00000230 _strtoul_r
01020390 g     F .text	000000b8 alt_get_fd
0107b084 g     O .bss	00000014 search_data
0100d63c g     F .text	000000c8 __fpcmp_parts_d
010009d4 g     F .text	000001c8 DrawCir
010046b0 g     F .text	0000008c get_name
010073c0 g     F .text	00000084 backPressed
01017ab4 g     F .text	00000070 _close_r
01004bbc g     F .text	00000098 send_rank
01020608 g     F .text	00000074 memcmp
0101e2f8 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0107b87c g       *ABS*	00000000 __alt_stack_base
0101e340 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
01011e90 g     F .text	0000013c __swsetup_r
010072c8 g     F .text	00000028 init
0100c59c g     F .text	00000258 __divdf3
01013b98 g     F .text	000000f0 __sfp
0107b098 g     O .bss	00000054 boot_sector_data
0101630c g     F .text	00000058 __copybits
01028324 g     O .rwdata	00000408 __malloc_av_
01013a2c g     F .text	00000004 __sinit_lock_release
01004b0c g     F .text	000000b0 send_bmi
01007ba0 g     F .text	000000cc Profile
0100c1d8 g     F .text	000003c4 __muldf3
010177dc g     F .text	00000060 __sread
01027710 g     O .rodata	00000010 __thenan_sf
010015f0 g     F .text	0000035c parseGPSData
0101f370 g     F .text	00000058 alt_up_rs232_disable_read_interrupt
01020270 g     F .text	00000120 alt_find_file
01000cec g     F .text	00000064 PushPixel
0101f84c g     F .text	000000b4 alt_dev_llist_insert
01019464 g     F .text	00000020 __malloc_lock
0101991c g     F .text	000000bc sbrk
01007360 g     F .text	00000060 pop
01013798 g     F .text	000001fc _fflush_r
01017a00 g     F .text	000000b4 _calloc_r
0100ff60 g     F .text	00000004 __tz_lock
0102b5bc g     O .bss	00000004 starthour
0102b578 g       *ABS*	00000000 __bss_start
01015dd4 g     F .text	00000098 memset
0102b598 g     O .bss	00000008 numspeeds
01007548 g     F .text	00000080 homePressed
01000b9c g     F .text	00000150 main
01004cd0 g     F .text	0000020c receivebtData
0102b5fc g     O .bss	00000004 alt_envp
0102b5c0 g     O .bss	00000004 logcount
0102b5ec g     O .bss	00000004 __malloc_max_total_mem
0101e2a0 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0101796c g     F .text	0000001c __swbuf
0100badc g     F .text	00000078 __ltsf2
0101d468 g     F .text	0000008c alt_up_sd_card_get_attributes
01000280 g     F .text	00000090 ReadAPixel
01019c4c g     F .text	000000c8 Write_Sector_Data
0101d888 g     F .text	0000063c alt_up_sd_card_write
0101f0c4 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
010176f0 g     F .text	00000008 __sclose
0100b504 g     F .text	00000008 matherr
01800000 g       *ABS*	00000000 __alt_heap_limit
01017c34 g     F .text	00000014 fclose
0100faa4 g     F .text	00000244 _strtol_r
0100cc1c g     F .text	00000074 __truncdfsf2
0107b6ec g     O .bss	00000190 _atexit0
010074c8 g     F .text	00000080 timePressed
010121e4 g     F .text	000015b4 _dtoa_r
010154d0 g     F .text	00000740 _malloc_r
0100249c g     F .text	00000054 checkGPVTG
010005a0 g     F .text	000001f4 Line
01006c04 g     F .text	00000048 set_name
01029a00 g     O .rwdata	00000004 alt_errno
010205e0 g     F .text	00000028 _fiprintf_r
01008270 g     F .text	00000040 putchartouch
01020adc g     F .text	00000010 _init_signal
01005088 g     F .text	0000004c wait5s
0101462c g     F .text	000000b8 _fwalk
01007184 g     F .text	00000144 set_rank
01006b34 g     F .text	00000058 drawSync
01016e60 g     F .text	00000104 putc
0100cd0c g     F .text	00000060 __divsi3
01027720 g     O .rodata	00000014 __thenan_df
0101eed0 g     F .text	00000040 alt_up_character_lcd_open_dev
01013c88 g     F .text	0000012c _malloc_trim_r
0102202c g       *ABS*	00000000 __CTOR_END__
0100b710 g     F .text	000001e0 __mulsf3
0102b60c g     O .bss	00000004 status_register
0101ee9c g     F .text	00000034 alt_up_character_lcd_init
0100e1c0 g     F .text	000000bc strcmp
0102b614 g     O .bss	00000004 command_register
0102202c g       *ABS*	00000000 __flash_rodata_start
01005444 g     F .text	0000007c drawRectangle
0102202c g       *ABS*	00000000 __DTOR_LIST__
0101f674 g     F .text	00000040 alt_up_rs232_open_dev
0100b6ec g     F .text	00000024 copysign
01018b3c g     F .text	00000088 __nedf2
01019b58 g     F .text	00000034 alt_irq_init
010198bc g     F .text	00000060 alt_release_fd
01019e60 g     F .text	000000b8 get_cluster_flag
0100ac00 g     F .text	00000698 atan
0100e05c g     F .text	00000074 sprintf
0101f2b4 g     F .text	00000034 alt_up_character_lcd_cursor_off
01027734 g     O .rodata	00000100 __clz_tab
0101a430 g     F .text	000002b8 Write_File_Record_At_Offset
0102b5e0 g     O .bss	00000004 _PathLocale
01007a88 g     F .text	00000058 EndRun
010008b8 g     F .text	00000088 DrawTri
0100f964 g     F .text	00000124 strtof
01020550 g     F .text	00000014 atexit
0100ba64 g     F .text	00000078 __gesf2
01017988 g     F .text	00000078 _write_r
0102b5c4 g     O .bss	00000004 startmin
01015320 g     F .text	0000001c setlocale
0101a6e8 g     F .text	00000640 Check_for_DOS_FAT
0101c584 g     F .text	000002d4 create_file
010299c0 g     O .rwdata	00000004 _impure_ptr
0102b610 g     O .bss	00000004 CSD_register_w0
0102b5f4 g     O .bss	00000004 alt_argc
0100764c g     F .text	00000084 favPressed
01000204 g     F .text	0000007c WriteAPixel
0100b50c g     F .text	000001e0 scalbn
0101f9c4 g     F .text	00000064 _do_dtors
0102b5c8 g     O .bss	00000004 closest
01006d00 g     F .text	0000003c set_height
01022188 g     O .rodata	00000299 Font5x7
01000020 g       .exceptions	00000000 alt_irq_entry
01016028 g     F .text	00000080 __ulp
01017640 g     F .text	00000040 __isinfd
01013ae4 g     F .text	00000018 __fp_unlock_all
010299ec g     O .rwdata	00000008 alt_fs_list
0101aefc g     F .text	00000290 check_file_name_for_FAT16_compliance
0102b61c g     O .bss	00000004 buffer_memory
0101f31c g     F .text	00000054 alt_up_rs232_enable_read_interrupt
01006db0 g     F .text	00000048 set_goal
01004320 g     F .text	000000ec parseLoc
0101f494 g     F .text	00000048 alt_up_rs232_write_data
0102b5d4 g     O .bss	00000004 _timezone
010057f0 g     F .text	0000009c drawStartRun
01003e58 g     F .text	000001c8 OutGraphicsCharFont4
01006b8c g     F .text	00000078 profile_init
01000020 g       *ABS*	00000000 __ram_exceptions_start
0101528c g     F .text	00000010 localeconv
0100142c g     F .text	00000054 checkGPGGA
01009278 g     F .text	000002c8 __ieee754_sqrt
01000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
0100671c g     F .text	00000418 drawProfile
010026b8 g     F .text	000000e4 eraseLog
01014708 g     F .text	00000068 __hexdig_init
0107ad84 g     O .bss	00000200 Time
0102b620 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
01029a14 g       *ABS*	00000000 _edata
0107b87c g       *ABS*	00000000 _end
0107b0ec g     O .bss	00000500 active_files
0100194c g     F .text	00000120 getGPSData
010082b0 g     F .text	00000048 getchartouch
010001b8 g       *ABS*	00000000 __ram_exceptions_end
0101c858 g     F .text	00000154 copy_file_record_name_to_string
0101e798 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
010052a4 g     F .text	000000d0 writeText
0101ad28 g     F .text	00000104 Look_for_FAT16
01007c6c g     F .text	00000038 Sync
0102b5cc g     O .bss	00000004 runnum
01017760 g     F .text	0000007c __swrite
010299e4 g     O .rwdata	00000004 __malloc_trim_threshold
01020250 g     F .text	00000020 altera_nios2_qsys_irq_init
01020564 g     F .text	00000038 exit
0102059c g     F .text	00000044 fiprintf
0102067c g     F .text	0000001c _vfiprintf_r
0101cc80 g     F .text	000003b0 alt_up_sd_card_find_next
01014564 g     F .text	000000c8 _fwalk_reent
0102bbe4 g     O .bss	0004d260 logarray
01016624 g     F .text	0000018c __mdiff
0100cd6c g     F .text	00000060 __modsi3
01019d64 g     F .text	000000fc Read_Sector_Data
01006c88 g     F .text	0000003c set_age
01800000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
01013a24 g     F .text	00000004 __sfp_lock_release
0101ef88 g     F .text	00000078 alt_up_character_lcd_string
01004edc g     F .text	000001ac dist2res
0100d718 g     F .text	0000000c atoi
01027956 g     O .rodata	00000101 _ctype_
01024290 g     O .rodata	00002c92 Font22x40
0102b590 g     O .bss	00000008 topspeed
0100d11c g     F .text	000000a8 __fpcmp_parts_f
01021e48 g     F .text	00000020 _exit
0100b4d4 g     F .text	00000030 __isnand
0101f6b4 g     F .text	00000154 alt_alarm_start
0100d734 g     F .text	00000014 gmtime
0100cddc g     F .text	00000098 __muldi3
0101e0bc g     F .text	000000fc Read_Sector_Data_CRC
0101d4f4 g     F .text	00000394 alt_up_sd_card_read
0102b580 g     O .bss	00000008 totaldistance
0101533c g     F .text	00000194 __smakebuf_r
01006df8 g     F .text	0000003c set_dis
0100e308 g     F .text	00000074 strlen
01020a78 g     F .text	00000064 _init_signal_r
0101fec4 g     F .text	00000188 open
01006cc4 g     F .text	0000003c set_weight
0100c904 g     F .text	00000088 __gedf2
010196fc g     F .text	00000040 alt_putchar
01014820 g     F .text	000007b8 __gethex
010051f0 g     F .text	00000058 clearScreen
0102053c g     F .text	00000014 __assert
01000500 g     F .text	00000048 abs
0101fabc g     F .text	00000030 alt_icache_flush_all
0101f04c g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
01029a08 g     O .rwdata	00000004 alt_priority_mask
01004090 g     F .text	00000138 WriteToSD
01011e6c g     F .text	00000024 __vfprintf_internal
01006d3c g     F .text	00000074 calc_bmi
0100c0e4 g     F .text	00000080 __subdf3
01006c4c g     F .text	0000003c set_gender
01015f04 g     F .text	000000c4 __lo0bits
0100d7f0 g     F .text	00000234 __tzcalc_limits
010072f0 g     F .text	00000070 push
01029a0c g     O .rwdata	00000008 alt_alarm_list
0101f960 g     F .text	00000064 _do_ctors
01020ba0 g     F .text	00000014 __sigtramp
01005694 g     F .text	0000015c drawHome
0101f3c8 g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
01018de0 g     F .text	000000fc close
010075c8 g     F .text	00000084 distancePressed
010191bc g     F .text	00000080 alt_load
0100d1f0 g     F .text	00000314 __pack_d
0101b24c g     F .text	000002ec match_file_record_to_name_ext
01020a64 g     F .text	00000014 raise
0101526c g     F .text	0000000c __gettzinfo
0100da24 g     F .text	000004e8 _mktm_r
00000000  w      *UND*	00000000 free
01013a28 g     F .text	00000004 __sinit_lock_acquire
01016b20 g     F .text	00000100 __multadd
01015e6c g     F .text	00000028 _Bfree
01004448 g     F .text	00000040 putcharBT



Disassembly of section .entry:

01000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1000000:	00900014 	movui	r2,16384
#endif

0:
    initi r2
 1000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100000c:	00bffd16 	blt	zero,r2,1000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000014:	08406e14 	ori	at,at,440
    jmp r1
 1000018:	0800683a 	jmp	at
 100001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>

Disassembly of section .exceptions:

01000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10000fc:	0005313a 	rdctl	r2,ipending
 1000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 100010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000110:	00800044 	movi	r2,1
 1000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1000118:	e0ffff17 	ldw	r3,-4(fp)
 100011c:	e0bffe17 	ldw	r2,-8(fp)
 1000120:	1884703a 	and	r2,r3,r2
 1000124:	1005003a 	cmpeq	r2,r2,zero
 1000128:	1000171e 	bne	r2,zero,1000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 100012c:	e0bffd17 	ldw	r2,-12(fp)
 1000130:	00c04234 	movhi	r3,264
 1000134:	18ed7b04 	addi	r3,r3,-18964
 1000138:	100490fa 	slli	r2,r2,3
 100013c:	10c5883a 	add	r2,r2,r3
 1000140:	11800017 	ldw	r6,0(r2)
 1000144:	e0bffd17 	ldw	r2,-12(fp)
 1000148:	00c04234 	movhi	r3,264
 100014c:	18ed7b04 	addi	r3,r3,-18964
 1000150:	100490fa 	slli	r2,r2,3
 1000154:	10c5883a 	add	r2,r2,r3
 1000158:	10800104 	addi	r2,r2,4
 100015c:	11000017 	ldw	r4,0(r2)
 1000160:	e17ffd17 	ldw	r5,-12(fp)
 1000164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000168:	0005313a 	rdctl	r2,ipending
 100016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 1000170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1000174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1000178:	e0bfff17 	ldw	r2,-4(fp)
 100017c:	1004c03a 	cmpne	r2,r2,zero
 1000180:	103fe21e 	bne	r2,zero,100010c <alt_irq_handler+0x20>
 1000184:	00000706 	br	10001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1000188:	e0bffe17 	ldw	r2,-8(fp)
 100018c:	1085883a 	add	r2,r2,r2
 1000190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1000194:	e0bffd17 	ldw	r2,-12(fp)
 1000198:	10800044 	addi	r2,r2,1
 100019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10001a0:	003fdd06 	br	1000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10001a4:	e037883a 	mov	sp,fp
 10001a8:	dfc00117 	ldw	ra,4(sp)
 10001ac:	df000017 	ldw	fp,0(sp)
 10001b0:	dec00204 	addi	sp,sp,8
 10001b4:	f800283a 	ret

Disassembly of section .text:

010001b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 10001b8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 10001bc:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 10001c0:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 10001c4:	00bffd16 	blt	zero,r2,10001bc <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001c8:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 10001cc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001d0:	068040f4 	movhi	gp,259
    ori gp, gp, %lo(_gp)
 10001d4:	d6866e14 	ori	gp,gp,6584
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001d8:	008040b4 	movhi	r2,258
    ori r2, r2, %lo(__bss_start)
 10001dc:	10ad5e14 	ori	r2,r2,46456

    movhi r3, %hi(__bss_end)
 10001e0:	00c041f4 	movhi	r3,263
    ori r3, r3, %lo(__bss_end)
 10001e4:	18ee1f14 	ori	r3,r3,47228

    beq r2, r3, 1f
 10001e8:	10c00326 	beq	r2,r3,10001f8 <_start+0x40>

0:
    stw zero, (r2)
 10001ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001f4:	10fffd36 	bltu	r2,r3,10001ec <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001f8:	10191bc0 	call	10191bc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001fc:	10193f80 	call	10193f8 <alt_main>

01000200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1000200:	003fff06 	br	1000200 <alt_after_alt_main>

01000204 <WriteAPixel>:
/*******************************************************************************************
* This function writes a single pixel to the x,y coords specified using the specified colour
* Note colour is a byte and represents a palette number (0-255) not a 24 bit RGB value
********************************************************************************************/
void WriteAPixel(int x, int y, int Colour)
{
 1000204:	defffc04 	addi	sp,sp,-16
 1000208:	df000315 	stw	fp,12(sp)
 100020c:	df000304 	addi	fp,sp,12
 1000210:	e13ffd15 	stw	r4,-12(fp)
 1000214:	e17ffe15 	stw	r5,-8(fp)
 1000218:	e1bfff15 	stw	r6,-4(fp)
	WAIT_FOR_GRAPHICS;				// is graphics ready for new command
 100021c:	00a10034 	movhi	r2,33792
 1000220:	1080000b 	ldhu	r2,0(r2)
 1000224:	10bfffcc 	andi	r2,r2,65535
 1000228:	1080004c 	andi	r2,r2,1
 100022c:	1005003a 	cmpeq	r2,r2,zero
 1000230:	103ffa1e 	bne	r2,zero,100021c <WriteAPixel+0x18>

	GraphicsX1Reg = x;				// write coords to x1, y1
 1000234:	00e10034 	movhi	r3,33792
 1000238:	18c00084 	addi	r3,r3,2
 100023c:	e0bffd17 	ldw	r2,-12(fp)
 1000240:	1880000d 	sth	r2,0(r3)
	GraphicsY1Reg = y;
 1000244:	00e10034 	movhi	r3,33792
 1000248:	18c00104 	addi	r3,r3,4
 100024c:	e0bffe17 	ldw	r2,-8(fp)
 1000250:	1880000d 	sth	r2,0(r3)
	GraphicsColourReg = Colour;			// set pixel colour
 1000254:	00e10034 	movhi	r3,33792
 1000258:	18c00384 	addi	r3,r3,14
 100025c:	e0bfff17 	ldw	r2,-4(fp)
 1000260:	1880000d 	sth	r2,0(r3)
	GraphicsCommandReg = PutAPixel;			// give graphics "write pixel" command
 1000264:	00e10034 	movhi	r3,33792
 1000268:	00800284 	movi	r2,10
 100026c:	1880000d 	sth	r2,0(r3)
}
 1000270:	e037883a 	mov	sp,fp
 1000274:	df000017 	ldw	fp,0(sp)
 1000278:	dec00104 	addi	sp,sp,4
 100027c:	f800283a 	ret

01000280 <ReadAPixel>:
* This function read a single pixel from the x,y coords specified and returns its colour
* Note returned colour is a byte and represents a palette number (0-255) not a 24 bit RGB value
*********************************************************************************************/

int ReadAPixel(int x, int y)
{
 1000280:	defffd04 	addi	sp,sp,-12
 1000284:	df000215 	stw	fp,8(sp)
 1000288:	df000204 	addi	fp,sp,8
 100028c:	e13ffe15 	stw	r4,-8(fp)
 1000290:	e17fff15 	stw	r5,-4(fp)
	WAIT_FOR_GRAPHICS;			// is graphics ready for new command
 1000294:	00a10034 	movhi	r2,33792
 1000298:	1080000b 	ldhu	r2,0(r2)
 100029c:	10bfffcc 	andi	r2,r2,65535
 10002a0:	1080004c 	andi	r2,r2,1
 10002a4:	1005003a 	cmpeq	r2,r2,zero
 10002a8:	103ffa1e 	bne	r2,zero,1000294 <ReadAPixel+0x14>

	GraphicsX1Reg = x;			// write coords to x1, y1
 10002ac:	00e10034 	movhi	r3,33792
 10002b0:	18c00084 	addi	r3,r3,2
 10002b4:	e0bffe17 	ldw	r2,-8(fp)
 10002b8:	1880000d 	sth	r2,0(r3)
	GraphicsY1Reg = y;
 10002bc:	00e10034 	movhi	r3,33792
 10002c0:	18c00104 	addi	r3,r3,4
 10002c4:	e0bfff17 	ldw	r2,-4(fp)
 10002c8:	1880000d 	sth	r2,0(r3)
	GraphicsCommandReg = GetAPixel;		// give graphics a "get pixel" command
 10002cc:	00e10034 	movhi	r3,33792
 10002d0:	008002c4 	movi	r2,11
 10002d4:	1880000d 	sth	r2,0(r3)

	WAIT_FOR_GRAPHICS;			// is graphics done reading pixel
 10002d8:	00a10034 	movhi	r2,33792
 10002dc:	1080000b 	ldhu	r2,0(r2)
 10002e0:	10bfffcc 	andi	r2,r2,65535
 10002e4:	1080004c 	andi	r2,r2,1
 10002e8:	1005003a 	cmpeq	r2,r2,zero
 10002ec:	103ffa1e 	bne	r2,zero,10002d8 <ReadAPixel+0x58>
	return (int)(GraphicsColourReg) ;	// return the palette number (colour)
 10002f0:	00a10034 	movhi	r2,33792
 10002f4:	10800384 	addi	r2,r2,14
 10002f8:	1080000b 	ldhu	r2,0(r2)
 10002fc:	10bfffcc 	andi	r2,r2,65535
}
 1000300:	e037883a 	mov	sp,fp
 1000304:	df000017 	ldw	fp,0(sp)
 1000308:	dec00104 	addi	sp,sp,4
 100030c:	f800283a 	ret

01000310 <ProgramPalette>:
** e.g. ProgramPalette(RED, 0x00FF0000) ;
**
************************************************************************************/

void ProgramPalette(int PaletteNumber, int RGB)
{
 1000310:	defffd04 	addi	sp,sp,-12
 1000314:	df000215 	stw	fp,8(sp)
 1000318:	df000204 	addi	fp,sp,8
 100031c:	e13ffe15 	stw	r4,-8(fp)
 1000320:	e17fff15 	stw	r5,-4(fp)
    WAIT_FOR_GRAPHICS;
 1000324:	00a10034 	movhi	r2,33792
 1000328:	1080000b 	ldhu	r2,0(r2)
 100032c:	10bfffcc 	andi	r2,r2,65535
 1000330:	1080004c 	andi	r2,r2,1
 1000334:	1005003a 	cmpeq	r2,r2,zero
 1000338:	103ffa1e 	bne	r2,zero,1000324 <ProgramPalette+0x14>
    GraphicsColourReg = PaletteNumber;
 100033c:	00e10034 	movhi	r3,33792
 1000340:	18c00384 	addi	r3,r3,14
 1000344:	e0bffe17 	ldw	r2,-8(fp)
 1000348:	1880000d 	sth	r2,0(r3)
    GraphicsX1Reg = RGB >> 16   ;        // program red value in ls.8 bit of X1 reg
 100034c:	00e10034 	movhi	r3,33792
 1000350:	18c00084 	addi	r3,r3,2
 1000354:	e0bfff17 	ldw	r2,-4(fp)
 1000358:	1005d43a 	srai	r2,r2,16
 100035c:	1880000d 	sth	r2,0(r3)
    GraphicsY1Reg = RGB ;                // program green and blue into ls 16 bit of Y1 reg
 1000360:	00e10034 	movhi	r3,33792
 1000364:	18c00104 	addi	r3,r3,4
 1000368:	e0bfff17 	ldw	r2,-4(fp)
 100036c:	1880000d 	sth	r2,0(r3)
    GraphicsCommandReg = ProgramPaletteColour; // issue command
 1000370:	00e10034 	movhi	r3,33792
 1000374:	00800404 	movi	r2,16
 1000378:	1880000d 	sth	r2,0(r3)
}
 100037c:	e037883a 	mov	sp,fp
 1000380:	df000017 	ldw	fp,0(sp)
 1000384:	dec00104 	addi	sp,sp,4
 1000388:	f800283a 	ret

0100038c <HLine>:
/********************************************************************************************* 
This function draw a horizontal line, 1 pixel at a time starting at the x,y coords specified
*********************************************************************************************/

void HLine(int x1, int y1, int length, int Colour)
{
 100038c:	defffb04 	addi	sp,sp,-20
 1000390:	df000415 	stw	fp,16(sp)
 1000394:	df000404 	addi	fp,sp,16
 1000398:	e13ffc15 	stw	r4,-16(fp)
 100039c:	e17ffd15 	stw	r5,-12(fp)
 10003a0:	e1bffe15 	stw	r6,-8(fp)
 10003a4:	e1ffff15 	stw	r7,-4(fp)
//	int i;
//
//	for(i = x1; i < x1+length; i++ )
//		WriteAPixel(i, y1, Colour);
	WAIT_FOR_GRAPHICS;
 10003a8:	00a10034 	movhi	r2,33792
 10003ac:	1080000b 	ldhu	r2,0(r2)
 10003b0:	10bfffcc 	andi	r2,r2,65535
 10003b4:	1080004c 	andi	r2,r2,1
 10003b8:	1005003a 	cmpeq	r2,r2,zero
 10003bc:	103ffa1e 	bne	r2,zero,10003a8 <HLine+0x1c>

	GraphicsX1Reg = x1;			// write coords to x1, y1
 10003c0:	00e10034 	movhi	r3,33792
 10003c4:	18c00084 	addi	r3,r3,2
 10003c8:	e0bffc17 	ldw	r2,-16(fp)
 10003cc:	1880000d 	sth	r2,0(r3)
	GraphicsY1Reg = y1;
 10003d0:	00e10034 	movhi	r3,33792
 10003d4:	18c00104 	addi	r3,r3,4
 10003d8:	e0bffd17 	ldw	r2,-12(fp)
 10003dc:	1880000d 	sth	r2,0(r3)
	GraphicsX2Reg = x1 + length;
 10003e0:	01210034 	movhi	r4,33792
 10003e4:	21000184 	addi	r4,r4,6
 10003e8:	e0bffc17 	ldw	r2,-16(fp)
 10003ec:	1007883a 	mov	r3,r2
 10003f0:	e0bffe17 	ldw	r2,-8(fp)
 10003f4:	1885883a 	add	r2,r3,r2
 10003f8:	2080000d 	sth	r2,0(r4)
	GraphicsY2Reg = y1;
 10003fc:	00e10034 	movhi	r3,33792
 1000400:	18c00204 	addi	r3,r3,8
 1000404:	e0bffd17 	ldw	r2,-12(fp)
 1000408:	1880000d 	sth	r2,0(r3)
	GraphicsColourReg = Colour;
 100040c:	00e10034 	movhi	r3,33792
 1000410:	18c00384 	addi	r3,r3,14
 1000414:	e0bfff17 	ldw	r2,-4(fp)
 1000418:	1880000d 	sth	r2,0(r3)
	GraphicsCommandReg = DrawHLine;
 100041c:	00e10034 	movhi	r3,33792
 1000420:	00800044 	movi	r2,1
 1000424:	1880000d 	sth	r2,0(r3)
	GraphicsCommandReg = IDLE;
 1000428:	00a10034 	movhi	r2,33792
 100042c:	1000000d 	sth	zero,0(r2)

}
 1000430:	e037883a 	mov	sp,fp
 1000434:	df000017 	ldw	fp,0(sp)
 1000438:	dec00104 	addi	sp,sp,4
 100043c:	f800283a 	ret

01000440 <VLine>:
/********************************************************************************************* 
This function draw a vertical line, 1 pixel at a time starting at the x,y coords specified
*********************************************************************************************/

void VLine(int x1, int y1, int length, int Colour)
{
 1000440:	defffb04 	addi	sp,sp,-20
 1000444:	df000415 	stw	fp,16(sp)
 1000448:	df000404 	addi	fp,sp,16
 100044c:	e13ffc15 	stw	r4,-16(fp)
 1000450:	e17ffd15 	stw	r5,-12(fp)
 1000454:	e1bffe15 	stw	r6,-8(fp)
 1000458:	e1ffff15 	stw	r7,-4(fp)
//	int i;
//
//	for(i = y1; i < y1+length; i++ )
//		WriteAPixel(x1, i, Colour);
	WAIT_FOR_GRAPHICS;
 100045c:	00a10034 	movhi	r2,33792
 1000460:	1080000b 	ldhu	r2,0(r2)
 1000464:	10bfffcc 	andi	r2,r2,65535
 1000468:	1080004c 	andi	r2,r2,1
 100046c:	1005003a 	cmpeq	r2,r2,zero
 1000470:	103ffa1e 	bne	r2,zero,100045c <VLine+0x1c>

	GraphicsCommandReg = DrawVLine;
 1000474:	00e10034 	movhi	r3,33792
 1000478:	00800084 	movi	r2,2
 100047c:	1880000d 	sth	r2,0(r3)
	GraphicsX1Reg = x1;			// write coords to x1, y1
 1000480:	00e10034 	movhi	r3,33792
 1000484:	18c00084 	addi	r3,r3,2
 1000488:	e0bffc17 	ldw	r2,-16(fp)
 100048c:	1880000d 	sth	r2,0(r3)
	GraphicsY1Reg = y1;
 1000490:	00e10034 	movhi	r3,33792
 1000494:	18c00104 	addi	r3,r3,4
 1000498:	e0bffd17 	ldw	r2,-12(fp)
 100049c:	1880000d 	sth	r2,0(r3)
	GraphicsX2Reg = x1;
 10004a0:	00e10034 	movhi	r3,33792
 10004a4:	18c00184 	addi	r3,r3,6
 10004a8:	e0bffc17 	ldw	r2,-16(fp)
 10004ac:	1880000d 	sth	r2,0(r3)
	GraphicsY2Reg = y1 + length;
 10004b0:	01210034 	movhi	r4,33792
 10004b4:	21000204 	addi	r4,r4,8
 10004b8:	e0bffd17 	ldw	r2,-12(fp)
 10004bc:	1007883a 	mov	r3,r2
 10004c0:	e0bffe17 	ldw	r2,-8(fp)
 10004c4:	1885883a 	add	r2,r3,r2
 10004c8:	2080000d 	sth	r2,0(r4)
	GraphicsColourReg = Colour;
 10004cc:	00e10034 	movhi	r3,33792
 10004d0:	18c00384 	addi	r3,r3,14
 10004d4:	e0bfff17 	ldw	r2,-4(fp)
 10004d8:	1880000d 	sth	r2,0(r3)
	GraphicsCommandReg = DrawVLine;
 10004dc:	00e10034 	movhi	r3,33792
 10004e0:	00800084 	movi	r2,2
 10004e4:	1880000d 	sth	r2,0(r3)
	GraphicsCommandReg = IDLE;
 10004e8:	00a10034 	movhi	r2,33792
 10004ec:	1000000d 	sth	zero,0(r2)
}
 10004f0:	e037883a 	mov	sp,fp
 10004f4:	df000017 	ldw	fp,0(sp)
 10004f8:	dec00104 	addi	sp,sp,4
 10004fc:	f800283a 	ret

01000500 <abs>:
/*******************************************************************************
** Implementation of Bresenhams line drawing algorithm
*******************************************************************************/

int abs(int a)
{
 1000500:	defffd04 	addi	sp,sp,-12
 1000504:	df000215 	stw	fp,8(sp)
 1000508:	df000204 	addi	fp,sp,8
 100050c:	e13ffe15 	stw	r4,-8(fp)
    if(a < 0)
 1000510:	e0bffe17 	ldw	r2,-8(fp)
 1000514:	1004403a 	cmpge	r2,r2,zero
 1000518:	1000041e 	bne	r2,zero,100052c <abs+0x2c>
        return -a ;
 100051c:	e0bffe17 	ldw	r2,-8(fp)
 1000520:	0085c83a 	sub	r2,zero,r2
 1000524:	e0bfff15 	stw	r2,-4(fp)
 1000528:	00000206 	br	1000534 <abs+0x34>
    else
        return a ;
 100052c:	e0bffe17 	ldw	r2,-8(fp)
 1000530:	e0bfff15 	stw	r2,-4(fp)
 1000534:	e0bfff17 	ldw	r2,-4(fp)
}
 1000538:	e037883a 	mov	sp,fp
 100053c:	df000017 	ldw	fp,0(sp)
 1000540:	dec00104 	addi	sp,sp,4
 1000544:	f800283a 	ret

01000548 <sign>:

int sign(int a)
{
 1000548:	defffd04 	addi	sp,sp,-12
 100054c:	df000215 	stw	fp,8(sp)
 1000550:	df000204 	addi	fp,sp,8
 1000554:	e13ffe15 	stw	r4,-8(fp)
    if(a < 0)
 1000558:	e0bffe17 	ldw	r2,-8(fp)
 100055c:	1004403a 	cmpge	r2,r2,zero
 1000560:	1000031e 	bne	r2,zero,1000570 <sign+0x28>
        return -1 ;
 1000564:	00bfffc4 	movi	r2,-1
 1000568:	e0bfff15 	stw	r2,-4(fp)
 100056c:	00000706 	br	100058c <sign+0x44>
    else if (a == 0)
 1000570:	e0bffe17 	ldw	r2,-8(fp)
 1000574:	1004c03a 	cmpne	r2,r2,zero
 1000578:	1000021e 	bne	r2,zero,1000584 <sign+0x3c>
        return 0 ;
 100057c:	e03fff15 	stw	zero,-4(fp)
 1000580:	00000206 	br	100058c <sign+0x44>
    else
        return 1 ;
 1000584:	00800044 	movi	r2,1
 1000588:	e0bfff15 	stw	r2,-4(fp)
 100058c:	e0bfff17 	ldw	r2,-4(fp)
}
 1000590:	e037883a 	mov	sp,fp
 1000594:	df000017 	ldw	fp,0(sp)
 1000598:	dec00104 	addi	sp,sp,4
 100059c:	f800283a 	ret

010005a0 <Line>:


void Line(int x1, int y1, int x2, int y2, int Colour)
{
 10005a0:	defff004 	addi	sp,sp,-64
 10005a4:	dfc00f15 	stw	ra,60(sp)
 10005a8:	df000e15 	stw	fp,56(sp)
 10005ac:	df000e04 	addi	fp,sp,56
 10005b0:	e13ffc15 	stw	r4,-16(fp)
 10005b4:	e17ffd15 	stw	r5,-12(fp)
 10005b8:	e1bffe15 	stw	r6,-8(fp)
 10005bc:	e1ffff15 	stw	r7,-4(fp)
    int x = x1;
 10005c0:	e0bffc17 	ldw	r2,-16(fp)
 10005c4:	e0bffb15 	stw	r2,-20(fp)
    int y = y1;
 10005c8:	e0bffd17 	ldw	r2,-12(fp)
 10005cc:	e0bffa15 	stw	r2,-24(fp)
    int dx = abs(x2 - x1);
 10005d0:	e0fffe17 	ldw	r3,-8(fp)
 10005d4:	e0bffc17 	ldw	r2,-16(fp)
 10005d8:	1885c83a 	sub	r2,r3,r2
 10005dc:	e0bff915 	stw	r2,-28(fp)
 10005e0:	e0bff917 	ldw	r2,-28(fp)
 10005e4:	1004403a 	cmpge	r2,r2,zero
 10005e8:	1000031e 	bne	r2,zero,10005f8 <Line+0x58>
 10005ec:	e0bff917 	ldw	r2,-28(fp)
 10005f0:	0085c83a 	sub	r2,zero,r2
 10005f4:	e0bff915 	stw	r2,-28(fp)
    int dy = abs(y2 - y1);
 10005f8:	e0ffff17 	ldw	r3,-4(fp)
 10005fc:	e0bffd17 	ldw	r2,-12(fp)
 1000600:	1885c83a 	sub	r2,r3,r2
 1000604:	e0bff815 	stw	r2,-32(fp)
 1000608:	e0bff817 	ldw	r2,-32(fp)
 100060c:	1004403a 	cmpge	r2,r2,zero
 1000610:	1000031e 	bne	r2,zero,1000620 <Line+0x80>
 1000614:	e0bff817 	ldw	r2,-32(fp)
 1000618:	0085c83a 	sub	r2,zero,r2
 100061c:	e0bff815 	stw	r2,-32(fp)

    int s1 = sign(x2 - x1);
 1000620:	e0fffe17 	ldw	r3,-8(fp)
 1000624:	e0bffc17 	ldw	r2,-16(fp)
 1000628:	1889c83a 	sub	r4,r3,r2
 100062c:	10005480 	call	1000548 <sign>
 1000630:	e0bff715 	stw	r2,-36(fp)
    int s2 = sign(y2 - y1);
 1000634:	e0ffff17 	ldw	r3,-4(fp)
 1000638:	e0bffd17 	ldw	r2,-12(fp)
 100063c:	1889c83a 	sub	r4,r3,r2
 1000640:	10005480 	call	1000548 <sign>
 1000644:	e0bff615 	stw	r2,-40(fp)
    int i, temp, interchange = 0, error ;
 1000648:	e03ff315 	stw	zero,-52(fp)

// if x1=x2 and y1=y2 then it is a line of zero length

    if(dx == 0 && dy == 0)
 100064c:	e0bff917 	ldw	r2,-28(fp)
 1000650:	1004c03a 	cmpne	r2,r2,zero
 1000654:	1000041e 	bne	r2,zero,1000668 <Line+0xc8>
 1000658:	e0bff817 	ldw	r2,-32(fp)
 100065c:	1004c03a 	cmpne	r2,r2,zero
 1000660:	1000011e 	bne	r2,zero,1000668 <Line+0xc8>
        return ;
 1000664:	00004606 	br	1000780 <Line+0x1e0>
 // must be a complex line so use bresenhams algorithm
    else    {

// swap delta x and delta y depending upon slop of line

        if(dy > dx) {
 1000668:	e0fff817 	ldw	r3,-32(fp)
 100066c:	e0bff917 	ldw	r2,-28(fp)
 1000670:	10c0080e 	bge	r2,r3,1000694 <Line+0xf4>
            temp = dx ;
 1000674:	e0bff917 	ldw	r2,-28(fp)
 1000678:	e0bff415 	stw	r2,-48(fp)
            dx = dy ;
 100067c:	e0bff817 	ldw	r2,-32(fp)
 1000680:	e0bff915 	stw	r2,-28(fp)
            dy = temp ;
 1000684:	e0bff417 	ldw	r2,-48(fp)
 1000688:	e0bff815 	stw	r2,-32(fp)
            interchange = 1 ;
 100068c:	00800044 	movi	r2,1
 1000690:	e0bff315 	stw	r2,-52(fp)
        }

// initialise the error term to compensate for non-zero intercept

        error = (dy << 1) - dx ;    // (2 * dy) - dx
 1000694:	e0bff817 	ldw	r2,-32(fp)
 1000698:	1085883a 	add	r2,r2,r2
 100069c:	1007883a 	mov	r3,r2
 10006a0:	e0bff917 	ldw	r2,-28(fp)
 10006a4:	1885c83a 	sub	r2,r3,r2
 10006a8:	e0bff215 	stw	r2,-56(fp)

// main loop
        for(i = 1; i <= dx; i++)    {
 10006ac:	00800044 	movi	r2,1
 10006b0:	e0bff515 	stw	r2,-44(fp)
 10006b4:	00002f06 	br	1000774 <Line+0x1d4>
            WriteAPixel(x, y, Colour);
 10006b8:	e13ffb17 	ldw	r4,-20(fp)
 10006bc:	e17ffa17 	ldw	r5,-24(fp)
 10006c0:	e1800217 	ldw	r6,8(fp)
 10006c4:	10002040 	call	1000204 <WriteAPixel>

            while(error >= 0)   {
 10006c8:	00001206 	br	1000714 <Line+0x174>
                if(interchange == 1)
 10006cc:	e0bff317 	ldw	r2,-52(fp)
 10006d0:	10800058 	cmpnei	r2,r2,1
 10006d4:	1000051e 	bne	r2,zero,10006ec <Line+0x14c>
                    x += s1 ;
 10006d8:	e0bffb17 	ldw	r2,-20(fp)
 10006dc:	e0fff717 	ldw	r3,-36(fp)
 10006e0:	10c5883a 	add	r2,r2,r3
 10006e4:	e0bffb15 	stw	r2,-20(fp)
 10006e8:	00000406 	br	10006fc <Line+0x15c>
                else
                    y += s2 ;
 10006ec:	e0bffa17 	ldw	r2,-24(fp)
 10006f0:	e0fff617 	ldw	r3,-40(fp)
 10006f4:	10c5883a 	add	r2,r2,r3
 10006f8:	e0bffa15 	stw	r2,-24(fp)

                error -= (dx << 1) ;    // times 2
 10006fc:	e0bff917 	ldw	r2,-28(fp)
 1000700:	1085883a 	add	r2,r2,r2
 1000704:	1007883a 	mov	r3,r2
 1000708:	e0bff217 	ldw	r2,-56(fp)
 100070c:	10c5c83a 	sub	r2,r2,r3
 1000710:	e0bff215 	stw	r2,-56(fp)

// main loop
        for(i = 1; i <= dx; i++)    {
            WriteAPixel(x, y, Colour);

            while(error >= 0)   {
 1000714:	e0bff217 	ldw	r2,-56(fp)
 1000718:	1004403a 	cmpge	r2,r2,zero
 100071c:	103feb1e 	bne	r2,zero,10006cc <Line+0x12c>
                    y += s2 ;

                error -= (dx << 1) ;    // times 2
            }

            if(interchange == 1)
 1000720:	e0bff317 	ldw	r2,-52(fp)
 1000724:	10800058 	cmpnei	r2,r2,1
 1000728:	1000051e 	bne	r2,zero,1000740 <Line+0x1a0>
                y += s2 ;
 100072c:	e0bffa17 	ldw	r2,-24(fp)
 1000730:	e0fff617 	ldw	r3,-40(fp)
 1000734:	10c5883a 	add	r2,r2,r3
 1000738:	e0bffa15 	stw	r2,-24(fp)
 100073c:	00000406 	br	1000750 <Line+0x1b0>
            else
                x += s1 ;
 1000740:	e0bffb17 	ldw	r2,-20(fp)
 1000744:	e0fff717 	ldw	r3,-36(fp)
 1000748:	10c5883a 	add	r2,r2,r3
 100074c:	e0bffb15 	stw	r2,-20(fp)

            error += (dy << 1) ;    // times 2
 1000750:	e0bff817 	ldw	r2,-32(fp)
 1000754:	1085883a 	add	r2,r2,r2
 1000758:	1007883a 	mov	r3,r2
 100075c:	e0bff217 	ldw	r2,-56(fp)
 1000760:	10c5883a 	add	r2,r2,r3
 1000764:	e0bff215 	stw	r2,-56(fp)
// initialise the error term to compensate for non-zero intercept

        error = (dy << 1) - dx ;    // (2 * dy) - dx

// main loop
        for(i = 1; i <= dx; i++)    {
 1000768:	e0bff517 	ldw	r2,-44(fp)
 100076c:	10800044 	addi	r2,r2,1
 1000770:	e0bff515 	stw	r2,-44(fp)
 1000774:	e0fff517 	ldw	r3,-44(fp)
 1000778:	e0bff917 	ldw	r2,-28(fp)
 100077c:	10ffce0e 	bge	r2,r3,10006b8 <Line+0x118>
                x += s1 ;

            error += (dy << 1) ;    // times 2
        }
    }
}
 1000780:	e037883a 	mov	sp,fp
 1000784:	dfc00117 	ldw	ra,4(sp)
 1000788:	df000017 	ldw	fp,0(sp)
 100078c:	dec00204 	addi	sp,sp,8
 1000790:	f800283a 	ret

01000794 <DrawRec>:

void DrawRec(int x1, int y1, int x2, int y2, int Colour){
 1000794:	defff604 	addi	sp,sp,-40
 1000798:	dfc00915 	stw	ra,36(sp)
 100079c:	df000815 	stw	fp,32(sp)
 10007a0:	df000804 	addi	fp,sp,32
 10007a4:	e13ff815 	stw	r4,-32(fp)
 10007a8:	e17ff915 	stw	r5,-28(fp)
 10007ac:	e1bffa15 	stw	r6,-24(fp)
 10007b0:	e1fffb15 	stw	r7,-20(fp)

	HLine(x1, y1, abs(x2 - x1), Colour);
 10007b4:	e0fffa17 	ldw	r3,-24(fp)
 10007b8:	e0bff817 	ldw	r2,-32(fp)
 10007bc:	1885c83a 	sub	r2,r3,r2
 10007c0:	e0bfff15 	stw	r2,-4(fp)
 10007c4:	e0ffff17 	ldw	r3,-4(fp)
 10007c8:	1804403a 	cmpge	r2,r3,zero
 10007cc:	1000031e 	bne	r2,zero,10007dc <DrawRec+0x48>
 10007d0:	e0bfff17 	ldw	r2,-4(fp)
 10007d4:	0085c83a 	sub	r2,zero,r2
 10007d8:	e0bfff15 	stw	r2,-4(fp)
 10007dc:	e13ff817 	ldw	r4,-32(fp)
 10007e0:	e17ff917 	ldw	r5,-28(fp)
 10007e4:	e1bfff17 	ldw	r6,-4(fp)
 10007e8:	e1c00217 	ldw	r7,8(fp)
 10007ec:	100038c0 	call	100038c <HLine>
	HLine(x1, y2, abs(x2 - x1), Colour);
 10007f0:	e0fffa17 	ldw	r3,-24(fp)
 10007f4:	e0bff817 	ldw	r2,-32(fp)
 10007f8:	1885c83a 	sub	r2,r3,r2
 10007fc:	e0bffe15 	stw	r2,-8(fp)
 1000800:	e0fffe17 	ldw	r3,-8(fp)
 1000804:	1804403a 	cmpge	r2,r3,zero
 1000808:	1000031e 	bne	r2,zero,1000818 <DrawRec+0x84>
 100080c:	e0bffe17 	ldw	r2,-8(fp)
 1000810:	0085c83a 	sub	r2,zero,r2
 1000814:	e0bffe15 	stw	r2,-8(fp)
 1000818:	e13ff817 	ldw	r4,-32(fp)
 100081c:	e17ffb17 	ldw	r5,-20(fp)
 1000820:	e1bffe17 	ldw	r6,-8(fp)
 1000824:	e1c00217 	ldw	r7,8(fp)
 1000828:	100038c0 	call	100038c <HLine>
	VLine(x1, y1, abs(y2 - y1), Colour);
 100082c:	e0fffb17 	ldw	r3,-20(fp)
 1000830:	e0bff917 	ldw	r2,-28(fp)
 1000834:	1885c83a 	sub	r2,r3,r2
 1000838:	e0bffd15 	stw	r2,-12(fp)
 100083c:	e0fffd17 	ldw	r3,-12(fp)
 1000840:	1804403a 	cmpge	r2,r3,zero
 1000844:	1000031e 	bne	r2,zero,1000854 <DrawRec+0xc0>
 1000848:	e0bffd17 	ldw	r2,-12(fp)
 100084c:	0085c83a 	sub	r2,zero,r2
 1000850:	e0bffd15 	stw	r2,-12(fp)
 1000854:	e13ff817 	ldw	r4,-32(fp)
 1000858:	e17ff917 	ldw	r5,-28(fp)
 100085c:	e1bffd17 	ldw	r6,-12(fp)
 1000860:	e1c00217 	ldw	r7,8(fp)
 1000864:	10004400 	call	1000440 <VLine>
	VLine(x2, y1, abs(y2 - y1), Colour);
 1000868:	e0fffb17 	ldw	r3,-20(fp)
 100086c:	e0bff917 	ldw	r2,-28(fp)
 1000870:	1885c83a 	sub	r2,r3,r2
 1000874:	e0bffc15 	stw	r2,-16(fp)
 1000878:	e0fffc17 	ldw	r3,-16(fp)
 100087c:	1804403a 	cmpge	r2,r3,zero
 1000880:	1000031e 	bne	r2,zero,1000890 <DrawRec+0xfc>
 1000884:	e0bffc17 	ldw	r2,-16(fp)
 1000888:	0085c83a 	sub	r2,zero,r2
 100088c:	e0bffc15 	stw	r2,-16(fp)
 1000890:	e13ffa17 	ldw	r4,-24(fp)
 1000894:	e17ff917 	ldw	r5,-28(fp)
 1000898:	e1bffc17 	ldw	r6,-16(fp)
 100089c:	e1c00217 	ldw	r7,8(fp)
 10008a0:	10004400 	call	1000440 <VLine>

}
 10008a4:	e037883a 	mov	sp,fp
 10008a8:	dfc00117 	ldw	ra,4(sp)
 10008ac:	df000017 	ldw	fp,0(sp)
 10008b0:	dec00204 	addi	sp,sp,8
 10008b4:	f800283a 	ret

010008b8 <DrawTri>:
void DrawTri(int x1, int y1, int x2, int y2, int x3, int y3, int Colour){
 10008b8:	defff904 	addi	sp,sp,-28
 10008bc:	dfc00615 	stw	ra,24(sp)
 10008c0:	df000515 	stw	fp,20(sp)
 10008c4:	df000504 	addi	fp,sp,20
 10008c8:	e13ffc15 	stw	r4,-16(fp)
 10008cc:	e17ffd15 	stw	r5,-12(fp)
 10008d0:	e1bffe15 	stw	r6,-8(fp)
 10008d4:	e1ffff15 	stw	r7,-4(fp)

	Line(x1, y1, x2, y2, Colour);
 10008d8:	e0800417 	ldw	r2,16(fp)
 10008dc:	d8800015 	stw	r2,0(sp)
 10008e0:	e13ffc17 	ldw	r4,-16(fp)
 10008e4:	e17ffd17 	ldw	r5,-12(fp)
 10008e8:	e1bffe17 	ldw	r6,-8(fp)
 10008ec:	e1ffff17 	ldw	r7,-4(fp)
 10008f0:	10005a00 	call	10005a0 <Line>
	Line(x1, y1, x3, y3, Colour);
 10008f4:	e0800417 	ldw	r2,16(fp)
 10008f8:	d8800015 	stw	r2,0(sp)
 10008fc:	e13ffc17 	ldw	r4,-16(fp)
 1000900:	e17ffd17 	ldw	r5,-12(fp)
 1000904:	e1800217 	ldw	r6,8(fp)
 1000908:	e1c00317 	ldw	r7,12(fp)
 100090c:	10005a00 	call	10005a0 <Line>
	Line(x2, y2, x3, y3, Colour);
 1000910:	e0800417 	ldw	r2,16(fp)
 1000914:	d8800015 	stw	r2,0(sp)
 1000918:	e13ffe17 	ldw	r4,-8(fp)
 100091c:	e17fff17 	ldw	r5,-4(fp)
 1000920:	e1800217 	ldw	r6,8(fp)
 1000924:	e1c00317 	ldw	r7,12(fp)
 1000928:	10005a00 	call	10005a0 <Line>

}
 100092c:	e037883a 	mov	sp,fp
 1000930:	dfc00117 	ldw	ra,4(sp)
 1000934:	df000017 	ldw	fp,0(sp)
 1000938:	dec00204 	addi	sp,sp,8
 100093c:	f800283a 	ret

01000940 <DrawSq>:
void DrawSq(int x1, int y1, int length, int Colour){
 1000940:	defffa04 	addi	sp,sp,-24
 1000944:	dfc00515 	stw	ra,20(sp)
 1000948:	df000415 	stw	fp,16(sp)
 100094c:	df000404 	addi	fp,sp,16
 1000950:	e13ffc15 	stw	r4,-16(fp)
 1000954:	e17ffd15 	stw	r5,-12(fp)
 1000958:	e1bffe15 	stw	r6,-8(fp)
 100095c:	e1ffff15 	stw	r7,-4(fp)

	HLine(x1, y1, length, Colour);
 1000960:	e13ffc17 	ldw	r4,-16(fp)
 1000964:	e17ffd17 	ldw	r5,-12(fp)
 1000968:	e1bffe17 	ldw	r6,-8(fp)
 100096c:	e1ffff17 	ldw	r7,-4(fp)
 1000970:	100038c0 	call	100038c <HLine>
	HLine(x1, y1 + length, length, Colour);
 1000974:	e0fffd17 	ldw	r3,-12(fp)
 1000978:	e0bffe17 	ldw	r2,-8(fp)
 100097c:	188b883a 	add	r5,r3,r2
 1000980:	e13ffc17 	ldw	r4,-16(fp)
 1000984:	e1bffe17 	ldw	r6,-8(fp)
 1000988:	e1ffff17 	ldw	r7,-4(fp)
 100098c:	100038c0 	call	100038c <HLine>
	VLine(x1, y1, length, Colour);
 1000990:	e13ffc17 	ldw	r4,-16(fp)
 1000994:	e17ffd17 	ldw	r5,-12(fp)
 1000998:	e1bffe17 	ldw	r6,-8(fp)
 100099c:	e1ffff17 	ldw	r7,-4(fp)
 10009a0:	10004400 	call	1000440 <VLine>
	VLine(x1 + length, y1, length, Colour);
 10009a4:	e0fffc17 	ldw	r3,-16(fp)
 10009a8:	e0bffe17 	ldw	r2,-8(fp)
 10009ac:	1889883a 	add	r4,r3,r2
 10009b0:	e17ffd17 	ldw	r5,-12(fp)
 10009b4:	e1bffe17 	ldw	r6,-8(fp)
 10009b8:	e1ffff17 	ldw	r7,-4(fp)
 10009bc:	10004400 	call	1000440 <VLine>

}
 10009c0:	e037883a 	mov	sp,fp
 10009c4:	dfc00117 	ldw	ra,4(sp)
 10009c8:	df000017 	ldw	fp,0(sp)
 10009cc:	dec00204 	addi	sp,sp,8
 10009d0:	f800283a 	ret

010009d4 <DrawCir>:

// Bresenhams Circle Drawing Algorithm
void DrawCir(int x1, int y1, int radius, int Colour){
 10009d4:	defff704 	addi	sp,sp,-36
 10009d8:	dfc00815 	stw	ra,32(sp)
 10009dc:	df000715 	stw	fp,28(sp)
 10009e0:	df000704 	addi	fp,sp,28
 10009e4:	e13ffc15 	stw	r4,-16(fp)
 10009e8:	e17ffd15 	stw	r5,-12(fp)
 10009ec:	e1bffe15 	stw	r6,-8(fp)
 10009f0:	e1ffff15 	stw	r7,-4(fp)
	int x = radius;
 10009f4:	e0bffe17 	ldw	r2,-8(fp)
 10009f8:	e0bffb15 	stw	r2,-20(fp)
	int y = 0;
 10009fc:	e03ffa15 	stw	zero,-24(fp)
	int decision = 1 - x;
 1000a00:	00c00044 	movi	r3,1
 1000a04:	e0bffb17 	ldw	r2,-20(fp)
 1000a08:	1885c83a 	sub	r2,r3,r2
 1000a0c:	e0bff915 	stw	r2,-28(fp)

	while( y <= x ){
 1000a10:	00005a06 	br	1000b7c <DrawCir+0x1a8>
		WriteAPixel( x + x1,  y + y1, Colour); // Octant 1
 1000a14:	e0fffb17 	ldw	r3,-20(fp)
 1000a18:	e0bffc17 	ldw	r2,-16(fp)
 1000a1c:	1889883a 	add	r4,r3,r2
 1000a20:	e0fffa17 	ldw	r3,-24(fp)
 1000a24:	e0bffd17 	ldw	r2,-12(fp)
 1000a28:	188b883a 	add	r5,r3,r2
 1000a2c:	e1bfff17 	ldw	r6,-4(fp)
 1000a30:	10002040 	call	1000204 <WriteAPixel>
		WriteAPixel( y + x1,  x + y1, Colour); // Octant 2
 1000a34:	e0fffa17 	ldw	r3,-24(fp)
 1000a38:	e0bffc17 	ldw	r2,-16(fp)
 1000a3c:	1889883a 	add	r4,r3,r2
 1000a40:	e0fffb17 	ldw	r3,-20(fp)
 1000a44:	e0bffd17 	ldw	r2,-12(fp)
 1000a48:	188b883a 	add	r5,r3,r2
 1000a4c:	e1bfff17 	ldw	r6,-4(fp)
 1000a50:	10002040 	call	1000204 <WriteAPixel>
		WriteAPixel(-x + x1,  y + y1, Colour); // Octant 4
 1000a54:	e0fffc17 	ldw	r3,-16(fp)
 1000a58:	e0bffb17 	ldw	r2,-20(fp)
 1000a5c:	1889c83a 	sub	r4,r3,r2
 1000a60:	e0fffa17 	ldw	r3,-24(fp)
 1000a64:	e0bffd17 	ldw	r2,-12(fp)
 1000a68:	188b883a 	add	r5,r3,r2
 1000a6c:	e1bfff17 	ldw	r6,-4(fp)
 1000a70:	10002040 	call	1000204 <WriteAPixel>
		WriteAPixel(-y + x1,  x + y1, Colour); // Octant 3
 1000a74:	e0fffc17 	ldw	r3,-16(fp)
 1000a78:	e0bffa17 	ldw	r2,-24(fp)
 1000a7c:	1889c83a 	sub	r4,r3,r2
 1000a80:	e0fffb17 	ldw	r3,-20(fp)
 1000a84:	e0bffd17 	ldw	r2,-12(fp)
 1000a88:	188b883a 	add	r5,r3,r2
 1000a8c:	e1bfff17 	ldw	r6,-4(fp)
 1000a90:	10002040 	call	1000204 <WriteAPixel>
		WriteAPixel(-x + x1, -y + y1, Colour); // Octant 5
 1000a94:	e0fffc17 	ldw	r3,-16(fp)
 1000a98:	e0bffb17 	ldw	r2,-20(fp)
 1000a9c:	1889c83a 	sub	r4,r3,r2
 1000aa0:	e0fffd17 	ldw	r3,-12(fp)
 1000aa4:	e0bffa17 	ldw	r2,-24(fp)
 1000aa8:	188bc83a 	sub	r5,r3,r2
 1000aac:	e1bfff17 	ldw	r6,-4(fp)
 1000ab0:	10002040 	call	1000204 <WriteAPixel>
		WriteAPixel(-y + x1, -x + y1, Colour); // Octant 6
 1000ab4:	e0fffc17 	ldw	r3,-16(fp)
 1000ab8:	e0bffa17 	ldw	r2,-24(fp)
 1000abc:	1889c83a 	sub	r4,r3,r2
 1000ac0:	e0fffd17 	ldw	r3,-12(fp)
 1000ac4:	e0bffb17 	ldw	r2,-20(fp)
 1000ac8:	188bc83a 	sub	r5,r3,r2
 1000acc:	e1bfff17 	ldw	r6,-4(fp)
 1000ad0:	10002040 	call	1000204 <WriteAPixel>
		WriteAPixel( x + x1, -y + y1, Colour); // Octant 7
 1000ad4:	e0fffb17 	ldw	r3,-20(fp)
 1000ad8:	e0bffc17 	ldw	r2,-16(fp)
 1000adc:	1889883a 	add	r4,r3,r2
 1000ae0:	e0fffd17 	ldw	r3,-12(fp)
 1000ae4:	e0bffa17 	ldw	r2,-24(fp)
 1000ae8:	188bc83a 	sub	r5,r3,r2
 1000aec:	e1bfff17 	ldw	r6,-4(fp)
 1000af0:	10002040 	call	1000204 <WriteAPixel>
		WriteAPixel( y + x1, -x + y1, Colour); // Octant 8
 1000af4:	e0fffa17 	ldw	r3,-24(fp)
 1000af8:	e0bffc17 	ldw	r2,-16(fp)
 1000afc:	1889883a 	add	r4,r3,r2
 1000b00:	e0fffd17 	ldw	r3,-12(fp)
 1000b04:	e0bffb17 	ldw	r2,-20(fp)
 1000b08:	188bc83a 	sub	r5,r3,r2
 1000b0c:	e1bfff17 	ldw	r6,-4(fp)
 1000b10:	10002040 	call	1000204 <WriteAPixel>
		y++;
 1000b14:	e0bffa17 	ldw	r2,-24(fp)
 1000b18:	10800044 	addi	r2,r2,1
 1000b1c:	e0bffa15 	stw	r2,-24(fp)
		if(decision <= 0 ){
 1000b20:	e0bff917 	ldw	r2,-28(fp)
 1000b24:	10800048 	cmpgei	r2,r2,1
 1000b28:	1000081e 	bne	r2,zero,1000b4c <DrawCir+0x178>
			decision += 2 * y + 1;
 1000b2c:	e0bffa17 	ldw	r2,-24(fp)
 1000b30:	1085883a 	add	r2,r2,r2
 1000b34:	1007883a 	mov	r3,r2
 1000b38:	e0bff917 	ldw	r2,-28(fp)
 1000b3c:	1885883a 	add	r2,r3,r2
 1000b40:	10800044 	addi	r2,r2,1
 1000b44:	e0bff915 	stw	r2,-28(fp)
 1000b48:	00000c06 	br	1000b7c <DrawCir+0x1a8>
		}else{
			x--;
 1000b4c:	e0bffb17 	ldw	r2,-20(fp)
 1000b50:	10bfffc4 	addi	r2,r2,-1
 1000b54:	e0bffb15 	stw	r2,-20(fp)
			decision += 2 * (y - x) + 1;
 1000b58:	e0fffa17 	ldw	r3,-24(fp)
 1000b5c:	e0bffb17 	ldw	r2,-20(fp)
 1000b60:	1885c83a 	sub	r2,r3,r2
 1000b64:	1085883a 	add	r2,r2,r2
 1000b68:	1007883a 	mov	r3,r2
 1000b6c:	e0bff917 	ldw	r2,-28(fp)
 1000b70:	1885883a 	add	r2,r3,r2
 1000b74:	10800044 	addi	r2,r2,1
 1000b78:	e0bff915 	stw	r2,-28(fp)
void DrawCir(int x1, int y1, int radius, int Colour){
	int x = radius;
	int y = 0;
	int decision = 1 - x;

	while( y <= x ){
 1000b7c:	e0fffa17 	ldw	r3,-24(fp)
 1000b80:	e0bffb17 	ldw	r2,-20(fp)
 1000b84:	10ffa30e 	bge	r2,r3,1000a14 <DrawCir+0x40>
		}else{
			x--;
			decision += 2 * (y - x) + 1;
		}
	}
}
 1000b88:	e037883a 	mov	sp,fp
 1000b8c:	dfc00117 	ldw	ra,4(sp)
 1000b90:	df000017 	ldw	fp,0(sp)
 1000b94:	dec00204 	addi	sp,sp,8
 1000b98:	f800283a 	ret

01000b9c <main>:
int startmin;
int endhour;
int endmin;
char sendlats[1000];

int main() {
 1000b9c:	deffe804 	addi	sp,sp,-96
 1000ba0:	dfc01715 	stw	ra,92(sp)
 1000ba4:	df001615 	stw	fp,88(sp)
 1000ba8:	df001604 	addi	fp,sp,88
	currentState = WELCOME;
 1000bac:	d0270015 	stw	zero,-25600(gp)
	init_BT();
 1000bb0:	100440c0 	call	100440c <init_BT>
	Init_LCD(); //initialize LCD
 1000bb4:	1007ca40 	call	1007ca4 <Init_LCD>
	Init_Touch(); //initialize Touchscreen
 1000bb8:	1007d1c0 	call	1007d1c <Init_Touch>
	init_GPS();
 1000bbc:	10013080 	call	1001308 <init_GPS>
	clearScreen();
 1000bc0:	10051f00 	call	10051f0 <clearScreen>
	init(&lastStates); //initialize stack
 1000bc4:	010040f4 	movhi	r4,259
 1000bc8:	212dcc04 	addi	r4,r4,-18640
 1000bcc:	10072c80 	call	10072c8 <init>

	profile p;
	profile_init(&p);
 1000bd0:	e13fea04 	addi	r4,fp,-88
 1000bd4:	1006b8c0 	call	1006b8c <profile_init>
	set_name(&p, "Jimmy");
 1000bd8:	e13fea04 	addi	r4,fp,-88
 1000bdc:	014040b4 	movhi	r5,258
 1000be0:	29480b04 	addi	r5,r5,8236
 1000be4:	1006c040 	call	1006c04 <set_name>
	set_gender(&p, 1);
 1000be8:	e13fea04 	addi	r4,fp,-88
 1000bec:	01400044 	movi	r5,1
 1000bf0:	1006c4c0 	call	1006c4c <set_gender>
	set_age(&p, 20);
 1000bf4:	e13fea04 	addi	r4,fp,-88
 1000bf8:	01400504 	movi	r5,20
 1000bfc:	1006c880 	call	1006c88 <set_age>
	set_weight(&p, 55);
 1000c00:	e13fea04 	addi	r4,fp,-88
 1000c04:	01509734 	movhi	r5,16988
 1000c08:	1006cc40 	call	1006cc4 <set_weight>
	set_height(&p, 1.7);
 1000c0c:	e13fea04 	addi	r4,fp,-88
 1000c10:	014ff6b4 	movhi	r5,16346
 1000c14:	29666684 	addi	r5,r5,-26214
 1000c18:	1006d000 	call	1006d00 <set_height>
	p.bmi = calc_bmi(&p);
 1000c1c:	e13fea04 	addi	r4,fp,-88
 1000c20:	1006d3c0 	call	1006d3c <calc_bmi>
 1000c24:	e0bfef15 	stw	r2,-68(fp)
	 distance = distance*1000;
	 printf("\ndistance is %f metres", distance);

	 printf("\nstarting writetobt");*/

	printf("program starting");
 1000c28:	010040b4 	movhi	r4,258
 1000c2c:	21080d04 	addi	r4,r4,8244
 1000c30:	100df0c0 	call	100df0c <printf>
 1000c34:	00000006 	br	1000c38 <main+0x9c>
	while (1) {
		if (currentState == WELCOME) {
 1000c38:	d0a70017 	ldw	r2,-25600(gp)
 1000c3c:	1004c03a 	cmpne	r2,r2,zero
 1000c40:	1000031e 	bne	r2,zero,1000c50 <main+0xb4>
			drawWelcome();
 1000c44:	10055d40 	call	10055d4 <drawWelcome>
			Welcome();
 1000c48:	10076d00 	call	10076d0 <Welcome>
 1000c4c:	003ffa06 	br	1000c38 <main+0x9c>
		} else if (currentState == HOME) {
 1000c50:	d0a70017 	ldw	r2,-25600(gp)
 1000c54:	10800058 	cmpnei	r2,r2,1
 1000c58:	1000031e 	bne	r2,zero,1000c68 <main+0xcc>
			drawHome();
 1000c5c:	10056940 	call	1005694 <drawHome>
			Home();
 1000c60:	10077780 	call	1007778 <Home>
 1000c64:	003ff406 	br	1000c38 <main+0x9c>
		} else if (currentState == STARTRUN) {
 1000c68:	d0a70017 	ldw	r2,-25600(gp)
 1000c6c:	10800098 	cmpnei	r2,r2,2
 1000c70:	1000031e 	bne	r2,zero,1000c80 <main+0xe4>
			drawStartRun();
 1000c74:	10057f00 	call	10057f0 <drawStartRun>
			StartRun();
 1000c78:	100799c0 	call	100799c <StartRun>
 1000c7c:	003fee06 	br	1000c38 <main+0x9c>
		} else if (currentState == ENDRUN) {
 1000c80:	d0a70017 	ldw	r2,-25600(gp)
 1000c84:	108000d8 	cmpnei	r2,r2,3
 1000c88:	1000031e 	bne	r2,zero,1000c98 <main+0xfc>
			drawEndRun();
 1000c8c:	100588c0 	call	100588c <drawEndRun>
			EndRun();
 1000c90:	1007a880 	call	1007a88 <EndRun>
 1000c94:	003fe806 	br	1000c38 <main+0x9c>
		} else if (currentState == STATS) {
 1000c98:	d0a70017 	ldw	r2,-25600(gp)
 1000c9c:	10800118 	cmpnei	r2,r2,4
 1000ca0:	1000031e 	bne	r2,zero,1000cb0 <main+0x114>
			drawStats();
 1000ca4:	10059300 	call	1005930 <drawStats>
			Stats();
 1000ca8:	1007ae00 	call	1007ae0 <Stats>
 1000cac:	003fe206 	br	1000c38 <main+0x9c>
		} else if (currentState == PROFILE) {
 1000cb0:	d0a70017 	ldw	r2,-25600(gp)
 1000cb4:	10800158 	cmpnei	r2,r2,5
 1000cb8:	1000041e 	bne	r2,zero,1000ccc <main+0x130>
			//receivebtData();
			drawProfile(&p);
 1000cbc:	e13fea04 	addi	r4,fp,-88
 1000cc0:	100671c0 	call	100671c <drawProfile>
			Profile();
 1000cc4:	1007ba00 	call	1007ba0 <Profile>
 1000cc8:	003fdb06 	br	1000c38 <main+0x9c>
		} else if (currentState == SYNC) {
 1000ccc:	d0a70017 	ldw	r2,-25600(gp)
 1000cd0:	10800198 	cmpnei	r2,r2,6
 1000cd4:	1000031e 	bne	r2,zero,1000ce4 <main+0x148>
			drawSync();
 1000cd8:	1006b340 	call	1006b34 <drawSync>
			Sync();
 1000cdc:	1007c6c0 	call	1007c6c <Sync>
 1000ce0:	003fd506 	br	1000c38 <main+0x9c>
		} else {
			currentState = WELCOME;
 1000ce4:	d0270015 	stw	zero,-25600(gp)
		}

	}
 1000ce8:	003fd306 	br	1000c38 <main+0x9c>

01000cec <PushPixel>:
* simple stack based around an array
* Used for FILL algorithm
******************************************************************************************************************************/

int PushPixel(XYPixel p1)
{
 1000cec:	defffc04 	addi	sp,sp,-16
 1000cf0:	df000315 	stw	fp,12(sp)
 1000cf4:	df000304 	addi	fp,sp,12
 1000cf8:	e13ffd15 	stw	r4,-12(fp)
 1000cfc:	e17ffe15 	stw	r5,-8(fp)
    if(Next <= &XYStack[1000]) {
 1000d00:	d0e00017 	ldw	r3,-32768(gp)
 1000d04:	00804234 	movhi	r2,264
 1000d08:	10ab6104 	addi	r2,r2,-21116
 1000d0c:	10c00936 	bltu	r2,r3,1000d34 <PushPixel+0x48>
        *Next++ = p1;
 1000d10:	d0e00017 	ldw	r3,-32768(gp)
 1000d14:	e0bffd17 	ldw	r2,-12(fp)
 1000d18:	18800015 	stw	r2,0(r3)
 1000d1c:	e0bffe17 	ldw	r2,-8(fp)
 1000d20:	18800115 	stw	r2,4(r3)
 1000d24:	18800204 	addi	r2,r3,8
 1000d28:	d0a00015 	stw	r2,-32768(gp)
        return 0 ;
 1000d2c:	e03fff15 	stw	zero,-4(fp)
 1000d30:	00000206 	br	1000d3c <PushPixel+0x50>
    }
    else
        return -1 ;
 1000d34:	00bfffc4 	movi	r2,-1
 1000d38:	e0bfff15 	stw	r2,-4(fp)
 1000d3c:	e0bfff17 	ldw	r2,-4(fp)
}
 1000d40:	e037883a 	mov	sp,fp
 1000d44:	df000017 	ldw	fp,0(sp)
 1000d48:	dec00104 	addi	sp,sp,4
 1000d4c:	f800283a 	ret

01000d50 <PopPixel>:

int PopPixel(XYPixel *theXYPixel)
{
 1000d50:	defffd04 	addi	sp,sp,-12
 1000d54:	df000215 	stw	fp,8(sp)
 1000d58:	df000204 	addi	fp,sp,8
 1000d5c:	e13ffe15 	stw	r4,-8(fp)
    if(Next >= XYStack) {
 1000d60:	d0e00017 	ldw	r3,-32768(gp)
 1000d64:	00804234 	movhi	r2,264
 1000d68:	10a39104 	addi	r2,r2,-29116
 1000d6c:	18800b36 	bltu	r3,r2,1000d9c <PopPixel+0x4c>
        *theXYPixel = *(--Next);
 1000d70:	d0a00017 	ldw	r2,-32768(gp)
 1000d74:	10bffe04 	addi	r2,r2,-8
 1000d78:	d0a00015 	stw	r2,-32768(gp)
 1000d7c:	d1200017 	ldw	r4,-32768(gp)
 1000d80:	20800017 	ldw	r2,0(r4)
 1000d84:	20c00117 	ldw	r3,4(r4)
 1000d88:	e13ffe17 	ldw	r4,-8(fp)
 1000d8c:	20800015 	stw	r2,0(r4)
 1000d90:	20c00115 	stw	r3,4(r4)
        return 0 ;
 1000d94:	e03fff15 	stw	zero,-4(fp)
 1000d98:	00000206 	br	1000da4 <PopPixel+0x54>
    }
    else
        return -1 ;
 1000d9c:	00bfffc4 	movi	r2,-1
 1000da0:	e0bfff15 	stw	r2,-4(fp)
 1000da4:	e0bfff17 	ldw	r2,-4(fp)
}
 1000da8:	e037883a 	mov	sp,fp
 1000dac:	df000017 	ldw	fp,0(sp)
 1000db0:	dec00104 	addi	sp,sp,4
 1000db4:	f800283a 	ret

01000db8 <IsStackEmpty>:

int IsStackEmpty(void)
{
 1000db8:	defffe04 	addi	sp,sp,-8
 1000dbc:	df000115 	stw	fp,4(sp)
 1000dc0:	df000104 	addi	fp,sp,4
    if(Next == XYStack)
 1000dc4:	d0e00017 	ldw	r3,-32768(gp)
 1000dc8:	00804234 	movhi	r2,264
 1000dcc:	10a39104 	addi	r2,r2,-29116
 1000dd0:	1880031e 	bne	r3,r2,1000de0 <IsStackEmpty+0x28>
        return 1 ;
 1000dd4:	00800044 	movi	r2,1
 1000dd8:	e0bfff15 	stw	r2,-4(fp)
 1000ddc:	00000106 	br	1000de4 <IsStackEmpty+0x2c>
    else
        return 0 ;
 1000de0:	e03fff15 	stw	zero,-4(fp)
 1000de4:	e0bfff17 	ldw	r2,-4(fp)
}
 1000de8:	e037883a 	mov	sp,fp
 1000dec:	df000017 	ldw	fp,0(sp)
 1000df0:	dec00104 	addi	sp,sp,4
 1000df4:	f800283a 	ret

01000df8 <Fill>:
/********************************************************************************************
** Implementation of a Scan Line Seed Fill Algorithm
** Taken from Procedural Elements of Computer Graphics: David Rogers
********************************************************************************************/
void Fill(int _x, int _y, int _FillColour, int _BoundaryColour)
{
 1000df8:	deffed04 	addi	sp,sp,-76
 1000dfc:	dfc01215 	stw	ra,72(sp)
 1000e00:	df001115 	stw	fp,68(sp)
 1000e04:	df001104 	addi	fp,sp,68
 1000e08:	e13ff715 	stw	r4,-36(fp)
 1000e0c:	e17ff815 	stw	r5,-32(fp)
 1000e10:	e1bff915 	stw	r6,-28(fp)
 1000e14:	e1fffa15 	stw	r7,-24(fp)
    register int     x, y ;
    register int     BoundaryColour = _BoundaryColour;
 1000e18:	e0bffa17 	ldw	r2,-24(fp)
 1000e1c:	e0bffd15 	stw	r2,-12(fp)
    register int 	 PixelColour, FillColour = _FillColour ;
 1000e20:	e0fff917 	ldw	r3,-28(fp)
 1000e24:	e0fffb15 	stw	r3,-20(fp)

    int     XRight, XLeft ;
    int     SaveX, SaveY ;      		// temp variable
    XYPixel aPoint, aPoint1 ;           // temp var

    Next = XYStack ;                    // initialise to start of stack
 1000e28:	00804234 	movhi	r2,264
 1000e2c:	10a39104 	addi	r2,r2,-29116
 1000e30:	d0a00015 	stw	r2,-32768(gp)
    aPoint.x = _x ;
 1000e34:	e0bff717 	ldw	r2,-36(fp)
 1000e38:	e0bff315 	stw	r2,-52(fp)
    aPoint.y = _y ;
 1000e3c:	e0bff817 	ldw	r2,-32(fp)
 1000e40:	e0bff415 	stw	r2,-48(fp)

    PushPixel(aPoint) ;                   // push the seed
 1000e44:	e13ff317 	ldw	r4,-52(fp)
 1000e48:	e17ff417 	ldw	r5,-48(fp)
 1000e4c:	1000cec0 	call	1000cec <PushPixel>

    while(!IsStackEmpty())                 // keep going until no more items on the stack
 1000e50:	00011606 	br	10012ac <Fill+0x4b4>
    {
        PopPixel(&aPoint) ;                 // get a point from the stack
 1000e54:	e13ff304 	addi	r4,fp,-52
 1000e58:	1000d500 	call	1000d50 <PopPixel>
        x = aPoint.x ;
 1000e5c:	e13ff317 	ldw	r4,-52(fp)
 1000e60:	e13fff15 	stw	r4,-4(fp)
        y = aPoint.y ;
 1000e64:	e0bff417 	ldw	r2,-48(fp)
 1000e68:	e0bffe15 	stw	r2,-8(fp)
        WriteAPixel(x, y, FillColour);     // fill the point in the fill colour
 1000e6c:	e13fff17 	ldw	r4,-4(fp)
 1000e70:	e17ffe17 	ldw	r5,-8(fp)
 1000e74:	e1bffb17 	ldw	r6,-20(fp)
 1000e78:	10002040 	call	1000204 <WriteAPixel>

        // fill the span to the right of the seed value
        SaveX = x++ ;                  // save the x coord of the the point we just filled and move one pixel right
 1000e7c:	e0ffff17 	ldw	r3,-4(fp)
 1000e80:	e0fff015 	stw	r3,-64(fp)
 1000e84:	e13fff17 	ldw	r4,-4(fp)
 1000e88:	21000044 	addi	r4,r4,1
 1000e8c:	e13fff15 	stw	r4,-4(fp)

        while((char)(ReadAPixel(x,y)) != (char)(BoundaryColour))							// if new pixel is not the boundary colour
 1000e90:	00000706 	br	1000eb0 <Fill+0xb8>
            WriteAPixel(x++, y, FillColour);     											// fill it and keep moving right along a horizontal line
 1000e94:	e13fff17 	ldw	r4,-4(fp)
 1000e98:	e0bfff17 	ldw	r2,-4(fp)
 1000e9c:	10800044 	addi	r2,r2,1
 1000ea0:	e0bfff15 	stw	r2,-4(fp)
 1000ea4:	e17ffe17 	ldw	r5,-8(fp)
 1000ea8:	e1bffb17 	ldw	r6,-20(fp)
 1000eac:	10002040 	call	1000204 <WriteAPixel>
        WriteAPixel(x, y, FillColour);     // fill the point in the fill colour

        // fill the span to the right of the seed value
        SaveX = x++ ;                  // save the x coord of the the point we just filled and move one pixel right

        while((char)(ReadAPixel(x,y)) != (char)(BoundaryColour))							// if new pixel is not the boundary colour
 1000eb0:	e13fff17 	ldw	r4,-4(fp)
 1000eb4:	e17ffe17 	ldw	r5,-8(fp)
 1000eb8:	10002800 	call	1000280 <ReadAPixel>
 1000ebc:	e13ffd17 	ldw	r4,-12(fp)
 1000ec0:	2007883a 	mov	r3,r4
 1000ec4:	11003fcc 	andi	r4,r2,255
 1000ec8:	2100201c 	xori	r4,r4,128
 1000ecc:	213fe004 	addi	r4,r4,-128
 1000ed0:	18803fcc 	andi	r2,r3,255
 1000ed4:	1080201c 	xori	r2,r2,128
 1000ed8:	10bfe004 	addi	r2,r2,-128
 1000edc:	20bfed1e 	bne	r4,r2,1000e94 <Fill+0x9c>
            WriteAPixel(x++, y, FillColour);     											// fill it and keep moving right along a horizontal line

        // must have found the boundary colour when moving right
        XRight = x - 1 ;		// save X coord of the last filled pixel on this line when moving right
 1000ee0:	e0ffff17 	ldw	r3,-4(fp)
 1000ee4:	18bfffc4 	addi	r2,r3,-1
 1000ee8:	e0bff215 	stw	r2,-56(fp)
        x = SaveX ;				// get the original starting x back
 1000eec:	e13ff017 	ldw	r4,-64(fp)
 1000ef0:	e13fff15 	stw	r4,-4(fp)

        // now fill the span to the left of the seed value

        --x ;
 1000ef4:	e0bfff17 	ldw	r2,-4(fp)
 1000ef8:	10bfffc4 	addi	r2,r2,-1
 1000efc:	e0bfff15 	stw	r2,-4(fp)

        while((char)(ReadAPixel(x,y)) != (char)(BoundaryColour))						// if new pixel is not the boundary colour
 1000f00:	00000706 	br	1000f20 <Fill+0x128>
            WriteAPixel(x--, y, FillColour);    											// fill it and keep moving left along a horizontal line
 1000f04:	e13fff17 	ldw	r4,-4(fp)
 1000f08:	e0ffff17 	ldw	r3,-4(fp)
 1000f0c:	18ffffc4 	addi	r3,r3,-1
 1000f10:	e0ffff15 	stw	r3,-4(fp)
 1000f14:	e17ffe17 	ldw	r5,-8(fp)
 1000f18:	e1bffb17 	ldw	r6,-20(fp)
 1000f1c:	10002040 	call	1000204 <WriteAPixel>

        // now fill the span to the left of the seed value

        --x ;

        while((char)(ReadAPixel(x,y)) != (char)(BoundaryColour))						// if new pixel is not the boundary colour
 1000f20:	e13fff17 	ldw	r4,-4(fp)
 1000f24:	e17ffe17 	ldw	r5,-8(fp)
 1000f28:	10002800 	call	1000280 <ReadAPixel>
 1000f2c:	e13ffd17 	ldw	r4,-12(fp)
 1000f30:	2007883a 	mov	r3,r4
 1000f34:	11003fcc 	andi	r4,r2,255
 1000f38:	2100201c 	xori	r4,r4,128
 1000f3c:	213fe004 	addi	r4,r4,-128
 1000f40:	18803fcc 	andi	r2,r3,255
 1000f44:	1080201c 	xori	r2,r2,128
 1000f48:	10bfe004 	addi	r2,r2,-128
 1000f4c:	20bfed1e 	bne	r4,r2,1000f04 <Fill+0x10c>
            WriteAPixel(x--, y, FillColour);    											// fill it and keep moving left along a horizontal line

        XLeft = x + 1 ;			// save X coord of the last filled pixel on this line when moving left
 1000f50:	e0ffff17 	ldw	r3,-4(fp)
 1000f54:	18800044 	addi	r2,r3,1
 1000f58:	e0bff115 	stw	r2,-60(fp)
		///////////////////////////////////////////////////////////////////////////////////////////////////
        // check that the scan line below is neither a polygon boundary nor
        // has been previously completely filled
        //////////////////////////////////////////////////////////////////////////////////////////////////

        SaveY = y ;			// save the current y coordinate of the line we have just drawn
 1000f5c:	e13ffe17 	ldw	r4,-8(fp)
 1000f60:	e13fef15 	stw	r4,-68(fp)
        x = XLeft ;			// starting at the left x
 1000f64:	e0bff117 	ldw	r2,-60(fp)
 1000f68:	e0bfff15 	stw	r2,-4(fp)
        ++y ;				// move down one line
 1000f6c:	e0fffe17 	ldw	r3,-8(fp)
 1000f70:	18c00044 	addi	r3,r3,1
 1000f74:	e0fffe15 	stw	r3,-8(fp)
 1000f78:	00000006 	br	1000f7c <Fill+0x184>

		// starting from the left keep moving right looking at the pixel
        // until we find something that is neither filled nor boundary colour as it represents something on the line that may be a pixel to fill

        do {
        	PixelColour = ReadAPixel(x++,y) ;
 1000f7c:	e13fff17 	ldw	r4,-4(fp)
 1000f80:	e0bfff17 	ldw	r2,-4(fp)
 1000f84:	10800044 	addi	r2,r2,1
 1000f88:	e0bfff15 	stw	r2,-4(fp)
 1000f8c:	e17ffe17 	ldw	r5,-8(fp)
 1000f90:	10002800 	call	1000280 <ReadAPixel>
 1000f94:	e0bffc15 	stw	r2,-16(fp)
        } while(((char)(PixelColour) == (char)(BoundaryColour)) || ((char)(PixelColour) == (char)(FillColour)) );
 1000f98:	e0fffc17 	ldw	r3,-16(fp)
 1000f9c:	1805883a 	mov	r2,r3
 1000fa0:	e13ffd17 	ldw	r4,-12(fp)
 1000fa4:	2007883a 	mov	r3,r4
 1000fa8:	11003fcc 	andi	r4,r2,255
 1000fac:	2100201c 	xori	r4,r4,128
 1000fb0:	213fe004 	addi	r4,r4,-128
 1000fb4:	18803fcc 	andi	r2,r3,255
 1000fb8:	1080201c 	xori	r2,r2,128
 1000fbc:	10bfe004 	addi	r2,r2,-128
 1000fc0:	20bfee26 	beq	r4,r2,1000f7c <Fill+0x184>
 1000fc4:	e0fffc17 	ldw	r3,-16(fp)
 1000fc8:	1805883a 	mov	r2,r3
 1000fcc:	e13ffb17 	ldw	r4,-20(fp)
 1000fd0:	2007883a 	mov	r3,r4
 1000fd4:	11003fcc 	andi	r4,r2,255
 1000fd8:	2100201c 	xori	r4,r4,128
 1000fdc:	213fe004 	addi	r4,r4,-128
 1000fe0:	18803fcc 	andi	r2,r3,255
 1000fe4:	1080201c 	xori	r2,r2,128
 1000fe8:	10bfe004 	addi	r2,r2,-128
 1000fec:	20bfe326 	beq	r4,r2,1000f7c <Fill+0x184>

         x-- ;
 1000ff0:	e0bfff17 	ldw	r2,-4(fp)
 1000ff4:	10bfffc4 	addi	r2,r2,-1
 1000ff8:	e0bfff15 	stw	r2,-4(fp)

        // to get here we must have found something that needs filling i.e. the above loop found that the line below was not a complete boundary edge or filled
		// if we are still less than the previous right most X coord then it would be a new point that we need to seed
        while(x < XRight)
 1000ffc:	00003e06 	br	10010f8 <Fill+0x300>
            // seed the scan line below
        	// if the pixel at x,y is not a boundary colour and less than extreme right

        	// skip over any pixels already filled
            while(((char)(ReadAPixel(x,y)) != (char)(BoundaryColour)) && (x < XRight))
               ++x ;
 1001000:	e0ffff17 	ldw	r3,-4(fp)
 1001004:	18c00044 	addi	r3,r3,1
 1001008:	e0ffff15 	stw	r3,-4(fp)
        {
            // seed the scan line below
        	// if the pixel at x,y is not a boundary colour and less than extreme right

        	// skip over any pixels already filled
            while(((char)(ReadAPixel(x,y)) != (char)(BoundaryColour)) && (x < XRight))
 100100c:	e13fff17 	ldw	r4,-4(fp)
 1001010:	e17ffe17 	ldw	r5,-8(fp)
 1001014:	10002800 	call	1000280 <ReadAPixel>
 1001018:	e13ffd17 	ldw	r4,-12(fp)
 100101c:	2007883a 	mov	r3,r4
 1001020:	11003fcc 	andi	r4,r2,255
 1001024:	2100201c 	xori	r4,r4,128
 1001028:	213fe004 	addi	r4,r4,-128
 100102c:	18803fcc 	andi	r2,r3,255
 1001030:	1080201c 	xori	r2,r2,128
 1001034:	10bfe004 	addi	r2,r2,-128
 1001038:	20800326 	beq	r4,r2,1001048 <Fill+0x250>
 100103c:	e0bff217 	ldw	r2,-56(fp)
 1001040:	e0ffff17 	ldw	r3,-4(fp)
 1001044:	18bfee16 	blt	r3,r2,1001000 <Fill+0x208>
               ++x ;

            // push the  extreme right pixel onto the stack
            aPoint1.x = x - 1 ;
 1001048:	e13fff17 	ldw	r4,-4(fp)
 100104c:	20bfffc4 	addi	r2,r4,-1
 1001050:	e0bff515 	stw	r2,-44(fp)
            aPoint1.y = y ;
 1001054:	e0bffe17 	ldw	r2,-8(fp)
 1001058:	e0bff615 	stw	r2,-40(fp)
            PushPixel(aPoint1) ;
 100105c:	e13ff517 	ldw	r4,-44(fp)
 1001060:	e17ff617 	ldw	r5,-40(fp)
 1001064:	1000cec0 	call	1000cec <PushPixel>

            // continue checking in case the span is interrupted by another shape inside the one we are trying to fill

            ++x ;
 1001068:	e0ffff17 	ldw	r3,-4(fp)
 100106c:	18c00044 	addi	r3,r3,1
 1001070:	e0ffff15 	stw	r3,-4(fp)
 1001074:	00000006 	br	1001078 <Fill+0x280>

            // skip over anything that is filled or boundary (i.e. other shape) inside the one we are trying to fill
            do {
            	PixelColour = ReadAPixel(x++,y) ;
 1001078:	e13fff17 	ldw	r4,-4(fp)
 100107c:	e0bfff17 	ldw	r2,-4(fp)
 1001080:	10800044 	addi	r2,r2,1
 1001084:	e0bfff15 	stw	r2,-4(fp)
 1001088:	e17ffe17 	ldw	r5,-8(fp)
 100108c:	10002800 	call	1000280 <ReadAPixel>
 1001090:	e0bffc15 	stw	r2,-16(fp)
            } while(((char)(PixelColour) == (char)(BoundaryColour)) || ((char)(PixelColour) == (char)(FillColour)) );
 1001094:	e0fffc17 	ldw	r3,-16(fp)
 1001098:	1805883a 	mov	r2,r3
 100109c:	e13ffd17 	ldw	r4,-12(fp)
 10010a0:	2007883a 	mov	r3,r4
 10010a4:	11003fcc 	andi	r4,r2,255
 10010a8:	2100201c 	xori	r4,r4,128
 10010ac:	213fe004 	addi	r4,r4,-128
 10010b0:	18803fcc 	andi	r2,r3,255
 10010b4:	1080201c 	xori	r2,r2,128
 10010b8:	10bfe004 	addi	r2,r2,-128
 10010bc:	20bfee26 	beq	r4,r2,1001078 <Fill+0x280>
 10010c0:	e0fffc17 	ldw	r3,-16(fp)
 10010c4:	1805883a 	mov	r2,r3
 10010c8:	e13ffb17 	ldw	r4,-20(fp)
 10010cc:	2007883a 	mov	r3,r4
 10010d0:	11003fcc 	andi	r4,r2,255
 10010d4:	2100201c 	xori	r4,r4,128
 10010d8:	213fe004 	addi	r4,r4,-128
 10010dc:	18803fcc 	andi	r2,r3,255
 10010e0:	1080201c 	xori	r2,r2,128
 10010e4:	10bfe004 	addi	r2,r2,-128
 10010e8:	20bfe326 	beq	r4,r2,1001078 <Fill+0x280>

             x-- ;
 10010ec:	e0bfff17 	ldw	r2,-4(fp)
 10010f0:	10bfffc4 	addi	r2,r2,-1
 10010f4:	e0bfff15 	stw	r2,-4(fp)

         x-- ;

        // to get here we must have found something that needs filling i.e. the above loop found that the line below was not a complete boundary edge or filled
		// if we are still less than the previous right most X coord then it would be a new point that we need to seed
        while(x < XRight)
 10010f8:	e0bff217 	ldw	r2,-56(fp)
 10010fc:	e0ffff17 	ldw	r3,-4(fp)
 1001100:	18bfc216 	blt	r3,r2,100100c <Fill+0x214>

	 ///////////////////////////////////////////////////////////////////////////////////////////////////
    // check that the scan line above is neither a polygon boundary nor
    // has been previously completely filled

        y = SaveY;
 1001104:	e13fef17 	ldw	r4,-68(fp)
 1001108:	e13ffe15 	stw	r4,-8(fp)
        x = XLeft ;
 100110c:	e0bff117 	ldw	r2,-60(fp)
 1001110:	e0bfff15 	stw	r2,-4(fp)
        --y ;
 1001114:	e0fffe17 	ldw	r3,-8(fp)
 1001118:	18ffffc4 	addi	r3,r3,-1
 100111c:	e0fffe15 	stw	r3,-8(fp)
 1001120:	00000006 	br	1001124 <Fill+0x32c>

        do {
        	PixelColour = ReadAPixel(x++,y) ;
 1001124:	e13fff17 	ldw	r4,-4(fp)
 1001128:	e0bfff17 	ldw	r2,-4(fp)
 100112c:	10800044 	addi	r2,r2,1
 1001130:	e0bfff15 	stw	r2,-4(fp)
 1001134:	e17ffe17 	ldw	r5,-8(fp)
 1001138:	10002800 	call	1000280 <ReadAPixel>
 100113c:	e0bffc15 	stw	r2,-16(fp)
        } while(((char)(PixelColour) == (char)(BoundaryColour)) || ((char)(PixelColour) == (char)(FillColour)) );
 1001140:	e0fffc17 	ldw	r3,-16(fp)
 1001144:	1805883a 	mov	r2,r3
 1001148:	e13ffd17 	ldw	r4,-12(fp)
 100114c:	2007883a 	mov	r3,r4
 1001150:	11003fcc 	andi	r4,r2,255
 1001154:	2100201c 	xori	r4,r4,128
 1001158:	213fe004 	addi	r4,r4,-128
 100115c:	18803fcc 	andi	r2,r3,255
 1001160:	1080201c 	xori	r2,r2,128
 1001164:	10bfe004 	addi	r2,r2,-128
 1001168:	20bfee26 	beq	r4,r2,1001124 <Fill+0x32c>
 100116c:	e0fffc17 	ldw	r3,-16(fp)
 1001170:	1805883a 	mov	r2,r3
 1001174:	e13ffb17 	ldw	r4,-20(fp)
 1001178:	2007883a 	mov	r3,r4
 100117c:	11003fcc 	andi	r4,r2,255
 1001180:	2100201c 	xori	r4,r4,128
 1001184:	213fe004 	addi	r4,r4,-128
 1001188:	18803fcc 	andi	r2,r3,255
 100118c:	1080201c 	xori	r2,r2,128
 1001190:	10bfe004 	addi	r2,r2,-128
 1001194:	20bfe326 	beq	r4,r2,1001124 <Fill+0x32c>

         x-- ;
 1001198:	e0bfff17 	ldw	r2,-4(fp)
 100119c:	10bfffc4 	addi	r2,r2,-1
 10011a0:	e0bfff15 	stw	r2,-4(fp)

        while(x < XRight)		// if we have not reached the boundary
 10011a4:	00003e06 	br	10012a0 <Fill+0x4a8>
        {
            // seed the scan line below
            while(((char)(ReadAPixel(x,y)) != (char)(BoundaryColour)) && (x < XRight))
               ++x ;		// look for right most x inside the boudan
 10011a8:	e0ffff17 	ldw	r3,-4(fp)
 10011ac:	18c00044 	addi	r3,r3,1
 10011b0:	e0ffff15 	stw	r3,-4(fp)
         x-- ;

        while(x < XRight)		// if we have not reached the boundary
        {
            // seed the scan line below
            while(((char)(ReadAPixel(x,y)) != (char)(BoundaryColour)) && (x < XRight))
 10011b4:	e13fff17 	ldw	r4,-4(fp)
 10011b8:	e17ffe17 	ldw	r5,-8(fp)
 10011bc:	10002800 	call	1000280 <ReadAPixel>
 10011c0:	e13ffd17 	ldw	r4,-12(fp)
 10011c4:	2007883a 	mov	r3,r4
 10011c8:	11003fcc 	andi	r4,r2,255
 10011cc:	2100201c 	xori	r4,r4,128
 10011d0:	213fe004 	addi	r4,r4,-128
 10011d4:	18803fcc 	andi	r2,r3,255
 10011d8:	1080201c 	xori	r2,r2,128
 10011dc:	10bfe004 	addi	r2,r2,-128
 10011e0:	20800326 	beq	r4,r2,10011f0 <Fill+0x3f8>
 10011e4:	e0bff217 	ldw	r2,-56(fp)
 10011e8:	e0ffff17 	ldw	r3,-4(fp)
 10011ec:	18bfee16 	blt	r3,r2,10011a8 <Fill+0x3b0>
               ++x ;		// look for right most x inside the boudan

            // push the  extreme right pixel onto the stack
            aPoint1.x = x - 1 ;
 10011f0:	e13fff17 	ldw	r4,-4(fp)
 10011f4:	20bfffc4 	addi	r2,r4,-1
 10011f8:	e0bff515 	stw	r2,-44(fp)
            aPoint1.y = y ;
 10011fc:	e0bffe17 	ldw	r2,-8(fp)
 1001200:	e0bff615 	stw	r2,-40(fp)
            PushPixel(aPoint1) ;
 1001204:	e13ff517 	ldw	r4,-44(fp)
 1001208:	e17ff617 	ldw	r5,-40(fp)
 100120c:	1000cec0 	call	1000cec <PushPixel>

            // continue checking in case the span is interrupted
            ++x ;
 1001210:	e0ffff17 	ldw	r3,-4(fp)
 1001214:	18c00044 	addi	r3,r3,1
 1001218:	e0ffff15 	stw	r3,-4(fp)
 100121c:	00000006 	br	1001220 <Fill+0x428>

            do {
            	PixelColour = ReadAPixel(x++,y) ;
 1001220:	e13fff17 	ldw	r4,-4(fp)
 1001224:	e0bfff17 	ldw	r2,-4(fp)
 1001228:	10800044 	addi	r2,r2,1
 100122c:	e0bfff15 	stw	r2,-4(fp)
 1001230:	e17ffe17 	ldw	r5,-8(fp)
 1001234:	10002800 	call	1000280 <ReadAPixel>
 1001238:	e0bffc15 	stw	r2,-16(fp)
            } while(((char)(PixelColour) == (char)(BoundaryColour)) || ((char)(PixelColour) == (char)(FillColour)) );
 100123c:	e0fffc17 	ldw	r3,-16(fp)
 1001240:	1805883a 	mov	r2,r3
 1001244:	e13ffd17 	ldw	r4,-12(fp)
 1001248:	2007883a 	mov	r3,r4
 100124c:	11003fcc 	andi	r4,r2,255
 1001250:	2100201c 	xori	r4,r4,128
 1001254:	213fe004 	addi	r4,r4,-128
 1001258:	18803fcc 	andi	r2,r3,255
 100125c:	1080201c 	xori	r2,r2,128
 1001260:	10bfe004 	addi	r2,r2,-128
 1001264:	20bfee26 	beq	r4,r2,1001220 <Fill+0x428>
 1001268:	e0fffc17 	ldw	r3,-16(fp)
 100126c:	1805883a 	mov	r2,r3
 1001270:	e13ffb17 	ldw	r4,-20(fp)
 1001274:	2007883a 	mov	r3,r4
 1001278:	11003fcc 	andi	r4,r2,255
 100127c:	2100201c 	xori	r4,r4,128
 1001280:	213fe004 	addi	r4,r4,-128
 1001284:	18803fcc 	andi	r2,r3,255
 1001288:	1080201c 	xori	r2,r2,128
 100128c:	10bfe004 	addi	r2,r2,-128
 1001290:	20bfe326 	beq	r4,r2,1001220 <Fill+0x428>

             x-- ;
 1001294:	e0bfff17 	ldw	r2,-4(fp)
 1001298:	10bfffc4 	addi	r2,r2,-1
 100129c:	e0bfff15 	stw	r2,-4(fp)
        	PixelColour = ReadAPixel(x++,y) ;
        } while(((char)(PixelColour) == (char)(BoundaryColour)) || ((char)(PixelColour) == (char)(FillColour)) );

         x-- ;

        while(x < XRight)		// if we have not reached the boundary
 10012a0:	e0bff217 	ldw	r2,-56(fp)
 10012a4:	e0ffff17 	ldw	r3,-4(fp)
 10012a8:	18bfc216 	blt	r3,r2,10011b4 <Fill+0x3bc>
    aPoint.x = _x ;
    aPoint.y = _y ;

    PushPixel(aPoint) ;                   // push the seed

    while(!IsStackEmpty())                 // keep going until no more items on the stack
 10012ac:	1000db80 	call	1000db8 <IsStackEmpty>
 10012b0:	1005003a 	cmpeq	r2,r2,zero
 10012b4:	103ee71e 	bne	r2,zero,1000e54 <Fill+0x5c>
             x-- ;
        }
       	x = SaveX ;
       	y = SaveY ;
    }
 10012b8:	e037883a 	mov	sp,fp
 10012bc:	dfc00117 	ldw	ra,4(sp)
 10012c0:	df000017 	ldw	fp,0(sp)
 10012c4:	dec00204 	addi	sp,sp,8
 10012c8:	f800283a 	ret

010012cc <wait_1ms2>:
#include <stdio.h>

/*
 *	Program stall for 1 millisecond
 */
void wait_1ms2(void) {
 10012cc:	defffe04 	addi	sp,sp,-8
 10012d0:	df000115 	stw	fp,4(sp)
 10012d4:	df000104 	addi	fp,sp,4
	int i;
	for (i = 0; i < 1000; i++)
 10012d8:	e03fff15 	stw	zero,-4(fp)
 10012dc:	00000306 	br	10012ec <wait_1ms2+0x20>
 10012e0:	e0bfff17 	ldw	r2,-4(fp)
 10012e4:	10800044 	addi	r2,r2,1
 10012e8:	e0bfff15 	stw	r2,-4(fp)
 10012ec:	e0bfff17 	ldw	r2,-4(fp)
 10012f0:	1080fa10 	cmplti	r2,r2,1000
 10012f4:	103ffa1e 	bne	r2,zero,10012e0 <wait_1ms2+0x14>
		;

}
 10012f8:	e037883a 	mov	sp,fp
 10012fc:	df000017 	ldw	fp,0(sp)
 1001300:	dec00104 	addi	sp,sp,4
 1001304:	f800283a 	ret

01001308 <init_GPS>:

/*
 * init_GPS: Initialises the GPS chip to start sending and recieving data via the Serial Port
 */
void init_GPS(void) {
 1001308:	deffff04 	addi	sp,sp,-4
 100130c:	df000015 	stw	fp,0(sp)
 1001310:	d839883a 	mov	fp,sp
	// Initialize the Control Register
	GPS_Control = 0x15;
 1001314:	00e10034 	movhi	r3,33792
 1001318:	18c08404 	addi	r3,r3,528
 100131c:	00800544 	movi	r2,21
 1001320:	18800005 	stb	r2,0(r3)

	// Initialize the Baud Rate Generator to use 115k Baud
	GPS_Baud = 0x05;
 1001324:	00e10034 	movhi	r3,33792
 1001328:	18c08504 	addi	r3,r3,532
 100132c:	00800144 	movi	r2,5
 1001330:	18800005 	stb	r2,0(r3)
}
 1001334:	e037883a 	mov	sp,fp
 1001338:	df000017 	ldw	fp,0(sp)
 100133c:	dec00104 	addi	sp,sp,4
 1001340:	f800283a 	ret

01001344 <putcharGPS>:

/*
 * putcharGPS sends a character, which is part of a full string command, to the GPS via the Serial Port
 */
int putcharGPS(int c) {
 1001344:	defffe04 	addi	sp,sp,-8
 1001348:	df000115 	stw	fp,4(sp)
 100134c:	df000104 	addi	fp,sp,4
 1001350:	e13fff15 	stw	r4,-4(fp)

	while ((GPS_Status & 0x02) != 0x02) {
 1001354:	00a10034 	movhi	r2,33792
 1001358:	10808404 	addi	r2,r2,528
 100135c:	10800003 	ldbu	r2,0(r2)
 1001360:	10803fcc 	andi	r2,r2,255
 1001364:	1080008c 	andi	r2,r2,2
 1001368:	1005003a 	cmpeq	r2,r2,zero
 100136c:	103ff91e 	bne	r2,zero,1001354 <putcharGPS+0x10>
	}
	GPS_TxData = c;
 1001370:	00e10034 	movhi	r3,33792
 1001374:	18c08484 	addi	r3,r3,530
 1001378:	e0bfff17 	ldw	r2,-4(fp)
 100137c:	18800005 	stb	r2,0(r3)
	return c;
 1001380:	e0bfff17 	ldw	r2,-4(fp)
}
 1001384:	e037883a 	mov	sp,fp
 1001388:	df000017 	ldw	fp,0(sp)
 100138c:	dec00104 	addi	sp,sp,4
 1001390:	f800283a 	ret

01001394 <getcharGPS>:

/*
 * getcharGPS returns the character as part of a string received from the GPS
 */
int getcharGPS(void) {
 1001394:	deffff04 	addi	sp,sp,-4
 1001398:	df000015 	stw	fp,0(sp)
 100139c:	d839883a 	mov	fp,sp

	while (!((GPS_Status & 0x1) == 0x1)) {
 10013a0:	00a10034 	movhi	r2,33792
 10013a4:	10808404 	addi	r2,r2,528
 10013a8:	10800003 	ldbu	r2,0(r2)
 10013ac:	10803fcc 	andi	r2,r2,255
 10013b0:	1080004c 	andi	r2,r2,1
 10013b4:	1005003a 	cmpeq	r2,r2,zero
 10013b8:	103ff91e 	bne	r2,zero,10013a0 <getcharGPS+0xc>
	}

	return GPS_RxData;
 10013bc:	00a10034 	movhi	r2,33792
 10013c0:	10808484 	addi	r2,r2,530
 10013c4:	10800003 	ldbu	r2,0(r2)
 10013c8:	10803fcc 	andi	r2,r2,255
}
 10013cc:	e037883a 	mov	sp,fp
 10013d0:	df000017 	ldw	fp,0(sp)
 10013d4:	dec00104 	addi	sp,sp,4
 10013d8:	f800283a 	ret

010013dc <GPSTestForReceivedData>:

/*
 * GPSTestForReceivedData returns 1 if there are data received at the Serial Port
 * Else, returns a 0
 */
int GPSTestForReceivedData(void) {
 10013dc:	defffe04 	addi	sp,sp,-8
 10013e0:	df000115 	stw	fp,4(sp)
 10013e4:	df000104 	addi	fp,sp,4
	if (GPS_Status & 0x1)
 10013e8:	00a10034 	movhi	r2,33792
 10013ec:	10808404 	addi	r2,r2,528
 10013f0:	10800003 	ldbu	r2,0(r2)
 10013f4:	10803fcc 	andi	r2,r2,255
 10013f8:	1080004c 	andi	r2,r2,1
 10013fc:	10803fcc 	andi	r2,r2,255
 1001400:	1005003a 	cmpeq	r2,r2,zero
 1001404:	1000031e 	bne	r2,zero,1001414 <GPSTestForReceivedData+0x38>
		return 1;
 1001408:	00800044 	movi	r2,1
 100140c:	e0bfff15 	stw	r2,-4(fp)
 1001410:	00000106 	br	1001418 <GPSTestForReceivedData+0x3c>
	else
		return 0;
 1001414:	e03fff15 	stw	zero,-4(fp)
 1001418:	e0bfff17 	ldw	r2,-4(fp)
}
 100141c:	e037883a 	mov	sp,fp
 1001420:	df000017 	ldw	fp,0(sp)
 1001424:	dec00104 	addi	sp,sp,4
 1001428:	f800283a 	ret

0100142c <checkGPGGA>:

/*
 * checkGPGGA takes a string and compare it with string $GPGGA
 * Returns "0" if the the string passed is "$GPGGA"
 */
int checkGPGGA(char* string) {
 100142c:	defffb04 	addi	sp,sp,-20
 1001430:	dfc00415 	stw	ra,16(sp)
 1001434:	df000315 	stw	fp,12(sp)
 1001438:	df000304 	addi	fp,sp,12
 100143c:	e13fff15 	stw	r4,-4(fp)
	char GGA[] = "$GPGGA";
 1001440:	00c040b4 	movhi	r3,258
 1001444:	18c81204 	addi	r3,r3,8264
 1001448:	18800017 	ldw	r2,0(r3)
 100144c:	e0bffd15 	stw	r2,-12(fp)
 1001450:	1880010b 	ldhu	r2,4(r3)
 1001454:	e0bffe0d 	sth	r2,-8(fp)
 1001458:	18800183 	ldbu	r2,6(r3)
 100145c:	e0bffe85 	stb	r2,-6(fp)
	return strcmp(string, GGA);
 1001460:	e13fff17 	ldw	r4,-4(fp)
 1001464:	e17ffd04 	addi	r5,fp,-12
 1001468:	100e1c00 	call	100e1c0 <strcmp>
}
 100146c:	e037883a 	mov	sp,fp
 1001470:	dfc00117 	ldw	ra,4(sp)
 1001474:	df000017 	ldw	fp,0(sp)
 1001478:	dec00204 	addi	sp,sp,8
 100147c:	f800283a 	ret

01001480 <getGPSTime>:
/*
 * getGPSTime takes the raw GPS data received and parses out the UTC time.
 * Then, converts the UTC time to PST (local vancouver time)
 * Returns a string of PST time
 */
char* getGPSTime(char *GPS_Data) {
 1001480:	deff7804 	addi	sp,sp,-544
 1001484:	dfc08715 	stw	ra,540(sp)
 1001488:	df008615 	stw	fp,536(sp)
 100148c:	df008604 	addi	fp,sp,536
 1001490:	e13fff15 	stw	r4,-4(fp)
	char Time[512];
	char* timeptr = GPS_Data + 6;
 1001494:	e0bfff17 	ldw	r2,-4(fp)
 1001498:	10800184 	addi	r2,r2,6
 100149c:	e0bf7b15 	stw	r2,-532(fp)

	char HH[3];
	char MM[3];
	char SS[3];
	HH[0] = *(++timeptr);
 10014a0:	e0bf7b17 	ldw	r2,-532(fp)
 10014a4:	10800044 	addi	r2,r2,1
 10014a8:	e0bf7b15 	stw	r2,-532(fp)
 10014ac:	e0bf7b17 	ldw	r2,-532(fp)
 10014b0:	10800003 	ldbu	r2,0(r2)
 10014b4:	e0bffc05 	stb	r2,-16(fp)
	HH[1] = *(++timeptr);
 10014b8:	e0bf7b17 	ldw	r2,-532(fp)
 10014bc:	10800044 	addi	r2,r2,1
 10014c0:	e0bf7b15 	stw	r2,-532(fp)
 10014c4:	e0bf7b17 	ldw	r2,-532(fp)
 10014c8:	10800003 	ldbu	r2,0(r2)
 10014cc:	e0bffc45 	stb	r2,-15(fp)
	HH[2] = '\0';
 10014d0:	e03ffc85 	stb	zero,-14(fp)

	int hour = atoi(HH);
 10014d4:	e13ffc04 	addi	r4,fp,-16
 10014d8:	100d7180 	call	100d718 <atoi>
 10014dc:	e0bf7a15 	stw	r2,-536(fp)
	//hour = hour - 20;
	//}
	//else{
	//hour = hour + 4;
	//}
	hour = hour - 8;
 10014e0:	e0bf7a17 	ldw	r2,-536(fp)
 10014e4:	10bffe04 	addi	r2,r2,-8
 10014e8:	e0bf7a15 	stw	r2,-536(fp)

	sprintf(HH, "%d", hour);
 10014ec:	e13ffc04 	addi	r4,fp,-16
 10014f0:	014040b4 	movhi	r5,258
 10014f4:	29481404 	addi	r5,r5,8272
 10014f8:	e1bf7a17 	ldw	r6,-536(fp)
 10014fc:	100e05c0 	call	100e05c <sprintf>

	MM[0] = *(++timeptr);
 1001500:	e0bf7b17 	ldw	r2,-532(fp)
 1001504:	10800044 	addi	r2,r2,1
 1001508:	e0bf7b15 	stw	r2,-532(fp)
 100150c:	e0bf7b17 	ldw	r2,-532(fp)
 1001510:	10800003 	ldbu	r2,0(r2)
 1001514:	e0bffcc5 	stb	r2,-13(fp)
	MM[1] = *(++timeptr);
 1001518:	e0bf7b17 	ldw	r2,-532(fp)
 100151c:	10800044 	addi	r2,r2,1
 1001520:	e0bf7b15 	stw	r2,-532(fp)
 1001524:	e0bf7b17 	ldw	r2,-532(fp)
 1001528:	10800003 	ldbu	r2,0(r2)
 100152c:	e0bffd05 	stb	r2,-12(fp)
	MM[2] = '\0';
 1001530:	e03ffd45 	stb	zero,-11(fp)

	SS[0] = *(++timeptr);
 1001534:	e0bf7b17 	ldw	r2,-532(fp)
 1001538:	10800044 	addi	r2,r2,1
 100153c:	e0bf7b15 	stw	r2,-532(fp)
 1001540:	e0bf7b17 	ldw	r2,-532(fp)
 1001544:	10800003 	ldbu	r2,0(r2)
 1001548:	e0bffd85 	stb	r2,-10(fp)
	SS[1] = *(++timeptr);
 100154c:	e0bf7b17 	ldw	r2,-532(fp)
 1001550:	10800044 	addi	r2,r2,1
 1001554:	e0bf7b15 	stw	r2,-532(fp)
 1001558:	e0bf7b17 	ldw	r2,-532(fp)
 100155c:	10800003 	ldbu	r2,0(r2)
 1001560:	e0bffdc5 	stb	r2,-9(fp)
	SS[2] = '\0';
 1001564:	e03ffe05 	stb	zero,-8(fp)

	strcpy(Time, "LOCAL TIME: ");
 1001568:	e0ff7c04 	addi	r3,fp,-528
 100156c:	009050f4 	movhi	r2,16707
 1001570:	1093d304 	addi	r2,r2,20300
 1001574:	18800015 	stw	r2,0(r3)
 1001578:	00925534 	movhi	r2,18772
 100157c:	10881304 	addi	r2,r2,8268
 1001580:	18800115 	stw	r2,4(r3)
 1001584:	00880eb4 	movhi	r2,8250
 1001588:	10915344 	addi	r2,r2,17741
 100158c:	18800215 	stw	r2,8(r3)
 1001590:	18000305 	stb	zero,12(r3)
	strcat(Time, HH);
 1001594:	e13f7c04 	addi	r4,fp,-528
 1001598:	e17ffc04 	addi	r5,fp,-16
 100159c:	100e1300 	call	100e130 <strcat>
	strcat(Time, ":");
 10015a0:	e13f7c04 	addi	r4,fp,-528
 10015a4:	014040b4 	movhi	r5,258
 10015a8:	29481504 	addi	r5,r5,8276
 10015ac:	100e1300 	call	100e130 <strcat>
	strcat(Time, MM);
 10015b0:	e13f7c04 	addi	r4,fp,-528
 10015b4:	e17ffcc4 	addi	r5,fp,-13
 10015b8:	100e1300 	call	100e130 <strcat>
	strcat(Time, ":");
 10015bc:	e13f7c04 	addi	r4,fp,-528
 10015c0:	014040b4 	movhi	r5,258
 10015c4:	29481504 	addi	r5,r5,8276
 10015c8:	100e1300 	call	100e130 <strcat>
	strcat(Time, SS);
 10015cc:	e13f7c04 	addi	r4,fp,-528
 10015d0:	e17ffd84 	addi	r5,fp,-10
 10015d4:	100e1300 	call	100e130 <strcat>

	return Time;
 10015d8:	e0bf7c04 	addi	r2,fp,-528

}
 10015dc:	e037883a 	mov	sp,fp
 10015e0:	dfc00117 	ldw	ra,4(sp)
 10015e4:	df000017 	ldw	fp,0(sp)
 10015e8:	dec00204 	addi	sp,sp,8
 10015ec:	f800283a 	ret

010015f0 <parseGPSData>:
/*
 * parseGPSData takes the raw GPS data and parses out the Latitude and Longitude
 * Returns a string of the geological coordinates in the format: "+/-XX.YY(Latitude)     +/-XXX.YY(Longitude)"
 *
 */
char* parseGPSData(char *GPS_Data) {
 10015f0:	deff7204 	addi	sp,sp,-568
 10015f4:	dfc08d15 	stw	ra,564(sp)
 10015f8:	df008c15 	stw	fp,560(sp)
 10015fc:	df008c04 	addi	fp,sp,560
 1001600:	e13fff15 	stw	r4,-4(fp)

	char *pointer;
	int i;

	//Latitude Calculation
	pointer = GPS_Data + 17;
 1001604:	e0bfff17 	ldw	r2,-4(fp)
 1001608:	10800444 	addi	r2,r2,17
 100160c:	e0bf7515 	stw	r2,-556(fp)

	if (*(GPS_Data + 28) == 'N') {
 1001610:	e0bfff17 	ldw	r2,-4(fp)
 1001614:	10800704 	addi	r2,r2,28
 1001618:	10800003 	ldbu	r2,0(r2)
 100161c:	10803fcc 	andi	r2,r2,255
 1001620:	1080201c 	xori	r2,r2,128
 1001624:	10bfe004 	addi	r2,r2,-128
 1001628:	10801398 	cmpnei	r2,r2,78
 100162c:	1000031e 	bne	r2,zero,100163c <parseGPSData+0x4c>
		NS[0] = '+';
 1001630:	00800ac4 	movi	r2,43
 1001634:	e0bf7805 	stb	r2,-544(fp)
 1001638:	00000206 	br	1001644 <parseGPSData+0x54>
	} else {
		NS[0] = '-';
 100163c:	00800b44 	movi	r2,45
 1001640:	e0bf7805 	stb	r2,-544(fp)
	}
	NS[1] = '\0';
 1001644:	e03f7845 	stb	zero,-543(fp)

	if (*(GPS_Data + 41) == 'W') {
 1001648:	e0bfff17 	ldw	r2,-4(fp)
 100164c:	10800a44 	addi	r2,r2,41
 1001650:	10800003 	ldbu	r2,0(r2)
 1001654:	10803fcc 	andi	r2,r2,255
 1001658:	1080201c 	xori	r2,r2,128
 100165c:	10bfe004 	addi	r2,r2,-128
 1001660:	108015d8 	cmpnei	r2,r2,87
 1001664:	1000031e 	bne	r2,zero,1001674 <parseGPSData+0x84>
		EW[0] = '-';
 1001668:	00800b44 	movi	r2,45
 100166c:	e0bf7885 	stb	r2,-542(fp)
 1001670:	00000206 	br	100167c <parseGPSData+0x8c>
	} else {
		EW[0] = '+';
 1001674:	00800ac4 	movi	r2,43
 1001678:	e0bf7885 	stb	r2,-542(fp)
	}
	EW[1] = '\0';
 100167c:	e03f78c5 	stb	zero,-541(fp)

	LatD[0] = *(++pointer);
 1001680:	e0bf7517 	ldw	r2,-556(fp)
 1001684:	10800044 	addi	r2,r2,1
 1001688:	e0bf7515 	stw	r2,-556(fp)
 100168c:	e0bf7517 	ldw	r2,-556(fp)
 1001690:	10800003 	ldbu	r2,0(r2)
 1001694:	e0bf7905 	stb	r2,-540(fp)
	LatD[1] = *(++pointer);
 1001698:	e0bf7517 	ldw	r2,-556(fp)
 100169c:	10800044 	addi	r2,r2,1
 10016a0:	e0bf7515 	stw	r2,-556(fp)
 10016a4:	e0bf7517 	ldw	r2,-556(fp)
 10016a8:	10800003 	ldbu	r2,0(r2)
 10016ac:	e0bf7945 	stb	r2,-539(fp)
	LatD[2] = '\0';
 10016b0:	e03f7985 	stb	zero,-538(fp)

	LatM[0] = *(++pointer);
 10016b4:	e0bf7517 	ldw	r2,-556(fp)
 10016b8:	10800044 	addi	r2,r2,1
 10016bc:	e0bf7515 	stw	r2,-556(fp)
 10016c0:	e0bf7517 	ldw	r2,-556(fp)
 10016c4:	10800003 	ldbu	r2,0(r2)
 10016c8:	e0bf79c5 	stb	r2,-537(fp)
	LatM[1] = *(++pointer);
 10016cc:	e0bf7517 	ldw	r2,-556(fp)
 10016d0:	10800044 	addi	r2,r2,1
 10016d4:	e0bf7515 	stw	r2,-556(fp)
 10016d8:	e0bf7517 	ldw	r2,-556(fp)
 10016dc:	10800003 	ldbu	r2,0(r2)
 10016e0:	e0bf7a05 	stb	r2,-536(fp)
	++pointer; //skip over the comma
 10016e4:	e0bf7517 	ldw	r2,-556(fp)
 10016e8:	10800044 	addi	r2,r2,1
 10016ec:	e0bf7515 	stw	r2,-556(fp)
	LatM[2] = *(++pointer);
 10016f0:	e0bf7517 	ldw	r2,-556(fp)
 10016f4:	10800044 	addi	r2,r2,1
 10016f8:	e0bf7515 	stw	r2,-556(fp)
 10016fc:	e0bf7517 	ldw	r2,-556(fp)
 1001700:	10800003 	ldbu	r2,0(r2)
 1001704:	e0bf7a45 	stb	r2,-535(fp)
	LatM[3] = *(++pointer);
 1001708:	e0bf7517 	ldw	r2,-556(fp)
 100170c:	10800044 	addi	r2,r2,1
 1001710:	e0bf7515 	stw	r2,-556(fp)
 1001714:	e0bf7517 	ldw	r2,-556(fp)
 1001718:	10800003 	ldbu	r2,0(r2)
 100171c:	e0bf7a85 	stb	r2,-534(fp)
	LatM[4] = *(++pointer);
 1001720:	e0bf7517 	ldw	r2,-556(fp)
 1001724:	10800044 	addi	r2,r2,1
 1001728:	e0bf7515 	stw	r2,-556(fp)
 100172c:	e0bf7517 	ldw	r2,-556(fp)
 1001730:	10800003 	ldbu	r2,0(r2)
 1001734:	e0bf7ac5 	stb	r2,-533(fp)
	LatM[5] = *(++pointer);
 1001738:	e0bf7517 	ldw	r2,-556(fp)
 100173c:	10800044 	addi	r2,r2,1
 1001740:	e0bf7515 	stw	r2,-556(fp)
 1001744:	e0bf7517 	ldw	r2,-556(fp)
 1001748:	10800003 	ldbu	r2,0(r2)
 100174c:	e0bf7b05 	stb	r2,-532(fp)
	LatM[6] = '\0';
 1001750:	e03f7b45 	stb	zero,-531(fp)

	//LatM = LatM/60
	Lat = atoi(LatM);
 1001754:	e13f79c4 	addi	r4,fp,-537
 1001758:	100d7180 	call	100d718 <atoi>
 100175c:	e0bf7715 	stw	r2,-548(fp)
	Lat = Lat / 60;
 1001760:	e0ff7717 	ldw	r3,-548(fp)
 1001764:	00800f04 	movi	r2,60
 1001768:	1885283a 	div	r2,r3,r2
 100176c:	e0bf7715 	stw	r2,-548(fp)
	sprintf(LatM, "%i", Lat);
 1001770:	e13f79c4 	addi	r4,fp,-537
 1001774:	014040b4 	movhi	r5,258
 1001778:	29481604 	addi	r5,r5,8280
 100177c:	e1bf7717 	ldw	r6,-548(fp)
 1001780:	100e05c0 	call	100e05c <sprintf>

	//Longitude Calculation
	pointer = GPS_Data + 29;
 1001784:	e0bfff17 	ldw	r2,-4(fp)
 1001788:	10800744 	addi	r2,r2,29
 100178c:	e0bf7515 	stw	r2,-556(fp)

	LogD[0] = *(++pointer);
 1001790:	e0bf7517 	ldw	r2,-556(fp)
 1001794:	10800044 	addi	r2,r2,1
 1001798:	e0bf7515 	stw	r2,-556(fp)
 100179c:	e0bf7517 	ldw	r2,-556(fp)
 10017a0:	10800003 	ldbu	r2,0(r2)
 10017a4:	e0bf7b85 	stb	r2,-530(fp)
	LogD[1] = *(++pointer);
 10017a8:	e0bf7517 	ldw	r2,-556(fp)
 10017ac:	10800044 	addi	r2,r2,1
 10017b0:	e0bf7515 	stw	r2,-556(fp)
 10017b4:	e0bf7517 	ldw	r2,-556(fp)
 10017b8:	10800003 	ldbu	r2,0(r2)
 10017bc:	e0bf7bc5 	stb	r2,-529(fp)
	LogD[2] = *(++pointer);
 10017c0:	e0bf7517 	ldw	r2,-556(fp)
 10017c4:	10800044 	addi	r2,r2,1
 10017c8:	e0bf7515 	stw	r2,-556(fp)
 10017cc:	e0bf7517 	ldw	r2,-556(fp)
 10017d0:	10800003 	ldbu	r2,0(r2)
 10017d4:	e0bf7c05 	stb	r2,-528(fp)
	LogD[3] = '\0';
 10017d8:	e03f7c45 	stb	zero,-527(fp)

	LogM[0] = *(++pointer);
 10017dc:	e0bf7517 	ldw	r2,-556(fp)
 10017e0:	10800044 	addi	r2,r2,1
 10017e4:	e0bf7515 	stw	r2,-556(fp)
 10017e8:	e0bf7517 	ldw	r2,-556(fp)
 10017ec:	10800003 	ldbu	r2,0(r2)
 10017f0:	e0bf7c85 	stb	r2,-526(fp)
	LogM[1] = *(++pointer);
 10017f4:	e0bf7517 	ldw	r2,-556(fp)
 10017f8:	10800044 	addi	r2,r2,1
 10017fc:	e0bf7515 	stw	r2,-556(fp)
 1001800:	e0bf7517 	ldw	r2,-556(fp)
 1001804:	10800003 	ldbu	r2,0(r2)
 1001808:	e0bf7cc5 	stb	r2,-525(fp)
	++pointer; //skip over the comma
 100180c:	e0bf7517 	ldw	r2,-556(fp)
 1001810:	10800044 	addi	r2,r2,1
 1001814:	e0bf7515 	stw	r2,-556(fp)
	LogM[2] = *(++pointer);
 1001818:	e0bf7517 	ldw	r2,-556(fp)
 100181c:	10800044 	addi	r2,r2,1
 1001820:	e0bf7515 	stw	r2,-556(fp)
 1001824:	e0bf7517 	ldw	r2,-556(fp)
 1001828:	10800003 	ldbu	r2,0(r2)
 100182c:	e0bf7d05 	stb	r2,-524(fp)
	LogM[3] = *(++pointer);
 1001830:	e0bf7517 	ldw	r2,-556(fp)
 1001834:	10800044 	addi	r2,r2,1
 1001838:	e0bf7515 	stw	r2,-556(fp)
 100183c:	e0bf7517 	ldw	r2,-556(fp)
 1001840:	10800003 	ldbu	r2,0(r2)
 1001844:	e0bf7d45 	stb	r2,-523(fp)
	LogM[4] = *(++pointer);
 1001848:	e0bf7517 	ldw	r2,-556(fp)
 100184c:	10800044 	addi	r2,r2,1
 1001850:	e0bf7515 	stw	r2,-556(fp)
 1001854:	e0bf7517 	ldw	r2,-556(fp)
 1001858:	10800003 	ldbu	r2,0(r2)
 100185c:	e0bf7d85 	stb	r2,-522(fp)
	LogM[5] = *(++pointer);
 1001860:	e0bf7517 	ldw	r2,-556(fp)
 1001864:	10800044 	addi	r2,r2,1
 1001868:	e0bf7515 	stw	r2,-556(fp)
 100186c:	e0bf7517 	ldw	r2,-556(fp)
 1001870:	10800003 	ldbu	r2,0(r2)
 1001874:	e0bf7dc5 	stb	r2,-521(fp)
	LogM[6] = '\0';
 1001878:	e03f7e05 	stb	zero,-520(fp)

	//LogM = LogM/60
	Log = atoi(LogM);
 100187c:	e13f7c84 	addi	r4,fp,-526
 1001880:	100d7180 	call	100d718 <atoi>
 1001884:	e0bf7615 	stw	r2,-552(fp)
	Log = Log / 60;
 1001888:	e0ff7617 	ldw	r3,-552(fp)
 100188c:	00800f04 	movi	r2,60
 1001890:	1885283a 	div	r2,r3,r2
 1001894:	e0bf7615 	stw	r2,-552(fp)
	sprintf(LogM, "%i", Log);
 1001898:	e13f7c84 	addi	r4,fp,-526
 100189c:	014040b4 	movhi	r5,258
 10018a0:	29481604 	addi	r5,r5,8280
 10018a4:	e1bf7617 	ldw	r6,-552(fp)
 10018a8:	100e05c0 	call	100e05c <sprintf>

	char LatLog[512];

	strcpy(LatLog, NS);
 10018ac:	e13f7e44 	addi	r4,fp,-519
 10018b0:	e17f7804 	addi	r5,fp,-544
 10018b4:	100e27c0 	call	100e27c <strcpy>
	strcat(LatLog, LatD);
 10018b8:	e13f7e44 	addi	r4,fp,-519
 10018bc:	e17f7904 	addi	r5,fp,-540
 10018c0:	100e1300 	call	100e130 <strcat>
	strcat(LatLog, ".");
 10018c4:	e13f7e44 	addi	r4,fp,-519
 10018c8:	014040b4 	movhi	r5,258
 10018cc:	29481704 	addi	r5,r5,8284
 10018d0:	100e1300 	call	100e130 <strcat>
	strcat(LatLog, LatM);
 10018d4:	e13f7e44 	addi	r4,fp,-519
 10018d8:	e17f79c4 	addi	r5,fp,-537
 10018dc:	100e1300 	call	100e130 <strcat>

	strcat(LatLog, "|");
 10018e0:	e13f7e44 	addi	r4,fp,-519
 10018e4:	014040b4 	movhi	r5,258
 10018e8:	29481804 	addi	r5,r5,8288
 10018ec:	100e1300 	call	100e130 <strcat>

	strcat(LatLog, EW);
 10018f0:	e13f7e44 	addi	r4,fp,-519
 10018f4:	e17f7884 	addi	r5,fp,-542
 10018f8:	100e1300 	call	100e130 <strcat>
	strcat(LatLog, LogD);
 10018fc:	e13f7e44 	addi	r4,fp,-519
 1001900:	e17f7b84 	addi	r5,fp,-530
 1001904:	100e1300 	call	100e130 <strcat>
	strcat(LatLog, ".");
 1001908:	e13f7e44 	addi	r4,fp,-519
 100190c:	014040b4 	movhi	r5,258
 1001910:	29481704 	addi	r5,r5,8284
 1001914:	100e1300 	call	100e130 <strcat>
	strcat(LatLog, LogM);
 1001918:	e13f7e44 	addi	r4,fp,-519
 100191c:	e17f7c84 	addi	r5,fp,-526
 1001920:	100e1300 	call	100e130 <strcat>
	strcat(LatLog, "\n");
 1001924:	e13f7e44 	addi	r4,fp,-519
 1001928:	014040b4 	movhi	r5,258
 100192c:	29481904 	addi	r5,r5,8292
 1001930:	100e1300 	call	100e130 <strcat>

	return LatLog;
 1001934:	e0bf7e44 	addi	r2,fp,-519
}
 1001938:	e037883a 	mov	sp,fp
 100193c:	dfc00117 	ldw	ra,4(sp)
 1001940:	df000017 	ldw	fp,0(sp)
 1001944:	dec00204 	addi	sp,sp,8
 1001948:	f800283a 	ret

0100194c <getGPSData>:
 * Returns a strijng of either the geological coordinates or the PST time
 *
 * Note: Call init_GPS() before calling getGPSData
 */

char* getGPSData(int mode) {
 100194c:	deff7504 	addi	sp,sp,-556
 1001950:	dfc08a15 	stw	ra,552(sp)
 1001954:	df008915 	stw	fp,548(sp)
 1001958:	df008904 	addi	fp,sp,548
 100195c:	e13ffe15 	stw	r4,-8(fp)
	//mode check
	if (mode != GPSCOORD && mode != GPSTIME) {
 1001960:	e0bffe17 	ldw	r2,-8(fp)
 1001964:	1005003a 	cmpeq	r2,r2,zero
 1001968:	1000081e 	bne	r2,zero,100198c <getGPSData+0x40>
 100196c:	e0bffe17 	ldw	r2,-8(fp)
 1001970:	10800060 	cmpeqi	r2,r2,1
 1001974:	1000051e 	bne	r2,zero,100198c <getGPSData+0x40>
		printf("Invalid mode entered!!!!\n");
 1001978:	010040b4 	movhi	r4,258
 100197c:	21081a04 	addi	r4,r4,8296
 1001980:	100e0480 	call	100e048 <puts>
		return NULL;
 1001984:	e03fff15 	stw	zero,-4(fp)
 1001988:	00003206 	br	1001a54 <getGPSData+0x108>
	}
	char* GPSData;
	if (GPSTestForReceivedData() == 1) {
 100198c:	10013dc0 	call	10013dc <GPSTestForReceivedData>
 1001990:	10800058 	cmpnei	r2,r2,1
 1001994:	10002d1e 	bne	r2,zero,1001a4c <getGPSData+0x100>
		int check = 0;
 1001998:	e03f7a15 	stw	zero,-536(fp)

		char data[512];
		char str[7];

		int index = 0;
 100199c:	e03f7915 	stw	zero,-540(fp)
		int i = 0;
 10019a0:	e03f7815 	stw	zero,-544(fp)

		char input;
		input = getcharGPS();
 10019a4:	10013940 	call	1001394 <getcharGPS>
 10019a8:	e0bf7705 	stb	r2,-548(fp)

		while (1) {
			index = 0;
 10019ac:	e03f7915 	stw	zero,-540(fp)
			do {
				input = getcharGPS();
 10019b0:	10013940 	call	1001394 <getcharGPS>
 10019b4:	e0bf7705 	stb	r2,-548(fp)
				data[index] = input;
 10019b8:	e0ff7917 	ldw	r3,-540(fp)
 10019bc:	e0bf7dc4 	addi	r2,fp,-521
 10019c0:	10c7883a 	add	r3,r2,r3
 10019c4:	e0bf7703 	ldbu	r2,-548(fp)
 10019c8:	18800005 	stb	r2,0(r3)
				++index;
 10019cc:	e0bf7917 	ldw	r2,-540(fp)
 10019d0:	10800044 	addi	r2,r2,1
 10019d4:	e0bf7915 	stw	r2,-540(fp)
			} while (input != '\n');
 10019d8:	e0bf7707 	ldb	r2,-548(fp)
 10019dc:	10800298 	cmpnei	r2,r2,10
 10019e0:	103ff31e 	bne	r2,zero,10019b0 <getGPSData+0x64>
			data[index] = '\0';
 10019e4:	e0ff7917 	ldw	r3,-540(fp)
 10019e8:	e0bf7dc4 	addi	r2,fp,-521
 10019ec:	10c5883a 	add	r2,r2,r3
 10019f0:	10000005 	stb	zero,0(r2)

			strncpy(str, data, 6);
 10019f4:	e13f7c04 	addi	r4,fp,-528
 10019f8:	e17f7dc4 	addi	r5,fp,-521
 10019fc:	01800184 	movi	r6,6
 1001a00:	100e37c0 	call	100e37c <strncpy>
			str[6] = '\0';
 1001a04:	e03f7d85 	stb	zero,-522(fp)

			if (checkGPGGA(str) == 0) {
 1001a08:	e13f7c04 	addi	r4,fp,-528
 1001a0c:	100142c0 	call	100142c <checkGPGGA>
 1001a10:	1004c03a 	cmpne	r2,r2,zero
 1001a14:	103fe51e 	bne	r2,zero,10019ac <getGPSData+0x60>
				if (mode == GPSCOORD) {
 1001a18:	e0bffe17 	ldw	r2,-8(fp)
 1001a1c:	1004c03a 	cmpne	r2,r2,zero
 1001a20:	1000041e 	bne	r2,zero,1001a34 <getGPSData+0xe8>
					GPSData = parseGPSData(data);
 1001a24:	e13f7dc4 	addi	r4,fp,-521
 1001a28:	10015f00 	call	10015f0 <parseGPSData>
 1001a2c:	e0bf7b15 	stw	r2,-532(fp)
 1001a30:	00000606 	br	1001a4c <getGPSData+0x100>
				} else if (mode == GPSTIME) {
 1001a34:	e0bffe17 	ldw	r2,-8(fp)
 1001a38:	10800058 	cmpnei	r2,r2,1
 1001a3c:	1000031e 	bne	r2,zero,1001a4c <getGPSData+0x100>
					GPSData = getGPSTime(data);
 1001a40:	e13f7dc4 	addi	r4,fp,-521
 1001a44:	10014800 	call	1001480 <getGPSTime>
 1001a48:	e0bf7b15 	stw	r2,-532(fp)

				break;
			}
		}
	}
	return GPSData;
 1001a4c:	e0bf7b17 	ldw	r2,-532(fp)
 1001a50:	e0bfff15 	stw	r2,-4(fp)
 1001a54:	e0bfff17 	ldw	r2,-4(fp)
}
 1001a58:	e037883a 	mov	sp,fp
 1001a5c:	dfc00117 	ldw	ra,4(sp)
 1001a60:	df000017 	ldw	fp,0(sp)
 1001a64:	dec00204 	addi	sp,sp,8
 1001a68:	f800283a 	ret

01001a6c <getDistance>:

double getDistance(char* loc1, char* loc2) {
 1001a6c:	deffd504 	addi	sp,sp,-172
 1001a70:	dfc02a15 	stw	ra,168(sp)
 1001a74:	df002915 	stw	fp,164(sp)
 1001a78:	dcc02815 	stw	r19,160(sp)
 1001a7c:	dc802715 	stw	r18,156(sp)
 1001a80:	dc402615 	stw	r17,152(sp)
 1001a84:	dc002515 	stw	r16,148(sp)
 1001a88:	df002504 	addi	fp,sp,148
 1001a8c:	e13ffe15 	stw	r4,-8(fp)
 1001a90:	e17fff15 	stw	r5,-4(fp)
	char log1[10];
	char log2[10];

	double la1, la2, lo1, lo2;

	int i = 0;
 1001a94:	e03feb15 	stw	zero,-84(fp)

	while (loc1[i] != '|') {
 1001a98:	00001506 	br	1001af0 <getDistance+0x84>
		lat1[i] = *(loc1 + i);
 1001a9c:	e13feb17 	ldw	r4,-84(fp)
 1001aa0:	e0bfeb17 	ldw	r2,-84(fp)
 1001aa4:	1007883a 	mov	r3,r2
 1001aa8:	e0bffe17 	ldw	r2,-8(fp)
 1001aac:	1885883a 	add	r2,r3,r2
 1001ab0:	10c00003 	ldbu	r3,0(r2)
 1001ab4:	e0bff404 	addi	r2,fp,-48
 1001ab8:	1105883a 	add	r2,r2,r4
 1001abc:	10c00005 	stb	r3,0(r2)
		lat2[i] = *(loc2 + i);
 1001ac0:	e13feb17 	ldw	r4,-84(fp)
 1001ac4:	e0bfeb17 	ldw	r2,-84(fp)
 1001ac8:	1007883a 	mov	r3,r2
 1001acc:	e0bfff17 	ldw	r2,-4(fp)
 1001ad0:	1885883a 	add	r2,r3,r2
 1001ad4:	10c00003 	ldbu	r3,0(r2)
 1001ad8:	e0bff684 	addi	r2,fp,-38
 1001adc:	1105883a 	add	r2,r2,r4
 1001ae0:	10c00005 	stb	r3,0(r2)
		++i;
 1001ae4:	e0bfeb17 	ldw	r2,-84(fp)
 1001ae8:	10800044 	addi	r2,r2,1
 1001aec:	e0bfeb15 	stw	r2,-84(fp)

	double la1, la2, lo1, lo2;

	int i = 0;

	while (loc1[i] != '|') {
 1001af0:	e0bfeb17 	ldw	r2,-84(fp)
 1001af4:	1007883a 	mov	r3,r2
 1001af8:	e0bffe17 	ldw	r2,-8(fp)
 1001afc:	1885883a 	add	r2,r3,r2
 1001b00:	10800003 	ldbu	r2,0(r2)
 1001b04:	10803fcc 	andi	r2,r2,255
 1001b08:	1080201c 	xori	r2,r2,128
 1001b0c:	10bfe004 	addi	r2,r2,-128
 1001b10:	10801f18 	cmpnei	r2,r2,124
 1001b14:	103fe11e 	bne	r2,zero,1001a9c <getDistance+0x30>
		lat1[i] = *(loc1 + i);
		lat2[i] = *(loc2 + i);
		++i;
	}
	lat1[i] = '\0';
 1001b18:	e0ffeb17 	ldw	r3,-84(fp)
 1001b1c:	e0bff404 	addi	r2,fp,-48
 1001b20:	10c5883a 	add	r2,r2,r3
 1001b24:	10000005 	stb	zero,0(r2)
	lat2[i] = '\0';
 1001b28:	e0ffeb17 	ldw	r3,-84(fp)
 1001b2c:	e0bff684 	addi	r2,fp,-38
 1001b30:	10c5883a 	add	r2,r2,r3
 1001b34:	10000005 	stb	zero,0(r2)
	++i;
 1001b38:	e0bfeb17 	ldw	r2,-84(fp)
 1001b3c:	10800044 	addi	r2,r2,1
 1001b40:	e0bfeb15 	stw	r2,-84(fp)
	int j = 0;
 1001b44:	e03fea15 	stw	zero,-88(fp)
	while (loc1[i] != '\n') {
 1001b48:	00001806 	br	1001bac <getDistance+0x140>
		log1[j] = *(loc1 + i);
 1001b4c:	e13fea17 	ldw	r4,-88(fp)
 1001b50:	e0bfeb17 	ldw	r2,-84(fp)
 1001b54:	1007883a 	mov	r3,r2
 1001b58:	e0bffe17 	ldw	r2,-8(fp)
 1001b5c:	1885883a 	add	r2,r3,r2
 1001b60:	10c00003 	ldbu	r3,0(r2)
 1001b64:	e0bff904 	addi	r2,fp,-28
 1001b68:	1105883a 	add	r2,r2,r4
 1001b6c:	10c00005 	stb	r3,0(r2)
		log2[j] = *(loc2 + i);
 1001b70:	e13fea17 	ldw	r4,-88(fp)
 1001b74:	e0bfeb17 	ldw	r2,-84(fp)
 1001b78:	1007883a 	mov	r3,r2
 1001b7c:	e0bfff17 	ldw	r2,-4(fp)
 1001b80:	1885883a 	add	r2,r3,r2
 1001b84:	10c00003 	ldbu	r3,0(r2)
 1001b88:	e0bffb84 	addi	r2,fp,-18
 1001b8c:	1105883a 	add	r2,r2,r4
 1001b90:	10c00005 	stb	r3,0(r2)
		++i;
 1001b94:	e0bfeb17 	ldw	r2,-84(fp)
 1001b98:	10800044 	addi	r2,r2,1
 1001b9c:	e0bfeb15 	stw	r2,-84(fp)
		++j;
 1001ba0:	e0bfea17 	ldw	r2,-88(fp)
 1001ba4:	10800044 	addi	r2,r2,1
 1001ba8:	e0bfea15 	stw	r2,-88(fp)
	}
	lat1[i] = '\0';
	lat2[i] = '\0';
	++i;
	int j = 0;
	while (loc1[i] != '\n') {
 1001bac:	e0bfeb17 	ldw	r2,-84(fp)
 1001bb0:	1007883a 	mov	r3,r2
 1001bb4:	e0bffe17 	ldw	r2,-8(fp)
 1001bb8:	1885883a 	add	r2,r3,r2
 1001bbc:	10800003 	ldbu	r2,0(r2)
 1001bc0:	10803fcc 	andi	r2,r2,255
 1001bc4:	1080201c 	xori	r2,r2,128
 1001bc8:	10bfe004 	addi	r2,r2,-128
 1001bcc:	10800298 	cmpnei	r2,r2,10
 1001bd0:	103fde1e 	bne	r2,zero,1001b4c <getDistance+0xe0>
		log1[j] = *(loc1 + i);
		log2[j] = *(loc2 + i);
		++i;
		++j;
	}
	log1[j] = '\0';
 1001bd4:	e0ffea17 	ldw	r3,-88(fp)
 1001bd8:	e0bff904 	addi	r2,fp,-28
 1001bdc:	10c5883a 	add	r2,r2,r3
 1001be0:	10000005 	stb	zero,0(r2)
	log2[j] = '\0';
 1001be4:	e0ffea17 	ldw	r3,-88(fp)
 1001be8:	e0bffb84 	addi	r2,fp,-18
 1001bec:	10c5883a 	add	r2,r2,r3
 1001bf0:	10000005 	stb	zero,0(r2)

	//printf("log2 %s\n");

	la1 = atof(lat1);
 1001bf4:	e13ff404 	addi	r4,fp,-48
 1001bf8:	100d7040 	call	100d704 <atof>
 1001bfc:	1009883a 	mov	r4,r2
 1001c00:	180b883a 	mov	r5,r3
 1001c04:	e13ff215 	stw	r4,-56(fp)
 1001c08:	e17ff315 	stw	r5,-52(fp)
	la2 = atof(lat2);
 1001c0c:	e13ff684 	addi	r4,fp,-38
 1001c10:	100d7040 	call	100d704 <atof>
 1001c14:	1009883a 	mov	r4,r2
 1001c18:	180b883a 	mov	r5,r3
 1001c1c:	e13ff015 	stw	r4,-64(fp)
 1001c20:	e17ff115 	stw	r5,-60(fp)
	lo1 = atof(log1);
 1001c24:	e13ff904 	addi	r4,fp,-28
 1001c28:	100d7040 	call	100d704 <atof>
 1001c2c:	1009883a 	mov	r4,r2
 1001c30:	180b883a 	mov	r5,r3
 1001c34:	e13fee15 	stw	r4,-72(fp)
 1001c38:	e17fef15 	stw	r5,-68(fp)
	lo2 = atof(log2);
 1001c3c:	e13ffb84 	addi	r4,fp,-18
 1001c40:	100d7040 	call	100d704 <atof>
 1001c44:	1009883a 	mov	r4,r2
 1001c48:	180b883a 	mov	r5,r3
 1001c4c:	e13fec15 	stw	r4,-80(fp)
 1001c50:	e17fed15 	stw	r5,-76(fp)

	printf("la1: %f  lat2: %f  log1: %f   log2: %f\n", la1, la2, lo1, lo2);
 1001c54:	e0bfee17 	ldw	r2,-72(fp)
 1001c58:	d8800115 	stw	r2,4(sp)
 1001c5c:	e0bfef17 	ldw	r2,-68(fp)
 1001c60:	d8800215 	stw	r2,8(sp)
 1001c64:	e0bfec17 	ldw	r2,-80(fp)
 1001c68:	d8800315 	stw	r2,12(sp)
 1001c6c:	e0bfed17 	ldw	r2,-76(fp)
 1001c70:	d8800415 	stw	r2,16(sp)
 1001c74:	e0bff117 	ldw	r2,-60(fp)
 1001c78:	d8800015 	stw	r2,0(sp)
 1001c7c:	e1fff017 	ldw	r7,-64(fp)
 1001c80:	010040b4 	movhi	r4,258
 1001c84:	21082104 	addi	r4,r4,8324
 1001c88:	e17ff217 	ldw	r5,-56(fp)
 1001c8c:	e1bff317 	ldw	r6,-52(fp)
 1001c90:	100df0c0 	call	100df0c <printf>

	double dLat = deg2rad(la2 - la1);
 1001c94:	e13ff017 	ldw	r4,-64(fp)
 1001c98:	e17ff117 	ldw	r5,-60(fp)
 1001c9c:	e1bff217 	ldw	r6,-56(fp)
 1001ca0:	e1fff317 	ldw	r7,-52(fp)
 1001ca4:	100c0e40 	call	100c0e4 <__subdf3>
 1001ca8:	1009883a 	mov	r4,r2
 1001cac:	180b883a 	mov	r5,r3
 1001cb0:	2005883a 	mov	r2,r4
 1001cb4:	2807883a 	mov	r3,r5
 1001cb8:	1009883a 	mov	r4,r2
 1001cbc:	180b883a 	mov	r5,r3
 1001cc0:	100240c0 	call	100240c <deg2rad>
 1001cc4:	1009883a 	mov	r4,r2
 1001cc8:	180b883a 	mov	r5,r3
 1001ccc:	e13fe815 	stw	r4,-96(fp)
 1001cd0:	e17fe915 	stw	r5,-92(fp)
	double dLog = deg2rad(lo2 - lo1);
 1001cd4:	e13fec17 	ldw	r4,-80(fp)
 1001cd8:	e17fed17 	ldw	r5,-76(fp)
 1001cdc:	e1bfee17 	ldw	r6,-72(fp)
 1001ce0:	e1ffef17 	ldw	r7,-68(fp)
 1001ce4:	100c0e40 	call	100c0e4 <__subdf3>
 1001ce8:	1009883a 	mov	r4,r2
 1001cec:	180b883a 	mov	r5,r3
 1001cf0:	2005883a 	mov	r2,r4
 1001cf4:	2807883a 	mov	r3,r5
 1001cf8:	1009883a 	mov	r4,r2
 1001cfc:	180b883a 	mov	r5,r3
 1001d00:	100240c0 	call	100240c <deg2rad>
 1001d04:	1009883a 	mov	r4,r2
 1001d08:	180b883a 	mov	r5,r3
 1001d0c:	e13fe615 	stw	r4,-104(fp)
 1001d10:	e17fe715 	stw	r5,-100(fp)

	double a = sin(dLat / 2) * sin(dLat / 2)
			+ cos(deg2rad(la1)) * cos(deg2rad(la2)) * sin(dLog / 2)
					* sin(dLog / 2);
 1001d14:	e13fe817 	ldw	r4,-96(fp)
 1001d18:	e17fe917 	ldw	r5,-92(fp)
 1001d1c:	000d883a 	mov	r6,zero
 1001d20:	01d00034 	movhi	r7,16384
 1001d24:	100c59c0 	call	100c59c <__divdf3>
 1001d28:	1009883a 	mov	r4,r2
 1001d2c:	180b883a 	mov	r5,r3
 1001d30:	2005883a 	mov	r2,r4
 1001d34:	2807883a 	mov	r3,r5
 1001d38:	1009883a 	mov	r4,r2
 1001d3c:	180b883a 	mov	r5,r3
 1001d40:	10084600 	call	1008460 <sin>
 1001d44:	1021883a 	mov	r16,r2
 1001d48:	1823883a 	mov	r17,r3
 1001d4c:	e13fe817 	ldw	r4,-96(fp)
 1001d50:	e17fe917 	ldw	r5,-92(fp)
 1001d54:	000d883a 	mov	r6,zero
 1001d58:	01d00034 	movhi	r7,16384
 1001d5c:	100c59c0 	call	100c59c <__divdf3>
 1001d60:	1009883a 	mov	r4,r2
 1001d64:	180b883a 	mov	r5,r3
 1001d68:	2005883a 	mov	r2,r4
 1001d6c:	2807883a 	mov	r3,r5
 1001d70:	1009883a 	mov	r4,r2
 1001d74:	180b883a 	mov	r5,r3
 1001d78:	10084600 	call	1008460 <sin>
 1001d7c:	100f883a 	mov	r7,r2
 1001d80:	1811883a 	mov	r8,r3
 1001d84:	8009883a 	mov	r4,r16
 1001d88:	880b883a 	mov	r5,r17
 1001d8c:	380d883a 	mov	r6,r7
 1001d90:	400f883a 	mov	r7,r8
 1001d94:	100c1d80 	call	100c1d8 <__muldf3>
 1001d98:	1009883a 	mov	r4,r2
 1001d9c:	180b883a 	mov	r5,r3
 1001da0:	2025883a 	mov	r18,r4
 1001da4:	2827883a 	mov	r19,r5
 1001da8:	e13ff217 	ldw	r4,-56(fp)
 1001dac:	e17ff317 	ldw	r5,-52(fp)
 1001db0:	100240c0 	call	100240c <deg2rad>
 1001db4:	100b883a 	mov	r5,r2
 1001db8:	180d883a 	mov	r6,r3
 1001dbc:	2809883a 	mov	r4,r5
 1001dc0:	300b883a 	mov	r5,r6
 1001dc4:	10082f80 	call	10082f8 <cos>
 1001dc8:	1021883a 	mov	r16,r2
 1001dcc:	1823883a 	mov	r17,r3
 1001dd0:	e13ff017 	ldw	r4,-64(fp)
 1001dd4:	e17ff117 	ldw	r5,-60(fp)
 1001dd8:	100240c0 	call	100240c <deg2rad>
 1001ddc:	100b883a 	mov	r5,r2
 1001de0:	180d883a 	mov	r6,r3
 1001de4:	2809883a 	mov	r4,r5
 1001de8:	300b883a 	mov	r5,r6
 1001dec:	10082f80 	call	10082f8 <cos>
 1001df0:	100f883a 	mov	r7,r2
 1001df4:	1811883a 	mov	r8,r3
 1001df8:	8009883a 	mov	r4,r16
 1001dfc:	880b883a 	mov	r5,r17
 1001e00:	380d883a 	mov	r6,r7
 1001e04:	400f883a 	mov	r7,r8
 1001e08:	100c1d80 	call	100c1d8 <__muldf3>
 1001e0c:	1009883a 	mov	r4,r2
 1001e10:	180b883a 	mov	r5,r3
 1001e14:	2021883a 	mov	r16,r4
 1001e18:	2823883a 	mov	r17,r5
 1001e1c:	e13fe617 	ldw	r4,-104(fp)
 1001e20:	e17fe717 	ldw	r5,-100(fp)
 1001e24:	000d883a 	mov	r6,zero
 1001e28:	01d00034 	movhi	r7,16384
 1001e2c:	100c59c0 	call	100c59c <__divdf3>
 1001e30:	1009883a 	mov	r4,r2
 1001e34:	180b883a 	mov	r5,r3
 1001e38:	2005883a 	mov	r2,r4
 1001e3c:	2807883a 	mov	r3,r5
 1001e40:	1009883a 	mov	r4,r2
 1001e44:	180b883a 	mov	r5,r3
 1001e48:	10084600 	call	1008460 <sin>
 1001e4c:	100f883a 	mov	r7,r2
 1001e50:	1811883a 	mov	r8,r3
 1001e54:	8009883a 	mov	r4,r16
 1001e58:	880b883a 	mov	r5,r17
 1001e5c:	380d883a 	mov	r6,r7
 1001e60:	400f883a 	mov	r7,r8
 1001e64:	100c1d80 	call	100c1d8 <__muldf3>
 1001e68:	1009883a 	mov	r4,r2
 1001e6c:	180b883a 	mov	r5,r3
 1001e70:	2021883a 	mov	r16,r4
 1001e74:	2823883a 	mov	r17,r5
 1001e78:	e13fe617 	ldw	r4,-104(fp)
 1001e7c:	e17fe717 	ldw	r5,-100(fp)
 1001e80:	000d883a 	mov	r6,zero
 1001e84:	01d00034 	movhi	r7,16384
 1001e88:	100c59c0 	call	100c59c <__divdf3>
 1001e8c:	1009883a 	mov	r4,r2
 1001e90:	180b883a 	mov	r5,r3
 1001e94:	2005883a 	mov	r2,r4
 1001e98:	2807883a 	mov	r3,r5
 1001e9c:	1009883a 	mov	r4,r2
 1001ea0:	180b883a 	mov	r5,r3
 1001ea4:	10084600 	call	1008460 <sin>
 1001ea8:	100f883a 	mov	r7,r2
 1001eac:	1811883a 	mov	r8,r3
 1001eb0:	8009883a 	mov	r4,r16
 1001eb4:	880b883a 	mov	r5,r17
 1001eb8:	380d883a 	mov	r6,r7
 1001ebc:	400f883a 	mov	r7,r8
 1001ec0:	100c1d80 	call	100c1d8 <__muldf3>
 1001ec4:	1009883a 	mov	r4,r2
 1001ec8:	180b883a 	mov	r5,r3
 1001ecc:	2005883a 	mov	r2,r4
 1001ed0:	2807883a 	mov	r3,r5
 1001ed4:	9009883a 	mov	r4,r18
 1001ed8:	980b883a 	mov	r5,r19
 1001edc:	100d883a 	mov	r6,r2
 1001ee0:	180f883a 	mov	r7,r3
 1001ee4:	100c1640 	call	100c164 <__adddf3>
 1001ee8:	1009883a 	mov	r4,r2
 1001eec:	180b883a 	mov	r5,r3
 1001ef0:	e13fe415 	stw	r4,-112(fp)
 1001ef4:	e17fe515 	stw	r5,-108(fp)
	double c = 2 * atan2(sqrt(a), sqrt(1 - a));
 1001ef8:	e13fe417 	ldw	r4,-112(fp)
 1001efc:	e17fe517 	ldw	r5,-108(fp)
 1001f00:	10085d00 	call	10085d0 <sqrt>
 1001f04:	1021883a 	mov	r16,r2
 1001f08:	1823883a 	mov	r17,r3
 1001f0c:	0009883a 	mov	r4,zero
 1001f10:	014ffc34 	movhi	r5,16368
 1001f14:	e1bfe417 	ldw	r6,-112(fp)
 1001f18:	e1ffe517 	ldw	r7,-108(fp)
 1001f1c:	100c0e40 	call	100c0e4 <__subdf3>
 1001f20:	1009883a 	mov	r4,r2
 1001f24:	180b883a 	mov	r5,r3
 1001f28:	2005883a 	mov	r2,r4
 1001f2c:	2807883a 	mov	r3,r5
 1001f30:	1009883a 	mov	r4,r2
 1001f34:	180b883a 	mov	r5,r3
 1001f38:	10085d00 	call	10085d0 <sqrt>
 1001f3c:	100f883a 	mov	r7,r2
 1001f40:	1811883a 	mov	r8,r3
 1001f44:	8009883a 	mov	r4,r16
 1001f48:	880b883a 	mov	r5,r17
 1001f4c:	380d883a 	mov	r6,r7
 1001f50:	400f883a 	mov	r7,r8
 1001f54:	10085cc0 	call	10085cc <atan2>
 1001f58:	100f883a 	mov	r7,r2
 1001f5c:	1811883a 	mov	r8,r3
 1001f60:	3809883a 	mov	r4,r7
 1001f64:	400b883a 	mov	r5,r8
 1001f68:	380d883a 	mov	r6,r7
 1001f6c:	400f883a 	mov	r7,r8
 1001f70:	100c1640 	call	100c164 <__adddf3>
 1001f74:	1009883a 	mov	r4,r2
 1001f78:	180b883a 	mov	r5,r3
 1001f7c:	e13fe215 	stw	r4,-120(fp)
 1001f80:	e17fe315 	stw	r5,-116(fp)
	double distance = EarthR * c;
 1001f84:	e13fe217 	ldw	r4,-120(fp)
 1001f88:	e17fe317 	ldw	r5,-116(fp)
 1001f8c:	000d883a 	mov	r6,zero
 1001f90:	01d02e74 	movhi	r7,16569
 1001f94:	39f8c004 	addi	r7,r7,-7424
 1001f98:	100c1d80 	call	100c1d8 <__muldf3>
 1001f9c:	1009883a 	mov	r4,r2
 1001fa0:	180b883a 	mov	r5,r3
 1001fa4:	e13fe015 	stw	r4,-128(fp)
 1001fa8:	e17fe115 	stw	r5,-124(fp)

	return distance;
 1001fac:	e17fe017 	ldw	r5,-128(fp)
 1001fb0:	e1bfe117 	ldw	r6,-124(fp)
 1001fb4:	2807883a 	mov	r3,r5
 1001fb8:	3009883a 	mov	r4,r6
}
 1001fbc:	1805883a 	mov	r2,r3
 1001fc0:	2007883a 	mov	r3,r4
 1001fc4:	e037883a 	mov	sp,fp
 1001fc8:	dfc00517 	ldw	ra,20(sp)
 1001fcc:	df000417 	ldw	fp,16(sp)
 1001fd0:	dcc00317 	ldw	r19,12(sp)
 1001fd4:	dc800217 	ldw	r18,8(sp)
 1001fd8:	dc400117 	ldw	r17,4(sp)
 1001fdc:	dc000017 	ldw	r16,0(sp)
 1001fe0:	dec00604 	addi	sp,sp,24
 1001fe4:	f800283a 	ret

01001fe8 <getDistance2>:

double getDistance2(char lat1[],char long1[], char lat2[], char long2[]) {
 1001fe8:	deffdf04 	addi	sp,sp,-132
 1001fec:	dfc02015 	stw	ra,128(sp)
 1001ff0:	df001f15 	stw	fp,124(sp)
 1001ff4:	dcc01e15 	stw	r19,120(sp)
 1001ff8:	dc801d15 	stw	r18,116(sp)
 1001ffc:	dc401c15 	stw	r17,112(sp)
 1002000:	dc001b15 	stw	r16,108(sp)
 1002004:	df001b04 	addi	fp,sp,108
 1002008:	e13ffc15 	stw	r4,-16(fp)
 100200c:	e17ffd15 	stw	r5,-12(fp)
 1002010:	e1bffe15 	stw	r6,-8(fp)
 1002014:	e1ffff15 	stw	r7,-4(fp)

	double la1, la2, lo1, lo2;

	//printf("log2 %s\n");

	la1 = atof(lat1);
 1002018:	e13ffc17 	ldw	r4,-16(fp)
 100201c:	100d7040 	call	100d704 <atof>
 1002020:	1009883a 	mov	r4,r2
 1002024:	180b883a 	mov	r5,r3
 1002028:	e13ffa15 	stw	r4,-24(fp)
 100202c:	e17ffb15 	stw	r5,-20(fp)
	la2 = atof(lat2);
 1002030:	e13ffe17 	ldw	r4,-8(fp)
 1002034:	100d7040 	call	100d704 <atof>
 1002038:	1009883a 	mov	r4,r2
 100203c:	180b883a 	mov	r5,r3
 1002040:	e13ff815 	stw	r4,-32(fp)
 1002044:	e17ff915 	stw	r5,-28(fp)
	lo1 = atof(long1);
 1002048:	e13ffd17 	ldw	r4,-12(fp)
 100204c:	100d7040 	call	100d704 <atof>
 1002050:	1009883a 	mov	r4,r2
 1002054:	180b883a 	mov	r5,r3
 1002058:	e13ff615 	stw	r4,-40(fp)
 100205c:	e17ff715 	stw	r5,-36(fp)
	lo2 = atof(long2);
 1002060:	e13fff17 	ldw	r4,-4(fp)
 1002064:	100d7040 	call	100d704 <atof>
 1002068:	1009883a 	mov	r4,r2
 100206c:	180b883a 	mov	r5,r3
 1002070:	e13ff415 	stw	r4,-48(fp)
 1002074:	e17ff515 	stw	r5,-44(fp)

	printf("la1: %f  lat2: %f  log1: %f   log2: %f\n", la1, la2, lo1, lo2);
 1002078:	e0bff617 	ldw	r2,-40(fp)
 100207c:	d8800115 	stw	r2,4(sp)
 1002080:	e0bff717 	ldw	r2,-36(fp)
 1002084:	d8800215 	stw	r2,8(sp)
 1002088:	e0bff417 	ldw	r2,-48(fp)
 100208c:	d8800315 	stw	r2,12(sp)
 1002090:	e0bff517 	ldw	r2,-44(fp)
 1002094:	d8800415 	stw	r2,16(sp)
 1002098:	e0bff917 	ldw	r2,-28(fp)
 100209c:	d8800015 	stw	r2,0(sp)
 10020a0:	e1fff817 	ldw	r7,-32(fp)
 10020a4:	010040b4 	movhi	r4,258
 10020a8:	21082104 	addi	r4,r4,8324
 10020ac:	e17ffa17 	ldw	r5,-24(fp)
 10020b0:	e1bffb17 	ldw	r6,-20(fp)
 10020b4:	100df0c0 	call	100df0c <printf>

	double dLat = deg2rad(la2 - la1);
 10020b8:	e13ff817 	ldw	r4,-32(fp)
 10020bc:	e17ff917 	ldw	r5,-28(fp)
 10020c0:	e1bffa17 	ldw	r6,-24(fp)
 10020c4:	e1fffb17 	ldw	r7,-20(fp)
 10020c8:	100c0e40 	call	100c0e4 <__subdf3>
 10020cc:	1009883a 	mov	r4,r2
 10020d0:	180b883a 	mov	r5,r3
 10020d4:	2005883a 	mov	r2,r4
 10020d8:	2807883a 	mov	r3,r5
 10020dc:	1009883a 	mov	r4,r2
 10020e0:	180b883a 	mov	r5,r3
 10020e4:	100240c0 	call	100240c <deg2rad>
 10020e8:	1009883a 	mov	r4,r2
 10020ec:	180b883a 	mov	r5,r3
 10020f0:	e13ff215 	stw	r4,-56(fp)
 10020f4:	e17ff315 	stw	r5,-52(fp)
	double dLog = deg2rad(lo2 - lo1);
 10020f8:	e13ff417 	ldw	r4,-48(fp)
 10020fc:	e17ff517 	ldw	r5,-44(fp)
 1002100:	e1bff617 	ldw	r6,-40(fp)
 1002104:	e1fff717 	ldw	r7,-36(fp)
 1002108:	100c0e40 	call	100c0e4 <__subdf3>
 100210c:	1009883a 	mov	r4,r2
 1002110:	180b883a 	mov	r5,r3
 1002114:	2005883a 	mov	r2,r4
 1002118:	2807883a 	mov	r3,r5
 100211c:	1009883a 	mov	r4,r2
 1002120:	180b883a 	mov	r5,r3
 1002124:	100240c0 	call	100240c <deg2rad>
 1002128:	1009883a 	mov	r4,r2
 100212c:	180b883a 	mov	r5,r3
 1002130:	e13ff015 	stw	r4,-64(fp)
 1002134:	e17ff115 	stw	r5,-60(fp)

	double a = sin(dLat / 2) * sin(dLat / 2)
			+ cos(deg2rad(la1)) * cos(deg2rad(la2)) * sin(dLog / 2)
					* sin(dLog / 2);
 1002138:	e13ff217 	ldw	r4,-56(fp)
 100213c:	e17ff317 	ldw	r5,-52(fp)
 1002140:	000d883a 	mov	r6,zero
 1002144:	01d00034 	movhi	r7,16384
 1002148:	100c59c0 	call	100c59c <__divdf3>
 100214c:	1009883a 	mov	r4,r2
 1002150:	180b883a 	mov	r5,r3
 1002154:	2005883a 	mov	r2,r4
 1002158:	2807883a 	mov	r3,r5
 100215c:	1009883a 	mov	r4,r2
 1002160:	180b883a 	mov	r5,r3
 1002164:	10084600 	call	1008460 <sin>
 1002168:	1021883a 	mov	r16,r2
 100216c:	1823883a 	mov	r17,r3
 1002170:	e13ff217 	ldw	r4,-56(fp)
 1002174:	e17ff317 	ldw	r5,-52(fp)
 1002178:	000d883a 	mov	r6,zero
 100217c:	01d00034 	movhi	r7,16384
 1002180:	100c59c0 	call	100c59c <__divdf3>
 1002184:	1009883a 	mov	r4,r2
 1002188:	180b883a 	mov	r5,r3
 100218c:	2005883a 	mov	r2,r4
 1002190:	2807883a 	mov	r3,r5
 1002194:	1009883a 	mov	r4,r2
 1002198:	180b883a 	mov	r5,r3
 100219c:	10084600 	call	1008460 <sin>
 10021a0:	100f883a 	mov	r7,r2
 10021a4:	1811883a 	mov	r8,r3
 10021a8:	8009883a 	mov	r4,r16
 10021ac:	880b883a 	mov	r5,r17
 10021b0:	380d883a 	mov	r6,r7
 10021b4:	400f883a 	mov	r7,r8
 10021b8:	100c1d80 	call	100c1d8 <__muldf3>
 10021bc:	1009883a 	mov	r4,r2
 10021c0:	180b883a 	mov	r5,r3
 10021c4:	2025883a 	mov	r18,r4
 10021c8:	2827883a 	mov	r19,r5
 10021cc:	e13ffa17 	ldw	r4,-24(fp)
 10021d0:	e17ffb17 	ldw	r5,-20(fp)
 10021d4:	100240c0 	call	100240c <deg2rad>
 10021d8:	100b883a 	mov	r5,r2
 10021dc:	180d883a 	mov	r6,r3
 10021e0:	2809883a 	mov	r4,r5
 10021e4:	300b883a 	mov	r5,r6
 10021e8:	10082f80 	call	10082f8 <cos>
 10021ec:	1021883a 	mov	r16,r2
 10021f0:	1823883a 	mov	r17,r3
 10021f4:	e13ff817 	ldw	r4,-32(fp)
 10021f8:	e17ff917 	ldw	r5,-28(fp)
 10021fc:	100240c0 	call	100240c <deg2rad>
 1002200:	100b883a 	mov	r5,r2
 1002204:	180d883a 	mov	r6,r3
 1002208:	2809883a 	mov	r4,r5
 100220c:	300b883a 	mov	r5,r6
 1002210:	10082f80 	call	10082f8 <cos>
 1002214:	100f883a 	mov	r7,r2
 1002218:	1811883a 	mov	r8,r3
 100221c:	8009883a 	mov	r4,r16
 1002220:	880b883a 	mov	r5,r17
 1002224:	380d883a 	mov	r6,r7
 1002228:	400f883a 	mov	r7,r8
 100222c:	100c1d80 	call	100c1d8 <__muldf3>
 1002230:	1009883a 	mov	r4,r2
 1002234:	180b883a 	mov	r5,r3
 1002238:	2021883a 	mov	r16,r4
 100223c:	2823883a 	mov	r17,r5
 1002240:	e13ff017 	ldw	r4,-64(fp)
 1002244:	e17ff117 	ldw	r5,-60(fp)
 1002248:	000d883a 	mov	r6,zero
 100224c:	01d00034 	movhi	r7,16384
 1002250:	100c59c0 	call	100c59c <__divdf3>
 1002254:	1009883a 	mov	r4,r2
 1002258:	180b883a 	mov	r5,r3
 100225c:	2005883a 	mov	r2,r4
 1002260:	2807883a 	mov	r3,r5
 1002264:	1009883a 	mov	r4,r2
 1002268:	180b883a 	mov	r5,r3
 100226c:	10084600 	call	1008460 <sin>
 1002270:	100f883a 	mov	r7,r2
 1002274:	1811883a 	mov	r8,r3
 1002278:	8009883a 	mov	r4,r16
 100227c:	880b883a 	mov	r5,r17
 1002280:	380d883a 	mov	r6,r7
 1002284:	400f883a 	mov	r7,r8
 1002288:	100c1d80 	call	100c1d8 <__muldf3>
 100228c:	1009883a 	mov	r4,r2
 1002290:	180b883a 	mov	r5,r3
 1002294:	2021883a 	mov	r16,r4
 1002298:	2823883a 	mov	r17,r5
 100229c:	e13ff017 	ldw	r4,-64(fp)
 10022a0:	e17ff117 	ldw	r5,-60(fp)
 10022a4:	000d883a 	mov	r6,zero
 10022a8:	01d00034 	movhi	r7,16384
 10022ac:	100c59c0 	call	100c59c <__divdf3>
 10022b0:	1009883a 	mov	r4,r2
 10022b4:	180b883a 	mov	r5,r3
 10022b8:	2005883a 	mov	r2,r4
 10022bc:	2807883a 	mov	r3,r5
 10022c0:	1009883a 	mov	r4,r2
 10022c4:	180b883a 	mov	r5,r3
 10022c8:	10084600 	call	1008460 <sin>
 10022cc:	100f883a 	mov	r7,r2
 10022d0:	1811883a 	mov	r8,r3
 10022d4:	8009883a 	mov	r4,r16
 10022d8:	880b883a 	mov	r5,r17
 10022dc:	380d883a 	mov	r6,r7
 10022e0:	400f883a 	mov	r7,r8
 10022e4:	100c1d80 	call	100c1d8 <__muldf3>
 10022e8:	1009883a 	mov	r4,r2
 10022ec:	180b883a 	mov	r5,r3
 10022f0:	2005883a 	mov	r2,r4
 10022f4:	2807883a 	mov	r3,r5
 10022f8:	9009883a 	mov	r4,r18
 10022fc:	980b883a 	mov	r5,r19
 1002300:	100d883a 	mov	r6,r2
 1002304:	180f883a 	mov	r7,r3
 1002308:	100c1640 	call	100c164 <__adddf3>
 100230c:	1009883a 	mov	r4,r2
 1002310:	180b883a 	mov	r5,r3
 1002314:	e13fee15 	stw	r4,-72(fp)
 1002318:	e17fef15 	stw	r5,-68(fp)
	double c = 2 * atan2(sqrt(a), sqrt(1 - a));
 100231c:	e13fee17 	ldw	r4,-72(fp)
 1002320:	e17fef17 	ldw	r5,-68(fp)
 1002324:	10085d00 	call	10085d0 <sqrt>
 1002328:	1021883a 	mov	r16,r2
 100232c:	1823883a 	mov	r17,r3
 1002330:	0009883a 	mov	r4,zero
 1002334:	014ffc34 	movhi	r5,16368
 1002338:	e1bfee17 	ldw	r6,-72(fp)
 100233c:	e1ffef17 	ldw	r7,-68(fp)
 1002340:	100c0e40 	call	100c0e4 <__subdf3>
 1002344:	1009883a 	mov	r4,r2
 1002348:	180b883a 	mov	r5,r3
 100234c:	2005883a 	mov	r2,r4
 1002350:	2807883a 	mov	r3,r5
 1002354:	1009883a 	mov	r4,r2
 1002358:	180b883a 	mov	r5,r3
 100235c:	10085d00 	call	10085d0 <sqrt>
 1002360:	100f883a 	mov	r7,r2
 1002364:	1811883a 	mov	r8,r3
 1002368:	8009883a 	mov	r4,r16
 100236c:	880b883a 	mov	r5,r17
 1002370:	380d883a 	mov	r6,r7
 1002374:	400f883a 	mov	r7,r8
 1002378:	10085cc0 	call	10085cc <atan2>
 100237c:	100f883a 	mov	r7,r2
 1002380:	1811883a 	mov	r8,r3
 1002384:	3809883a 	mov	r4,r7
 1002388:	400b883a 	mov	r5,r8
 100238c:	380d883a 	mov	r6,r7
 1002390:	400f883a 	mov	r7,r8
 1002394:	100c1640 	call	100c164 <__adddf3>
 1002398:	1009883a 	mov	r4,r2
 100239c:	180b883a 	mov	r5,r3
 10023a0:	e13fec15 	stw	r4,-80(fp)
 10023a4:	e17fed15 	stw	r5,-76(fp)
	double distance = EarthR * c;
 10023a8:	e13fec17 	ldw	r4,-80(fp)
 10023ac:	e17fed17 	ldw	r5,-76(fp)
 10023b0:	000d883a 	mov	r6,zero
 10023b4:	01d02e74 	movhi	r7,16569
 10023b8:	39f8c004 	addi	r7,r7,-7424
 10023bc:	100c1d80 	call	100c1d8 <__muldf3>
 10023c0:	1009883a 	mov	r4,r2
 10023c4:	180b883a 	mov	r5,r3
 10023c8:	e13fea15 	stw	r4,-88(fp)
 10023cc:	e17feb15 	stw	r5,-84(fp)

	return distance;
 10023d0:	e17fea17 	ldw	r5,-88(fp)
 10023d4:	e1bfeb17 	ldw	r6,-84(fp)
 10023d8:	2807883a 	mov	r3,r5
 10023dc:	3009883a 	mov	r4,r6
}
 10023e0:	1805883a 	mov	r2,r3
 10023e4:	2007883a 	mov	r3,r4
 10023e8:	e037883a 	mov	sp,fp
 10023ec:	dfc00517 	ldw	ra,20(sp)
 10023f0:	df000417 	ldw	fp,16(sp)
 10023f4:	dcc00317 	ldw	r19,12(sp)
 10023f8:	dc800217 	ldw	r18,8(sp)
 10023fc:	dc400117 	ldw	r17,4(sp)
 1002400:	dc000017 	ldw	r16,0(sp)
 1002404:	dec00604 	addi	sp,sp,24
 1002408:	f800283a 	ret

0100240c <deg2rad>:


double deg2rad(double deg) {
 100240c:	defffc04 	addi	sp,sp,-16
 1002410:	dfc00315 	stw	ra,12(sp)
 1002414:	df000215 	stw	fp,8(sp)
 1002418:	df000204 	addi	fp,sp,8
 100241c:	e13ffe15 	stw	r4,-8(fp)
 1002420:	e17fff15 	stw	r5,-4(fp)
	return deg * PI / 180;
 1002424:	e13ffe17 	ldw	r4,-8(fp)
 1002428:	e17fff17 	ldw	r5,-4(fp)
 100242c:	01951134 	movhi	r6,21572
 1002430:	318b4604 	addi	r6,r6,11544
 1002434:	01d00274 	movhi	r7,16393
 1002438:	39c87ec4 	addi	r7,r7,8699
 100243c:	100c1d80 	call	100c1d8 <__muldf3>
 1002440:	1009883a 	mov	r4,r2
 1002444:	180b883a 	mov	r5,r3
 1002448:	2005883a 	mov	r2,r4
 100244c:	2807883a 	mov	r3,r5
 1002450:	1009883a 	mov	r4,r2
 1002454:	180b883a 	mov	r5,r3
 1002458:	000d883a 	mov	r6,zero
 100245c:	01d019f4 	movhi	r7,16487
 1002460:	39e00004 	addi	r7,r7,-32768
 1002464:	100c59c0 	call	100c59c <__divdf3>
 1002468:	1009883a 	mov	r4,r2
 100246c:	180b883a 	mov	r5,r3
 1002470:	200d883a 	mov	r6,r4
 1002474:	280f883a 	mov	r7,r5
 1002478:	3007883a 	mov	r3,r6
 100247c:	3809883a 	mov	r4,r7
}
 1002480:	1805883a 	mov	r2,r3
 1002484:	2007883a 	mov	r3,r4
 1002488:	e037883a 	mov	sp,fp
 100248c:	dfc00117 	ldw	ra,4(sp)
 1002490:	df000017 	ldw	fp,0(sp)
 1002494:	dec00204 	addi	sp,sp,8
 1002498:	f800283a 	ret

0100249c <checkGPVTG>:

int checkGPVTG(char* string) {
 100249c:	defffb04 	addi	sp,sp,-20
 10024a0:	dfc00415 	stw	ra,16(sp)
 10024a4:	df000315 	stw	fp,12(sp)
 10024a8:	df000304 	addi	fp,sp,12
 10024ac:	e13fff15 	stw	r4,-4(fp)
	char VTG[] = "$GPVTG";
 10024b0:	00c040b4 	movhi	r3,258
 10024b4:	18c82b04 	addi	r3,r3,8364
 10024b8:	18800017 	ldw	r2,0(r3)
 10024bc:	e0bffd15 	stw	r2,-12(fp)
 10024c0:	1880010b 	ldhu	r2,4(r3)
 10024c4:	e0bffe0d 	sth	r2,-8(fp)
 10024c8:	18800183 	ldbu	r2,6(r3)
 10024cc:	e0bffe85 	stb	r2,-6(fp)
	return strcmp(string, VTG);
 10024d0:	e13fff17 	ldw	r4,-4(fp)
 10024d4:	e17ffd04 	addi	r5,fp,-12
 10024d8:	100e1c00 	call	100e1c0 <strcmp>
}
 10024dc:	e037883a 	mov	sp,fp
 10024e0:	dfc00117 	ldw	ra,4(sp)
 10024e4:	df000017 	ldw	fp,0(sp)
 10024e8:	dec00204 	addi	sp,sp,8
 10024ec:	f800283a 	ret

010024f0 <parseSpeed>:

double parseSpeed(char *VTG_Data) {
 10024f0:	defff704 	addi	sp,sp,-36
 10024f4:	dfc00815 	stw	ra,32(sp)
 10024f8:	df000715 	stw	fp,28(sp)
 10024fc:	df000704 	addi	fp,sp,28
 1002500:	e13fff15 	stw	r4,-4(fp)
	double speed;
	char str_speed[6];
	char *ptr = VTG_Data + 25;
 1002504:	e0bfff17 	ldw	r2,-4(fp)
 1002508:	10800644 	addi	r2,r2,25
 100250c:	e0bffa15 	stw	r2,-24(fp)
	int i;

	for (i = 0; i < 4; ++i) {
 1002510:	e03ff915 	stw	zero,-28(fp)
 1002514:	00000c06 	br	1002548 <parseSpeed+0x58>
		str_speed[i] = *(++ptr);
 1002518:	e13ff917 	ldw	r4,-28(fp)
 100251c:	e0bffa17 	ldw	r2,-24(fp)
 1002520:	10800044 	addi	r2,r2,1
 1002524:	e0bffa15 	stw	r2,-24(fp)
 1002528:	e0bffa17 	ldw	r2,-24(fp)
 100252c:	10c00003 	ldbu	r3,0(r2)
 1002530:	e0bffd04 	addi	r2,fp,-12
 1002534:	1105883a 	add	r2,r2,r4
 1002538:	10c00005 	stb	r3,0(r2)
	double speed;
	char str_speed[6];
	char *ptr = VTG_Data + 25;
	int i;

	for (i = 0; i < 4; ++i) {
 100253c:	e0bff917 	ldw	r2,-28(fp)
 1002540:	10800044 	addi	r2,r2,1
 1002544:	e0bff915 	stw	r2,-28(fp)
 1002548:	e0bff917 	ldw	r2,-28(fp)
 100254c:	10800110 	cmplti	r2,r2,4
 1002550:	103ff11e 	bne	r2,zero,1002518 <parseSpeed+0x28>
		str_speed[i] = *(++ptr);
	}
	++i;
 1002554:	e0bff917 	ldw	r2,-28(fp)
 1002558:	10800044 	addi	r2,r2,1
 100255c:	e0bff915 	stw	r2,-28(fp)
	str_speed[i] = '\0';
 1002560:	e0fff917 	ldw	r3,-28(fp)
 1002564:	e0bffd04 	addi	r2,fp,-12
 1002568:	10c5883a 	add	r2,r2,r3
 100256c:	10000005 	stb	zero,0(r2)
	printf("%s\n", str_speed);
 1002570:	e13ffd04 	addi	r4,fp,-12
 1002574:	100e0480 	call	100e048 <puts>

	speed = atof(str_speed);
 1002578:	e13ffd04 	addi	r4,fp,-12
 100257c:	100d7040 	call	100d704 <atof>
 1002580:	1009883a 	mov	r4,r2
 1002584:	180b883a 	mov	r5,r3
 1002588:	e13ffb15 	stw	r4,-20(fp)
 100258c:	e17ffc15 	stw	r5,-16(fp)
	printf("atof\n %f", speed);
 1002590:	010040b4 	movhi	r4,258
 1002594:	21082d04 	addi	r4,r4,8372
 1002598:	e17ffb17 	ldw	r5,-20(fp)
 100259c:	e1bffc17 	ldw	r6,-16(fp)
 10025a0:	100df0c0 	call	100df0c <printf>
	return speed;
 10025a4:	e17ffb17 	ldw	r5,-20(fp)
 10025a8:	e1bffc17 	ldw	r6,-16(fp)
 10025ac:	2807883a 	mov	r3,r5
 10025b0:	3009883a 	mov	r4,r6
}
 10025b4:	1805883a 	mov	r2,r3
 10025b8:	2007883a 	mov	r3,r4
 10025bc:	e037883a 	mov	sp,fp
 10025c0:	dfc00117 	ldw	ra,4(sp)
 10025c4:	df000017 	ldw	fp,0(sp)
 10025c8:	dec00204 	addi	sp,sp,8
 10025cc:	f800283a 	ret

010025d0 <getSpeed>:

double getSpeed(void) {
 10025d0:	deff7604 	addi	sp,sp,-552
 10025d4:	dfc08915 	stw	ra,548(sp)
 10025d8:	df008815 	stw	fp,544(sp)
 10025dc:	df008804 	addi	fp,sp,544
	double speed;
	if (GPSTestForReceivedData()) {
 10025e0:	10013dc0 	call	10013dc <GPSTestForReceivedData>
 10025e4:	1005003a 	cmpeq	r2,r2,zero
 10025e8:	1000281e 	bne	r2,zero,100268c <getSpeed+0xbc>
		int check = 0;
 10025ec:	e03f7b15 	stw	zero,-532(fp)
		char data[512];
		char str[7];

		int index = 0;
 10025f0:	e03f7a15 	stw	zero,-536(fp)
		int i = 0;
 10025f4:	e03f7915 	stw	zero,-540(fp)

		char input = getcharGPS();
 10025f8:	10013940 	call	1001394 <getcharGPS>
 10025fc:	e0bf7805 	stb	r2,-544(fp)

		while (1) {
			index = 0;
 1002600:	e03f7a15 	stw	zero,-536(fp)
			do {
				input = getcharGPS();
 1002604:	10013940 	call	1001394 <getcharGPS>
 1002608:	e0bf7805 	stb	r2,-544(fp)
				data[index] = input;
 100260c:	e0ff7a17 	ldw	r3,-536(fp)
 1002610:	e0bf7fc4 	addi	r2,fp,-513
 1002614:	10c7883a 	add	r3,r2,r3
 1002618:	e0bf7803 	ldbu	r2,-544(fp)
 100261c:	18800005 	stb	r2,0(r3)
				++index;
 1002620:	e0bf7a17 	ldw	r2,-536(fp)
 1002624:	10800044 	addi	r2,r2,1
 1002628:	e0bf7a15 	stw	r2,-536(fp)
			} while (input != '\n');
 100262c:	e0bf7807 	ldb	r2,-544(fp)
 1002630:	10800298 	cmpnei	r2,r2,10
 1002634:	103ff31e 	bne	r2,zero,1002604 <getSpeed+0x34>
			data[index] = '\0';
 1002638:	e0ff7a17 	ldw	r3,-536(fp)
 100263c:	e0bf7fc4 	addi	r2,fp,-513
 1002640:	10c5883a 	add	r2,r2,r3
 1002644:	10000005 	stb	zero,0(r2)

			strncpy(str, data, 6);
 1002648:	e13f7e04 	addi	r4,fp,-520
 100264c:	e17f7fc4 	addi	r5,fp,-513
 1002650:	01800184 	movi	r6,6
 1002654:	100e37c0 	call	100e37c <strncpy>
			str[6] = '\0';
 1002658:	e03f7f85 	stb	zero,-514(fp)

			if (checkGPVTG(str) == 0) {
 100265c:	e13f7e04 	addi	r4,fp,-520
 1002660:	100249c0 	call	100249c <checkGPVTG>
 1002664:	1004c03a 	cmpne	r2,r2,zero
 1002668:	103fe51e 	bne	r2,zero,1002600 <getSpeed+0x30>
				printf("%s\n", data);
 100266c:	e13f7fc4 	addi	r4,fp,-513
 1002670:	100e0480 	call	100e048 <puts>
				speed = parseSpeed(data);
 1002674:	e13f7fc4 	addi	r4,fp,-513
 1002678:	10024f00 	call	10024f0 <parseSpeed>
 100267c:	1009883a 	mov	r4,r2
 1002680:	180b883a 	mov	r5,r3
 1002684:	e13f7c15 	stw	r4,-528(fp)
 1002688:	e17f7d15 	stw	r5,-524(fp)
				break;
			}
		}
	}
	return speed;
 100268c:	e17f7c17 	ldw	r5,-528(fp)
 1002690:	e1bf7d17 	ldw	r6,-524(fp)
 1002694:	2807883a 	mov	r3,r5
 1002698:	3009883a 	mov	r4,r6
}
 100269c:	1805883a 	mov	r2,r3
 10026a0:	2007883a 	mov	r3,r4
 10026a4:	e037883a 	mov	sp,fp
 10026a8:	dfc00117 	ldw	ra,4(sp)
 10026ac:	df000017 	ldw	fp,0(sp)
 10026b0:	dec00204 	addi	sp,sp,8
 10026b4:	f800283a 	ret

010026b8 <eraseLog>:

void eraseLog() {
 10026b8:	defff504 	addi	sp,sp,-44
 10026bc:	dfc00a15 	stw	ra,40(sp)
 10026c0:	df000915 	stw	fp,36(sp)
 10026c4:	df000904 	addi	fp,sp,36
	char cmd[30] = "$PMTK184,1*22\r\n";
 10026c8:	00c040b4 	movhi	r3,258
 10026cc:	18c83204 	addi	r3,r3,8392
 10026d0:	18800017 	ldw	r2,0(r3)
 10026d4:	e0bff815 	stw	r2,-32(fp)
 10026d8:	18800117 	ldw	r2,4(r3)
 10026dc:	e0bff915 	stw	r2,-28(fp)
 10026e0:	18800217 	ldw	r2,8(r3)
 10026e4:	e0bffa15 	stw	r2,-24(fp)
 10026e8:	18800317 	ldw	r2,12(r3)
 10026ec:	e0bffb15 	stw	r2,-20(fp)
 10026f0:	e03ffc15 	stw	zero,-16(fp)
 10026f4:	e03ffd15 	stw	zero,-12(fp)
 10026f8:	e03ffe15 	stw	zero,-8(fp)
 10026fc:	e03fff0d 	sth	zero,-4(fp)
	printf("send ");
 1002700:	010040b4 	movhi	r4,258
 1002704:	21083004 	addi	r4,r4,8384
 1002708:	100df0c0 	call	100df0c <printf>
	int a = 0;
 100270c:	e03ff715 	stw	zero,-36(fp)
	while (cmd[a] != NULL) {
 1002710:	00001306 	br	1002760 <eraseLog+0xa8>
		printf("%c", cmd[a]);
 1002714:	e0fff717 	ldw	r3,-36(fp)
 1002718:	e0bff804 	addi	r2,fp,-32
 100271c:	10c5883a 	add	r2,r2,r3
 1002720:	10800003 	ldbu	r2,0(r2)
 1002724:	11003fcc 	andi	r4,r2,255
 1002728:	2100201c 	xori	r4,r4,128
 100272c:	213fe004 	addi	r4,r4,-128
 1002730:	100df840 	call	100df84 <putchar>
		putcharGPS(cmd[a]);
 1002734:	e0fff717 	ldw	r3,-36(fp)
 1002738:	e0bff804 	addi	r2,fp,-32
 100273c:	10c5883a 	add	r2,r2,r3
 1002740:	10800003 	ldbu	r2,0(r2)
 1002744:	11003fcc 	andi	r4,r2,255
 1002748:	2100201c 	xori	r4,r4,128
 100274c:	213fe004 	addi	r4,r4,-128
 1002750:	10013440 	call	1001344 <putcharGPS>
		a++;
 1002754:	e0bff717 	ldw	r2,-36(fp)
 1002758:	10800044 	addi	r2,r2,1
 100275c:	e0bff715 	stw	r2,-36(fp)

void eraseLog() {
	char cmd[30] = "$PMTK184,1*22\r\n";
	printf("send ");
	int a = 0;
	while (cmd[a] != NULL) {
 1002760:	e0fff717 	ldw	r3,-36(fp)
 1002764:	e0bff804 	addi	r2,fp,-32
 1002768:	10c5883a 	add	r2,r2,r3
 100276c:	10800003 	ldbu	r2,0(r2)
 1002770:	10803fcc 	andi	r2,r2,255
 1002774:	1080201c 	xori	r2,r2,128
 1002778:	10bfe004 	addi	r2,r2,-128
 100277c:	1004c03a 	cmpne	r2,r2,zero
 1002780:	103fe41e 	bne	r2,zero,1002714 <eraseLog+0x5c>
		printf("%c", cmd[a]);
		putcharGPS(cmd[a]);
		a++;
	}
	wait_1ms2();
 1002784:	10012cc0 	call	10012cc <wait_1ms2>
	 }
	 count++;
	 }
	 } else
	 printf("no data\n");*/
}
 1002788:	e037883a 	mov	sp,fp
 100278c:	dfc00117 	ldw	ra,4(sp)
 1002790:	df000017 	ldw	fp,0(sp)
 1002794:	dec00204 	addi	sp,sp,8
 1002798:	f800283a 	ret

0100279c <changeInterval>:

void changeInterval() {
 100279c:	defff504 	addi	sp,sp,-44
 10027a0:	dfc00a15 	stw	ra,40(sp)
 10027a4:	df000915 	stw	fp,36(sp)
 10027a8:	df000904 	addi	fp,sp,36
	char cmd[30] = "$PMTK187,1,1*3C\r\n";
 10027ac:	00c040b4 	movhi	r3,258
 10027b0:	18c83a04 	addi	r3,r3,8424
 10027b4:	18800017 	ldw	r2,0(r3)
 10027b8:	e0bff815 	stw	r2,-32(fp)
 10027bc:	18800117 	ldw	r2,4(r3)
 10027c0:	e0bff915 	stw	r2,-28(fp)
 10027c4:	18800217 	ldw	r2,8(r3)
 10027c8:	e0bffa15 	stw	r2,-24(fp)
 10027cc:	18800317 	ldw	r2,12(r3)
 10027d0:	e0bffb15 	stw	r2,-20(fp)
 10027d4:	1880040b 	ldhu	r2,16(r3)
 10027d8:	e0bffc0d 	sth	r2,-16(fp)
 10027dc:	e03ffc8d 	sth	zero,-14(fp)
 10027e0:	e03ffd0d 	sth	zero,-12(fp)
 10027e4:	e03ffd8d 	sth	zero,-10(fp)
 10027e8:	e03ffe0d 	sth	zero,-8(fp)
 10027ec:	e03ffe8d 	sth	zero,-6(fp)
 10027f0:	e03fff0d 	sth	zero,-4(fp)
	printf("send ");
 10027f4:	010040b4 	movhi	r4,258
 10027f8:	21083004 	addi	r4,r4,8384
 10027fc:	100df0c0 	call	100df0c <printf>
	int a = 0;
 1002800:	e03ff715 	stw	zero,-36(fp)
	while (cmd[a] != NULL) {
 1002804:	00001306 	br	1002854 <changeInterval+0xb8>
		printf("%c", cmd[a]);
 1002808:	e0fff717 	ldw	r3,-36(fp)
 100280c:	e0bff804 	addi	r2,fp,-32
 1002810:	10c5883a 	add	r2,r2,r3
 1002814:	10800003 	ldbu	r2,0(r2)
 1002818:	11003fcc 	andi	r4,r2,255
 100281c:	2100201c 	xori	r4,r4,128
 1002820:	213fe004 	addi	r4,r4,-128
 1002824:	100df840 	call	100df84 <putchar>
		putcharGPS(cmd[a]);
 1002828:	e0fff717 	ldw	r3,-36(fp)
 100282c:	e0bff804 	addi	r2,fp,-32
 1002830:	10c5883a 	add	r2,r2,r3
 1002834:	10800003 	ldbu	r2,0(r2)
 1002838:	11003fcc 	andi	r4,r2,255
 100283c:	2100201c 	xori	r4,r4,128
 1002840:	213fe004 	addi	r4,r4,-128
 1002844:	10013440 	call	1001344 <putcharGPS>
		a++;
 1002848:	e0bff717 	ldw	r2,-36(fp)
 100284c:	10800044 	addi	r2,r2,1
 1002850:	e0bff715 	stw	r2,-36(fp)

void changeInterval() {
	char cmd[30] = "$PMTK187,1,1*3C\r\n";
	printf("send ");
	int a = 0;
	while (cmd[a] != NULL) {
 1002854:	e0fff717 	ldw	r3,-36(fp)
 1002858:	e0bff804 	addi	r2,fp,-32
 100285c:	10c5883a 	add	r2,r2,r3
 1002860:	10800003 	ldbu	r2,0(r2)
 1002864:	10803fcc 	andi	r2,r2,255
 1002868:	1080201c 	xori	r2,r2,128
 100286c:	10bfe004 	addi	r2,r2,-128
 1002870:	1004c03a 	cmpne	r2,r2,zero
 1002874:	103fe41e 	bne	r2,zero,1002808 <changeInterval+0x6c>
		printf("%c", cmd[a]);
		putcharGPS(cmd[a]);
		a++;
	}
	wait_1ms2();
 1002878:	10012cc0 	call	10012cc <wait_1ms2>
}
 100287c:	e037883a 	mov	sp,fp
 1002880:	dfc00117 	ldw	ra,4(sp)
 1002884:	df000017 	ldw	fp,0(sp)
 1002888:	dec00204 	addi	sp,sp,8
 100288c:	f800283a 	ret

01002890 <startLog>:

void startLog() {
 1002890:	deff6c04 	addi	sp,sp,-592
 1002894:	dfc09315 	stw	ra,588(sp)
 1002898:	df009215 	stw	fp,584(sp)
 100289c:	df009204 	addi	fp,sp,584
	char cmd[30] = "$PMTK185,0*22\r\n";
 10028a0:	00c040b4 	movhi	r3,258
 10028a4:	18c84404 	addi	r3,r3,8464
 10028a8:	18800017 	ldw	r2,0(r3)
 10028ac:	e0bf7615 	stw	r2,-552(fp)
 10028b0:	18800117 	ldw	r2,4(r3)
 10028b4:	e0bf7715 	stw	r2,-548(fp)
 10028b8:	18800217 	ldw	r2,8(r3)
 10028bc:	e0bf7815 	stw	r2,-544(fp)
 10028c0:	18800317 	ldw	r2,12(r3)
 10028c4:	e0bf7915 	stw	r2,-540(fp)
 10028c8:	e03f7a15 	stw	zero,-536(fp)
 10028cc:	e03f7b15 	stw	zero,-532(fp)
 10028d0:	e03f7c15 	stw	zero,-528(fp)
 10028d4:	e03f7d0d 	sth	zero,-524(fp)

	int a = 0;
 10028d8:	e03f7515 	stw	zero,-556(fp)
	printf("send ");
 10028dc:	010040b4 	movhi	r4,258
 10028e0:	21083004 	addi	r4,r4,8384
 10028e4:	100df0c0 	call	100df0c <printf>
	while (cmd[a] != NULL) {
 10028e8:	00001306 	br	1002938 <startLog+0xa8>
		printf("%c", cmd[a]);
 10028ec:	e0ff7517 	ldw	r3,-556(fp)
 10028f0:	e0bf7604 	addi	r2,fp,-552
 10028f4:	10c5883a 	add	r2,r2,r3
 10028f8:	10800003 	ldbu	r2,0(r2)
 10028fc:	11003fcc 	andi	r4,r2,255
 1002900:	2100201c 	xori	r4,r4,128
 1002904:	213fe004 	addi	r4,r4,-128
 1002908:	100df840 	call	100df84 <putchar>
		putcharGPS(cmd[a]);
 100290c:	e0ff7517 	ldw	r3,-556(fp)
 1002910:	e0bf7604 	addi	r2,fp,-552
 1002914:	10c5883a 	add	r2,r2,r3
 1002918:	10800003 	ldbu	r2,0(r2)
 100291c:	11003fcc 	andi	r4,r2,255
 1002920:	2100201c 	xori	r4,r4,128
 1002924:	213fe004 	addi	r4,r4,-128
 1002928:	10013440 	call	1001344 <putcharGPS>
		a++;
 100292c:	e0bf7517 	ldw	r2,-556(fp)
 1002930:	10800044 	addi	r2,r2,1
 1002934:	e0bf7515 	stw	r2,-556(fp)
void startLog() {
	char cmd[30] = "$PMTK185,0*22\r\n";

	int a = 0;
	printf("send ");
	while (cmd[a] != NULL) {
 1002938:	e0ff7517 	ldw	r3,-556(fp)
 100293c:	e0bf7604 	addi	r2,fp,-552
 1002940:	10c5883a 	add	r2,r2,r3
 1002944:	10800003 	ldbu	r2,0(r2)
 1002948:	10803fcc 	andi	r2,r2,255
 100294c:	1080201c 	xori	r2,r2,128
 1002950:	10bfe004 	addi	r2,r2,-128
 1002954:	1004c03a 	cmpne	r2,r2,zero
 1002958:	103fe41e 	bne	r2,zero,10028ec <startLog+0x5c>
		printf("%c", cmd[a]);
		putcharGPS(cmd[a]);
		a++;
	}
	wait_1ms2();
 100295c:	10012cc0 	call	10012cc <wait_1ms2>
	char* GPSData;
	 if (GPSTestForReceivedData() == 1) {
 1002960:	10013dc0 	call	10013dc <GPSTestForReceivedData>
 1002964:	10800058 	cmpnei	r2,r2,1
 1002968:	10003c1e 	bne	r2,zero,1002a5c <startLog+0x1cc>
	 int check = 0;
 100296c:	e03f7315 	stw	zero,-564(fp)

	 char data[512];
	 char str[7];

	 int index = 0;
 1002970:	e03f7215 	stw	zero,-568(fp)
	 int i = 0;
 1002974:	e03f7115 	stw	zero,-572(fp)

	 char input;
	 input = getcharGPS();
 1002978:	10013940 	call	1001394 <getcharGPS>
 100297c:	e0bf7005 	stb	r2,-576(fp)

	 int count = 0;
 1002980:	e03f6f15 	stw	zero,-580(fp)
	 while (count < 10) {
 1002984:	00003106 	br	1002a4c <startLog+0x1bc>
	 index = 0;
 1002988:	e03f7215 	stw	zero,-568(fp)
	 do {
	 input = getcharGPS();
 100298c:	10013940 	call	1001394 <getcharGPS>
 1002990:	e0bf7005 	stb	r2,-576(fp)
	 data[index] = input;
 1002994:	e0ff7217 	ldw	r3,-568(fp)
 1002998:	e0bf7f44 	addi	r2,fp,-515
 100299c:	10c7883a 	add	r3,r2,r3
 10029a0:	e0bf7003 	ldbu	r2,-576(fp)
 10029a4:	18800005 	stb	r2,0(r3)
	 ++index;
 10029a8:	e0bf7217 	ldw	r2,-568(fp)
 10029ac:	10800044 	addi	r2,r2,1
 10029b0:	e0bf7215 	stw	r2,-568(fp)
	 } while (input != '\n');
 10029b4:	e0bf7007 	ldb	r2,-576(fp)
 10029b8:	10800298 	cmpnei	r2,r2,10
 10029bc:	103ff31e 	bne	r2,zero,100298c <startLog+0xfc>
	 data[index] = '\0';
 10029c0:	e0ff7217 	ldw	r3,-568(fp)
 10029c4:	e0bf7f44 	addi	r2,fp,-515
 10029c8:	10c5883a 	add	r2,r2,r3
 10029cc:	10000005 	stb	zero,0(r2)

	 int index2 = 0;
 10029d0:	e03f6e15 	stw	zero,-584(fp)
	 if(data[1] == 'P'){
 10029d4:	e0bf7f83 	ldbu	r2,-514(fp)
 10029d8:	10803fcc 	andi	r2,r2,255
 10029dc:	1080201c 	xori	r2,r2,128
 10029e0:	10bfe004 	addi	r2,r2,-128
 10029e4:	10801418 	cmpnei	r2,r2,80
 10029e8:	1000151e 	bne	r2,zero,1002a40 <startLog+0x1b0>
	 while (data[index2] != 0) {
 10029ec:	00000b06 	br	1002a1c <startLog+0x18c>
	 printf("%c", data[index2]);
 10029f0:	e0ff6e17 	ldw	r3,-584(fp)
 10029f4:	e0bf7f44 	addi	r2,fp,-515
 10029f8:	10c5883a 	add	r2,r2,r3
 10029fc:	10800003 	ldbu	r2,0(r2)
 1002a00:	11003fcc 	andi	r4,r2,255
 1002a04:	2100201c 	xori	r4,r4,128
 1002a08:	213fe004 	addi	r4,r4,-128
 1002a0c:	100df840 	call	100df84 <putchar>
	 index2++;
 1002a10:	e0bf6e17 	ldw	r2,-584(fp)
 1002a14:	10800044 	addi	r2,r2,1
 1002a18:	e0bf6e15 	stw	r2,-584(fp)
	 } while (input != '\n');
	 data[index] = '\0';

	 int index2 = 0;
	 if(data[1] == 'P'){
	 while (data[index2] != 0) {
 1002a1c:	e0ff6e17 	ldw	r3,-584(fp)
 1002a20:	e0bf7f44 	addi	r2,fp,-515
 1002a24:	10c5883a 	add	r2,r2,r3
 1002a28:	10800003 	ldbu	r2,0(r2)
 1002a2c:	10803fcc 	andi	r2,r2,255
 1002a30:	1080201c 	xori	r2,r2,128
 1002a34:	10bfe004 	addi	r2,r2,-128
 1002a38:	1004c03a 	cmpne	r2,r2,zero
 1002a3c:	103fec1e 	bne	r2,zero,10029f0 <startLog+0x160>
	 printf("%c", data[index2]);
	 index2++;
	 }
	 }
	 count++;
 1002a40:	e0bf6f17 	ldw	r2,-580(fp)
 1002a44:	10800044 	addi	r2,r2,1
 1002a48:	e0bf6f15 	stw	r2,-580(fp)

	 char input;
	 input = getcharGPS();

	 int count = 0;
	 while (count < 10) {
 1002a4c:	e0bf6f17 	ldw	r2,-580(fp)
 1002a50:	10800290 	cmplti	r2,r2,10
 1002a54:	103fcc1e 	bne	r2,zero,1002988 <startLog+0xf8>
 1002a58:	00000306 	br	1002a68 <startLog+0x1d8>
	 }
	 }
	 count++;
	 }
	 } else
	 printf("no data\n");
 1002a5c:	010040b4 	movhi	r4,258
 1002a60:	21084204 	addi	r4,r4,8456
 1002a64:	100e0480 	call	100e048 <puts>
}
 1002a68:	e037883a 	mov	sp,fp
 1002a6c:	dfc00117 	ldw	ra,4(sp)
 1002a70:	df000017 	ldw	fp,0(sp)
 1002a74:	dec00204 	addi	sp,sp,8
 1002a78:	f800283a 	ret

01002a7c <stopLog>:

void stopLog() {
 1002a7c:	defff404 	addi	sp,sp,-48
 1002a80:	dfc00b15 	stw	ra,44(sp)
 1002a84:	df000a15 	stw	fp,40(sp)
 1002a88:	df000a04 	addi	fp,sp,40
	char cmd[30] = "$PMTK185,1*23\r\n";
 1002a8c:	00c040b4 	movhi	r3,258
 1002a90:	18c84c04 	addi	r3,r3,8496
 1002a94:	18800017 	ldw	r2,0(r3)
 1002a98:	e0bff815 	stw	r2,-32(fp)
 1002a9c:	18800117 	ldw	r2,4(r3)
 1002aa0:	e0bff915 	stw	r2,-28(fp)
 1002aa4:	18800217 	ldw	r2,8(r3)
 1002aa8:	e0bffa15 	stw	r2,-24(fp)
 1002aac:	18800317 	ldw	r2,12(r3)
 1002ab0:	e0bffb15 	stw	r2,-20(fp)
 1002ab4:	e03ffc15 	stw	zero,-16(fp)
 1002ab8:	e03ffd15 	stw	zero,-12(fp)
 1002abc:	e03ffe15 	stw	zero,-8(fp)
 1002ac0:	e03fff0d 	sth	zero,-4(fp)

	int a = 0;
 1002ac4:	e03ff715 	stw	zero,-36(fp)
	int temp;
	printf("send ");
 1002ac8:	010040b4 	movhi	r4,258
 1002acc:	21083004 	addi	r4,r4,8384
 1002ad0:	100df0c0 	call	100df0c <printf>
	while (cmd[a] != NULL) {
 1002ad4:	00001306 	br	1002b24 <stopLog+0xa8>
		printf("%c", cmd[a]);
 1002ad8:	e0fff717 	ldw	r3,-36(fp)
 1002adc:	e0bff804 	addi	r2,fp,-32
 1002ae0:	10c5883a 	add	r2,r2,r3
 1002ae4:	10800003 	ldbu	r2,0(r2)
 1002ae8:	11003fcc 	andi	r4,r2,255
 1002aec:	2100201c 	xori	r4,r4,128
 1002af0:	213fe004 	addi	r4,r4,-128
 1002af4:	100df840 	call	100df84 <putchar>
		putcharGPS(cmd[a]);
 1002af8:	e0fff717 	ldw	r3,-36(fp)
 1002afc:	e0bff804 	addi	r2,fp,-32
 1002b00:	10c5883a 	add	r2,r2,r3
 1002b04:	10800003 	ldbu	r2,0(r2)
 1002b08:	11003fcc 	andi	r4,r2,255
 1002b0c:	2100201c 	xori	r4,r4,128
 1002b10:	213fe004 	addi	r4,r4,-128
 1002b14:	10013440 	call	1001344 <putcharGPS>
		a++;
 1002b18:	e0bff717 	ldw	r2,-36(fp)
 1002b1c:	10800044 	addi	r2,r2,1
 1002b20:	e0bff715 	stw	r2,-36(fp)
	char cmd[30] = "$PMTK185,1*23\r\n";

	int a = 0;
	int temp;
	printf("send ");
	while (cmd[a] != NULL) {
 1002b24:	e0fff717 	ldw	r3,-36(fp)
 1002b28:	e0bff804 	addi	r2,fp,-32
 1002b2c:	10c5883a 	add	r2,r2,r3
 1002b30:	10800003 	ldbu	r2,0(r2)
 1002b34:	10803fcc 	andi	r2,r2,255
 1002b38:	1080201c 	xori	r2,r2,128
 1002b3c:	10bfe004 	addi	r2,r2,-128
 1002b40:	1004c03a 	cmpne	r2,r2,zero
 1002b44:	103fe41e 	bne	r2,zero,1002ad8 <stopLog+0x5c>
		printf("%c", cmd[a]);
		putcharGPS(cmd[a]);
		a++;
	}

	wait_1ms2();
 1002b48:	10012cc0 	call	10012cc <wait_1ms2>
}
 1002b4c:	e037883a 	mov	sp,fp
 1002b50:	dfc00117 	ldw	ra,4(sp)
 1002b54:	df000017 	ldw	fp,0(sp)
 1002b58:	dec00204 	addi	sp,sp,8
 1002b5c:	f800283a 	ret

01002b60 <dumpLog>:

int dumpLog() {
 1002b60:	defffe04 	addi	sp,sp,-8
 1002b64:	dfc00115 	stw	ra,4(sp)
 1002b68:	df000015 	stw	fp,0(sp)
 1002b6c:	d839883a 	mov	fp,sp
 1002b70:	023ffff4 	movhi	r8,65535
 1002b74:	420ec704 	addi	r8,r8,15132
 1002b78:	da37883a 	add	sp,sp,r8
	char cmd[30] = "$PMTK622,1*29\r\n";
 1002b7c:	00c040b4 	movhi	r3,258
 1002b80:	18c85604 	addi	r3,r3,8536
 1002b84:	18800017 	ldw	r2,0(r3)
 1002b88:	013ffff4 	movhi	r4,65535
 1002b8c:	210ed904 	addi	r4,r4,15204
 1002b90:	2709883a 	add	r4,r4,fp
 1002b94:	20800015 	stw	r2,0(r4)
 1002b98:	18800117 	ldw	r2,4(r3)
 1002b9c:	017ffff4 	movhi	r5,65535
 1002ba0:	294eda04 	addi	r5,r5,15208
 1002ba4:	2f0b883a 	add	r5,r5,fp
 1002ba8:	28800015 	stw	r2,0(r5)
 1002bac:	18800217 	ldw	r2,8(r3)
 1002bb0:	013ffff4 	movhi	r4,65535
 1002bb4:	210edb04 	addi	r4,r4,15212
 1002bb8:	2709883a 	add	r4,r4,fp
 1002bbc:	20800015 	stw	r2,0(r4)
 1002bc0:	18800317 	ldw	r2,12(r3)
 1002bc4:	017ffff4 	movhi	r5,65535
 1002bc8:	294edc04 	addi	r5,r5,15216
 1002bcc:	2f0b883a 	add	r5,r5,fp
 1002bd0:	28800015 	stw	r2,0(r5)
 1002bd4:	00bffff4 	movhi	r2,65535
 1002bd8:	108edd04 	addi	r2,r2,15220
 1002bdc:	1705883a 	add	r2,r2,fp
 1002be0:	10000015 	stw	zero,0(r2)
 1002be4:	00fffff4 	movhi	r3,65535
 1002be8:	18cede04 	addi	r3,r3,15224
 1002bec:	1f07883a 	add	r3,r3,fp
 1002bf0:	18000015 	stw	zero,0(r3)
 1002bf4:	013ffff4 	movhi	r4,65535
 1002bf8:	210edf04 	addi	r4,r4,15228
 1002bfc:	2709883a 	add	r4,r4,fp
 1002c00:	20000015 	stw	zero,0(r4)
 1002c04:	017ffff4 	movhi	r5,65535
 1002c08:	294ee004 	addi	r5,r5,15232
 1002c0c:	2f0b883a 	add	r5,r5,fp
 1002c10:	2800000d 	sth	zero,0(r5)

	printf("send ");
 1002c14:	010040b4 	movhi	r4,258
 1002c18:	21083004 	addi	r4,r4,8384
 1002c1c:	100df0c0 	call	100df0c <printf>
	int a = 0;
 1002c20:	00bffff4 	movhi	r2,65535
 1002c24:	108ed804 	addi	r2,r2,15200
 1002c28:	1705883a 	add	r2,r2,fp
 1002c2c:	10000015 	stw	zero,0(r2)
	while (cmd[a] != NULL) {
 1002c30:	00002306 	br	1002cc0 <dumpLog+0x160>
		printf("%c", cmd[a]);
 1002c34:	013ffff4 	movhi	r4,65535
 1002c38:	210ed804 	addi	r4,r4,15200
 1002c3c:	2709883a 	add	r4,r4,fp
 1002c40:	20c00017 	ldw	r3,0(r4)
 1002c44:	017ffff4 	movhi	r5,65535
 1002c48:	294ed904 	addi	r5,r5,15204
 1002c4c:	e145883a 	add	r2,fp,r5
 1002c50:	10c5883a 	add	r2,r2,r3
 1002c54:	10800003 	ldbu	r2,0(r2)
 1002c58:	11003fcc 	andi	r4,r2,255
 1002c5c:	2100201c 	xori	r4,r4,128
 1002c60:	213fe004 	addi	r4,r4,-128
 1002c64:	100df840 	call	100df84 <putchar>
		putcharGPS(cmd[a]);
 1002c68:	00bffff4 	movhi	r2,65535
 1002c6c:	108ed804 	addi	r2,r2,15200
 1002c70:	1705883a 	add	r2,r2,fp
 1002c74:	10c00017 	ldw	r3,0(r2)
 1002c78:	013ffff4 	movhi	r4,65535
 1002c7c:	210ed904 	addi	r4,r4,15204
 1002c80:	e105883a 	add	r2,fp,r4
 1002c84:	10c5883a 	add	r2,r2,r3
 1002c88:	10800003 	ldbu	r2,0(r2)
 1002c8c:	11003fcc 	andi	r4,r2,255
 1002c90:	2100201c 	xori	r4,r4,128
 1002c94:	213fe004 	addi	r4,r4,-128
 1002c98:	10013440 	call	1001344 <putcharGPS>
		a++;
 1002c9c:	017ffff4 	movhi	r5,65535
 1002ca0:	294ed804 	addi	r5,r5,15200
 1002ca4:	2f0b883a 	add	r5,r5,fp
 1002ca8:	28800017 	ldw	r2,0(r5)
 1002cac:	10800044 	addi	r2,r2,1
 1002cb0:	00fffff4 	movhi	r3,65535
 1002cb4:	18ced804 	addi	r3,r3,15200
 1002cb8:	1f07883a 	add	r3,r3,fp
 1002cbc:	18800015 	stw	r2,0(r3)
int dumpLog() {
	char cmd[30] = "$PMTK622,1*29\r\n";

	printf("send ");
	int a = 0;
	while (cmd[a] != NULL) {
 1002cc0:	013ffff4 	movhi	r4,65535
 1002cc4:	210ed804 	addi	r4,r4,15200
 1002cc8:	2709883a 	add	r4,r4,fp
 1002ccc:	20c00017 	ldw	r3,0(r4)
 1002cd0:	017ffff4 	movhi	r5,65535
 1002cd4:	294ed904 	addi	r5,r5,15204
 1002cd8:	e145883a 	add	r2,fp,r5
 1002cdc:	10c5883a 	add	r2,r2,r3
 1002ce0:	10800003 	ldbu	r2,0(r2)
 1002ce4:	10803fcc 	andi	r2,r2,255
 1002ce8:	1080201c 	xori	r2,r2,128
 1002cec:	10bfe004 	addi	r2,r2,-128
 1002cf0:	1004c03a 	cmpne	r2,r2,zero
 1002cf4:	103fcf1e 	bne	r2,zero,1002c34 <dumpLog+0xd4>
		printf("%c", cmd[a]);
		putcharGPS(cmd[a]);
		a++;
	}
	wait_1ms2();
 1002cf8:	10012cc0 	call	10012cc <wait_1ms2>
	int logcount = 0;
 1002cfc:	00bffff4 	movhi	r2,65535
 1002d00:	108ed704 	addi	r2,r2,15196
 1002d04:	1705883a 	add	r2,r2,fp
 1002d08:	10000015 	stw	zero,0(r2)
	char* GPSData;
	if (GPSTestForReceivedData() == 1) {
 1002d0c:	10013dc0 	call	10013dc <GPSTestForReceivedData>
 1002d10:	10800058 	cmpnei	r2,r2,1
 1002d14:	10021d1e 	bne	r2,zero,100358c <dumpLog+0xa2c>
		int check = 0;
 1002d18:	00fffff4 	movhi	r3,65535
 1002d1c:	18ced504 	addi	r3,r3,15188
 1002d20:	1f07883a 	add	r3,r3,fp
 1002d24:	18000015 	stw	zero,0(r3)

		char data[50000]; //string we get from gps characters
		int entry; //which log entry we are on
		int index = 0; //which field in the
 1002d28:	013ffff4 	movhi	r4,65535
 1002d2c:	210ed304 	addi	r4,r4,15180
 1002d30:	2709883a 	add	r4,r4,fp
 1002d34:	20000015 	stw	zero,0(r4)
		int i = 1;
 1002d38:	00800044 	movi	r2,1
 1002d3c:	017ffff4 	movhi	r5,65535
 1002d40:	294ed204 	addi	r5,r5,15176
 1002d44:	2f0b883a 	add	r5,r5,fp
 1002d48:	28800015 	stw	r2,0(r5)

		char input; //character we get from GPS

		while ((data[0] != '$') || (data[7] != 'X') || (data[9] != '0')) {
 1002d4c:	00002e06 	br	1002e08 <dumpLog+0x2a8>
			index = 0;
 1002d50:	00bffff4 	movhi	r2,65535
 1002d54:	108ed304 	addi	r2,r2,15180
 1002d58:	1705883a 	add	r2,r2,fp
 1002d5c:	10000015 	stw	zero,0(r2)
			do {
				input = getcharGPS();
 1002d60:	10013940 	call	1001394 <getcharGPS>
 1002d64:	00fffff4 	movhi	r3,65535
 1002d68:	18ced104 	addi	r3,r3,15172
 1002d6c:	1f07883a 	add	r3,r3,fp
 1002d70:	18800005 	stb	r2,0(r3)
				data[index] = input;
 1002d74:	013ffff4 	movhi	r4,65535
 1002d78:	210ed304 	addi	r4,r4,15180
 1002d7c:	2709883a 	add	r4,r4,fp
 1002d80:	20c00017 	ldw	r3,0(r4)
 1002d84:	017ffff4 	movhi	r5,65535
 1002d88:	294f2b84 	addi	r5,r5,15534
 1002d8c:	e145883a 	add	r2,fp,r5
 1002d90:	10c7883a 	add	r3,r2,r3
 1002d94:	013ffff4 	movhi	r4,65535
 1002d98:	210ed104 	addi	r4,r4,15172
 1002d9c:	2709883a 	add	r4,r4,fp
 1002da0:	20800003 	ldbu	r2,0(r4)
 1002da4:	18800005 	stb	r2,0(r3)
				++index;
 1002da8:	017ffff4 	movhi	r5,65535
 1002dac:	294ed304 	addi	r5,r5,15180
 1002db0:	2f0b883a 	add	r5,r5,fp
 1002db4:	28800017 	ldw	r2,0(r5)
 1002db8:	10800044 	addi	r2,r2,1
 1002dbc:	00fffff4 	movhi	r3,65535
 1002dc0:	18ced304 	addi	r3,r3,15180
 1002dc4:	1f07883a 	add	r3,r3,fp
 1002dc8:	18800015 	stw	r2,0(r3)
			} while (input != '\n');
 1002dcc:	013ffff4 	movhi	r4,65535
 1002dd0:	210ed104 	addi	r4,r4,15172
 1002dd4:	2709883a 	add	r4,r4,fp
 1002dd8:	20800007 	ldb	r2,0(r4)
 1002ddc:	10800298 	cmpnei	r2,r2,10
 1002de0:	103fdf1e 	bne	r2,zero,1002d60 <dumpLog+0x200>
			data[index] = '\0';
 1002de4:	017ffff4 	movhi	r5,65535
 1002de8:	294ed304 	addi	r5,r5,15180
 1002dec:	2f0b883a 	add	r5,r5,fp
 1002df0:	28800017 	ldw	r2,0(r5)
 1002df4:	013ffff4 	movhi	r4,65535
 1002df8:	210f2b84 	addi	r4,r4,15534
 1002dfc:	e107883a 	add	r3,fp,r4
 1002e00:	1885883a 	add	r2,r3,r2
 1002e04:	10000005 	stb	zero,0(r2)
		int index = 0; //which field in the
		int i = 1;

		char input; //character we get from GPS

		while ((data[0] != '$') || (data[7] != 'X') || (data[9] != '0')) {
 1002e08:	017ffff4 	movhi	r5,65535
 1002e0c:	294f2b84 	addi	r5,r5,15534
 1002e10:	2f0b883a 	add	r5,r5,fp
 1002e14:	28800003 	ldbu	r2,0(r5)
 1002e18:	10803fcc 	andi	r2,r2,255
 1002e1c:	1080201c 	xori	r2,r2,128
 1002e20:	10bfe004 	addi	r2,r2,-128
 1002e24:	10800918 	cmpnei	r2,r2,36
 1002e28:	103fc91e 	bne	r2,zero,1002d50 <dumpLog+0x1f0>
 1002e2c:	00fffff4 	movhi	r3,65535
 1002e30:	18cf2d44 	addi	r3,r3,15541
 1002e34:	1f07883a 	add	r3,r3,fp
 1002e38:	18800003 	ldbu	r2,0(r3)
 1002e3c:	10803fcc 	andi	r2,r2,255
 1002e40:	1080201c 	xori	r2,r2,128
 1002e44:	10bfe004 	addi	r2,r2,-128
 1002e48:	10801618 	cmpnei	r2,r2,88
 1002e4c:	103fc01e 	bne	r2,zero,1002d50 <dumpLog+0x1f0>
 1002e50:	013ffff4 	movhi	r4,65535
 1002e54:	210f2dc4 	addi	r4,r4,15543
 1002e58:	2709883a 	add	r4,r4,fp
 1002e5c:	20800003 	ldbu	r2,0(r4)
 1002e60:	10803fcc 	andi	r2,r2,255
 1002e64:	1080201c 	xori	r2,r2,128
 1002e68:	10bfe004 	addi	r2,r2,-128
 1002e6c:	10800c18 	cmpnei	r2,r2,48
 1002e70:	103fb71e 	bne	r2,zero,1002d50 <dumpLog+0x1f0>
				++index;
			} while (input != '\n');
			data[index] = '\0';
		}

		while ((data[0] != '$') || (data[7] != 'X') || (data[11] != '0')) {
 1002e74:	00002e06 	br	1002f30 <dumpLog+0x3d0>
			index = 0;
 1002e78:	017ffff4 	movhi	r5,65535
 1002e7c:	294ed304 	addi	r5,r5,15180
 1002e80:	2f0b883a 	add	r5,r5,fp
 1002e84:	28000015 	stw	zero,0(r5)
			do {
				input = getcharGPS();
 1002e88:	10013940 	call	1001394 <getcharGPS>
 1002e8c:	00fffff4 	movhi	r3,65535
 1002e90:	18ced104 	addi	r3,r3,15172
 1002e94:	1f07883a 	add	r3,r3,fp
 1002e98:	18800005 	stb	r2,0(r3)
				data[index] = input;
 1002e9c:	013ffff4 	movhi	r4,65535
 1002ea0:	210ed304 	addi	r4,r4,15180
 1002ea4:	2709883a 	add	r4,r4,fp
 1002ea8:	20c00017 	ldw	r3,0(r4)
 1002eac:	017ffff4 	movhi	r5,65535
 1002eb0:	294f2b84 	addi	r5,r5,15534
 1002eb4:	e145883a 	add	r2,fp,r5
 1002eb8:	10c7883a 	add	r3,r2,r3
 1002ebc:	013ffff4 	movhi	r4,65535
 1002ec0:	210ed104 	addi	r4,r4,15172
 1002ec4:	2709883a 	add	r4,r4,fp
 1002ec8:	20800003 	ldbu	r2,0(r4)
 1002ecc:	18800005 	stb	r2,0(r3)
				++index;
 1002ed0:	017ffff4 	movhi	r5,65535
 1002ed4:	294ed304 	addi	r5,r5,15180
 1002ed8:	2f0b883a 	add	r5,r5,fp
 1002edc:	28800017 	ldw	r2,0(r5)
 1002ee0:	10800044 	addi	r2,r2,1
 1002ee4:	00fffff4 	movhi	r3,65535
 1002ee8:	18ced304 	addi	r3,r3,15180
 1002eec:	1f07883a 	add	r3,r3,fp
 1002ef0:	18800015 	stw	r2,0(r3)
			} while (input != '\n');
 1002ef4:	013ffff4 	movhi	r4,65535
 1002ef8:	210ed104 	addi	r4,r4,15172
 1002efc:	2709883a 	add	r4,r4,fp
 1002f00:	20800007 	ldb	r2,0(r4)
 1002f04:	10800298 	cmpnei	r2,r2,10
 1002f08:	103fdf1e 	bne	r2,zero,1002e88 <dumpLog+0x328>
			data[index] = '\0';
 1002f0c:	017ffff4 	movhi	r5,65535
 1002f10:	294ed304 	addi	r5,r5,15180
 1002f14:	2f0b883a 	add	r5,r5,fp
 1002f18:	28800017 	ldw	r2,0(r5)
 1002f1c:	013ffff4 	movhi	r4,65535
 1002f20:	210f2b84 	addi	r4,r4,15534
 1002f24:	e107883a 	add	r3,fp,r4
 1002f28:	1885883a 	add	r2,r3,r2
 1002f2c:	10000005 	stb	zero,0(r2)
				++index;
			} while (input != '\n');
			data[index] = '\0';
		}

		while ((data[0] != '$') || (data[7] != 'X') || (data[11] != '0')) {
 1002f30:	017ffff4 	movhi	r5,65535
 1002f34:	294f2b84 	addi	r5,r5,15534
 1002f38:	2f0b883a 	add	r5,r5,fp
 1002f3c:	28800003 	ldbu	r2,0(r5)
 1002f40:	10803fcc 	andi	r2,r2,255
 1002f44:	1080201c 	xori	r2,r2,128
 1002f48:	10bfe004 	addi	r2,r2,-128
 1002f4c:	10800918 	cmpnei	r2,r2,36
 1002f50:	103fc91e 	bne	r2,zero,1002e78 <dumpLog+0x318>
 1002f54:	00fffff4 	movhi	r3,65535
 1002f58:	18cf2d44 	addi	r3,r3,15541
 1002f5c:	1f07883a 	add	r3,r3,fp
 1002f60:	18800003 	ldbu	r2,0(r3)
 1002f64:	10803fcc 	andi	r2,r2,255
 1002f68:	1080201c 	xori	r2,r2,128
 1002f6c:	10bfe004 	addi	r2,r2,-128
 1002f70:	10801618 	cmpnei	r2,r2,88
 1002f74:	103fc01e 	bne	r2,zero,1002e78 <dumpLog+0x318>
 1002f78:	013ffff4 	movhi	r4,65535
 1002f7c:	210f2e44 	addi	r4,r4,15545
 1002f80:	2709883a 	add	r4,r4,fp
 1002f84:	20800003 	ldbu	r2,0(r4)
 1002f88:	10803fcc 	andi	r2,r2,255
 1002f8c:	1080201c 	xori	r2,r2,128
 1002f90:	10bfe004 	addi	r2,r2,-128
 1002f94:	10800c18 	cmpnei	r2,r2,48
 1002f98:	103fb71e 	bne	r2,zero,1002e78 <dumpLog+0x318>
		}

		char time1[100];
		char lat1[100];
		char long1[100];
		i=0;
 1002f9c:	017ffff4 	movhi	r5,65535
 1002fa0:	294ed204 	addi	r5,r5,15176
 1002fa4:	2f0b883a 	add	r5,r5,fp
 1002fa8:	28000015 	stw	zero,0(r5)
		while((data[1] == 'P') && (data[2] == 'M')){// && ((data[13] != 'F') || (data[14]!='F')|| (data[15]!='F'))) {
 1002fac:	00016406 	br	1003540 <dumpLog+0x9e0>
			index = 0;
 1002fb0:	00bffff4 	movhi	r2,65535
 1002fb4:	108ed304 	addi	r2,r2,15180
 1002fb8:	1705883a 	add	r2,r2,fp
 1002fbc:	10000015 	stw	zero,0(r2)
			do {
				input = getcharGPS();
 1002fc0:	10013940 	call	1001394 <getcharGPS>
 1002fc4:	00fffff4 	movhi	r3,65535
 1002fc8:	18ced104 	addi	r3,r3,15172
 1002fcc:	1f07883a 	add	r3,r3,fp
 1002fd0:	18800005 	stb	r2,0(r3)
				data[index] = input;
 1002fd4:	013ffff4 	movhi	r4,65535
 1002fd8:	210ed304 	addi	r4,r4,15180
 1002fdc:	2709883a 	add	r4,r4,fp
 1002fe0:	20c00017 	ldw	r3,0(r4)
 1002fe4:	017ffff4 	movhi	r5,65535
 1002fe8:	294f2b84 	addi	r5,r5,15534
 1002fec:	e145883a 	add	r2,fp,r5
 1002ff0:	10c7883a 	add	r3,r2,r3
 1002ff4:	013ffff4 	movhi	r4,65535
 1002ff8:	210ed104 	addi	r4,r4,15172
 1002ffc:	2709883a 	add	r4,r4,fp
 1003000:	20800003 	ldbu	r2,0(r4)
 1003004:	18800005 	stb	r2,0(r3)
				printf("%c", data[index]);
 1003008:	017ffff4 	movhi	r5,65535
 100300c:	294ed304 	addi	r5,r5,15180
 1003010:	2f0b883a 	add	r5,r5,fp
 1003014:	28c00017 	ldw	r3,0(r5)
 1003018:	013ffff4 	movhi	r4,65535
 100301c:	210f2b84 	addi	r4,r4,15534
 1003020:	e105883a 	add	r2,fp,r4
 1003024:	10c5883a 	add	r2,r2,r3
 1003028:	10800003 	ldbu	r2,0(r2)
 100302c:	11003fcc 	andi	r4,r2,255
 1003030:	2100201c 	xori	r4,r4,128
 1003034:	213fe004 	addi	r4,r4,-128
 1003038:	100df840 	call	100df84 <putchar>
				++index;
 100303c:	017ffff4 	movhi	r5,65535
 1003040:	294ed304 	addi	r5,r5,15180
 1003044:	2f0b883a 	add	r5,r5,fp
 1003048:	28800017 	ldw	r2,0(r5)
 100304c:	10800044 	addi	r2,r2,1
 1003050:	00fffff4 	movhi	r3,65535
 1003054:	18ced304 	addi	r3,r3,15180
 1003058:	1f07883a 	add	r3,r3,fp
 100305c:	18800015 	stw	r2,0(r3)
			} while (input != '\n');
 1003060:	013ffff4 	movhi	r4,65535
 1003064:	210ed104 	addi	r4,r4,15172
 1003068:	2709883a 	add	r4,r4,fp
 100306c:	20800007 	ldb	r2,0(r4)
 1003070:	10800298 	cmpnei	r2,r2,10
 1003074:	103fd21e 	bne	r2,zero,1002fc0 <dumpLog+0x460>


			int tempi = 0;
 1003078:	017ffff4 	movhi	r5,65535
 100307c:	294ed004 	addi	r5,r5,15168
 1003080:	2f0b883a 	add	r5,r5,fp
 1003084:	28000015 	stw	zero,0(r5)
			int comma = 0;
 1003088:	00bffff4 	movhi	r2,65535
 100308c:	108ecf04 	addi	r2,r2,15164
 1003090:	1705883a 	add	r2,r2,fp
 1003094:	10000015 	stw	zero,0(r2)
			int digits =0;
 1003098:	00fffff4 	movhi	r3,65535
 100309c:	18cece04 	addi	r3,r3,15160
 10030a0:	1f07883a 	add	r3,r3,fp
 10030a4:	18000015 	stw	zero,0(r3)
			while (tempi < 8) {
 10030a8:	00007c06 	br	100329c <dumpLog+0x73c>

				if(i > 8){
 10030ac:	013ffff4 	movhi	r4,65535
 10030b0:	210ed204 	addi	r4,r4,15176
 10030b4:	2709883a 	add	r4,r4,fp
 10030b8:	20800017 	ldw	r2,0(r4)
 10030bc:	10800250 	cmplti	r2,r2,9
 10030c0:	1000051e 	bne	r2,zero,10030d8 <dumpLog+0x578>
					digits = 1;
 10030c4:	00800044 	movi	r2,1
 10030c8:	017ffff4 	movhi	r5,65535
 10030cc:	294ece04 	addi	r5,r5,15160
 10030d0:	2f0b883a 	add	r5,r5,fp
 10030d4:	28800015 	stw	r2,0(r5)
				}
				if(i > 98){
 10030d8:	00fffff4 	movhi	r3,65535
 10030dc:	18ced204 	addi	r3,r3,15176
 10030e0:	1f07883a 	add	r3,r3,fp
 10030e4:	18800017 	ldw	r2,0(r3)
 10030e8:	108018d0 	cmplti	r2,r2,99
 10030ec:	1000051e 	bne	r2,zero,1003104 <dumpLog+0x5a4>
					digits = 2;
 10030f0:	00800084 	movi	r2,2
 10030f4:	013ffff4 	movhi	r4,65535
 10030f8:	210ece04 	addi	r4,r4,15160
 10030fc:	2709883a 	add	r4,r4,fp
 1003100:	20800015 	stw	r2,0(r4)
				}
				time1[tempi] = data[tempi + 13 + digits];
 1003104:	017ffff4 	movhi	r5,65535
 1003108:	294ed004 	addi	r5,r5,15168
 100310c:	2f0b883a 	add	r5,r5,fp
 1003110:	29000017 	ldw	r4,0(r5)
 1003114:	00bffff4 	movhi	r2,65535
 1003118:	108ed004 	addi	r2,r2,15168
 100311c:	1705883a 	add	r2,r2,fp
 1003120:	10c00017 	ldw	r3,0(r2)
 1003124:	017ffff4 	movhi	r5,65535
 1003128:	294ece04 	addi	r5,r5,15160
 100312c:	2f0b883a 	add	r5,r5,fp
 1003130:	28800017 	ldw	r2,0(r5)
 1003134:	1885883a 	add	r2,r3,r2
 1003138:	10c00344 	addi	r3,r2,13
 100313c:	017ffff4 	movhi	r5,65535
 1003140:	294f2b84 	addi	r5,r5,15534
 1003144:	e145883a 	add	r2,fp,r5
 1003148:	10c5883a 	add	r2,r2,r3
 100314c:	10c00003 	ldbu	r3,0(r2)
 1003150:	017ffff4 	movhi	r5,65535
 1003154:	294ee084 	addi	r5,r5,15234
 1003158:	e145883a 	add	r2,fp,r5
 100315c:	1105883a 	add	r2,r2,r4
 1003160:	10c00005 	stb	r3,0(r2)
				lat1[tempi] = data[tempi + 24 + comma + digits];
 1003164:	00bffff4 	movhi	r2,65535
 1003168:	108ed004 	addi	r2,r2,15168
 100316c:	1705883a 	add	r2,r2,fp
 1003170:	11000017 	ldw	r4,0(r2)
 1003174:	017ffff4 	movhi	r5,65535
 1003178:	294ed004 	addi	r5,r5,15168
 100317c:	2f0b883a 	add	r5,r5,fp
 1003180:	28c00017 	ldw	r3,0(r5)
 1003184:	017ffff4 	movhi	r5,65535
 1003188:	294ecf04 	addi	r5,r5,15164
 100318c:	2f0b883a 	add	r5,r5,fp
 1003190:	28800017 	ldw	r2,0(r5)
 1003194:	1887883a 	add	r3,r3,r2
 1003198:	017ffff4 	movhi	r5,65535
 100319c:	294ece04 	addi	r5,r5,15160
 10031a0:	2f0b883a 	add	r5,r5,fp
 10031a4:	28800017 	ldw	r2,0(r5)
 10031a8:	1885883a 	add	r2,r3,r2
 10031ac:	10c00604 	addi	r3,r2,24
 10031b0:	017ffff4 	movhi	r5,65535
 10031b4:	294f2b84 	addi	r5,r5,15534
 10031b8:	e145883a 	add	r2,fp,r5
 10031bc:	10c5883a 	add	r2,r2,r3
 10031c0:	10c00003 	ldbu	r3,0(r2)
 10031c4:	017ffff4 	movhi	r5,65535
 10031c8:	294ef984 	addi	r5,r5,15334
 10031cc:	e145883a 	add	r2,fp,r5
 10031d0:	1105883a 	add	r2,r2,r4
 10031d4:	10c00005 	stb	r3,0(r2)
				long1[tempi] = data[tempi + 33 + comma + digits];
 10031d8:	00bffff4 	movhi	r2,65535
 10031dc:	108ed004 	addi	r2,r2,15168
 10031e0:	1705883a 	add	r2,r2,fp
 10031e4:	11000017 	ldw	r4,0(r2)
 10031e8:	017ffff4 	movhi	r5,65535
 10031ec:	294ed004 	addi	r5,r5,15168
 10031f0:	2f0b883a 	add	r5,r5,fp
 10031f4:	28c00017 	ldw	r3,0(r5)
 10031f8:	017ffff4 	movhi	r5,65535
 10031fc:	294ecf04 	addi	r5,r5,15164
 1003200:	2f0b883a 	add	r5,r5,fp
 1003204:	28800017 	ldw	r2,0(r5)
 1003208:	1887883a 	add	r3,r3,r2
 100320c:	017ffff4 	movhi	r5,65535
 1003210:	294ece04 	addi	r5,r5,15160
 1003214:	2f0b883a 	add	r5,r5,fp
 1003218:	28800017 	ldw	r2,0(r5)
 100321c:	1885883a 	add	r2,r3,r2
 1003220:	10c00844 	addi	r3,r2,33
 1003224:	017ffff4 	movhi	r5,65535
 1003228:	294f2b84 	addi	r5,r5,15534
 100322c:	e145883a 	add	r2,fp,r5
 1003230:	10c5883a 	add	r2,r2,r3
 1003234:	10c00003 	ldbu	r3,0(r2)
 1003238:	017ffff4 	movhi	r5,65535
 100323c:	294f1284 	addi	r5,r5,15434
 1003240:	e145883a 	add	r2,fp,r5
 1003244:	1105883a 	add	r2,r2,r4
 1003248:	10c00005 	stb	r3,0(r2)
				if (tempi == 5)
 100324c:	00fffff4 	movhi	r3,65535
 1003250:	18ced004 	addi	r3,r3,15168
 1003254:	1f07883a 	add	r3,r3,fp
 1003258:	18800017 	ldw	r2,0(r3)
 100325c:	10800158 	cmpnei	r2,r2,5
 1003260:	1000051e 	bne	r2,zero,1003278 <dumpLog+0x718>
					comma = 1;
 1003264:	00800044 	movi	r2,1
 1003268:	013ffff4 	movhi	r4,65535
 100326c:	210ecf04 	addi	r4,r4,15164
 1003270:	2709883a 	add	r4,r4,fp
 1003274:	20800015 	stw	r2,0(r4)
				tempi++;
 1003278:	017ffff4 	movhi	r5,65535
 100327c:	294ed004 	addi	r5,r5,15168
 1003280:	2f0b883a 	add	r5,r5,fp
 1003284:	28800017 	ldw	r2,0(r5)
 1003288:	10800044 	addi	r2,r2,1
 100328c:	00fffff4 	movhi	r3,65535
 1003290:	18ced004 	addi	r3,r3,15168
 1003294:	1f07883a 	add	r3,r3,fp
 1003298:	18800015 	stw	r2,0(r3)


			int tempi = 0;
			int comma = 0;
			int digits =0;
			while (tempi < 8) {
 100329c:	013ffff4 	movhi	r4,65535
 10032a0:	210ed004 	addi	r4,r4,15168
 10032a4:	2709883a 	add	r4,r4,fp
 10032a8:	20800017 	ldw	r2,0(r4)
 10032ac:	10800210 	cmplti	r2,r2,8
 10032b0:	103f7e1e 	bne	r2,zero,10030ac <dumpLog+0x54c>
				tempi++;
			}



			lat1[8] = '\0';
 10032b4:	017ffff4 	movhi	r5,65535
 10032b8:	294efb84 	addi	r5,r5,15342
 10032bc:	2f0b883a 	add	r5,r5,fp
 10032c0:	28000005 	stb	zero,0(r5)
			long1[8] = '\0';
 10032c4:	00bffff4 	movhi	r2,65535
 10032c8:	108f1484 	addi	r2,r2,15442
 10032cc:	1705883a 	add	r2,r2,fp
 10032d0:	10000005 	stb	zero,0(r2)
			time1[8] = '\0';
 10032d4:	00fffff4 	movhi	r3,65535
 10032d8:	18cee284 	addi	r3,r3,15242
 10032dc:	1f07883a 	add	r3,r3,fp
 10032e0:	18000005 	stb	zero,0(r3)
			//int time2 = swapEndian(time1);
			int lat2 = swapEndian(lat1);
 10032e4:	017ffff4 	movhi	r5,65535
 10032e8:	294ef984 	addi	r5,r5,15334
 10032ec:	e149883a 	add	r4,fp,r5
 10032f0:	10035e00 	call	10035e0 <swapEndian>
 10032f4:	00fffff4 	movhi	r3,65535
 10032f8:	18cecd04 	addi	r3,r3,15156
 10032fc:	1f07883a 	add	r3,r3,fp
 1003300:	18800015 	stw	r2,0(r3)
			int long2 = swapEndian(long1);
 1003304:	017ffff4 	movhi	r5,65535
 1003308:	294f1284 	addi	r5,r5,15434
 100330c:	e149883a 	add	r4,fp,r5
 1003310:	10035e00 	call	10035e0 <swapEndian>
 1003314:	00fffff4 	movhi	r3,65535
 1003318:	18cecc04 	addi	r3,r3,15152
 100331c:	1f07883a 	add	r3,r3,fp
 1003320:	18800015 	stw	r2,0(r3)
			//printf("%s", ctime(&time2));


			char *flat = FloatToLatitudeConversion(lat2);
 1003324:	017ffff4 	movhi	r5,65535
 1003328:	294ecd04 	addi	r5,r5,15156
 100332c:	2f0b883a 	add	r5,r5,fp
 1003330:	29000017 	ldw	r4,0(r5)
 1003334:	10036740 	call	1003674 <FloatToLatitudeConversion>
 1003338:	00fffff4 	movhi	r3,65535
 100333c:	18cecb04 	addi	r3,r3,15148
 1003340:	1f07883a 	add	r3,r3,fp
 1003344:	18800015 	stw	r2,0(r3)
			char* flong = FloatToLongitudeConversion(long2);
 1003348:	017ffff4 	movhi	r5,65535
 100334c:	294ecc04 	addi	r5,r5,15152
 1003350:	2f0b883a 	add	r5,r5,fp
 1003354:	29000017 	ldw	r4,0(r5)
 1003358:	10036e40 	call	10036e4 <FloatToLongitudeConversion>
 100335c:	00fffff4 	movhi	r3,65535
 1003360:	18ceca04 	addi	r3,r3,15144
 1003364:	1f07883a 	add	r3,r3,fp
 1003368:	18800015 	stw	r2,0(r3)
			char* invalid = "nan";
 100336c:	008040b4 	movhi	r2,258
 1003370:	10885404 	addi	r2,r2,8528
 1003374:	013ffff4 	movhi	r4,65535
 1003378:	210ec904 	addi	r4,r4,15140
 100337c:	2709883a 	add	r4,r4,fp
 1003380:	20800015 	stw	r2,0(r4)
			int cmp = strcmp(flat, invalid);
 1003384:	017ffff4 	movhi	r5,65535
 1003388:	294ecb04 	addi	r5,r5,15148
 100338c:	2f0b883a 	add	r5,r5,fp
 1003390:	29000017 	ldw	r4,0(r5)
 1003394:	00bffff4 	movhi	r2,65535
 1003398:	108ec904 	addi	r2,r2,15140
 100339c:	1705883a 	add	r2,r2,fp
 10033a0:	11400017 	ldw	r5,0(r2)
 10033a4:	100e1c00 	call	100e1c0 <strcmp>
 10033a8:	00fffff4 	movhi	r3,65535
 10033ac:	18cec804 	addi	r3,r3,15136
 10033b0:	1f07883a 	add	r3,r3,fp
 10033b4:	18800015 	stw	r2,0(r3)
			int cmp2 = strcmp(flong, invalid);
 10033b8:	017ffff4 	movhi	r5,65535
 10033bc:	294eca04 	addi	r5,r5,15144
 10033c0:	2f0b883a 	add	r5,r5,fp
 10033c4:	29000017 	ldw	r4,0(r5)
 10033c8:	00bffff4 	movhi	r2,65535
 10033cc:	108ec904 	addi	r2,r2,15140
 10033d0:	1705883a 	add	r2,r2,fp
 10033d4:	11400017 	ldw	r5,0(r2)
 10033d8:	100e1c00 	call	100e1c0 <strcmp>
 10033dc:	00fffff4 	movhi	r3,65535
 10033e0:	18cec704 	addi	r3,r3,15132
 10033e4:	1f07883a 	add	r3,r3,fp
 10033e8:	18800015 	stw	r2,0(r3)

			if ((cmp == 0) || (cmp2 == 0)){
 10033ec:	013ffff4 	movhi	r4,65535
 10033f0:	210ec804 	addi	r4,r4,15136
 10033f4:	2709883a 	add	r4,r4,fp
 10033f8:	20800017 	ldw	r2,0(r4)
 10033fc:	1005003a 	cmpeq	r2,r2,zero
 1003400:	10004f1e 	bne	r2,zero,1003540 <dumpLog+0x9e0>
 1003404:	017ffff4 	movhi	r5,65535
 1003408:	294ec704 	addi	r5,r5,15132
 100340c:	2f0b883a 	add	r5,r5,fp
 1003410:	28800017 	ldw	r2,0(r5)
 1003414:	1005003a 	cmpeq	r2,r2,zero
 1003418:	1000491e 	bne	r2,zero,1003540 <dumpLog+0x9e0>
				continue;
			}

			strcat(flat, "\r");
 100341c:	00bffff4 	movhi	r2,65535
 1003420:	108ecb04 	addi	r2,r2,15148
 1003424:	1705883a 	add	r2,r2,fp
 1003428:	11000017 	ldw	r4,0(r2)
 100342c:	014040b4 	movhi	r5,258
 1003430:	29485504 	addi	r5,r5,8532
 1003434:	100e1300 	call	100e130 <strcat>
			strcat(flong, "\r");
 1003438:	00fffff4 	movhi	r3,65535
 100343c:	18ceca04 	addi	r3,r3,15144
 1003440:	1f07883a 	add	r3,r3,fp
 1003444:	19000017 	ldw	r4,0(r3)
 1003448:	014040b4 	movhi	r5,258
 100344c:	29485504 	addi	r5,r5,8532
 1003450:	100e1300 	call	100e130 <strcat>
			strcat(flat, "\0");
			strcat(flong, "\0");

			strcpy(logarray[i].latitude, flat);
 1003454:	013ffff4 	movhi	r4,65535
 1003458:	210ed204 	addi	r4,r4,15176
 100345c:	2709883a 	add	r4,r4,fp
 1003460:	20800017 	ldw	r2,0(r4)
 1003464:	10804f24 	muli	r2,r2,316
 1003468:	10c00404 	addi	r3,r2,16
 100346c:	008040f4 	movhi	r2,259
 1003470:	10aef904 	addi	r2,r2,-17436
 1003474:	1889883a 	add	r4,r3,r2
 1003478:	00bffff4 	movhi	r2,65535
 100347c:	108ecb04 	addi	r2,r2,15148
 1003480:	1705883a 	add	r2,r2,fp
 1003484:	11400017 	ldw	r5,0(r2)
 1003488:	100e27c0 	call	100e27c <strcpy>
			strcpy(logarray[i].longitude, flong);
 100348c:	00fffff4 	movhi	r3,65535
 1003490:	18ced204 	addi	r3,r3,15176
 1003494:	1f07883a 	add	r3,r3,fp
 1003498:	18800017 	ldw	r2,0(r3)
 100349c:	10804f24 	muli	r2,r2,316
 10034a0:	10c01d04 	addi	r3,r2,116
 10034a4:	008040f4 	movhi	r2,259
 10034a8:	10aef904 	addi	r2,r2,-17436
 10034ac:	1889883a 	add	r4,r3,r2
 10034b0:	00bffff4 	movhi	r2,65535
 10034b4:	108eca04 	addi	r2,r2,15144
 10034b8:	1705883a 	add	r2,r2,fp
 10034bc:	11400017 	ldw	r5,0(r2)
 10034c0:	100e27c0 	call	100e27c <strcpy>
			strcpy(logarray[i].time, time1);
 10034c4:	00fffff4 	movhi	r3,65535
 10034c8:	18ced204 	addi	r3,r3,15176
 10034cc:	1f07883a 	add	r3,r3,fp
 10034d0:	18800017 	ldw	r2,0(r3)
 10034d4:	10804f24 	muli	r2,r2,316
 10034d8:	10c03604 	addi	r3,r2,216
 10034dc:	008040f4 	movhi	r2,259
 10034e0:	10aef904 	addi	r2,r2,-17436
 10034e4:	1889883a 	add	r4,r3,r2
 10034e8:	00bffff4 	movhi	r2,65535
 10034ec:	108ee084 	addi	r2,r2,15234
 10034f0:	e08b883a 	add	r5,fp,r2
 10034f4:	100e27c0 	call	100e27c <strcpy>



			i++;
 10034f8:	00fffff4 	movhi	r3,65535
 10034fc:	18ced204 	addi	r3,r3,15176
 1003500:	1f07883a 	add	r3,r3,fp
 1003504:	18800017 	ldw	r2,0(r3)
 1003508:	10800044 	addi	r2,r2,1
 100350c:	013ffff4 	movhi	r4,65535
 1003510:	210ed204 	addi	r4,r4,15176
 1003514:	2709883a 	add	r4,r4,fp
 1003518:	20800015 	stw	r2,0(r4)
			logcount++;
 100351c:	017ffff4 	movhi	r5,65535
 1003520:	294ed704 	addi	r5,r5,15196
 1003524:	2f0b883a 	add	r5,r5,fp
 1003528:	28800017 	ldw	r2,0(r5)
 100352c:	10800044 	addi	r2,r2,1
 1003530:	00fffff4 	movhi	r3,65535
 1003534:	18ced704 	addi	r3,r3,15196
 1003538:	1f07883a 	add	r3,r3,fp
 100353c:	18800015 	stw	r2,0(r3)

		char time1[100];
		char lat1[100];
		char long1[100];
		i=0;
		while((data[1] == 'P') && (data[2] == 'M')){// && ((data[13] != 'F') || (data[14]!='F')|| (data[15]!='F'))) {
 1003540:	013ffff4 	movhi	r4,65535
 1003544:	210f2bc4 	addi	r4,r4,15535
 1003548:	2709883a 	add	r4,r4,fp
 100354c:	20800003 	ldbu	r2,0(r4)
 1003550:	10803fcc 	andi	r2,r2,255
 1003554:	1080201c 	xori	r2,r2,128
 1003558:	10bfe004 	addi	r2,r2,-128
 100355c:	10801418 	cmpnei	r2,r2,80
 1003560:	10000d1e 	bne	r2,zero,1003598 <dumpLog+0xa38>
 1003564:	017ffff4 	movhi	r5,65535
 1003568:	294f2c04 	addi	r5,r5,15536
 100356c:	2f0b883a 	add	r5,r5,fp
 1003570:	28800003 	ldbu	r2,0(r5)
 1003574:	10803fcc 	andi	r2,r2,255
 1003578:	1080201c 	xori	r2,r2,128
 100357c:	10bfe004 	addi	r2,r2,-128
 1003580:	10801360 	cmpeqi	r2,r2,77
 1003584:	103e8a1e 	bne	r2,zero,1002fb0 <dumpLog+0x450>
 1003588:	00000306 	br	1003598 <dumpLog+0xa38>

			i++;
			logcount++;
		}
	} else
		printf("no data\n");
 100358c:	010040b4 	movhi	r4,258
 1003590:	21084204 	addi	r4,r4,8456
 1003594:	100e0480 	call	100e048 <puts>
	logcount--;
 1003598:	00fffff4 	movhi	r3,65535
 100359c:	18ced704 	addi	r3,r3,15196
 10035a0:	1f07883a 	add	r3,r3,fp
 10035a4:	18800017 	ldw	r2,0(r3)
 10035a8:	10bfffc4 	addi	r2,r2,-1
 10035ac:	013ffff4 	movhi	r4,65535
 10035b0:	210ed704 	addi	r4,r4,15196
 10035b4:	2709883a 	add	r4,r4,fp
 10035b8:	20800015 	stw	r2,0(r4)
	return logcount;
 10035bc:	017ffff4 	movhi	r5,65535
 10035c0:	294ed704 	addi	r5,r5,15196
 10035c4:	2f0b883a 	add	r5,r5,fp
 10035c8:	28800017 	ldw	r2,0(r5)
}
 10035cc:	e037883a 	mov	sp,fp
 10035d0:	dfc00117 	ldw	ra,4(sp)
 10035d4:	df000017 	ldw	fp,0(sp)
 10035d8:	dec00204 	addi	sp,sp,8
 10035dc:	f800283a 	ret

010035e0 <swapEndian>:

int swapEndian(char *s) {
 10035e0:	defffc04 	addi	sp,sp,-16
 10035e4:	dfc00315 	stw	ra,12(sp)
 10035e8:	df000215 	stw	fp,8(sp)
 10035ec:	df000204 	addi	fp,sp,8
 10035f0:	e13ffe15 	stw	r4,-8(fp)
	register int val;
	val = strtoul(s, NULL, 16); // convert to 4 byte int form in base 16
 10035f4:	e13ffe17 	ldw	r4,-8(fp)
 10035f8:	000b883a 	mov	r5,zero
 10035fc:	01800404 	movi	r6,16
 1003600:	100ff3c0 	call	100ff3c <strtoul>
 1003604:	e0bfff15 	stw	r2,-4(fp)
	val = ((val << 8) & 0xFF00FF00) | ((val >> 8) & 0xFF00FF);
 1003608:	e0ffff17 	ldw	r3,-4(fp)
 100360c:	1804923a 	slli	r2,r3,8
 1003610:	1007883a 	mov	r3,r2
 1003614:	00bfc074 	movhi	r2,65281
 1003618:	10bfc004 	addi	r2,r2,-256
 100361c:	1888703a 	and	r4,r3,r2
 1003620:	e0ffff17 	ldw	r3,-4(fp)
 1003624:	1805d23a 	srai	r2,r3,8
 1003628:	1007883a 	mov	r3,r2
 100362c:	00803ff4 	movhi	r2,255
 1003630:	10803fc4 	addi	r2,r2,255
 1003634:	1884703a 	and	r2,r3,r2
 1003638:	2084b03a 	or	r2,r4,r2
 100363c:	e0bfff15 	stw	r2,-4(fp)
	val = (val << 16) | ((val >> 16) & 0xFFFF);
 1003640:	e13fff17 	ldw	r4,-4(fp)
 1003644:	2006943a 	slli	r3,r4,16
 1003648:	e13fff17 	ldw	r4,-4(fp)
 100364c:	2005d43a 	srai	r2,r4,16
 1003650:	10bfffcc 	andi	r2,r2,65535
 1003654:	1886b03a 	or	r3,r3,r2
 1003658:	e0ffff15 	stw	r3,-4(fp)
	return val;
 100365c:	e0bfff17 	ldw	r2,-4(fp)
}
 1003660:	e037883a 	mov	sp,fp
 1003664:	dfc00117 	ldw	ra,4(sp)
 1003668:	df000017 	ldw	fp,0(sp)
 100366c:	dec00204 	addi	sp,sp,8
 1003670:	f800283a 	ret

01003674 <FloatToLatitudeConversion>:

char *FloatToLatitudeConversion(int x) //output format is xx.yyyy
{
 1003674:	defffb04 	addi	sp,sp,-20
 1003678:	dfc00415 	stw	ra,16(sp)
 100367c:	df000315 	stw	fp,12(sp)
 1003680:	df000304 	addi	fp,sp,12
 1003684:	e13fff15 	stw	r4,-4(fp)
	static char buff[100];
	float *ptr = (float *) (&x); // cast int to float
 1003688:	e0bfff04 	addi	r2,fp,-4
 100368c:	e0bffe15 	stw	r2,-8(fp)
	float f = *ptr; // get the float
 1003690:	e0bffe17 	ldw	r2,-8(fp)
 1003694:	10800017 	ldw	r2,0(r2)
 1003698:	e0bffd15 	stw	r2,-12(fp)
	sprintf(buff, "%2.4f", f); // write in string to an array
 100369c:	e13ffd17 	ldw	r4,-12(fp)
 10036a0:	100bc800 	call	100bc80 <__extendsfdf2>
 10036a4:	100f883a 	mov	r7,r2
 10036a8:	1811883a 	mov	r8,r3
 10036ac:	010040f4 	movhi	r4,259
 10036b0:	212d9004 	addi	r4,r4,-18880
 10036b4:	014040b4 	movhi	r5,258
 10036b8:	29485e04 	addi	r5,r5,8568
 10036bc:	380d883a 	mov	r6,r7
 10036c0:	400f883a 	mov	r7,r8
 10036c4:	100e05c0 	call	100e05c <sprintf>
	return buff;
 10036c8:	008040f4 	movhi	r2,259
 10036cc:	10ad9004 	addi	r2,r2,-18880
}
 10036d0:	e037883a 	mov	sp,fp
 10036d4:	dfc00117 	ldw	ra,4(sp)
 10036d8:	df000017 	ldw	fp,0(sp)
 10036dc:	dec00204 	addi	sp,sp,8
 10036e0:	f800283a 	ret

010036e4 <FloatToLongitudeConversion>:

char *FloatToLongitudeConversion(int x) // output format is (-)xxx.yyyy
{
 10036e4:	defffb04 	addi	sp,sp,-20
 10036e8:	dfc00415 	stw	ra,16(sp)
 10036ec:	df000315 	stw	fp,12(sp)
 10036f0:	df000304 	addi	fp,sp,12
 10036f4:	e13fff15 	stw	r4,-4(fp)
	static char buff[100];
	float *ptr = (float *) (&x);
 10036f8:	e0bfff04 	addi	r2,fp,-4
 10036fc:	e0bffe15 	stw	r2,-8(fp)
	float f = *ptr;
 1003700:	e0bffe17 	ldw	r2,-8(fp)
 1003704:	10800017 	ldw	r2,0(r2)
 1003708:	e0bffd15 	stw	r2,-12(fp)
	sprintf(buff, "%3.4f", f);
 100370c:	e13ffd17 	ldw	r4,-12(fp)
 1003710:	100bc800 	call	100bc80 <__extendsfdf2>
 1003714:	100f883a 	mov	r7,r2
 1003718:	1811883a 	mov	r8,r3
 100371c:	010040f4 	movhi	r4,259
 1003720:	212da904 	addi	r4,r4,-18780
 1003724:	014040b4 	movhi	r5,258
 1003728:	29486004 	addi	r5,r5,8576
 100372c:	380d883a 	mov	r6,r7
 1003730:	400f883a 	mov	r7,r8
 1003734:	100e05c0 	call	100e05c <sprintf>
	return buff;
 1003738:	008040f4 	movhi	r2,259
 100373c:	10ada904 	addi	r2,r2,-18780
}
 1003740:	e037883a 	mov	sp,fp
 1003744:	dfc00117 	ldw	ra,4(sp)
 1003748:	df000017 	ldw	fp,0(sp)
 100374c:	dec00204 	addi	sp,sp,8
 1003750:	f800283a 	ret

01003754 <OutGraphicsCharFont1>:
#define TRUE 1
#define XRES 800
#define YRES 480

void OutGraphicsCharFont1(int x, int y, int fontcolour, int backgroundcolour, int c, int Erase)
{
 1003754:	defff204 	addi	sp,sp,-56
 1003758:	dfc00d15 	stw	ra,52(sp)
 100375c:	df000c15 	stw	fp,48(sp)
 1003760:	df000c04 	addi	fp,sp,48
 1003764:	e13ff415 	stw	r4,-48(fp)
 1003768:	e17ff515 	stw	r5,-44(fp)
 100376c:	e1bff615 	stw	r6,-40(fp)
 1003770:	e1fff715 	stw	r7,-36(fp)
// using register variables (as opposed to stack based ones) may make execution faster
// depends on compiler and CPU

	register int row, column, theX = x, theY = y ;
 1003774:	e0bff417 	ldw	r2,-48(fp)
 1003778:	e0bffd15 	stw	r2,-12(fp)
 100377c:	e0fff517 	ldw	r3,-44(fp)
 1003780:	e0fffc15 	stw	r3,-16(fp)
	register int pixels ;
	register char theColour = fontcolour  ;
 1003784:	e0bff617 	ldw	r2,-40(fp)
 1003788:	e0bffa05 	stb	r2,-24(fp)
	register int BitMask, theC = c ;
 100378c:	e1000217 	ldw	r4,8(fp)
 1003790:	e13ff815 	stw	r4,-32(fp)

// if x,y coord off edge of screen don't bother
// XRES and YRES are #defined to be 800 and 480 respectively
    if(((short)(x) > (short)(XRES-1)) || ((short)(y) > (short)(YRES-1)))
 1003794:	e0bff417 	ldw	r2,-48(fp)
 1003798:	10bfffcc 	andi	r2,r2,65535
 100379c:	10a0001c 	xori	r2,r2,32768
 10037a0:	10a00004 	addi	r2,r2,-32768
 10037a4:	1080c808 	cmpgei	r2,r2,800
 10037a8:	10005b1e 	bne	r2,zero,1003918 <OutGraphicsCharFont1+0x1c4>
 10037ac:	e0bff517 	ldw	r2,-44(fp)
 10037b0:	10bfffcc 	andi	r2,r2,65535
 10037b4:	10a0001c 	xori	r2,r2,32768
 10037b8:	10a00004 	addi	r2,r2,-32768
 10037bc:	10807810 	cmplti	r2,r2,480
 10037c0:	1000011e 	bne	r2,zero,10037c8 <OutGraphicsCharFont1+0x74>
        return ;
 10037c4:	00005406 	br	1003918 <OutGraphicsCharFont1+0x1c4>


// if printable character subtract hex 20
	if(((short)(theC) >= (short)(' ')) && ((short)(theC) <= (short)('~'))) {
 10037c8:	e0fff817 	ldw	r3,-32(fp)
 10037cc:	1805883a 	mov	r2,r3
 10037d0:	10bfffcc 	andi	r2,r2,65535
 10037d4:	10a0001c 	xori	r2,r2,32768
 10037d8:	10a00004 	addi	r2,r2,-32768
 10037dc:	10800810 	cmplti	r2,r2,32
 10037e0:	10004d1e 	bne	r2,zero,1003918 <OutGraphicsCharFont1+0x1c4>
 10037e4:	e13ff817 	ldw	r4,-32(fp)
 10037e8:	2005883a 	mov	r2,r4
 10037ec:	10bfffcc 	andi	r2,r2,65535
 10037f0:	10a0001c 	xori	r2,r2,32768
 10037f4:	10a00004 	addi	r2,r2,-32768
 10037f8:	10801fc8 	cmpgei	r2,r2,127
 10037fc:	1000461e 	bne	r2,zero,1003918 <OutGraphicsCharFont1+0x1c4>
		theC = theC - 0x20 ;
 1003800:	e0bff817 	ldw	r2,-32(fp)
 1003804:	10bff804 	addi	r2,r2,-32
 1003808:	e0bff815 	stw	r2,-32(fp)
		for(row = 0; (char)(row) < (char)(7); row ++)	{
 100380c:	e03fff15 	stw	zero,-4(fp)
 1003810:	00003a06 	br	10038fc <OutGraphicsCharFont1+0x1a8>

// get the bit pattern for row 0 of the character from the software font
			pixels = Font5x7[theC][row] ;
 1003814:	e0bff817 	ldw	r2,-32(fp)
 1003818:	e13fff17 	ldw	r4,-4(fp)
 100381c:	00c040b4 	movhi	r3,258
 1003820:	18c86204 	addi	r3,r3,8584
 1003824:	108001e4 	muli	r2,r2,7
 1003828:	10c5883a 	add	r2,r2,r3
 100382c:	1105883a 	add	r2,r2,r4
 1003830:	10800003 	ldbu	r2,0(r2)
 1003834:	10803fcc 	andi	r2,r2,255
 1003838:	e0bffb15 	stw	r2,-20(fp)
			BitMask = 16 ;
 100383c:	00c00404 	movi	r3,16
 1003840:	e0fff915 	stw	r3,-28(fp)

			for(column = 0; (char)(column) < (char)(5); column ++)	{
 1003844:	e03ffe15 	stw	zero,-8(fp)
 1003848:	00002206 	br	10038d4 <OutGraphicsCharFont1+0x180>

// if a pixel in the character display it
				if((pixels & BitMask))
 100384c:	e13ffb17 	ldw	r4,-20(fp)
 1003850:	e0fff917 	ldw	r3,-28(fp)
 1003854:	20c4703a 	and	r2,r4,r3
 1003858:	1005003a 	cmpeq	r2,r2,zero
 100385c:	10000c1e 	bne	r2,zero,1003890 <OutGraphicsCharFont1+0x13c>
					WriteAPixel(theX+column, theY+row, theColour) ;
 1003860:	e0bffd17 	ldw	r2,-12(fp)
 1003864:	e0fffe17 	ldw	r3,-8(fp)
 1003868:	10c9883a 	add	r4,r2,r3
 100386c:	e0bffc17 	ldw	r2,-16(fp)
 1003870:	e0ffff17 	ldw	r3,-4(fp)
 1003874:	10cb883a 	add	r5,r2,r3
 1003878:	e0bffa03 	ldbu	r2,-24(fp)
 100387c:	11803fcc 	andi	r6,r2,255
 1003880:	3180201c 	xori	r6,r6,128
 1003884:	31bfe004 	addi	r6,r6,-128
 1003888:	10002040 	call	1000204 <WriteAPixel>
 100388c:	00000b06 	br	10038bc <OutGraphicsCharFont1+0x168>

				else {
					if(Erase == 1)
 1003890:	e0800317 	ldw	r2,12(fp)
 1003894:	10800058 	cmpnei	r2,r2,1
 1003898:	1000081e 	bne	r2,zero,10038bc <OutGraphicsCharFont1+0x168>

// if pixel is part of background (not part of character)
// erase the background to value of variable BackGroundColour

						WriteAPixel(theX+column, theY+row, backgroundcolour) ;
 100389c:	e0fffd17 	ldw	r3,-12(fp)
 10038a0:	e0bffe17 	ldw	r2,-8(fp)
 10038a4:	1889883a 	add	r4,r3,r2
 10038a8:	e0fffc17 	ldw	r3,-16(fp)
 10038ac:	e0bfff17 	ldw	r2,-4(fp)
 10038b0:	188b883a 	add	r5,r3,r2
 10038b4:	e1bff717 	ldw	r6,-36(fp)
 10038b8:	10002040 	call	1000204 <WriteAPixel>
				}
				BitMask = BitMask >> 1 ;
 10038bc:	e0fff917 	ldw	r3,-28(fp)
 10038c0:	1807d07a 	srai	r3,r3,1
 10038c4:	e0fff915 	stw	r3,-28(fp)

// get the bit pattern for row 0 of the character from the software font
			pixels = Font5x7[theC][row] ;
			BitMask = 16 ;

			for(column = 0; (char)(column) < (char)(5); column ++)	{
 10038c8:	e13ffe17 	ldw	r4,-8(fp)
 10038cc:	21000044 	addi	r4,r4,1
 10038d0:	e13ffe15 	stw	r4,-8(fp)
 10038d4:	e0fffe17 	ldw	r3,-8(fp)
 10038d8:	1805883a 	mov	r2,r3
 10038dc:	10803fcc 	andi	r2,r2,255
 10038e0:	1080201c 	xori	r2,r2,128
 10038e4:	10bfe004 	addi	r2,r2,-128
 10038e8:	10800150 	cmplti	r2,r2,5
 10038ec:	103fd71e 	bne	r2,zero,100384c <OutGraphicsCharFont1+0xf8>


// if printable character subtract hex 20
	if(((short)(theC) >= (short)(' ')) && ((short)(theC) <= (short)('~'))) {
		theC = theC - 0x20 ;
		for(row = 0; (char)(row) < (char)(7); row ++)	{
 10038f0:	e13fff17 	ldw	r4,-4(fp)
 10038f4:	21000044 	addi	r4,r4,1
 10038f8:	e13fff15 	stw	r4,-4(fp)
 10038fc:	e0ffff17 	ldw	r3,-4(fp)
 1003900:	1805883a 	mov	r2,r3
 1003904:	10803fcc 	andi	r2,r2,255
 1003908:	1080201c 	xori	r2,r2,128
 100390c:	10bfe004 	addi	r2,r2,-128
 1003910:	108001d0 	cmplti	r2,r2,7
 1003914:	103fbf1e 	bne	r2,zero,1003814 <OutGraphicsCharFont1+0xc0>
				}
				BitMask = BitMask >> 1 ;
			}
		}
	}
}
 1003918:	e037883a 	mov	sp,fp
 100391c:	dfc00117 	ldw	ra,4(sp)
 1003920:	df000017 	ldw	fp,0(sp)
 1003924:	dec00204 	addi	sp,sp,8
 1003928:	f800283a 	ret

0100392c <OutGraphicsCharFont2a>:

#define TRUE 1


void OutGraphicsCharFont2a(int x, int y, int colour, int backgroundcolour, int c, int Erase)
{
 100392c:	defff004 	addi	sp,sp,-64
 1003930:	dfc00f15 	stw	ra,60(sp)
 1003934:	df000e15 	stw	fp,56(sp)
 1003938:	df000e04 	addi	fp,sp,56
 100393c:	e13ff215 	stw	r4,-56(fp)
 1003940:	e17ff315 	stw	r5,-52(fp)
 1003944:	e1bff415 	stw	r6,-48(fp)
 1003948:	e1fff515 	stw	r7,-44(fp)
	register int 	row,
					column,
					theX = x,
 100394c:	e0bff217 	ldw	r2,-56(fp)
 1003950:	e0bffd15 	stw	r2,-12(fp)
					theY = y ;
 1003954:	e0fff317 	ldw	r3,-52(fp)
 1003958:	e0fffc15 	stw	r3,-16(fp)
	register int 	pixels ;
	register char 	theColour = colour  ;
 100395c:	e0bff417 	ldw	r2,-48(fp)
 1003960:	e0bffa05 	stb	r2,-24(fp)
	register int 	BitMask,
					theCharacter = c,
 1003964:	e1000217 	ldw	r4,8(fp)
 1003968:	e13ff815 	stw	r4,-32(fp)
					j,
					theRow, theColumn;


    if(((short)(x) > (short)(XRES-1)) || ((short)(y) > (short)(YRES-1)))  // if start off edge of screen don't bother
 100396c:	e0bff217 	ldw	r2,-56(fp)
 1003970:	10bfffcc 	andi	r2,r2,65535
 1003974:	10a0001c 	xori	r2,r2,32768
 1003978:	10a00004 	addi	r2,r2,-32768
 100397c:	1080c808 	cmpgei	r2,r2,800
 1003980:	1000581e 	bne	r2,zero,1003ae4 <OutGraphicsCharFont2a+0x1b8>
 1003984:	e0bff317 	ldw	r2,-52(fp)
 1003988:	10bfffcc 	andi	r2,r2,65535
 100398c:	10a0001c 	xori	r2,r2,32768
 1003990:	10a00004 	addi	r2,r2,-32768
 1003994:	10807810 	cmplti	r2,r2,480
 1003998:	1000011e 	bne	r2,zero,10039a0 <OutGraphicsCharFont2a+0x74>
        return;
 100399c:	00005106 	br	1003ae4 <OutGraphicsCharFont2a+0x1b8>

	if(((short)(theCharacter) >= (short)(' ')) && ((short)(theCharacter) <= (short)('~'))) {			// if printable character
 10039a0:	e0fff817 	ldw	r3,-32(fp)
 10039a4:	1805883a 	mov	r2,r3
 10039a8:	10bfffcc 	andi	r2,r2,65535
 10039ac:	10a0001c 	xori	r2,r2,32768
 10039b0:	10a00004 	addi	r2,r2,-32768
 10039b4:	10800810 	cmplti	r2,r2,32
 10039b8:	10004a1e 	bne	r2,zero,1003ae4 <OutGraphicsCharFont2a+0x1b8>
 10039bc:	e13ff817 	ldw	r4,-32(fp)
 10039c0:	2005883a 	mov	r2,r4
 10039c4:	10bfffcc 	andi	r2,r2,65535
 10039c8:	10a0001c 	xori	r2,r2,32768
 10039cc:	10a00004 	addi	r2,r2,-32768
 10039d0:	10801fc8 	cmpgei	r2,r2,127
 10039d4:	1000431e 	bne	r2,zero,1003ae4 <OutGraphicsCharFont2a+0x1b8>
		theCharacter -= 0x20 ;																			// subtract hex 20 to get index of first printable character (the space character)
 10039d8:	e0bff817 	ldw	r2,-32(fp)
 10039dc:	10bff804 	addi	r2,r2,-32
 10039e0:	e0bff815 	stw	r2,-32(fp)
		theRow = FONT2_YPIXELS;
 10039e4:	00c00384 	movi	r3,14
 10039e8:	e0fff715 	stw	r3,-36(fp)
		theColumn = FONT2_XPIXELS;
 10039ec:	01000284 	movi	r4,10
 10039f0:	e13ff615 	stw	r4,-40(fp)

		for(row = 0; row < theRow ; row ++)	{
 10039f4:	e03fff15 	stw	zero,-4(fp)
 10039f8:	00003706 	br	1003ad8 <OutGraphicsCharFont2a+0x1ac>
			pixels = Font10x14[theCharacter][row] ;		     								// get the pixels for row 0 of the character to be displayed
 10039fc:	e0bff817 	ldw	r2,-32(fp)
 1003a00:	e0ffff17 	ldw	r3,-4(fp)
 1003a04:	010040b4 	movhi	r4,258
 1003a08:	21090884 	addi	r4,r4,9250
 1003a0c:	108003a4 	muli	r2,r2,14
 1003a10:	10c5883a 	add	r2,r2,r3
 1003a14:	1085883a 	add	r2,r2,r2
 1003a18:	1105883a 	add	r2,r2,r4
 1003a1c:	1080000b 	ldhu	r2,0(r2)
 1003a20:	10bfffcc 	andi	r2,r2,65535
 1003a24:	e0bffb15 	stw	r2,-20(fp)
			BitMask = 512 ;							   											// set of hex 200 i.e. bit 7-0 = 0010 0000 0000
 1003a28:	00808004 	movi	r2,512
 1003a2c:	e0bff915 	stw	r2,-28(fp)
			for(column = 0; column < theColumn;   )  	{
 1003a30:	e03ffe15 	stw	zero,-8(fp)
 1003a34:	00002206 	br	1003ac0 <OutGraphicsCharFont2a+0x194>
				if((pixels & BitMask))														// if valid pixel, then write it
 1003a38:	e0fffb17 	ldw	r3,-20(fp)
 1003a3c:	e13ff917 	ldw	r4,-28(fp)
 1003a40:	1904703a 	and	r2,r3,r4
 1003a44:	1005003a 	cmpeq	r2,r2,zero
 1003a48:	10000c1e 	bne	r2,zero,1003a7c <OutGraphicsCharFont2a+0x150>
					WriteAPixel(theX+column, theY+row, theColour) ;
 1003a4c:	e0bffd17 	ldw	r2,-12(fp)
 1003a50:	e0fffe17 	ldw	r3,-8(fp)
 1003a54:	10c9883a 	add	r4,r2,r3
 1003a58:	e0bffc17 	ldw	r2,-16(fp)
 1003a5c:	e0ffff17 	ldw	r3,-4(fp)
 1003a60:	10cb883a 	add	r5,r2,r3
 1003a64:	e0bffa03 	ldbu	r2,-24(fp)
 1003a68:	11803fcc 	andi	r6,r2,255
 1003a6c:	3180201c 	xori	r6,r6,128
 1003a70:	31bfe004 	addi	r6,r6,-128
 1003a74:	10002040 	call	1000204 <WriteAPixel>
 1003a78:	00000b06 	br	1003aa8 <OutGraphicsCharFont2a+0x17c>
				else {																		// if not a valid pixel, do we erase or leave it along (no erase)
					if(Erase == TRUE)
 1003a7c:	e0800317 	ldw	r2,12(fp)
 1003a80:	10800058 	cmpnei	r2,r2,1
 1003a84:	1000081e 	bne	r2,zero,1003aa8 <OutGraphicsCharFont2a+0x17c>
						WriteAPixel(theX+column, theY+row, backgroundcolour) ;
 1003a88:	e0fffd17 	ldw	r3,-12(fp)
 1003a8c:	e0bffe17 	ldw	r2,-8(fp)
 1003a90:	1889883a 	add	r4,r3,r2
 1003a94:	e0fffc17 	ldw	r3,-16(fp)
 1003a98:	e0bfff17 	ldw	r2,-4(fp)
 1003a9c:	188b883a 	add	r5,r3,r2
 1003aa0:	e1bff517 	ldw	r6,-44(fp)
 1003aa4:	10002040 	call	1000204 <WriteAPixel>
					// else leave it alone
				}
					column ++ ;
 1003aa8:	e0fffe17 	ldw	r3,-8(fp)
 1003aac:	18c00044 	addi	r3,r3,1
 1003ab0:	e0fffe15 	stw	r3,-8(fp)
				BitMask = BitMask >> 1 ;
 1003ab4:	e13ff917 	ldw	r4,-28(fp)
 1003ab8:	2009d07a 	srai	r4,r4,1
 1003abc:	e13ff915 	stw	r4,-28(fp)
		theColumn = FONT2_XPIXELS;

		for(row = 0; row < theRow ; row ++)	{
			pixels = Font10x14[theCharacter][row] ;		     								// get the pixels for row 0 of the character to be displayed
			BitMask = 512 ;							   											// set of hex 200 i.e. bit 7-0 = 0010 0000 0000
			for(column = 0; column < theColumn;   )  	{
 1003ac0:	e0bffe17 	ldw	r2,-8(fp)
 1003ac4:	e0fff617 	ldw	r3,-40(fp)
 1003ac8:	10ffdb16 	blt	r2,r3,1003a38 <OutGraphicsCharFont2a+0x10c>
	if(((short)(theCharacter) >= (short)(' ')) && ((short)(theCharacter) <= (short)('~'))) {			// if printable character
		theCharacter -= 0x20 ;																			// subtract hex 20 to get index of first printable character (the space character)
		theRow = FONT2_YPIXELS;
		theColumn = FONT2_XPIXELS;

		for(row = 0; row < theRow ; row ++)	{
 1003acc:	e13fff17 	ldw	r4,-4(fp)
 1003ad0:	21000044 	addi	r4,r4,1
 1003ad4:	e13fff15 	stw	r4,-4(fp)
 1003ad8:	e0bfff17 	ldw	r2,-4(fp)
 1003adc:	e0fff717 	ldw	r3,-36(fp)
 1003ae0:	10ffc616 	blt	r2,r3,10039fc <OutGraphicsCharFont2a+0xd0>
					column ++ ;
				BitMask = BitMask >> 1 ;
			}
		}
	}
}
 1003ae4:	e037883a 	mov	sp,fp
 1003ae8:	dfc00117 	ldw	ra,4(sp)
 1003aec:	df000017 	ldw	fp,0(sp)
 1003af0:	dec00204 	addi	sp,sp,8
 1003af4:	f800283a 	ret

01003af8 <OutGraphicsCharFont2b>:

void OutGraphicsCharFont2b(int x, int y, int colour, int backgroundcolour, int c, int Erase)
{
 1003af8:	defff004 	addi	sp,sp,-64
 1003afc:	dfc00f15 	stw	ra,60(sp)
 1003b00:	df000e15 	stw	fp,56(sp)
 1003b04:	df000e04 	addi	fp,sp,56
 1003b08:	e13ff215 	stw	r4,-56(fp)
 1003b0c:	e17ff315 	stw	r5,-52(fp)
 1003b10:	e1bff415 	stw	r6,-48(fp)
 1003b14:	e1fff515 	stw	r7,-44(fp)
	register int 	row,
					column,
					theX = x,
 1003b18:	e0bff217 	ldw	r2,-56(fp)
 1003b1c:	e0bffd15 	stw	r2,-12(fp)
					theY = y ;
 1003b20:	e0fff317 	ldw	r3,-52(fp)
 1003b24:	e0fffc15 	stw	r3,-16(fp)
	register int 	pixels ;
	register char 	theColour = colour  ;
 1003b28:	e0bff417 	ldw	r2,-48(fp)
 1003b2c:	e0bffa05 	stb	r2,-24(fp)
	register int 	BitMask,
					theCharacter = c,
 1003b30:	e1000217 	ldw	r4,8(fp)
 1003b34:	e13ff815 	stw	r4,-32(fp)
					j,
					theRow, theColumn;


    if(((short)(x) > (short)(XRES-1)) || ((short)(y) > (short)(YRES-1)))  // if start off edge of screen don't bother
 1003b38:	e0bff217 	ldw	r2,-56(fp)
 1003b3c:	10bfffcc 	andi	r2,r2,65535
 1003b40:	10a0001c 	xori	r2,r2,32768
 1003b44:	10a00004 	addi	r2,r2,-32768
 1003b48:	1080c808 	cmpgei	r2,r2,800
 1003b4c:	1000581e 	bne	r2,zero,1003cb0 <OutGraphicsCharFont2b+0x1b8>
 1003b50:	e0bff317 	ldw	r2,-52(fp)
 1003b54:	10bfffcc 	andi	r2,r2,65535
 1003b58:	10a0001c 	xori	r2,r2,32768
 1003b5c:	10a00004 	addi	r2,r2,-32768
 1003b60:	10807810 	cmplti	r2,r2,480
 1003b64:	1000011e 	bne	r2,zero,1003b6c <OutGraphicsCharFont2b+0x74>
        return;
 1003b68:	00005106 	br	1003cb0 <OutGraphicsCharFont2b+0x1b8>

	if(((short)(theCharacter) >= (short)(' ')) && ((short)(theCharacter) <= (short)('~'))) {			// if printable character
 1003b6c:	e0fff817 	ldw	r3,-32(fp)
 1003b70:	1805883a 	mov	r2,r3
 1003b74:	10bfffcc 	andi	r2,r2,65535
 1003b78:	10a0001c 	xori	r2,r2,32768
 1003b7c:	10a00004 	addi	r2,r2,-32768
 1003b80:	10800810 	cmplti	r2,r2,32
 1003b84:	10004a1e 	bne	r2,zero,1003cb0 <OutGraphicsCharFont2b+0x1b8>
 1003b88:	e13ff817 	ldw	r4,-32(fp)
 1003b8c:	2005883a 	mov	r2,r4
 1003b90:	10bfffcc 	andi	r2,r2,65535
 1003b94:	10a0001c 	xori	r2,r2,32768
 1003b98:	10a00004 	addi	r2,r2,-32768
 1003b9c:	10801fc8 	cmpgei	r2,r2,127
 1003ba0:	1000431e 	bne	r2,zero,1003cb0 <OutGraphicsCharFont2b+0x1b8>
		theCharacter -= 0x20 ;																			// subtract hex 20 to get index of first printable character (the space character)
 1003ba4:	e0bff817 	ldw	r2,-32(fp)
 1003ba8:	10bff804 	addi	r2,r2,-32
 1003bac:	e0bff815 	stw	r2,-32(fp)
		theRow = FONT2_YPIXELS2;
 1003bb0:	00c00704 	movi	r3,28
 1003bb4:	e0fff715 	stw	r3,-36(fp)
		theColumn = FONT2_XPIXELS2;
 1003bb8:	01000504 	movi	r4,20
 1003bbc:	e13ff615 	stw	r4,-40(fp)

		for(row = 0; row < theRow ; row ++)	{
 1003bc0:	e03fff15 	stw	zero,-4(fp)
 1003bc4:	00003706 	br	1003ca4 <OutGraphicsCharFont2b+0x1ac>
			pixels = Font10x14[theCharacter][row] ;		     								// get the pixels for row 0 of the character to be displayed
 1003bc8:	e0bff817 	ldw	r2,-32(fp)
 1003bcc:	e0ffff17 	ldw	r3,-4(fp)
 1003bd0:	010040b4 	movhi	r4,258
 1003bd4:	21090884 	addi	r4,r4,9250
 1003bd8:	108003a4 	muli	r2,r2,14
 1003bdc:	10c5883a 	add	r2,r2,r3
 1003be0:	1085883a 	add	r2,r2,r2
 1003be4:	1105883a 	add	r2,r2,r4
 1003be8:	1080000b 	ldhu	r2,0(r2)
 1003bec:	10bfffcc 	andi	r2,r2,65535
 1003bf0:	e0bffb15 	stw	r2,-20(fp)
			BitMask = 512 ;							   											// set of hex 200 i.e. bit 7-0 = 0010 0000 0000
 1003bf4:	00808004 	movi	r2,512
 1003bf8:	e0bff915 	stw	r2,-28(fp)
			for(column = 0; column < theColumn;   )  	{
 1003bfc:	e03ffe15 	stw	zero,-8(fp)
 1003c00:	00002206 	br	1003c8c <OutGraphicsCharFont2b+0x194>
				if((pixels & BitMask))														// if valid pixel, then write it
 1003c04:	e0fffb17 	ldw	r3,-20(fp)
 1003c08:	e13ff917 	ldw	r4,-28(fp)
 1003c0c:	1904703a 	and	r2,r3,r4
 1003c10:	1005003a 	cmpeq	r2,r2,zero
 1003c14:	10000c1e 	bne	r2,zero,1003c48 <OutGraphicsCharFont2b+0x150>
					WriteAPixel(theX+column, theY+row, theColour) ;
 1003c18:	e0bffd17 	ldw	r2,-12(fp)
 1003c1c:	e0fffe17 	ldw	r3,-8(fp)
 1003c20:	10c9883a 	add	r4,r2,r3
 1003c24:	e0bffc17 	ldw	r2,-16(fp)
 1003c28:	e0ffff17 	ldw	r3,-4(fp)
 1003c2c:	10cb883a 	add	r5,r2,r3
 1003c30:	e0bffa03 	ldbu	r2,-24(fp)
 1003c34:	11803fcc 	andi	r6,r2,255
 1003c38:	3180201c 	xori	r6,r6,128
 1003c3c:	31bfe004 	addi	r6,r6,-128
 1003c40:	10002040 	call	1000204 <WriteAPixel>
 1003c44:	00000b06 	br	1003c74 <OutGraphicsCharFont2b+0x17c>
				else {																		// if not a valid pixel, do we erase or leave it along (no erase)
					if(Erase == TRUE)
 1003c48:	e0800317 	ldw	r2,12(fp)
 1003c4c:	10800058 	cmpnei	r2,r2,1
 1003c50:	1000081e 	bne	r2,zero,1003c74 <OutGraphicsCharFont2b+0x17c>
						WriteAPixel(theX+column, theY+row, backgroundcolour) ;
 1003c54:	e0fffd17 	ldw	r3,-12(fp)
 1003c58:	e0bffe17 	ldw	r2,-8(fp)
 1003c5c:	1889883a 	add	r4,r3,r2
 1003c60:	e0fffc17 	ldw	r3,-16(fp)
 1003c64:	e0bfff17 	ldw	r2,-4(fp)
 1003c68:	188b883a 	add	r5,r3,r2
 1003c6c:	e1bff517 	ldw	r6,-44(fp)
 1003c70:	10002040 	call	1000204 <WriteAPixel>
					// else leave it alone
				}
					column ++ ;
 1003c74:	e0fffe17 	ldw	r3,-8(fp)
 1003c78:	18c00044 	addi	r3,r3,1
 1003c7c:	e0fffe15 	stw	r3,-8(fp)
				BitMask = BitMask >> 1 ;
 1003c80:	e13ff917 	ldw	r4,-28(fp)
 1003c84:	2009d07a 	srai	r4,r4,1
 1003c88:	e13ff915 	stw	r4,-28(fp)
		theColumn = FONT2_XPIXELS2;

		for(row = 0; row < theRow ; row ++)	{
			pixels = Font10x14[theCharacter][row] ;		     								// get the pixels for row 0 of the character to be displayed
			BitMask = 512 ;							   											// set of hex 200 i.e. bit 7-0 = 0010 0000 0000
			for(column = 0; column < theColumn;   )  	{
 1003c8c:	e0bffe17 	ldw	r2,-8(fp)
 1003c90:	e0fff617 	ldw	r3,-40(fp)
 1003c94:	10ffdb16 	blt	r2,r3,1003c04 <OutGraphicsCharFont2b+0x10c>
	if(((short)(theCharacter) >= (short)(' ')) && ((short)(theCharacter) <= (short)('~'))) {			// if printable character
		theCharacter -= 0x20 ;																			// subtract hex 20 to get index of first printable character (the space character)
		theRow = FONT2_YPIXELS2;
		theColumn = FONT2_XPIXELS2;

		for(row = 0; row < theRow ; row ++)	{
 1003c98:	e13fff17 	ldw	r4,-4(fp)
 1003c9c:	21000044 	addi	r4,r4,1
 1003ca0:	e13fff15 	stw	r4,-4(fp)
 1003ca4:	e0bfff17 	ldw	r2,-4(fp)
 1003ca8:	e0fff717 	ldw	r3,-36(fp)
 1003cac:	10ffc616 	blt	r2,r3,1003bc8 <OutGraphicsCharFont2b+0xd0>
					column ++ ;
				BitMask = BitMask >> 1 ;
			}
		}
	}
}
 1003cb0:	e037883a 	mov	sp,fp
 1003cb4:	dfc00117 	ldw	ra,4(sp)
 1003cb8:	df000017 	ldw	fp,0(sp)
 1003cbc:	dec00204 	addi	sp,sp,8
 1003cc0:	f800283a 	ret

01003cc4 <OutGraphicsCharFont3>:
			0x00, 0x00, //
		};


void OutGraphicsCharFont3(int x, int y, int colour, int backgroundcolour, int c, int Erase)
{
 1003cc4:	defff004 	addi	sp,sp,-64
 1003cc8:	dfc00f15 	stw	ra,60(sp)
 1003ccc:	df000e15 	stw	fp,56(sp)
 1003cd0:	df000e04 	addi	fp,sp,56
 1003cd4:	e13ff215 	stw	r4,-56(fp)
 1003cd8:	e17ff315 	stw	r5,-52(fp)
 1003cdc:	e1bff415 	stw	r6,-48(fp)
 1003ce0:	e1fff515 	stw	r7,-44(fp)
	register int 	row,
					column,
					theX = x,
 1003ce4:	e0bff217 	ldw	r2,-56(fp)
 1003ce8:	e0bffd15 	stw	r2,-12(fp)
					theY = y ;
 1003cec:	e0fff317 	ldw	r3,-52(fp)
 1003cf0:	e0fffc15 	stw	r3,-16(fp)
	register int 	pixels ;
	register char 	theColour = colour  ;
 1003cf4:	e0bff417 	ldw	r2,-48(fp)
 1003cf8:	e0bffa05 	stb	r2,-24(fp)
	register int 	BitMask,
					theCharacter = c,
 1003cfc:	e1000217 	ldw	r4,8(fp)
 1003d00:	e13ff815 	stw	r4,-32(fp)
					j,
					theRow, theColumn;


    if(((short)(x) > (short)(XRES-1)) || ((short)(y) > (short)(YRES-1)))  // if start off edge of screen don't bother
 1003d04:	e0bff217 	ldw	r2,-56(fp)
 1003d08:	10bfffcc 	andi	r2,r2,65535
 1003d0c:	10a0001c 	xori	r2,r2,32768
 1003d10:	10a00004 	addi	r2,r2,-32768
 1003d14:	1080c808 	cmpgei	r2,r2,800
 1003d18:	10004a1e 	bne	r2,zero,1003e44 <OutGraphicsCharFont3+0x180>
 1003d1c:	e0bff317 	ldw	r2,-52(fp)
 1003d20:	10bfffcc 	andi	r2,r2,65535
 1003d24:	10a0001c 	xori	r2,r2,32768
 1003d28:	10a00004 	addi	r2,r2,-32768
 1003d2c:	10807810 	cmplti	r2,r2,480
 1003d30:	1000011e 	bne	r2,zero,1003d38 <OutGraphicsCharFont3+0x74>
        return;
 1003d34:	00004306 	br	1003e44 <OutGraphicsCharFont3+0x180>

	if(((short)(theCharacter) >= (short)(' ')) && ((short)(theCharacter) <= (short)('~'))) {			// if printable character
 1003d38:	e0fff817 	ldw	r3,-32(fp)
 1003d3c:	1805883a 	mov	r2,r3
 1003d40:	10bfffcc 	andi	r2,r2,65535
 1003d44:	10a0001c 	xori	r2,r2,32768
 1003d48:	10a00004 	addi	r2,r2,-32768
 1003d4c:	10800810 	cmplti	r2,r2,32
 1003d50:	10003c1e 	bne	r2,zero,1003e44 <OutGraphicsCharFont3+0x180>
 1003d54:	e13ff817 	ldw	r4,-32(fp)
 1003d58:	2005883a 	mov	r2,r4
 1003d5c:	10bfffcc 	andi	r2,r2,65535
 1003d60:	10a0001c 	xori	r2,r2,32768
 1003d64:	10a00004 	addi	r2,r2,-32768
 1003d68:	10801fc8 	cmpgei	r2,r2,127
 1003d6c:	1000351e 	bne	r2,zero,1003e44 <OutGraphicsCharFont3+0x180>
		theCharacter -= 0x20 ;																			// subtract hex 20 to get index of first printable character (the space character)
		theRow = FONT3_YPIXELS;
 1003d70:	008006c4 	movi	r2,27
 1003d74:	e0bff715 	stw	r2,-36(fp)
		theColumn = FONT3_XPIXELS;
 1003d78:	00c00404 	movi	r3,16
 1003d7c:	e0fff615 	stw	r3,-40(fp)

		for(row = 0; row < theRow ; row ++)	{
 1003d80:	e03fff15 	stw	zero,-4(fp)
 1003d84:	00002c06 	br	1003e38 <OutGraphicsCharFont3+0x174>
			//pixels = Font16x27[theCharacter][row] ;		     								// get the pixels for row 0 of the character to be displayed
			BitMask = 512 ;							   											// set of hex 200 i.e. bit 7-0 = 0010 0000 0000
 1003d88:	01008004 	movi	r4,512
 1003d8c:	e13ff915 	stw	r4,-28(fp)
			for(column = 0; column < theColumn;   )  	{
 1003d90:	e03ffe15 	stw	zero,-8(fp)
 1003d94:	00002206 	br	1003e20 <OutGraphicsCharFont3+0x15c>
				if((pixels & BitMask))														// if valid pixel, then write it
 1003d98:	e0fffb17 	ldw	r3,-20(fp)
 1003d9c:	e13ff917 	ldw	r4,-28(fp)
 1003da0:	1904703a 	and	r2,r3,r4
 1003da4:	1005003a 	cmpeq	r2,r2,zero
 1003da8:	10000c1e 	bne	r2,zero,1003ddc <OutGraphicsCharFont3+0x118>
					WriteAPixel(theX+column, theY+row, theColour) ;
 1003dac:	e0bffd17 	ldw	r2,-12(fp)
 1003db0:	e0fffe17 	ldw	r3,-8(fp)
 1003db4:	10c9883a 	add	r4,r2,r3
 1003db8:	e0bffc17 	ldw	r2,-16(fp)
 1003dbc:	e0ffff17 	ldw	r3,-4(fp)
 1003dc0:	10cb883a 	add	r5,r2,r3
 1003dc4:	e0bffa03 	ldbu	r2,-24(fp)
 1003dc8:	11803fcc 	andi	r6,r2,255
 1003dcc:	3180201c 	xori	r6,r6,128
 1003dd0:	31bfe004 	addi	r6,r6,-128
 1003dd4:	10002040 	call	1000204 <WriteAPixel>
 1003dd8:	00000b06 	br	1003e08 <OutGraphicsCharFont3+0x144>
				else {																		// if not a valid pixel, do we erase or leave it along (no erase)
					if(Erase == TRUE)
 1003ddc:	e0800317 	ldw	r2,12(fp)
 1003de0:	10800058 	cmpnei	r2,r2,1
 1003de4:	1000081e 	bne	r2,zero,1003e08 <OutGraphicsCharFont3+0x144>
						WriteAPixel(theX+column, theY+row, backgroundcolour) ;
 1003de8:	e0fffd17 	ldw	r3,-12(fp)
 1003dec:	e0bffe17 	ldw	r2,-8(fp)
 1003df0:	1889883a 	add	r4,r3,r2
 1003df4:	e0fffc17 	ldw	r3,-16(fp)
 1003df8:	e0bfff17 	ldw	r2,-4(fp)
 1003dfc:	188b883a 	add	r5,r3,r2
 1003e00:	e1bff517 	ldw	r6,-44(fp)
 1003e04:	10002040 	call	1000204 <WriteAPixel>
					// else leave it alone
				}
					column ++ ;
 1003e08:	e0fffe17 	ldw	r3,-8(fp)
 1003e0c:	18c00044 	addi	r3,r3,1
 1003e10:	e0fffe15 	stw	r3,-8(fp)
				BitMask = BitMask >> 1 ;
 1003e14:	e13ff917 	ldw	r4,-28(fp)
 1003e18:	2009d07a 	srai	r4,r4,1
 1003e1c:	e13ff915 	stw	r4,-28(fp)
		theColumn = FONT3_XPIXELS;

		for(row = 0; row < theRow ; row ++)	{
			//pixels = Font16x27[theCharacter][row] ;		     								// get the pixels for row 0 of the character to be displayed
			BitMask = 512 ;							   											// set of hex 200 i.e. bit 7-0 = 0010 0000 0000
			for(column = 0; column < theColumn;   )  	{
 1003e20:	e0bffe17 	ldw	r2,-8(fp)
 1003e24:	e0fff617 	ldw	r3,-40(fp)
 1003e28:	10ffdb16 	blt	r2,r3,1003d98 <OutGraphicsCharFont3+0xd4>
	if(((short)(theCharacter) >= (short)(' ')) && ((short)(theCharacter) <= (short)('~'))) {			// if printable character
		theCharacter -= 0x20 ;																			// subtract hex 20 to get index of first printable character (the space character)
		theRow = FONT3_YPIXELS;
		theColumn = FONT3_XPIXELS;

		for(row = 0; row < theRow ; row ++)	{
 1003e2c:	e13fff17 	ldw	r4,-4(fp)
 1003e30:	21000044 	addi	r4,r4,1
 1003e34:	e13fff15 	stw	r4,-4(fp)
 1003e38:	e0bfff17 	ldw	r2,-4(fp)
 1003e3c:	e0fff717 	ldw	r3,-36(fp)
 1003e40:	10ffd116 	blt	r2,r3,1003d88 <OutGraphicsCharFont3+0xc4>
					column ++ ;
				BitMask = BitMask >> 1 ;
			}
		}
	}
}
 1003e44:	e037883a 	mov	sp,fp
 1003e48:	dfc00117 	ldw	ra,4(sp)
 1003e4c:	df000017 	ldw	fp,0(sp)
 1003e50:	dec00204 	addi	sp,sp,8
 1003e54:	f800283a 	ret

01003e58 <OutGraphicsCharFont4>:
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
};

void OutGraphicsCharFont4(int x, int y, int colour, int backgroundcolour, int c, int Erase)
{
 1003e58:	defff004 	addi	sp,sp,-64
 1003e5c:	dfc00f15 	stw	ra,60(sp)
 1003e60:	df000e15 	stw	fp,56(sp)
 1003e64:	df000e04 	addi	fp,sp,56
 1003e68:	e13ff215 	stw	r4,-56(fp)
 1003e6c:	e17ff315 	stw	r5,-52(fp)
 1003e70:	e1bff415 	stw	r6,-48(fp)
 1003e74:	e1fff515 	stw	r7,-44(fp)
	register int 	row,
					column,
					theX = x,
 1003e78:	e0bff217 	ldw	r2,-56(fp)
 1003e7c:	e0bffd15 	stw	r2,-12(fp)
					theY = y ;
 1003e80:	e0fff317 	ldw	r3,-52(fp)
 1003e84:	e0fffc15 	stw	r3,-16(fp)
	register int 	pixels ;
	register char 	theColour = colour  ;
 1003e88:	e0bff417 	ldw	r2,-48(fp)
 1003e8c:	e0bffa05 	stb	r2,-24(fp)
	register int 	BitMask,
					theCharacter = c,
 1003e90:	e1000217 	ldw	r4,8(fp)
 1003e94:	e13ff815 	stw	r4,-32(fp)
					j,
					theRow, theColumn;


    if(((short)(x) > (short)(XRES-1)) || ((short)(y) > (short)(YRES-1)))  // if start off edge of screen don't bother
 1003e98:	e0bff217 	ldw	r2,-56(fp)
 1003e9c:	10bfffcc 	andi	r2,r2,65535
 1003ea0:	10a0001c 	xori	r2,r2,32768
 1003ea4:	10a00004 	addi	r2,r2,-32768
 1003ea8:	1080c808 	cmpgei	r2,r2,800
 1003eac:	1000571e 	bne	r2,zero,100400c <OutGraphicsCharFont4+0x1b4>
 1003eb0:	e0bff317 	ldw	r2,-52(fp)
 1003eb4:	10bfffcc 	andi	r2,r2,65535
 1003eb8:	10a0001c 	xori	r2,r2,32768
 1003ebc:	10a00004 	addi	r2,r2,-32768
 1003ec0:	10807810 	cmplti	r2,r2,480
 1003ec4:	1000011e 	bne	r2,zero,1003ecc <OutGraphicsCharFont4+0x74>
        return;
 1003ec8:	00005006 	br	100400c <OutGraphicsCharFont4+0x1b4>

	if(((short)(theCharacter) >= (short)(' ')) && ((short)(theCharacter) <= (short)('~'))) {			// if printable character
 1003ecc:	e0fff817 	ldw	r3,-32(fp)
 1003ed0:	1805883a 	mov	r2,r3
 1003ed4:	10bfffcc 	andi	r2,r2,65535
 1003ed8:	10a0001c 	xori	r2,r2,32768
 1003edc:	10a00004 	addi	r2,r2,-32768
 1003ee0:	10800810 	cmplti	r2,r2,32
 1003ee4:	1000491e 	bne	r2,zero,100400c <OutGraphicsCharFont4+0x1b4>
 1003ee8:	e13ff817 	ldw	r4,-32(fp)
 1003eec:	2005883a 	mov	r2,r4
 1003ef0:	10bfffcc 	andi	r2,r2,65535
 1003ef4:	10a0001c 	xori	r2,r2,32768
 1003ef8:	10a00004 	addi	r2,r2,-32768
 1003efc:	10801fc8 	cmpgei	r2,r2,127
 1003f00:	1000421e 	bne	r2,zero,100400c <OutGraphicsCharFont4+0x1b4>
		theCharacter -= 0x20 ;																			// subtract hex 20 to get index of first printable character (the space character)
 1003f04:	e0bff817 	ldw	r2,-32(fp)
 1003f08:	10bff804 	addi	r2,r2,-32
 1003f0c:	e0bff815 	stw	r2,-32(fp)
		theRow = FONT2_YPIXELS;
 1003f10:	00c00a04 	movi	r3,40
 1003f14:	e0fff715 	stw	r3,-36(fp)
		theColumn = FONT2_XPIXELS;
 1003f18:	01000584 	movi	r4,22
 1003f1c:	e13ff615 	stw	r4,-40(fp)

		for(row = 0; row < theRow ; row ++)	{
 1003f20:	e03fff15 	stw	zero,-4(fp)
 1003f24:	00003606 	br	1004000 <OutGraphicsCharFont4+0x1a8>
			pixels = Font22x40[theCharacter][row] ;		     								// get the pixels for row 0 of the character to be displayed
 1003f28:	e0bff817 	ldw	r2,-32(fp)
 1003f2c:	e13fff17 	ldw	r4,-4(fp)
 1003f30:	00c040b4 	movhi	r3,258
 1003f34:	18d0a404 	addi	r3,r3,17040
 1003f38:	108011a4 	muli	r2,r2,70
 1003f3c:	10c5883a 	add	r2,r2,r3
 1003f40:	1105883a 	add	r2,r2,r4
 1003f44:	10800003 	ldbu	r2,0(r2)
 1003f48:	10803fcc 	andi	r2,r2,255
 1003f4c:	e0bffb15 	stw	r2,-20(fp)
			BitMask = 512 ;							   											// set of hex 200 i.e. bit 7-0 = 0010 0000 0000
 1003f50:	00808004 	movi	r2,512
 1003f54:	e0bff915 	stw	r2,-28(fp)
			for(column = 0; column < theColumn;   )  	{
 1003f58:	e03ffe15 	stw	zero,-8(fp)
 1003f5c:	00002206 	br	1003fe8 <OutGraphicsCharFont4+0x190>
				if((pixels & BitMask))														// if valid pixel, then write it
 1003f60:	e0fffb17 	ldw	r3,-20(fp)
 1003f64:	e13ff917 	ldw	r4,-28(fp)
 1003f68:	1904703a 	and	r2,r3,r4
 1003f6c:	1005003a 	cmpeq	r2,r2,zero
 1003f70:	10000c1e 	bne	r2,zero,1003fa4 <OutGraphicsCharFont4+0x14c>
					WriteAPixel(theX+column, theY+row, theColour) ;
 1003f74:	e0bffd17 	ldw	r2,-12(fp)
 1003f78:	e0fffe17 	ldw	r3,-8(fp)
 1003f7c:	10c9883a 	add	r4,r2,r3
 1003f80:	e0bffc17 	ldw	r2,-16(fp)
 1003f84:	e0ffff17 	ldw	r3,-4(fp)
 1003f88:	10cb883a 	add	r5,r2,r3
 1003f8c:	e0bffa03 	ldbu	r2,-24(fp)
 1003f90:	11803fcc 	andi	r6,r2,255
 1003f94:	3180201c 	xori	r6,r6,128
 1003f98:	31bfe004 	addi	r6,r6,-128
 1003f9c:	10002040 	call	1000204 <WriteAPixel>
 1003fa0:	00000b06 	br	1003fd0 <OutGraphicsCharFont4+0x178>
				else {																		// if not a valid pixel, do we erase or leave it along (no erase)
					if(Erase == TRUE)
 1003fa4:	e0800317 	ldw	r2,12(fp)
 1003fa8:	10800058 	cmpnei	r2,r2,1
 1003fac:	1000081e 	bne	r2,zero,1003fd0 <OutGraphicsCharFont4+0x178>
						WriteAPixel(theX+column, theY+row, backgroundcolour) ;
 1003fb0:	e0fffd17 	ldw	r3,-12(fp)
 1003fb4:	e0bffe17 	ldw	r2,-8(fp)
 1003fb8:	1889883a 	add	r4,r3,r2
 1003fbc:	e0fffc17 	ldw	r3,-16(fp)
 1003fc0:	e0bfff17 	ldw	r2,-4(fp)
 1003fc4:	188b883a 	add	r5,r3,r2
 1003fc8:	e1bff517 	ldw	r6,-44(fp)
 1003fcc:	10002040 	call	1000204 <WriteAPixel>
					// else leave it alone
				}
					column ++ ;
 1003fd0:	e0fffe17 	ldw	r3,-8(fp)
 1003fd4:	18c00044 	addi	r3,r3,1
 1003fd8:	e0fffe15 	stw	r3,-8(fp)
				BitMask = BitMask >> 1 ;
 1003fdc:	e13ff917 	ldw	r4,-28(fp)
 1003fe0:	2009d07a 	srai	r4,r4,1
 1003fe4:	e13ff915 	stw	r4,-28(fp)
		theColumn = FONT2_XPIXELS;

		for(row = 0; row < theRow ; row ++)	{
			pixels = Font22x40[theCharacter][row] ;		     								// get the pixels for row 0 of the character to be displayed
			BitMask = 512 ;							   											// set of hex 200 i.e. bit 7-0 = 0010 0000 0000
			for(column = 0; column < theColumn;   )  	{
 1003fe8:	e0bffe17 	ldw	r2,-8(fp)
 1003fec:	e0fff617 	ldw	r3,-40(fp)
 1003ff0:	10ffdb16 	blt	r2,r3,1003f60 <OutGraphicsCharFont4+0x108>
	if(((short)(theCharacter) >= (short)(' ')) && ((short)(theCharacter) <= (short)('~'))) {			// if printable character
		theCharacter -= 0x20 ;																			// subtract hex 20 to get index of first printable character (the space character)
		theRow = FONT2_YPIXELS;
		theColumn = FONT2_XPIXELS;

		for(row = 0; row < theRow ; row ++)	{
 1003ff4:	e13fff17 	ldw	r4,-4(fp)
 1003ff8:	21000044 	addi	r4,r4,1
 1003ffc:	e13fff15 	stw	r4,-4(fp)
 1004000:	e0bfff17 	ldw	r2,-4(fp)
 1004004:	e0fff717 	ldw	r3,-36(fp)
 1004008:	10ffc716 	blt	r2,r3,1003f28 <OutGraphicsCharFont4+0xd0>
					column ++ ;
				BitMask = BitMask >> 1 ;
			}
		}
	}
}
 100400c:	e037883a 	mov	sp,fp
 1004010:	dfc00117 	ldw	ra,4(sp)
 1004014:	df000017 	ldw	fp,0(sp)
 1004018:	dec00204 	addi	sp,sp,8
 100401c:	f800283a 	ret

01004020 <OpenSD>:
#include "altera_up_sd_card_avalon_interface.h"
#include "SD.h"
/*
 * OpenSD opens the SD card and generate corresponding error messages
 */
void OpenSD() {
 1004020:	defffc04 	addi	sp,sp,-16
 1004024:	dfc00315 	stw	ra,12(sp)
 1004028:	df000215 	stw	fp,8(sp)
 100402c:	df000204 	addi	fp,sp,8
	alt_up_sd_card_dev *device_reference = NULL;
 1004030:	e03fff15 	stw	zero,-4(fp)
	int connected = 0;
 1004034:	e03ffe15 	stw	zero,-8(fp)

	printf("Opening SDCard\n");
 1004038:	010040b4 	movhi	r4,258
 100403c:	211bc904 	addi	r4,r4,28452
 1004040:	100e0480 	call	100e048 <puts>
	if ((device_reference = alt_up_sd_card_open_dev(
 1004044:	010040b4 	movhi	r4,258
 1004048:	211bcd04 	addi	r4,r4,28468
 100404c:	101c9ac0 	call	101c9ac <alt_up_sd_card_open_dev>
 1004050:	e0bfff15 	stw	r2,-4(fp)
 1004054:	e0bfff17 	ldw	r2,-4(fp)
 1004058:	1004c03a 	cmpne	r2,r2,zero
 100405c:	1000041e 	bne	r2,zero,1004070 <OpenSD+0x50>
			"/dev/Altera_UP_SD_Card_Avalon_Interface_0")) == NULL) {
		printf("SDCard Open FAILED\n");
 1004060:	010040b4 	movhi	r4,258
 1004064:	211bd804 	addi	r4,r4,28512
 1004068:	100e0480 	call	100e048 <puts>
		return;
 100406c:	00000306 	br	100407c <OpenSD+0x5c>
	} else
		printf("SDCard Open PASSED\n");
 1004070:	010040b4 	movhi	r4,258
 1004074:	211bdd04 	addi	r4,r4,28532
 1004078:	100e0480 	call	100e048 <puts>
}
 100407c:	e037883a 	mov	sp,fp
 1004080:	dfc00117 	ldw	ra,4(sp)
 1004084:	df000017 	ldw	fp,0(sp)
 1004088:	dec00204 	addi	sp,sp,8
 100408c:	f800283a 	ret

01004090 <WriteToSD>:
 * WriteToSD writes a string passed to a pre-existing file
 * If the file does not exist, try change code to alt_up_sd_Card_fopen(filename, true)
 * The program will fail to run at the first attempt, but should make a new file titled with the filename passed
 * Change the true to false for the following program-run
 */
void WriteToSD(char filename[], char msg[]) {
 1004090:	defffa04 	addi	sp,sp,-24
 1004094:	dfc00515 	stw	ra,20(sp)
 1004098:	df000415 	stw	fp,16(sp)
 100409c:	df000404 	addi	fp,sp,16
 10040a0:	e13ffe15 	stw	r4,-8(fp)
 10040a4:	e17fff15 	stw	r5,-4(fp)

	short int myFileHandle;
	if (alt_up_sd_card_is_Present() && alt_up_sd_card_is_FAT16()) {
 10040a8:	101ca700 	call	101ca70 <alt_up_sd_card_is_Present>
 10040ac:	1005003a 	cmpeq	r2,r2,zero
 10040b0:	10003d1e 	bne	r2,zero,10041a8 <WriteToSD+0x118>
 10040b4:	101cb380 	call	101cb38 <alt_up_sd_card_is_FAT16>
 10040b8:	1005003a 	cmpeq	r2,r2,zero
 10040bc:	10003a1e 	bne	r2,zero,10041a8 <WriteToSD+0x118>
		if ((myFileHandle = alt_up_sd_card_fopen(filename,false)) != -1) {
 10040c0:	e13ffe17 	ldw	r4,-8(fp)
 10040c4:	000b883a 	mov	r5,zero
 10040c8:	101d0300 	call	101d030 <alt_up_sd_card_fopen>
 10040cc:	e0bffd0d 	sth	r2,-12(fp)
 10040d0:	e0bffd0f 	ldh	r2,-12(fp)
 10040d4:	10bfffe0 	cmpeqi	r2,r2,-1
 10040d8:	10002f1e 	bne	r2,zero,1004198 <WriteToSD+0x108>
			volatile short int readVal = 0;
 10040dc:	e03ffd8d 	sth	zero,-10(fp)
			readVal = alt_up_sd_card_read(myFileHandle);
 10040e0:	e13ffd0f 	ldh	r4,-12(fp)
 10040e4:	101d4f40 	call	101d4f4 <alt_up_sd_card_read>
 10040e8:	e0bffd8d 	sth	r2,-10(fp)
			while (readVal >= 0) {
 10040ec:	00000306 	br	10040fc <WriteToSD+0x6c>
				readVal = alt_up_sd_card_read(myFileHandle);
 10040f0:	e13ffd0f 	ldh	r4,-12(fp)
 10040f4:	101d4f40 	call	101d4f4 <alt_up_sd_card_read>
 10040f8:	e0bffd8d 	sth	r2,-10(fp)
	short int myFileHandle;
	if (alt_up_sd_card_is_Present() && alt_up_sd_card_is_FAT16()) {
		if ((myFileHandle = alt_up_sd_card_fopen(filename,false)) != -1) {
			volatile short int readVal = 0;
			readVal = alt_up_sd_card_read(myFileHandle);
			while (readVal >= 0) {
 10040fc:	e0bffd8b 	ldhu	r2,-10(fp)
 1004100:	10bfffcc 	andi	r2,r2,65535
 1004104:	10a0001c 	xori	r2,r2,32768
 1004108:	10a00004 	addi	r2,r2,-32768
 100410c:	1004403a 	cmpge	r2,r2,zero
 1004110:	103ff71e 	bne	r2,zero,10040f0 <WriteToSD+0x60>
				readVal = alt_up_sd_card_read(myFileHandle);
			}
			int i = 0;
 1004114:	e03ffc15 	stw	zero,-16(fp)

			while (msg[i] != NULL) {
 1004118:	00001206 	br	1004164 <WriteToSD+0xd4>
				if (alt_up_sd_card_write(myFileHandle, msg[i]) == false) {
 100411c:	e13ffd0f 	ldh	r4,-12(fp)
 1004120:	e0bffc17 	ldw	r2,-16(fp)
 1004124:	1007883a 	mov	r3,r2
 1004128:	e0bfff17 	ldw	r2,-4(fp)
 100412c:	1885883a 	add	r2,r3,r2
 1004130:	10800003 	ldbu	r2,0(r2)
 1004134:	11403fcc 	andi	r5,r2,255
 1004138:	2940201c 	xori	r5,r5,128
 100413c:	297fe004 	addi	r5,r5,-128
 1004140:	101d8880 	call	101d888 <alt_up_sd_card_write>
 1004144:	1004c03a 	cmpne	r2,r2,zero
 1004148:	1000031e 	bne	r2,zero,1004158 <WriteToSD+0xc8>
					printf("Error writing to file...\n");
 100414c:	010040b4 	movhi	r4,258
 1004150:	211be204 	addi	r4,r4,28552
 1004154:	100e0480 	call	100e048 <puts>
				}
				i++;
 1004158:	e0bffc17 	ldw	r2,-16(fp)
 100415c:	10800044 	addi	r2,r2,1
 1004160:	e0bffc15 	stw	r2,-16(fp)
			while (readVal >= 0) {
				readVal = alt_up_sd_card_read(myFileHandle);
			}
			int i = 0;

			while (msg[i] != NULL) {
 1004164:	e0bffc17 	ldw	r2,-16(fp)
 1004168:	1007883a 	mov	r3,r2
 100416c:	e0bfff17 	ldw	r2,-4(fp)
 1004170:	1885883a 	add	r2,r3,r2
 1004174:	10800003 	ldbu	r2,0(r2)
 1004178:	10803fcc 	andi	r2,r2,255
 100417c:	1080201c 	xori	r2,r2,128
 1004180:	10bfe004 	addi	r2,r2,-128
 1004184:	1004c03a 	cmpne	r2,r2,zero
 1004188:	103fe41e 	bne	r2,zero,100411c <WriteToSD+0x8c>
				}
				i++;
			}
			//printf("Initial write complete\n");

			alt_up_sd_card_fclose(myFileHandle);
 100418c:	e13ffd0f 	ldh	r4,-12(fp)
 1004190:	101dec40 	call	101dec4 <alt_up_sd_card_fclose>
 1004194:	00000706 	br	10041b4 <WriteToSD+0x124>
		} else
			printf("could not open the file even though it exists \n");
 1004198:	010040b4 	movhi	r4,258
 100419c:	211be904 	addi	r4,r4,28580
 10041a0:	100e0480 	call	100e048 <puts>
 * Change the true to false for the following program-run
 */
void WriteToSD(char filename[], char msg[]) {

	short int myFileHandle;
	if (alt_up_sd_card_is_Present() && alt_up_sd_card_is_FAT16()) {
 10041a4:	00000306 	br	10041b4 <WriteToSD+0x124>

			alt_up_sd_card_fclose(myFileHandle);
		} else
			printf("could not open the file even though it exists \n");
	} else {
		printf("no sd card or not FAT16\n");
 10041a8:	010040b4 	movhi	r4,258
 10041ac:	211bf504 	addi	r4,r4,28628
 10041b0:	100e0480 	call	100e048 <puts>
	}
}
 10041b4:	e037883a 	mov	sp,fp
 10041b8:	dfc00117 	ldw	ra,4(sp)
 10041bc:	df000017 	ldw	fp,0(sp)
 10041c0:	dec00204 	addi	sp,sp,8
 10041c4:	f800283a 	ret

010041c8 <ReadFromSD>:
/*
 * Reads strings in the file passed and returns the string containing location of the location name passed
 */


char* ReadFromSD(char filename[], char location[]) {
 10041c8:	deff7504 	addi	sp,sp,-556
 10041cc:	dfc08a15 	stw	ra,552(sp)
 10041d0:	df008915 	stw	fp,548(sp)
 10041d4:	df008904 	addi	fp,sp,548
 10041d8:	e13ffd15 	stw	r4,-12(fp)
 10041dc:	e17ffe15 	stw	r5,-8(fp)
	short int myFileHandle2;
	char* retstr;
	char readstr[512];
	char cmpstr[7];

	int index = 0;
 10041e0:	e03f7815 	stw	zero,-544(fp)
	if (alt_up_sd_card_is_Present() && alt_up_sd_card_is_FAT16()) {
 10041e4:	101ca700 	call	101ca70 <alt_up_sd_card_is_Present>
 10041e8:	1005003a 	cmpeq	r2,r2,zero
 10041ec:	1000431e 	bne	r2,zero,10042fc <ReadFromSD+0x134>
 10041f0:	101cb380 	call	101cb38 <alt_up_sd_card_is_FAT16>
 10041f4:	1005003a 	cmpeq	r2,r2,zero
 10041f8:	1000401e 	bne	r2,zero,10042fc <ReadFromSD+0x134>
		if ((myFileHandle2 = alt_up_sd_card_fopen(filename, false)) != -1) {
 10041fc:	e13ffd17 	ldw	r4,-12(fp)
 1004200:	000b883a 	mov	r5,zero
 1004204:	101d0300 	call	101d030 <alt_up_sd_card_fopen>
 1004208:	e0bf7a0d 	sth	r2,-536(fp)
 100420c:	e0bf7a0f 	ldh	r2,-536(fp)
 1004210:	10bfffe0 	cmpeqi	r2,r2,-1
 1004214:	1000361e 	bne	r2,zero,10042f0 <ReadFromSD+0x128>
			printf("File reopened\n");
 1004218:	010040b4 	movhi	r4,258
 100421c:	211bfb04 	addi	r4,r4,28652
 1004220:	100e0480 	call	100e048 <puts>

			printf("now reading \n");
 1004224:	010040b4 	movhi	r4,258
 1004228:	211bff04 	addi	r4,r4,28668
 100422c:	100e0480 	call	100e048 <puts>
			short int result = 1;
 1004230:	00800044 	movi	r2,1
 1004234:	e0bf778d 	sth	r2,-546(fp)
			char ctr;
			while(result >= 0){
 1004238:	00002406 	br	10042cc <ReadFromSD+0x104>
				index = 0;
 100423c:	e03f7815 	stw	zero,-544(fp)
				do{
				result = alt_up_sd_card_read(myFileHandle2);
 1004240:	e13f7a0f 	ldh	r4,-536(fp)
 1004244:	101d4f40 	call	101d4f4 <alt_up_sd_card_read>
 1004248:	e0bf778d 	sth	r2,-546(fp)
				ctr = result;
 100424c:	e0bf778b 	ldhu	r2,-546(fp)
 1004250:	e0bf7705 	stb	r2,-548(fp)
				readstr[index] = result;
 1004254:	e13f7817 	ldw	r4,-544(fp)
 1004258:	e0bf778b 	ldhu	r2,-546(fp)
 100425c:	1007883a 	mov	r3,r2
 1004260:	e0bf7a84 	addi	r2,fp,-534
 1004264:	1105883a 	add	r2,r2,r4
 1004268:	10c00005 	stb	r3,0(r2)
				++index;
 100426c:	e0bf7817 	ldw	r2,-544(fp)
 1004270:	10800044 	addi	r2,r2,1
 1004274:	e0bf7815 	stw	r2,-544(fp)
				//printf("%c", result);
				}while (ctr != '\n');
 1004278:	e0bf7707 	ldb	r2,-548(fp)
 100427c:	10800298 	cmpnei	r2,r2,10
 1004280:	103fef1e 	bne	r2,zero,1004240 <ReadFromSD+0x78>


				readstr[index] = '\0';
 1004284:	e0ff7817 	ldw	r3,-544(fp)
 1004288:	e0bf7a84 	addi	r2,fp,-534
 100428c:	10c5883a 	add	r2,r2,r3
 1004290:	10000005 	stb	zero,0(r2)
				strncpy(cmpstr, readstr, 6);
 1004294:	e13ffa84 	addi	r4,fp,-22
 1004298:	e17f7a84 	addi	r5,fp,-534
 100429c:	01800184 	movi	r6,6
 10042a0:	100e37c0 	call	100e37c <strncpy>
				cmpstr[6] = '\0';
 10042a4:	e03ffc05 	stb	zero,-16(fp)

				if(strcmp(cmpstr,location) == 0){
 10042a8:	e13ffa84 	addi	r4,fp,-22
 10042ac:	e17ffe17 	ldw	r5,-8(fp)
 10042b0:	100e1c00 	call	100e1c0 <strcmp>
 10042b4:	1004c03a 	cmpne	r2,r2,zero
 10042b8:	1000041e 	bne	r2,zero,10042cc <ReadFromSD+0x104>

					return parseLoc(readstr);
 10042bc:	e13f7a84 	addi	r4,fp,-534
 10042c0:	10043200 	call	1004320 <parseLoc>
 10042c4:	e0bfff15 	stw	r2,-4(fp)
 10042c8:	00000f06 	br	1004308 <ReadFromSD+0x140>
			printf("File reopened\n");

			printf("now reading \n");
			short int result = 1;
			char ctr;
			while(result >= 0){
 10042cc:	e0bf778f 	ldh	r2,-546(fp)
 10042d0:	1004403a 	cmpge	r2,r2,zero
 10042d4:	103fd91e 	bne	r2,zero,100423c <ReadFromSD+0x74>
					return parseLoc(readstr);
				}
			}


			printf("\ndone");
 10042d8:	010040b4 	movhi	r4,258
 10042dc:	211c0304 	addi	r4,r4,28684
 10042e0:	100df0c0 	call	100df0c <printf>
			alt_up_sd_card_fclose(myFileHandle2);
 10042e4:	e13f7a0f 	ldh	r4,-536(fp)
 10042e8:	101dec40 	call	101dec4 <alt_up_sd_card_fclose>
 10042ec:	00000306 	br	10042fc <ReadFromSD+0x134>

		} else
			printf("reopen failed");
 10042f0:	010040b4 	movhi	r4,258
 10042f4:	211c0504 	addi	r4,r4,28692
 10042f8:	100df0c0 	call	100df0c <printf>
	}
	return "non";
 10042fc:	008040b4 	movhi	r2,258
 1004300:	109c0904 	addi	r2,r2,28708
 1004304:	e0bfff15 	stw	r2,-4(fp)
 1004308:	e0bfff17 	ldw	r2,-4(fp)
}
 100430c:	e037883a 	mov	sp,fp
 1004310:	dfc00117 	ldw	ra,4(sp)
 1004314:	df000017 	ldw	fp,0(sp)
 1004318:	dec00204 	addi	sp,sp,8
 100431c:	f800283a 	ret

01004320 <parseLoc>:

char* parseLoc(char* loc){
 1004320:	defff204 	addi	sp,sp,-56
 1004324:	df000d15 	stw	fp,52(sp)
 1004328:	df000d04 	addi	fp,sp,52
 100432c:	e13fff15 	stw	r4,-4(fp)
	char ploc[40];
	int i = 0;
 1004330:	e03ff415 	stw	zero,-48(fp)
	while(*(loc + i)!= ':'){
 1004334:	00000306 	br	1004344 <parseLoc+0x24>
		++i;
 1004338:	e0bff417 	ldw	r2,-48(fp)
 100433c:	10800044 	addi	r2,r2,1
 1004340:	e0bff415 	stw	r2,-48(fp)
}

char* parseLoc(char* loc){
	char ploc[40];
	int i = 0;
	while(*(loc + i)!= ':'){
 1004344:	e0bff417 	ldw	r2,-48(fp)
 1004348:	1007883a 	mov	r3,r2
 100434c:	e0bfff17 	ldw	r2,-4(fp)
 1004350:	1885883a 	add	r2,r3,r2
 1004354:	10800003 	ldbu	r2,0(r2)
 1004358:	10803fcc 	andi	r2,r2,255
 100435c:	1080201c 	xori	r2,r2,128
 1004360:	10bfe004 	addi	r2,r2,-128
 1004364:	10800e98 	cmpnei	r2,r2,58
 1004368:	103ff31e 	bne	r2,zero,1004338 <parseLoc+0x18>
		++i;

	}

	++i;
 100436c:	e0bff417 	ldw	r2,-48(fp)
 1004370:	10800044 	addi	r2,r2,1
 1004374:	e0bff415 	stw	r2,-48(fp)
	int i2 = 0;
 1004378:	e03ff315 	stw	zero,-52(fp)
	do{
			ploc[i2] = *(loc + i);
 100437c:	e13ff317 	ldw	r4,-52(fp)
 1004380:	e0bff417 	ldw	r2,-48(fp)
 1004384:	1007883a 	mov	r3,r2
 1004388:	e0bfff17 	ldw	r2,-4(fp)
 100438c:	1885883a 	add	r2,r3,r2
 1004390:	10c00003 	ldbu	r3,0(r2)
 1004394:	e0bff504 	addi	r2,fp,-44
 1004398:	1105883a 	add	r2,r2,r4
 100439c:	10c00005 	stb	r3,0(r2)
			++i;
 10043a0:	e0bff417 	ldw	r2,-48(fp)
 10043a4:	10800044 	addi	r2,r2,1
 10043a8:	e0bff415 	stw	r2,-48(fp)
			++i2;
 10043ac:	e0bff317 	ldw	r2,-52(fp)
 10043b0:	10800044 	addi	r2,r2,1
 10043b4:	e0bff315 	stw	r2,-52(fp)

	}while(ploc[i2] != '\n');
 10043b8:	e0fff317 	ldw	r3,-52(fp)
 10043bc:	e0bff504 	addi	r2,fp,-44
 10043c0:	10c5883a 	add	r2,r2,r3
 10043c4:	10800003 	ldbu	r2,0(r2)
 10043c8:	10803fcc 	andi	r2,r2,255
 10043cc:	1080201c 	xori	r2,r2,128
 10043d0:	10bfe004 	addi	r2,r2,-128
 10043d4:	10800298 	cmpnei	r2,r2,10
 10043d8:	103fe81e 	bne	r2,zero,100437c <parseLoc+0x5c>

	++i2;
 10043dc:	e0bff317 	ldw	r2,-52(fp)
 10043e0:	10800044 	addi	r2,r2,1
 10043e4:	e0bff315 	stw	r2,-52(fp)
	ploc[i2] = '\0';
 10043e8:	e0fff317 	ldw	r3,-52(fp)
 10043ec:	e0bff504 	addi	r2,fp,-44
 10043f0:	10c5883a 	add	r2,r2,r3
 10043f4:	10000005 	stb	zero,0(r2)
	return ploc;
 10043f8:	e0bff504 	addi	r2,fp,-44
}
 10043fc:	e037883a 	mov	sp,fp
 1004400:	df000017 	ldw	fp,0(sp)
 1004404:	dec00104 	addi	sp,sp,4
 1004408:	f800283a 	ret

0100440c <init_BT>:
 *      Author: Kevin
 */

#include "bluetooth.h"

void init_BT(void) {
 100440c:	deffff04 	addi	sp,sp,-4
 1004410:	df000015 	stw	fp,0(sp)
 1004414:	d839883a 	mov	fp,sp
	// Initialize the Control Register
	BT_Control = 0x15;
 1004418:	00e10034 	movhi	r3,33792
 100441c:	18c08804 	addi	r3,r3,544
 1004420:	00800544 	movi	r2,21
 1004424:	18800005 	stb	r2,0(r3)

	// Initialize the Baud Rate Generator to use 115k Baud
	BT_Baud = 0x01;
 1004428:	00e10034 	movhi	r3,33792
 100442c:	18c08904 	addi	r3,r3,548
 1004430:	00800044 	movi	r2,1
 1004434:	18800005 	stb	r2,0(r3)
}
 1004438:	e037883a 	mov	sp,fp
 100443c:	df000017 	ldw	fp,0(sp)
 1004440:	dec00104 	addi	sp,sp,4
 1004444:	f800283a 	ret

01004448 <putcharBT>:

int putcharBT(int c) {
 1004448:	defffe04 	addi	sp,sp,-8
 100444c:	df000115 	stw	fp,4(sp)
 1004450:	df000104 	addi	fp,sp,4
 1004454:	e13fff15 	stw	r4,-4(fp)

	while (BT_Status & 0x02 != 0x02) {
 1004458:	00a10034 	movhi	r2,33792
 100445c:	10808804 	addi	r2,r2,544
 1004460:	10800003 	ldbu	r2,0(r2)
	}

	BT_TxData = c;
 1004464:	00e10034 	movhi	r3,33792
 1004468:	18c08884 	addi	r3,r3,546
 100446c:	e0bfff17 	ldw	r2,-4(fp)
 1004470:	18800005 	stb	r2,0(r3)
	return c;
 1004474:	e0bfff17 	ldw	r2,-4(fp)
}
 1004478:	e037883a 	mov	sp,fp
 100447c:	df000017 	ldw	fp,0(sp)
 1004480:	dec00104 	addi	sp,sp,4
 1004484:	f800283a 	ret

01004488 <getcharBT>:

int getcharBT(void) {
 1004488:	deffff04 	addi	sp,sp,-4
 100448c:	df000015 	stw	fp,0(sp)
 1004490:	d839883a 	mov	fp,sp

	while (!((BT_Status & 0x1) == 0x1)) {
 1004494:	00a10034 	movhi	r2,33792
 1004498:	10808804 	addi	r2,r2,544
 100449c:	10800003 	ldbu	r2,0(r2)
 10044a0:	10803fcc 	andi	r2,r2,255
 10044a4:	1080004c 	andi	r2,r2,1
 10044a8:	1005003a 	cmpeq	r2,r2,zero
 10044ac:	103ff91e 	bne	r2,zero,1004494 <getcharBT+0xc>
	}

	return BT_RxData;
 10044b0:	00a10034 	movhi	r2,33792
 10044b4:	10808884 	addi	r2,r2,546
 10044b8:	10800003 	ldbu	r2,0(r2)
 10044bc:	10803fcc 	andi	r2,r2,255
}
 10044c0:	e037883a 	mov	sp,fp
 10044c4:	df000017 	ldw	fp,0(sp)
 10044c8:	dec00104 	addi	sp,sp,4
 10044cc:	f800283a 	ret

010044d0 <BTTestForReceivedData>:

int BTTestForReceivedData(void) {
 10044d0:	defffe04 	addi	sp,sp,-8
 10044d4:	df000115 	stw	fp,4(sp)
 10044d8:	df000104 	addi	fp,sp,4
	if (BT_Status & 0x1)
 10044dc:	00a10034 	movhi	r2,33792
 10044e0:	10808804 	addi	r2,r2,544
 10044e4:	10800003 	ldbu	r2,0(r2)
 10044e8:	10803fcc 	andi	r2,r2,255
 10044ec:	1080004c 	andi	r2,r2,1
 10044f0:	10803fcc 	andi	r2,r2,255
 10044f4:	1005003a 	cmpeq	r2,r2,zero
 10044f8:	1000031e 	bne	r2,zero,1004508 <BTTestForReceivedData+0x38>
		return 1;
 10044fc:	00800044 	movi	r2,1
 1004500:	e0bfff15 	stw	r2,-4(fp)
 1004504:	00000106 	br	100450c <BTTestForReceivedData+0x3c>
	else
		return 0;
 1004508:	e03fff15 	stw	zero,-4(fp)
 100450c:	e0bfff17 	ldw	r2,-4(fp)
}
 1004510:	e037883a 	mov	sp,fp
 1004514:	df000017 	ldw	fp,0(sp)
 1004518:	dec00104 	addi	sp,sp,4
 100451c:	f800283a 	ret

01004520 <parseBT>:

int parseBT(char input[]) {
 1004520:	defff604 	addi	sp,sp,-40
 1004524:	dfc00915 	stw	ra,36(sp)
 1004528:	df000815 	stw	fp,32(sp)
 100452c:	df000804 	addi	fp,sp,32
 1004530:	e13ffe15 	stw	r4,-8(fp)

	int i = 0;
 1004534:	e03ff815 	stw	zero,-32(fp)
	char temp[20];



	i = 0;
 1004538:	e03ff815 	stw	zero,-32(fp)
	while (input[i] != ',') {
 100453c:	00000c06 	br	1004570 <parseBT+0x50>
		temp[i] = input[i];
 1004540:	e13ff817 	ldw	r4,-32(fp)
 1004544:	e0bff817 	ldw	r2,-32(fp)
 1004548:	1007883a 	mov	r3,r2
 100454c:	e0bffe17 	ldw	r2,-8(fp)
 1004550:	1885883a 	add	r2,r3,r2
 1004554:	10c00003 	ldbu	r3,0(r2)
 1004558:	e0bff904 	addi	r2,fp,-28
 100455c:	1105883a 	add	r2,r2,r4
 1004560:	10c00005 	stb	r3,0(r2)
		i++;
 1004564:	e0bff817 	ldw	r2,-32(fp)
 1004568:	10800044 	addi	r2,r2,1
 100456c:	e0bff815 	stw	r2,-32(fp)
	char temp[20];



	i = 0;
	while (input[i] != ',') {
 1004570:	e0bff817 	ldw	r2,-32(fp)
 1004574:	1007883a 	mov	r3,r2
 1004578:	e0bffe17 	ldw	r2,-8(fp)
 100457c:	1885883a 	add	r2,r3,r2
 1004580:	10800003 	ldbu	r2,0(r2)
 1004584:	10803fcc 	andi	r2,r2,255
 1004588:	1080201c 	xori	r2,r2,128
 100458c:	10bfe004 	addi	r2,r2,-128
 1004590:	10800b18 	cmpnei	r2,r2,44
 1004594:	103fea1e 	bne	r2,zero,1004540 <parseBT+0x20>
		temp[i] = input[i];
		i++;
	}

	if (strcmp(temp, "NAME") == 0) {
 1004598:	e13ff904 	addi	r4,fp,-28
 100459c:	014040b4 	movhi	r5,258
 10045a0:	295c0a04 	addi	r5,r5,28712
 10045a4:	100e1c00 	call	100e1c0 <strcmp>
 10045a8:	1004c03a 	cmpne	r2,r2,zero
 10045ac:	1000021e 	bne	r2,zero,10045b8 <parseBT+0x98>
		return NAME;
 10045b0:	e03fff15 	stw	zero,-4(fp)
 10045b4:	00003806 	br	1004698 <parseBT+0x178>
	} else if (strcmp(temp, "AGE") == 0) {
 10045b8:	e13ff904 	addi	r4,fp,-28
 10045bc:	014040b4 	movhi	r5,258
 10045c0:	295c0c04 	addi	r5,r5,28720
 10045c4:	100e1c00 	call	100e1c0 <strcmp>
 10045c8:	1004c03a 	cmpne	r2,r2,zero
 10045cc:	1000031e 	bne	r2,zero,10045dc <parseBT+0xbc>
		return AGE;
 10045d0:	00800044 	movi	r2,1
 10045d4:	e0bfff15 	stw	r2,-4(fp)
 10045d8:	00002f06 	br	1004698 <parseBT+0x178>
	} else if (strcmp(temp, "GENDER") == 0) {
 10045dc:	e13ff904 	addi	r4,fp,-28
 10045e0:	014040b4 	movhi	r5,258
 10045e4:	295c0d04 	addi	r5,r5,28724
 10045e8:	100e1c00 	call	100e1c0 <strcmp>
 10045ec:	1004c03a 	cmpne	r2,r2,zero
 10045f0:	1000031e 	bne	r2,zero,1004600 <parseBT+0xe0>
		return GENDER;
 10045f4:	00800084 	movi	r2,2
 10045f8:	e0bfff15 	stw	r2,-4(fp)
 10045fc:	00002606 	br	1004698 <parseBT+0x178>
	} else if (strcmp(temp, "WEIGHT") == 0) {
 1004600:	e13ff904 	addi	r4,fp,-28
 1004604:	014040b4 	movhi	r5,258
 1004608:	295c0f04 	addi	r5,r5,28732
 100460c:	100e1c00 	call	100e1c0 <strcmp>
 1004610:	1004c03a 	cmpne	r2,r2,zero
 1004614:	1000031e 	bne	r2,zero,1004624 <parseBT+0x104>
		return WEIGHT;
 1004618:	008000c4 	movi	r2,3
 100461c:	e0bfff15 	stw	r2,-4(fp)
 1004620:	00001d06 	br	1004698 <parseBT+0x178>
	} else if (strcmp(temp, "HEIGHT") == 0) {
 1004624:	e13ff904 	addi	r4,fp,-28
 1004628:	014040b4 	movhi	r5,258
 100462c:	295c1104 	addi	r5,r5,28740
 1004630:	100e1c00 	call	100e1c0 <strcmp>
 1004634:	1004c03a 	cmpne	r2,r2,zero
 1004638:	1000031e 	bne	r2,zero,1004648 <parseBT+0x128>
		return HEIGHT;
 100463c:	00800104 	movi	r2,4
 1004640:	e0bfff15 	stw	r2,-4(fp)
 1004644:	00001406 	br	1004698 <parseBT+0x178>
	} else if (strcmp(temp, "DIST") == 0) {
 1004648:	e13ff904 	addi	r4,fp,-28
 100464c:	014040b4 	movhi	r5,258
 1004650:	295c1304 	addi	r5,r5,28748
 1004654:	100e1c00 	call	100e1c0 <strcmp>
 1004658:	1004c03a 	cmpne	r2,r2,zero
 100465c:	1000031e 	bne	r2,zero,100466c <parseBT+0x14c>
		return DIST;
 1004660:	00800144 	movi	r2,5
 1004664:	e0bfff15 	stw	r2,-4(fp)
 1004668:	00000b06 	br	1004698 <parseBT+0x178>
	} else if (strcmp(temp, "RANK") == 0) {
 100466c:	e13ff904 	addi	r4,fp,-28
 1004670:	014040b4 	movhi	r5,258
 1004674:	295c1504 	addi	r5,r5,28756
 1004678:	100e1c00 	call	100e1c0 <strcmp>
 100467c:	1004c03a 	cmpne	r2,r2,zero
 1004680:	1000031e 	bne	r2,zero,1004690 <parseBT+0x170>
		return RANK;
 1004684:	00800184 	movi	r2,6
 1004688:	e0bfff15 	stw	r2,-4(fp)
 100468c:	00000206 	br	1004698 <parseBT+0x178>
	}

	return -1;
 1004690:	00bfffc4 	movi	r2,-1
 1004694:	e0bfff15 	stw	r2,-4(fp)
 1004698:	e0bfff17 	ldw	r2,-4(fp)
}
 100469c:	e037883a 	mov	sp,fp
 10046a0:	dfc00117 	ldw	ra,4(sp)
 10046a4:	df000017 	ldw	fp,0(sp)
 10046a8:	dec00204 	addi	sp,sp,8
 10046ac:	f800283a 	ret

010046b0 <get_name>:

char* get_name(char input[]) {
 10046b0:	defff004 	addi	sp,sp,-64
 10046b4:	df000f15 	stw	fp,60(sp)
 10046b8:	df000f04 	addi	fp,sp,60
 10046bc:	e13fff15 	stw	r4,-4(fp)
	int i = 5;
 10046c0:	00800144 	movi	r2,5
 10046c4:	e0bff115 	stw	r2,-60(fp)
	char temp[50];

	while (input[i] != '\0') {
 10046c8:	00000d06 	br	1004700 <get_name+0x50>
		temp[i - 5] = input[i];
 10046cc:	e0bff117 	ldw	r2,-60(fp)
 10046d0:	113ffec4 	addi	r4,r2,-5
 10046d4:	e0bff117 	ldw	r2,-60(fp)
 10046d8:	1007883a 	mov	r3,r2
 10046dc:	e0bfff17 	ldw	r2,-4(fp)
 10046e0:	1885883a 	add	r2,r3,r2
 10046e4:	10c00003 	ldbu	r3,0(r2)
 10046e8:	e0bff204 	addi	r2,fp,-56
 10046ec:	1105883a 	add	r2,r2,r4
 10046f0:	10c00005 	stb	r3,0(r2)
		i++;
 10046f4:	e0bff117 	ldw	r2,-60(fp)
 10046f8:	10800044 	addi	r2,r2,1
 10046fc:	e0bff115 	stw	r2,-60(fp)

char* get_name(char input[]) {
	int i = 5;
	char temp[50];

	while (input[i] != '\0') {
 1004700:	e0bff117 	ldw	r2,-60(fp)
 1004704:	1007883a 	mov	r3,r2
 1004708:	e0bfff17 	ldw	r2,-4(fp)
 100470c:	1885883a 	add	r2,r3,r2
 1004710:	10800003 	ldbu	r2,0(r2)
 1004714:	10803fcc 	andi	r2,r2,255
 1004718:	1080201c 	xori	r2,r2,128
 100471c:	10bfe004 	addi	r2,r2,-128
 1004720:	1004c03a 	cmpne	r2,r2,zero
 1004724:	103fe91e 	bne	r2,zero,10046cc <get_name+0x1c>
		temp[i - 5] = input[i];
		i++;
	}

	return temp;
 1004728:	e0bff204 	addi	r2,fp,-56
}
 100472c:	e037883a 	mov	sp,fp
 1004730:	df000017 	ldw	fp,0(sp)
 1004734:	dec00104 	addi	sp,sp,4
 1004738:	f800283a 	ret

0100473c <get_info>:

float get_info(int info, char input[]) {
 100473c:	deffed04 	addi	sp,sp,-76
 1004740:	dfc01215 	stw	ra,72(sp)
 1004744:	df001115 	stw	fp,68(sp)
 1004748:	df001104 	addi	fp,sp,68
 100474c:	e13ffd15 	stw	r4,-12(fp)
 1004750:	e17ffe15 	stw	r5,-8(fp)

	int i = 0;
 1004754:	e03fef15 	stw	zero,-68(fp)
	char temp[50];

	if (info == AGE) {
 1004758:	e0bffd17 	ldw	r2,-12(fp)
 100475c:	10800058 	cmpnei	r2,r2,1
 1004760:	1000231e 	bne	r2,zero,10047f0 <get_info+0xb4>
		i = 4;
 1004764:	00800104 	movi	r2,4
 1004768:	e0bfef15 	stw	r2,-68(fp)
		while (input[i] != '\0') {
 100476c:	00000d06 	br	10047a4 <get_info+0x68>
			temp[i - 4] = input[i];
 1004770:	e0bfef17 	ldw	r2,-68(fp)
 1004774:	113fff04 	addi	r4,r2,-4
 1004778:	e0bfef17 	ldw	r2,-68(fp)
 100477c:	1007883a 	mov	r3,r2
 1004780:	e0bffe17 	ldw	r2,-8(fp)
 1004784:	1885883a 	add	r2,r3,r2
 1004788:	10c00003 	ldbu	r3,0(r2)
 100478c:	e0bff004 	addi	r2,fp,-64
 1004790:	1105883a 	add	r2,r2,r4
 1004794:	10c00005 	stb	r3,0(r2)
			i++;
 1004798:	e0bfef17 	ldw	r2,-68(fp)
 100479c:	10800044 	addi	r2,r2,1
 10047a0:	e0bfef15 	stw	r2,-68(fp)
	int i = 0;
	char temp[50];

	if (info == AGE) {
		i = 4;
		while (input[i] != '\0') {
 10047a4:	e0bfef17 	ldw	r2,-68(fp)
 10047a8:	1007883a 	mov	r3,r2
 10047ac:	e0bffe17 	ldw	r2,-8(fp)
 10047b0:	1885883a 	add	r2,r3,r2
 10047b4:	10800003 	ldbu	r2,0(r2)
 10047b8:	10803fcc 	andi	r2,r2,255
 10047bc:	1080201c 	xori	r2,r2,128
 10047c0:	10bfe004 	addi	r2,r2,-128
 10047c4:	1004c03a 	cmpne	r2,r2,zero
 10047c8:	103fe91e 	bne	r2,zero,1004770 <get_info+0x34>
			temp[i - 4] = input[i];
			i++;
		}

		return atof(temp);
 10047cc:	e13ff004 	addi	r4,fp,-64
 10047d0:	100d7040 	call	100d704 <atof>
 10047d4:	100b883a 	mov	r5,r2
 10047d8:	180d883a 	mov	r6,r3
 10047dc:	2809883a 	mov	r4,r5
 10047e0:	300b883a 	mov	r5,r6
 10047e4:	100cc1c0 	call	100cc1c <__truncdfsf2>
 10047e8:	e0bfff15 	stw	r2,-4(fp)
 10047ec:	0000c006 	br	1004af0 <get_info+0x3b4>
	} else if (info == GENDER) {
 10047f0:	e0bffd17 	ldw	r2,-12(fp)
 10047f4:	10800098 	cmpnei	r2,r2,2
 10047f8:	1000231e 	bne	r2,zero,1004888 <get_info+0x14c>
		i = 7;
 10047fc:	008001c4 	movi	r2,7
 1004800:	e0bfef15 	stw	r2,-68(fp)
		while (input[i] != '\0') {
 1004804:	00000d06 	br	100483c <get_info+0x100>
			temp[i - 7] = input[i];
 1004808:	e0bfef17 	ldw	r2,-68(fp)
 100480c:	113ffe44 	addi	r4,r2,-7
 1004810:	e0bfef17 	ldw	r2,-68(fp)
 1004814:	1007883a 	mov	r3,r2
 1004818:	e0bffe17 	ldw	r2,-8(fp)
 100481c:	1885883a 	add	r2,r3,r2
 1004820:	10c00003 	ldbu	r3,0(r2)
 1004824:	e0bff004 	addi	r2,fp,-64
 1004828:	1105883a 	add	r2,r2,r4
 100482c:	10c00005 	stb	r3,0(r2)
			i++;
 1004830:	e0bfef17 	ldw	r2,-68(fp)
 1004834:	10800044 	addi	r2,r2,1
 1004838:	e0bfef15 	stw	r2,-68(fp)
		}

		return atof(temp);
	} else if (info == GENDER) {
		i = 7;
		while (input[i] != '\0') {
 100483c:	e0bfef17 	ldw	r2,-68(fp)
 1004840:	1007883a 	mov	r3,r2
 1004844:	e0bffe17 	ldw	r2,-8(fp)
 1004848:	1885883a 	add	r2,r3,r2
 100484c:	10800003 	ldbu	r2,0(r2)
 1004850:	10803fcc 	andi	r2,r2,255
 1004854:	1080201c 	xori	r2,r2,128
 1004858:	10bfe004 	addi	r2,r2,-128
 100485c:	1004c03a 	cmpne	r2,r2,zero
 1004860:	103fe91e 	bne	r2,zero,1004808 <get_info+0xcc>
			temp[i - 7] = input[i];
			i++;
		}

		return atof(temp);
 1004864:	e13ff004 	addi	r4,fp,-64
 1004868:	100d7040 	call	100d704 <atof>
 100486c:	100b883a 	mov	r5,r2
 1004870:	180d883a 	mov	r6,r3
 1004874:	2809883a 	mov	r4,r5
 1004878:	300b883a 	mov	r5,r6
 100487c:	100cc1c0 	call	100cc1c <__truncdfsf2>
 1004880:	e0bfff15 	stw	r2,-4(fp)
 1004884:	00009a06 	br	1004af0 <get_info+0x3b4>
	} else if (info == WEIGHT) {
 1004888:	e0bffd17 	ldw	r2,-12(fp)
 100488c:	108000d8 	cmpnei	r2,r2,3
 1004890:	1000231e 	bne	r2,zero,1004920 <get_info+0x1e4>
		i = 7;
 1004894:	008001c4 	movi	r2,7
 1004898:	e0bfef15 	stw	r2,-68(fp)
		while (input[i] != '\0') {
 100489c:	00000d06 	br	10048d4 <get_info+0x198>
			temp[i - 7] = input[i];
 10048a0:	e0bfef17 	ldw	r2,-68(fp)
 10048a4:	113ffe44 	addi	r4,r2,-7
 10048a8:	e0bfef17 	ldw	r2,-68(fp)
 10048ac:	1007883a 	mov	r3,r2
 10048b0:	e0bffe17 	ldw	r2,-8(fp)
 10048b4:	1885883a 	add	r2,r3,r2
 10048b8:	10c00003 	ldbu	r3,0(r2)
 10048bc:	e0bff004 	addi	r2,fp,-64
 10048c0:	1105883a 	add	r2,r2,r4
 10048c4:	10c00005 	stb	r3,0(r2)
			i++;
 10048c8:	e0bfef17 	ldw	r2,-68(fp)
 10048cc:	10800044 	addi	r2,r2,1
 10048d0:	e0bfef15 	stw	r2,-68(fp)
		}

		return atof(temp);
	} else if (info == WEIGHT) {
		i = 7;
		while (input[i] != '\0') {
 10048d4:	e0bfef17 	ldw	r2,-68(fp)
 10048d8:	1007883a 	mov	r3,r2
 10048dc:	e0bffe17 	ldw	r2,-8(fp)
 10048e0:	1885883a 	add	r2,r3,r2
 10048e4:	10800003 	ldbu	r2,0(r2)
 10048e8:	10803fcc 	andi	r2,r2,255
 10048ec:	1080201c 	xori	r2,r2,128
 10048f0:	10bfe004 	addi	r2,r2,-128
 10048f4:	1004c03a 	cmpne	r2,r2,zero
 10048f8:	103fe91e 	bne	r2,zero,10048a0 <get_info+0x164>
			temp[i - 7] = input[i];
			i++;
		}

		return atof(temp);
 10048fc:	e13ff004 	addi	r4,fp,-64
 1004900:	100d7040 	call	100d704 <atof>
 1004904:	100b883a 	mov	r5,r2
 1004908:	180d883a 	mov	r6,r3
 100490c:	2809883a 	mov	r4,r5
 1004910:	300b883a 	mov	r5,r6
 1004914:	100cc1c0 	call	100cc1c <__truncdfsf2>
 1004918:	e0bfff15 	stw	r2,-4(fp)
 100491c:	00007406 	br	1004af0 <get_info+0x3b4>
	} else if (info == HEIGHT) {
 1004920:	e0bffd17 	ldw	r2,-12(fp)
 1004924:	10800118 	cmpnei	r2,r2,4
 1004928:	1000231e 	bne	r2,zero,10049b8 <get_info+0x27c>
		i = 7;
 100492c:	008001c4 	movi	r2,7
 1004930:	e0bfef15 	stw	r2,-68(fp)
		while (input[i] != '\0') {
 1004934:	00000d06 	br	100496c <get_info+0x230>
			temp[i - 7] = input[i];
 1004938:	e0bfef17 	ldw	r2,-68(fp)
 100493c:	113ffe44 	addi	r4,r2,-7
 1004940:	e0bfef17 	ldw	r2,-68(fp)
 1004944:	1007883a 	mov	r3,r2
 1004948:	e0bffe17 	ldw	r2,-8(fp)
 100494c:	1885883a 	add	r2,r3,r2
 1004950:	10c00003 	ldbu	r3,0(r2)
 1004954:	e0bff004 	addi	r2,fp,-64
 1004958:	1105883a 	add	r2,r2,r4
 100495c:	10c00005 	stb	r3,0(r2)
			i++;
 1004960:	e0bfef17 	ldw	r2,-68(fp)
 1004964:	10800044 	addi	r2,r2,1
 1004968:	e0bfef15 	stw	r2,-68(fp)
		}

		return atof(temp);
	} else if (info == HEIGHT) {
		i = 7;
		while (input[i] != '\0') {
 100496c:	e0bfef17 	ldw	r2,-68(fp)
 1004970:	1007883a 	mov	r3,r2
 1004974:	e0bffe17 	ldw	r2,-8(fp)
 1004978:	1885883a 	add	r2,r3,r2
 100497c:	10800003 	ldbu	r2,0(r2)
 1004980:	10803fcc 	andi	r2,r2,255
 1004984:	1080201c 	xori	r2,r2,128
 1004988:	10bfe004 	addi	r2,r2,-128
 100498c:	1004c03a 	cmpne	r2,r2,zero
 1004990:	103fe91e 	bne	r2,zero,1004938 <get_info+0x1fc>
			temp[i - 7] = input[i];
			i++;
		}

		return atof(temp);
 1004994:	e13ff004 	addi	r4,fp,-64
 1004998:	100d7040 	call	100d704 <atof>
 100499c:	100b883a 	mov	r5,r2
 10049a0:	180d883a 	mov	r6,r3
 10049a4:	2809883a 	mov	r4,r5
 10049a8:	300b883a 	mov	r5,r6
 10049ac:	100cc1c0 	call	100cc1c <__truncdfsf2>
 10049b0:	e0bfff15 	stw	r2,-4(fp)
 10049b4:	00004e06 	br	1004af0 <get_info+0x3b4>
	} else if (info == DIST) {
 10049b8:	e0bffd17 	ldw	r2,-12(fp)
 10049bc:	10800158 	cmpnei	r2,r2,5
 10049c0:	1000231e 	bne	r2,zero,1004a50 <get_info+0x314>
		i = 9;
 10049c4:	00800244 	movi	r2,9
 10049c8:	e0bfef15 	stw	r2,-68(fp)
		while (input[i] != '\0') {
 10049cc:	00000d06 	br	1004a04 <get_info+0x2c8>
			temp[i - 9] = input[i];
 10049d0:	e0bfef17 	ldw	r2,-68(fp)
 10049d4:	113ffdc4 	addi	r4,r2,-9
 10049d8:	e0bfef17 	ldw	r2,-68(fp)
 10049dc:	1007883a 	mov	r3,r2
 10049e0:	e0bffe17 	ldw	r2,-8(fp)
 10049e4:	1885883a 	add	r2,r3,r2
 10049e8:	10c00003 	ldbu	r3,0(r2)
 10049ec:	e0bff004 	addi	r2,fp,-64
 10049f0:	1105883a 	add	r2,r2,r4
 10049f4:	10c00005 	stb	r3,0(r2)
			i++;
 10049f8:	e0bfef17 	ldw	r2,-68(fp)
 10049fc:	10800044 	addi	r2,r2,1
 1004a00:	e0bfef15 	stw	r2,-68(fp)
		}

		return atof(temp);
	} else if (info == DIST) {
		i = 9;
		while (input[i] != '\0') {
 1004a04:	e0bfef17 	ldw	r2,-68(fp)
 1004a08:	1007883a 	mov	r3,r2
 1004a0c:	e0bffe17 	ldw	r2,-8(fp)
 1004a10:	1885883a 	add	r2,r3,r2
 1004a14:	10800003 	ldbu	r2,0(r2)
 1004a18:	10803fcc 	andi	r2,r2,255
 1004a1c:	1080201c 	xori	r2,r2,128
 1004a20:	10bfe004 	addi	r2,r2,-128
 1004a24:	1004c03a 	cmpne	r2,r2,zero
 1004a28:	103fe91e 	bne	r2,zero,10049d0 <get_info+0x294>
			temp[i - 9] = input[i];
			i++;
		}

		return atof(temp);
 1004a2c:	e13ff004 	addi	r4,fp,-64
 1004a30:	100d7040 	call	100d704 <atof>
 1004a34:	100b883a 	mov	r5,r2
 1004a38:	180d883a 	mov	r6,r3
 1004a3c:	2809883a 	mov	r4,r5
 1004a40:	300b883a 	mov	r5,r6
 1004a44:	100cc1c0 	call	100cc1c <__truncdfsf2>
 1004a48:	e0bfff15 	stw	r2,-4(fp)
 1004a4c:	00002806 	br	1004af0 <get_info+0x3b4>
	} else if (info == RANK) {
 1004a50:	e0bffd17 	ldw	r2,-12(fp)
 1004a54:	10800198 	cmpnei	r2,r2,6
 1004a58:	1000231e 	bne	r2,zero,1004ae8 <get_info+0x3ac>
		i = 5;
 1004a5c:	00800144 	movi	r2,5
 1004a60:	e0bfef15 	stw	r2,-68(fp)
		while (input[i] != '\0') {
 1004a64:	00000d06 	br	1004a9c <get_info+0x360>
			temp[i - 5] = input[i];
 1004a68:	e0bfef17 	ldw	r2,-68(fp)
 1004a6c:	113ffec4 	addi	r4,r2,-5
 1004a70:	e0bfef17 	ldw	r2,-68(fp)
 1004a74:	1007883a 	mov	r3,r2
 1004a78:	e0bffe17 	ldw	r2,-8(fp)
 1004a7c:	1885883a 	add	r2,r3,r2
 1004a80:	10c00003 	ldbu	r3,0(r2)
 1004a84:	e0bff004 	addi	r2,fp,-64
 1004a88:	1105883a 	add	r2,r2,r4
 1004a8c:	10c00005 	stb	r3,0(r2)
			i++;
 1004a90:	e0bfef17 	ldw	r2,-68(fp)
 1004a94:	10800044 	addi	r2,r2,1
 1004a98:	e0bfef15 	stw	r2,-68(fp)
		}

		return atof(temp);
	} else if (info == RANK) {
		i = 5;
		while (input[i] != '\0') {
 1004a9c:	e0bfef17 	ldw	r2,-68(fp)
 1004aa0:	1007883a 	mov	r3,r2
 1004aa4:	e0bffe17 	ldw	r2,-8(fp)
 1004aa8:	1885883a 	add	r2,r3,r2
 1004aac:	10800003 	ldbu	r2,0(r2)
 1004ab0:	10803fcc 	andi	r2,r2,255
 1004ab4:	1080201c 	xori	r2,r2,128
 1004ab8:	10bfe004 	addi	r2,r2,-128
 1004abc:	1004c03a 	cmpne	r2,r2,zero
 1004ac0:	103fe91e 	bne	r2,zero,1004a68 <get_info+0x32c>
			temp[i - 5] = input[i];
			i++;
		}

		return atof(temp);
 1004ac4:	e13ff004 	addi	r4,fp,-64
 1004ac8:	100d7040 	call	100d704 <atof>
 1004acc:	100b883a 	mov	r5,r2
 1004ad0:	180d883a 	mov	r6,r3
 1004ad4:	2809883a 	mov	r4,r5
 1004ad8:	300b883a 	mov	r5,r6
 1004adc:	100cc1c0 	call	100cc1c <__truncdfsf2>
 1004ae0:	e0bfff15 	stw	r2,-4(fp)
 1004ae4:	00000206 	br	1004af0 <get_info+0x3b4>
	}

	return -1;
 1004ae8:	00afe034 	movhi	r2,49024
 1004aec:	e0bfff15 	stw	r2,-4(fp)
 1004af0:	e0ffff17 	ldw	r3,-4(fp)
 1004af4:	1805883a 	mov	r2,r3
}
 1004af8:	e037883a 	mov	sp,fp
 1004afc:	dfc00117 	ldw	ra,4(sp)
 1004b00:	df000017 	ldw	fp,0(sp)
 1004b04:	dec00204 	addi	sp,sp,8
 1004b08:	f800283a 	ret

01004b0c <send_bmi>:

int send_bmi(profile *p) {
 1004b0c:	defff604 	addi	sp,sp,-40
 1004b10:	dfc00915 	stw	ra,36(sp)
 1004b14:	df000815 	stw	fp,32(sp)
 1004b18:	dc000715 	stw	r16,28(sp)
 1004b1c:	df000704 	addi	fp,sp,28
 1004b20:	e13fff15 	stw	r4,-4(fp)
	int i = 0;
 1004b24:	e03ff915 	stw	zero,-28(fp)
	char result[20];
	sprintf(result, "BMI,%2.2f\r", p->bmi);
 1004b28:	e0bfff17 	ldw	r2,-4(fp)
 1004b2c:	10800517 	ldw	r2,20(r2)
 1004b30:	1009883a 	mov	r4,r2
 1004b34:	100bc800 	call	100bc80 <__extendsfdf2>
 1004b38:	100f883a 	mov	r7,r2
 1004b3c:	1811883a 	mov	r8,r3
 1004b40:	e13ffa04 	addi	r4,fp,-24
 1004b44:	014040b4 	movhi	r5,258
 1004b48:	295c1704 	addi	r5,r5,28764
 1004b4c:	380d883a 	mov	r6,r7
 1004b50:	400f883a 	mov	r7,r8
 1004b54:	100e05c0 	call	100e05c <sprintf>

	for (i = 0; i < strlen(result); i++) {
 1004b58:	e03ff915 	stw	zero,-28(fp)
 1004b5c:	00000c06 	br	1004b90 <send_bmi+0x84>
		putcharBT(result[i]);
 1004b60:	e0fff917 	ldw	r3,-28(fp)
 1004b64:	e0bffa04 	addi	r2,fp,-24
 1004b68:	10c5883a 	add	r2,r2,r3
 1004b6c:	10800003 	ldbu	r2,0(r2)
 1004b70:	11003fcc 	andi	r4,r2,255
 1004b74:	2100201c 	xori	r4,r4,128
 1004b78:	213fe004 	addi	r4,r4,-128
 1004b7c:	10044480 	call	1004448 <putcharBT>
		wait_1ms2();
 1004b80:	10012cc0 	call	10012cc <wait_1ms2>
int send_bmi(profile *p) {
	int i = 0;
	char result[20];
	sprintf(result, "BMI,%2.2f\r", p->bmi);

	for (i = 0; i < strlen(result); i++) {
 1004b84:	e0bff917 	ldw	r2,-28(fp)
 1004b88:	10800044 	addi	r2,r2,1
 1004b8c:	e0bff915 	stw	r2,-28(fp)
 1004b90:	e43ff917 	ldw	r16,-28(fp)
 1004b94:	e13ffa04 	addi	r4,fp,-24
 1004b98:	100e3080 	call	100e308 <strlen>
 1004b9c:	80bff036 	bltu	r16,r2,1004b60 <send_bmi+0x54>
		putcharBT(result[i]);
		wait_1ms2();
	}

	return 1;
 1004ba0:	00800044 	movi	r2,1
}
 1004ba4:	e037883a 	mov	sp,fp
 1004ba8:	dfc00217 	ldw	ra,8(sp)
 1004bac:	df000117 	ldw	fp,4(sp)
 1004bb0:	dc000017 	ldw	r16,0(sp)
 1004bb4:	dec00304 	addi	sp,sp,12
 1004bb8:	f800283a 	ret

01004bbc <send_rank>:

int send_rank(profile *p) {
 1004bbc:	defff604 	addi	sp,sp,-40
 1004bc0:	dfc00915 	stw	ra,36(sp)
 1004bc4:	df000815 	stw	fp,32(sp)
 1004bc8:	dc000715 	stw	r16,28(sp)
 1004bcc:	df000704 	addi	fp,sp,28
 1004bd0:	e13fff15 	stw	r4,-4(fp)
	int i = 0;
 1004bd4:	e03ff915 	stw	zero,-28(fp)
	char result[20];
	sprintf(result, "RANK,%d\r", p->rank);
 1004bd8:	e0bfff17 	ldw	r2,-4(fp)
 1004bdc:	11801417 	ldw	r6,80(r2)
 1004be0:	e13ffa04 	addi	r4,fp,-24
 1004be4:	014040b4 	movhi	r5,258
 1004be8:	295c1a04 	addi	r5,r5,28776
 1004bec:	100e05c0 	call	100e05c <sprintf>

	for (i = 0; i < strlen(result); i++) {
 1004bf0:	e03ff915 	stw	zero,-28(fp)
 1004bf4:	00000c06 	br	1004c28 <send_rank+0x6c>
		putcharBT(result[i]);
 1004bf8:	e0fff917 	ldw	r3,-28(fp)
 1004bfc:	e0bffa04 	addi	r2,fp,-24
 1004c00:	10c5883a 	add	r2,r2,r3
 1004c04:	10800003 	ldbu	r2,0(r2)
 1004c08:	11003fcc 	andi	r4,r2,255
 1004c0c:	2100201c 	xori	r4,r4,128
 1004c10:	213fe004 	addi	r4,r4,-128
 1004c14:	10044480 	call	1004448 <putcharBT>
		wait_1ms2();
 1004c18:	10012cc0 	call	10012cc <wait_1ms2>
int send_rank(profile *p) {
	int i = 0;
	char result[20];
	sprintf(result, "RANK,%d\r", p->rank);

	for (i = 0; i < strlen(result); i++) {
 1004c1c:	e0bff917 	ldw	r2,-28(fp)
 1004c20:	10800044 	addi	r2,r2,1
 1004c24:	e0bff915 	stw	r2,-28(fp)
 1004c28:	e43ff917 	ldw	r16,-28(fp)
 1004c2c:	e13ffa04 	addi	r4,fp,-24
 1004c30:	100e3080 	call	100e308 <strlen>
 1004c34:	80bff036 	bltu	r16,r2,1004bf8 <send_rank+0x3c>
		putcharBT(result[i]);
		wait_1ms2();
	}

	return 1;
 1004c38:	00800044 	movi	r2,1
}
 1004c3c:	e037883a 	mov	sp,fp
 1004c40:	dfc00217 	ldw	ra,8(sp)
 1004c44:	df000117 	ldw	fp,4(sp)
 1004c48:	dc000017 	ldw	r16,0(sp)
 1004c4c:	dec00304 	addi	sp,sp,12
 1004c50:	f800283a 	ret

01004c54 <writetoBT>:

void writetoBT(char msg[]) {
 1004c54:	defffb04 	addi	sp,sp,-20
 1004c58:	dfc00415 	stw	ra,16(sp)
 1004c5c:	df000315 	stw	fp,12(sp)
 1004c60:	dc000215 	stw	r16,8(sp)
 1004c64:	df000204 	addi	fp,sp,8
 1004c68:	e13fff15 	stw	r4,-4(fp)
	// Write to device

	int i;
	for (i = 0; i < strlen(msg); i++) {
 1004c6c:	e03ffe15 	stw	zero,-8(fp)
 1004c70:	00000d06 	br	1004ca8 <writetoBT+0x54>
		putcharBT(msg[i]);
 1004c74:	e0bffe17 	ldw	r2,-8(fp)
 1004c78:	1007883a 	mov	r3,r2
 1004c7c:	e0bfff17 	ldw	r2,-4(fp)
 1004c80:	1885883a 	add	r2,r3,r2
 1004c84:	10800003 	ldbu	r2,0(r2)
 1004c88:	11003fcc 	andi	r4,r2,255
 1004c8c:	2100201c 	xori	r4,r4,128
 1004c90:	213fe004 	addi	r4,r4,-128
 1004c94:	10044480 	call	1004448 <putcharBT>
		wait_1ms2();
 1004c98:	10012cc0 	call	10012cc <wait_1ms2>

void writetoBT(char msg[]) {
	// Write to device

	int i;
	for (i = 0; i < strlen(msg); i++) {
 1004c9c:	e0bffe17 	ldw	r2,-8(fp)
 1004ca0:	10800044 	addi	r2,r2,1
 1004ca4:	e0bffe15 	stw	r2,-8(fp)
 1004ca8:	e43ffe17 	ldw	r16,-8(fp)
 1004cac:	e13fff17 	ldw	r4,-4(fp)
 1004cb0:	100e3080 	call	100e308 <strlen>
 1004cb4:	80bfef36 	bltu	r16,r2,1004c74 <writetoBT+0x20>
		putcharBT(msg[i]);
		wait_1ms2();
	}
}
 1004cb8:	e037883a 	mov	sp,fp
 1004cbc:	dfc00217 	ldw	ra,8(sp)
 1004cc0:	df000117 	ldw	fp,4(sp)
 1004cc4:	dc000017 	ldw	r16,0(sp)
 1004cc8:	dec00304 	addi	sp,sp,12
 1004ccc:	f800283a 	ret

01004cd0 <receivebtData>:
 }
 }

 return 0;
 }*/
void receivebtData() {
 1004cd0:	deffbe04 	addi	sp,sp,-264
 1004cd4:	dfc04115 	stw	ra,260(sp)
 1004cd8:	df004015 	stw	fp,256(sp)
 1004cdc:	dc003f15 	stw	r16,252(sp)
 1004ce0:	df003f04 	addi	fp,sp,252
 1004ce4:	00000006 	br	1004ce8 <receivebtData+0x18>
	profile p;

	while (1) {//while there is data to read

		// Read from device
	if (BTTestForReceivedData() == 1) {
 1004ce8:	10044d00 	call	10044d0 <BTTestForReceivedData>
 1004cec:	10800058 	cmpnei	r2,r2,1
 1004cf0:	1000171e 	bne	r2,zero,1004d50 <receivebtData+0x80>
		for (s2 = 0; s2 < strlen(readStr); s2++) {
 1004cf4:	e03fc215 	stw	zero,-248(fp)
 1004cf8:	00000906 	br	1004d20 <receivebtData+0x50>
			readStr[s2] = getcharBT();
 1004cfc:	e43fc217 	ldw	r16,-248(fp)
 1004d00:	10044880 	call	1004488 <getcharBT>
 1004d04:	1007883a 	mov	r3,r2
 1004d08:	e0bfc404 	addi	r2,fp,-240
 1004d0c:	1405883a 	add	r2,r2,r16
 1004d10:	10c00005 	stb	r3,0(r2)

	while (1) {//while there is data to read

		// Read from device
	if (BTTestForReceivedData() == 1) {
		for (s2 = 0; s2 < strlen(readStr); s2++) {
 1004d14:	e0bfc217 	ldw	r2,-248(fp)
 1004d18:	10800044 	addi	r2,r2,1
 1004d1c:	e0bfc215 	stw	r2,-248(fp)
 1004d20:	e43fc217 	ldw	r16,-248(fp)
 1004d24:	e13fc404 	addi	r4,fp,-240
 1004d28:	100e3080 	call	100e308 <strlen>
 1004d2c:	80bff336 	bltu	r16,r2,1004cfc <receivebtData+0x2c>
			readStr[s2] = getcharBT();
				//wait_1ms2();
		}
			wait_1ms2();
 1004d30:	10012cc0 	call	10012cc <wait_1ms2>
			printf("String Received: %s\n", readStr);
 1004d34:	e17fc404 	addi	r5,fp,-240
 1004d38:	010040b4 	movhi	r4,258
 1004d3c:	211c1d04 	addi	r4,r4,28788
 1004d40:	100df0c0 	call	100df0c <printf>
			printf("test");
 1004d44:	010040b4 	movhi	r4,258
 1004d48:	211c2304 	addi	r4,r4,28812
 1004d4c:	100df0c0 	call	100df0c <printf>
		}

		int info = parseBT(readStr);
 1004d50:	e13fc404 	addi	r4,fp,-240
 1004d54:	10045200 	call	1004520 <parseBT>
 1004d58:	e0bfc115 	stw	r2,-252(fp)

		if (info == -1)
 1004d5c:	e0bfc117 	ldw	r2,-252(fp)
 1004d60:	10bfffd8 	cmpnei	r2,r2,-1
 1004d64:	1000031e 	bne	r2,zero,1004d74 <receivebtData+0xa4>
			printf("Invalid information\n");
 1004d68:	010040b4 	movhi	r4,258
 1004d6c:	211c2504 	addi	r4,r4,28820
 1004d70:	100e0480 	call	100e048 <puts>

		if (info == NAME) {
 1004d74:	e0bfc117 	ldw	r2,-252(fp)
 1004d78:	1004c03a 	cmpne	r2,r2,zero
 1004d7c:	10000d1e 	bne	r2,zero,1004db4 <receivebtData+0xe4>
			strcpy(u_name, get_name(readStr));
 1004d80:	e13fc404 	addi	r4,fp,-240
 1004d84:	10046b00 	call	10046b0 <get_name>
 1004d88:	100b883a 	mov	r5,r2
 1004d8c:	e13fdd04 	addi	r4,fp,-140
 1004d90:	100e27c0 	call	100e27c <strcpy>
			printf("Name : %s", u_name);
 1004d94:	e17fdd04 	addi	r5,fp,-140
 1004d98:	010040b4 	movhi	r4,258
 1004d9c:	211c2a04 	addi	r4,r4,28840
 1004da0:	100df0c0 	call	100df0c <printf>
			set_name(&p, u_name);
 1004da4:	e13fea04 	addi	r4,fp,-88
 1004da8:	e17fdd04 	addi	r5,fp,-140
 1004dac:	1006c040 	call	1006c04 <set_name>
 1004db0:	003fcd06 	br	1004ce8 <receivebtData+0x18>
		} else if (info == AGE) {
 1004db4:	e0bfc117 	ldw	r2,-252(fp)
 1004db8:	10800058 	cmpnei	r2,r2,1
 1004dbc:	1000091e 	bne	r2,zero,1004de4 <receivebtData+0x114>
			set_age(&p, get_info(info, readStr));
 1004dc0:	e17fc404 	addi	r5,fp,-240
 1004dc4:	e13fc117 	ldw	r4,-252(fp)
 1004dc8:	100473c0 	call	100473c <get_info>
 1004dcc:	1009883a 	mov	r4,r2
 1004dd0:	100bbec0 	call	100bbec <__fixsfsi>
 1004dd4:	100b883a 	mov	r5,r2
 1004dd8:	e13fea04 	addi	r4,fp,-88
 1004ddc:	1006c880 	call	1006c88 <set_age>
 1004de0:	003fc106 	br	1004ce8 <receivebtData+0x18>
		} else if (info == GENDER) {
 1004de4:	e0bfc117 	ldw	r2,-252(fp)
 1004de8:	10800098 	cmpnei	r2,r2,2
 1004dec:	1000091e 	bne	r2,zero,1004e14 <receivebtData+0x144>
			set_gender(&p, get_info(info, readStr));
 1004df0:	e17fc404 	addi	r5,fp,-240
 1004df4:	e13fc117 	ldw	r4,-252(fp)
 1004df8:	100473c0 	call	100473c <get_info>
 1004dfc:	1009883a 	mov	r4,r2
 1004e00:	100bbec0 	call	100bbec <__fixsfsi>
 1004e04:	100b883a 	mov	r5,r2
 1004e08:	e13fea04 	addi	r4,fp,-88
 1004e0c:	1006c4c0 	call	1006c4c <set_gender>
 1004e10:	003fb506 	br	1004ce8 <receivebtData+0x18>
		} else if (info == HEIGHT) {
 1004e14:	e0bfc117 	ldw	r2,-252(fp)
 1004e18:	10800118 	cmpnei	r2,r2,4
 1004e1c:	1000071e 	bne	r2,zero,1004e3c <receivebtData+0x16c>
			set_height(&p, get_info(info, readStr));
 1004e20:	e17fc404 	addi	r5,fp,-240
 1004e24:	e13fc117 	ldw	r4,-252(fp)
 1004e28:	100473c0 	call	100473c <get_info>
 1004e2c:	e13fea04 	addi	r4,fp,-88
 1004e30:	100b883a 	mov	r5,r2
 1004e34:	1006d000 	call	1006d00 <set_height>
 1004e38:	003fab06 	br	1004ce8 <receivebtData+0x18>
		} else if (info == WEIGHT) {
 1004e3c:	e0bfc117 	ldw	r2,-252(fp)
 1004e40:	108000d8 	cmpnei	r2,r2,3
 1004e44:	1000071e 	bne	r2,zero,1004e64 <receivebtData+0x194>
			set_weight(&p, get_info(info, readStr));
 1004e48:	e17fc404 	addi	r5,fp,-240
 1004e4c:	e13fc117 	ldw	r4,-252(fp)
 1004e50:	100473c0 	call	100473c <get_info>
 1004e54:	e13fea04 	addi	r4,fp,-88
 1004e58:	100b883a 	mov	r5,r2
 1004e5c:	1006cc40 	call	1006cc4 <set_weight>
 1004e60:	003fa106 	br	1004ce8 <receivebtData+0x18>
		} else if (info == DIST) {
 1004e64:	e0bfc117 	ldw	r2,-252(fp)
 1004e68:	10800158 	cmpnei	r2,r2,5
 1004e6c:	1000071e 	bne	r2,zero,1004e8c <receivebtData+0x1bc>
			set_dis(&p, get_info(info, readStr));
 1004e70:	e17fc404 	addi	r5,fp,-240
 1004e74:	e13fc117 	ldw	r4,-252(fp)
 1004e78:	100473c0 	call	100473c <get_info>
 1004e7c:	e13fea04 	addi	r4,fp,-88
 1004e80:	100b883a 	mov	r5,r2
 1004e84:	1006df80 	call	1006df8 <set_dis>
 1004e88:	003f9706 	br	1004ce8 <receivebtData+0x18>
		}
		else if(info == END){
 1004e8c:	e0bfc117 	ldw	r2,-252(fp)
 1004e90:	108001e0 	cmpeqi	r2,r2,7
 1004e94:	1000011e 	bne	r2,zero,1004e9c <receivebtData+0x1cc>
			break;
		}


	}
 1004e98:	003f9306 	br	1004ce8 <receivebtData+0x18>

	calc_bmi(&p);
 1004e9c:	e13fea04 	addi	r4,fp,-88
 1004ea0:	1006d3c0 	call	1006d3c <calc_bmi>
	update_score(&p);
 1004ea4:	e13fea04 	addi	r4,fp,-88
 1004ea8:	1006e340 	call	1006e34 <update_score>
	set_rank(&p);
 1004eac:	e13fea04 	addi	r4,fp,-88
 1004eb0:	10071840 	call	1007184 <set_rank>

	send_bmi(&p);
 1004eb4:	e13fea04 	addi	r4,fp,-88
 1004eb8:	1004b0c0 	call	1004b0c <send_bmi>
	send_rank(&p);
 1004ebc:	e13fea04 	addi	r4,fp,-88
 1004ec0:	1004bbc0 	call	1004bbc <send_rank>
}
 1004ec4:	e037883a 	mov	sp,fp
 1004ec8:	dfc00217 	ldw	ra,8(sp)
 1004ecc:	df000117 	ldw	fp,4(sp)
 1004ed0:	dc000017 	ldw	r16,0(sp)
 1004ed4:	dec00304 	addi	sp,sp,12
 1004ed8:	f800283a 	ret

01004edc <dist2res>:
 */

#include "distance.h"
extern double RESDIS;

double dist2res(int RES){
 1004edc:	deffe004 	addi	sp,sp,-128
 1004ee0:	dfc01f15 	stw	ra,124(sp)
 1004ee4:	df001e15 	stw	fp,120(sp)
 1004ee8:	df001e04 	addi	fp,sp,120
 1004eec:	e13fff15 	stw	r4,-4(fp)
	char localRL[50];
	char localCL[50];

	//char localrn [50];

	OpenSD();
 1004ef0:	10040200 	call	1004020 <OpenSD>
	printf("open done\n");
 1004ef4:	010040b4 	movhi	r4,258
 1004ef8:	211c2d04 	addi	r4,r4,28852
 1004efc:	100e0480 	call	100e048 <puts>
	init_GPS();
 1004f00:	10013080 	call	1001308 <init_GPS>
	printf("GPS initialized\n");
 1004f04:	010040b4 	movhi	r4,258
 1004f08:	211c3004 	addi	r4,r4,28864
 1004f0c:	100e0480 	call	100e048 <puts>
	//strncpy(localrn, resname,6);
	//localrn[6] = '\0';

	if(RES == 1){
 1004f10:	e0bfff17 	ldw	r2,-4(fp)
 1004f14:	10800058 	cmpnei	r2,r2,1
 1004f18:	1000071e 	bne	r2,zero,1004f38 <dist2res+0x5c>
		resloc = ReadFromSD("RESLOC.txt","FORTIM");
 1004f1c:	010040b4 	movhi	r4,258
 1004f20:	211c3404 	addi	r4,r4,28880
 1004f24:	014040b4 	movhi	r5,258
 1004f28:	295c3704 	addi	r5,r5,28892
 1004f2c:	10041c80 	call	10041c8 <ReadFromSD>
 1004f30:	e0bfe515 	stw	r2,-108(fp)
 1004f34:	00001d06 	br	1004fac <dist2res+0xd0>
	}else if(RES == 2){
 1004f38:	e0bfff17 	ldw	r2,-4(fp)
 1004f3c:	10800098 	cmpnei	r2,r2,2
 1004f40:	1000071e 	bne	r2,zero,1004f60 <dist2res+0x84>
		resloc = ReadFromSD("RESLOC.txt","KASTAR");
 1004f44:	010040b4 	movhi	r4,258
 1004f48:	211c3404 	addi	r4,r4,28880
 1004f4c:	014040b4 	movhi	r5,258
 1004f50:	295c3904 	addi	r5,r5,28900
 1004f54:	10041c80 	call	10041c8 <ReadFromSD>
 1004f58:	e0bfe515 	stw	r2,-108(fp)
 1004f5c:	00001306 	br	1004fac <dist2res+0xd0>
	}else if(RES == 3){
 1004f60:	e0bfff17 	ldw	r2,-4(fp)
 1004f64:	108000d8 	cmpnei	r2,r2,3
 1004f68:	1000071e 	bne	r2,zero,1004f88 <dist2res+0xac>
		resloc = ReadFromSD("RESLOC.txt","AGOCAF");
 1004f6c:	010040b4 	movhi	r4,258
 1004f70:	211c3404 	addi	r4,r4,28880
 1004f74:	014040b4 	movhi	r5,258
 1004f78:	295c3b04 	addi	r5,r5,28908
 1004f7c:	10041c80 	call	10041c8 <ReadFromSD>
 1004f80:	e0bfe515 	stw	r2,-108(fp)
 1004f84:	00000906 	br	1004fac <dist2res+0xd0>
	}else if(RES == 4){
 1004f88:	e0bfff17 	ldw	r2,-4(fp)
 1004f8c:	10800118 	cmpnei	r2,r2,4
 1004f90:	1000061e 	bne	r2,zero,1004fac <dist2res+0xd0>
		resloc = ReadFromSD("RESLOC.txt","REBCAF");
 1004f94:	010040b4 	movhi	r4,258
 1004f98:	211c3404 	addi	r4,r4,28880
 1004f9c:	014040b4 	movhi	r5,258
 1004fa0:	295c3d04 	addi	r5,r5,28916
 1004fa4:	10041c80 	call	10041c8 <ReadFromSD>
 1004fa8:	e0bfe515 	stw	r2,-108(fp)
	}
	printf("%s\n",resloc);
 1004fac:	e13fe517 	ldw	r4,-108(fp)
 1004fb0:	100e0480 	call	100e048 <puts>

	strncpy(localRL, resloc,20);
 1004fb4:	e13fe604 	addi	r4,fp,-104
 1004fb8:	e17fe517 	ldw	r5,-108(fp)
 1004fbc:	01800504 	movi	r6,20
 1004fc0:	100e37c0 	call	100e37c <strncpy>
	localRL[20] = '\0';
 1004fc4:	e03feb05 	stb	zero,-84(fp)
	printf("%s\n",localRL);
 1004fc8:	e13fe604 	addi	r4,fp,-104
 1004fcc:	100e0480 	call	100e048 <puts>

	char *curloc = getGPSData(GPSCOORD);
 1004fd0:	0009883a 	mov	r4,zero
 1004fd4:	100194c0 	call	100194c <getGPSData>
 1004fd8:	e0bfe415 	stw	r2,-112(fp)
	strncpy(localCL, curloc, 20);
 1004fdc:	e13ff284 	addi	r4,fp,-54
 1004fe0:	e17fe417 	ldw	r5,-112(fp)
 1004fe4:	01800504 	movi	r6,20
 1004fe8:	100e37c0 	call	100e37c <strncpy>
	localCL[20] = '\0';
 1004fec:	e03ff785 	stb	zero,-34(fp)
	printf("%s\n",localCL);
 1004ff0:	e13ff284 	addi	r4,fp,-54
 1004ff4:	100e0480 	call	100e048 <puts>


	double distance = (double) getDistance(localCL,localRL);
 1004ff8:	e13ff284 	addi	r4,fp,-54
 1004ffc:	e17fe604 	addi	r5,fp,-104
 1005000:	1001a6c0 	call	1001a6c <getDistance>
 1005004:	1009883a 	mov	r4,r2
 1005008:	180b883a 	mov	r5,r3
 100500c:	e13fe215 	stw	r4,-120(fp)
 1005010:	e17fe315 	stw	r5,-116(fp)
	printf("the distance is %f\n");
 1005014:	010040b4 	movhi	r4,258
 1005018:	211c3f04 	addi	r4,r4,28924
 100501c:	100df0c0 	call	100df0c <printf>
	RESDIS = distance;
 1005020:	00c040f4 	movhi	r3,259
 1005024:	18ed5e04 	addi	r3,r3,-19080
 1005028:	e0bfe217 	ldw	r2,-120(fp)
 100502c:	18800015 	stw	r2,0(r3)
 1005030:	e0bfe317 	ldw	r2,-116(fp)
 1005034:	18800115 	stw	r2,4(r3)
	printf("RESDIS IS %f\n",RESDIS);
 1005038:	010040f4 	movhi	r4,259
 100503c:	212d5e04 	addi	r4,r4,-19080
 1005040:	20800017 	ldw	r2,0(r4)
 1005044:	20c00117 	ldw	r3,4(r4)
 1005048:	010040b4 	movhi	r4,258
 100504c:	211c4404 	addi	r4,r4,28944
 1005050:	100b883a 	mov	r5,r2
 1005054:	180d883a 	mov	r6,r3
 1005058:	100df0c0 	call	100df0c <printf>
	return distance;
 100505c:	e17fe217 	ldw	r5,-120(fp)
 1005060:	e1bfe317 	ldw	r6,-116(fp)
 1005064:	2807883a 	mov	r3,r5
 1005068:	3009883a 	mov	r4,r6

}
 100506c:	1805883a 	mov	r2,r3
 1005070:	2007883a 	mov	r3,r4
 1005074:	e037883a 	mov	sp,fp
 1005078:	dfc00117 	ldw	ra,4(sp)
 100507c:	df000017 	ldw	fp,0(sp)
 1005080:	dec00204 	addi	sp,sp,8
 1005084:	f800283a 	ret

01005088 <wait5s>:
#include "distance.h"

extern volatile int currentState;
volatile char Time[512];

void wait5s() {
 1005088:	defffd04 	addi	sp,sp,-12
 100508c:	dfc00215 	stw	ra,8(sp)
 1005090:	df000115 	stw	fp,4(sp)
 1005094:	df000104 	addi	fp,sp,4
	int i = 0;
 1005098:	e03fff15 	stw	zero,-4(fp)
	for (i = 0; i < 25000; i++) {
 100509c:	e03fff15 	stw	zero,-4(fp)
 10050a0:	00000406 	br	10050b4 <wait5s+0x2c>
		wait_1ms2();
 10050a4:	10012cc0 	call	10012cc <wait_1ms2>
extern volatile int currentState;
volatile char Time[512];

void wait5s() {
	int i = 0;
	for (i = 0; i < 25000; i++) {
 10050a8:	e0bfff17 	ldw	r2,-4(fp)
 10050ac:	10800044 	addi	r2,r2,1
 10050b0:	e0bfff15 	stw	r2,-4(fp)
 10050b4:	e0bfff17 	ldw	r2,-4(fp)
 10050b8:	10986a10 	cmplti	r2,r2,25000
 10050bc:	103ff91e 	bne	r2,zero,10050a4 <wait5s+0x1c>
		wait_1ms2();
	}
}
 10050c0:	e037883a 	mov	sp,fp
 10050c4:	dfc00117 	ldw	ra,4(sp)
 10050c8:	df000017 	ldw	fp,0(sp)
 10050cc:	dec00204 	addi	sp,sp,8
 10050d0:	f800283a 	ret

010050d4 <ifTouched>:

int ifTouched(int p1x, int p1y, int p2x, int p2y, int x1, int x2, int y1,
		int y2) {
 10050d4:	defff904 	addi	sp,sp,-28
 10050d8:	dfc00615 	stw	ra,24(sp)
 10050dc:	df000515 	stw	fp,20(sp)
 10050e0:	df000504 	addi	fp,sp,20
 10050e4:	e13ffb15 	stw	r4,-20(fp)
 10050e8:	e17ffc15 	stw	r5,-16(fp)
 10050ec:	e1bffd15 	stw	r6,-12(fp)
 10050f0:	e1fffe15 	stw	r7,-8(fp)

	wait_1ms2();
 10050f4:	10012cc0 	call	10012cc <wait_1ms2>

	if ((p1x >= x1 && p1x <= x2) && (p1y >= y1 && p1y <= y2)) {
 10050f8:	e0fffb17 	ldw	r3,-20(fp)
 10050fc:	e0800217 	ldw	r2,8(fp)
 1005100:	18800c16 	blt	r3,r2,1005134 <ifTouched+0x60>
 1005104:	e0fffb17 	ldw	r3,-20(fp)
 1005108:	e0800317 	ldw	r2,12(fp)
 100510c:	10c00916 	blt	r2,r3,1005134 <ifTouched+0x60>
 1005110:	e0fffc17 	ldw	r3,-16(fp)
 1005114:	e0800417 	ldw	r2,16(fp)
 1005118:	18800616 	blt	r3,r2,1005134 <ifTouched+0x60>
 100511c:	e0fffc17 	ldw	r3,-16(fp)
 1005120:	e0800517 	ldw	r2,20(fp)
 1005124:	10c00316 	blt	r2,r3,1005134 <ifTouched+0x60>
		return 1;
 1005128:	00800044 	movi	r2,1
 100512c:	e0bfff15 	stw	r2,-4(fp)
 1005130:	00000106 	br	1005138 <ifTouched+0x64>
	}
	return 0;
 1005134:	e03fff15 	stw	zero,-4(fp)
 1005138:	e0bfff17 	ldw	r2,-4(fp)
}
 100513c:	e037883a 	mov	sp,fp
 1005140:	dfc00117 	ldw	ra,4(sp)
 1005144:	df000017 	ldw	fp,0(sp)
 1005148:	dec00204 	addi	sp,sp,8
 100514c:	f800283a 	ret

01005150 <ifTouched2>:

int ifTouched2(int p1x, int p1y, int p2x, int p2y, int x1, int x2, int y1,
		int y2) {
 1005150:	defffa04 	addi	sp,sp,-24
 1005154:	df000515 	stw	fp,20(sp)
 1005158:	df000504 	addi	fp,sp,20
 100515c:	e13ffb15 	stw	r4,-20(fp)
 1005160:	e17ffc15 	stw	r5,-16(fp)
 1005164:	e1bffd15 	stw	r6,-12(fp)
 1005168:	e1fffe15 	stw	r7,-8(fp)
	if (((p1x >= x1 && p1x <= x2) && (p2x >= x1 && p2x <= x2))
 100516c:	e0fffb17 	ldw	r3,-20(fp)
 1005170:	e0800117 	ldw	r2,4(fp)
 1005174:	18801816 	blt	r3,r2,10051d8 <ifTouched2+0x88>
 1005178:	e0fffb17 	ldw	r3,-20(fp)
 100517c:	e0800217 	ldw	r2,8(fp)
 1005180:	10c01516 	blt	r2,r3,10051d8 <ifTouched2+0x88>
 1005184:	e0fffd17 	ldw	r3,-12(fp)
 1005188:	e0800117 	ldw	r2,4(fp)
 100518c:	18801216 	blt	r3,r2,10051d8 <ifTouched2+0x88>
 1005190:	e0fffd17 	ldw	r3,-12(fp)
 1005194:	e0800217 	ldw	r2,8(fp)
 1005198:	10c00f16 	blt	r2,r3,10051d8 <ifTouched2+0x88>
 100519c:	e0fffc17 	ldw	r3,-16(fp)
 10051a0:	e0800317 	ldw	r2,12(fp)
 10051a4:	18800c16 	blt	r3,r2,10051d8 <ifTouched2+0x88>
 10051a8:	e0fffc17 	ldw	r3,-16(fp)
 10051ac:	e0800417 	ldw	r2,16(fp)
 10051b0:	10c00916 	blt	r2,r3,10051d8 <ifTouched2+0x88>
 10051b4:	e0fffe17 	ldw	r3,-8(fp)
 10051b8:	e0800317 	ldw	r2,12(fp)
 10051bc:	18800616 	blt	r3,r2,10051d8 <ifTouched2+0x88>
 10051c0:	e0fffe17 	ldw	r3,-8(fp)
 10051c4:	e0800417 	ldw	r2,16(fp)
 10051c8:	10c00316 	blt	r2,r3,10051d8 <ifTouched2+0x88>
			&& ((p1y >= y1 && p1y <= y2) && (p2y >= y1 && p2y <= y2))) {
		return 1;
 10051cc:	00800044 	movi	r2,1
 10051d0:	e0bfff15 	stw	r2,-4(fp)
 10051d4:	00000106 	br	10051dc <ifTouched2+0x8c>
	}
	return 0;
 10051d8:	e03fff15 	stw	zero,-4(fp)
 10051dc:	e0bfff17 	ldw	r2,-4(fp)
}
 10051e0:	e037883a 	mov	sp,fp
 10051e4:	df000017 	ldw	fp,0(sp)
 10051e8:	dec00104 	addi	sp,sp,4
 10051ec:	f800283a 	ret

010051f0 <clearScreen>:

void clearScreen() {
 10051f0:	defffd04 	addi	sp,sp,-12
 10051f4:	dfc00215 	stw	ra,8(sp)
 10051f8:	df000115 	stw	fp,4(sp)
 10051fc:	df000104 	addi	fp,sp,4
	int y;
	for (y = 0; y <= 480; y++) {
 1005200:	e03fff15 	stw	zero,-4(fp)
 1005204:	00000806 	br	1005228 <clearScreen+0x38>
		HLine(0, y, 800, 78);
 1005208:	0009883a 	mov	r4,zero
 100520c:	e17fff17 	ldw	r5,-4(fp)
 1005210:	0180c804 	movi	r6,800
 1005214:	01c01384 	movi	r7,78
 1005218:	100038c0 	call	100038c <HLine>
	return 0;
}

void clearScreen() {
	int y;
	for (y = 0; y <= 480; y++) {
 100521c:	e0bfff17 	ldw	r2,-4(fp)
 1005220:	10800044 	addi	r2,r2,1
 1005224:	e0bfff15 	stw	r2,-4(fp)
 1005228:	e0bfff17 	ldw	r2,-4(fp)
 100522c:	10807850 	cmplti	r2,r2,481
 1005230:	103ff51e 	bne	r2,zero,1005208 <clearScreen+0x18>
		HLine(0, y, 800, 78);
	}
}
 1005234:	e037883a 	mov	sp,fp
 1005238:	dfc00117 	ldw	ra,4(sp)
 100523c:	df000017 	ldw	fp,0(sp)
 1005240:	dec00204 	addi	sp,sp,8
 1005244:	f800283a 	ret

01005248 <setScreen>:

void setScreen(int colour) {
 1005248:	defffc04 	addi	sp,sp,-16
 100524c:	dfc00315 	stw	ra,12(sp)
 1005250:	df000215 	stw	fp,8(sp)
 1005254:	df000204 	addi	fp,sp,8
 1005258:	e13fff15 	stw	r4,-4(fp)
	int y;
	for (y = 0; y <= 480; y++) {
 100525c:	e03ffe15 	stw	zero,-8(fp)
 1005260:	00000806 	br	1005284 <setScreen+0x3c>
		HLine(0, y, 800, colour);
 1005264:	0009883a 	mov	r4,zero
 1005268:	e17ffe17 	ldw	r5,-8(fp)
 100526c:	0180c804 	movi	r6,800
 1005270:	e1ffff17 	ldw	r7,-4(fp)
 1005274:	100038c0 	call	100038c <HLine>
	}
}

void setScreen(int colour) {
	int y;
	for (y = 0; y <= 480; y++) {
 1005278:	e0bffe17 	ldw	r2,-8(fp)
 100527c:	10800044 	addi	r2,r2,1
 1005280:	e0bffe15 	stw	r2,-8(fp)
 1005284:	e0bffe17 	ldw	r2,-8(fp)
 1005288:	10807850 	cmplti	r2,r2,481
 100528c:	103ff51e 	bne	r2,zero,1005264 <setScreen+0x1c>
		HLine(0, y, 800, colour);
	}
}
 1005290:	e037883a 	mov	sp,fp
 1005294:	dfc00117 	ldw	ra,4(sp)
 1005298:	df000017 	ldw	fp,0(sp)
 100529c:	dec00204 	addi	sp,sp,8
 10052a0:	f800283a 	ret

010052a4 <writeText>:

void writeText(char msg[], int x, int y, int margin, int color,
		int backgroundcolor) {
 10052a4:	defff504 	addi	sp,sp,-44
 10052a8:	dfc00a15 	stw	ra,40(sp)
 10052ac:	df000915 	stw	fp,36(sp)
 10052b0:	df000904 	addi	fp,sp,36
 10052b4:	e13ffc15 	stw	r4,-16(fp)
 10052b8:	e17ffd15 	stw	r5,-12(fp)
 10052bc:	e1bffe15 	stw	r6,-8(fp)
 10052c0:	e1ffff15 	stw	r7,-4(fp)
	int i = 0;
 10052c4:	e03ffb15 	stw	zero,-20(fp)
	int textmarker = x;
 10052c8:	e0bffd17 	ldw	r2,-12(fp)
 10052cc:	e0bffa15 	stw	r2,-24(fp)
	int tempchar;
	while (msg[i] != NULL) {
 10052d0:	00001906 	br	1005338 <writeText+0x94>
		tempchar = msg[i];
 10052d4:	e0bffb17 	ldw	r2,-20(fp)
 10052d8:	1007883a 	mov	r3,r2
 10052dc:	e0bffc17 	ldw	r2,-16(fp)
 10052e0:	1885883a 	add	r2,r3,r2
 10052e4:	10800003 	ldbu	r2,0(r2)
 10052e8:	10803fcc 	andi	r2,r2,255
 10052ec:	1080201c 	xori	r2,r2,128
 10052f0:	10bfe004 	addi	r2,r2,-128
 10052f4:	e0bff915 	stw	r2,-28(fp)
		OutGraphicsCharFont2a(textmarker, y, color, backgroundcolor, tempchar,
 10052f8:	e0bff917 	ldw	r2,-28(fp)
 10052fc:	d8800015 	stw	r2,0(sp)
 1005300:	00800044 	movi	r2,1
 1005304:	d8800115 	stw	r2,4(sp)
 1005308:	e13ffa17 	ldw	r4,-24(fp)
 100530c:	e17ffe17 	ldw	r5,-8(fp)
 1005310:	e1800217 	ldw	r6,8(fp)
 1005314:	e1c00317 	ldw	r7,12(fp)
 1005318:	100392c0 	call	100392c <OutGraphicsCharFont2a>
				1);
		textmarker = textmarker + margin;
 100531c:	e0fffa17 	ldw	r3,-24(fp)
 1005320:	e0bfff17 	ldw	r2,-4(fp)
 1005324:	1885883a 	add	r2,r3,r2
 1005328:	e0bffa15 	stw	r2,-24(fp)
		i++;
 100532c:	e0bffb17 	ldw	r2,-20(fp)
 1005330:	10800044 	addi	r2,r2,1
 1005334:	e0bffb15 	stw	r2,-20(fp)
void writeText(char msg[], int x, int y, int margin, int color,
		int backgroundcolor) {
	int i = 0;
	int textmarker = x;
	int tempchar;
	while (msg[i] != NULL) {
 1005338:	e0bffb17 	ldw	r2,-20(fp)
 100533c:	1007883a 	mov	r3,r2
 1005340:	e0bffc17 	ldw	r2,-16(fp)
 1005344:	1885883a 	add	r2,r3,r2
 1005348:	10800003 	ldbu	r2,0(r2)
 100534c:	10803fcc 	andi	r2,r2,255
 1005350:	1080201c 	xori	r2,r2,128
 1005354:	10bfe004 	addi	r2,r2,-128
 1005358:	1004c03a 	cmpne	r2,r2,zero
 100535c:	103fdd1e 	bne	r2,zero,10052d4 <writeText+0x30>
		OutGraphicsCharFont2a(textmarker, y, color, backgroundcolor, tempchar,
				1);
		textmarker = textmarker + margin;
		i++;
	}
}
 1005360:	e037883a 	mov	sp,fp
 1005364:	dfc00117 	ldw	ra,4(sp)
 1005368:	df000017 	ldw	fp,0(sp)
 100536c:	dec00204 	addi	sp,sp,8
 1005370:	f800283a 	ret

01005374 <writeText2>:

void writeText2(char msg[], int x, int y, int margin, int color,
		int backgroundcolor) {
 1005374:	defff504 	addi	sp,sp,-44
 1005378:	dfc00a15 	stw	ra,40(sp)
 100537c:	df000915 	stw	fp,36(sp)
 1005380:	df000904 	addi	fp,sp,36
 1005384:	e13ffc15 	stw	r4,-16(fp)
 1005388:	e17ffd15 	stw	r5,-12(fp)
 100538c:	e1bffe15 	stw	r6,-8(fp)
 1005390:	e1ffff15 	stw	r7,-4(fp)
	int i = 0;
 1005394:	e03ffb15 	stw	zero,-20(fp)
	int textmarker = x;
 1005398:	e0bffd17 	ldw	r2,-12(fp)
 100539c:	e0bffa15 	stw	r2,-24(fp)
	int tempchar;
	while (msg[i] != NULL) {
 10053a0:	00001906 	br	1005408 <writeText2+0x94>
		tempchar = msg[i];
 10053a4:	e0bffb17 	ldw	r2,-20(fp)
 10053a8:	1007883a 	mov	r3,r2
 10053ac:	e0bffc17 	ldw	r2,-16(fp)
 10053b0:	1885883a 	add	r2,r3,r2
 10053b4:	10800003 	ldbu	r2,0(r2)
 10053b8:	10803fcc 	andi	r2,r2,255
 10053bc:	1080201c 	xori	r2,r2,128
 10053c0:	10bfe004 	addi	r2,r2,-128
 10053c4:	e0bff915 	stw	r2,-28(fp)
		OutGraphicsCharFont1(textmarker, y, color, backgroundcolor, tempchar,
 10053c8:	e0bff917 	ldw	r2,-28(fp)
 10053cc:	d8800015 	stw	r2,0(sp)
 10053d0:	00800044 	movi	r2,1
 10053d4:	d8800115 	stw	r2,4(sp)
 10053d8:	e13ffa17 	ldw	r4,-24(fp)
 10053dc:	e17ffe17 	ldw	r5,-8(fp)
 10053e0:	e1800217 	ldw	r6,8(fp)
 10053e4:	e1c00317 	ldw	r7,12(fp)
 10053e8:	10037540 	call	1003754 <OutGraphicsCharFont1>
				1);
		textmarker = textmarker + margin;
 10053ec:	e0fffa17 	ldw	r3,-24(fp)
 10053f0:	e0bfff17 	ldw	r2,-4(fp)
 10053f4:	1885883a 	add	r2,r3,r2
 10053f8:	e0bffa15 	stw	r2,-24(fp)
		i++;
 10053fc:	e0bffb17 	ldw	r2,-20(fp)
 1005400:	10800044 	addi	r2,r2,1
 1005404:	e0bffb15 	stw	r2,-20(fp)
void writeText2(char msg[], int x, int y, int margin, int color,
		int backgroundcolor) {
	int i = 0;
	int textmarker = x;
	int tempchar;
	while (msg[i] != NULL) {
 1005408:	e0bffb17 	ldw	r2,-20(fp)
 100540c:	1007883a 	mov	r3,r2
 1005410:	e0bffc17 	ldw	r2,-16(fp)
 1005414:	1885883a 	add	r2,r3,r2
 1005418:	10800003 	ldbu	r2,0(r2)
 100541c:	10803fcc 	andi	r2,r2,255
 1005420:	1080201c 	xori	r2,r2,128
 1005424:	10bfe004 	addi	r2,r2,-128
 1005428:	1004c03a 	cmpne	r2,r2,zero
 100542c:	103fdd1e 	bne	r2,zero,10053a4 <writeText2+0x30>
		OutGraphicsCharFont1(textmarker, y, color, backgroundcolor, tempchar,
				1);
		textmarker = textmarker + margin;
		i++;
	}
}
 1005430:	e037883a 	mov	sp,fp
 1005434:	dfc00117 	ldw	ra,4(sp)
 1005438:	df000017 	ldw	fp,0(sp)
 100543c:	dec00204 	addi	sp,sp,8
 1005440:	f800283a 	ret

01005444 <drawRectangle>:

void drawRectangle(int x1, int x2, int y1, int y2, int colour) {
 1005444:	defff904 	addi	sp,sp,-28
 1005448:	dfc00615 	stw	ra,24(sp)
 100544c:	df000515 	stw	fp,20(sp)
 1005450:	df000504 	addi	fp,sp,20
 1005454:	e13ffc15 	stw	r4,-16(fp)
 1005458:	e17ffd15 	stw	r5,-12(fp)
 100545c:	e1bffe15 	stw	r6,-8(fp)
 1005460:	e1ffff15 	stw	r7,-4(fp)
	int i;
	for (i = y1 + 1; i < y2; i++)
 1005464:	e0bffe17 	ldw	r2,-8(fp)
 1005468:	10800044 	addi	r2,r2,1
 100546c:	e0bffb15 	stw	r2,-20(fp)
 1005470:	00000b06 	br	10054a0 <drawRectangle+0x5c>
		HLine(x1, i, x2 - x1 - 1, colour);
 1005474:	e0fffd17 	ldw	r3,-12(fp)
 1005478:	e0bffc17 	ldw	r2,-16(fp)
 100547c:	1885c83a 	sub	r2,r3,r2
 1005480:	11bfffc4 	addi	r6,r2,-1
 1005484:	e13ffc17 	ldw	r4,-16(fp)
 1005488:	e17ffb17 	ldw	r5,-20(fp)
 100548c:	e1c00217 	ldw	r7,8(fp)
 1005490:	100038c0 	call	100038c <HLine>
	}
}

void drawRectangle(int x1, int x2, int y1, int y2, int colour) {
	int i;
	for (i = y1 + 1; i < y2; i++)
 1005494:	e0bffb17 	ldw	r2,-20(fp)
 1005498:	10800044 	addi	r2,r2,1
 100549c:	e0bffb15 	stw	r2,-20(fp)
 10054a0:	e0fffb17 	ldw	r3,-20(fp)
 10054a4:	e0bfff17 	ldw	r2,-4(fp)
 10054a8:	18bff216 	blt	r3,r2,1005474 <drawRectangle+0x30>
		HLine(x1, i, x2 - x1 - 1, colour);
}
 10054ac:	e037883a 	mov	sp,fp
 10054b0:	dfc00117 	ldw	ra,4(sp)
 10054b4:	df000017 	ldw	fp,0(sp)
 10054b8:	dec00204 	addi	sp,sp,8
 10054bc:	f800283a 	ret

010054c0 <drawBack>:

void drawBack() {
 10054c0:	defffc04 	addi	sp,sp,-16
 10054c4:	dfc00315 	stw	ra,12(sp)
 10054c8:	df000215 	stw	fp,8(sp)
 10054cc:	df000204 	addi	fp,sp,8
	drawRectangle(690, 780, 400, 460, BLUE);
 10054d0:	00800104 	movi	r2,4
 10054d4:	d8800015 	stw	r2,0(sp)
 10054d8:	0100ac84 	movi	r4,690
 10054dc:	0140c304 	movi	r5,780
 10054e0:	01806404 	movi	r6,400
 10054e4:	01c07304 	movi	r7,460
 10054e8:	10054440 	call	1005444 <drawRectangle>
	writeText("Back", 710, 430, 15, YELLOW, BLUE);
 10054ec:	00800144 	movi	r2,5
 10054f0:	d8800015 	stw	r2,0(sp)
 10054f4:	00800104 	movi	r2,4
 10054f8:	d8800115 	stw	r2,4(sp)
 10054fc:	010040b4 	movhi	r4,258
 1005500:	211c4804 	addi	r4,r4,28960
 1005504:	0140b184 	movi	r5,710
 1005508:	01806b84 	movi	r6,430
 100550c:	01c003c4 	movi	r7,15
 1005510:	10052a40 	call	10052a4 <writeText>
}
 1005514:	e037883a 	mov	sp,fp
 1005518:	dfc00117 	ldw	ra,4(sp)
 100551c:	df000017 	ldw	fp,0(sp)
 1005520:	dec00204 	addi	sp,sp,8
 1005524:	f800283a 	ret

01005528 <drawHomeButton>:


void drawHomeButton() {
 1005528:	defffc04 	addi	sp,sp,-16
 100552c:	dfc00315 	stw	ra,12(sp)
 1005530:	df000215 	stw	fp,8(sp)
 1005534:	df000204 	addi	fp,sp,8
	drawRectangle(690, 780, 20, 80, BLUE);
 1005538:	00800104 	movi	r2,4
 100553c:	d8800015 	stw	r2,0(sp)
 1005540:	0100ac84 	movi	r4,690
 1005544:	0140c304 	movi	r5,780
 1005548:	01800504 	movi	r6,20
 100554c:	01c01404 	movi	r7,80
 1005550:	10054440 	call	1005444 <drawRectangle>
	writeText("Home", 710, 40, 15, YELLOW, BLUE);
 1005554:	00800144 	movi	r2,5
 1005558:	d8800015 	stw	r2,0(sp)
 100555c:	00800104 	movi	r2,4
 1005560:	d8800115 	stw	r2,4(sp)
 1005564:	010040b4 	movhi	r4,258
 1005568:	211c4a04 	addi	r4,r4,28968
 100556c:	0140b184 	movi	r5,710
 1005570:	01800a04 	movi	r6,40
 1005574:	01c003c4 	movi	r7,15
 1005578:	10052a40 	call	10052a4 <writeText>
}
 100557c:	e037883a 	mov	sp,fp
 1005580:	dfc00117 	ldw	ra,4(sp)
 1005584:	df000017 	ldw	fp,0(sp)
 1005588:	dec00204 	addi	sp,sp,8
 100558c:	f800283a 	ret

01005590 <drawInner>:

void drawInner(int color) {
 1005590:	defffc04 	addi	sp,sp,-16
 1005594:	dfc00315 	stw	ra,12(sp)
 1005598:	df000215 	stw	fp,8(sp)
 100559c:	df000204 	addi	fp,sp,8
 10055a0:	e13fff15 	stw	r4,-4(fp)
	drawRectangle(20, 780, 20, 460, color);
 10055a4:	e0bfff17 	ldw	r2,-4(fp)
 10055a8:	d8800015 	stw	r2,0(sp)
 10055ac:	01000504 	movi	r4,20
 10055b0:	0140c304 	movi	r5,780
 10055b4:	01800504 	movi	r6,20
 10055b8:	01c07304 	movi	r7,460
 10055bc:	10054440 	call	1005444 <drawRectangle>
}
 10055c0:	e037883a 	mov	sp,fp
 10055c4:	dfc00117 	ldw	ra,4(sp)
 10055c8:	df000017 	ldw	fp,0(sp)
 10055cc:	dec00204 	addi	sp,sp,8
 10055d0:	f800283a 	ret

010055d4 <drawWelcome>:

void drawWelcome() {
 10055d4:	defff104 	addi	sp,sp,-60
 10055d8:	dfc00e15 	stw	ra,56(sp)
 10055dc:	df000d15 	stw	fp,52(sp)
 10055e0:	df000d04 	addi	fp,sp,52
	clearScreen();
 10055e4:	10051f00 	call	10051f0 <clearScreen>
	setScreen(78);
 10055e8:	01001384 	movi	r4,78
 10055ec:	10052480 	call	1005248 <setScreen>
	char msg1[] = "Welcome to Fitup";
 10055f0:	00c040b4 	movhi	r3,258
 10055f4:	18dc4c04 	addi	r3,r3,28976
 10055f8:	18800017 	ldw	r2,0(r3)
 10055fc:	e0bff515 	stw	r2,-44(fp)
 1005600:	18800117 	ldw	r2,4(r3)
 1005604:	e0bff615 	stw	r2,-40(fp)
 1005608:	18800217 	ldw	r2,8(r3)
 100560c:	e0bff715 	stw	r2,-36(fp)
 1005610:	18800317 	ldw	r2,12(r3)
 1005614:	e0bff815 	stw	r2,-32(fp)
 1005618:	18800403 	ldbu	r2,16(r3)
 100561c:	e0bff905 	stb	r2,-28(fp)
	char msg2[] = "Touch Anywhere To Continue";
 1005620:	008040b4 	movhi	r2,258
 1005624:	109c5104 	addi	r2,r2,28996
 1005628:	e13ff944 	addi	r4,fp,-27
 100562c:	100b883a 	mov	r5,r2
 1005630:	018006c4 	movi	r6,27
 1005634:	100d7500 	call	100d750 <memcpy>
	writeText(msg1, 230, 150, 22, YELLOW, 78);
 1005638:	00800144 	movi	r2,5
 100563c:	d8800015 	stw	r2,0(sp)
 1005640:	00801384 	movi	r2,78
 1005644:	d8800115 	stw	r2,4(sp)
 1005648:	e13ff504 	addi	r4,fp,-44
 100564c:	01403984 	movi	r5,230
 1005650:	01802584 	movi	r6,150
 1005654:	01c00584 	movi	r7,22
 1005658:	10052a40 	call	10052a4 <writeText>
	writeText2(msg2, 265, 300, 10, WHITE, 78);
 100565c:	e13ff944 	addi	r4,fp,-27
 1005660:	00800044 	movi	r2,1
 1005664:	d8800015 	stw	r2,0(sp)
 1005668:	00801384 	movi	r2,78
 100566c:	d8800115 	stw	r2,4(sp)
 1005670:	01404244 	movi	r5,265
 1005674:	01804b04 	movi	r6,300
 1005678:	01c00284 	movi	r7,10
 100567c:	10053740 	call	1005374 <writeText2>
}
 1005680:	e037883a 	mov	sp,fp
 1005684:	dfc00117 	ldw	ra,4(sp)
 1005688:	df000017 	ldw	fp,0(sp)
 100568c:	dec00204 	addi	sp,sp,8
 1005690:	f800283a 	ret

01005694 <drawHome>:

void drawHome() {
 1005694:	defffc04 	addi	sp,sp,-16
 1005698:	dfc00315 	stw	ra,12(sp)
 100569c:	df000215 	stw	fp,8(sp)
 10056a0:	df000204 	addi	fp,sp,8
	clearScreen();
 10056a4:	10051f00 	call	10051f0 <clearScreen>
	drawInner(WHITE);
 10056a8:	01000044 	movi	r4,1
 10056ac:	10055900 	call	1005590 <drawInner>
	drawRectangle(200, 600, 75, 150, YELLOW);
 10056b0:	00800144 	movi	r2,5
 10056b4:	d8800015 	stw	r2,0(sp)
 10056b8:	01003204 	movi	r4,200
 10056bc:	01409604 	movi	r5,600
 10056c0:	018012c4 	movi	r6,75
 10056c4:	01c02584 	movi	r7,150
 10056c8:	10054440 	call	1005444 <drawRectangle>
	drawRectangle(200, 600, 175, 250, YELLOW);
 10056cc:	00800144 	movi	r2,5
 10056d0:	d8800015 	stw	r2,0(sp)
 10056d4:	01003204 	movi	r4,200
 10056d8:	01409604 	movi	r5,600
 10056dc:	01802bc4 	movi	r6,175
 10056e0:	01c03e84 	movi	r7,250
 10056e4:	10054440 	call	1005444 <drawRectangle>
	drawRectangle(200, 600, 275, 350, YELLOW);
 10056e8:	00800144 	movi	r2,5
 10056ec:	d8800015 	stw	r2,0(sp)
 10056f0:	01003204 	movi	r4,200
 10056f4:	01409604 	movi	r5,600
 10056f8:	018044c4 	movi	r6,275
 10056fc:	01c05784 	movi	r7,350
 1005700:	10054440 	call	1005444 <drawRectangle>
	drawRectangle(200, 600, 375, 450, YELLOW);
 1005704:	00800144 	movi	r2,5
 1005708:	d8800015 	stw	r2,0(sp)
 100570c:	01003204 	movi	r4,200
 1005710:	01409604 	movi	r5,600
 1005714:	01805dc4 	movi	r6,375
 1005718:	01c07084 	movi	r7,450
 100571c:	10054440 	call	1005444 <drawRectangle>
	writeText("HOME", 360, 40, 20, DBLUE, WHITE);
 1005720:	00801384 	movi	r2,78
 1005724:	d8800015 	stw	r2,0(sp)
 1005728:	00800044 	movi	r2,1
 100572c:	d8800115 	stw	r2,4(sp)
 1005730:	010040b4 	movhi	r4,258
 1005734:	211c5804 	addi	r4,r4,29024
 1005738:	01405a04 	movi	r5,360
 100573c:	01800a04 	movi	r6,40
 1005740:	01c00504 	movi	r7,20
 1005744:	10052a40 	call	10052a4 <writeText>
	writeText("Start Run", 330, 110, 15, BLACK, YELLOW);
 1005748:	d8000015 	stw	zero,0(sp)
 100574c:	00800144 	movi	r2,5
 1005750:	d8800115 	stw	r2,4(sp)
 1005754:	010040b4 	movhi	r4,258
 1005758:	211c5a04 	addi	r4,r4,29032
 100575c:	01405284 	movi	r5,330
 1005760:	01801b84 	movi	r6,110
 1005764:	01c003c4 	movi	r7,15
 1005768:	10052a40 	call	10052a4 <writeText>
	writeText("Run Stats", 330, 210, 15, BLACK, YELLOW);
 100576c:	d8000015 	stw	zero,0(sp)
 1005770:	00800144 	movi	r2,5
 1005774:	d8800115 	stw	r2,4(sp)
 1005778:	010040b4 	movhi	r4,258
 100577c:	211c5d04 	addi	r4,r4,29044
 1005780:	01405284 	movi	r5,330
 1005784:	01803484 	movi	r6,210
 1005788:	01c003c4 	movi	r7,15
 100578c:	10052a40 	call	10052a4 <writeText>
	writeText("Sync", 360, 310, 15, BLACK, YELLOW);
 1005790:	d8000015 	stw	zero,0(sp)
 1005794:	00800144 	movi	r2,5
 1005798:	d8800115 	stw	r2,4(sp)
 100579c:	010040b4 	movhi	r4,258
 10057a0:	211c6004 	addi	r4,r4,29056
 10057a4:	01405a04 	movi	r5,360
 10057a8:	01804d84 	movi	r6,310
 10057ac:	01c003c4 	movi	r7,15
 10057b0:	10052a40 	call	10052a4 <writeText>
	writeText("Profile", 330, 410, 15, BLACK, YELLOW);
 10057b4:	d8000015 	stw	zero,0(sp)
 10057b8:	00800144 	movi	r2,5
 10057bc:	d8800115 	stw	r2,4(sp)
 10057c0:	010040b4 	movhi	r4,258
 10057c4:	211c6204 	addi	r4,r4,29064
 10057c8:	01405284 	movi	r5,330
 10057cc:	01806684 	movi	r6,410
 10057d0:	01c003c4 	movi	r7,15
 10057d4:	10052a40 	call	10052a4 <writeText>
	drawBack();
 10057d8:	10054c00 	call	10054c0 <drawBack>
}
 10057dc:	e037883a 	mov	sp,fp
 10057e0:	dfc00117 	ldw	ra,4(sp)
 10057e4:	df000017 	ldw	fp,0(sp)
 10057e8:	dec00204 	addi	sp,sp,8
 10057ec:	f800283a 	ret

010057f0 <drawStartRun>:

void drawStartRun() {
 10057f0:	defffc04 	addi	sp,sp,-16
 10057f4:	dfc00315 	stw	ra,12(sp)
 10057f8:	df000215 	stw	fp,8(sp)
 10057fc:	df000204 	addi	fp,sp,8
	clearScreen();
 1005800:	10051f00 	call	10051f0 <clearScreen>
	drawInner(WHITE);
 1005804:	01000044 	movi	r4,1
 1005808:	10055900 	call	1005590 <drawInner>
	writeText("Currently tracking your run", 100, 150, 22, BLACK, WHITE);
 100580c:	d8000015 	stw	zero,0(sp)
 1005810:	00800044 	movi	r2,1
 1005814:	d8800115 	stw	r2,4(sp)
 1005818:	010040b4 	movhi	r4,258
 100581c:	211c6404 	addi	r4,r4,29072
 1005820:	01401904 	movi	r5,100
 1005824:	01802584 	movi	r6,150
 1005828:	01c00584 	movi	r7,22
 100582c:	10052a40 	call	10052a4 <writeText>
	drawRectangle(200, 600, 250, 400, RED);
 1005830:	00800084 	movi	r2,2
 1005834:	d8800015 	stw	r2,0(sp)
 1005838:	01003204 	movi	r4,200
 100583c:	01409604 	movi	r5,600
 1005840:	01803e84 	movi	r6,250
 1005844:	01c06404 	movi	r7,400
 1005848:	10054440 	call	1005444 <drawRectangle>
	writeText("End Run", 320, 325, 25, YELLOW, RED);
 100584c:	00800144 	movi	r2,5
 1005850:	d8800015 	stw	r2,0(sp)
 1005854:	00800084 	movi	r2,2
 1005858:	d8800115 	stw	r2,4(sp)
 100585c:	010040b4 	movhi	r4,258
 1005860:	211c6b04 	addi	r4,r4,29100
 1005864:	01405004 	movi	r5,320
 1005868:	01805144 	movi	r6,325
 100586c:	01c00644 	movi	r7,25
 1005870:	10052a40 	call	10052a4 <writeText>
	drawBack();
 1005874:	10054c00 	call	10054c0 <drawBack>
}
 1005878:	e037883a 	mov	sp,fp
 100587c:	dfc00117 	ldw	ra,4(sp)
 1005880:	df000017 	ldw	fp,0(sp)
 1005884:	dec00204 	addi	sp,sp,8
 1005888:	f800283a 	ret

0100588c <drawEndRun>:

void drawEndRun() {
 100588c:	defffc04 	addi	sp,sp,-16
 1005890:	dfc00315 	stw	ra,12(sp)
 1005894:	df000215 	stw	fp,8(sp)
 1005898:	df000204 	addi	fp,sp,8
	clearScreen();
 100589c:	10051f00 	call	10051f0 <clearScreen>
	drawInner(WHITE);
 10058a0:	01000044 	movi	r4,1
 10058a4:	10055900 	call	1005590 <drawInner>
	writeText("One moment please", 275, 125, 15, BLUE, WHITE);
 10058a8:	00800104 	movi	r2,4
 10058ac:	d8800015 	stw	r2,0(sp)
 10058b0:	00800044 	movi	r2,1
 10058b4:	d8800115 	stw	r2,4(sp)
 10058b8:	010040b4 	movhi	r4,258
 10058bc:	211c6d04 	addi	r4,r4,29108
 10058c0:	014044c4 	movi	r5,275
 10058c4:	01801f44 	movi	r6,125
 10058c8:	01c003c4 	movi	r7,15
 10058cc:	10052a40 	call	10052a4 <writeText>
	writeText("Currently analyzing your run", 225, 170, 12, RED, WHITE);
 10058d0:	00800084 	movi	r2,2
 10058d4:	d8800015 	stw	r2,0(sp)
 10058d8:	00800044 	movi	r2,1
 10058dc:	d8800115 	stw	r2,4(sp)
 10058e0:	010040b4 	movhi	r4,258
 10058e4:	211c7204 	addi	r4,r4,29128
 10058e8:	01403844 	movi	r5,225
 10058ec:	01802a84 	movi	r6,170
 10058f0:	01c00304 	movi	r7,12
 10058f4:	10052a40 	call	10052a4 <writeText>
	writeText("Check out your run statistics in the Run Stats menu!", 110, 300,
 10058f8:	d8000015 	stw	zero,0(sp)
 10058fc:	00800044 	movi	r2,1
 1005900:	d8800115 	stw	r2,4(sp)
 1005904:	010040b4 	movhi	r4,258
 1005908:	211c7a04 	addi	r4,r4,29160
 100590c:	01401b84 	movi	r5,110
 1005910:	01804b04 	movi	r6,300
 1005914:	01c00304 	movi	r7,12
 1005918:	10052a40 	call	10052a4 <writeText>
			12, BLACK, WHITE);
}
 100591c:	e037883a 	mov	sp,fp
 1005920:	dfc00117 	ldw	ra,4(sp)
 1005924:	df000017 	ldw	fp,0(sp)
 1005928:	dec00204 	addi	sp,sp,8
 100592c:	f800283a 	ret

01005930 <drawStats>:

void drawStats() {
 1005930:	deffe804 	addi	sp,sp,-96
 1005934:	dfc01715 	stw	ra,92(sp)
 1005938:	df001615 	stw	fp,88(sp)
 100593c:	df001604 	addi	fp,sp,88
	clearScreen();
 1005940:	10051f00 	call	10051f0 <clearScreen>
	drawInner(WHITE);
 1005944:	01000044 	movi	r4,1
 1005948:	10055900 	call	1005590 <drawInner>
	writeText("Stats", 360, 40, 20, DBLUE, WHITE);
 100594c:	00801384 	movi	r2,78
 1005950:	d8800015 	stw	r2,0(sp)
 1005954:	00800044 	movi	r2,1
 1005958:	d8800115 	stw	r2,4(sp)
 100595c:	010040b4 	movhi	r4,258
 1005960:	211c8804 	addi	r4,r4,29216
 1005964:	01405a04 	movi	r5,360
 1005968:	01800a04 	movi	r6,40
 100596c:	01c00504 	movi	r7,20
 1005970:	10052a40 	call	10052a4 <writeText>
	char timestartmin[10];
	char timeendhr[10];
	char timeendmin[10];
	char timeElapsed[10];

	sprintf(totdistance, "%.2f", totaldistance);
 1005974:	010040f4 	movhi	r4,259
 1005978:	212d6004 	addi	r4,r4,-19072
 100597c:	20800017 	ldw	r2,0(r4)
 1005980:	20c00117 	ldw	r3,4(r4)
 1005984:	e13fec04 	addi	r4,fp,-80
 1005988:	014040b4 	movhi	r5,258
 100598c:	295c8a04 	addi	r5,r5,29224
 1005990:	100d883a 	mov	r6,r2
 1005994:	180f883a 	mov	r7,r3
 1005998:	100e05c0 	call	100e05c <sprintf>
	sprintf(avgspd, "%.2f", avgspeed);
 100599c:	010040f4 	movhi	r4,259
 10059a0:	212d6204 	addi	r4,r4,-19064
 10059a4:	20800017 	ldw	r2,0(r4)
 10059a8:	20c00117 	ldw	r3,4(r4)
 10059ac:	e13fee84 	addi	r4,fp,-70
 10059b0:	014040b4 	movhi	r5,258
 10059b4:	295c8a04 	addi	r5,r5,29224
 10059b8:	100d883a 	mov	r6,r2
 10059bc:	180f883a 	mov	r7,r3
 10059c0:	100e05c0 	call	100e05c <sprintf>
	sprintf(topspd, "%.2f", topspeed);
 10059c4:	010040f4 	movhi	r4,259
 10059c8:	212d6404 	addi	r4,r4,-19056
 10059cc:	20800017 	ldw	r2,0(r4)
 10059d0:	20c00117 	ldw	r3,4(r4)
 10059d4:	e13ff104 	addi	r4,fp,-60
 10059d8:	014040b4 	movhi	r5,258
 10059dc:	295c8a04 	addi	r5,r5,29224
 10059e0:	100d883a 	mov	r6,r2
 10059e4:	180f883a 	mov	r7,r3
 10059e8:	100e05c0 	call	100e05c <sprintf>

	sprintf(timestarthr, "%i", starthour);
 10059ec:	008040f4 	movhi	r2,259
 10059f0:	10ad6f04 	addi	r2,r2,-19012
 10059f4:	11800017 	ldw	r6,0(r2)
 10059f8:	e13ff384 	addi	r4,fp,-50
 10059fc:	014040b4 	movhi	r5,258
 1005a00:	295c8c04 	addi	r5,r5,29232
 1005a04:	100e05c0 	call	100e05c <sprintf>
	sprintf(timestartmin, "%i", startmin);
 1005a08:	008040f4 	movhi	r2,259
 1005a0c:	10ad7104 	addi	r2,r2,-19004
 1005a10:	11800017 	ldw	r6,0(r2)
 1005a14:	e13ff604 	addi	r4,fp,-40
 1005a18:	014040b4 	movhi	r5,258
 1005a1c:	295c8c04 	addi	r5,r5,29232
 1005a20:	100e05c0 	call	100e05c <sprintf>
	sprintf(timeendhr, "%i", endhour);
 1005a24:	008040f4 	movhi	r2,259
 1005a28:	10ad6d04 	addi	r2,r2,-19020
 1005a2c:	11800017 	ldw	r6,0(r2)
 1005a30:	e13ff884 	addi	r4,fp,-30
 1005a34:	014040b4 	movhi	r5,258
 1005a38:	295c8c04 	addi	r5,r5,29232
 1005a3c:	100e05c0 	call	100e05c <sprintf>
	sprintf(timeendmin, "%i", endmin);
 1005a40:	008040f4 	movhi	r2,259
 1005a44:	10ad6a04 	addi	r2,r2,-19032
 1005a48:	11800017 	ldw	r6,0(r2)
 1005a4c:	e13ffb04 	addi	r4,fp,-20
 1005a50:	014040b4 	movhi	r5,258
 1005a54:	295c8c04 	addi	r5,r5,29232
 1005a58:	100e05c0 	call	100e05c <sprintf>

	sprintf(timeElapsed, "%.2f", timeran);
 1005a5c:	010040f4 	movhi	r4,259
 1005a60:	212d6804 	addi	r4,r4,-19040
 1005a64:	20800017 	ldw	r2,0(r4)
 1005a68:	20c00117 	ldw	r3,4(r4)
 1005a6c:	e13ffd84 	addi	r4,fp,-10
 1005a70:	014040b4 	movhi	r5,258
 1005a74:	295c8a04 	addi	r5,r5,29224
 1005a78:	100d883a 	mov	r6,r2
 1005a7c:	180f883a 	mov	r7,r3
 1005a80:	100e05c0 	call	100e05c <sprintf>

	writeText("Run started at: ", 40, 120, 15, RED, WHITE);
 1005a84:	00800084 	movi	r2,2
 1005a88:	d8800015 	stw	r2,0(sp)
 1005a8c:	00800044 	movi	r2,1
 1005a90:	d8800115 	stw	r2,4(sp)
 1005a94:	010040b4 	movhi	r4,258
 1005a98:	211c8d04 	addi	r4,r4,29236
 1005a9c:	01400a04 	movi	r5,40
 1005aa0:	01801e04 	movi	r6,120
 1005aa4:	01c003c4 	movi	r7,15
 1005aa8:	10052a40 	call	10052a4 <writeText>
	writeText(timestarthr, 300, 120, 15, RED, WHITE);
 1005aac:	e13ff384 	addi	r4,fp,-50
 1005ab0:	00800084 	movi	r2,2
 1005ab4:	d8800015 	stw	r2,0(sp)
 1005ab8:	00800044 	movi	r2,1
 1005abc:	d8800115 	stw	r2,4(sp)
 1005ac0:	01404b04 	movi	r5,300
 1005ac4:	01801e04 	movi	r6,120
 1005ac8:	01c003c4 	movi	r7,15
 1005acc:	10052a40 	call	10052a4 <writeText>
	writeText(":", 330, 120, 15, RED, WHITE);
 1005ad0:	00800084 	movi	r2,2
 1005ad4:	d8800015 	stw	r2,0(sp)
 1005ad8:	00800044 	movi	r2,1
 1005adc:	d8800115 	stw	r2,4(sp)
 1005ae0:	010040b4 	movhi	r4,258
 1005ae4:	211c9204 	addi	r4,r4,29256
 1005ae8:	01405284 	movi	r5,330
 1005aec:	01801e04 	movi	r6,120
 1005af0:	01c003c4 	movi	r7,15
 1005af4:	10052a40 	call	10052a4 <writeText>
	writeText(timestartmin, 350, 120, 15, RED, WHITE);
 1005af8:	e13ff604 	addi	r4,fp,-40
 1005afc:	00800084 	movi	r2,2
 1005b00:	d8800015 	stw	r2,0(sp)
 1005b04:	00800044 	movi	r2,1
 1005b08:	d8800115 	stw	r2,4(sp)
 1005b0c:	01405784 	movi	r5,350
 1005b10:	01801e04 	movi	r6,120
 1005b14:	01c003c4 	movi	r7,15
 1005b18:	10052a40 	call	10052a4 <writeText>
	writeText("PST", 400, 120, 15, RED, WHITE);
 1005b1c:	00800084 	movi	r2,2
 1005b20:	d8800015 	stw	r2,0(sp)
 1005b24:	00800044 	movi	r2,1
 1005b28:	d8800115 	stw	r2,4(sp)
 1005b2c:	010040b4 	movhi	r4,258
 1005b30:	211c9304 	addi	r4,r4,29260
 1005b34:	01406404 	movi	r5,400
 1005b38:	01801e04 	movi	r6,120
 1005b3c:	01c003c4 	movi	r7,15
 1005b40:	10052a40 	call	10052a4 <writeText>

	writeText("Run ended at: ", 40, 160, 15, RED, WHITE);
 1005b44:	00800084 	movi	r2,2
 1005b48:	d8800015 	stw	r2,0(sp)
 1005b4c:	00800044 	movi	r2,1
 1005b50:	d8800115 	stw	r2,4(sp)
 1005b54:	010040b4 	movhi	r4,258
 1005b58:	211c9404 	addi	r4,r4,29264
 1005b5c:	01400a04 	movi	r5,40
 1005b60:	01802804 	movi	r6,160
 1005b64:	01c003c4 	movi	r7,15
 1005b68:	10052a40 	call	10052a4 <writeText>
	writeText(timeendhr, 300, 160, 15, RED, WHITE);
 1005b6c:	e13ff884 	addi	r4,fp,-30
 1005b70:	00800084 	movi	r2,2
 1005b74:	d8800015 	stw	r2,0(sp)
 1005b78:	00800044 	movi	r2,1
 1005b7c:	d8800115 	stw	r2,4(sp)
 1005b80:	01404b04 	movi	r5,300
 1005b84:	01802804 	movi	r6,160
 1005b88:	01c003c4 	movi	r7,15
 1005b8c:	10052a40 	call	10052a4 <writeText>
	writeText(":", 330, 160, 15, RED, WHITE);
 1005b90:	00800084 	movi	r2,2
 1005b94:	d8800015 	stw	r2,0(sp)
 1005b98:	00800044 	movi	r2,1
 1005b9c:	d8800115 	stw	r2,4(sp)
 1005ba0:	010040b4 	movhi	r4,258
 1005ba4:	211c9204 	addi	r4,r4,29256
 1005ba8:	01405284 	movi	r5,330
 1005bac:	01802804 	movi	r6,160
 1005bb0:	01c003c4 	movi	r7,15
 1005bb4:	10052a40 	call	10052a4 <writeText>
	writeText(timeendmin, 350, 160, 15, RED, WHITE);
 1005bb8:	e13ffb04 	addi	r4,fp,-20
 1005bbc:	00800084 	movi	r2,2
 1005bc0:	d8800015 	stw	r2,0(sp)
 1005bc4:	00800044 	movi	r2,1
 1005bc8:	d8800115 	stw	r2,4(sp)
 1005bcc:	01405784 	movi	r5,350
 1005bd0:	01802804 	movi	r6,160
 1005bd4:	01c003c4 	movi	r7,15
 1005bd8:	10052a40 	call	10052a4 <writeText>
	writeText("PST", 400, 160, 15, RED, WHITE);
 1005bdc:	00800084 	movi	r2,2
 1005be0:	d8800015 	stw	r2,0(sp)
 1005be4:	00800044 	movi	r2,1
 1005be8:	d8800115 	stw	r2,4(sp)
 1005bec:	010040b4 	movhi	r4,258
 1005bf0:	211c9304 	addi	r4,r4,29260
 1005bf4:	01406404 	movi	r5,400
 1005bf8:	01802804 	movi	r6,160
 1005bfc:	01c003c4 	movi	r7,15
 1005c00:	10052a40 	call	10052a4 <writeText>

	writeText("Time Elapsed: ", 40, 200, 15, RED, WHITE);
 1005c04:	00800084 	movi	r2,2
 1005c08:	d8800015 	stw	r2,0(sp)
 1005c0c:	00800044 	movi	r2,1
 1005c10:	d8800115 	stw	r2,4(sp)
 1005c14:	010040b4 	movhi	r4,258
 1005c18:	211c9804 	addi	r4,r4,29280
 1005c1c:	01400a04 	movi	r5,40
 1005c20:	01803204 	movi	r6,200
 1005c24:	01c003c4 	movi	r7,15
 1005c28:	10052a40 	call	10052a4 <writeText>
	writeText(timeElapsed, 300, 200, 15, RED, WHITE);
 1005c2c:	e13ffd84 	addi	r4,fp,-10
 1005c30:	00800084 	movi	r2,2
 1005c34:	d8800015 	stw	r2,0(sp)
 1005c38:	00800044 	movi	r2,1
 1005c3c:	d8800115 	stw	r2,4(sp)
 1005c40:	01404b04 	movi	r5,300
 1005c44:	01803204 	movi	r6,200
 1005c48:	01c003c4 	movi	r7,15
 1005c4c:	10052a40 	call	10052a4 <writeText>
	writeText("minutes", 400, 200, 15, RED, WHITE);
 1005c50:	00800084 	movi	r2,2
 1005c54:	d8800015 	stw	r2,0(sp)
 1005c58:	00800044 	movi	r2,1
 1005c5c:	d8800115 	stw	r2,4(sp)
 1005c60:	010040b4 	movhi	r4,258
 1005c64:	211c9c04 	addi	r4,r4,29296
 1005c68:	01406404 	movi	r5,400
 1005c6c:	01803204 	movi	r6,200
 1005c70:	01c003c4 	movi	r7,15
 1005c74:	10052a40 	call	10052a4 <writeText>

	writeText("Total Distance: ", 40, 240, 15, RED, WHITE);
 1005c78:	00800084 	movi	r2,2
 1005c7c:	d8800015 	stw	r2,0(sp)
 1005c80:	00800044 	movi	r2,1
 1005c84:	d8800115 	stw	r2,4(sp)
 1005c88:	010040b4 	movhi	r4,258
 1005c8c:	211c9e04 	addi	r4,r4,29304
 1005c90:	01400a04 	movi	r5,40
 1005c94:	01803c04 	movi	r6,240
 1005c98:	01c003c4 	movi	r7,15
 1005c9c:	10052a40 	call	10052a4 <writeText>
	writeText(totdistance, 300, 240, 15, RED, WHITE);
 1005ca0:	00800084 	movi	r2,2
 1005ca4:	d8800015 	stw	r2,0(sp)
 1005ca8:	00800044 	movi	r2,1
 1005cac:	d8800115 	stw	r2,4(sp)
 1005cb0:	e13fec04 	addi	r4,fp,-80
 1005cb4:	01404b04 	movi	r5,300
 1005cb8:	01803c04 	movi	r6,240
 1005cbc:	01c003c4 	movi	r7,15
 1005cc0:	10052a40 	call	10052a4 <writeText>
	writeText("metres", 400, 240, 15, RED, WHITE);
 1005cc4:	00800084 	movi	r2,2
 1005cc8:	d8800015 	stw	r2,0(sp)
 1005ccc:	00800044 	movi	r2,1
 1005cd0:	d8800115 	stw	r2,4(sp)
 1005cd4:	010040b4 	movhi	r4,258
 1005cd8:	211ca304 	addi	r4,r4,29324
 1005cdc:	01406404 	movi	r5,400
 1005ce0:	01803c04 	movi	r6,240
 1005ce4:	01c003c4 	movi	r7,15
 1005ce8:	10052a40 	call	10052a4 <writeText>

	writeText("Average Speed: ", 40, 280, 15, RED, WHITE);
 1005cec:	00800084 	movi	r2,2
 1005cf0:	d8800015 	stw	r2,0(sp)
 1005cf4:	00800044 	movi	r2,1
 1005cf8:	d8800115 	stw	r2,4(sp)
 1005cfc:	010040b4 	movhi	r4,258
 1005d00:	211ca504 	addi	r4,r4,29332
 1005d04:	01400a04 	movi	r5,40
 1005d08:	01804604 	movi	r6,280
 1005d0c:	01c003c4 	movi	r7,15
 1005d10:	10052a40 	call	10052a4 <writeText>
	writeText(avgspd, 300, 280, 15, RED, WHITE);
 1005d14:	e13fee84 	addi	r4,fp,-70
 1005d18:	00800084 	movi	r2,2
 1005d1c:	d8800015 	stw	r2,0(sp)
 1005d20:	00800044 	movi	r2,1
 1005d24:	d8800115 	stw	r2,4(sp)
 1005d28:	01404b04 	movi	r5,300
 1005d2c:	01804604 	movi	r6,280
 1005d30:	01c003c4 	movi	r7,15
 1005d34:	10052a40 	call	10052a4 <writeText>
	writeText("metres/second", 400, 280, 15, RED, WHITE);
 1005d38:	00800084 	movi	r2,2
 1005d3c:	d8800015 	stw	r2,0(sp)
 1005d40:	00800044 	movi	r2,1
 1005d44:	d8800115 	stw	r2,4(sp)
 1005d48:	010040b4 	movhi	r4,258
 1005d4c:	211ca904 	addi	r4,r4,29348
 1005d50:	01406404 	movi	r5,400
 1005d54:	01804604 	movi	r6,280
 1005d58:	01c003c4 	movi	r7,15
 1005d5c:	10052a40 	call	10052a4 <writeText>

	writeText("Top Speed: ", 40, 320, 15, RED, WHITE);
 1005d60:	00800084 	movi	r2,2
 1005d64:	d8800015 	stw	r2,0(sp)
 1005d68:	00800044 	movi	r2,1
 1005d6c:	d8800115 	stw	r2,4(sp)
 1005d70:	010040b4 	movhi	r4,258
 1005d74:	211cad04 	addi	r4,r4,29364
 1005d78:	01400a04 	movi	r5,40
 1005d7c:	01805004 	movi	r6,320
 1005d80:	01c003c4 	movi	r7,15
 1005d84:	10052a40 	call	10052a4 <writeText>
	writeText(topspd, 300, 320, 15, RED, WHITE);
 1005d88:	e13ff104 	addi	r4,fp,-60
 1005d8c:	00800084 	movi	r2,2
 1005d90:	d8800015 	stw	r2,0(sp)
 1005d94:	00800044 	movi	r2,1
 1005d98:	d8800115 	stw	r2,4(sp)
 1005d9c:	01404b04 	movi	r5,300
 1005da0:	01805004 	movi	r6,320
 1005da4:	01c003c4 	movi	r7,15
 1005da8:	10052a40 	call	10052a4 <writeText>
	writeText("metres/second", 400, 320, 15, RED, WHITE);
 1005dac:	00800084 	movi	r2,2
 1005db0:	d8800015 	stw	r2,0(sp)
 1005db4:	00800044 	movi	r2,1
 1005db8:	d8800115 	stw	r2,4(sp)
 1005dbc:	010040b4 	movhi	r4,258
 1005dc0:	211ca904 	addi	r4,r4,29348
 1005dc4:	01406404 	movi	r5,400
 1005dc8:	01805004 	movi	r6,320
 1005dcc:	01c003c4 	movi	r7,15
 1005dd0:	10052a40 	call	10052a4 <writeText>

	drawBack();
 1005dd4:	10054c00 	call	10054c0 <drawBack>
	drawHomeButton();
 1005dd8:	10055280 	call	1005528 <drawHomeButton>

}
 1005ddc:	e037883a 	mov	sp,fp
 1005de0:	dfc00117 	ldw	ra,4(sp)
 1005de4:	df000017 	ldw	fp,0(sp)
 1005de8:	dec00204 	addi	sp,sp,8
 1005dec:	f800283a 	ret

01005df0 <calculateDistance>:



void calculateDistance() {
 1005df0:	deffef04 	addi	sp,sp,-68
 1005df4:	dfc01015 	stw	ra,64(sp)
 1005df8:	df000f15 	stw	fp,60(sp)
 1005dfc:	dc400e15 	stw	r17,56(sp)
 1005e00:	dc000d15 	stw	r16,52(sp)
 1005e04:	df000d04 	addi	fp,sp,52
	double distance;
	double speed;
	totaldistance = 0;
 1005e08:	008040f4 	movhi	r2,259
 1005e0c:	10ad6004 	addi	r2,r2,-19072
 1005e10:	10000015 	stw	zero,0(r2)
 1005e14:	10000115 	stw	zero,4(r2)
	topspeed = 0;
 1005e18:	008040f4 	movhi	r2,259
 1005e1c:	10ad6404 	addi	r2,r2,-19056
 1005e20:	10000015 	stw	zero,0(r2)
 1005e24:	10000115 	stw	zero,4(r2)
	avgspeed = 0;
 1005e28:	008040f4 	movhi	r2,259
 1005e2c:	10ad6204 	addi	r2,r2,-19064
 1005e30:	10000015 	stw	zero,0(r2)
 1005e34:	10000115 	stw	zero,4(r2)
	numspeeds = 0;
 1005e38:	008040f4 	movhi	r2,259
 1005e3c:	10ad6604 	addi	r2,r2,-19048
 1005e40:	10000015 	stw	zero,0(r2)
 1005e44:	10000115 	stw	zero,4(r2)
	int i = 1;
 1005e48:	00800044 	movi	r2,1
 1005e4c:	e0bffb15 	stw	r2,-20(fp)
	int j = 0;
 1005e50:	e03ffa15 	stw	zero,-24(fp)
	while (i < logcount) {
 1005e54:	00006e06 	br	1006010 <calculateDistance+0x220>
		double distance = getDistance2(logarray[i - 1].latitude,
				logarray[i - 1].longitude, logarray[i].latitude,
				logarray[i].longitude);
 1005e58:	e0bffb17 	ldw	r2,-20(fp)
 1005e5c:	10bfffc4 	addi	r2,r2,-1
 1005e60:	10804f24 	muli	r2,r2,316
 1005e64:	10c00404 	addi	r3,r2,16
 1005e68:	008040f4 	movhi	r2,259
 1005e6c:	10aef904 	addi	r2,r2,-17436
 1005e70:	1889883a 	add	r4,r3,r2
 1005e74:	e0bffb17 	ldw	r2,-20(fp)
 1005e78:	10bfffc4 	addi	r2,r2,-1
 1005e7c:	10804f24 	muli	r2,r2,316
 1005e80:	10c01d04 	addi	r3,r2,116
 1005e84:	008040f4 	movhi	r2,259
 1005e88:	10aef904 	addi	r2,r2,-17436
 1005e8c:	188b883a 	add	r5,r3,r2
 1005e90:	e0bffb17 	ldw	r2,-20(fp)
 1005e94:	10804f24 	muli	r2,r2,316
 1005e98:	10c00404 	addi	r3,r2,16
 1005e9c:	008040f4 	movhi	r2,259
 1005ea0:	10aef904 	addi	r2,r2,-17436
 1005ea4:	188d883a 	add	r6,r3,r2
 1005ea8:	e0bffb17 	ldw	r2,-20(fp)
 1005eac:	10804f24 	muli	r2,r2,316
 1005eb0:	10c01d04 	addi	r3,r2,116
 1005eb4:	008040f4 	movhi	r2,259
 1005eb8:	10aef904 	addi	r2,r2,-17436
 1005ebc:	188f883a 	add	r7,r3,r2
 1005ec0:	1001fe80 	call	1001fe8 <getDistance2>
 1005ec4:	1009883a 	mov	r4,r2
 1005ec8:	180b883a 	mov	r5,r3
 1005ecc:	e13ff815 	stw	r4,-32(fp)
 1005ed0:	e17ff915 	stw	r5,-28(fp)
		distance = distance * 1000;
 1005ed4:	e13ff817 	ldw	r4,-32(fp)
 1005ed8:	e17ff917 	ldw	r5,-28(fp)
 1005edc:	000d883a 	mov	r6,zero
 1005ee0:	01d023f4 	movhi	r7,16527
 1005ee4:	39d00004 	addi	r7,r7,16384
 1005ee8:	100c1d80 	call	100c1d8 <__muldf3>
 1005eec:	1009883a 	mov	r4,r2
 1005ef0:	180b883a 	mov	r5,r3
 1005ef4:	e13ff815 	stw	r4,-32(fp)
 1005ef8:	e17ff915 	stw	r5,-28(fp)
		speed = distance / 6;
 1005efc:	e13ff817 	ldw	r4,-32(fp)
 1005f00:	e17ff917 	ldw	r5,-28(fp)
 1005f04:	000d883a 	mov	r6,zero
 1005f08:	01d00634 	movhi	r7,16408
 1005f0c:	100c59c0 	call	100c59c <__divdf3>
 1005f10:	1009883a 	mov	r4,r2
 1005f14:	180b883a 	mov	r5,r3
 1005f18:	e13ffc15 	stw	r4,-16(fp)
 1005f1c:	e17ffd15 	stw	r5,-12(fp)
		if (speed > topspeed)
 1005f20:	010040f4 	movhi	r4,259
 1005f24:	212d6404 	addi	r4,r4,-19056
 1005f28:	20800017 	ldw	r2,0(r4)
 1005f2c:	20c00117 	ldw	r3,4(r4)
 1005f30:	e13ffc17 	ldw	r4,-16(fp)
 1005f34:	e17ffd17 	ldw	r5,-12(fp)
 1005f38:	100d883a 	mov	r6,r2
 1005f3c:	180f883a 	mov	r7,r3
 1005f40:	100c87c0 	call	100c87c <__gtdf2>
 1005f44:	10800048 	cmpgei	r2,r2,1
 1005f48:	1000011e 	bne	r2,zero,1005f50 <calculateDistance+0x160>
 1005f4c:	00000606 	br	1005f68 <calculateDistance+0x178>
			topspeed = speed;
 1005f50:	008040f4 	movhi	r2,259
 1005f54:	10ad6404 	addi	r2,r2,-19056
 1005f58:	e0fffc17 	ldw	r3,-16(fp)
 1005f5c:	10c00015 	stw	r3,0(r2)
 1005f60:	e0fffd17 	ldw	r3,-12(fp)
 1005f64:	10c00115 	stw	r3,4(r2)
		printf("distance is %f\n", distance);
 1005f68:	010040b4 	movhi	r4,258
 1005f6c:	211cb004 	addi	r4,r4,29376
 1005f70:	e17ff817 	ldw	r5,-32(fp)
 1005f74:	e1bff917 	ldw	r6,-28(fp)
 1005f78:	100df0c0 	call	100df0c <printf>
		totaldistance = totaldistance + distance;
 1005f7c:	010040f4 	movhi	r4,259
 1005f80:	212d6004 	addi	r4,r4,-19072
 1005f84:	20800017 	ldw	r2,0(r4)
 1005f88:	20c00117 	ldw	r3,4(r4)
 1005f8c:	1009883a 	mov	r4,r2
 1005f90:	180b883a 	mov	r5,r3
 1005f94:	e1bff817 	ldw	r6,-32(fp)
 1005f98:	e1fff917 	ldw	r7,-28(fp)
 1005f9c:	100c1640 	call	100c164 <__adddf3>
 1005fa0:	1009883a 	mov	r4,r2
 1005fa4:	180b883a 	mov	r5,r3
 1005fa8:	2005883a 	mov	r2,r4
 1005fac:	2807883a 	mov	r3,r5
 1005fb0:	010040f4 	movhi	r4,259
 1005fb4:	212d6004 	addi	r4,r4,-19072
 1005fb8:	20800015 	stw	r2,0(r4)
 1005fbc:	20c00115 	stw	r3,4(r4)
		i++;
 1005fc0:	e0bffb17 	ldw	r2,-20(fp)
 1005fc4:	10800044 	addi	r2,r2,1
 1005fc8:	e0bffb15 	stw	r2,-20(fp)
		numspeeds++;
 1005fcc:	010040f4 	movhi	r4,259
 1005fd0:	212d6604 	addi	r4,r4,-19048
 1005fd4:	20800017 	ldw	r2,0(r4)
 1005fd8:	20c00117 	ldw	r3,4(r4)
 1005fdc:	1009883a 	mov	r4,r2
 1005fe0:	180b883a 	mov	r5,r3
 1005fe4:	000d883a 	mov	r6,zero
 1005fe8:	01cffc34 	movhi	r7,16368
 1005fec:	100c1640 	call	100c164 <__adddf3>
 1005ff0:	1009883a 	mov	r4,r2
 1005ff4:	180b883a 	mov	r5,r3
 1005ff8:	2005883a 	mov	r2,r4
 1005ffc:	2807883a 	mov	r3,r5
 1006000:	010040f4 	movhi	r4,259
 1006004:	212d6604 	addi	r4,r4,-19048
 1006008:	20800015 	stw	r2,0(r4)
 100600c:	20c00115 	stw	r3,4(r4)
	topspeed = 0;
	avgspeed = 0;
	numspeeds = 0;
	int i = 1;
	int j = 0;
	while (i < logcount) {
 1006010:	008040f4 	movhi	r2,259
 1006014:	10ad7004 	addi	r2,r2,-19008
 1006018:	10c00017 	ldw	r3,0(r2)
 100601c:	e0bffb17 	ldw	r2,-20(fp)
 1006020:	10ff8d16 	blt	r2,r3,1005e58 <calculateDistance+0x68>
		printf("distance is %f\n", distance);
		totaldistance = totaldistance + distance;
		i++;
		numspeeds++;
	}
	timeran = (numspeeds * 6) / 60;
 1006024:	010040f4 	movhi	r4,259
 1006028:	212d6604 	addi	r4,r4,-19048
 100602c:	20800017 	ldw	r2,0(r4)
 1006030:	20c00117 	ldw	r3,4(r4)
 1006034:	1009883a 	mov	r4,r2
 1006038:	180b883a 	mov	r5,r3
 100603c:	000d883a 	mov	r6,zero
 1006040:	01d00634 	movhi	r7,16408
 1006044:	100c1d80 	call	100c1d8 <__muldf3>
 1006048:	1009883a 	mov	r4,r2
 100604c:	180b883a 	mov	r5,r3
 1006050:	2005883a 	mov	r2,r4
 1006054:	2807883a 	mov	r3,r5
 1006058:	1009883a 	mov	r4,r2
 100605c:	180b883a 	mov	r5,r3
 1006060:	000d883a 	mov	r6,zero
 1006064:	01d013b4 	movhi	r7,16462
 1006068:	100c59c0 	call	100c59c <__divdf3>
 100606c:	1009883a 	mov	r4,r2
 1006070:	180b883a 	mov	r5,r3
 1006074:	2005883a 	mov	r2,r4
 1006078:	2807883a 	mov	r3,r5
 100607c:	010040f4 	movhi	r4,259
 1006080:	212d6804 	addi	r4,r4,-19040
 1006084:	20800015 	stw	r2,0(r4)
 1006088:	20c00115 	stw	r3,4(r4)
	avgspeed = totaldistance / (numspeeds * 6);
 100608c:	008040f4 	movhi	r2,259
 1006090:	10ad6004 	addi	r2,r2,-19072
 1006094:	14000017 	ldw	r16,0(r2)
 1006098:	14400117 	ldw	r17,4(r2)
 100609c:	010040f4 	movhi	r4,259
 10060a0:	212d6604 	addi	r4,r4,-19048
 10060a4:	20800017 	ldw	r2,0(r4)
 10060a8:	20c00117 	ldw	r3,4(r4)
 10060ac:	1009883a 	mov	r4,r2
 10060b0:	180b883a 	mov	r5,r3
 10060b4:	000d883a 	mov	r6,zero
 10060b8:	01d00634 	movhi	r7,16408
 10060bc:	100c1d80 	call	100c1d8 <__muldf3>
 10060c0:	1009883a 	mov	r4,r2
 10060c4:	180b883a 	mov	r5,r3
 10060c8:	2005883a 	mov	r2,r4
 10060cc:	2807883a 	mov	r3,r5
 10060d0:	8009883a 	mov	r4,r16
 10060d4:	880b883a 	mov	r5,r17
 10060d8:	100d883a 	mov	r6,r2
 10060dc:	180f883a 	mov	r7,r3
 10060e0:	100c59c0 	call	100c59c <__divdf3>
 10060e4:	1009883a 	mov	r4,r2
 10060e8:	180b883a 	mov	r5,r3
 10060ec:	2005883a 	mov	r2,r4
 10060f0:	2807883a 	mov	r3,r5
 10060f4:	010040f4 	movhi	r4,259
 10060f8:	212d6204 	addi	r4,r4,-19064
 10060fc:	20800015 	stw	r2,0(r4)
 1006100:	20c00115 	stw	r3,4(r4)

	printf(
 1006104:	008040f4 	movhi	r2,259
 1006108:	10ad6004 	addi	r2,r2,-19072
 100610c:	12000017 	ldw	r8,0(r2)
 1006110:	12400117 	ldw	r9,4(r2)
 1006114:	008040f4 	movhi	r2,259
 1006118:	10ad6204 	addi	r2,r2,-19064
 100611c:	11800017 	ldw	r6,0(r2)
 1006120:	11c00117 	ldw	r7,4(r2)
 1006124:	008040f4 	movhi	r2,259
 1006128:	10ad6404 	addi	r2,r2,-19056
 100612c:	11000017 	ldw	r4,0(r2)
 1006130:	11400117 	ldw	r5,4(r2)
 1006134:	028040f4 	movhi	r10,259
 1006138:	52ad6804 	addi	r10,r10,-19040
 100613c:	50800017 	ldw	r2,0(r10)
 1006140:	50c00117 	ldw	r3,4(r10)
 1006144:	d9000115 	stw	r4,4(sp)
 1006148:	d9400215 	stw	r5,8(sp)
 100614c:	d8800315 	stw	r2,12(sp)
 1006150:	d8c00415 	stw	r3,16(sp)
 1006154:	d9c00015 	stw	r7,0(sp)
 1006158:	300f883a 	mov	r7,r6
 100615c:	010040b4 	movhi	r4,258
 1006160:	211cb404 	addi	r4,r4,29392
 1006164:	400b883a 	mov	r5,r8
 1006168:	480d883a 	mov	r6,r9
 100616c:	100df0c0 	call	100df0c <printf>
			"total distance is %f, average speed was %f, and top speed was %f, time spent running %f.",
			totaldistance, avgspeed, topspeed, timeran);
}
 1006170:	e037883a 	mov	sp,fp
 1006174:	dfc00317 	ldw	ra,12(sp)
 1006178:	df000217 	ldw	fp,8(sp)
 100617c:	dc400117 	ldw	r17,4(sp)
 1006180:	dc000017 	ldw	r16,0(sp)
 1006184:	dec00404 	addi	sp,sp,16
 1006188:	f800283a 	ret

0100618c <findTimes>:

void findTimes() {
 100618c:	defffb04 	addi	sp,sp,-20
 1006190:	dfc00415 	stw	ra,16(sp)
 1006194:	df000315 	stw	fp,12(sp)
 1006198:	df000304 	addi	fp,sp,12
	struct tm * starttime;
	int time2 = swapEndian(logarray[0].time);
 100619c:	010040f4 	movhi	r4,259
 10061a0:	212f2f04 	addi	r4,r4,-17220
 10061a4:	10035e00 	call	10035e0 <swapEndian>
 10061a8:	e0bfff15 	stw	r2,-4(fp)
	starttime = gmtime(&time2);
 10061ac:	e13fff04 	addi	r4,fp,-4
 10061b0:	100d7340 	call	100d734 <gmtime>
 10061b4:	e0bffe15 	stw	r2,-8(fp)
	starttime->tm_hour = (starttime->tm_hour - 7) % 24;
 10061b8:	e0bffe17 	ldw	r2,-8(fp)
 10061bc:	10800217 	ldw	r2,8(r2)
 10061c0:	10fffe44 	addi	r3,r2,-7
 10061c4:	00800604 	movi	r2,24
 10061c8:	1885283a 	div	r2,r3,r2
 10061cc:	10800624 	muli	r2,r2,24
 10061d0:	1887c83a 	sub	r3,r3,r2
 10061d4:	e0bffe17 	ldw	r2,-8(fp)
 10061d8:	10c00215 	stw	r3,8(r2)
	if ((starttime->tm_hour) < 0) {
 10061dc:	e0bffe17 	ldw	r2,-8(fp)
 10061e0:	10800217 	ldw	r2,8(r2)
 10061e4:	1004403a 	cmpge	r2,r2,zero
 10061e8:	1000051e 	bne	r2,zero,1006200 <findTimes+0x74>
		starttime->tm_hour = 24 + starttime->tm_hour;
 10061ec:	e0bffe17 	ldw	r2,-8(fp)
 10061f0:	10800217 	ldw	r2,8(r2)
 10061f4:	10c00604 	addi	r3,r2,24
 10061f8:	e0bffe17 	ldw	r2,-8(fp)
 10061fc:	10c00215 	stw	r3,8(r2)
	}
	starthour = starttime->tm_hour;
 1006200:	e0bffe17 	ldw	r2,-8(fp)
 1006204:	10c00217 	ldw	r3,8(r2)
 1006208:	008040f4 	movhi	r2,259
 100620c:	10ad6f04 	addi	r2,r2,-19012
 1006210:	10c00015 	stw	r3,0(r2)
	startmin = starttime->tm_min;
 1006214:	e0bffe17 	ldw	r2,-8(fp)
 1006218:	10c00117 	ldw	r3,4(r2)
 100621c:	008040f4 	movhi	r2,259
 1006220:	10ad7104 	addi	r2,r2,-19004
 1006224:	10c00015 	stw	r3,0(r2)
	printf("\nstart time is :  %2d:%02d\n", (starttime->tm_hour),
 1006228:	e0bffe17 	ldw	r2,-8(fp)
 100622c:	11400217 	ldw	r5,8(r2)
 1006230:	e0bffe17 	ldw	r2,-8(fp)
 1006234:	11800117 	ldw	r6,4(r2)
 1006238:	010040b4 	movhi	r4,258
 100623c:	211ccb04 	addi	r4,r4,29484
 1006240:	100df0c0 	call	100df0c <printf>
			starttime->tm_min);

	struct tm * endtime;
	time2 = swapEndian(logarray[logcount - 1].time);
 1006244:	008040f4 	movhi	r2,259
 1006248:	10ad7004 	addi	r2,r2,-19008
 100624c:	10800017 	ldw	r2,0(r2)
 1006250:	10bfffc4 	addi	r2,r2,-1
 1006254:	10804f24 	muli	r2,r2,316
 1006258:	10c03604 	addi	r3,r2,216
 100625c:	008040f4 	movhi	r2,259
 1006260:	10aef904 	addi	r2,r2,-17436
 1006264:	1889883a 	add	r4,r3,r2
 1006268:	10035e00 	call	10035e0 <swapEndian>
 100626c:	e0bfff15 	stw	r2,-4(fp)
	endtime = gmtime(&time2);
 1006270:	e13fff04 	addi	r4,fp,-4
 1006274:	100d7340 	call	100d734 <gmtime>
 1006278:	e0bffd15 	stw	r2,-12(fp)
	endtime->tm_hour = (endtime->tm_hour - 7) % 24;
 100627c:	e0bffd17 	ldw	r2,-12(fp)
 1006280:	10800217 	ldw	r2,8(r2)
 1006284:	10fffe44 	addi	r3,r2,-7
 1006288:	00800604 	movi	r2,24
 100628c:	1885283a 	div	r2,r3,r2
 1006290:	10800624 	muli	r2,r2,24
 1006294:	1887c83a 	sub	r3,r3,r2
 1006298:	e0bffd17 	ldw	r2,-12(fp)
 100629c:	10c00215 	stw	r3,8(r2)
	if ((endtime->tm_hour) < 0) {
 10062a0:	e0bffd17 	ldw	r2,-12(fp)
 10062a4:	10800217 	ldw	r2,8(r2)
 10062a8:	1004403a 	cmpge	r2,r2,zero
 10062ac:	1000051e 	bne	r2,zero,10062c4 <findTimes+0x138>
		endtime->tm_hour = 24 + endtime->tm_hour;
 10062b0:	e0bffd17 	ldw	r2,-12(fp)
 10062b4:	10800217 	ldw	r2,8(r2)
 10062b8:	10c00604 	addi	r3,r2,24
 10062bc:	e0bffd17 	ldw	r2,-12(fp)
 10062c0:	10c00215 	stw	r3,8(r2)
	}
	endhour = endtime->tm_hour;
 10062c4:	e0bffd17 	ldw	r2,-12(fp)
 10062c8:	10c00217 	ldw	r3,8(r2)
 10062cc:	008040f4 	movhi	r2,259
 10062d0:	10ad6d04 	addi	r2,r2,-19020
 10062d4:	10c00015 	stw	r3,0(r2)
	endmin = endtime->tm_min;
 10062d8:	e0bffd17 	ldw	r2,-12(fp)
 10062dc:	10c00117 	ldw	r3,4(r2)
 10062e0:	008040f4 	movhi	r2,259
 10062e4:	10ad6a04 	addi	r2,r2,-19032
 10062e8:	10c00015 	stw	r3,0(r2)
	printf("end time is :  %2d:%02d\n", endtime->tm_hour, endtime->tm_min);
 10062ec:	e0bffd17 	ldw	r2,-12(fp)
 10062f0:	11400217 	ldw	r5,8(r2)
 10062f4:	e0bffd17 	ldw	r2,-12(fp)
 10062f8:	11800117 	ldw	r6,4(r2)
 10062fc:	010040b4 	movhi	r4,258
 1006300:	211cd204 	addi	r4,r4,29512
 1006304:	100df0c0 	call	100df0c <printf>
}
 1006308:	e037883a 	mov	sp,fp
 100630c:	dfc00117 	ldw	ra,4(sp)
 1006310:	df000017 	ldw	fp,0(sp)
 1006314:	dec00204 	addi	sp,sp,8
 1006318:	f800283a 	ret

0100631c <printCoords>:

void printCoords() {
 100631c:	defffc04 	addi	sp,sp,-16
 1006320:	dfc00315 	stw	ra,12(sp)
 1006324:	df000215 	stw	fp,8(sp)
 1006328:	df000204 	addi	fp,sp,8
	int i = 0;
 100632c:	e03fff15 	stw	zero,-4(fp)
	int j = 0;
 1006330:	e03ffe15 	stw	zero,-8(fp)
	while (i < logcount) {
 1006334:	00004d06 	br	100646c <printCoords+0x150>
		j = 0;
 1006338:	e03ffe15 	stw	zero,-8(fp)
		printf("lat %i is ", i);
 100633c:	010040b4 	movhi	r4,258
 1006340:	211cd904 	addi	r4,r4,29540
 1006344:	e17fff17 	ldw	r5,-4(fp)
 1006348:	100df0c0 	call	100df0c <printf>
		while (logarray[i].latitude[j] != NULL) {
 100634c:	00001006 	br	1006390 <printCoords+0x74>
			printf("%c", logarray[i].latitude[j]);
 1006350:	e0bfff17 	ldw	r2,-4(fp)
 1006354:	e13ffe17 	ldw	r4,-8(fp)
 1006358:	00c040f4 	movhi	r3,259
 100635c:	18eef904 	addi	r3,r3,-17436
 1006360:	10804f24 	muli	r2,r2,316
 1006364:	10c5883a 	add	r2,r2,r3
 1006368:	1105883a 	add	r2,r2,r4
 100636c:	10800404 	addi	r2,r2,16
 1006370:	10800003 	ldbu	r2,0(r2)
 1006374:	11003fcc 	andi	r4,r2,255
 1006378:	2100201c 	xori	r4,r4,128
 100637c:	213fe004 	addi	r4,r4,-128
 1006380:	100df840 	call	100df84 <putchar>
			j++;
 1006384:	e0bffe17 	ldw	r2,-8(fp)
 1006388:	10800044 	addi	r2,r2,1
 100638c:	e0bffe15 	stw	r2,-8(fp)
	int i = 0;
	int j = 0;
	while (i < logcount) {
		j = 0;
		printf("lat %i is ", i);
		while (logarray[i].latitude[j] != NULL) {
 1006390:	e0bfff17 	ldw	r2,-4(fp)
 1006394:	e13ffe17 	ldw	r4,-8(fp)
 1006398:	00c040f4 	movhi	r3,259
 100639c:	18eef904 	addi	r3,r3,-17436
 10063a0:	10804f24 	muli	r2,r2,316
 10063a4:	10c5883a 	add	r2,r2,r3
 10063a8:	1105883a 	add	r2,r2,r4
 10063ac:	10800404 	addi	r2,r2,16
 10063b0:	10800003 	ldbu	r2,0(r2)
 10063b4:	10803fcc 	andi	r2,r2,255
 10063b8:	1080201c 	xori	r2,r2,128
 10063bc:	10bfe004 	addi	r2,r2,-128
 10063c0:	1004c03a 	cmpne	r2,r2,zero
 10063c4:	103fe21e 	bne	r2,zero,1006350 <printCoords+0x34>
			printf("%c", logarray[i].latitude[j]);
			j++;
		}
		printf(" long %i is ", i);
 10063c8:	010040b4 	movhi	r4,258
 10063cc:	211cdc04 	addi	r4,r4,29552
 10063d0:	e17fff17 	ldw	r5,-4(fp)
 10063d4:	100df0c0 	call	100df0c <printf>
		j = 0;
 10063d8:	e03ffe15 	stw	zero,-8(fp)
		while (logarray[i].longitude[j] != NULL) {
 10063dc:	00001006 	br	1006420 <printCoords+0x104>
			printf("%c", logarray[i].longitude[j]);
 10063e0:	e0bfff17 	ldw	r2,-4(fp)
 10063e4:	e13ffe17 	ldw	r4,-8(fp)
 10063e8:	00c040f4 	movhi	r3,259
 10063ec:	18eef904 	addi	r3,r3,-17436
 10063f0:	10804f24 	muli	r2,r2,316
 10063f4:	10c5883a 	add	r2,r2,r3
 10063f8:	1105883a 	add	r2,r2,r4
 10063fc:	10801d04 	addi	r2,r2,116
 1006400:	10800003 	ldbu	r2,0(r2)
 1006404:	11003fcc 	andi	r4,r2,255
 1006408:	2100201c 	xori	r4,r4,128
 100640c:	213fe004 	addi	r4,r4,-128
 1006410:	100df840 	call	100df84 <putchar>
			j++;
 1006414:	e0bffe17 	ldw	r2,-8(fp)
 1006418:	10800044 	addi	r2,r2,1
 100641c:	e0bffe15 	stw	r2,-8(fp)
			printf("%c", logarray[i].latitude[j]);
			j++;
		}
		printf(" long %i is ", i);
		j = 0;
		while (logarray[i].longitude[j] != NULL) {
 1006420:	e0bfff17 	ldw	r2,-4(fp)
 1006424:	e13ffe17 	ldw	r4,-8(fp)
 1006428:	00c040f4 	movhi	r3,259
 100642c:	18eef904 	addi	r3,r3,-17436
 1006430:	10804f24 	muli	r2,r2,316
 1006434:	10c5883a 	add	r2,r2,r3
 1006438:	1105883a 	add	r2,r2,r4
 100643c:	10801d04 	addi	r2,r2,116
 1006440:	10800003 	ldbu	r2,0(r2)
 1006444:	10803fcc 	andi	r2,r2,255
 1006448:	1080201c 	xori	r2,r2,128
 100644c:	10bfe004 	addi	r2,r2,-128
 1006450:	1004c03a 	cmpne	r2,r2,zero
 1006454:	103fe21e 	bne	r2,zero,10063e0 <printCoords+0xc4>
			printf("%c", logarray[i].longitude[j]);
			j++;
		}
		printf("\n");
 1006458:	01000284 	movi	r4,10
 100645c:	100df840 	call	100df84 <putchar>
		i++;
 1006460:	e0bfff17 	ldw	r2,-4(fp)
 1006464:	10800044 	addi	r2,r2,1
 1006468:	e0bfff15 	stw	r2,-4(fp)
}

void printCoords() {
	int i = 0;
	int j = 0;
	while (i < logcount) {
 100646c:	008040f4 	movhi	r2,259
 1006470:	10ad7004 	addi	r2,r2,-19008
 1006474:	10c00017 	ldw	r3,0(r2)
 1006478:	e0bfff17 	ldw	r2,-4(fp)
 100647c:	10ffae16 	blt	r2,r3,1006338 <printCoords+0x1c>
		}
		printf("\n");
		i++;
	}

}
 1006480:	e037883a 	mov	sp,fp
 1006484:	dfc00117 	ldw	ra,4(sp)
 1006488:	df000017 	ldw	fp,0(sp)
 100648c:	dec00204 	addi	sp,sp,8
 1006490:	f800283a 	ret

01006494 <sendCoords>:





void sendCoords() {
 1006494:	deffdc04 	addi	sp,sp,-144
 1006498:	dfc02315 	stw	ra,140(sp)
 100649c:	df002215 	stw	fp,136(sp)
 10064a0:	dc002115 	stw	r16,132(sp)
 10064a4:	df002104 	addi	fp,sp,132
	int i = 0;
 10064a8:	e03fe315 	stw	zero,-116(fp)
	int j = 0;
 10064ac:	e03fe215 	stw	zero,-120(fp)
	int k = 0;
 10064b0:	e03fe115 	stw	zero,-124(fp)

	int i2;
	int s2;
	char readStr[100];
	char totaldist[10];
	sprintf(totaldist, "%.2f", totaldistance);
 10064b4:	010040f4 	movhi	r4,259
 10064b8:	212d6004 	addi	r4,r4,-19072
 10064bc:	20800017 	ldw	r2,0(r4)
 10064c0:	20c00117 	ldw	r3,4(r4)
 10064c4:	e13ffd04 	addi	r4,fp,-12
 10064c8:	014040b4 	movhi	r5,258
 10064cc:	295c8a04 	addi	r5,r5,29224
 10064d0:	100d883a 	mov	r6,r2
 10064d4:	180f883a 	mov	r7,r3
 10064d8:	100e05c0 	call	100e05c <sprintf>
	//char cat[1] = "\r";
	//totaldist = strcat(totaldist, cat);
	totaldist[9] = '\r';
 10064dc:	00800344 	movi	r2,13
 10064e0:	e0bfff45 	stb	r2,-3(fp)

	while (1) { //while there is data to read

		// Read from device
		if (BTTestForReceivedData() == 1) {
 10064e4:	10044d00 	call	10044d0 <BTTestForReceivedData>
 10064e8:	10800058 	cmpnei	r2,r2,1
 10064ec:	1000191e 	bne	r2,zero,1006554 <sendCoords+0xc0>
			for (s2 = 0; readStr[s2] != '\0'; s2++) {
 10064f0:	e03fdf15 	stw	zero,-132(fp)
 10064f4:	00000906 	br	100651c <sendCoords+0x88>
				readStr[s2] = getcharBT();
 10064f8:	e43fdf17 	ldw	r16,-132(fp)
 10064fc:	10044880 	call	1004488 <getcharBT>
 1006500:	1007883a 	mov	r3,r2
 1006504:	e0bfe404 	addi	r2,fp,-112
 1006508:	1405883a 	add	r2,r2,r16
 100650c:	10c00005 	stb	r3,0(r2)

	while (1) { //while there is data to read

		// Read from device
		if (BTTestForReceivedData() == 1) {
			for (s2 = 0; readStr[s2] != '\0'; s2++) {
 1006510:	e0bfdf17 	ldw	r2,-132(fp)
 1006514:	10800044 	addi	r2,r2,1
 1006518:	e0bfdf15 	stw	r2,-132(fp)
 100651c:	e0ffdf17 	ldw	r3,-132(fp)
 1006520:	e0bfe404 	addi	r2,fp,-112
 1006524:	10c5883a 	add	r2,r2,r3
 1006528:	10800003 	ldbu	r2,0(r2)
 100652c:	10803fcc 	andi	r2,r2,255
 1006530:	1080201c 	xori	r2,r2,128
 1006534:	10bfe004 	addi	r2,r2,-128
 1006538:	1004c03a 	cmpne	r2,r2,zero
 100653c:	103fee1e 	bne	r2,zero,10064f8 <sendCoords+0x64>
				readStr[s2] = getcharBT();
				//wait_1ms2();
			}
			wait_1ms2();
 1006540:	10012cc0 	call	10012cc <wait_1ms2>
			printf("String Received: %s\n", readStr);
 1006544:	e17fe404 	addi	r5,fp,-112
 1006548:	010040b4 	movhi	r4,258
 100654c:	211ce004 	addi	r4,r4,29568
 1006550:	100df0c0 	call	100df0c <printf>
		}
		if (strcmp(readStr, "G\0") == 0)
 1006554:	e13fe404 	addi	r4,fp,-112
 1006558:	014040b4 	movhi	r5,258
 100655c:	295ce604 	addi	r5,r5,29592
 1006560:	100e1c00 	call	100e1c0 <strcmp>
 1006564:	1005003a 	cmpeq	r2,r2,zero
 1006568:	1000081e 	bne	r2,zero,100658c <sendCoords+0xf8>
			break;
		if(k == 20000000)
 100656c:	e0ffe117 	ldw	r3,-124(fp)
 1006570:	00804c74 	movhi	r2,305
 1006574:	108b4004 	addi	r2,r2,11520
 1006578:	18800426 	beq	r3,r2,100658c <sendCoords+0xf8>
			break;
		k++;
 100657c:	e0bfe117 	ldw	r2,-124(fp)
 1006580:	10800044 	addi	r2,r2,1
 1006584:	e0bfe115 	stw	r2,-124(fp)
	}
 1006588:	003fd606 	br	10064e4 <sendCoords+0x50>
	printf("test");
 100658c:	010040b4 	movhi	r4,258
 1006590:	211ce704 	addi	r4,r4,29596
 1006594:	100df0c0 	call	100df0c <printf>

	writetoBT("STARTLAT\r");
 1006598:	010040b4 	movhi	r4,258
 100659c:	211ce904 	addi	r4,r4,29604
 10065a0:	1004c540 	call	1004c54 <writetoBT>
	for (i = 0; i < logcount - 1; i++) {
 10065a4:	e03fe315 	stw	zero,-116(fp)
 10065a8:	00000a06 	br	10065d4 <sendCoords+0x140>
		//for(j=0; logarray[i].latitude[j]; j++)
		writetoBT(logarray[i].latitude);
 10065ac:	e0bfe317 	ldw	r2,-116(fp)
 10065b0:	10804f24 	muli	r2,r2,316
 10065b4:	10c00404 	addi	r3,r2,16
 10065b8:	008040f4 	movhi	r2,259
 10065bc:	10aef904 	addi	r2,r2,-17436
 10065c0:	1889883a 	add	r4,r3,r2
 10065c4:	1004c540 	call	1004c54 <writetoBT>
		k++;
	}
	printf("test");

	writetoBT("STARTLAT\r");
	for (i = 0; i < logcount - 1; i++) {
 10065c8:	e0bfe317 	ldw	r2,-116(fp)
 10065cc:	10800044 	addi	r2,r2,1
 10065d0:	e0bfe315 	stw	r2,-116(fp)
 10065d4:	008040f4 	movhi	r2,259
 10065d8:	10ad7004 	addi	r2,r2,-19008
 10065dc:	10800017 	ldw	r2,0(r2)
 10065e0:	10ffffc4 	addi	r3,r2,-1
 10065e4:	e0bfe317 	ldw	r2,-116(fp)
 10065e8:	10fff016 	blt	r2,r3,10065ac <sendCoords+0x118>
		//for(j=0; logarray[i].latitude[j]; j++)
		writetoBT(logarray[i].latitude);
	}
	writetoBT("STOPLAT\r");
 10065ec:	010040b4 	movhi	r4,258
 10065f0:	211cec04 	addi	r4,r4,29616
 10065f4:	1004c540 	call	1004c54 <writetoBT>
	k=0;
 10065f8:	e03fe115 	stw	zero,-124(fp)
	while (1) { //while there is data to read

		// Read from device
		if (BTTestForReceivedData() == 1) {
 10065fc:	10044d00 	call	10044d0 <BTTestForReceivedData>
 1006600:	10800058 	cmpnei	r2,r2,1
 1006604:	1000191e 	bne	r2,zero,100666c <sendCoords+0x1d8>
			for (s2 = 0; readStr[s2] != '\0'; s2++) {
 1006608:	e03fdf15 	stw	zero,-132(fp)
 100660c:	00000906 	br	1006634 <sendCoords+0x1a0>
				readStr[s2] = getcharBT();
 1006610:	e43fdf17 	ldw	r16,-132(fp)
 1006614:	10044880 	call	1004488 <getcharBT>
 1006618:	1007883a 	mov	r3,r2
 100661c:	e0bfe404 	addi	r2,fp,-112
 1006620:	1405883a 	add	r2,r2,r16
 1006624:	10c00005 	stb	r3,0(r2)
	k=0;
	while (1) { //while there is data to read

		// Read from device
		if (BTTestForReceivedData() == 1) {
			for (s2 = 0; readStr[s2] != '\0'; s2++) {
 1006628:	e0bfdf17 	ldw	r2,-132(fp)
 100662c:	10800044 	addi	r2,r2,1
 1006630:	e0bfdf15 	stw	r2,-132(fp)
 1006634:	e0ffdf17 	ldw	r3,-132(fp)
 1006638:	e0bfe404 	addi	r2,fp,-112
 100663c:	10c5883a 	add	r2,r2,r3
 1006640:	10800003 	ldbu	r2,0(r2)
 1006644:	10803fcc 	andi	r2,r2,255
 1006648:	1080201c 	xori	r2,r2,128
 100664c:	10bfe004 	addi	r2,r2,-128
 1006650:	1004c03a 	cmpne	r2,r2,zero
 1006654:	103fee1e 	bne	r2,zero,1006610 <sendCoords+0x17c>
				readStr[s2] = getcharBT();
				//wait_1ms2();
			}
			wait_1ms2();
 1006658:	10012cc0 	call	10012cc <wait_1ms2>
			printf("String Received: %s\n", readStr);
 100665c:	e17fe404 	addi	r5,fp,-112
 1006660:	010040b4 	movhi	r4,258
 1006664:	211ce004 	addi	r4,r4,29568
 1006668:	100df0c0 	call	100df0c <printf>
		}
		if (strcmp(readStr, "H\0") == 0)
 100666c:	e13fe404 	addi	r4,fp,-112
 1006670:	014040b4 	movhi	r5,258
 1006674:	295cef04 	addi	r5,r5,29628
 1006678:	100e1c00 	call	100e1c0 <strcmp>
 100667c:	1005003a 	cmpeq	r2,r2,zero
 1006680:	1000081e 	bne	r2,zero,10066a4 <sendCoords+0x210>
			break;
		if(k == 20000000)
 1006684:	e0ffe117 	ldw	r3,-124(fp)
 1006688:	00804c74 	movhi	r2,305
 100668c:	108b4004 	addi	r2,r2,11520
 1006690:	18800426 	beq	r3,r2,10066a4 <sendCoords+0x210>
			break;
		k++;
 1006694:	e0bfe117 	ldw	r2,-124(fp)
 1006698:	10800044 	addi	r2,r2,1
 100669c:	e0bfe115 	stw	r2,-124(fp)
	}
 10066a0:	003fd606 	br	10065fc <sendCoords+0x168>

	writetoBT("STARTLONG\r");
 10066a4:	010040b4 	movhi	r4,258
 10066a8:	211cf004 	addi	r4,r4,29632
 10066ac:	1004c540 	call	1004c54 <writetoBT>
	for (i = 0; i < logcount - 1; i++) {
 10066b0:	e03fe315 	stw	zero,-116(fp)
 10066b4:	00000a06 	br	10066e0 <sendCoords+0x24c>
		//for(j=0; logarray[i].latitude[j]; j++)
		writetoBT(logarray[i].longitude);
 10066b8:	e0bfe317 	ldw	r2,-116(fp)
 10066bc:	10804f24 	muli	r2,r2,316
 10066c0:	10c01d04 	addi	r3,r2,116
 10066c4:	008040f4 	movhi	r2,259
 10066c8:	10aef904 	addi	r2,r2,-17436
 10066cc:	1889883a 	add	r4,r3,r2
 10066d0:	1004c540 	call	1004c54 <writetoBT>
			break;
		k++;
	}

	writetoBT("STARTLONG\r");
	for (i = 0; i < logcount - 1; i++) {
 10066d4:	e0bfe317 	ldw	r2,-116(fp)
 10066d8:	10800044 	addi	r2,r2,1
 10066dc:	e0bfe315 	stw	r2,-116(fp)
 10066e0:	008040f4 	movhi	r2,259
 10066e4:	10ad7004 	addi	r2,r2,-19008
 10066e8:	10800017 	ldw	r2,0(r2)
 10066ec:	10ffffc4 	addi	r3,r2,-1
 10066f0:	e0bfe317 	ldw	r2,-116(fp)
 10066f4:	10fff016 	blt	r2,r3,10066b8 <sendCoords+0x224>
		//for(j=0; logarray[i].latitude[j]; j++)
		writetoBT(logarray[i].longitude);
	}
	writetoBT("STOPLONG\r");
 10066f8:	010040b4 	movhi	r4,258
 10066fc:	211cf304 	addi	r4,r4,29644
 1006700:	1004c540 	call	1004c54 <writetoBT>
			break;
		k++;
	}
	writetoBT("STARTDIST\r");
	writetoBT(totaldist);*/
}
 1006704:	e037883a 	mov	sp,fp
 1006708:	dfc00217 	ldw	ra,8(sp)
 100670c:	df000117 	ldw	fp,4(sp)
 1006710:	dc000017 	ldw	r16,0(sp)
 1006714:	dec00304 	addi	sp,sp,12
 1006718:	f800283a 	ret

0100671c <drawProfile>:

void drawProfile(profile *p) {
 100671c:	deffed04 	addi	sp,sp,-76
 1006720:	dfc01215 	stw	ra,72(sp)
 1006724:	df001115 	stw	fp,68(sp)
 1006728:	df001104 	addi	fp,sp,68
 100672c:	e13fff15 	stw	r4,-4(fp)
	clearScreen();
 1006730:	10051f00 	call	10051f0 <clearScreen>

	int colour_t = BLACK; //colour of text
 1006734:	e03ff915 	stw	zero,-28(fp)
	int colour_b = CYAN; //colour of backgrounds(both text background and block background
 1006738:	00800184 	movi	r2,6
 100673c:	e0bff815 	stw	r2,-32(fp)
	int base_x = 40; //base x coord for all blocks
 1006740:	00800a04 	movi	r2,40
 1006744:	e0bff715 	stw	r2,-36(fp)
	int base_y = 70; //base upper y coord for all blocks
 1006748:	00801184 	movi	r2,70
 100674c:	e0bff615 	stw	r2,-40(fp)
	int base_y1 = 110; //base lower y coord for all blocks
 1006750:	00801b84 	movi	r2,110
 1006754:	e0bff515 	stw	r2,-44(fp)
	int base_y_t = 85; //base y coord for all texts
 1006758:	00801544 	movi	r2,85
 100675c:	e0bff415 	stw	r2,-48(fp)
	int margin_l = 15; //margin between letters for texts
 1006760:	008003c4 	movi	r2,15
 1006764:	e0bff315 	stw	r2,-52(fp)
	int ver_margin = 70; //vertical margin between each block
 1006768:	00801184 	movi	r2,70
 100676c:	e0bff215 	stw	r2,-56(fp)
	int hor_margin = 10; //how far the blocks are from the left side of the screen
 1006770:	00800284 	movi	r2,10
 1006774:	e0bff115 	stw	r2,-60(fp)
	char str[20];

	drawBack();
 1006778:	10054c00 	call	10054c0 <drawBack>
	drawHomeButton();
 100677c:	10055280 	call	1005528 <drawHomeButton>

	// draw name tag
	drawRectangle(XRES / 2 - 100, XRES / 2 + 100, 20, 60, colour_b);
 1006780:	e0bff817 	ldw	r2,-32(fp)
 1006784:	d8800015 	stw	r2,0(sp)
 1006788:	01004b04 	movi	r4,300
 100678c:	01407d04 	movi	r5,500
 1006790:	01800504 	movi	r6,20
 1006794:	01c00f04 	movi	r7,60
 1006798:	10054440 	call	1005444 <drawRectangle>
	writeText(p->name, XRES / 2 - 50, 30, 20, colour_t, colour_b);
 100679c:	e0bfff17 	ldw	r2,-4(fp)
 10067a0:	11000017 	ldw	r4,0(r2)
 10067a4:	e0bff917 	ldw	r2,-28(fp)
 10067a8:	d8800015 	stw	r2,0(sp)
 10067ac:	e0bff817 	ldw	r2,-32(fp)
 10067b0:	d8800115 	stw	r2,4(sp)
 10067b4:	01405784 	movi	r5,350
 10067b8:	01800784 	movi	r6,30
 10067bc:	01c00504 	movi	r7,20
 10067c0:	10052a40 	call	10052a4 <writeText>
	// draw age
	drawRectangle(base_x, base_x + 130, base_y, base_y1, colour_b);
 10067c4:	e0bff717 	ldw	r2,-36(fp)
 10067c8:	11402084 	addi	r5,r2,130
 10067cc:	e0bff817 	ldw	r2,-32(fp)
 10067d0:	d8800015 	stw	r2,0(sp)
 10067d4:	e13ff717 	ldw	r4,-36(fp)
 10067d8:	e1bff617 	ldw	r6,-40(fp)
 10067dc:	e1fff517 	ldw	r7,-44(fp)
 10067e0:	10054440 	call	1005444 <drawRectangle>
	sprintf(str, "Age : %d", p->age);
 10067e4:	e0bfff17 	ldw	r2,-4(fp)
 10067e8:	11800217 	ldw	r6,8(r2)
 10067ec:	e13ffa04 	addi	r4,fp,-24
 10067f0:	014040b4 	movhi	r5,258
 10067f4:	295cf604 	addi	r5,r5,29656
 10067f8:	100e05c0 	call	100e05c <sprintf>
	writeText(str, base_x + hor_margin, base_y_t, margin_l, colour_t, colour_b);
 10067fc:	e0fff717 	ldw	r3,-36(fp)
 1006800:	e0bff117 	ldw	r2,-60(fp)
 1006804:	188b883a 	add	r5,r3,r2
 1006808:	e13ffa04 	addi	r4,fp,-24
 100680c:	e0bff917 	ldw	r2,-28(fp)
 1006810:	d8800015 	stw	r2,0(sp)
 1006814:	e0bff817 	ldw	r2,-32(fp)
 1006818:	d8800115 	stw	r2,4(sp)
 100681c:	e1bff417 	ldw	r6,-48(fp)
 1006820:	e1fff317 	ldw	r7,-52(fp)
 1006824:	10052a40 	call	10052a4 <writeText>
	// draw gender
	drawRectangle(base_x, base_x + 250, base_y + ver_margin,
 1006828:	e0bff717 	ldw	r2,-36(fp)
 100682c:	11403e84 	addi	r5,r2,250
 1006830:	e0fff617 	ldw	r3,-40(fp)
 1006834:	e0bff217 	ldw	r2,-56(fp)
 1006838:	188d883a 	add	r6,r3,r2
 100683c:	e0fff517 	ldw	r3,-44(fp)
 1006840:	e0bff217 	ldw	r2,-56(fp)
 1006844:	188f883a 	add	r7,r3,r2
 1006848:	e0bff817 	ldw	r2,-32(fp)
 100684c:	d8800015 	stw	r2,0(sp)
 1006850:	e13ff717 	ldw	r4,-36(fp)
 1006854:	10054440 	call	1005444 <drawRectangle>
			base_y1 + ver_margin, colour_b);
	if (p->gender == 0)
 1006858:	e0bfff17 	ldw	r2,-4(fp)
 100685c:	10800117 	ldw	r2,4(r2)
 1006860:	1004c03a 	cmpne	r2,r2,zero
 1006864:	10000e1e 	bne	r2,zero,10068a0 <drawProfile+0x184>
		strcpy(str, "Gender : Female");
 1006868:	e0fffa04 	addi	r3,fp,-24
 100686c:	00991bb4 	movhi	r2,25710
 1006870:	109951c4 	addi	r2,r2,25927
 1006874:	18800015 	stw	r2,0(r3)
 1006878:	008e8834 	movhi	r2,14880
 100687c:	109c9944 	addi	r2,r2,29285
 1006880:	18800115 	stw	r2,4(r3)
 1006884:	009b5974 	movhi	r2,28005
 1006888:	10918804 	addi	r2,r2,17952
 100688c:	18800215 	stw	r2,8(r3)
 1006890:	00801974 	movhi	r2,101
 1006894:	109b1844 	addi	r2,r2,27745
 1006898:	18800315 	stw	r2,12(r3)
 100689c:	00000c06 	br	10068d0 <drawProfile+0x1b4>
	else
		strcpy(str, "Gender : Male");
 10068a0:	e0fffa04 	addi	r3,fp,-24
 10068a4:	00991bb4 	movhi	r2,25710
 10068a8:	109951c4 	addi	r2,r2,25927
 10068ac:	18800015 	stw	r2,0(r3)
 10068b0:	008e8834 	movhi	r2,14880
 10068b4:	109c9944 	addi	r2,r2,29285
 10068b8:	18800115 	stw	r2,4(r3)
 10068bc:	009b1874 	movhi	r2,27745
 10068c0:	10934804 	addi	r2,r2,19744
 10068c4:	18800215 	stw	r2,8(r3)
 10068c8:	00801944 	movi	r2,101
 10068cc:	1880030d 	sth	r2,12(r3)
	writeText(str, base_x + hor_margin, base_y_t + ver_margin, margin_l,
 10068d0:	e0fff717 	ldw	r3,-36(fp)
 10068d4:	e0bff117 	ldw	r2,-60(fp)
 10068d8:	188b883a 	add	r5,r3,r2
 10068dc:	e0fff417 	ldw	r3,-48(fp)
 10068e0:	e0bff217 	ldw	r2,-56(fp)
 10068e4:	188d883a 	add	r6,r3,r2
 10068e8:	e13ffa04 	addi	r4,fp,-24
 10068ec:	e0bff917 	ldw	r2,-28(fp)
 10068f0:	d8800015 	stw	r2,0(sp)
 10068f4:	e0bff817 	ldw	r2,-32(fp)
 10068f8:	d8800115 	stw	r2,4(sp)
 10068fc:	e1fff317 	ldw	r7,-52(fp)
 1006900:	10052a40 	call	10052a4 <writeText>
			colour_t, colour_b);
	// draw weight
	drawRectangle(base_x, base_x + 270, base_y + ver_margin * 2,
 1006904:	e0bff717 	ldw	r2,-36(fp)
 1006908:	11404384 	addi	r5,r2,270
 100690c:	e0bff217 	ldw	r2,-56(fp)
 1006910:	1085883a 	add	r2,r2,r2
 1006914:	1007883a 	mov	r3,r2
 1006918:	e0bff617 	ldw	r2,-40(fp)
 100691c:	188d883a 	add	r6,r3,r2
 1006920:	e0bff217 	ldw	r2,-56(fp)
 1006924:	1085883a 	add	r2,r2,r2
 1006928:	1007883a 	mov	r3,r2
 100692c:	e0bff517 	ldw	r2,-44(fp)
 1006930:	188f883a 	add	r7,r3,r2
 1006934:	e0bff817 	ldw	r2,-32(fp)
 1006938:	d8800015 	stw	r2,0(sp)
 100693c:	e13ff717 	ldw	r4,-36(fp)
 1006940:	10054440 	call	1005444 <drawRectangle>
			base_y1 + ver_margin * 2, colour_b);
	sprintf(str, "Weight : %2.2f kg", p->weight);
 1006944:	e0bfff17 	ldw	r2,-4(fp)
 1006948:	10800317 	ldw	r2,12(r2)
 100694c:	1009883a 	mov	r4,r2
 1006950:	100bc800 	call	100bc80 <__extendsfdf2>
 1006954:	100f883a 	mov	r7,r2
 1006958:	1811883a 	mov	r8,r3
 100695c:	e13ffa04 	addi	r4,fp,-24
 1006960:	014040b4 	movhi	r5,258
 1006964:	295cf904 	addi	r5,r5,29668
 1006968:	380d883a 	mov	r6,r7
 100696c:	400f883a 	mov	r7,r8
 1006970:	100e05c0 	call	100e05c <sprintf>
	writeText(str, base_x + hor_margin, base_y_t + ver_margin * 2, margin_l,
 1006974:	e0fff717 	ldw	r3,-36(fp)
 1006978:	e0bff117 	ldw	r2,-60(fp)
 100697c:	188b883a 	add	r5,r3,r2
 1006980:	e0bff217 	ldw	r2,-56(fp)
 1006984:	1085883a 	add	r2,r2,r2
 1006988:	1007883a 	mov	r3,r2
 100698c:	e0bff417 	ldw	r2,-48(fp)
 1006990:	188d883a 	add	r6,r3,r2
 1006994:	e13ffa04 	addi	r4,fp,-24
 1006998:	e0bff917 	ldw	r2,-28(fp)
 100699c:	d8800015 	stw	r2,0(sp)
 10069a0:	e0bff817 	ldw	r2,-32(fp)
 10069a4:	d8800115 	stw	r2,4(sp)
 10069a8:	e1fff317 	ldw	r7,-52(fp)
 10069ac:	10052a40 	call	10052a4 <writeText>
			colour_t, colour_b);
	// draw height
	drawRectangle(base_x, base_x + 250, base_y + ver_margin * 3,
 10069b0:	e0bff717 	ldw	r2,-36(fp)
 10069b4:	11403e84 	addi	r5,r2,250
 10069b8:	e0fff217 	ldw	r3,-56(fp)
 10069bc:	1805883a 	mov	r2,r3
 10069c0:	1085883a 	add	r2,r2,r2
 10069c4:	10c7883a 	add	r3,r2,r3
 10069c8:	e0bff617 	ldw	r2,-40(fp)
 10069cc:	188d883a 	add	r6,r3,r2
 10069d0:	e0fff217 	ldw	r3,-56(fp)
 10069d4:	1805883a 	mov	r2,r3
 10069d8:	1085883a 	add	r2,r2,r2
 10069dc:	10c7883a 	add	r3,r2,r3
 10069e0:	e0bff517 	ldw	r2,-44(fp)
 10069e4:	188f883a 	add	r7,r3,r2
 10069e8:	e0bff817 	ldw	r2,-32(fp)
 10069ec:	d8800015 	stw	r2,0(sp)
 10069f0:	e13ff717 	ldw	r4,-36(fp)
 10069f4:	10054440 	call	1005444 <drawRectangle>
			base_y1 + ver_margin * 3, colour_b);
	sprintf(str, "Height : %2.2f m", p->height);
 10069f8:	e0bfff17 	ldw	r2,-4(fp)
 10069fc:	10800417 	ldw	r2,16(r2)
 1006a00:	1009883a 	mov	r4,r2
 1006a04:	100bc800 	call	100bc80 <__extendsfdf2>
 1006a08:	100f883a 	mov	r7,r2
 1006a0c:	1811883a 	mov	r8,r3
 1006a10:	e13ffa04 	addi	r4,fp,-24
 1006a14:	014040b4 	movhi	r5,258
 1006a18:	295cfe04 	addi	r5,r5,29688
 1006a1c:	380d883a 	mov	r6,r7
 1006a20:	400f883a 	mov	r7,r8
 1006a24:	100e05c0 	call	100e05c <sprintf>
	writeText(str, base_x + hor_margin, base_y_t + ver_margin * 3, margin_l,
 1006a28:	e0fff717 	ldw	r3,-36(fp)
 1006a2c:	e0bff117 	ldw	r2,-60(fp)
 1006a30:	188b883a 	add	r5,r3,r2
 1006a34:	e0fff217 	ldw	r3,-56(fp)
 1006a38:	1805883a 	mov	r2,r3
 1006a3c:	1085883a 	add	r2,r2,r2
 1006a40:	10c7883a 	add	r3,r2,r3
 1006a44:	e0bff417 	ldw	r2,-48(fp)
 1006a48:	188d883a 	add	r6,r3,r2
 1006a4c:	e13ffa04 	addi	r4,fp,-24
 1006a50:	e0bff917 	ldw	r2,-28(fp)
 1006a54:	d8800015 	stw	r2,0(sp)
 1006a58:	e0bff817 	ldw	r2,-32(fp)
 1006a5c:	d8800115 	stw	r2,4(sp)
 1006a60:	e1fff317 	ldw	r7,-52(fp)
 1006a64:	10052a40 	call	10052a4 <writeText>
			colour_t, colour_b);
	// draw bmi
	drawRectangle(base_x, base_x + 350, base_y + ver_margin * 4,
 1006a68:	e0bff717 	ldw	r2,-36(fp)
 1006a6c:	11405784 	addi	r5,r2,350
 1006a70:	e0bff217 	ldw	r2,-56(fp)
 1006a74:	1085883a 	add	r2,r2,r2
 1006a78:	1085883a 	add	r2,r2,r2
 1006a7c:	1007883a 	mov	r3,r2
 1006a80:	e0bff617 	ldw	r2,-40(fp)
 1006a84:	188d883a 	add	r6,r3,r2
 1006a88:	e0bff217 	ldw	r2,-56(fp)
 1006a8c:	1085883a 	add	r2,r2,r2
 1006a90:	1085883a 	add	r2,r2,r2
 1006a94:	1007883a 	mov	r3,r2
 1006a98:	e0bff517 	ldw	r2,-44(fp)
 1006a9c:	188f883a 	add	r7,r3,r2
 1006aa0:	e0bff817 	ldw	r2,-32(fp)
 1006aa4:	d8800015 	stw	r2,0(sp)
 1006aa8:	e13ff717 	ldw	r4,-36(fp)
 1006aac:	10054440 	call	1005444 <drawRectangle>
			base_y1 + ver_margin * 4, colour_b);
	sprintf(str, "BMI Calculated : %2.2f", p->bmi);
 1006ab0:	e0bfff17 	ldw	r2,-4(fp)
 1006ab4:	10800517 	ldw	r2,20(r2)
 1006ab8:	1009883a 	mov	r4,r2
 1006abc:	100bc800 	call	100bc80 <__extendsfdf2>
 1006ac0:	100f883a 	mov	r7,r2
 1006ac4:	1811883a 	mov	r8,r3
 1006ac8:	e13ffa04 	addi	r4,fp,-24
 1006acc:	014040b4 	movhi	r5,258
 1006ad0:	295d0304 	addi	r5,r5,29708
 1006ad4:	380d883a 	mov	r6,r7
 1006ad8:	400f883a 	mov	r7,r8
 1006adc:	100e05c0 	call	100e05c <sprintf>
	writeText(str, base_x + hor_margin, base_y_t + ver_margin * 4, margin_l,
 1006ae0:	e0fff717 	ldw	r3,-36(fp)
 1006ae4:	e0bff117 	ldw	r2,-60(fp)
 1006ae8:	188b883a 	add	r5,r3,r2
 1006aec:	e0bff217 	ldw	r2,-56(fp)
 1006af0:	1085883a 	add	r2,r2,r2
 1006af4:	1085883a 	add	r2,r2,r2
 1006af8:	1007883a 	mov	r3,r2
 1006afc:	e0bff417 	ldw	r2,-48(fp)
 1006b00:	188d883a 	add	r6,r3,r2
 1006b04:	e13ffa04 	addi	r4,fp,-24
 1006b08:	e0bff917 	ldw	r2,-28(fp)
 1006b0c:	d8800015 	stw	r2,0(sp)
 1006b10:	e0bff817 	ldw	r2,-32(fp)
 1006b14:	d8800115 	stw	r2,4(sp)
 1006b18:	e1fff317 	ldw	r7,-52(fp)
 1006b1c:	10052a40 	call	10052a4 <writeText>
	//writeText(p->goal, XRES/2 - 50, 400, 20, colour_t, colour_b);
	//writeText(str, XRES/2 - 50, 400, 20, colour_t, colour_b);
	//strcpy(str, p->goal);
	//writeText(p->goal, base_x + hor_margin, base_y_t + ver_margin * 5, margin_l, colour_t, colour_b);

}
 1006b20:	e037883a 	mov	sp,fp
 1006b24:	dfc00117 	ldw	ra,4(sp)
 1006b28:	df000017 	ldw	fp,0(sp)
 1006b2c:	dec00204 	addi	sp,sp,8
 1006b30:	f800283a 	ret

01006b34 <drawSync>:

void drawSync() {
 1006b34:	defffc04 	addi	sp,sp,-16
 1006b38:	dfc00315 	stw	ra,12(sp)
 1006b3c:	df000215 	stw	fp,8(sp)
 1006b40:	df000204 	addi	fp,sp,8
	clearScreen();
 1006b44:	10051f00 	call	10051f0 <clearScreen>
	drawInner(WHITE);
 1006b48:	01000044 	movi	r4,1
 1006b4c:	10055900 	call	1005590 <drawInner>
	writeText("Please wait while your Fitup syncs with your android device", 50,
 1006b50:	00800084 	movi	r2,2
 1006b54:	d8800015 	stw	r2,0(sp)
 1006b58:	00800044 	movi	r2,1
 1006b5c:	d8800115 	stw	r2,4(sp)
 1006b60:	010040b4 	movhi	r4,258
 1006b64:	211d0904 	addi	r4,r4,29732
 1006b68:	01400c84 	movi	r5,50
 1006b6c:	01803844 	movi	r6,225
 1006b70:	01c00304 	movi	r7,12
 1006b74:	10052a40 	call	10052a4 <writeText>
			225, 12, RED, WHITE);
}
 1006b78:	e037883a 	mov	sp,fp
 1006b7c:	dfc00117 	ldw	ra,4(sp)
 1006b80:	df000017 	ldw	fp,0(sp)
 1006b84:	dec00204 	addi	sp,sp,8
 1006b88:	f800283a 	ret

01006b8c <profile_init>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


void profile_init(profile *p){
 1006b8c:	defffe04 	addi	sp,sp,-8
 1006b90:	df000115 	stw	fp,4(sp)
 1006b94:	df000104 	addi	fp,sp,4
 1006b98:	e13fff15 	stw	r4,-4(fp)
	strcpy(p->name, "");
 1006b9c:	e0bfff17 	ldw	r2,-4(fp)
 1006ba0:	10800017 	ldw	r2,0(r2)
 1006ba4:	10000005 	stb	zero,0(r2)
	p->gender = 0;
 1006ba8:	e0bfff17 	ldw	r2,-4(fp)
 1006bac:	10000115 	stw	zero,4(r2)
	p->age = 0;
 1006bb0:	e0bfff17 	ldw	r2,-4(fp)
 1006bb4:	10000215 	stw	zero,8(r2)
	p->weight = 0;
 1006bb8:	e0bfff17 	ldw	r2,-4(fp)
 1006bbc:	10000315 	stw	zero,12(r2)
	p->height = 0;
 1006bc0:	e0bfff17 	ldw	r2,-4(fp)
 1006bc4:	10000415 	stw	zero,16(r2)
	p->bmi = 0;
 1006bc8:	e0bfff17 	ldw	r2,-4(fp)
 1006bcc:	10000515 	stw	zero,20(r2)
	strcpy(p->goal, "");
 1006bd0:	e0bfff17 	ldw	r2,-4(fp)
 1006bd4:	10800604 	addi	r2,r2,24
 1006bd8:	10000005 	stb	zero,0(r2)
	p->dis = 0;
 1006bdc:	e0bfff17 	ldw	r2,-4(fp)
 1006be0:	10001315 	stw	zero,76(r2)
	p->score = 0;
 1006be4:	e0bfff17 	ldw	r2,-4(fp)
 1006be8:	10001515 	stw	zero,84(r2)
	p->rank = 0;
 1006bec:	e0bfff17 	ldw	r2,-4(fp)
 1006bf0:	10001415 	stw	zero,80(r2)
}
 1006bf4:	e037883a 	mov	sp,fp
 1006bf8:	df000017 	ldw	fp,0(sp)
 1006bfc:	dec00104 	addi	sp,sp,4
 1006c00:	f800283a 	ret

01006c04 <set_name>:

void set_name(profile *p, char *name){
 1006c04:	defffc04 	addi	sp,sp,-16
 1006c08:	dfc00315 	stw	ra,12(sp)
 1006c0c:	df000215 	stw	fp,8(sp)
 1006c10:	df000204 	addi	fp,sp,8
 1006c14:	e13ffe15 	stw	r4,-8(fp)
 1006c18:	e17fff15 	stw	r5,-4(fp)
	if (p == NULL)
 1006c1c:	e0bffe17 	ldw	r2,-8(fp)
 1006c20:	1005003a 	cmpeq	r2,r2,zero
 1006c24:	1000041e 	bne	r2,zero,1006c38 <set_name+0x34>
		return;
	strcpy(p->name, name);
 1006c28:	e0bffe17 	ldw	r2,-8(fp)
 1006c2c:	11000017 	ldw	r4,0(r2)
 1006c30:	e17fff17 	ldw	r5,-4(fp)
 1006c34:	100e27c0 	call	100e27c <strcpy>
}
 1006c38:	e037883a 	mov	sp,fp
 1006c3c:	dfc00117 	ldw	ra,4(sp)
 1006c40:	df000017 	ldw	fp,0(sp)
 1006c44:	dec00204 	addi	sp,sp,8
 1006c48:	f800283a 	ret

01006c4c <set_gender>:

void set_gender(profile *p, int gender){
 1006c4c:	defffd04 	addi	sp,sp,-12
 1006c50:	df000215 	stw	fp,8(sp)
 1006c54:	df000204 	addi	fp,sp,8
 1006c58:	e13ffe15 	stw	r4,-8(fp)
 1006c5c:	e17fff15 	stw	r5,-4(fp)
	if (p == NULL)
 1006c60:	e0bffe17 	ldw	r2,-8(fp)
 1006c64:	1005003a 	cmpeq	r2,r2,zero
 1006c68:	1000031e 	bne	r2,zero,1006c78 <set_gender+0x2c>
		return;
	p->gender = gender;
 1006c6c:	e0fffe17 	ldw	r3,-8(fp)
 1006c70:	e0bfff17 	ldw	r2,-4(fp)
 1006c74:	18800115 	stw	r2,4(r3)
}
 1006c78:	e037883a 	mov	sp,fp
 1006c7c:	df000017 	ldw	fp,0(sp)
 1006c80:	dec00104 	addi	sp,sp,4
 1006c84:	f800283a 	ret

01006c88 <set_age>:

void set_age(profile *p, int age){
 1006c88:	defffd04 	addi	sp,sp,-12
 1006c8c:	df000215 	stw	fp,8(sp)
 1006c90:	df000204 	addi	fp,sp,8
 1006c94:	e13ffe15 	stw	r4,-8(fp)
 1006c98:	e17fff15 	stw	r5,-4(fp)
	if (p == NULL)
 1006c9c:	e0bffe17 	ldw	r2,-8(fp)
 1006ca0:	1005003a 	cmpeq	r2,r2,zero
 1006ca4:	1000031e 	bne	r2,zero,1006cb4 <set_age+0x2c>
		return;
	p->age = age;
 1006ca8:	e0fffe17 	ldw	r3,-8(fp)
 1006cac:	e0bfff17 	ldw	r2,-4(fp)
 1006cb0:	18800215 	stw	r2,8(r3)
}
 1006cb4:	e037883a 	mov	sp,fp
 1006cb8:	df000017 	ldw	fp,0(sp)
 1006cbc:	dec00104 	addi	sp,sp,4
 1006cc0:	f800283a 	ret

01006cc4 <set_weight>:

void set_weight(profile *p, float weight){
 1006cc4:	defffd04 	addi	sp,sp,-12
 1006cc8:	df000215 	stw	fp,8(sp)
 1006ccc:	df000204 	addi	fp,sp,8
 1006cd0:	e13ffe15 	stw	r4,-8(fp)
 1006cd4:	e17fff15 	stw	r5,-4(fp)
	if (p == NULL)
 1006cd8:	e0bffe17 	ldw	r2,-8(fp)
 1006cdc:	1005003a 	cmpeq	r2,r2,zero
 1006ce0:	1000031e 	bne	r2,zero,1006cf0 <set_weight+0x2c>
		return;
	p->weight = weight;
 1006ce4:	e0fffe17 	ldw	r3,-8(fp)
 1006ce8:	e0bfff17 	ldw	r2,-4(fp)
 1006cec:	18800315 	stw	r2,12(r3)
}
 1006cf0:	e037883a 	mov	sp,fp
 1006cf4:	df000017 	ldw	fp,0(sp)
 1006cf8:	dec00104 	addi	sp,sp,4
 1006cfc:	f800283a 	ret

01006d00 <set_height>:

void set_height(profile *p, float height){
 1006d00:	defffd04 	addi	sp,sp,-12
 1006d04:	df000215 	stw	fp,8(sp)
 1006d08:	df000204 	addi	fp,sp,8
 1006d0c:	e13ffe15 	stw	r4,-8(fp)
 1006d10:	e17fff15 	stw	r5,-4(fp)
	if (p == NULL)
 1006d14:	e0bffe17 	ldw	r2,-8(fp)
 1006d18:	1005003a 	cmpeq	r2,r2,zero
 1006d1c:	1000031e 	bne	r2,zero,1006d2c <set_height+0x2c>
		return;
	p->height = height;
 1006d20:	e0fffe17 	ldw	r3,-8(fp)
 1006d24:	e0bfff17 	ldw	r2,-4(fp)
 1006d28:	18800415 	stw	r2,16(r3)
}
 1006d2c:	e037883a 	mov	sp,fp
 1006d30:	df000017 	ldw	fp,0(sp)
 1006d34:	dec00104 	addi	sp,sp,4
 1006d38:	f800283a 	ret

01006d3c <calc_bmi>:

float calc_bmi(profile *p){
 1006d3c:	defffc04 	addi	sp,sp,-16
 1006d40:	dfc00315 	stw	ra,12(sp)
 1006d44:	df000215 	stw	fp,8(sp)
 1006d48:	dc000115 	stw	r16,4(sp)
 1006d4c:	df000104 	addi	fp,sp,4
 1006d50:	e13fff15 	stw	r4,-4(fp)

	p->bmi = p->weight / (p->height * p->height);
 1006d54:	e0bfff17 	ldw	r2,-4(fp)
 1006d58:	14000317 	ldw	r16,12(r2)
 1006d5c:	e0bfff17 	ldw	r2,-4(fp)
 1006d60:	10c00417 	ldw	r3,16(r2)
 1006d64:	e0bfff17 	ldw	r2,-4(fp)
 1006d68:	10800417 	ldw	r2,16(r2)
 1006d6c:	1809883a 	mov	r4,r3
 1006d70:	100b883a 	mov	r5,r2
 1006d74:	100b7100 	call	100b710 <__mulsf3>
 1006d78:	8009883a 	mov	r4,r16
 1006d7c:	100b883a 	mov	r5,r2
 1006d80:	100b8f00 	call	100b8f0 <__divsf3>
 1006d84:	1007883a 	mov	r3,r2
 1006d88:	e0bfff17 	ldw	r2,-4(fp)
 1006d8c:	10c00515 	stw	r3,20(r2)
	return p->bmi;
 1006d90:	e0bfff17 	ldw	r2,-4(fp)
 1006d94:	10800517 	ldw	r2,20(r2)
}
 1006d98:	e037883a 	mov	sp,fp
 1006d9c:	dfc00217 	ldw	ra,8(sp)
 1006da0:	df000117 	ldw	fp,4(sp)
 1006da4:	dc000017 	ldw	r16,0(sp)
 1006da8:	dec00304 	addi	sp,sp,12
 1006dac:	f800283a 	ret

01006db0 <set_goal>:

void set_goal(profile *p, char goal[]){
 1006db0:	defffc04 	addi	sp,sp,-16
 1006db4:	dfc00315 	stw	ra,12(sp)
 1006db8:	df000215 	stw	fp,8(sp)
 1006dbc:	df000204 	addi	fp,sp,8
 1006dc0:	e13ffe15 	stw	r4,-8(fp)
 1006dc4:	e17fff15 	stw	r5,-4(fp)
	if (p == NULL)
 1006dc8:	e0bffe17 	ldw	r2,-8(fp)
 1006dcc:	1005003a 	cmpeq	r2,r2,zero
 1006dd0:	1000041e 	bne	r2,zero,1006de4 <set_goal+0x34>
		return;
	strcpy(p->goal, goal);
 1006dd4:	e0bffe17 	ldw	r2,-8(fp)
 1006dd8:	11000604 	addi	r4,r2,24
 1006ddc:	e17fff17 	ldw	r5,-4(fp)
 1006de0:	100e27c0 	call	100e27c <strcpy>
}
 1006de4:	e037883a 	mov	sp,fp
 1006de8:	dfc00117 	ldw	ra,4(sp)
 1006dec:	df000017 	ldw	fp,0(sp)
 1006df0:	dec00204 	addi	sp,sp,8
 1006df4:	f800283a 	ret

01006df8 <set_dis>:

void set_dis(profile *p, float dis){
 1006df8:	defffd04 	addi	sp,sp,-12
 1006dfc:	df000215 	stw	fp,8(sp)
 1006e00:	df000204 	addi	fp,sp,8
 1006e04:	e13ffe15 	stw	r4,-8(fp)
 1006e08:	e17fff15 	stw	r5,-4(fp)
	if (p == NULL)
 1006e0c:	e0bffe17 	ldw	r2,-8(fp)
 1006e10:	1005003a 	cmpeq	r2,r2,zero
 1006e14:	1000031e 	bne	r2,zero,1006e24 <set_dis+0x2c>
		return;
	p->dis = dis;
 1006e18:	e0fffe17 	ldw	r3,-8(fp)
 1006e1c:	e0bfff17 	ldw	r2,-4(fp)
 1006e20:	18801315 	stw	r2,76(r3)
}
 1006e24:	e037883a 	mov	sp,fp
 1006e28:	df000017 	ldw	fp,0(sp)
 1006e2c:	dec00104 	addi	sp,sp,4
 1006e30:	f800283a 	ret

01006e34 <update_score>:

void update_score(profile *p){
 1006e34:	defff304 	addi	sp,sp,-52
 1006e38:	dfc00c15 	stw	ra,48(sp)
 1006e3c:	df000b15 	stw	fp,44(sp)
 1006e40:	df000b04 	addi	fp,sp,44
 1006e44:	e13ff515 	stw	r4,-44(fp)
	if (p == NULL)
 1006e48:	e0bff517 	ldw	r2,-44(fp)
 1006e4c:	1005003a 	cmpeq	r2,r2,zero
 1006e50:	1000c71e 	bne	r2,zero,1007170 <update_score+0x33c>
		return;
	if (p->dis >= 0 && p->dis < 2){
 1006e54:	e0bff517 	ldw	r2,-44(fp)
 1006e58:	10801317 	ldw	r2,76(r2)
 1006e5c:	e03fff05 	stb	zero,-4(fp)
 1006e60:	1009883a 	mov	r4,r2
 1006e64:	000b883a 	mov	r5,zero
 1006e68:	100ba640 	call	100ba64 <__gesf2>
 1006e6c:	1004403a 	cmpge	r2,r2,zero
 1006e70:	1000011e 	bne	r2,zero,1006e78 <update_score+0x44>
 1006e74:	00000206 	br	1006e80 <update_score+0x4c>
 1006e78:	00800044 	movi	r2,1
 1006e7c:	e0bfff05 	stb	r2,-4(fp)
 1006e80:	e0ffff03 	ldbu	r3,-4(fp)
 1006e84:	1880005c 	xori	r2,r3,1
 1006e88:	10803fcc 	andi	r2,r2,255
 1006e8c:	1004c03a 	cmpne	r2,r2,zero
 1006e90:	1000141e 	bne	r2,zero,1006ee4 <update_score+0xb0>
 1006e94:	e0bff517 	ldw	r2,-44(fp)
 1006e98:	10801317 	ldw	r2,76(r2)
 1006e9c:	e03ffe05 	stb	zero,-8(fp)
 1006ea0:	1009883a 	mov	r4,r2
 1006ea4:	01500034 	movhi	r5,16384
 1006ea8:	100badc0 	call	100badc <__ltsf2>
 1006eac:	1004803a 	cmplt	r2,r2,zero
 1006eb0:	1000011e 	bne	r2,zero,1006eb8 <update_score+0x84>
 1006eb4:	00000206 	br	1006ec0 <update_score+0x8c>
 1006eb8:	00800044 	movi	r2,1
 1006ebc:	e0bffe05 	stb	r2,-8(fp)
 1006ec0:	e0fffe03 	ldbu	r3,-8(fp)
 1006ec4:	1880005c 	xori	r2,r3,1
 1006ec8:	10803fcc 	andi	r2,r2,255
 1006ecc:	1004c03a 	cmpne	r2,r2,zero
 1006ed0:	1000041e 	bne	r2,zero,1006ee4 <update_score+0xb0>
		p->score = 20;
 1006ed4:	e0fff517 	ldw	r3,-44(fp)
 1006ed8:	00800504 	movi	r2,20
 1006edc:	18801515 	stw	r2,84(r3)
}

void update_score(profile *p){
	if (p == NULL)
		return;
	if (p->dis >= 0 && p->dis < 2){
 1006ee0:	0000a306 	br	1007170 <update_score+0x33c>
		p->score = 20;
	}
	else if (p->dis >= 2 && p->dis < 4){
 1006ee4:	e0bff517 	ldw	r2,-44(fp)
 1006ee8:	10801317 	ldw	r2,76(r2)
 1006eec:	e03ffd05 	stb	zero,-12(fp)
 1006ef0:	1009883a 	mov	r4,r2
 1006ef4:	01500034 	movhi	r5,16384
 1006ef8:	100ba640 	call	100ba64 <__gesf2>
 1006efc:	1004403a 	cmpge	r2,r2,zero
 1006f00:	1000011e 	bne	r2,zero,1006f08 <update_score+0xd4>
 1006f04:	00000206 	br	1006f10 <update_score+0xdc>
 1006f08:	00800044 	movi	r2,1
 1006f0c:	e0bffd05 	stb	r2,-12(fp)
 1006f10:	e0fffd03 	ldbu	r3,-12(fp)
 1006f14:	1880005c 	xori	r2,r3,1
 1006f18:	10803fcc 	andi	r2,r2,255
 1006f1c:	1004c03a 	cmpne	r2,r2,zero
 1006f20:	1000141e 	bne	r2,zero,1006f74 <update_score+0x140>
 1006f24:	e0bff517 	ldw	r2,-44(fp)
 1006f28:	10801317 	ldw	r2,76(r2)
 1006f2c:	e03ffc05 	stb	zero,-16(fp)
 1006f30:	1009883a 	mov	r4,r2
 1006f34:	01502034 	movhi	r5,16512
 1006f38:	100badc0 	call	100badc <__ltsf2>
 1006f3c:	1004803a 	cmplt	r2,r2,zero
 1006f40:	1000011e 	bne	r2,zero,1006f48 <update_score+0x114>
 1006f44:	00000206 	br	1006f50 <update_score+0x11c>
 1006f48:	00800044 	movi	r2,1
 1006f4c:	e0bffc05 	stb	r2,-16(fp)
 1006f50:	e0fffc03 	ldbu	r3,-16(fp)
 1006f54:	1880005c 	xori	r2,r3,1
 1006f58:	10803fcc 	andi	r2,r2,255
 1006f5c:	1004c03a 	cmpne	r2,r2,zero
 1006f60:	1000041e 	bne	r2,zero,1006f74 <update_score+0x140>
		p->score = 40;
 1006f64:	e0fff517 	ldw	r3,-44(fp)
 1006f68:	00800a04 	movi	r2,40
 1006f6c:	18801515 	stw	r2,84(r3)
	if (p == NULL)
		return;
	if (p->dis >= 0 && p->dis < 2){
		p->score = 20;
	}
	else if (p->dis >= 2 && p->dis < 4){
 1006f70:	00007f06 	br	1007170 <update_score+0x33c>
		p->score = 40;
	}
	else if (p->dis >= 4 && p->dis < 6){
 1006f74:	e0bff517 	ldw	r2,-44(fp)
 1006f78:	10801317 	ldw	r2,76(r2)
 1006f7c:	e03ffb05 	stb	zero,-20(fp)
 1006f80:	1009883a 	mov	r4,r2
 1006f84:	01502034 	movhi	r5,16512
 1006f88:	100ba640 	call	100ba64 <__gesf2>
 1006f8c:	1004403a 	cmpge	r2,r2,zero
 1006f90:	1000011e 	bne	r2,zero,1006f98 <update_score+0x164>
 1006f94:	00000206 	br	1006fa0 <update_score+0x16c>
 1006f98:	00800044 	movi	r2,1
 1006f9c:	e0bffb05 	stb	r2,-20(fp)
 1006fa0:	e0fffb03 	ldbu	r3,-20(fp)
 1006fa4:	1880005c 	xori	r2,r3,1
 1006fa8:	10803fcc 	andi	r2,r2,255
 1006fac:	1004c03a 	cmpne	r2,r2,zero
 1006fb0:	1000141e 	bne	r2,zero,1007004 <update_score+0x1d0>
 1006fb4:	e0bff517 	ldw	r2,-44(fp)
 1006fb8:	10801317 	ldw	r2,76(r2)
 1006fbc:	e03ffa05 	stb	zero,-24(fp)
 1006fc0:	1009883a 	mov	r4,r2
 1006fc4:	01503034 	movhi	r5,16576
 1006fc8:	100badc0 	call	100badc <__ltsf2>
 1006fcc:	1004803a 	cmplt	r2,r2,zero
 1006fd0:	1000011e 	bne	r2,zero,1006fd8 <update_score+0x1a4>
 1006fd4:	00000206 	br	1006fe0 <update_score+0x1ac>
 1006fd8:	00800044 	movi	r2,1
 1006fdc:	e0bffa05 	stb	r2,-24(fp)
 1006fe0:	e0fffa03 	ldbu	r3,-24(fp)
 1006fe4:	1880005c 	xori	r2,r3,1
 1006fe8:	10803fcc 	andi	r2,r2,255
 1006fec:	1004c03a 	cmpne	r2,r2,zero
 1006ff0:	1000041e 	bne	r2,zero,1007004 <update_score+0x1d0>
		p->score = 60;
 1006ff4:	e0fff517 	ldw	r3,-44(fp)
 1006ff8:	00800f04 	movi	r2,60
 1006ffc:	18801515 	stw	r2,84(r3)
		p->score = 20;
	}
	else if (p->dis >= 2 && p->dis < 4){
		p->score = 40;
	}
	else if (p->dis >= 4 && p->dis < 6){
 1007000:	00005b06 	br	1007170 <update_score+0x33c>
		p->score = 60;
	}
	else if (p->dis >= 6 && p->dis < 8){
 1007004:	e0bff517 	ldw	r2,-44(fp)
 1007008:	10801317 	ldw	r2,76(r2)
 100700c:	e03ff905 	stb	zero,-28(fp)
 1007010:	1009883a 	mov	r4,r2
 1007014:	01503034 	movhi	r5,16576
 1007018:	100ba640 	call	100ba64 <__gesf2>
 100701c:	1004403a 	cmpge	r2,r2,zero
 1007020:	1000011e 	bne	r2,zero,1007028 <update_score+0x1f4>
 1007024:	00000206 	br	1007030 <update_score+0x1fc>
 1007028:	00800044 	movi	r2,1
 100702c:	e0bff905 	stb	r2,-28(fp)
 1007030:	e0fff903 	ldbu	r3,-28(fp)
 1007034:	1880005c 	xori	r2,r3,1
 1007038:	10803fcc 	andi	r2,r2,255
 100703c:	1004c03a 	cmpne	r2,r2,zero
 1007040:	1000141e 	bne	r2,zero,1007094 <update_score+0x260>
 1007044:	e0bff517 	ldw	r2,-44(fp)
 1007048:	10801317 	ldw	r2,76(r2)
 100704c:	e03ff805 	stb	zero,-32(fp)
 1007050:	1009883a 	mov	r4,r2
 1007054:	01504034 	movhi	r5,16640
 1007058:	100badc0 	call	100badc <__ltsf2>
 100705c:	1004803a 	cmplt	r2,r2,zero
 1007060:	1000011e 	bne	r2,zero,1007068 <update_score+0x234>
 1007064:	00000206 	br	1007070 <update_score+0x23c>
 1007068:	00800044 	movi	r2,1
 100706c:	e0bff805 	stb	r2,-32(fp)
 1007070:	e0fff803 	ldbu	r3,-32(fp)
 1007074:	1880005c 	xori	r2,r3,1
 1007078:	10803fcc 	andi	r2,r2,255
 100707c:	1004c03a 	cmpne	r2,r2,zero
 1007080:	1000041e 	bne	r2,zero,1007094 <update_score+0x260>
		p->score = 80;
 1007084:	e0fff517 	ldw	r3,-44(fp)
 1007088:	00801404 	movi	r2,80
 100708c:	18801515 	stw	r2,84(r3)
		p->score = 40;
	}
	else if (p->dis >= 4 && p->dis < 6){
		p->score = 60;
	}
	else if (p->dis >= 6 && p->dis < 8){
 1007090:	00003706 	br	1007170 <update_score+0x33c>
		p->score = 80;
	}
	else if (p->dis >= 8 && p->dis < 10){
 1007094:	e0bff517 	ldw	r2,-44(fp)
 1007098:	10801317 	ldw	r2,76(r2)
 100709c:	e03ff705 	stb	zero,-36(fp)
 10070a0:	1009883a 	mov	r4,r2
 10070a4:	01504034 	movhi	r5,16640
 10070a8:	100ba640 	call	100ba64 <__gesf2>
 10070ac:	1004403a 	cmpge	r2,r2,zero
 10070b0:	1000011e 	bne	r2,zero,10070b8 <update_score+0x284>
 10070b4:	00000206 	br	10070c0 <update_score+0x28c>
 10070b8:	00800044 	movi	r2,1
 10070bc:	e0bff705 	stb	r2,-36(fp)
 10070c0:	e0fff703 	ldbu	r3,-36(fp)
 10070c4:	1880005c 	xori	r2,r3,1
 10070c8:	10803fcc 	andi	r2,r2,255
 10070cc:	1004c03a 	cmpne	r2,r2,zero
 10070d0:	1000141e 	bne	r2,zero,1007124 <update_score+0x2f0>
 10070d4:	e0bff517 	ldw	r2,-44(fp)
 10070d8:	10801317 	ldw	r2,76(r2)
 10070dc:	e03ff605 	stb	zero,-40(fp)
 10070e0:	1009883a 	mov	r4,r2
 10070e4:	01504834 	movhi	r5,16672
 10070e8:	100badc0 	call	100badc <__ltsf2>
 10070ec:	1004803a 	cmplt	r2,r2,zero
 10070f0:	1000011e 	bne	r2,zero,10070f8 <update_score+0x2c4>
 10070f4:	00000206 	br	1007100 <update_score+0x2cc>
 10070f8:	00800044 	movi	r2,1
 10070fc:	e0bff605 	stb	r2,-40(fp)
 1007100:	e0fff603 	ldbu	r3,-40(fp)
 1007104:	1880005c 	xori	r2,r3,1
 1007108:	10803fcc 	andi	r2,r2,255
 100710c:	1004c03a 	cmpne	r2,r2,zero
 1007110:	1000041e 	bne	r2,zero,1007124 <update_score+0x2f0>
		p->score = 100;
 1007114:	e0fff517 	ldw	r3,-44(fp)
 1007118:	00801904 	movi	r2,100
 100711c:	18801515 	stw	r2,84(r3)
		p->score = 60;
	}
	else if (p->dis >= 6 && p->dis < 8){
		p->score = 80;
	}
	else if (p->dis >= 8 && p->dis < 10){
 1007120:	00001306 	br	1007170 <update_score+0x33c>
		p->score = 100;
	}
	else if (p->dis >= 10 && p->dis < 12){
 1007124:	e0bff517 	ldw	r2,-44(fp)
 1007128:	10801317 	ldw	r2,76(r2)
 100712c:	1009883a 	mov	r4,r2
 1007130:	01504834 	movhi	r5,16672
 1007134:	100ba640 	call	100ba64 <__gesf2>
 1007138:	1004403a 	cmpge	r2,r2,zero
 100713c:	1000011e 	bne	r2,zero,1007144 <update_score+0x310>
 1007140:	00000b06 	br	1007170 <update_score+0x33c>
 1007144:	e0bff517 	ldw	r2,-44(fp)
 1007148:	10801317 	ldw	r2,76(r2)
 100714c:	1009883a 	mov	r4,r2
 1007150:	01505034 	movhi	r5,16704
 1007154:	100badc0 	call	100badc <__ltsf2>
 1007158:	1004803a 	cmplt	r2,r2,zero
 100715c:	1000011e 	bne	r2,zero,1007164 <update_score+0x330>
 1007160:	00000306 	br	1007170 <update_score+0x33c>
		p->score = 120;
 1007164:	e0fff517 	ldw	r3,-44(fp)
 1007168:	00801e04 	movi	r2,120
 100716c:	18801515 	stw	r2,84(r3)
	}
}
 1007170:	e037883a 	mov	sp,fp
 1007174:	dfc00117 	ldw	ra,4(sp)
 1007178:	df000017 	ldw	fp,0(sp)
 100717c:	dec00204 	addi	sp,sp,8
 1007180:	f800283a 	ret

01007184 <set_rank>:

void set_rank(profile *p){
 1007184:	defffe04 	addi	sp,sp,-8
 1007188:	df000115 	stw	fp,4(sp)
 100718c:	df000104 	addi	fp,sp,4
 1007190:	e13fff15 	stw	r4,-4(fp)
	if (p == NULL)
 1007194:	e0bfff17 	ldw	r2,-4(fp)
 1007198:	1005003a 	cmpeq	r2,r2,zero
 100719c:	1000461e 	bne	r2,zero,10072b8 <set_rank+0x134>
		return;
	if (p->score >= 0 && p->score <= 20){
 10071a0:	e0bfff17 	ldw	r2,-4(fp)
 10071a4:	10801517 	ldw	r2,84(r2)
 10071a8:	1004803a 	cmplt	r2,r2,zero
 10071ac:	1000071e 	bne	r2,zero,10071cc <set_rank+0x48>
 10071b0:	e0bfff17 	ldw	r2,-4(fp)
 10071b4:	10801517 	ldw	r2,84(r2)
 10071b8:	10800548 	cmpgei	r2,r2,21
 10071bc:	1000031e 	bne	r2,zero,10071cc <set_rank+0x48>
		p->rank = 0;
 10071c0:	e0bfff17 	ldw	r2,-4(fp)
 10071c4:	10001415 	stw	zero,80(r2)
}

void set_rank(profile *p){
	if (p == NULL)
		return;
	if (p->score >= 0 && p->score <= 20){
 10071c8:	00003b06 	br	10072b8 <set_rank+0x134>
		p->rank = 0;
	}
	else if (p->score > 20 && p->score <= 40){
 10071cc:	e0bfff17 	ldw	r2,-4(fp)
 10071d0:	10801517 	ldw	r2,84(r2)
 10071d4:	10800550 	cmplti	r2,r2,21
 10071d8:	1000081e 	bne	r2,zero,10071fc <set_rank+0x78>
 10071dc:	e0bfff17 	ldw	r2,-4(fp)
 10071e0:	10801517 	ldw	r2,84(r2)
 10071e4:	10800a48 	cmpgei	r2,r2,41
 10071e8:	1000041e 	bne	r2,zero,10071fc <set_rank+0x78>
		p->rank = 1;
 10071ec:	e0ffff17 	ldw	r3,-4(fp)
 10071f0:	00800044 	movi	r2,1
 10071f4:	18801415 	stw	r2,80(r3)
	if (p == NULL)
		return;
	if (p->score >= 0 && p->score <= 20){
		p->rank = 0;
	}
	else if (p->score > 20 && p->score <= 40){
 10071f8:	00002f06 	br	10072b8 <set_rank+0x134>
		p->rank = 1;
	}
	else if (p->score > 40 && p->score <= 60){
 10071fc:	e0bfff17 	ldw	r2,-4(fp)
 1007200:	10801517 	ldw	r2,84(r2)
 1007204:	10800a50 	cmplti	r2,r2,41
 1007208:	1000081e 	bne	r2,zero,100722c <set_rank+0xa8>
 100720c:	e0bfff17 	ldw	r2,-4(fp)
 1007210:	10801517 	ldw	r2,84(r2)
 1007214:	10800f48 	cmpgei	r2,r2,61
 1007218:	1000041e 	bne	r2,zero,100722c <set_rank+0xa8>
		p->rank = 2;
 100721c:	e0ffff17 	ldw	r3,-4(fp)
 1007220:	00800084 	movi	r2,2
 1007224:	18801415 	stw	r2,80(r3)
		p->rank = 0;
	}
	else if (p->score > 20 && p->score <= 40){
		p->rank = 1;
	}
	else if (p->score > 40 && p->score <= 60){
 1007228:	00002306 	br	10072b8 <set_rank+0x134>
		p->rank = 2;
	}
	else if (p->score > 60 && p->score <= 80){
 100722c:	e0bfff17 	ldw	r2,-4(fp)
 1007230:	10801517 	ldw	r2,84(r2)
 1007234:	10800f50 	cmplti	r2,r2,61
 1007238:	1000081e 	bne	r2,zero,100725c <set_rank+0xd8>
 100723c:	e0bfff17 	ldw	r2,-4(fp)
 1007240:	10801517 	ldw	r2,84(r2)
 1007244:	10801448 	cmpgei	r2,r2,81
 1007248:	1000041e 	bne	r2,zero,100725c <set_rank+0xd8>
		p->rank = 3;
 100724c:	e0ffff17 	ldw	r3,-4(fp)
 1007250:	008000c4 	movi	r2,3
 1007254:	18801415 	stw	r2,80(r3)
		p->rank = 1;
	}
	else if (p->score > 40 && p->score <= 60){
		p->rank = 2;
	}
	else if (p->score > 60 && p->score <= 80){
 1007258:	00001706 	br	10072b8 <set_rank+0x134>
		p->rank = 3;
	}
	else if (p->score > 80 && p->score <= 100){
 100725c:	e0bfff17 	ldw	r2,-4(fp)
 1007260:	10801517 	ldw	r2,84(r2)
 1007264:	10801450 	cmplti	r2,r2,81
 1007268:	1000081e 	bne	r2,zero,100728c <set_rank+0x108>
 100726c:	e0bfff17 	ldw	r2,-4(fp)
 1007270:	10801517 	ldw	r2,84(r2)
 1007274:	10801948 	cmpgei	r2,r2,101
 1007278:	1000041e 	bne	r2,zero,100728c <set_rank+0x108>
		p->rank = 4;
 100727c:	e0ffff17 	ldw	r3,-4(fp)
 1007280:	00800104 	movi	r2,4
 1007284:	18801415 	stw	r2,80(r3)
		p->rank = 2;
	}
	else if (p->score > 60 && p->score <= 80){
		p->rank = 3;
	}
	else if (p->score > 80 && p->score <= 100){
 1007288:	00000b06 	br	10072b8 <set_rank+0x134>
		p->rank = 4;
	}
	else if (p->score > 100 && p->score <= 120){
 100728c:	e0bfff17 	ldw	r2,-4(fp)
 1007290:	10801517 	ldw	r2,84(r2)
 1007294:	10801950 	cmplti	r2,r2,101
 1007298:	1000071e 	bne	r2,zero,10072b8 <set_rank+0x134>
 100729c:	e0bfff17 	ldw	r2,-4(fp)
 10072a0:	10801517 	ldw	r2,84(r2)
 10072a4:	10801e48 	cmpgei	r2,r2,121
 10072a8:	1000031e 	bne	r2,zero,10072b8 <set_rank+0x134>
		p->rank = 5;
 10072ac:	e0ffff17 	ldw	r3,-4(fp)
 10072b0:	00800144 	movi	r2,5
 10072b4:	18801415 	stw	r2,80(r3)
	}

}
 10072b8:	e037883a 	mov	sp,fp
 10072bc:	df000017 	ldw	fp,0(sp)
 10072c0:	dec00104 	addi	sp,sp,4
 10072c4:	f800283a 	ret

010072c8 <init>:
#include<stdio.h>
#include "stack.h"

void init(Stack *S)
{
 10072c8:	defffe04 	addi	sp,sp,-8
 10072cc:	df000115 	stw	fp,4(sp)
 10072d0:	df000104 	addi	fp,sp,4
 10072d4:	e13fff15 	stw	r4,-4(fp)
    S->top = 0;
 10072d8:	e0bfff17 	ldw	r2,-4(fp)
 10072dc:	10003215 	stw	zero,200(r2)
}
 10072e0:	e037883a 	mov	sp,fp
 10072e4:	df000017 	ldw	fp,0(sp)
 10072e8:	dec00104 	addi	sp,sp,4
 10072ec:	f800283a 	ret

010072f0 <push>:

void push(Stack *S, int val)
{
 10072f0:	defffb04 	addi	sp,sp,-20
 10072f4:	dfc00415 	stw	ra,16(sp)
 10072f8:	df000315 	stw	fp,12(sp)
 10072fc:	dc000215 	stw	r16,8(sp)
 1007300:	df000204 	addi	fp,sp,8
 1007304:	e13ffe15 	stw	r4,-8(fp)
 1007308:	e17fff15 	stw	r5,-4(fp)
    S->x[ S->top ] = val;
 100730c:	e0bffe17 	ldw	r2,-8(fp)
 1007310:	14003217 	ldw	r16,200(r2)
 1007314:	e13fff17 	ldw	r4,-4(fp)
 1007318:	100bb540 	call	100bb54 <__floatsisf>
 100731c:	1009883a 	mov	r4,r2
 1007320:	e0fffe17 	ldw	r3,-8(fp)
 1007324:	8405883a 	add	r2,r16,r16
 1007328:	1085883a 	add	r2,r2,r2
 100732c:	10c5883a 	add	r2,r2,r3
 1007330:	11000015 	stw	r4,0(r2)
   (S->top)++;
 1007334:	e0bffe17 	ldw	r2,-8(fp)
 1007338:	10803217 	ldw	r2,200(r2)
 100733c:	10c00044 	addi	r3,r2,1
 1007340:	e0bffe17 	ldw	r2,-8(fp)
 1007344:	10c03215 	stw	r3,200(r2)
}
 1007348:	e037883a 	mov	sp,fp
 100734c:	dfc00217 	ldw	ra,8(sp)
 1007350:	df000117 	ldw	fp,4(sp)
 1007354:	dc000017 	ldw	r16,0(sp)
 1007358:	dec00304 	addi	sp,sp,12
 100735c:	f800283a 	ret

01007360 <pop>:

int pop(Stack *S)
{
 1007360:	defffd04 	addi	sp,sp,-12
 1007364:	dfc00215 	stw	ra,8(sp)
 1007368:	df000115 	stw	fp,4(sp)
 100736c:	df000104 	addi	fp,sp,4
 1007370:	e13fff15 	stw	r4,-4(fp)
    (S->top)--;
 1007374:	e0bfff17 	ldw	r2,-4(fp)
 1007378:	10803217 	ldw	r2,200(r2)
 100737c:	10ffffc4 	addi	r3,r2,-1
 1007380:	e0bfff17 	ldw	r2,-4(fp)
 1007384:	10c03215 	stw	r3,200(r2)
    return (S->x[S->top]);
 1007388:	e0bfff17 	ldw	r2,-4(fp)
 100738c:	10803217 	ldw	r2,200(r2)
 1007390:	e0ffff17 	ldw	r3,-4(fp)
 1007394:	1085883a 	add	r2,r2,r2
 1007398:	1085883a 	add	r2,r2,r2
 100739c:	10c5883a 	add	r2,r2,r3
 10073a0:	10800017 	ldw	r2,0(r2)
 10073a4:	1009883a 	mov	r4,r2
 10073a8:	100bbec0 	call	100bbec <__fixsfsi>
}
 10073ac:	e037883a 	mov	sp,fp
 10073b0:	dfc00117 	ldw	ra,4(sp)
 10073b4:	df000017 	ldw	fp,0(sp)
 10073b8:	dec00204 	addi	sp,sp,8
 10073bc:	f800283a 	ret

010073c0 <backPressed>:

extern volatile int currentState;
extern Stack lastStates;


int backPressed(int p1x, int p1y, int p2x, int p2y) {
 10073c0:	defff504 	addi	sp,sp,-44
 10073c4:	dfc00a15 	stw	ra,40(sp)
 10073c8:	df000915 	stw	fp,36(sp)
 10073cc:	df000904 	addi	fp,sp,36
 10073d0:	e13ffb15 	stw	r4,-20(fp)
 10073d4:	e17ffc15 	stw	r5,-16(fp)
 10073d8:	e1bffd15 	stw	r6,-12(fp)
 10073dc:	e1fffe15 	stw	r7,-8(fp)
	if (ifTouched(p1x, p1y, p2x, p2y, 700, 800, 400, 480) == 1) { //back button pressed
 10073e0:	0080af04 	movi	r2,700
 10073e4:	d8800015 	stw	r2,0(sp)
 10073e8:	0080c804 	movi	r2,800
 10073ec:	d8800115 	stw	r2,4(sp)
 10073f0:	00806404 	movi	r2,400
 10073f4:	d8800215 	stw	r2,8(sp)
 10073f8:	00807804 	movi	r2,480
 10073fc:	d8800315 	stw	r2,12(sp)
 1007400:	e13ffb17 	ldw	r4,-20(fp)
 1007404:	e17ffc17 	ldw	r5,-16(fp)
 1007408:	e1bffd17 	ldw	r6,-12(fp)
 100740c:	e1fffe17 	ldw	r7,-8(fp)
 1007410:	10050d40 	call	10050d4 <ifTouched>
 1007414:	10800058 	cmpnei	r2,r2,1
 1007418:	1000031e 	bne	r2,zero,1007428 <backPressed+0x68>
		return 1;
 100741c:	00800044 	movi	r2,1
 1007420:	e0bfff15 	stw	r2,-4(fp)
 1007424:	00000106 	br	100742c <backPressed+0x6c>
	}
	return 0;
 1007428:	e03fff15 	stw	zero,-4(fp)
 100742c:	e0bfff17 	ldw	r2,-4(fp)
}
 1007430:	e037883a 	mov	sp,fp
 1007434:	dfc00117 	ldw	ra,4(sp)
 1007438:	df000017 	ldw	fp,0(sp)
 100743c:	dec00204 	addi	sp,sp,8
 1007440:	f800283a 	ret

01007444 <closestPressed>:

int closestPressed(int p1x, int p1y, int p2x, int p2y) {
 1007444:	defff504 	addi	sp,sp,-44
 1007448:	dfc00a15 	stw	ra,40(sp)
 100744c:	df000915 	stw	fp,36(sp)
 1007450:	df000904 	addi	fp,sp,36
 1007454:	e13ffb15 	stw	r4,-20(fp)
 1007458:	e17ffc15 	stw	r5,-16(fp)
 100745c:	e1bffd15 	stw	r6,-12(fp)
 1007460:	e1fffe15 	stw	r7,-8(fp)
	if (ifTouched(p1x, p1y, p2x, p2y, 350, 450, 400, 480) == 1) { //back button pressed
 1007464:	00805784 	movi	r2,350
 1007468:	d8800015 	stw	r2,0(sp)
 100746c:	00807084 	movi	r2,450
 1007470:	d8800115 	stw	r2,4(sp)
 1007474:	00806404 	movi	r2,400
 1007478:	d8800215 	stw	r2,8(sp)
 100747c:	00807804 	movi	r2,480
 1007480:	d8800315 	stw	r2,12(sp)
 1007484:	e13ffb17 	ldw	r4,-20(fp)
 1007488:	e17ffc17 	ldw	r5,-16(fp)
 100748c:	e1bffd17 	ldw	r6,-12(fp)
 1007490:	e1fffe17 	ldw	r7,-8(fp)
 1007494:	10050d40 	call	10050d4 <ifTouched>
 1007498:	10800058 	cmpnei	r2,r2,1
 100749c:	1000031e 	bne	r2,zero,10074ac <closestPressed+0x68>
		return 1;
 10074a0:	00800044 	movi	r2,1
 10074a4:	e0bfff15 	stw	r2,-4(fp)
 10074a8:	00000106 	br	10074b0 <closestPressed+0x6c>
	}
	return 0;
 10074ac:	e03fff15 	stw	zero,-4(fp)
 10074b0:	e0bfff17 	ldw	r2,-4(fp)
}
 10074b4:	e037883a 	mov	sp,fp
 10074b8:	dfc00117 	ldw	ra,4(sp)
 10074bc:	df000017 	ldw	fp,0(sp)
 10074c0:	dec00204 	addi	sp,sp,8
 10074c4:	f800283a 	ret

010074c8 <timePressed>:

int timePressed(int p1x, int p1y, int p2x, int p2y) {
 10074c8:	defff504 	addi	sp,sp,-44
 10074cc:	dfc00a15 	stw	ra,40(sp)
 10074d0:	df000915 	stw	fp,36(sp)
 10074d4:	df000904 	addi	fp,sp,36
 10074d8:	e13ffb15 	stw	r4,-20(fp)
 10074dc:	e17ffc15 	stw	r5,-16(fp)
 10074e0:	e1bffd15 	stw	r6,-12(fp)
 10074e4:	e1fffe15 	stw	r7,-8(fp)
	if (ifTouched(p1x, p1y, p2x, p2y, 700, 800, 0, 100) == 1) { //back button pressed
 10074e8:	0080af04 	movi	r2,700
 10074ec:	d8800015 	stw	r2,0(sp)
 10074f0:	0080c804 	movi	r2,800
 10074f4:	d8800115 	stw	r2,4(sp)
 10074f8:	d8000215 	stw	zero,8(sp)
 10074fc:	00801904 	movi	r2,100
 1007500:	d8800315 	stw	r2,12(sp)
 1007504:	e13ffb17 	ldw	r4,-20(fp)
 1007508:	e17ffc17 	ldw	r5,-16(fp)
 100750c:	e1bffd17 	ldw	r6,-12(fp)
 1007510:	e1fffe17 	ldw	r7,-8(fp)
 1007514:	10050d40 	call	10050d4 <ifTouched>
 1007518:	10800058 	cmpnei	r2,r2,1
 100751c:	1000031e 	bne	r2,zero,100752c <timePressed+0x64>
		return 1;
 1007520:	00800044 	movi	r2,1
 1007524:	e0bfff15 	stw	r2,-4(fp)
 1007528:	00000106 	br	1007530 <timePressed+0x68>
	}
	return 0;
 100752c:	e03fff15 	stw	zero,-4(fp)
 1007530:	e0bfff17 	ldw	r2,-4(fp)
}
 1007534:	e037883a 	mov	sp,fp
 1007538:	dfc00117 	ldw	ra,4(sp)
 100753c:	df000017 	ldw	fp,0(sp)
 1007540:	dec00204 	addi	sp,sp,8
 1007544:	f800283a 	ret

01007548 <homePressed>:

int homePressed(int p1x, int p1y, int p2x, int p2y) {
 1007548:	defff504 	addi	sp,sp,-44
 100754c:	dfc00a15 	stw	ra,40(sp)
 1007550:	df000915 	stw	fp,36(sp)
 1007554:	df000904 	addi	fp,sp,36
 1007558:	e13ffb15 	stw	r4,-20(fp)
 100755c:	e17ffc15 	stw	r5,-16(fp)
 1007560:	e1bffd15 	stw	r6,-12(fp)
 1007564:	e1fffe15 	stw	r7,-8(fp)
	if (ifTouched(p1x, p1y, p2x, p2y, 700, 800, 0, 100) == 1) { //back button pressed
 1007568:	0080af04 	movi	r2,700
 100756c:	d8800015 	stw	r2,0(sp)
 1007570:	0080c804 	movi	r2,800
 1007574:	d8800115 	stw	r2,4(sp)
 1007578:	d8000215 	stw	zero,8(sp)
 100757c:	00801904 	movi	r2,100
 1007580:	d8800315 	stw	r2,12(sp)
 1007584:	e13ffb17 	ldw	r4,-20(fp)
 1007588:	e17ffc17 	ldw	r5,-16(fp)
 100758c:	e1bffd17 	ldw	r6,-12(fp)
 1007590:	e1fffe17 	ldw	r7,-8(fp)
 1007594:	10050d40 	call	10050d4 <ifTouched>
 1007598:	10800058 	cmpnei	r2,r2,1
 100759c:	1000031e 	bne	r2,zero,10075ac <homePressed+0x64>
		return 1;
 10075a0:	00800044 	movi	r2,1
 10075a4:	e0bfff15 	stw	r2,-4(fp)
 10075a8:	00000106 	br	10075b0 <homePressed+0x68>
	}
	return 0;
 10075ac:	e03fff15 	stw	zero,-4(fp)
 10075b0:	e0bfff17 	ldw	r2,-4(fp)
}
 10075b4:	e037883a 	mov	sp,fp
 10075b8:	dfc00117 	ldw	ra,4(sp)
 10075bc:	df000017 	ldw	fp,0(sp)
 10075c0:	dec00204 	addi	sp,sp,8
 10075c4:	f800283a 	ret

010075c8 <distancePressed>:

int distancePressed(int p1x, int p1y, int p2x, int p2y) {
 10075c8:	defff504 	addi	sp,sp,-44
 10075cc:	dfc00a15 	stw	ra,40(sp)
 10075d0:	df000915 	stw	fp,36(sp)
 10075d4:	df000904 	addi	fp,sp,36
 10075d8:	e13ffb15 	stw	r4,-20(fp)
 10075dc:	e17ffc15 	stw	r5,-16(fp)
 10075e0:	e1bffd15 	stw	r6,-12(fp)
 10075e4:	e1fffe15 	stw	r7,-8(fp)
	if (ifTouched(p1x, p1y, p2x, p2y, 130, 230, 400, 480) == 1) { //back button pressed
 10075e8:	00802084 	movi	r2,130
 10075ec:	d8800015 	stw	r2,0(sp)
 10075f0:	00803984 	movi	r2,230
 10075f4:	d8800115 	stw	r2,4(sp)
 10075f8:	00806404 	movi	r2,400
 10075fc:	d8800215 	stw	r2,8(sp)
 1007600:	00807804 	movi	r2,480
 1007604:	d8800315 	stw	r2,12(sp)
 1007608:	e13ffb17 	ldw	r4,-20(fp)
 100760c:	e17ffc17 	ldw	r5,-16(fp)
 1007610:	e1bffd17 	ldw	r6,-12(fp)
 1007614:	e1fffe17 	ldw	r7,-8(fp)
 1007618:	10050d40 	call	10050d4 <ifTouched>
 100761c:	10800058 	cmpnei	r2,r2,1
 1007620:	1000031e 	bne	r2,zero,1007630 <distancePressed+0x68>
		return 1;
 1007624:	00800044 	movi	r2,1
 1007628:	e0bfff15 	stw	r2,-4(fp)
 100762c:	00000106 	br	1007634 <distancePressed+0x6c>
	}
	return 0;
 1007630:	e03fff15 	stw	zero,-4(fp)
 1007634:	e0bfff17 	ldw	r2,-4(fp)
}
 1007638:	e037883a 	mov	sp,fp
 100763c:	dfc00117 	ldw	ra,4(sp)
 1007640:	df000017 	ldw	fp,0(sp)
 1007644:	dec00204 	addi	sp,sp,8
 1007648:	f800283a 	ret

0100764c <favPressed>:

int favPressed(int p1x, int p1y, int p2x, int p2y) {
 100764c:	defff504 	addi	sp,sp,-44
 1007650:	dfc00a15 	stw	ra,40(sp)
 1007654:	df000915 	stw	fp,36(sp)
 1007658:	df000904 	addi	fp,sp,36
 100765c:	e13ffb15 	stw	r4,-20(fp)
 1007660:	e17ffc15 	stw	r5,-16(fp)
 1007664:	e1bffd15 	stw	r6,-12(fp)
 1007668:	e1fffe15 	stw	r7,-8(fp)
	if (ifTouched(p1x, p1y, p2x, p2y, 660, 740, 160, 240) == 1) { //back button pressed
 100766c:	0080a504 	movi	r2,660
 1007670:	d8800015 	stw	r2,0(sp)
 1007674:	0080b904 	movi	r2,740
 1007678:	d8800115 	stw	r2,4(sp)
 100767c:	00802804 	movi	r2,160
 1007680:	d8800215 	stw	r2,8(sp)
 1007684:	00803c04 	movi	r2,240
 1007688:	d8800315 	stw	r2,12(sp)
 100768c:	e13ffb17 	ldw	r4,-20(fp)
 1007690:	e17ffc17 	ldw	r5,-16(fp)
 1007694:	e1bffd17 	ldw	r6,-12(fp)
 1007698:	e1fffe17 	ldw	r7,-8(fp)
 100769c:	10050d40 	call	10050d4 <ifTouched>
 10076a0:	10800058 	cmpnei	r2,r2,1
 10076a4:	1000031e 	bne	r2,zero,10076b4 <favPressed+0x68>
		return 1;
 10076a8:	00800044 	movi	r2,1
 10076ac:	e0bfff15 	stw	r2,-4(fp)
 10076b0:	00000106 	br	10076b8 <favPressed+0x6c>
	}
	return 0;
 10076b4:	e03fff15 	stw	zero,-4(fp)
 10076b8:	e0bfff17 	ldw	r2,-4(fp)
}
 10076bc:	e037883a 	mov	sp,fp
 10076c0:	dfc00117 	ldw	ra,4(sp)
 10076c4:	df000017 	ldw	fp,0(sp)
 10076c8:	dec00204 	addi	sp,sp,8
 10076cc:	f800283a 	ret

010076d0 <Welcome>:

/****Welcome State****/
void Welcome() {
 10076d0:	defff604 	addi	sp,sp,-40
 10076d4:	dfc00915 	stw	ra,36(sp)
 10076d8:	df000815 	stw	fp,32(sp)
 10076dc:	df000804 	addi	fp,sp,32
	while (1) {
		Point p1 = GetPress();
 10076e0:	1007e440 	call	1007e44 <GetPress>
 10076e4:	1009883a 	mov	r4,r2
 10076e8:	180b883a 	mov	r5,r3
 10076ec:	e13ffc15 	stw	r4,-16(fp)
 10076f0:	e17ffd15 	stw	r5,-12(fp)
		Point p2 = GetRelease();
 10076f4:	10080640 	call	1008064 <GetRelease>
 10076f8:	1009883a 	mov	r4,r2
 10076fc:	180b883a 	mov	r5,r3
 1007700:	e13ffe15 	stw	r4,-8(fp)
 1007704:	e17fff15 	stw	r5,-4(fp)

		if (ifTouched(p1.x, p1.y, p2.x, p2.y, 0, 800, 0, 480) == 1) { //going to home page
 1007708:	e13ffc17 	ldw	r4,-16(fp)
 100770c:	e17ffd17 	ldw	r5,-12(fp)
 1007710:	e1bffe17 	ldw	r6,-8(fp)
 1007714:	e1ffff17 	ldw	r7,-4(fp)
 1007718:	d8000015 	stw	zero,0(sp)
 100771c:	0080c804 	movi	r2,800
 1007720:	d8800115 	stw	r2,4(sp)
 1007724:	d8000215 	stw	zero,8(sp)
 1007728:	00807804 	movi	r2,480
 100772c:	d8800315 	stw	r2,12(sp)
 1007730:	10050d40 	call	10050d4 <ifTouched>
 1007734:	10800058 	cmpnei	r2,r2,1
 1007738:	103fe91e 	bne	r2,zero,10076e0 <Welcome+0x10>
			push(&lastStates, currentState);
 100773c:	008040f4 	movhi	r2,259
 1007740:	10ad6e04 	addi	r2,r2,-19016
 1007744:	11400017 	ldw	r5,0(r2)
 1007748:	010040f4 	movhi	r4,259
 100774c:	212dcc04 	addi	r4,r4,-18640
 1007750:	10072f00 	call	10072f0 <push>
			currentState = HOME;
 1007754:	00c040f4 	movhi	r3,259
 1007758:	18ed6e04 	addi	r3,r3,-19016
 100775c:	00800044 	movi	r2,1
 1007760:	18800015 	stw	r2,0(r3)
			break;
		}
	}
}
 1007764:	e037883a 	mov	sp,fp
 1007768:	dfc00117 	ldw	ra,4(sp)
 100776c:	df000017 	ldw	fp,0(sp)
 1007770:	dec00204 	addi	sp,sp,8
 1007774:	f800283a 	ret

01007778 <Home>:

void Home() {
 1007778:	defff604 	addi	sp,sp,-40
 100777c:	dfc00915 	stw	ra,36(sp)
 1007780:	df000815 	stw	fp,32(sp)
 1007784:	df000804 	addi	fp,sp,32
	while (1) {
		Point point1 = GetPress();
 1007788:	1007e440 	call	1007e44 <GetPress>
 100778c:	1009883a 	mov	r4,r2
 1007790:	180b883a 	mov	r5,r3
 1007794:	e13ffc15 	stw	r4,-16(fp)
 1007798:	e17ffd15 	stw	r5,-12(fp)
		Point point2 = GetRelease();
 100779c:	10080640 	call	1008064 <GetRelease>
 10077a0:	1009883a 	mov	r4,r2
 10077a4:	180b883a 	mov	r5,r3
 10077a8:	e13ffe15 	stw	r4,-8(fp)
 10077ac:	e17fff15 	stw	r5,-4(fp)
		if (ifTouched(point1.x, point1.y, point2.x, point2.y, 200, 600, 75,
 10077b0:	e13ffc17 	ldw	r4,-16(fp)
 10077b4:	e17ffd17 	ldw	r5,-12(fp)
 10077b8:	e1bffe17 	ldw	r6,-8(fp)
 10077bc:	e1ffff17 	ldw	r7,-4(fp)
 10077c0:	00803204 	movi	r2,200
 10077c4:	d8800015 	stw	r2,0(sp)
 10077c8:	00809604 	movi	r2,600
 10077cc:	d8800115 	stw	r2,4(sp)
 10077d0:	008012c4 	movi	r2,75
 10077d4:	d8800215 	stw	r2,8(sp)
 10077d8:	00802584 	movi	r2,150
 10077dc:	d8800315 	stw	r2,12(sp)
 10077e0:	10050d40 	call	10050d4 <ifTouched>
 10077e4:	10800058 	cmpnei	r2,r2,1
 10077e8:	10000b1e 	bne	r2,zero,1007818 <Home+0xa0>
				150) == 1) { //map button pressed
			push(&lastStates, currentState);
 10077ec:	008040f4 	movhi	r2,259
 10077f0:	10ad6e04 	addi	r2,r2,-19016
 10077f4:	11400017 	ldw	r5,0(r2)
 10077f8:	010040f4 	movhi	r4,259
 10077fc:	212dcc04 	addi	r4,r4,-18640
 1007800:	10072f00 	call	10072f0 <push>
			currentState = STARTRUN;
 1007804:	00c040f4 	movhi	r3,259
 1007808:	18ed6e04 	addi	r3,r3,-19016
 100780c:	00800084 	movi	r2,2
 1007810:	18800015 	stw	r2,0(r3)
			break;
 1007814:	00005c06 	br	1007988 <Home+0x210>
		} else if (ifTouched(point1.x, point1.y, point2.x, point2.y, 200, 600,
 1007818:	e13ffc17 	ldw	r4,-16(fp)
 100781c:	e17ffd17 	ldw	r5,-12(fp)
 1007820:	e1bffe17 	ldw	r6,-8(fp)
 1007824:	e1ffff17 	ldw	r7,-4(fp)
 1007828:	00803204 	movi	r2,200
 100782c:	d8800015 	stw	r2,0(sp)
 1007830:	00809604 	movi	r2,600
 1007834:	d8800115 	stw	r2,4(sp)
 1007838:	00802bc4 	movi	r2,175
 100783c:	d8800215 	stw	r2,8(sp)
 1007840:	00803e84 	movi	r2,250
 1007844:	d8800315 	stw	r2,12(sp)
 1007848:	10050d40 	call	10050d4 <ifTouched>
 100784c:	10800058 	cmpnei	r2,r2,1
 1007850:	10000b1e 	bne	r2,zero,1007880 <Home+0x108>
				175, 250) == 1) { //search button pressed
			push(&lastStates, currentState);
 1007854:	008040f4 	movhi	r2,259
 1007858:	10ad6e04 	addi	r2,r2,-19016
 100785c:	11400017 	ldw	r5,0(r2)
 1007860:	010040f4 	movhi	r4,259
 1007864:	212dcc04 	addi	r4,r4,-18640
 1007868:	10072f00 	call	10072f0 <push>
			currentState = STATS;
 100786c:	00c040f4 	movhi	r3,259
 1007870:	18ed6e04 	addi	r3,r3,-19016
 1007874:	00800104 	movi	r2,4
 1007878:	18800015 	stw	r2,0(r3)
			break;
 100787c:	00004206 	br	1007988 <Home+0x210>
		} else if (ifTouched(point1.x, point1.y, point2.x, point2.y, 200, 600,
 1007880:	e13ffc17 	ldw	r4,-16(fp)
 1007884:	e17ffd17 	ldw	r5,-12(fp)
 1007888:	e1bffe17 	ldw	r6,-8(fp)
 100788c:	e1ffff17 	ldw	r7,-4(fp)
 1007890:	00803204 	movi	r2,200
 1007894:	d8800015 	stw	r2,0(sp)
 1007898:	00809604 	movi	r2,600
 100789c:	d8800115 	stw	r2,4(sp)
 10078a0:	008044c4 	movi	r2,275
 10078a4:	d8800215 	stw	r2,8(sp)
 10078a8:	00805784 	movi	r2,350
 10078ac:	d8800315 	stw	r2,12(sp)
 10078b0:	10050d40 	call	10050d4 <ifTouched>
 10078b4:	10800058 	cmpnei	r2,r2,1
 10078b8:	10000b1e 	bne	r2,zero,10078e8 <Home+0x170>
				275, 350) == 1) { //favourites button pressed
			push(&lastStates, currentState);
 10078bc:	008040f4 	movhi	r2,259
 10078c0:	10ad6e04 	addi	r2,r2,-19016
 10078c4:	11400017 	ldw	r5,0(r2)
 10078c8:	010040f4 	movhi	r4,259
 10078cc:	212dcc04 	addi	r4,r4,-18640
 10078d0:	10072f00 	call	10072f0 <push>
			currentState = SYNC;
 10078d4:	00c040f4 	movhi	r3,259
 10078d8:	18ed6e04 	addi	r3,r3,-19016
 10078dc:	00800184 	movi	r2,6
 10078e0:	18800015 	stw	r2,0(r3)
			break;
 10078e4:	00002806 	br	1007988 <Home+0x210>
		} else if (ifTouched(point1.x, point1.y, point2.x, point2.y, 200, 600,
 10078e8:	e13ffc17 	ldw	r4,-16(fp)
 10078ec:	e17ffd17 	ldw	r5,-12(fp)
 10078f0:	e1bffe17 	ldw	r6,-8(fp)
 10078f4:	e1ffff17 	ldw	r7,-4(fp)
 10078f8:	00803204 	movi	r2,200
 10078fc:	d8800015 	stw	r2,0(sp)
 1007900:	00809604 	movi	r2,600
 1007904:	d8800115 	stw	r2,4(sp)
 1007908:	00805dc4 	movi	r2,375
 100790c:	d8800215 	stw	r2,8(sp)
 1007910:	00807084 	movi	r2,450
 1007914:	d8800315 	stw	r2,12(sp)
 1007918:	10050d40 	call	10050d4 <ifTouched>
 100791c:	10800058 	cmpnei	r2,r2,1
 1007920:	10000b1e 	bne	r2,zero,1007950 <Home+0x1d8>
				375, 450) == 1) { //TODO button pressed
			push(&lastStates, currentState);
 1007924:	008040f4 	movhi	r2,259
 1007928:	10ad6e04 	addi	r2,r2,-19016
 100792c:	11400017 	ldw	r5,0(r2)
 1007930:	010040f4 	movhi	r4,259
 1007934:	212dcc04 	addi	r4,r4,-18640
 1007938:	10072f00 	call	10072f0 <push>
			currentState = PROFILE;
 100793c:	00c040f4 	movhi	r3,259
 1007940:	18ed6e04 	addi	r3,r3,-19016
 1007944:	00800144 	movi	r2,5
 1007948:	18800015 	stw	r2,0(r3)
			break;
 100794c:	00000e06 	br	1007988 <Home+0x210>
		} else if (backPressed(point1.x, point1.y, point2.x, point2.y)) {
 1007950:	e13ffc17 	ldw	r4,-16(fp)
 1007954:	e17ffd17 	ldw	r5,-12(fp)
 1007958:	e1bffe17 	ldw	r6,-8(fp)
 100795c:	e1ffff17 	ldw	r7,-4(fp)
 1007960:	10073c00 	call	10073c0 <backPressed>
 1007964:	1005003a 	cmpeq	r2,r2,zero
 1007968:	103f871e 	bne	r2,zero,1007788 <Home+0x10>
			currentState = pop(&lastStates);
 100796c:	010040f4 	movhi	r4,259
 1007970:	212dcc04 	addi	r4,r4,-18640
 1007974:	10073600 	call	1007360 <pop>
 1007978:	1007883a 	mov	r3,r2
 100797c:	008040f4 	movhi	r2,259
 1007980:	10ad6e04 	addi	r2,r2,-19016
 1007984:	10c00015 	stw	r3,0(r2)
			break;
		}
	}
	return;
}
 1007988:	e037883a 	mov	sp,fp
 100798c:	dfc00117 	ldw	ra,4(sp)
 1007990:	df000017 	ldw	fp,0(sp)
 1007994:	dec00204 	addi	sp,sp,8
 1007998:	f800283a 	ret

0100799c <StartRun>:

void StartRun() {
 100799c:	defff604 	addi	sp,sp,-40
 10079a0:	dfc00915 	stw	ra,36(sp)
 10079a4:	df000815 	stw	fp,32(sp)
 10079a8:	df000804 	addi	fp,sp,32
	//changeInterval();
	//eraseLog();
	//startLog();
	while (1) {
		Point p1 = GetPress();
 10079ac:	1007e440 	call	1007e44 <GetPress>
 10079b0:	1009883a 	mov	r4,r2
 10079b4:	180b883a 	mov	r5,r3
 10079b8:	e13ffc15 	stw	r4,-16(fp)
 10079bc:	e17ffd15 	stw	r5,-12(fp)
		Point p2 = GetRelease();
 10079c0:	10080640 	call	1008064 <GetRelease>
 10079c4:	1009883a 	mov	r4,r2
 10079c8:	180b883a 	mov	r5,r3
 10079cc:	e13ffe15 	stw	r4,-8(fp)
 10079d0:	e17fff15 	stw	r5,-4(fp)
		if (backPressed(p1.x, p1.y, p2.x, p2.y) == 1) { //back button pressed
 10079d4:	e13ffc17 	ldw	r4,-16(fp)
 10079d8:	e17ffd17 	ldw	r5,-12(fp)
 10079dc:	e1bffe17 	ldw	r6,-8(fp)
 10079e0:	e1ffff17 	ldw	r7,-4(fp)
 10079e4:	10073c00 	call	10073c0 <backPressed>
 10079e8:	10800058 	cmpnei	r2,r2,1
 10079ec:	1000081e 	bne	r2,zero,1007a10 <StartRun+0x74>
			currentState = pop(&lastStates);
 10079f0:	010040f4 	movhi	r4,259
 10079f4:	212dcc04 	addi	r4,r4,-18640
 10079f8:	10073600 	call	1007360 <pop>
 10079fc:	1007883a 	mov	r3,r2
 1007a00:	008040f4 	movhi	r2,259
 1007a04:	10ad6e04 	addi	r2,r2,-19016
 1007a08:	10c00015 	stw	r3,0(r2)
			break;
 1007a0c:	00001906 	br	1007a74 <StartRun+0xd8>
		}
		if (ifTouched(p1.x, p1.y, p2.x, p2.y, 200, 600, 250, 400) == 1) { //Tim Hortons pressed
 1007a10:	e13ffc17 	ldw	r4,-16(fp)
 1007a14:	e17ffd17 	ldw	r5,-12(fp)
 1007a18:	e1bffe17 	ldw	r6,-8(fp)
 1007a1c:	e1ffff17 	ldw	r7,-4(fp)
 1007a20:	00803204 	movi	r2,200
 1007a24:	d8800015 	stw	r2,0(sp)
 1007a28:	00809604 	movi	r2,600
 1007a2c:	d8800115 	stw	r2,4(sp)
 1007a30:	00803e84 	movi	r2,250
 1007a34:	d8800215 	stw	r2,8(sp)
 1007a38:	00806404 	movi	r2,400
 1007a3c:	d8800315 	stw	r2,12(sp)
 1007a40:	10050d40 	call	10050d4 <ifTouched>
 1007a44:	10800058 	cmpnei	r2,r2,1
 1007a48:	103fd81e 	bne	r2,zero,10079ac <StartRun+0x10>
					push(&lastStates, currentState);
 1007a4c:	008040f4 	movhi	r2,259
 1007a50:	10ad6e04 	addi	r2,r2,-19016
 1007a54:	11400017 	ldw	r5,0(r2)
 1007a58:	010040f4 	movhi	r4,259
 1007a5c:	212dcc04 	addi	r4,r4,-18640
 1007a60:	10072f00 	call	10072f0 <push>
					currentState = ENDRUN;
 1007a64:	00c040f4 	movhi	r3,259
 1007a68:	18ed6e04 	addi	r3,r3,-19016
 1007a6c:	008000c4 	movi	r2,3
 1007a70:	18800015 	stw	r2,0(r3)
					break;
		}
	}
}
 1007a74:	e037883a 	mov	sp,fp
 1007a78:	dfc00117 	ldw	ra,4(sp)
 1007a7c:	df000017 	ldw	fp,0(sp)
 1007a80:	dec00204 	addi	sp,sp,8
 1007a84:	f800283a 	ret

01007a88 <EndRun>:

void EndRun() {
 1007a88:	defffe04 	addi	sp,sp,-8
 1007a8c:	dfc00115 	stw	ra,4(sp)
 1007a90:	df000015 	stw	fp,0(sp)
 1007a94:	d839883a 	mov	fp,sp
	stopLog();
 1007a98:	1002a7c0 	call	1002a7c <stopLog>
	logcount = dumpLog();
 1007a9c:	1002b600 	call	1002b60 <dumpLog>
 1007aa0:	1007883a 	mov	r3,r2
 1007aa4:	008040f4 	movhi	r2,259
 1007aa8:	10ad7004 	addi	r2,r2,-19008
 1007aac:	10c00015 	stw	r3,0(r2)
	printCoords();
 1007ab0:	100631c0 	call	100631c <printCoords>
	calculateDistance();
 1007ab4:	1005df00 	call	1005df0 <calculateDistance>
	findTimes();
 1007ab8:	100618c0 	call	100618c <findTimes>
	//sendCoords();

	//push(&lastStates, currentState);
	currentState = HOME;
 1007abc:	00c040f4 	movhi	r3,259
 1007ac0:	18ed6e04 	addi	r3,r3,-19016
 1007ac4:	00800044 	movi	r2,1
 1007ac8:	18800015 	stw	r2,0(r3)

}
 1007acc:	e037883a 	mov	sp,fp
 1007ad0:	dfc00117 	ldw	ra,4(sp)
 1007ad4:	df000017 	ldw	fp,0(sp)
 1007ad8:	dec00204 	addi	sp,sp,8
 1007adc:	f800283a 	ret

01007ae0 <Stats>:


void Stats() {
 1007ae0:	defffa04 	addi	sp,sp,-24
 1007ae4:	dfc00515 	stw	ra,20(sp)
 1007ae8:	df000415 	stw	fp,16(sp)
 1007aec:	df000404 	addi	fp,sp,16
	while (1) {
		Point p1 = GetPress();
 1007af0:	1007e440 	call	1007e44 <GetPress>
 1007af4:	1009883a 	mov	r4,r2
 1007af8:	180b883a 	mov	r5,r3
 1007afc:	e13ffc15 	stw	r4,-16(fp)
 1007b00:	e17ffd15 	stw	r5,-12(fp)
		Point p2 = GetRelease();
 1007b04:	10080640 	call	1008064 <GetRelease>
 1007b08:	1009883a 	mov	r4,r2
 1007b0c:	180b883a 	mov	r5,r3
 1007b10:	e13ffe15 	stw	r4,-8(fp)
 1007b14:	e17fff15 	stw	r5,-4(fp)
		if (backPressed(p1.x, p1.y, p2.x, p2.y) == 1) { //back button pressed
 1007b18:	e13ffc17 	ldw	r4,-16(fp)
 1007b1c:	e17ffd17 	ldw	r5,-12(fp)
 1007b20:	e1bffe17 	ldw	r6,-8(fp)
 1007b24:	e1ffff17 	ldw	r7,-4(fp)
 1007b28:	10073c00 	call	10073c0 <backPressed>
 1007b2c:	10800058 	cmpnei	r2,r2,1
 1007b30:	1000051e 	bne	r2,zero,1007b48 <Stats+0x68>
			currentState = HOME;
 1007b34:	00c040f4 	movhi	r3,259
 1007b38:	18ed6e04 	addi	r3,r3,-19016
 1007b3c:	00800044 	movi	r2,1
 1007b40:	18800015 	stw	r2,0(r3)
			break;
 1007b44:	00001106 	br	1007b8c <Stats+0xac>
		}
		if (homePressed(p1.x, p1.y, p2.x, p2.y)) {
 1007b48:	e13ffc17 	ldw	r4,-16(fp)
 1007b4c:	e17ffd17 	ldw	r5,-12(fp)
 1007b50:	e1bffe17 	ldw	r6,-8(fp)
 1007b54:	e1ffff17 	ldw	r7,-4(fp)
 1007b58:	10075480 	call	1007548 <homePressed>
 1007b5c:	1005003a 	cmpeq	r2,r2,zero
 1007b60:	103fe31e 	bne	r2,zero,1007af0 <Stats+0x10>
			push(&lastStates, currentState);
 1007b64:	008040f4 	movhi	r2,259
 1007b68:	10ad6e04 	addi	r2,r2,-19016
 1007b6c:	11400017 	ldw	r5,0(r2)
 1007b70:	010040f4 	movhi	r4,259
 1007b74:	212dcc04 	addi	r4,r4,-18640
 1007b78:	10072f00 	call	10072f0 <push>
			currentState = HOME;
 1007b7c:	00c040f4 	movhi	r3,259
 1007b80:	18ed6e04 	addi	r3,r3,-19016
 1007b84:	00800044 	movi	r2,1
 1007b88:	18800015 	stw	r2,0(r3)
			break;
		}
	}
}
 1007b8c:	e037883a 	mov	sp,fp
 1007b90:	dfc00117 	ldw	ra,4(sp)
 1007b94:	df000017 	ldw	fp,0(sp)
 1007b98:	dec00204 	addi	sp,sp,8
 1007b9c:	f800283a 	ret

01007ba0 <Profile>:

void Profile(){
 1007ba0:	defffa04 	addi	sp,sp,-24
 1007ba4:	dfc00515 	stw	ra,20(sp)
 1007ba8:	df000415 	stw	fp,16(sp)
 1007bac:	df000404 	addi	fp,sp,16

	while (1) {


		Point p1 = GetPress();
 1007bb0:	1007e440 	call	1007e44 <GetPress>
 1007bb4:	1009883a 	mov	r4,r2
 1007bb8:	180b883a 	mov	r5,r3
 1007bbc:	e13ffc15 	stw	r4,-16(fp)
 1007bc0:	e17ffd15 	stw	r5,-12(fp)
		Point p2 = GetRelease();
 1007bc4:	10080640 	call	1008064 <GetRelease>
 1007bc8:	1009883a 	mov	r4,r2
 1007bcc:	180b883a 	mov	r5,r3
 1007bd0:	e13ffe15 	stw	r4,-8(fp)
 1007bd4:	e17fff15 	stw	r5,-4(fp)
		if (backPressed(p1.x, p1.y, p2.x, p2.y) == 1) { //back button pressed
 1007bd8:	e13ffc17 	ldw	r4,-16(fp)
 1007bdc:	e17ffd17 	ldw	r5,-12(fp)
 1007be0:	e1bffe17 	ldw	r6,-8(fp)
 1007be4:	e1ffff17 	ldw	r7,-4(fp)
 1007be8:	10073c00 	call	10073c0 <backPressed>
 1007bec:	10800058 	cmpnei	r2,r2,1
 1007bf0:	1000081e 	bne	r2,zero,1007c14 <Profile+0x74>
			currentState = pop(&lastStates);
 1007bf4:	010040f4 	movhi	r4,259
 1007bf8:	212dcc04 	addi	r4,r4,-18640
 1007bfc:	10073600 	call	1007360 <pop>
 1007c00:	1007883a 	mov	r3,r2
 1007c04:	008040f4 	movhi	r2,259
 1007c08:	10ad6e04 	addi	r2,r2,-19016
 1007c0c:	10c00015 	stw	r3,0(r2)
			break;
 1007c10:	00001106 	br	1007c58 <Profile+0xb8>
		}
		if (homePressed(p1.x, p1.y, p2.x, p2.y)) {
 1007c14:	e13ffc17 	ldw	r4,-16(fp)
 1007c18:	e17ffd17 	ldw	r5,-12(fp)
 1007c1c:	e1bffe17 	ldw	r6,-8(fp)
 1007c20:	e1ffff17 	ldw	r7,-4(fp)
 1007c24:	10075480 	call	1007548 <homePressed>
 1007c28:	1005003a 	cmpeq	r2,r2,zero
 1007c2c:	103fe01e 	bne	r2,zero,1007bb0 <Profile+0x10>
			push(&lastStates, currentState);
 1007c30:	008040f4 	movhi	r2,259
 1007c34:	10ad6e04 	addi	r2,r2,-19016
 1007c38:	11400017 	ldw	r5,0(r2)
 1007c3c:	010040f4 	movhi	r4,259
 1007c40:	212dcc04 	addi	r4,r4,-18640
 1007c44:	10072f00 	call	10072f0 <push>
			currentState = HOME;
 1007c48:	00c040f4 	movhi	r3,259
 1007c4c:	18ed6e04 	addi	r3,r3,-19016
 1007c50:	00800044 	movi	r2,1
 1007c54:	18800015 	stw	r2,0(r3)
			break;
		}
	}
}
 1007c58:	e037883a 	mov	sp,fp
 1007c5c:	dfc00117 	ldw	ra,4(sp)
 1007c60:	df000017 	ldw	fp,0(sp)
 1007c64:	dec00204 	addi	sp,sp,8
 1007c68:	f800283a 	ret

01007c6c <Sync>:


void Sync(){
 1007c6c:	defffe04 	addi	sp,sp,-8
 1007c70:	dfc00115 	stw	ra,4(sp)
 1007c74:	df000015 	stw	fp,0(sp)
 1007c78:	d839883a 	mov	fp,sp
	sendCoords();
 1007c7c:	10064940 	call	1006494 <sendCoords>
	currentState = HOME;
 1007c80:	00c040f4 	movhi	r3,259
 1007c84:	18ed6e04 	addi	r3,r3,-19016
 1007c88:	00800044 	movi	r2,1
 1007c8c:	18800015 	stw	r2,0(r3)
}
 1007c90:	e037883a 	mov	sp,fp
 1007c94:	dfc00117 	ldw	ra,4(sp)
 1007c98:	df000017 	ldw	fp,0(sp)
 1007c9c:	dec00204 	addi	sp,sp,8
 1007ca0:	f800283a 	ret

01007ca4 <Init_LCD>:
#include "touchscreen.h"
#include "altera_up_avalon_character_lcd.h"
#include <stdio.h>
#include <stdlib.h>

void Init_LCD(void) {
 1007ca4:	defffd04 	addi	sp,sp,-12
 1007ca8:	dfc00215 	stw	ra,8(sp)
 1007cac:	df000115 	stw	fp,4(sp)
 1007cb0:	df000104 	addi	fp,sp,4
	alt_printf("Starting\n");
 1007cb4:	010040b4 	movhi	r4,258
 1007cb8:	211d1804 	addi	r4,r4,29792
 1007cbc:	10194a40 	call	10194a4 <alt_printf>
	alt_up_character_lcd_dev * char_lcd_dev;

	char_lcd_dev = alt_up_character_lcd_open_dev("/dev/character_lcd_0");
 1007cc0:	010040b4 	movhi	r4,258
 1007cc4:	211d1b04 	addi	r4,r4,29804
 1007cc8:	101eed00 	call	101eed0 <alt_up_character_lcd_open_dev>
 1007ccc:	e0bfff15 	stw	r2,-4(fp)

	if (char_lcd_dev == NULL)
 1007cd0:	e0bfff17 	ldw	r2,-4(fp)
 1007cd4:	1004c03a 	cmpne	r2,r2,zero
 1007cd8:	1000041e 	bne	r2,zero,1007cec <Init_LCD+0x48>
		alt_printf("Error:could not open character LCD Device\n");
 1007cdc:	010040b4 	movhi	r4,258
 1007ce0:	211d2104 	addi	r4,r4,29828
 1007ce4:	10194a40 	call	10194a4 <alt_printf>
 1007ce8:	00000306 	br	1007cf8 <Init_LCD+0x54>
	else
		alt_printf("Opened LCD Device\n");
 1007cec:	010040b4 	movhi	r4,258
 1007cf0:	211d2c04 	addi	r4,r4,29872
 1007cf4:	10194a40 	call	10194a4 <alt_printf>

	alt_up_character_lcd_init(char_lcd_dev);
 1007cf8:	e13fff17 	ldw	r4,-4(fp)
 1007cfc:	101ee9c0 	call	101ee9c <alt_up_character_lcd_init>
	alt_up_character_lcd_cursor_blink_on(char_lcd_dev);
 1007d00:	e13fff17 	ldw	r4,-4(fp)
 1007d04:	101f2e80 	call	101f2e8 <alt_up_character_lcd_cursor_blink_on>
}
 1007d08:	e037883a 	mov	sp,fp
 1007d0c:	dfc00117 	ldw	ra,4(sp)
 1007d10:	df000017 	ldw	fp,0(sp)
 1007d14:	dec00204 	addi	sp,sp,8
 1007d18:	f800283a 	ret

01007d1c <Init_Touch>:

void Init_Touch(void) {
 1007d1c:	defffd04 	addi	sp,sp,-12
 1007d20:	dfc00215 	stw	ra,8(sp)
 1007d24:	df000115 	stw	fp,4(sp)
 1007d28:	df000104 	addi	fp,sp,4
	touchscreen_Baud = 0x05;
 1007d2c:	00e10034 	movhi	r3,33792
 1007d30:	18c08d04 	addi	r3,r3,564
 1007d34:	00800144 	movi	r2,5
 1007d38:	18800005 	stb	r2,0(r3)
	touchscreen_Control = 0x15;
 1007d3c:	00e10034 	movhi	r3,33792
 1007d40:	18c08c04 	addi	r3,r3,560
 1007d44:	00800544 	movi	r2,21
 1007d48:	18800005 	stb	r2,0(r3)

	char cmd[3];
	cmd[0] = 0x55;
 1007d4c:	00801544 	movi	r2,85
 1007d50:	e0bfff05 	stb	r2,-4(fp)
	cmd[1] = 0x01;
 1007d54:	00800044 	movi	r2,1
 1007d58:	e0bfff45 	stb	r2,-3(fp)
	cmd[2] = 0x12;
 1007d5c:	00800484 	movi	r2,18
 1007d60:	e0bfff85 	stb	r2,-2(fp)

	while (touchscreen_Status & 0x02 != 0x02) {
 1007d64:	00a10034 	movhi	r2,33792
 1007d68:	10808c04 	addi	r2,r2,560
 1007d6c:	10800003 	ldbu	r2,0(r2)
	}
	touchscreen_TxData = cmd[0]; //0x68
 1007d70:	00e10034 	movhi	r3,33792
 1007d74:	18c08c84 	addi	r3,r3,562
 1007d78:	e0bfff03 	ldbu	r2,-4(fp)
 1007d7c:	18800005 	stb	r2,0(r3)

	while (touchscreen_Status & 0x02 != 0x02) {
 1007d80:	00a10034 	movhi	r2,33792
 1007d84:	10808c04 	addi	r2,r2,560
 1007d88:	10800003 	ldbu	r2,0(r2)
	}
	touchscreen_TxData = cmd[1];
 1007d8c:	00e10034 	movhi	r3,33792
 1007d90:	18c08c84 	addi	r3,r3,562
 1007d94:	e0bfff43 	ldbu	r2,-3(fp)
 1007d98:	18800005 	stb	r2,0(r3)

	while (touchscreen_Status & 0x02 != 0x02) {
 1007d9c:	00a10034 	movhi	r2,33792
 1007da0:	10808c04 	addi	r2,r2,560
 1007da4:	10800003 	ldbu	r2,0(r2)
	}
	touchscreen_TxData = cmd[2];
 1007da8:	00e10034 	movhi	r3,33792
 1007dac:	18c08c84 	addi	r3,r3,562
 1007db0:	e0bfff83 	ldbu	r2,-2(fp)
 1007db4:	18800005 	stb	r2,0(r3)

	putchartouch(0x51);
 1007db8:	01001444 	movi	r4,81
 1007dbc:	10082700 	call	1008270 <putchartouch>
}
 1007dc0:	e037883a 	mov	sp,fp
 1007dc4:	dfc00117 	ldw	ra,4(sp)
 1007dc8:	df000017 	ldw	fp,0(sp)
 1007dcc:	dec00204 	addi	sp,sp,8
 1007dd0:	f800283a 	ret

01007dd4 <ScreenTouched>:

int ScreenTouched(void)
{
 1007dd4:	deffff04 	addi	sp,sp,-4
 1007dd8:	df000015 	stw	fp,0(sp)
 1007ddc:	d839883a 	mov	fp,sp
	return ((touchscreen_Status & 0x1) == 0x1);
 1007de0:	00a10034 	movhi	r2,33792
 1007de4:	10808c04 	addi	r2,r2,560
 1007de8:	10800003 	ldbu	r2,0(r2)
 1007dec:	10803fcc 	andi	r2,r2,255
 1007df0:	1080004c 	andi	r2,r2,1
}
 1007df4:	e037883a 	mov	sp,fp
 1007df8:	df000017 	ldw	fp,0(sp)
 1007dfc:	dec00104 	addi	sp,sp,4
 1007e00:	f800283a 	ret

01007e04 <WaitForTouch>:

void WaitForTouch()
{
 1007e04:	defffe04 	addi	sp,sp,-8
 1007e08:	dfc00115 	stw	ra,4(sp)
 1007e0c:	df000015 	stw	fp,0(sp)
 1007e10:	d839883a 	mov	fp,sp
	while (!ScreenTouched()) {
 1007e14:	00000306 	br	1007e24 <WaitForTouch+0x20>
		printf("waiting for screen\n");
 1007e18:	010040b4 	movhi	r4,258
 1007e1c:	211d3104 	addi	r4,r4,29892
 1007e20:	100e0480 	call	100e048 <puts>
	return ((touchscreen_Status & 0x1) == 0x1);
}

void WaitForTouch()
{
	while (!ScreenTouched()) {
 1007e24:	1007dd40 	call	1007dd4 <ScreenTouched>
 1007e28:	1005003a 	cmpeq	r2,r2,zero
 1007e2c:	103ffa1e 	bne	r2,zero,1007e18 <WaitForTouch+0x14>
		printf("waiting for screen\n");
	}
}
 1007e30:	e037883a 	mov	sp,fp
 1007e34:	dfc00117 	ldw	ra,4(sp)
 1007e38:	df000017 	ldw	fp,0(sp)
 1007e3c:	dec00204 	addi	sp,sp,8
 1007e40:	f800283a 	ret

01007e44 <GetPress>:

Point GetPress(void) {
 1007e44:	defff004 	addi	sp,sp,-64
 1007e48:	dfc00f15 	stw	ra,60(sp)
 1007e4c:	df000e15 	stw	fp,56(sp)
 1007e50:	df000e04 	addi	fp,sp,56
	Point p1;
	p1.x = -1;
 1007e54:	00bfffc4 	movi	r2,-1
 1007e58:	e0bffe15 	stw	r2,-8(fp)
	p1.y = -1;
 1007e5c:	00bfffc4 	movi	r2,-1
 1007e60:	e0bfff15 	stw	r2,-4(fp)
	int x1, x2, y1, y2;
	int x, y;
	double xf, yf;

	int coord;
	coord = getchartouch();
 1007e64:	10082b00 	call	10082b0 <getchartouch>
 1007e68:	e0bff315 	stw	r2,-52(fp)

	if (coord == 0x81) {
 1007e6c:	e0bff317 	ldw	r2,-52(fp)
 1007e70:	10802058 	cmpnei	r2,r2,129
 1007e74:	1000701e 	bne	r2,zero,1008038 <GetPress+0x1f4>

		{
			x1 = getchartouch() & 0x7f;
 1007e78:	10082b00 	call	10082b0 <getchartouch>
 1007e7c:	10801fcc 	andi	r2,r2,127
 1007e80:	e0bffd15 	stw	r2,-12(fp)
			x2 = getchartouch() & 0x1f;
 1007e84:	10082b00 	call	10082b0 <getchartouch>
 1007e88:	108007cc 	andi	r2,r2,31
 1007e8c:	e0bffc15 	stw	r2,-16(fp)
			y1 = getchartouch() & 0x7f;
 1007e90:	10082b00 	call	10082b0 <getchartouch>
 1007e94:	10801fcc 	andi	r2,r2,127
 1007e98:	e0bffb15 	stw	r2,-20(fp)
			y2 = getchartouch() & 0x1f;
 1007e9c:	10082b00 	call	10082b0 <getchartouch>
 1007ea0:	108007cc 	andi	r2,r2,31
 1007ea4:	e0bffa15 	stw	r2,-24(fp)
		}
		x = x1 | (x2 << 7);
 1007ea8:	e0bffc17 	ldw	r2,-16(fp)
 1007eac:	100691fa 	slli	r3,r2,7
 1007eb0:	e0bffd17 	ldw	r2,-12(fp)
 1007eb4:	1884b03a 	or	r2,r3,r2
 1007eb8:	e0bff915 	stw	r2,-28(fp)
		y = y1 | (y2 << 7);
 1007ebc:	e0bffa17 	ldw	r2,-24(fp)
 1007ec0:	100691fa 	slli	r3,r2,7
 1007ec4:	e0bffb17 	ldw	r2,-20(fp)
 1007ec8:	1884b03a 	or	r2,r3,r2
 1007ecc:	e0bff815 	stw	r2,-32(fp)

		xf = (x - 108) / (4.89875);
 1007ed0:	e0bff917 	ldw	r2,-28(fp)
 1007ed4:	113fe504 	addi	r4,r2,-108
 1007ed8:	100ca140 	call	100ca14 <__floatsidf>
 1007edc:	100b883a 	mov	r5,r2
 1007ee0:	180d883a 	mov	r6,r3
 1007ee4:	2809883a 	mov	r4,r5
 1007ee8:	300b883a 	mov	r5,r6
 1007eec:	01bae174 	movhi	r6,60293
 1007ef0:	3187ae04 	addi	r6,r6,7864
 1007ef4:	01d00534 	movhi	r7,16404
 1007ef8:	39e61444 	addi	r7,r7,-26543
 1007efc:	100c59c0 	call	100c59c <__divdf3>
 1007f00:	1009883a 	mov	r4,r2
 1007f04:	180b883a 	mov	r5,r3
 1007f08:	e13ff615 	stw	r4,-40(fp)
 1007f0c:	e17ff715 	stw	r5,-36(fp)
		yf = (y - 260) / (7.84167);
 1007f10:	e0bff817 	ldw	r2,-32(fp)
 1007f14:	113fbf04 	addi	r4,r2,-260
 1007f18:	100ca140 	call	100ca14 <__floatsidf>
 1007f1c:	100b883a 	mov	r5,r2
 1007f20:	180d883a 	mov	r6,r3
 1007f24:	2809883a 	mov	r4,r5
 1007f28:	300b883a 	mov	r5,r6
 1007f2c:	01af6434 	movhi	r6,48528
 1007f30:	318639c4 	addi	r6,r6,6375
 1007f34:	01d007f4 	movhi	r7,16415
 1007f38:	39d77784 	addi	r7,r7,24030
 1007f3c:	100c59c0 	call	100c59c <__divdf3>
 1007f40:	1009883a 	mov	r4,r2
 1007f44:	180b883a 	mov	r5,r3
 1007f48:	e13ff415 	stw	r4,-48(fp)
 1007f4c:	e17ff515 	stw	r5,-44(fp)
		if (xf < 0) {
 1007f50:	e13ff617 	ldw	r4,-40(fp)
 1007f54:	e17ff717 	ldw	r5,-36(fp)
 1007f58:	000d883a 	mov	r6,zero
 1007f5c:	000f883a 	mov	r7,zero
 1007f60:	100c98c0 	call	100c98c <__ltdf2>
 1007f64:	1004803a 	cmplt	r2,r2,zero
 1007f68:	1000011e 	bne	r2,zero,1007f70 <GetPress+0x12c>
 1007f6c:	00000206 	br	1007f78 <GetPress+0x134>
			xf = 0;
 1007f70:	e03ff615 	stw	zero,-40(fp)
 1007f74:	e03ff715 	stw	zero,-36(fp)
		}
		if (xf > 800) {
 1007f78:	e13ff617 	ldw	r4,-40(fp)
 1007f7c:	e17ff717 	ldw	r5,-36(fp)
 1007f80:	000d883a 	mov	r6,zero
 1007f84:	01d02274 	movhi	r7,16521
 1007f88:	100c87c0 	call	100c87c <__gtdf2>
 1007f8c:	10800048 	cmpgei	r2,r2,1
 1007f90:	1000011e 	bne	r2,zero,1007f98 <GetPress+0x154>
 1007f94:	00000306 	br	1007fa4 <GetPress+0x160>
			xf = 800;
 1007f98:	e03ff615 	stw	zero,-40(fp)
 1007f9c:	00902274 	movhi	r2,16521
 1007fa0:	e0bff715 	stw	r2,-36(fp)
		}
		if (yf < 0) {
 1007fa4:	e13ff417 	ldw	r4,-48(fp)
 1007fa8:	e17ff517 	ldw	r5,-44(fp)
 1007fac:	000d883a 	mov	r6,zero
 1007fb0:	000f883a 	mov	r7,zero
 1007fb4:	100c98c0 	call	100c98c <__ltdf2>
 1007fb8:	1004803a 	cmplt	r2,r2,zero
 1007fbc:	1000011e 	bne	r2,zero,1007fc4 <GetPress+0x180>
 1007fc0:	00000206 	br	1007fcc <GetPress+0x188>
			yf = 0;
 1007fc4:	e03ff415 	stw	zero,-48(fp)
 1007fc8:	e03ff515 	stw	zero,-44(fp)
		}
		if (yf > 480) {
 1007fcc:	e13ff417 	ldw	r4,-48(fp)
 1007fd0:	e17ff517 	ldw	r5,-44(fp)
 1007fd4:	000d883a 	mov	r6,zero
 1007fd8:	01d01fb4 	movhi	r7,16510
 1007fdc:	100c87c0 	call	100c87c <__gtdf2>
 1007fe0:	10800048 	cmpgei	r2,r2,1
 1007fe4:	1000011e 	bne	r2,zero,1007fec <GetPress+0x1a8>
 1007fe8:	00000306 	br	1007ff8 <GetPress+0x1b4>
			yf = 480;
 1007fec:	e03ff415 	stw	zero,-48(fp)
 1007ff0:	00901fb4 	movhi	r2,16510
 1007ff4:	e0bff515 	stw	r2,-44(fp)
		}
		printf("press %lf %lf \n", xf, yf);
 1007ff8:	e0bff517 	ldw	r2,-44(fp)
 1007ffc:	d8800015 	stw	r2,0(sp)
 1008000:	e1fff417 	ldw	r7,-48(fp)
 1008004:	010040b4 	movhi	r4,258
 1008008:	211d3604 	addi	r4,r4,29912
 100800c:	e17ff617 	ldw	r5,-40(fp)
 1008010:	e1bff717 	ldw	r6,-36(fp)
 1008014:	100df0c0 	call	100df0c <printf>
		p1.x = xf;
 1008018:	e13ff617 	ldw	r4,-40(fp)
 100801c:	e17ff717 	ldw	r5,-36(fp)
 1008020:	100cb0c0 	call	100cb0c <__fixdfsi>
 1008024:	e0bffe15 	stw	r2,-8(fp)
		p1.y = yf;
 1008028:	e13ff417 	ldw	r4,-48(fp)
 100802c:	e17ff517 	ldw	r5,-44(fp)
 1008030:	100cb0c0 	call	100cb0c <__fixdfsi>
 1008034:	e0bfff15 	stw	r2,-4(fp)
	}

	return p1;
 1008038:	e17ffe17 	ldw	r5,-8(fp)
 100803c:	e1bfff17 	ldw	r6,-4(fp)
 1008040:	2807883a 	mov	r3,r5
 1008044:	3009883a 	mov	r4,r6
}
 1008048:	1805883a 	mov	r2,r3
 100804c:	2007883a 	mov	r3,r4
 1008050:	e037883a 	mov	sp,fp
 1008054:	dfc00117 	ldw	ra,4(sp)
 1008058:	df000017 	ldw	fp,0(sp)
 100805c:	dec00204 	addi	sp,sp,8
 1008060:	f800283a 	ret

01008064 <GetRelease>:

Point GetRelease(void) {
 1008064:	defff104 	addi	sp,sp,-60
 1008068:	dfc00e15 	stw	ra,56(sp)
 100806c:	df000d15 	stw	fp,52(sp)
 1008070:	df000d04 	addi	fp,sp,52
	Point p1;
	p1.x = -1;
 1008074:	00bfffc4 	movi	r2,-1
 1008078:	e0bffe15 	stw	r2,-8(fp)
	 p1.y = -1;
 100807c:	00bfffc4 	movi	r2,-1
 1008080:	e0bfff15 	stw	r2,-4(fp)
	int x1, x2, y1, y2;
	int x, y;
	double xf, yf;

	int coord;
	coord = getchartouch();
 1008084:	10082b00 	call	10082b0 <getchartouch>
 1008088:	e0bff315 	stw	r2,-52(fp)

	if (coord == 0x80) {
 100808c:	e0bff317 	ldw	r2,-52(fp)
 1008090:	10802018 	cmpnei	r2,r2,128
 1008094:	10006b1e 	bne	r2,zero,1008244 <GetRelease+0x1e0>
		x1 = getchartouch() & 0x7f;
 1008098:	10082b00 	call	10082b0 <getchartouch>
 100809c:	10801fcc 	andi	r2,r2,127
 10080a0:	e0bffd15 	stw	r2,-12(fp)
		x2 = getchartouch() & 0x1f;
 10080a4:	10082b00 	call	10082b0 <getchartouch>
 10080a8:	108007cc 	andi	r2,r2,31
 10080ac:	e0bffc15 	stw	r2,-16(fp)
		y1 = getchartouch() & 0x7f;
 10080b0:	10082b00 	call	10082b0 <getchartouch>
 10080b4:	10801fcc 	andi	r2,r2,127
 10080b8:	e0bffb15 	stw	r2,-20(fp)
		y2 = getchartouch() & 0x1f;
 10080bc:	10082b00 	call	10082b0 <getchartouch>
 10080c0:	108007cc 	andi	r2,r2,31
 10080c4:	e0bffa15 	stw	r2,-24(fp)

		x = x1 | (x2 << 7);
 10080c8:	e0bffc17 	ldw	r2,-16(fp)
 10080cc:	100691fa 	slli	r3,r2,7
 10080d0:	e0bffd17 	ldw	r2,-12(fp)
 10080d4:	1884b03a 	or	r2,r3,r2
 10080d8:	e0bff915 	stw	r2,-28(fp)
		y = y1 | (y2 << 7);
 10080dc:	e0bffa17 	ldw	r2,-24(fp)
 10080e0:	100691fa 	slli	r3,r2,7
 10080e4:	e0bffb17 	ldw	r2,-20(fp)
 10080e8:	1884b03a 	or	r2,r3,r2
 10080ec:	e0bff815 	stw	r2,-32(fp)
		xf = (x - 108) / (4.89875);
 10080f0:	e0bff917 	ldw	r2,-28(fp)
 10080f4:	113fe504 	addi	r4,r2,-108
 10080f8:	100ca140 	call	100ca14 <__floatsidf>
 10080fc:	100b883a 	mov	r5,r2
 1008100:	180d883a 	mov	r6,r3
 1008104:	2809883a 	mov	r4,r5
 1008108:	300b883a 	mov	r5,r6
 100810c:	01bae174 	movhi	r6,60293
 1008110:	3187ae04 	addi	r6,r6,7864
 1008114:	01d00534 	movhi	r7,16404
 1008118:	39e61444 	addi	r7,r7,-26543
 100811c:	100c59c0 	call	100c59c <__divdf3>
 1008120:	1009883a 	mov	r4,r2
 1008124:	180b883a 	mov	r5,r3
 1008128:	e13ff615 	stw	r4,-40(fp)
 100812c:	e17ff715 	stw	r5,-36(fp)
		yf = (y - 260) / (7.84167);
 1008130:	e0bff817 	ldw	r2,-32(fp)
 1008134:	113fbf04 	addi	r4,r2,-260
 1008138:	100ca140 	call	100ca14 <__floatsidf>
 100813c:	100b883a 	mov	r5,r2
 1008140:	180d883a 	mov	r6,r3
 1008144:	2809883a 	mov	r4,r5
 1008148:	300b883a 	mov	r5,r6
 100814c:	01af6434 	movhi	r6,48528
 1008150:	318639c4 	addi	r6,r6,6375
 1008154:	01d007f4 	movhi	r7,16415
 1008158:	39d77784 	addi	r7,r7,24030
 100815c:	100c59c0 	call	100c59c <__divdf3>
 1008160:	1009883a 	mov	r4,r2
 1008164:	180b883a 	mov	r5,r3
 1008168:	e13ff415 	stw	r4,-48(fp)
 100816c:	e17ff515 	stw	r5,-44(fp)
		if (xf < 0) {
 1008170:	e13ff617 	ldw	r4,-40(fp)
 1008174:	e17ff717 	ldw	r5,-36(fp)
 1008178:	000d883a 	mov	r6,zero
 100817c:	000f883a 	mov	r7,zero
 1008180:	100c98c0 	call	100c98c <__ltdf2>
 1008184:	1004803a 	cmplt	r2,r2,zero
 1008188:	1000011e 	bne	r2,zero,1008190 <GetRelease+0x12c>
 100818c:	00000206 	br	1008198 <GetRelease+0x134>
			xf = 0;
 1008190:	e03ff615 	stw	zero,-40(fp)
 1008194:	e03ff715 	stw	zero,-36(fp)
		}
		if (xf > 800) {
 1008198:	e13ff617 	ldw	r4,-40(fp)
 100819c:	e17ff717 	ldw	r5,-36(fp)
 10081a0:	000d883a 	mov	r6,zero
 10081a4:	01d02274 	movhi	r7,16521
 10081a8:	100c87c0 	call	100c87c <__gtdf2>
 10081ac:	10800048 	cmpgei	r2,r2,1
 10081b0:	1000011e 	bne	r2,zero,10081b8 <GetRelease+0x154>
 10081b4:	00000306 	br	10081c4 <GetRelease+0x160>
			xf = 800;
 10081b8:	e03ff615 	stw	zero,-40(fp)
 10081bc:	00902274 	movhi	r2,16521
 10081c0:	e0bff715 	stw	r2,-36(fp)
		}
		if (yf < 0) {
 10081c4:	e13ff417 	ldw	r4,-48(fp)
 10081c8:	e17ff517 	ldw	r5,-44(fp)
 10081cc:	000d883a 	mov	r6,zero
 10081d0:	000f883a 	mov	r7,zero
 10081d4:	100c98c0 	call	100c98c <__ltdf2>
 10081d8:	1004803a 	cmplt	r2,r2,zero
 10081dc:	1000011e 	bne	r2,zero,10081e4 <GetRelease+0x180>
 10081e0:	00000206 	br	10081ec <GetRelease+0x188>
			yf = 0;
 10081e4:	e03ff415 	stw	zero,-48(fp)
 10081e8:	e03ff515 	stw	zero,-44(fp)
		}
		if (yf > 480) {
 10081ec:	e13ff417 	ldw	r4,-48(fp)
 10081f0:	e17ff517 	ldw	r5,-44(fp)
 10081f4:	000d883a 	mov	r6,zero
 10081f8:	01d01fb4 	movhi	r7,16510
 10081fc:	100c87c0 	call	100c87c <__gtdf2>
 1008200:	10800048 	cmpgei	r2,r2,1
 1008204:	1000011e 	bne	r2,zero,100820c <GetRelease+0x1a8>
 1008208:	00000306 	br	1008218 <GetRelease+0x1b4>
			yf = 480;
 100820c:	e03ff415 	stw	zero,-48(fp)
 1008210:	00901fb4 	movhi	r2,16510
 1008214:	e0bff515 	stw	r2,-44(fp)
		}

		printf("release\n");
 1008218:	010040b4 	movhi	r4,258
 100821c:	211d3a04 	addi	r4,r4,29928
 1008220:	100e0480 	call	100e048 <puts>
		p1.x = xf;
 1008224:	e13ff617 	ldw	r4,-40(fp)
 1008228:	e17ff717 	ldw	r5,-36(fp)
 100822c:	100cb0c0 	call	100cb0c <__fixdfsi>
 1008230:	e0bffe15 	stw	r2,-8(fp)
		p1.y = yf;
 1008234:	e13ff417 	ldw	r4,-48(fp)
 1008238:	e17ff517 	ldw	r5,-44(fp)
 100823c:	100cb0c0 	call	100cb0c <__fixdfsi>
 1008240:	e0bfff15 	stw	r2,-4(fp)

	}
	return p1;
 1008244:	e17ffe17 	ldw	r5,-8(fp)
 1008248:	e1bfff17 	ldw	r6,-4(fp)
 100824c:	2807883a 	mov	r3,r5
 1008250:	3009883a 	mov	r4,r6

}
 1008254:	1805883a 	mov	r2,r3
 1008258:	2007883a 	mov	r3,r4
 100825c:	e037883a 	mov	sp,fp
 1008260:	dfc00117 	ldw	ra,4(sp)
 1008264:	df000017 	ldw	fp,0(sp)
 1008268:	dec00204 	addi	sp,sp,8
 100826c:	f800283a 	ret

01008270 <putchartouch>:

int putchartouch(int c) {
 1008270:	defffe04 	addi	sp,sp,-8
 1008274:	df000115 	stw	fp,4(sp)
 1008278:	df000104 	addi	fp,sp,4
 100827c:	e13fff15 	stw	r4,-4(fp)

	while (touchscreen_Status & 0x02 != 0x02) {
 1008280:	00a10034 	movhi	r2,33792
 1008284:	10808c04 	addi	r2,r2,560
 1008288:	10800003 	ldbu	r2,0(r2)
	}

	touchscreen_TxData = c;
 100828c:	00e10034 	movhi	r3,33792
 1008290:	18c08c84 	addi	r3,r3,562
 1008294:	e0bfff17 	ldw	r2,-4(fp)
 1008298:	18800005 	stb	r2,0(r3)
	return c;
 100829c:	e0bfff17 	ldw	r2,-4(fp)
}
 10082a0:	e037883a 	mov	sp,fp
 10082a4:	df000017 	ldw	fp,0(sp)
 10082a8:	dec00104 	addi	sp,sp,4
 10082ac:	f800283a 	ret

010082b0 <getchartouch>:

int getchartouch(void) {
 10082b0:	deffff04 	addi	sp,sp,-4
 10082b4:	df000015 	stw	fp,0(sp)
 10082b8:	d839883a 	mov	fp,sp

	while (!((touchscreen_Status & 0x1) == 0x1)) {
 10082bc:	00a10034 	movhi	r2,33792
 10082c0:	10808c04 	addi	r2,r2,560
 10082c4:	10800003 	ldbu	r2,0(r2)
 10082c8:	10803fcc 	andi	r2,r2,255
 10082cc:	1080004c 	andi	r2,r2,1
 10082d0:	1005003a 	cmpeq	r2,r2,zero
 10082d4:	103ff91e 	bne	r2,zero,10082bc <getchartouch+0xc>
	}

	return touchscreen_RxData;
 10082d8:	00a10034 	movhi	r2,33792
 10082dc:	10808c84 	addi	r2,r2,562
 10082e0:	10800003 	ldbu	r2,0(r2)
 10082e4:	10803fcc 	andi	r2,r2,255
}
 10082e8:	e037883a 	mov	sp,fp
 10082ec:	df000017 	ldw	fp,0(sp)
 10082f0:	dec00104 	addi	sp,sp,4
 10082f4:	f800283a 	ret

010082f8 <cos>:
 10082f8:	00a00034 	movhi	r2,32768
 10082fc:	10bfffc4 	addi	r2,r2,-1
 1008300:	defffa04 	addi	sp,sp,-24
 1008304:	114c703a 	and	r6,r2,r5
 1008308:	008ffa74 	movhi	r2,16361
 100830c:	10887ec4 	addi	r2,r2,8699
 1008310:	dfc00515 	stw	ra,20(sp)
 1008314:	2011883a 	mov	r8,r4
 1008318:	1180210e 	bge	r2,r6,10083a0 <cos+0xa8>
 100831c:	009ffc34 	movhi	r2,32752
 1008320:	10bfffc4 	addi	r2,r2,-1
 1008324:	11800a0e 	bge	r2,r6,1008350 <cos+0x58>
 1008328:	280f883a 	mov	r7,r5
 100832c:	400d883a 	mov	r6,r8
 1008330:	100c0e40 	call	100c0e4 <__subdf3>
 1008334:	100d883a 	mov	r6,r2
 1008338:	180f883a 	mov	r7,r3
 100833c:	3005883a 	mov	r2,r6
 1008340:	3807883a 	mov	r3,r7
 1008344:	dfc00517 	ldw	ra,20(sp)
 1008348:	dec00604 	addi	sp,sp,24
 100834c:	f800283a 	ret
 1008350:	d9800104 	addi	r6,sp,4
 1008354:	1008a500 	call	1008a50 <__ieee754_rem_pio2>
 1008358:	10c000cc 	andi	r3,r2,3
 100835c:	01000044 	movi	r4,1
 1008360:	19001926 	beq	r3,r4,10083c8 <cos+0xd0>
 1008364:	00800084 	movi	r2,2
 1008368:	18803126 	beq	r3,r2,1008430 <cos+0x138>
 100836c:	1800231e 	bne	r3,zero,10083fc <cos+0x104>
 1008370:	d8800117 	ldw	r2,4(sp)
 1008374:	da000317 	ldw	r8,12(sp)
 1008378:	d8c00217 	ldw	r3,8(sp)
 100837c:	da400417 	ldw	r9,16(sp)
 1008380:	400d883a 	mov	r6,r8
 1008384:	180b883a 	mov	r5,r3
 1008388:	480f883a 	mov	r7,r9
 100838c:	1009883a 	mov	r4,r2
 1008390:	10095400 	call	1009540 <__kernel_cos>
 1008394:	100d883a 	mov	r6,r2
 1008398:	180f883a 	mov	r7,r3
 100839c:	003fe706 	br	100833c <cos+0x44>
 10083a0:	000d883a 	mov	r6,zero
 10083a4:	000f883a 	mov	r7,zero
 10083a8:	10095400 	call	1009540 <__kernel_cos>
 10083ac:	100d883a 	mov	r6,r2
 10083b0:	180f883a 	mov	r7,r3
 10083b4:	3005883a 	mov	r2,r6
 10083b8:	3807883a 	mov	r3,r7
 10083bc:	dfc00517 	ldw	ra,20(sp)
 10083c0:	dec00604 	addi	sp,sp,24
 10083c4:	f800283a 	ret
 10083c8:	d8800117 	ldw	r2,4(sp)
 10083cc:	da000317 	ldw	r8,12(sp)
 10083d0:	d8c00217 	ldw	r3,8(sp)
 10083d4:	da400417 	ldw	r9,16(sp)
 10083d8:	d9000015 	stw	r4,0(sp)
 10083dc:	400d883a 	mov	r6,r8
 10083e0:	480f883a 	mov	r7,r9
 10083e4:	180b883a 	mov	r5,r3
 10083e8:	1009883a 	mov	r4,r2
 10083ec:	100a8e80 	call	100a8e8 <__kernel_sin>
 10083f0:	100d883a 	mov	r6,r2
 10083f4:	19e0003c 	xorhi	r7,r3,32768
 10083f8:	003fd006 	br	100833c <cos+0x44>
 10083fc:	d8800117 	ldw	r2,4(sp)
 1008400:	da000317 	ldw	r8,12(sp)
 1008404:	d8c00217 	ldw	r3,8(sp)
 1008408:	da400417 	ldw	r9,16(sp)
 100840c:	d9000015 	stw	r4,0(sp)
 1008410:	400d883a 	mov	r6,r8
 1008414:	480f883a 	mov	r7,r9
 1008418:	180b883a 	mov	r5,r3
 100841c:	1009883a 	mov	r4,r2
 1008420:	100a8e80 	call	100a8e8 <__kernel_sin>
 1008424:	100d883a 	mov	r6,r2
 1008428:	180f883a 	mov	r7,r3
 100842c:	003fc306 	br	100833c <cos+0x44>
 1008430:	d8800117 	ldw	r2,4(sp)
 1008434:	da000317 	ldw	r8,12(sp)
 1008438:	d8c00217 	ldw	r3,8(sp)
 100843c:	da400417 	ldw	r9,16(sp)
 1008440:	400d883a 	mov	r6,r8
 1008444:	180b883a 	mov	r5,r3
 1008448:	480f883a 	mov	r7,r9
 100844c:	1009883a 	mov	r4,r2
 1008450:	10095400 	call	1009540 <__kernel_cos>
 1008454:	100d883a 	mov	r6,r2
 1008458:	19e0003c 	xorhi	r7,r3,32768
 100845c:	003fb706 	br	100833c <cos+0x44>

01008460 <sin>:
 1008460:	00a00034 	movhi	r2,32768
 1008464:	10bfffc4 	addi	r2,r2,-1
 1008468:	defffa04 	addi	sp,sp,-24
 100846c:	114c703a 	and	r6,r2,r5
 1008470:	008ffa74 	movhi	r2,16361
 1008474:	10887ec4 	addi	r2,r2,8699
 1008478:	dfc00515 	stw	ra,20(sp)
 100847c:	2011883a 	mov	r8,r4
 1008480:	1180220e 	bge	r2,r6,100850c <sin+0xac>
 1008484:	009ffc34 	movhi	r2,32752
 1008488:	10bfffc4 	addi	r2,r2,-1
 100848c:	11800a0e 	bge	r2,r6,10084b8 <sin+0x58>
 1008490:	280f883a 	mov	r7,r5
 1008494:	400d883a 	mov	r6,r8
 1008498:	100c0e40 	call	100c0e4 <__subdf3>
 100849c:	100d883a 	mov	r6,r2
 10084a0:	180f883a 	mov	r7,r3
 10084a4:	3005883a 	mov	r2,r6
 10084a8:	3807883a 	mov	r3,r7
 10084ac:	dfc00517 	ldw	ra,20(sp)
 10084b0:	dec00604 	addi	sp,sp,24
 10084b4:	f800283a 	ret
 10084b8:	d9800104 	addi	r6,sp,4
 10084bc:	1008a500 	call	1008a50 <__ieee754_rem_pio2>
 10084c0:	10c000cc 	andi	r3,r2,3
 10084c4:	01000044 	movi	r4,1
 10084c8:	19001b26 	beq	r3,r4,1008538 <sin+0xd8>
 10084cc:	00800084 	movi	r2,2
 10084d0:	18803126 	beq	r3,r2,1008598 <sin+0x138>
 10084d4:	1800241e 	bne	r3,zero,1008568 <sin+0x108>
 10084d8:	d8800117 	ldw	r2,4(sp)
 10084dc:	da000317 	ldw	r8,12(sp)
 10084e0:	d8c00217 	ldw	r3,8(sp)
 10084e4:	da400417 	ldw	r9,16(sp)
 10084e8:	d9000015 	stw	r4,0(sp)
 10084ec:	400d883a 	mov	r6,r8
 10084f0:	480f883a 	mov	r7,r9
 10084f4:	180b883a 	mov	r5,r3
 10084f8:	1009883a 	mov	r4,r2
 10084fc:	100a8e80 	call	100a8e8 <__kernel_sin>
 1008500:	100d883a 	mov	r6,r2
 1008504:	180f883a 	mov	r7,r3
 1008508:	003fe606 	br	10084a4 <sin+0x44>
 100850c:	000d883a 	mov	r6,zero
 1008510:	000f883a 	mov	r7,zero
 1008514:	d8000015 	stw	zero,0(sp)
 1008518:	100a8e80 	call	100a8e8 <__kernel_sin>
 100851c:	100d883a 	mov	r6,r2
 1008520:	180f883a 	mov	r7,r3
 1008524:	3005883a 	mov	r2,r6
 1008528:	3807883a 	mov	r3,r7
 100852c:	dfc00517 	ldw	ra,20(sp)
 1008530:	dec00604 	addi	sp,sp,24
 1008534:	f800283a 	ret
 1008538:	d8800117 	ldw	r2,4(sp)
 100853c:	da000317 	ldw	r8,12(sp)
 1008540:	d8c00217 	ldw	r3,8(sp)
 1008544:	da400417 	ldw	r9,16(sp)
 1008548:	400d883a 	mov	r6,r8
 100854c:	180b883a 	mov	r5,r3
 1008550:	480f883a 	mov	r7,r9
 1008554:	1009883a 	mov	r4,r2
 1008558:	10095400 	call	1009540 <__kernel_cos>
 100855c:	100d883a 	mov	r6,r2
 1008560:	180f883a 	mov	r7,r3
 1008564:	003fcf06 	br	10084a4 <sin+0x44>
 1008568:	d8800117 	ldw	r2,4(sp)
 100856c:	da000317 	ldw	r8,12(sp)
 1008570:	d8c00217 	ldw	r3,8(sp)
 1008574:	da400417 	ldw	r9,16(sp)
 1008578:	400d883a 	mov	r6,r8
 100857c:	180b883a 	mov	r5,r3
 1008580:	480f883a 	mov	r7,r9
 1008584:	1009883a 	mov	r4,r2
 1008588:	10095400 	call	1009540 <__kernel_cos>
 100858c:	100d883a 	mov	r6,r2
 1008590:	19e0003c 	xorhi	r7,r3,32768
 1008594:	003fc306 	br	10084a4 <sin+0x44>
 1008598:	d8800117 	ldw	r2,4(sp)
 100859c:	da000317 	ldw	r8,12(sp)
 10085a0:	d8c00217 	ldw	r3,8(sp)
 10085a4:	da400417 	ldw	r9,16(sp)
 10085a8:	d9000015 	stw	r4,0(sp)
 10085ac:	400d883a 	mov	r6,r8
 10085b0:	480f883a 	mov	r7,r9
 10085b4:	180b883a 	mov	r5,r3
 10085b8:	1009883a 	mov	r4,r2
 10085bc:	100a8e80 	call	100a8e8 <__kernel_sin>
 10085c0:	100d883a 	mov	r6,r2
 10085c4:	19e0003c 	xorhi	r7,r3,32768
 10085c8:	003fb606 	br	10084a4 <sin+0x44>

010085cc <atan2>:
 10085cc:	10087001 	jmpi	1008700 <__ieee754_atan2>

010085d0 <sqrt>:
 10085d0:	defff104 	addi	sp,sp,-60
 10085d4:	dd000d15 	stw	r20,52(sp)
 10085d8:	050040f4 	movhi	r20,259
 10085dc:	a5266f04 	addi	r20,r20,-26180
 10085e0:	dcc00c15 	stw	r19,48(sp)
 10085e4:	dc800b15 	stw	r18,44(sp)
 10085e8:	dc400a15 	stw	r17,40(sp)
 10085ec:	dc000915 	stw	r16,36(sp)
 10085f0:	2025883a 	mov	r18,r4
 10085f4:	dfc00e15 	stw	ra,56(sp)
 10085f8:	2827883a 	mov	r19,r5
 10085fc:	10092780 	call	1009278 <__ieee754_sqrt>
 1008600:	a1000017 	ldw	r4,0(r20)
 1008604:	1021883a 	mov	r16,r2
 1008608:	00bfffc4 	movi	r2,-1
 100860c:	1823883a 	mov	r17,r3
 1008610:	20800a26 	beq	r4,r2,100863c <sqrt+0x6c>
 1008614:	9009883a 	mov	r4,r18
 1008618:	980b883a 	mov	r5,r19
 100861c:	100b4d40 	call	100b4d4 <__isnand>
 1008620:	1000061e 	bne	r2,zero,100863c <sqrt+0x6c>
 1008624:	000d883a 	mov	r6,zero
 1008628:	000f883a 	mov	r7,zero
 100862c:	9009883a 	mov	r4,r18
 1008630:	980b883a 	mov	r5,r19
 1008634:	100c98c0 	call	100c98c <__ltdf2>
 1008638:	10000a16 	blt	r2,zero,1008664 <sqrt+0x94>
 100863c:	8005883a 	mov	r2,r16
 1008640:	8807883a 	mov	r3,r17
 1008644:	dfc00e17 	ldw	ra,56(sp)
 1008648:	dd000d17 	ldw	r20,52(sp)
 100864c:	dcc00c17 	ldw	r19,48(sp)
 1008650:	dc800b17 	ldw	r18,44(sp)
 1008654:	dc400a17 	ldw	r17,40(sp)
 1008658:	dc000917 	ldw	r16,36(sp)
 100865c:	dec00f04 	addi	sp,sp,60
 1008660:	f800283a 	ret
 1008664:	a4000017 	ldw	r16,0(r20)
 1008668:	00800044 	movi	r2,1
 100866c:	00c040b4 	movhi	r3,258
 1008670:	18dd3c04 	addi	r3,r3,29936
 1008674:	d8800015 	stw	r2,0(sp)
 1008678:	d8c00115 	stw	r3,4(sp)
 100867c:	dcc00315 	stw	r19,12(sp)
 1008680:	d8000815 	stw	zero,32(sp)
 1008684:	dc800415 	stw	r18,16(sp)
 1008688:	dcc00515 	stw	r19,20(sp)
 100868c:	dc800215 	stw	r18,8(sp)
 1008690:	80000a1e 	bne	r16,zero,10086bc <sqrt+0xec>
 1008694:	d8000615 	stw	zero,24(sp)
 1008698:	d8000715 	stw	zero,28(sp)
 100869c:	d809883a 	mov	r4,sp
 10086a0:	100b5040 	call	100b504 <matherr>
 10086a4:	10000e26 	beq	r2,zero,10086e0 <sqrt+0x110>
 10086a8:	d8800817 	ldw	r2,32(sp)
 10086ac:	1000101e 	bne	r2,zero,10086f0 <sqrt+0x120>
 10086b0:	dc000617 	ldw	r16,24(sp)
 10086b4:	dc400717 	ldw	r17,28(sp)
 10086b8:	003fe006 	br	100863c <sqrt+0x6c>
 10086bc:	0009883a 	mov	r4,zero
 10086c0:	000d883a 	mov	r6,zero
 10086c4:	000b883a 	mov	r5,zero
 10086c8:	000f883a 	mov	r7,zero
 10086cc:	100c59c0 	call	100c59c <__divdf3>
 10086d0:	d8800615 	stw	r2,24(sp)
 10086d4:	00800084 	movi	r2,2
 10086d8:	d8c00715 	stw	r3,28(sp)
 10086dc:	80bfef1e 	bne	r16,r2,100869c <sqrt+0xcc>
 10086e0:	100d7240 	call	100d724 <__errno>
 10086e4:	00c00844 	movi	r3,33
 10086e8:	10c00015 	stw	r3,0(r2)
 10086ec:	003fee06 	br	10086a8 <sqrt+0xd8>
 10086f0:	100d7240 	call	100d724 <__errno>
 10086f4:	d8c00817 	ldw	r3,32(sp)
 10086f8:	10c00015 	stw	r3,0(r2)
 10086fc:	003fec06 	br	10086b0 <sqrt+0xe0>

01008700 <__ieee754_atan2>:
 1008700:	3015883a 	mov	r10,r6
 1008704:	3019883a 	mov	r12,r6
 1008708:	018dc83a 	sub	r6,zero,r6
 100870c:	518cb03a 	or	r6,r10,r6
 1008710:	300cd7fa 	srli	r6,r6,31
 1008714:	03a00034 	movhi	r14,32768
 1008718:	73bfffc4 	addi	r14,r14,-1
 100871c:	3b9e703a 	and	r15,r7,r14
 1008720:	defffc04 	addi	sp,sp,-16
 1008724:	33ccb03a 	or	r6,r6,r15
 1008728:	035ffc34 	movhi	r13,32752
 100872c:	dc000015 	stw	r16,0(sp)
 1008730:	dfc00315 	stw	ra,12(sp)
 1008734:	dc800215 	stw	r18,8(sp)
 1008738:	dc400115 	stw	r17,4(sp)
 100873c:	3817883a 	mov	r11,r7
 1008740:	2011883a 	mov	r8,r4
 1008744:	2813883a 	mov	r9,r5
 1008748:	3821883a 	mov	r16,r7
 100874c:	69800736 	bltu	r13,r6,100876c <__ieee754_atan2+0x6c>
 1008750:	0105c83a 	sub	r2,zero,r4
 1008754:	2084b03a 	or	r2,r4,r2
 1008758:	1004d7fa 	srli	r2,r2,31
 100875c:	2b8c703a 	and	r6,r5,r14
 1008760:	2823883a 	mov	r17,r5
 1008764:	1184b03a 	or	r2,r2,r6
 1008768:	68800d2e 	bgeu	r13,r2,10087a0 <__ieee754_atan2+0xa0>
 100876c:	4009883a 	mov	r4,r8
 1008770:	500d883a 	mov	r6,r10
 1008774:	100c1640 	call	100c164 <__adddf3>
 1008778:	1011883a 	mov	r8,r2
 100877c:	1813883a 	mov	r9,r3
 1008780:	4005883a 	mov	r2,r8
 1008784:	4807883a 	mov	r3,r9
 1008788:	dfc00317 	ldw	ra,12(sp)
 100878c:	dc800217 	ldw	r18,8(sp)
 1008790:	dc400117 	ldw	r17,4(sp)
 1008794:	dc000017 	ldw	r16,0(sp)
 1008798:	dec00404 	addi	sp,sp,16
 100879c:	f800283a 	ret
 10087a0:	00b00434 	movhi	r2,49168
 10087a4:	3885883a 	add	r2,r7,r2
 10087a8:	5084b03a 	or	r2,r10,r2
 10087ac:	10001026 	beq	r2,zero,10087f0 <__ieee754_atan2+0xf0>
 10087b0:	3805d7ba 	srai	r2,r7,30
 10087b4:	2806d7fa 	srli	r3,r5,31
 10087b8:	2188b03a 	or	r4,r4,r6
 10087bc:	1080008c 	andi	r2,r2,2
 10087c0:	18a4b03a 	or	r18,r3,r2
 10087c4:	00800084 	movi	r2,2
 10087c8:	2000101e 	bne	r4,zero,100880c <__ieee754_atan2+0x10c>
 10087cc:	90803826 	beq	r18,r2,10088b0 <__ieee754_atan2+0x1b0>
 10087d0:	14bfeb0e 	bge	r2,r18,1008780 <__ieee754_atan2+0x80>
 10087d4:	008000c4 	movi	r2,3
 10087d8:	90800c1e 	bne	r18,r2,100880c <__ieee754_atan2+0x10c>
 10087dc:	02151134 	movhi	r8,21572
 10087e0:	420b4604 	addi	r8,r8,11544
 10087e4:	02700274 	movhi	r9,49161
 10087e8:	4a487ec4 	addi	r9,r9,8699
 10087ec:	003fe406 	br	1008780 <__ieee754_atan2+0x80>
 10087f0:	4009883a 	mov	r4,r8
 10087f4:	dfc00317 	ldw	ra,12(sp)
 10087f8:	dc800217 	ldw	r18,8(sp)
 10087fc:	dc400117 	ldw	r17,4(sp)
 1008800:	dc000017 	ldw	r16,0(sp)
 1008804:	dec00404 	addi	sp,sp,16
 1008808:	100ac001 	jmpi	100ac00 <atan>
 100880c:	63c4b03a 	or	r2,r12,r15
 1008810:	10001426 	beq	r2,zero,1008864 <__ieee754_atan2+0x164>
 1008814:	009ffc34 	movhi	r2,32752
 1008818:	78801d26 	beq	r15,r2,1008890 <__ieee754_atan2+0x190>
 100881c:	009ffc34 	movhi	r2,32752
 1008820:	30801026 	beq	r6,r2,1008864 <__ieee754_atan2+0x164>
 1008824:	33c5c83a 	sub	r2,r6,r15
 1008828:	1009d53a 	srai	r4,r2,20
 100882c:	00c00f04 	movi	r3,60
 1008830:	1900240e 	bge	r3,r4,10088c4 <__ieee754_atan2+0x1c4>
 1008834:	02951134 	movhi	r10,21572
 1008838:	528b4604 	addi	r10,r10,11544
 100883c:	02cffe74 	movhi	r11,16377
 1008840:	5ac87ec4 	addi	r11,r11,8699
 1008844:	00800044 	movi	r2,1
 1008848:	90802d26 	beq	r18,r2,1008900 <__ieee754_atan2+0x200>
 100884c:	00800084 	movi	r2,2
 1008850:	90804426 	beq	r18,r2,1008964 <__ieee754_atan2+0x264>
 1008854:	90002e1e 	bne	r18,zero,1008910 <__ieee754_atan2+0x210>
 1008858:	5011883a 	mov	r8,r10
 100885c:	5813883a 	mov	r9,r11
 1008860:	003fc706 	br	1008780 <__ieee754_atan2+0x80>
 1008864:	88000516 	blt	r17,zero,100887c <__ieee754_atan2+0x17c>
 1008868:	02151134 	movhi	r8,21572
 100886c:	420b4604 	addi	r8,r8,11544
 1008870:	024ffe74 	movhi	r9,16377
 1008874:	4a487ec4 	addi	r9,r9,8699
 1008878:	003fc106 	br	1008780 <__ieee754_atan2+0x80>
 100887c:	02151134 	movhi	r8,21572
 1008880:	420b4604 	addi	r8,r8,11544
 1008884:	026ffe74 	movhi	r9,49145
 1008888:	4a487ec4 	addi	r9,r9,8699
 100888c:	003fbc06 	br	1008780 <__ieee754_atan2+0x80>
 1008890:	33c04b26 	beq	r6,r15,10089c0 <__ieee754_atan2+0x2c0>
 1008894:	00800044 	movi	r2,1
 1008898:	90805726 	beq	r18,r2,10089f8 <__ieee754_atan2+0x2f8>
 100889c:	14805116 	blt	r2,r18,10089e4 <__ieee754_atan2+0x2e4>
 10088a0:	903fde1e 	bne	r18,zero,100881c <__ieee754_atan2+0x11c>
 10088a4:	0011883a 	mov	r8,zero
 10088a8:	0013883a 	mov	r9,zero
 10088ac:	003fb406 	br	1008780 <__ieee754_atan2+0x80>
 10088b0:	02151134 	movhi	r8,21572
 10088b4:	420b4604 	addi	r8,r8,11544
 10088b8:	02500274 	movhi	r9,16393
 10088bc:	4a487ec4 	addi	r9,r9,8699
 10088c0:	003faf06 	br	1008780 <__ieee754_atan2+0x80>
 10088c4:	80003916 	blt	r16,zero,10089ac <__ieee754_atan2+0x2ac>
 10088c8:	580f883a 	mov	r7,r11
 10088cc:	480b883a 	mov	r5,r9
 10088d0:	500d883a 	mov	r6,r10
 10088d4:	4009883a 	mov	r4,r8
 10088d8:	100c59c0 	call	100c59c <__divdf3>
 10088dc:	180b883a 	mov	r5,r3
 10088e0:	1009883a 	mov	r4,r2
 10088e4:	100b2980 	call	100b298 <fabs>
 10088e8:	180b883a 	mov	r5,r3
 10088ec:	1009883a 	mov	r4,r2
 10088f0:	100ac000 	call	100ac00 <atan>
 10088f4:	1015883a 	mov	r10,r2
 10088f8:	1817883a 	mov	r11,r3
 10088fc:	003fd106 	br	1008844 <__ieee754_atan2+0x144>
 1008900:	59a0003c 	xorhi	r6,r11,32768
 1008904:	5011883a 	mov	r8,r10
 1008908:	3013883a 	mov	r9,r6
 100890c:	003f9c06 	br	1008780 <__ieee754_atan2+0x80>
 1008910:	008cc534 	movhi	r2,13076
 1008914:	109701c4 	addi	r2,r2,23559
 1008918:	00cf28b4 	movhi	r3,15522
 100891c:	18e98984 	addi	r3,r3,-23002
 1008920:	580b883a 	mov	r5,r11
 1008924:	180f883a 	mov	r7,r3
 1008928:	5009883a 	mov	r4,r10
 100892c:	100d883a 	mov	r6,r2
 1008930:	100c0e40 	call	100c0e4 <__subdf3>
 1008934:	02151134 	movhi	r8,21572
 1008938:	420b4604 	addi	r8,r8,11544
 100893c:	02500274 	movhi	r9,16393
 1008940:	4a487ec4 	addi	r9,r9,8699
 1008944:	180b883a 	mov	r5,r3
 1008948:	480f883a 	mov	r7,r9
 100894c:	1009883a 	mov	r4,r2
 1008950:	400d883a 	mov	r6,r8
 1008954:	100c0e40 	call	100c0e4 <__subdf3>
 1008958:	1011883a 	mov	r8,r2
 100895c:	1813883a 	mov	r9,r3
 1008960:	003f8706 	br	1008780 <__ieee754_atan2+0x80>
 1008964:	008cc534 	movhi	r2,13076
 1008968:	109701c4 	addi	r2,r2,23559
 100896c:	00cf28b4 	movhi	r3,15522
 1008970:	18e98984 	addi	r3,r3,-23002
 1008974:	580b883a 	mov	r5,r11
 1008978:	180f883a 	mov	r7,r3
 100897c:	5009883a 	mov	r4,r10
 1008980:	100d883a 	mov	r6,r2
 1008984:	100c0e40 	call	100c0e4 <__subdf3>
 1008988:	02151134 	movhi	r8,21572
 100898c:	420b4604 	addi	r8,r8,11544
 1008990:	02500274 	movhi	r9,16393
 1008994:	4a487ec4 	addi	r9,r9,8699
 1008998:	480b883a 	mov	r5,r9
 100899c:	180f883a 	mov	r7,r3
 10089a0:	4009883a 	mov	r4,r8
 10089a4:	100d883a 	mov	r6,r2
 10089a8:	003fea06 	br	1008954 <__ieee754_atan2+0x254>
 10089ac:	00bff104 	movi	r2,-60
 10089b0:	20bfc50e 	bge	r4,r2,10088c8 <__ieee754_atan2+0x1c8>
 10089b4:	0015883a 	mov	r10,zero
 10089b8:	0017883a 	mov	r11,zero
 10089bc:	003fa106 	br	1008844 <__ieee754_atan2+0x144>
 10089c0:	00800044 	movi	r2,1
 10089c4:	90801826 	beq	r18,r2,1008a28 <__ieee754_atan2+0x328>
 10089c8:	14800e16 	blt	r2,r18,1008a04 <__ieee754_atan2+0x304>
 10089cc:	903f931e 	bne	r18,zero,100881c <__ieee754_atan2+0x11c>
 10089d0:	02151134 	movhi	r8,21572
 10089d4:	420b4604 	addi	r8,r8,11544
 10089d8:	024ffa74 	movhi	r9,16361
 10089dc:	4a487ec4 	addi	r9,r9,8699
 10089e0:	003f6706 	br	1008780 <__ieee754_atan2+0x80>
 10089e4:	00800084 	movi	r2,2
 10089e8:	90bfb126 	beq	r18,r2,10088b0 <__ieee754_atan2+0x1b0>
 10089ec:	008000c4 	movi	r2,3
 10089f0:	90bf8a1e 	bne	r18,r2,100881c <__ieee754_atan2+0x11c>
 10089f4:	003f7906 	br	10087dc <__ieee754_atan2+0xdc>
 10089f8:	0011883a 	mov	r8,zero
 10089fc:	02600034 	movhi	r9,32768
 1008a00:	003f5f06 	br	1008780 <__ieee754_atan2+0x80>
 1008a04:	00800084 	movi	r2,2
 1008a08:	90800c26 	beq	r18,r2,1008a3c <__ieee754_atan2+0x33c>
 1008a0c:	008000c4 	movi	r2,3
 1008a10:	90bf821e 	bne	r18,r2,100881c <__ieee754_atan2+0x11c>
 1008a14:	021fccf4 	movhi	r8,32563
 1008a18:	42087484 	addi	r8,r8,8658
 1008a1c:	027000f4 	movhi	r9,49155
 1008a20:	4a765f04 	addi	r9,r9,-9860
 1008a24:	003f5606 	br	1008780 <__ieee754_atan2+0x80>
 1008a28:	02151134 	movhi	r8,21572
 1008a2c:	420b4604 	addi	r8,r8,11544
 1008a30:	026ffa74 	movhi	r9,49129
 1008a34:	4a487ec4 	addi	r9,r9,8699
 1008a38:	003f5106 	br	1008780 <__ieee754_atan2+0x80>
 1008a3c:	021fccf4 	movhi	r8,32563
 1008a40:	42087484 	addi	r8,r8,8658
 1008a44:	025000f4 	movhi	r9,16387
 1008a48:	4a765f04 	addi	r9,r9,-9860
 1008a4c:	003f4c06 	br	1008780 <__ieee754_atan2+0x80>

01008a50 <__ieee754_rem_pio2>:
 1008a50:	deffe304 	addi	sp,sp,-116
 1008a54:	00a00034 	movhi	r2,32768
 1008a58:	10bfffc4 	addi	r2,r2,-1
 1008a5c:	dd801915 	stw	r22,100(sp)
 1008a60:	28ac703a 	and	r22,r5,r2
 1008a64:	008ffa74 	movhi	r2,16361
 1008a68:	10887ec4 	addi	r2,r2,8699
 1008a6c:	df001b15 	stw	fp,108(sp)
 1008a70:	dfc01c15 	stw	ra,112(sp)
 1008a74:	ddc01a15 	stw	r23,104(sp)
 1008a78:	dd401815 	stw	r21,96(sp)
 1008a7c:	dd001715 	stw	r20,92(sp)
 1008a80:	dcc01615 	stw	r19,88(sp)
 1008a84:	dc801515 	stw	r18,84(sp)
 1008a88:	dc401415 	stw	r17,80(sp)
 1008a8c:	dc001315 	stw	r16,76(sp)
 1008a90:	2013883a 	mov	r9,r4
 1008a94:	d9400a15 	stw	r5,40(sp)
 1008a98:	3039883a 	mov	fp,r6
 1008a9c:	15801216 	blt	r2,r22,1008ae8 <__ieee754_rem_pio2+0x98>
 1008aa0:	e1400115 	stw	r5,4(fp)
 1008aa4:	30000315 	stw	zero,12(r6)
 1008aa8:	e1000015 	stw	r4,0(fp)
 1008aac:	d8000b15 	stw	zero,44(sp)
 1008ab0:	30000215 	stw	zero,8(r6)
 1008ab4:	d8800b17 	ldw	r2,44(sp)
 1008ab8:	dfc01c17 	ldw	ra,112(sp)
 1008abc:	df001b17 	ldw	fp,108(sp)
 1008ac0:	ddc01a17 	ldw	r23,104(sp)
 1008ac4:	dd801917 	ldw	r22,100(sp)
 1008ac8:	dd401817 	ldw	r21,96(sp)
 1008acc:	dd001717 	ldw	r20,92(sp)
 1008ad0:	dcc01617 	ldw	r19,88(sp)
 1008ad4:	dc801517 	ldw	r18,84(sp)
 1008ad8:	dc401417 	ldw	r17,80(sp)
 1008adc:	dc001317 	ldw	r16,76(sp)
 1008ae0:	dec01d04 	addi	sp,sp,116
 1008ae4:	f800283a 	ret
 1008ae8:	009000f4 	movhi	r2,16387
 1008aec:	10b65ec4 	addi	r2,r2,-9861
 1008af0:	15800f0e 	bge	r2,r22,1008b30 <__ieee754_rem_pio2+0xe0>
 1008af4:	00904e74 	movhi	r2,16697
 1008af8:	10887ec4 	addi	r2,r2,8699
 1008afc:	1580330e 	bge	r2,r22,1008bcc <__ieee754_rem_pio2+0x17c>
 1008b00:	009ffc34 	movhi	r2,32752
 1008b04:	10bfffc4 	addi	r2,r2,-1
 1008b08:	1580fe0e 	bge	r2,r22,1008f04 <__ieee754_rem_pio2+0x4b4>
 1008b0c:	280f883a 	mov	r7,r5
 1008b10:	480d883a 	mov	r6,r9
 1008b14:	100c0e40 	call	100c0e4 <__subdf3>
 1008b18:	e0c00115 	stw	r3,4(fp)
 1008b1c:	d8000b15 	stw	zero,44(sp)
 1008b20:	e0800015 	stw	r2,0(fp)
 1008b24:	e0800215 	stw	r2,8(fp)
 1008b28:	e0c00315 	stw	r3,12(fp)
 1008b2c:	003fe106 	br	1008ab4 <__ieee754_rem_pio2+0x64>
 1008b30:	d9000a17 	ldw	r4,40(sp)
 1008b34:	0100ce0e 	bge	zero,r4,1008e70 <__ieee754_rem_pio2+0x420>
 1008b38:	04151034 	movhi	r16,21568
 1008b3c:	044ffe74 	movhi	r17,16377
 1008b40:	8c487ec4 	addi	r17,r17,8699
 1008b44:	4809883a 	mov	r4,r9
 1008b48:	800d883a 	mov	r6,r16
 1008b4c:	880f883a 	mov	r7,r17
 1008b50:	100c0e40 	call	100c0e4 <__subdf3>
 1008b54:	1025883a 	mov	r18,r2
 1008b58:	1827883a 	mov	r19,r3
 1008b5c:	b4413c26 	beq	r22,r17,1009050 <__ieee754_rem_pio2+0x600>
 1008b60:	040698b4 	movhi	r16,6754
 1008b64:	8418cc44 	addi	r16,r16,25393
 1008b68:	044f7474 	movhi	r17,15825
 1008b6c:	8c6d1844 	addi	r17,r17,-19359
 1008b70:	1009883a 	mov	r4,r2
 1008b74:	180b883a 	mov	r5,r3
 1008b78:	800d883a 	mov	r6,r16
 1008b7c:	880f883a 	mov	r7,r17
 1008b80:	100c0e40 	call	100c0e4 <__subdf3>
 1008b84:	100d883a 	mov	r6,r2
 1008b88:	9009883a 	mov	r4,r18
 1008b8c:	980b883a 	mov	r5,r19
 1008b90:	180f883a 	mov	r7,r3
 1008b94:	e0800015 	stw	r2,0(fp)
 1008b98:	e0c00115 	stw	r3,4(fp)
 1008b9c:	100c0e40 	call	100c0e4 <__subdf3>
 1008ba0:	1009883a 	mov	r4,r2
 1008ba4:	800d883a 	mov	r6,r16
 1008ba8:	880f883a 	mov	r7,r17
 1008bac:	180b883a 	mov	r5,r3
 1008bb0:	100c0e40 	call	100c0e4 <__subdf3>
 1008bb4:	1009883a 	mov	r4,r2
 1008bb8:	00800044 	movi	r2,1
 1008bbc:	d8800b15 	stw	r2,44(sp)
 1008bc0:	e0c00315 	stw	r3,12(fp)
 1008bc4:	e1000215 	stw	r4,8(fp)
 1008bc8:	003fba06 	br	1008ab4 <__ieee754_rem_pio2+0x64>
 1008bcc:	100b2980 	call	100b298 <fabs>
 1008bd0:	021b72b4 	movhi	r8,28106
 1008bd4:	423220c4 	addi	r8,r8,-14205
 1008bd8:	024ff934 	movhi	r9,16356
 1008bdc:	4a57cc04 	addi	r9,r9,24368
 1008be0:	480f883a 	mov	r7,r9
 1008be4:	400d883a 	mov	r6,r8
 1008be8:	1009883a 	mov	r4,r2
 1008bec:	180b883a 	mov	r5,r3
 1008bf0:	1025883a 	mov	r18,r2
 1008bf4:	1827883a 	mov	r19,r3
 1008bf8:	100c1d80 	call	100c1d8 <__muldf3>
 1008bfc:	0011883a 	mov	r8,zero
 1008c00:	024ff834 	movhi	r9,16352
 1008c04:	480f883a 	mov	r7,r9
 1008c08:	400d883a 	mov	r6,r8
 1008c0c:	180b883a 	mov	r5,r3
 1008c10:	1009883a 	mov	r4,r2
 1008c14:	100c1640 	call	100c164 <__adddf3>
 1008c18:	180b883a 	mov	r5,r3
 1008c1c:	1009883a 	mov	r4,r2
 1008c20:	100cb0c0 	call	100cb0c <__fixdfsi>
 1008c24:	1009883a 	mov	r4,r2
 1008c28:	d8800b15 	stw	r2,44(sp)
 1008c2c:	100ca140 	call	100ca14 <__floatsidf>
 1008c30:	1823883a 	mov	r17,r3
 1008c34:	1009883a 	mov	r4,r2
 1008c38:	d8800c15 	stw	r2,48(sp)
 1008c3c:	00effe74 	movhi	r3,49145
 1008c40:	18c87ec4 	addi	r3,r3,8699
 1008c44:	00951034 	movhi	r2,21568
 1008c48:	880b883a 	mov	r5,r17
 1008c4c:	180f883a 	mov	r7,r3
 1008c50:	100d883a 	mov	r6,r2
 1008c54:	dc400d15 	stw	r17,52(sp)
 1008c58:	100c1d80 	call	100c1d8 <__muldf3>
 1008c5c:	180f883a 	mov	r7,r3
 1008c60:	980b883a 	mov	r5,r19
 1008c64:	9009883a 	mov	r4,r18
 1008c68:	100d883a 	mov	r6,r2
 1008c6c:	100c1640 	call	100c164 <__adddf3>
 1008c70:	d9000c17 	ldw	r4,48(sp)
 1008c74:	020698b4 	movhi	r8,6754
 1008c78:	4218cc44 	addi	r8,r8,25393
 1008c7c:	024f7474 	movhi	r9,15825
 1008c80:	4a6d1844 	addi	r9,r9,-19359
 1008c84:	880b883a 	mov	r5,r17
 1008c88:	480f883a 	mov	r7,r9
 1008c8c:	400d883a 	mov	r6,r8
 1008c90:	1025883a 	mov	r18,r2
 1008c94:	1827883a 	mov	r19,r3
 1008c98:	100c1d80 	call	100c1d8 <__muldf3>
 1008c9c:	d9000b17 	ldw	r4,44(sp)
 1008ca0:	100f883a 	mov	r7,r2
 1008ca4:	1811883a 	mov	r8,r3
 1008ca8:	008007c4 	movi	r2,31
 1008cac:	dc800e15 	stw	r18,56(sp)
 1008cb0:	3821883a 	mov	r16,r7
 1008cb4:	dcc00f15 	stw	r19,60(sp)
 1008cb8:	4023883a 	mov	r17,r8
 1008cbc:	11010a0e 	bge	r2,r4,10090e8 <__ieee754_rem_pio2+0x698>
 1008cc0:	d9000e17 	ldw	r4,56(sp)
 1008cc4:	d9400f17 	ldw	r5,60(sp)
 1008cc8:	800d883a 	mov	r6,r16
 1008ccc:	880f883a 	mov	r7,r17
 1008cd0:	100c0e40 	call	100c0e4 <__subdf3>
 1008cd4:	1810d53a 	srli	r8,r3,20
 1008cd8:	b02dd53a 	srai	r22,r22,20
 1008cdc:	1009883a 	mov	r4,r2
 1008ce0:	4201ffcc 	andi	r8,r8,2047
 1008ce4:	180b883a 	mov	r5,r3
 1008ce8:	b211c83a 	sub	r8,r22,r8
 1008cec:	00800404 	movi	r2,16
 1008cf0:	dd801015 	stw	r22,64(sp)
 1008cf4:	e1000015 	stw	r4,0(fp)
 1008cf8:	e1400115 	stw	r5,4(fp)
 1008cfc:	1200430e 	bge	r2,r8,1008e0c <__ieee754_rem_pio2+0x3bc>
 1008d00:	d9000c17 	ldw	r4,48(sp)
 1008d04:	d9400d17 	ldw	r5,52(sp)
 1008d08:	00869834 	movhi	r2,6752
 1008d0c:	00cf7474 	movhi	r3,15825
 1008d10:	18ed1844 	addi	r3,r3,-19359
 1008d14:	180f883a 	mov	r7,r3
 1008d18:	100d883a 	mov	r6,r2
 1008d1c:	100c1d80 	call	100c1d8 <__muldf3>
 1008d20:	d9000e17 	ldw	r4,56(sp)
 1008d24:	d9400f17 	ldw	r5,60(sp)
 1008d28:	100d883a 	mov	r6,r2
 1008d2c:	180f883a 	mov	r7,r3
 1008d30:	1025883a 	mov	r18,r2
 1008d34:	1827883a 	mov	r19,r3
 1008d38:	100c0e40 	call	100c0e4 <__subdf3>
 1008d3c:	d9000c17 	ldw	r4,48(sp)
 1008d40:	d9400d17 	ldw	r5,52(sp)
 1008d44:	058b80f4 	movhi	r22,11779
 1008d48:	b59c1cc4 	addi	r22,r22,28787
 1008d4c:	05cee8f4 	movhi	r23,15267
 1008d50:	bdc66284 	addi	r23,r23,6538
 1008d54:	b00d883a 	mov	r6,r22
 1008d58:	b80f883a 	mov	r7,r23
 1008d5c:	d8801115 	stw	r2,68(sp)
 1008d60:	d8c01215 	stw	r3,72(sp)
 1008d64:	d8800815 	stw	r2,32(sp)
 1008d68:	100c1d80 	call	100c1d8 <__muldf3>
 1008d6c:	d9001217 	ldw	r4,72(sp)
 1008d70:	d9400f17 	ldw	r5,60(sp)
 1008d74:	d9800817 	ldw	r6,32(sp)
 1008d78:	d9000915 	stw	r4,36(sp)
 1008d7c:	d9c01217 	ldw	r7,72(sp)
 1008d80:	d9000e17 	ldw	r4,56(sp)
 1008d84:	1021883a 	mov	r16,r2
 1008d88:	1823883a 	mov	r17,r3
 1008d8c:	100c0e40 	call	100c0e4 <__subdf3>
 1008d90:	180b883a 	mov	r5,r3
 1008d94:	900d883a 	mov	r6,r18
 1008d98:	980f883a 	mov	r7,r19
 1008d9c:	1009883a 	mov	r4,r2
 1008da0:	100c0e40 	call	100c0e4 <__subdf3>
 1008da4:	180f883a 	mov	r7,r3
 1008da8:	880b883a 	mov	r5,r17
 1008dac:	8009883a 	mov	r4,r16
 1008db0:	100d883a 	mov	r6,r2
 1008db4:	100c0e40 	call	100c0e4 <__subdf3>
 1008db8:	d9000817 	ldw	r4,32(sp)
 1008dbc:	d9401217 	ldw	r5,72(sp)
 1008dc0:	180f883a 	mov	r7,r3
 1008dc4:	100d883a 	mov	r6,r2
 1008dc8:	1021883a 	mov	r16,r2
 1008dcc:	1823883a 	mov	r17,r3
 1008dd0:	100c0e40 	call	100c0e4 <__subdf3>
 1008dd4:	1810d53a 	srli	r8,r3,20
 1008dd8:	1009883a 	mov	r4,r2
 1008ddc:	d8801017 	ldw	r2,64(sp)
 1008de0:	4201ffcc 	andi	r8,r8,2047
 1008de4:	180b883a 	mov	r5,r3
 1008de8:	1211c83a 	sub	r8,r2,r8
 1008dec:	00800c44 	movi	r2,49
 1008df0:	e1000015 	stw	r4,0(fp)
 1008df4:	e1400115 	stw	r5,4(fp)
 1008df8:	1200f016 	blt	r2,r8,10091bc <__ieee754_rem_pio2+0x76c>
 1008dfc:	d8c00817 	ldw	r3,32(sp)
 1008e00:	d9001217 	ldw	r4,72(sp)
 1008e04:	d8c00e15 	stw	r3,56(sp)
 1008e08:	d9000f15 	stw	r4,60(sp)
 1008e0c:	e1800017 	ldw	r6,0(fp)
 1008e10:	e1c00117 	ldw	r7,4(fp)
 1008e14:	d9400f17 	ldw	r5,60(sp)
 1008e18:	d9000e17 	ldw	r4,56(sp)
 1008e1c:	100c0e40 	call	100c0e4 <__subdf3>
 1008e20:	180b883a 	mov	r5,r3
 1008e24:	800d883a 	mov	r6,r16
 1008e28:	880f883a 	mov	r7,r17
 1008e2c:	1009883a 	mov	r4,r2
 1008e30:	100c0e40 	call	100c0e4 <__subdf3>
 1008e34:	d9400a17 	ldw	r5,40(sp)
 1008e38:	e0800215 	stw	r2,8(fp)
 1008e3c:	e1800204 	addi	r6,fp,8
 1008e40:	30c00115 	stw	r3,4(r6)
 1008e44:	283f1b0e 	bge	r5,zero,1008ab4 <__ieee754_rem_pio2+0x64>
 1008e48:	e0c00117 	ldw	r3,4(fp)
 1008e4c:	d8800b17 	ldw	r2,44(sp)
 1008e50:	18e0003c 	xorhi	r3,r3,32768
 1008e54:	0085c83a 	sub	r2,zero,r2
 1008e58:	e0c00115 	stw	r3,4(fp)
 1008e5c:	d8800b15 	stw	r2,44(sp)
 1008e60:	30800117 	ldw	r2,4(r6)
 1008e64:	10a0003c 	xorhi	r2,r2,32768
 1008e68:	30800115 	stw	r2,4(r6)
 1008e6c:	003f1106 	br	1008ab4 <__ieee754_rem_pio2+0x64>
 1008e70:	04151034 	movhi	r16,21568
 1008e74:	044ffe74 	movhi	r17,16377
 1008e78:	8c487ec4 	addi	r17,r17,8699
 1008e7c:	4809883a 	mov	r4,r9
 1008e80:	800d883a 	mov	r6,r16
 1008e84:	880f883a 	mov	r7,r17
 1008e88:	100c1640 	call	100c164 <__adddf3>
 1008e8c:	1025883a 	mov	r18,r2
 1008e90:	1827883a 	mov	r19,r3
 1008e94:	b440a326 	beq	r22,r17,1009124 <__ieee754_rem_pio2+0x6d4>
 1008e98:	040698b4 	movhi	r16,6754
 1008e9c:	8418cc44 	addi	r16,r16,25393
 1008ea0:	044f7474 	movhi	r17,15825
 1008ea4:	8c6d1844 	addi	r17,r17,-19359
 1008ea8:	1009883a 	mov	r4,r2
 1008eac:	180b883a 	mov	r5,r3
 1008eb0:	800d883a 	mov	r6,r16
 1008eb4:	880f883a 	mov	r7,r17
 1008eb8:	100c1640 	call	100c164 <__adddf3>
 1008ebc:	100d883a 	mov	r6,r2
 1008ec0:	9009883a 	mov	r4,r18
 1008ec4:	980b883a 	mov	r5,r19
 1008ec8:	180f883a 	mov	r7,r3
 1008ecc:	e0800015 	stw	r2,0(fp)
 1008ed0:	e0c00115 	stw	r3,4(fp)
 1008ed4:	100c0e40 	call	100c0e4 <__subdf3>
 1008ed8:	1009883a 	mov	r4,r2
 1008edc:	800d883a 	mov	r6,r16
 1008ee0:	880f883a 	mov	r7,r17
 1008ee4:	180b883a 	mov	r5,r3
 1008ee8:	100c1640 	call	100c164 <__adddf3>
 1008eec:	1009883a 	mov	r4,r2
 1008ef0:	00bfffc4 	movi	r2,-1
 1008ef4:	d8800b15 	stw	r2,44(sp)
 1008ef8:	e0c00315 	stw	r3,12(fp)
 1008efc:	e1000215 	stw	r4,8(fp)
 1008f00:	003eec06 	br	1008ab4 <__ieee754_rem_pio2+0x64>
 1008f04:	b005d53a 	srai	r2,r22,20
 1008f08:	4821883a 	mov	r16,r9
 1008f0c:	05505c34 	movhi	r21,16752
 1008f10:	15fefa84 	addi	r23,r2,-1046
 1008f14:	b826953a 	slli	r19,r23,20
 1008f18:	0029883a 	mov	r20,zero
 1008f1c:	048000c4 	movi	r18,3
 1008f20:	b4e7c83a 	sub	r19,r22,r19
 1008f24:	980b883a 	mov	r5,r19
 1008f28:	100cb0c0 	call	100cb0c <__fixdfsi>
 1008f2c:	1009883a 	mov	r4,r2
 1008f30:	100ca140 	call	100ca14 <__floatsidf>
 1008f34:	980b883a 	mov	r5,r19
 1008f38:	8009883a 	mov	r4,r16
 1008f3c:	180f883a 	mov	r7,r3
 1008f40:	100d883a 	mov	r6,r2
 1008f44:	d8800215 	stw	r2,8(sp)
 1008f48:	d8c00315 	stw	r3,12(sp)
 1008f4c:	100c0e40 	call	100c0e4 <__subdf3>
 1008f50:	180b883a 	mov	r5,r3
 1008f54:	a00d883a 	mov	r6,r20
 1008f58:	a80f883a 	mov	r7,r21
 1008f5c:	1009883a 	mov	r4,r2
 1008f60:	100c1d80 	call	100c1d8 <__muldf3>
 1008f64:	180b883a 	mov	r5,r3
 1008f68:	1009883a 	mov	r4,r2
 1008f6c:	1823883a 	mov	r17,r3
 1008f70:	1021883a 	mov	r16,r2
 1008f74:	100cb0c0 	call	100cb0c <__fixdfsi>
 1008f78:	1009883a 	mov	r4,r2
 1008f7c:	100ca140 	call	100ca14 <__floatsidf>
 1008f80:	880b883a 	mov	r5,r17
 1008f84:	8009883a 	mov	r4,r16
 1008f88:	180f883a 	mov	r7,r3
 1008f8c:	100d883a 	mov	r6,r2
 1008f90:	d8800415 	stw	r2,16(sp)
 1008f94:	d8c00515 	stw	r3,20(sp)
 1008f98:	100c0e40 	call	100c0e4 <__subdf3>
 1008f9c:	180b883a 	mov	r5,r3
 1008fa0:	000d883a 	mov	r6,zero
 1008fa4:	a80f883a 	mov	r7,r21
 1008fa8:	1009883a 	mov	r4,r2
 1008fac:	100c1d80 	call	100c1d8 <__muldf3>
 1008fb0:	d8c00715 	stw	r3,28(sp)
 1008fb4:	d8800615 	stw	r2,24(sp)
 1008fb8:	00000106 	br	1008fc0 <__ieee754_rem_pio2+0x570>
 1008fbc:	8025883a 	mov	r18,r16
 1008fc0:	943fffc4 	addi	r16,r18,-1
 1008fc4:	800890fa 	slli	r4,r16,3
 1008fc8:	d9400204 	addi	r5,sp,8
 1008fcc:	000d883a 	mov	r6,zero
 1008fd0:	2149883a 	add	r4,r4,r5
 1008fd4:	20c00117 	ldw	r3,4(r4)
 1008fd8:	20800017 	ldw	r2,0(r4)
 1008fdc:	000f883a 	mov	r7,zero
 1008fe0:	180b883a 	mov	r5,r3
 1008fe4:	1009883a 	mov	r4,r2
 1008fe8:	100c7f40 	call	100c7f4 <__eqdf2>
 1008fec:	103ff326 	beq	r2,zero,1008fbc <__ieee754_rem_pio2+0x56c>
 1008ff0:	00800084 	movi	r2,2
 1008ff4:	00c040b4 	movhi	r3,258
 1008ff8:	18dd5e04 	addi	r3,r3,30072
 1008ffc:	b80d883a 	mov	r6,r23
 1009000:	900f883a 	mov	r7,r18
 1009004:	d9000204 	addi	r4,sp,8
 1009008:	e00b883a 	mov	r5,fp
 100900c:	d8800015 	stw	r2,0(sp)
 1009010:	d8c00115 	stw	r3,4(sp)
 1009014:	1009a6c0 	call	1009a6c <__kernel_rem_pio2>
 1009018:	d8800b15 	stw	r2,44(sp)
 100901c:	d8800a17 	ldw	r2,40(sp)
 1009020:	103ea40e 	bge	r2,zero,1008ab4 <__ieee754_rem_pio2+0x64>
 1009024:	e0800117 	ldw	r2,4(fp)
 1009028:	d8c00b17 	ldw	r3,44(sp)
 100902c:	e1000204 	addi	r4,fp,8
 1009030:	10a0003c 	xorhi	r2,r2,32768
 1009034:	00c7c83a 	sub	r3,zero,r3
 1009038:	e0800115 	stw	r2,4(fp)
 100903c:	d8c00b15 	stw	r3,44(sp)
 1009040:	20c00117 	ldw	r3,4(r4)
 1009044:	18e0003c 	xorhi	r3,r3,32768
 1009048:	20c00115 	stw	r3,4(r4)
 100904c:	003e9906 	br	1008ab4 <__ieee754_rem_pio2+0x64>
 1009050:	00869834 	movhi	r2,6752
 1009054:	00cf7474 	movhi	r3,15825
 1009058:	18ed1844 	addi	r3,r3,-19359
 100905c:	9009883a 	mov	r4,r18
 1009060:	980b883a 	mov	r5,r19
 1009064:	180f883a 	mov	r7,r3
 1009068:	100d883a 	mov	r6,r2
 100906c:	100c0e40 	call	100c0e4 <__subdf3>
 1009070:	048b80f4 	movhi	r18,11779
 1009074:	949c1cc4 	addi	r18,r18,28787
 1009078:	04cee8f4 	movhi	r19,15267
 100907c:	9cc66284 	addi	r19,r19,6538
 1009080:	1009883a 	mov	r4,r2
 1009084:	180b883a 	mov	r5,r3
 1009088:	900d883a 	mov	r6,r18
 100908c:	980f883a 	mov	r7,r19
 1009090:	1021883a 	mov	r16,r2
 1009094:	1823883a 	mov	r17,r3
 1009098:	100c0e40 	call	100c0e4 <__subdf3>
 100909c:	100d883a 	mov	r6,r2
 10090a0:	8009883a 	mov	r4,r16
 10090a4:	880b883a 	mov	r5,r17
 10090a8:	180f883a 	mov	r7,r3
 10090ac:	e0800015 	stw	r2,0(fp)
 10090b0:	e0c00115 	stw	r3,4(fp)
 10090b4:	100c0e40 	call	100c0e4 <__subdf3>
 10090b8:	180b883a 	mov	r5,r3
 10090bc:	1009883a 	mov	r4,r2
 10090c0:	900d883a 	mov	r6,r18
 10090c4:	980f883a 	mov	r7,r19
 10090c8:	100c0e40 	call	100c0e4 <__subdf3>
 10090cc:	180b883a 	mov	r5,r3
 10090d0:	1009883a 	mov	r4,r2
 10090d4:	00c00044 	movi	r3,1
 10090d8:	d8c00b15 	stw	r3,44(sp)
 10090dc:	e1400315 	stw	r5,12(fp)
 10090e0:	e1000215 	stw	r4,8(fp)
 10090e4:	003e7306 	br	1008ab4 <__ieee754_rem_pio2+0x64>
 10090e8:	2105883a 	add	r2,r4,r4
 10090ec:	1085883a 	add	r2,r2,r2
 10090f0:	00c040b4 	movhi	r3,258
 10090f4:	18dd3e04 	addi	r3,r3,29944
 10090f8:	10c5883a 	add	r2,r2,r3
 10090fc:	113fff17 	ldw	r4,-4(r2)
 1009100:	b13eef26 	beq	r22,r4,1008cc0 <__ieee754_rem_pio2+0x270>
 1009104:	980b883a 	mov	r5,r19
 1009108:	400f883a 	mov	r7,r8
 100910c:	9009883a 	mov	r4,r18
 1009110:	800d883a 	mov	r6,r16
 1009114:	100c0e40 	call	100c0e4 <__subdf3>
 1009118:	e0c00115 	stw	r3,4(fp)
 100911c:	e0800015 	stw	r2,0(fp)
 1009120:	003f3a06 	br	1008e0c <__ieee754_rem_pio2+0x3bc>
 1009124:	00869834 	movhi	r2,6752
 1009128:	00cf7474 	movhi	r3,15825
 100912c:	18ed1844 	addi	r3,r3,-19359
 1009130:	9009883a 	mov	r4,r18
 1009134:	980b883a 	mov	r5,r19
 1009138:	180f883a 	mov	r7,r3
 100913c:	100d883a 	mov	r6,r2
 1009140:	100c1640 	call	100c164 <__adddf3>
 1009144:	048b80f4 	movhi	r18,11779
 1009148:	949c1cc4 	addi	r18,r18,28787
 100914c:	04cee8f4 	movhi	r19,15267
 1009150:	9cc66284 	addi	r19,r19,6538
 1009154:	1009883a 	mov	r4,r2
 1009158:	180b883a 	mov	r5,r3
 100915c:	900d883a 	mov	r6,r18
 1009160:	980f883a 	mov	r7,r19
 1009164:	1021883a 	mov	r16,r2
 1009168:	1823883a 	mov	r17,r3
 100916c:	100c1640 	call	100c164 <__adddf3>
 1009170:	100d883a 	mov	r6,r2
 1009174:	8009883a 	mov	r4,r16
 1009178:	880b883a 	mov	r5,r17
 100917c:	180f883a 	mov	r7,r3
 1009180:	e0800015 	stw	r2,0(fp)
 1009184:	e0c00115 	stw	r3,4(fp)
 1009188:	100c0e40 	call	100c0e4 <__subdf3>
 100918c:	180b883a 	mov	r5,r3
 1009190:	1009883a 	mov	r4,r2
 1009194:	900d883a 	mov	r6,r18
 1009198:	980f883a 	mov	r7,r19
 100919c:	100c1640 	call	100c164 <__adddf3>
 10091a0:	180b883a 	mov	r5,r3
 10091a4:	1009883a 	mov	r4,r2
 10091a8:	00ffffc4 	movi	r3,-1
 10091ac:	d8c00b15 	stw	r3,44(sp)
 10091b0:	e1400315 	stw	r5,12(fp)
 10091b4:	e1000215 	stw	r4,8(fp)
 10091b8:	003e3e06 	br	1008ab4 <__ieee754_rem_pio2+0x64>
 10091bc:	d9000c17 	ldw	r4,48(sp)
 10091c0:	d9400d17 	ldw	r5,52(sp)
 10091c4:	018b8034 	movhi	r6,11776
 10091c8:	b80f883a 	mov	r7,r23
 10091cc:	100c1d80 	call	100c1d8 <__muldf3>
 10091d0:	d9000817 	ldw	r4,32(sp)
 10091d4:	d9401217 	ldw	r5,72(sp)
 10091d8:	100d883a 	mov	r6,r2
 10091dc:	180f883a 	mov	r7,r3
 10091e0:	1025883a 	mov	r18,r2
 10091e4:	1827883a 	mov	r19,r3
 10091e8:	100c0e40 	call	100c0e4 <__subdf3>
 10091ec:	d9400d17 	ldw	r5,52(sp)
 10091f0:	d9000c17 	ldw	r4,48(sp)
 10091f4:	02094834 	movhi	r8,9504
 10091f8:	42127044 	addi	r8,r8,18881
 10091fc:	024e5f34 	movhi	r9,14716
 1009200:	4a60e684 	addi	r9,r9,-31846
 1009204:	480f883a 	mov	r7,r9
 1009208:	400d883a 	mov	r6,r8
 100920c:	182b883a 	mov	r21,r3
 1009210:	d8800e15 	stw	r2,56(sp)
 1009214:	100c1d80 	call	100c1d8 <__muldf3>
 1009218:	d9000817 	ldw	r4,32(sp)
 100921c:	d9401217 	ldw	r5,72(sp)
 1009220:	d9800e17 	ldw	r6,56(sp)
 1009224:	a80f883a 	mov	r7,r21
 1009228:	1021883a 	mov	r16,r2
 100922c:	1823883a 	mov	r17,r3
 1009230:	dd400f15 	stw	r21,60(sp)
 1009234:	100c0e40 	call	100c0e4 <__subdf3>
 1009238:	180b883a 	mov	r5,r3
 100923c:	900d883a 	mov	r6,r18
 1009240:	980f883a 	mov	r7,r19
 1009244:	1009883a 	mov	r4,r2
 1009248:	100c0e40 	call	100c0e4 <__subdf3>
 100924c:	180f883a 	mov	r7,r3
 1009250:	880b883a 	mov	r5,r17
 1009254:	8009883a 	mov	r4,r16
 1009258:	100d883a 	mov	r6,r2
 100925c:	100c0e40 	call	100c0e4 <__subdf3>
 1009260:	d9000e17 	ldw	r4,56(sp)
 1009264:	1021883a 	mov	r16,r2
 1009268:	1823883a 	mov	r17,r3
 100926c:	a80b883a 	mov	r5,r21
 1009270:	180f883a 	mov	r7,r3
 1009274:	003fa606 	br	1009110 <__ieee754_rem_pio2+0x6c0>

01009278 <__ieee754_sqrt>:
 1009278:	defffd04 	addi	sp,sp,-12
 100927c:	dc000015 	stw	r16,0(sp)
 1009280:	009ffc34 	movhi	r2,32752
 1009284:	2021883a 	mov	r16,r4
 1009288:	291ffc2c 	andhi	r4,r5,32752
 100928c:	dc400115 	stw	r17,4(sp)
 1009290:	dfc00215 	stw	ra,8(sp)
 1009294:	2823883a 	mov	r17,r5
 1009298:	280f883a 	mov	r7,r5
 100929c:	2807883a 	mov	r3,r5
 10092a0:	8011883a 	mov	r8,r16
 10092a4:	20807d26 	beq	r4,r2,100949c <__ieee754_sqrt+0x224>
 10092a8:	01408d0e 	bge	zero,r5,10094e0 <__ieee754_sqrt+0x268>
 10092ac:	380dd53a 	srai	r6,r7,20
 10092b0:	3000131e 	bne	r6,zero,1009300 <__ieee754_sqrt+0x88>
 10092b4:	1800041e 	bne	r3,zero,10092c8 <__ieee754_sqrt+0x50>
 10092b8:	400ed2fa 	srli	r7,r8,11
 10092bc:	31bffac4 	addi	r6,r6,-21
 10092c0:	4010957a 	slli	r8,r8,21
 10092c4:	383ffc26 	beq	r7,zero,10092b8 <__ieee754_sqrt+0x40>
 10092c8:	3880042c 	andhi	r2,r7,16
 10092cc:	1000991e 	bne	r2,zero,1009534 <__ieee754_sqrt+0x2bc>
 10092d0:	0009883a 	mov	r4,zero
 10092d4:	39cf883a 	add	r7,r7,r7
 10092d8:	3880042c 	andhi	r2,r7,16
 10092dc:	21000044 	addi	r4,r4,1
 10092e0:	103ffc26 	beq	r2,zero,10092d4 <__ieee754_sqrt+0x5c>
 10092e4:	00800804 	movi	r2,32
 10092e8:	1105c83a 	sub	r2,r2,r4
 10092ec:	4086d83a 	srl	r3,r8,r2
 10092f0:	4110983a 	sll	r8,r8,r4
 10092f4:	3105c83a 	sub	r2,r6,r4
 10092f8:	38ceb03a 	or	r7,r7,r3
 10092fc:	11800044 	addi	r6,r2,1
 1009300:	31bf0044 	addi	r6,r6,-1023
 1009304:	30c0004c 	andi	r3,r6,1
 1009308:	00800434 	movhi	r2,16
 100930c:	10bfffc4 	addi	r2,r2,-1
 1009310:	3884703a 	and	r2,r7,r2
 1009314:	1807003a 	cmpeq	r3,r3,zero
 1009318:	11000434 	orhi	r4,r2,16
 100931c:	18005426 	beq	r3,zero,1009470 <__ieee754_sqrt+0x1f8>
 1009320:	4004d7fa 	srli	r2,r8,31
 1009324:	4207883a 	add	r3,r8,r8
 1009328:	02800834 	movhi	r10,32
 100932c:	1105883a 	add	r2,r2,r4
 1009330:	2089883a 	add	r4,r4,r2
 1009334:	0011883a 	mov	r8,zero
 1009338:	000b883a 	mov	r5,zero
 100933c:	0013883a 	mov	r9,zero
 1009340:	02c00584 	movi	r11,22
 1009344:	520f883a 	add	r7,r10,r8
 1009348:	1804d7fa 	srli	r2,r3,31
 100934c:	4a400044 	addi	r9,r9,1
 1009350:	18c7883a 	add	r3,r3,r3
 1009354:	21c00316 	blt	r4,r7,1009364 <__ieee754_sqrt+0xec>
 1009358:	21c9c83a 	sub	r4,r4,r7
 100935c:	2a8b883a 	add	r5,r5,r10
 1009360:	51d1883a 	add	r8,r10,r7
 1009364:	1105883a 	add	r2,r2,r4
 1009368:	5014d07a 	srli	r10,r10,1
 100936c:	2089883a 	add	r4,r4,r2
 1009370:	4afff41e 	bne	r9,r11,1009344 <__ieee754_sqrt+0xcc>
 1009374:	02600034 	movhi	r9,32768
 1009378:	0017883a 	mov	r11,zero
 100937c:	0019883a 	mov	r12,zero
 1009380:	0015883a 	mov	r10,zero
 1009384:	4821883a 	mov	r16,r9
 1009388:	03c00804 	movi	r15,32
 100938c:	00000806 	br	10093b0 <__ieee754_sqrt+0x138>
 1009390:	22003426 	beq	r4,r8,1009464 <__ieee754_sqrt+0x1ec>
 1009394:	1804d7fa 	srli	r2,r3,31
 1009398:	52800044 	addi	r10,r10,1
 100939c:	18c7883a 	add	r3,r3,r3
 10093a0:	1105883a 	add	r2,r2,r4
 10093a4:	2089883a 	add	r4,r4,r2
 10093a8:	4812d07a 	srli	r9,r9,1
 10093ac:	53c01326 	beq	r10,r15,10093fc <__ieee754_sqrt+0x184>
 10093b0:	4acf883a 	add	r7,r9,r11
 10093b4:	413ff60e 	bge	r8,r4,1009390 <__ieee754_sqrt+0x118>
 10093b8:	38a0002c 	andhi	r2,r7,32768
 10093bc:	3a57883a 	add	r11,r7,r9
 10093c0:	14002426 	beq	r2,r16,1009454 <__ieee754_sqrt+0x1dc>
 10093c4:	4005883a 	mov	r2,r8
 10093c8:	2209c83a 	sub	r4,r4,r8
 10093cc:	19c0012e 	bgeu	r3,r7,10093d4 <__ieee754_sqrt+0x15c>
 10093d0:	213fffc4 	addi	r4,r4,-1
 10093d4:	19c7c83a 	sub	r3,r3,r7
 10093d8:	1011883a 	mov	r8,r2
 10093dc:	1804d7fa 	srli	r2,r3,31
 10093e0:	52800044 	addi	r10,r10,1
 10093e4:	6259883a 	add	r12,r12,r9
 10093e8:	1105883a 	add	r2,r2,r4
 10093ec:	18c7883a 	add	r3,r3,r3
 10093f0:	2089883a 	add	r4,r4,r2
 10093f4:	4812d07a 	srli	r9,r9,1
 10093f8:	53ffed1e 	bne	r10,r15,10093b0 <__ieee754_sqrt+0x138>
 10093fc:	20c4b03a 	or	r2,r4,r3
 1009400:	1000201e 	bne	r2,zero,1009484 <__ieee754_sqrt+0x20c>
 1009404:	600ed07a 	srli	r7,r12,1
 1009408:	2880004c 	andi	r2,r5,1
 100940c:	1005003a 	cmpeq	r2,r2,zero
 1009410:	1000011e 	bne	r2,zero,1009418 <__ieee754_sqrt+0x1a0>
 1009414:	39e00034 	orhi	r7,r7,32768
 1009418:	300dd07a 	srai	r6,r6,1
 100941c:	280bd07a 	srai	r5,r5,1
 1009420:	010ff834 	movhi	r4,16352
 1009424:	300c953a 	slli	r6,r6,20
 1009428:	290b883a 	add	r5,r5,r4
 100942c:	3821883a 	mov	r16,r7
 1009430:	299d883a 	add	r14,r5,r6
 1009434:	7023883a 	mov	r17,r14
 1009438:	8005883a 	mov	r2,r16
 100943c:	8807883a 	mov	r3,r17
 1009440:	dfc00217 	ldw	ra,8(sp)
 1009444:	dc400117 	ldw	r17,4(sp)
 1009448:	dc000017 	ldw	r16,0(sp)
 100944c:	dec00304 	addi	sp,sp,12
 1009450:	f800283a 	ret
 1009454:	5884703a 	and	r2,r11,r2
 1009458:	103fda1e 	bne	r2,zero,10093c4 <__ieee754_sqrt+0x14c>
 100945c:	40800044 	addi	r2,r8,1
 1009460:	003fd906 	br	10093c8 <__ieee754_sqrt+0x150>
 1009464:	19ffd42e 	bgeu	r3,r7,10093b8 <__ieee754_sqrt+0x140>
 1009468:	2011883a 	mov	r8,r4
 100946c:	003fc906 	br	1009394 <__ieee754_sqrt+0x11c>
 1009470:	4004d7fa 	srli	r2,r8,31
 1009474:	4211883a 	add	r8,r8,r8
 1009478:	1105883a 	add	r2,r2,r4
 100947c:	2089883a 	add	r4,r4,r2
 1009480:	003fa706 	br	1009320 <__ieee754_sqrt+0xa8>
 1009484:	00bfffc4 	movi	r2,-1
 1009488:	60802726 	beq	r12,r2,1009528 <__ieee754_sqrt+0x2b0>
 100948c:	6080004c 	andi	r2,r12,1
 1009490:	6085883a 	add	r2,r12,r2
 1009494:	100ed07a 	srli	r7,r2,1
 1009498:	003fdb06 	br	1009408 <__ieee754_sqrt+0x190>
 100949c:	8009883a 	mov	r4,r16
 10094a0:	800d883a 	mov	r6,r16
 10094a4:	100c1d80 	call	100c1d8 <__muldf3>
 10094a8:	180f883a 	mov	r7,r3
 10094ac:	880b883a 	mov	r5,r17
 10094b0:	8009883a 	mov	r4,r16
 10094b4:	100d883a 	mov	r6,r2
 10094b8:	100c1640 	call	100c164 <__adddf3>
 10094bc:	1021883a 	mov	r16,r2
 10094c0:	1823883a 	mov	r17,r3
 10094c4:	8005883a 	mov	r2,r16
 10094c8:	8807883a 	mov	r3,r17
 10094cc:	dfc00217 	ldw	ra,8(sp)
 10094d0:	dc400117 	ldw	r17,4(sp)
 10094d4:	dc000017 	ldw	r16,0(sp)
 10094d8:	dec00304 	addi	sp,sp,12
 10094dc:	f800283a 	ret
 10094e0:	00a00034 	movhi	r2,32768
 10094e4:	10bfffc4 	addi	r2,r2,-1
 10094e8:	2884703a 	and	r2,r5,r2
 10094ec:	8084b03a 	or	r2,r16,r2
 10094f0:	103fd126 	beq	r2,zero,1009438 <__ieee754_sqrt+0x1c0>
 10094f4:	283f6d26 	beq	r5,zero,10092ac <__ieee754_sqrt+0x34>
 10094f8:	280f883a 	mov	r7,r5
 10094fc:	8009883a 	mov	r4,r16
 1009500:	800d883a 	mov	r6,r16
 1009504:	100c0e40 	call	100c0e4 <__subdf3>
 1009508:	1009883a 	mov	r4,r2
 100950c:	180b883a 	mov	r5,r3
 1009510:	100d883a 	mov	r6,r2
 1009514:	180f883a 	mov	r7,r3
 1009518:	100c59c0 	call	100c59c <__divdf3>
 100951c:	1021883a 	mov	r16,r2
 1009520:	1823883a 	mov	r17,r3
 1009524:	003fc406 	br	1009438 <__ieee754_sqrt+0x1c0>
 1009528:	29400044 	addi	r5,r5,1
 100952c:	000f883a 	mov	r7,zero
 1009530:	003fb506 	br	1009408 <__ieee754_sqrt+0x190>
 1009534:	0009883a 	mov	r4,zero
 1009538:	00800804 	movi	r2,32
 100953c:	003f6b06 	br	10092ec <__ieee754_sqrt+0x74>

01009540 <__kernel_cos>:
 1009540:	defff104 	addi	sp,sp,-60
 1009544:	00a00034 	movhi	r2,32768
 1009548:	10bfffc4 	addi	r2,r2,-1
 100954c:	dd800c15 	stw	r22,48(sp)
 1009550:	116c703a 	and	r22,r2,r5
 1009554:	0005883a 	mov	r2,zero
 1009558:	dd000a15 	stw	r20,40(sp)
 100955c:	d8800215 	stw	r2,8(sp)
 1009560:	2029883a 	mov	r20,r4
 1009564:	008f9034 	movhi	r2,15936
 1009568:	10bfffc4 	addi	r2,r2,-1
 100956c:	0009883a 	mov	r4,zero
 1009570:	dd400b15 	stw	r21,44(sp)
 1009574:	dfc00e15 	stw	ra,56(sp)
 1009578:	ddc00d15 	stw	r23,52(sp)
 100957c:	dcc00915 	stw	r19,36(sp)
 1009580:	dc800815 	stw	r18,32(sp)
 1009584:	dc400715 	stw	r17,28(sp)
 1009588:	dc000615 	stw	r16,24(sp)
 100958c:	282b883a 	mov	r21,r5
 1009590:	d9800415 	stw	r6,16(sp)
 1009594:	d9c00515 	stw	r7,20(sp)
 1009598:	d9000315 	stw	r4,12(sp)
 100959c:	15809216 	blt	r2,r22,10097e8 <__kernel_cos+0x2a8>
 10095a0:	a009883a 	mov	r4,r20
 10095a4:	100cb0c0 	call	100cb0c <__fixdfsi>
 10095a8:	10011c26 	beq	r2,zero,1009a1c <__kernel_cos+0x4dc>
 10095ac:	a009883a 	mov	r4,r20
 10095b0:	a80b883a 	mov	r5,r21
 10095b4:	a00d883a 	mov	r6,r20
 10095b8:	a80f883a 	mov	r7,r21
 10095bc:	100c1d80 	call	100c1d8 <__muldf3>
 10095c0:	1021883a 	mov	r16,r2
 10095c4:	1823883a 	mov	r17,r3
 10095c8:	1025883a 	mov	r18,r2
 10095cc:	1827883a 	mov	r19,r3
 10095d0:	00afa234 	movhi	r2,48776
 10095d4:	108e3504 	addi	r2,r2,14548
 10095d8:	00ef6a74 	movhi	r3,48553
 10095dc:	18feba44 	addi	r3,r3,-1303
 10095e0:	8009883a 	mov	r4,r16
 10095e4:	880b883a 	mov	r5,r17
 10095e8:	180f883a 	mov	r7,r3
 10095ec:	100d883a 	mov	r6,r2
 10095f0:	100c1d80 	call	100c1d8 <__muldf3>
 10095f4:	022f6d74 	movhi	r8,48565
 10095f8:	422c7104 	addi	r8,r8,-20028
 10095fc:	024f88b4 	movhi	r9,15906
 1009600:	4a7ba784 	addi	r9,r9,-4450
 1009604:	480f883a 	mov	r7,r9
 1009608:	400d883a 	mov	r6,r8
 100960c:	180b883a 	mov	r5,r3
 1009610:	1009883a 	mov	r4,r2
 1009614:	100c1640 	call	100c164 <__adddf3>
 1009618:	180f883a 	mov	r7,r3
 100961c:	8009883a 	mov	r4,r16
 1009620:	880b883a 	mov	r5,r17
 1009624:	100d883a 	mov	r6,r2
 1009628:	100c1d80 	call	100c1d8 <__muldf3>
 100962c:	02202734 	movhi	r8,32924
 1009630:	4214ab44 	addi	r8,r8,21165
 1009634:	024fa4b4 	movhi	r9,16018
 1009638:	4a5f93c4 	addi	r9,r9,32335
 100963c:	480f883a 	mov	r7,r9
 1009640:	400d883a 	mov	r6,r8
 1009644:	180b883a 	mov	r5,r3
 1009648:	1009883a 	mov	r4,r2
 100964c:	100c0e40 	call	100c0e4 <__subdf3>
 1009650:	180f883a 	mov	r7,r3
 1009654:	8009883a 	mov	r4,r16
 1009658:	880b883a 	mov	r5,r17
 100965c:	100d883a 	mov	r6,r2
 1009660:	100c1d80 	call	100c1d8 <__muldf3>
 1009664:	020672f4 	movhi	r8,6603
 1009668:	42056404 	addi	r8,r8,5520
 100966c:	024fbeb4 	movhi	r9,16122
 1009670:	4a406804 	addi	r9,r9,416
 1009674:	480f883a 	mov	r7,r9
 1009678:	400d883a 	mov	r6,r8
 100967c:	180b883a 	mov	r5,r3
 1009680:	1009883a 	mov	r4,r2
 1009684:	100c1640 	call	100c164 <__adddf3>
 1009688:	180f883a 	mov	r7,r3
 100968c:	8009883a 	mov	r4,r16
 1009690:	880b883a 	mov	r5,r17
 1009694:	100d883a 	mov	r6,r2
 1009698:	100c1d80 	call	100c1d8 <__muldf3>
 100969c:	0205b074 	movhi	r8,5825
 10096a0:	42145dc4 	addi	r8,r8,20855
 10096a4:	024fd5f4 	movhi	r9,16215
 10096a8:	4a705b04 	addi	r9,r9,-16020
 10096ac:	480f883a 	mov	r7,r9
 10096b0:	400d883a 	mov	r6,r8
 10096b4:	180b883a 	mov	r5,r3
 10096b8:	1009883a 	mov	r4,r2
 10096bc:	100c0e40 	call	100c0e4 <__subdf3>
 10096c0:	180f883a 	mov	r7,r3
 10096c4:	8009883a 	mov	r4,r16
 10096c8:	880b883a 	mov	r5,r17
 10096cc:	100d883a 	mov	r6,r2
 10096d0:	100c1d80 	call	100c1d8 <__muldf3>
 10096d4:	02155574 	movhi	r8,21845
 10096d8:	42155304 	addi	r8,r8,21836
 10096dc:	024fe974 	movhi	r9,16293
 10096e0:	4a555544 	addi	r9,r9,21845
 10096e4:	480f883a 	mov	r7,r9
 10096e8:	400d883a 	mov	r6,r8
 10096ec:	180b883a 	mov	r5,r3
 10096f0:	1009883a 	mov	r4,r2
 10096f4:	100c1640 	call	100c164 <__adddf3>
 10096f8:	180f883a 	mov	r7,r3
 10096fc:	880b883a 	mov	r5,r17
 1009700:	8009883a 	mov	r4,r16
 1009704:	100d883a 	mov	r6,r2
 1009708:	100c1d80 	call	100c1d8 <__muldf3>
 100970c:	1021883a 	mov	r16,r2
 1009710:	1823883a 	mov	r17,r3
 1009714:	0005883a 	mov	r2,zero
 1009718:	00cff834 	movhi	r3,16352
 100971c:	9009883a 	mov	r4,r18
 1009720:	980b883a 	mov	r5,r19
 1009724:	180f883a 	mov	r7,r3
 1009728:	100d883a 	mov	r6,r2
 100972c:	100c1d80 	call	100c1d8 <__muldf3>
 1009730:	980b883a 	mov	r5,r19
 1009734:	880f883a 	mov	r7,r17
 1009738:	9009883a 	mov	r4,r18
 100973c:	800d883a 	mov	r6,r16
 1009740:	1025883a 	mov	r18,r2
 1009744:	1827883a 	mov	r19,r3
 1009748:	100c1d80 	call	100c1d8 <__muldf3>
 100974c:	d9c00517 	ldw	r7,20(sp)
 1009750:	d9800417 	ldw	r6,16(sp)
 1009754:	a80b883a 	mov	r5,r21
 1009758:	a009883a 	mov	r4,r20
 100975c:	1021883a 	mov	r16,r2
 1009760:	1823883a 	mov	r17,r3
 1009764:	100c1d80 	call	100c1d8 <__muldf3>
 1009768:	180f883a 	mov	r7,r3
 100976c:	880b883a 	mov	r5,r17
 1009770:	8009883a 	mov	r4,r16
 1009774:	100d883a 	mov	r6,r2
 1009778:	100c0e40 	call	100c0e4 <__subdf3>
 100977c:	180f883a 	mov	r7,r3
 1009780:	980b883a 	mov	r5,r19
 1009784:	9009883a 	mov	r4,r18
 1009788:	100d883a 	mov	r6,r2
 100978c:	100c0e40 	call	100c0e4 <__subdf3>
 1009790:	0011883a 	mov	r8,zero
 1009794:	024ffc34 	movhi	r9,16368
 1009798:	480b883a 	mov	r5,r9
 100979c:	180f883a 	mov	r7,r3
 10097a0:	4009883a 	mov	r4,r8
 10097a4:	100d883a 	mov	r6,r2
 10097a8:	100c0e40 	call	100c0e4 <__subdf3>
 10097ac:	100d883a 	mov	r6,r2
 10097b0:	180f883a 	mov	r7,r3
 10097b4:	3005883a 	mov	r2,r6
 10097b8:	3807883a 	mov	r3,r7
 10097bc:	dfc00e17 	ldw	ra,56(sp)
 10097c0:	ddc00d17 	ldw	r23,52(sp)
 10097c4:	dd800c17 	ldw	r22,48(sp)
 10097c8:	dd400b17 	ldw	r21,44(sp)
 10097cc:	dd000a17 	ldw	r20,40(sp)
 10097d0:	dcc00917 	ldw	r19,36(sp)
 10097d4:	dc800817 	ldw	r18,32(sp)
 10097d8:	dc400717 	ldw	r17,28(sp)
 10097dc:	dc000617 	ldw	r16,24(sp)
 10097e0:	dec00f04 	addi	sp,sp,60
 10097e4:	f800283a 	ret
 10097e8:	280f883a 	mov	r7,r5
 10097ec:	a009883a 	mov	r4,r20
 10097f0:	a00d883a 	mov	r6,r20
 10097f4:	100c1d80 	call	100c1d8 <__muldf3>
 10097f8:	1021883a 	mov	r16,r2
 10097fc:	1823883a 	mov	r17,r3
 1009800:	1025883a 	mov	r18,r2
 1009804:	1827883a 	mov	r19,r3
 1009808:	00afa234 	movhi	r2,48776
 100980c:	108e3504 	addi	r2,r2,14548
 1009810:	00ef6a74 	movhi	r3,48553
 1009814:	18feba44 	addi	r3,r3,-1303
 1009818:	8009883a 	mov	r4,r16
 100981c:	880b883a 	mov	r5,r17
 1009820:	180f883a 	mov	r7,r3
 1009824:	100d883a 	mov	r6,r2
 1009828:	100c1d80 	call	100c1d8 <__muldf3>
 100982c:	022f6d74 	movhi	r8,48565
 1009830:	422c7104 	addi	r8,r8,-20028
 1009834:	024f88b4 	movhi	r9,15906
 1009838:	4a7ba784 	addi	r9,r9,-4450
 100983c:	480f883a 	mov	r7,r9
 1009840:	400d883a 	mov	r6,r8
 1009844:	180b883a 	mov	r5,r3
 1009848:	1009883a 	mov	r4,r2
 100984c:	100c1640 	call	100c164 <__adddf3>
 1009850:	180f883a 	mov	r7,r3
 1009854:	8009883a 	mov	r4,r16
 1009858:	880b883a 	mov	r5,r17
 100985c:	100d883a 	mov	r6,r2
 1009860:	100c1d80 	call	100c1d8 <__muldf3>
 1009864:	02202734 	movhi	r8,32924
 1009868:	4214ab44 	addi	r8,r8,21165
 100986c:	024fa4b4 	movhi	r9,16018
 1009870:	4a5f93c4 	addi	r9,r9,32335
 1009874:	480f883a 	mov	r7,r9
 1009878:	400d883a 	mov	r6,r8
 100987c:	180b883a 	mov	r5,r3
 1009880:	1009883a 	mov	r4,r2
 1009884:	100c0e40 	call	100c0e4 <__subdf3>
 1009888:	180f883a 	mov	r7,r3
 100988c:	8009883a 	mov	r4,r16
 1009890:	880b883a 	mov	r5,r17
 1009894:	100d883a 	mov	r6,r2
 1009898:	100c1d80 	call	100c1d8 <__muldf3>
 100989c:	020672f4 	movhi	r8,6603
 10098a0:	42056404 	addi	r8,r8,5520
 10098a4:	024fbeb4 	movhi	r9,16122
 10098a8:	4a406804 	addi	r9,r9,416
 10098ac:	480f883a 	mov	r7,r9
 10098b0:	400d883a 	mov	r6,r8
 10098b4:	180b883a 	mov	r5,r3
 10098b8:	1009883a 	mov	r4,r2
 10098bc:	100c1640 	call	100c164 <__adddf3>
 10098c0:	180f883a 	mov	r7,r3
 10098c4:	8009883a 	mov	r4,r16
 10098c8:	880b883a 	mov	r5,r17
 10098cc:	100d883a 	mov	r6,r2
 10098d0:	100c1d80 	call	100c1d8 <__muldf3>
 10098d4:	0205b074 	movhi	r8,5825
 10098d8:	42145dc4 	addi	r8,r8,20855
 10098dc:	024fd5f4 	movhi	r9,16215
 10098e0:	4a705b04 	addi	r9,r9,-16020
 10098e4:	480f883a 	mov	r7,r9
 10098e8:	400d883a 	mov	r6,r8
 10098ec:	180b883a 	mov	r5,r3
 10098f0:	1009883a 	mov	r4,r2
 10098f4:	100c0e40 	call	100c0e4 <__subdf3>
 10098f8:	180f883a 	mov	r7,r3
 10098fc:	8009883a 	mov	r4,r16
 1009900:	880b883a 	mov	r5,r17
 1009904:	100d883a 	mov	r6,r2
 1009908:	100c1d80 	call	100c1d8 <__muldf3>
 100990c:	02155574 	movhi	r8,21845
 1009910:	42155304 	addi	r8,r8,21836
 1009914:	024fe974 	movhi	r9,16293
 1009918:	4a555544 	addi	r9,r9,21845
 100991c:	480f883a 	mov	r7,r9
 1009920:	400d883a 	mov	r6,r8
 1009924:	180b883a 	mov	r5,r3
 1009928:	1009883a 	mov	r4,r2
 100992c:	100c1640 	call	100c164 <__adddf3>
 1009930:	180f883a 	mov	r7,r3
 1009934:	880b883a 	mov	r5,r17
 1009938:	8009883a 	mov	r4,r16
 100993c:	100d883a 	mov	r6,r2
 1009940:	100c1d80 	call	100c1d8 <__muldf3>
 1009944:	1021883a 	mov	r16,r2
 1009948:	008ff4f4 	movhi	r2,16339
 100994c:	108ccc84 	addi	r2,r2,13106
 1009950:	1823883a 	mov	r17,r3
 1009954:	15bf6f0e 	bge	r2,r22,1009714 <__kernel_cos+0x1d4>
 1009958:	008ffa74 	movhi	r2,16361
 100995c:	1580320e 	bge	r2,r22,1009a28 <__kernel_cos+0x4e8>
 1009960:	0005883a 	mov	r2,zero
 1009964:	010ff9f4 	movhi	r4,16359
 1009968:	002d883a 	mov	r22,zero
 100996c:	d8800015 	stw	r2,0(sp)
 1009970:	05cff4b4 	movhi	r23,16338
 1009974:	d9000115 	stw	r4,4(sp)
 1009978:	0005883a 	mov	r2,zero
 100997c:	00cff834 	movhi	r3,16352
 1009980:	9009883a 	mov	r4,r18
 1009984:	980b883a 	mov	r5,r19
 1009988:	180f883a 	mov	r7,r3
 100998c:	100d883a 	mov	r6,r2
 1009990:	100c1d80 	call	100c1d8 <__muldf3>
 1009994:	180b883a 	mov	r5,r3
 1009998:	b80f883a 	mov	r7,r23
 100999c:	1009883a 	mov	r4,r2
 10099a0:	b00d883a 	mov	r6,r22
 10099a4:	100c0e40 	call	100c0e4 <__subdf3>
 10099a8:	980b883a 	mov	r5,r19
 10099ac:	880f883a 	mov	r7,r17
 10099b0:	9009883a 	mov	r4,r18
 10099b4:	800d883a 	mov	r6,r16
 10099b8:	1025883a 	mov	r18,r2
 10099bc:	1827883a 	mov	r19,r3
 10099c0:	100c1d80 	call	100c1d8 <__muldf3>
 10099c4:	d9c00517 	ldw	r7,20(sp)
 10099c8:	d9800417 	ldw	r6,16(sp)
 10099cc:	a80b883a 	mov	r5,r21
 10099d0:	a009883a 	mov	r4,r20
 10099d4:	1021883a 	mov	r16,r2
 10099d8:	1823883a 	mov	r17,r3
 10099dc:	100c1d80 	call	100c1d8 <__muldf3>
 10099e0:	180f883a 	mov	r7,r3
 10099e4:	880b883a 	mov	r5,r17
 10099e8:	8009883a 	mov	r4,r16
 10099ec:	100d883a 	mov	r6,r2
 10099f0:	100c0e40 	call	100c0e4 <__subdf3>
 10099f4:	180f883a 	mov	r7,r3
 10099f8:	980b883a 	mov	r5,r19
 10099fc:	9009883a 	mov	r4,r18
 1009a00:	100d883a 	mov	r6,r2
 1009a04:	100c0e40 	call	100c0e4 <__subdf3>
 1009a08:	d9400117 	ldw	r5,4(sp)
 1009a0c:	d9000017 	ldw	r4,0(sp)
 1009a10:	180f883a 	mov	r7,r3
 1009a14:	100d883a 	mov	r6,r2
 1009a18:	003f6306 	br	10097a8 <__kernel_cos+0x268>
 1009a1c:	000d883a 	mov	r6,zero
 1009a20:	01cffc34 	movhi	r7,16368
 1009a24:	003f6306 	br	10097b4 <__kernel_cos+0x274>
 1009a28:	00bff834 	movhi	r2,65504
 1009a2c:	b0ad883a 	add	r22,r22,r2
 1009a30:	dd800315 	stw	r22,12(sp)
 1009a34:	d9000317 	ldw	r4,12(sp)
 1009a38:	0005883a 	mov	r2,zero
 1009a3c:	00cffc34 	movhi	r3,16368
 1009a40:	002d883a 	mov	r22,zero
 1009a44:	200f883a 	mov	r7,r4
 1009a48:	202f883a 	mov	r23,r4
 1009a4c:	180b883a 	mov	r5,r3
 1009a50:	1009883a 	mov	r4,r2
 1009a54:	b00d883a 	mov	r6,r22
 1009a58:	d8800215 	stw	r2,8(sp)
 1009a5c:	100c0e40 	call	100c0e4 <__subdf3>
 1009a60:	d8800015 	stw	r2,0(sp)
 1009a64:	d8c00115 	stw	r3,4(sp)
 1009a68:	003fc306 	br	1009978 <__kernel_cos+0x438>

01009a6c <__kernel_rem_pio2>:
 1009a6c:	deff5304 	addi	sp,sp,-692
 1009a70:	d880ad17 	ldw	r2,692(sp)
 1009a74:	d9009615 	stw	r4,600(sp)
 1009a78:	d9409715 	stw	r5,604(sp)
 1009a7c:	1087883a 	add	r3,r2,r2
 1009a80:	18c7883a 	add	r3,r3,r3
 1009a84:	008040b4 	movhi	r2,258
 1009a88:	109da004 	addi	r2,r2,30336
 1009a8c:	1887883a 	add	r3,r3,r2
 1009a90:	18c00017 	ldw	r3,0(r3)
 1009a94:	313fff44 	addi	r4,r6,-3
 1009a98:	01400604 	movi	r5,24
 1009a9c:	df00ab15 	stw	fp,684(sp)
 1009aa0:	dc00a315 	stw	r16,652(sp)
 1009aa4:	d8c09515 	stw	r3,596(sp)
 1009aa8:	dfc0ac15 	stw	ra,688(sp)
 1009aac:	ddc0aa15 	stw	r23,680(sp)
 1009ab0:	dd80a915 	stw	r22,676(sp)
 1009ab4:	dd40a815 	stw	r21,672(sp)
 1009ab8:	dd00a715 	stw	r20,668(sp)
 1009abc:	dcc0a615 	stw	r19,664(sp)
 1009ac0:	dc80a515 	stw	r18,660(sp)
 1009ac4:	dc40a415 	stw	r17,656(sp)
 1009ac8:	3021883a 	mov	r16,r6
 1009acc:	d9c09815 	stw	r7,608(sp)
 1009ad0:	100cd0c0 	call	100cd0c <__divsi3>
 1009ad4:	d8c09817 	ldw	r3,608(sp)
 1009ad8:	d8808c15 	stw	r2,560(sp)
 1009adc:	1f3fffc4 	addi	fp,r3,-1
 1009ae0:	10031816 	blt	r2,zero,100a744 <__kernel_rem_pio2+0xcd8>
 1009ae4:	d9008c17 	ldw	r4,560(sp)
 1009ae8:	d9409517 	ldw	r5,596(sp)
 1009aec:	20bffa24 	muli	r2,r4,-24
 1009af0:	2f07883a 	add	r3,r5,fp
 1009af4:	8085883a 	add	r2,r16,r2
 1009af8:	10bffa04 	addi	r2,r2,-24
 1009afc:	d8809315 	stw	r2,588(sp)
 1009b00:	18001516 	blt	r3,zero,1009b58 <__kernel_rem_pio2+0xec>
 1009b04:	2721c83a 	sub	r16,r4,fp
 1009b08:	d980ae17 	ldw	r6,696(sp)
 1009b0c:	8405883a 	add	r2,r16,r16
 1009b10:	1085883a 	add	r2,r2,r2
 1009b14:	30a3883a 	add	r17,r6,r2
 1009b18:	80e7883a 	add	r19,r16,r3
 1009b1c:	dc801404 	addi	r18,sp,80
 1009b20:	00000106 	br	1009b28 <__kernel_rem_pio2+0xbc>
 1009b24:	84000044 	addi	r16,r16,1
 1009b28:	0009883a 	mov	r4,zero
 1009b2c:	000b883a 	mov	r5,zero
 1009b30:	80000416 	blt	r16,zero,1009b44 <__kernel_rem_pio2+0xd8>
 1009b34:	89000017 	ldw	r4,0(r17)
 1009b38:	100ca140 	call	100ca14 <__floatsidf>
 1009b3c:	1009883a 	mov	r4,r2
 1009b40:	180b883a 	mov	r5,r3
 1009b44:	91400115 	stw	r5,4(r18)
 1009b48:	91000015 	stw	r4,0(r18)
 1009b4c:	8c400104 	addi	r17,r17,4
 1009b50:	94800204 	addi	r18,r18,8
 1009b54:	84fff31e 	bne	r16,r19,1009b24 <__kernel_rem_pio2+0xb8>
 1009b58:	d9c09517 	ldw	r7,596(sp)
 1009b5c:	38002416 	blt	r7,zero,1009bf0 <__kernel_rem_pio2+0x184>
 1009b60:	da809817 	ldw	r10,608(sp)
 1009b64:	e029883a 	mov	r20,fp
 1009b68:	dd406404 	addi	r21,sp,400
 1009b6c:	3aaf883a 	add	r23,r7,r10
 1009b70:	e02c403a 	cmpge	r22,fp,zero
 1009b74:	b0023e26 	beq	r22,zero,100a470 <__kernel_rem_pio2+0xa04>
 1009b78:	dcc09617 	ldw	r19,600(sp)
 1009b7c:	0021883a 	mov	r16,zero
 1009b80:	0025883a 	mov	r18,zero
 1009b84:	0023883a 	mov	r17,zero
 1009b88:	a489c83a 	sub	r4,r20,r18
 1009b8c:	200890fa 	slli	r4,r4,3
 1009b90:	99800017 	ldw	r6,0(r19)
 1009b94:	99c00117 	ldw	r7,4(r19)
 1009b98:	26c9883a 	add	r4,r4,sp
 1009b9c:	20c01517 	ldw	r3,84(r4)
 1009ba0:	20801417 	ldw	r2,80(r4)
 1009ba4:	94800044 	addi	r18,r18,1
 1009ba8:	180b883a 	mov	r5,r3
 1009bac:	1009883a 	mov	r4,r2
 1009bb0:	100c1d80 	call	100c1d8 <__muldf3>
 1009bb4:	180f883a 	mov	r7,r3
 1009bb8:	880b883a 	mov	r5,r17
 1009bbc:	8009883a 	mov	r4,r16
 1009bc0:	100d883a 	mov	r6,r2
 1009bc4:	100c1640 	call	100c164 <__adddf3>
 1009bc8:	1021883a 	mov	r16,r2
 1009bcc:	d8809817 	ldw	r2,608(sp)
 1009bd0:	9cc00204 	addi	r19,r19,8
 1009bd4:	1823883a 	mov	r17,r3
 1009bd8:	14bfeb1e 	bne	r2,r18,1009b88 <__kernel_rem_pio2+0x11c>
 1009bdc:	a5000044 	addi	r20,r20,1
 1009be0:	ac400115 	stw	r17,4(r21)
 1009be4:	ac000015 	stw	r16,0(r21)
 1009be8:	ad400204 	addi	r21,r21,8
 1009bec:	a5ffe11e 	bne	r20,r23,1009b74 <__kernel_rem_pio2+0x108>
 1009bf0:	d8c09517 	ldw	r3,596(sp)
 1009bf4:	d9409317 	ldw	r5,588(sp)
 1009bf8:	e038403a 	cmpge	fp,fp,zero
 1009bfc:	d8c08d15 	stw	r3,564(sp)
 1009c00:	d9008d17 	ldw	r4,564(sp)
 1009c04:	18c5883a 	add	r2,r3,r3
 1009c08:	10c7883a 	add	r3,r2,r3
 1009c0c:	1907883a 	add	r3,r3,r4
 1009c10:	1085883a 	add	r2,r2,r2
 1009c14:	16c5883a 	add	r2,r2,sp
 1009c18:	1ec7883a 	add	r3,r3,sp
 1009c1c:	29400050 	cmplti	r5,r5,1
 1009c20:	df00a215 	stw	fp,648(sp)
 1009c24:	d8809915 	stw	r2,612(sp)
 1009c28:	d8c0a115 	stw	r3,644(sp)
 1009c2c:	d940a015 	stw	r5,640(sp)
 1009c30:	d9808d17 	ldw	r6,564(sp)
 1009c34:	300490fa 	slli	r2,r6,3
 1009c38:	16c5883a 	add	r2,r2,sp
 1009c3c:	15006417 	ldw	r20,400(r2)
 1009c40:	15406517 	ldw	r21,404(r2)
 1009c44:	01802e0e 	bge	zero,r6,1009d00 <__kernel_rem_pio2+0x294>
 1009c48:	102d883a 	mov	r22,r2
 1009c4c:	302f883a 	mov	r23,r6
 1009c50:	d839883a 	mov	fp,sp
 1009c54:	0005883a 	mov	r2,zero
 1009c58:	00cf9c34 	movhi	r3,15984
 1009c5c:	180f883a 	mov	r7,r3
 1009c60:	100d883a 	mov	r6,r2
 1009c64:	a009883a 	mov	r4,r20
 1009c68:	a80b883a 	mov	r5,r21
 1009c6c:	100c1d80 	call	100c1d8 <__muldf3>
 1009c70:	180b883a 	mov	r5,r3
 1009c74:	1009883a 	mov	r4,r2
 1009c78:	100cb0c0 	call	100cb0c <__fixdfsi>
 1009c7c:	1009883a 	mov	r4,r2
 1009c80:	100ca140 	call	100ca14 <__floatsidf>
 1009c84:	1021883a 	mov	r16,r2
 1009c88:	1823883a 	mov	r17,r3
 1009c8c:	0005883a 	mov	r2,zero
 1009c90:	00f05c34 	movhi	r3,49520
 1009c94:	180f883a 	mov	r7,r3
 1009c98:	8009883a 	mov	r4,r16
 1009c9c:	880b883a 	mov	r5,r17
 1009ca0:	100d883a 	mov	r6,r2
 1009ca4:	100c1d80 	call	100c1d8 <__muldf3>
 1009ca8:	180b883a 	mov	r5,r3
 1009cac:	a80f883a 	mov	r7,r21
 1009cb0:	a00d883a 	mov	r6,r20
 1009cb4:	1009883a 	mov	r4,r2
 1009cb8:	100c1640 	call	100c164 <__adddf3>
 1009cbc:	180b883a 	mov	r5,r3
 1009cc0:	1009883a 	mov	r4,r2
 1009cc4:	100cb0c0 	call	100cb0c <__fixdfsi>
 1009cc8:	e0800015 	stw	r2,0(fp)
 1009ccc:	b5bffe04 	addi	r22,r22,-8
 1009cd0:	b0806417 	ldw	r2,400(r22)
 1009cd4:	b0c06517 	ldw	r3,404(r22)
 1009cd8:	8009883a 	mov	r4,r16
 1009cdc:	880b883a 	mov	r5,r17
 1009ce0:	180f883a 	mov	r7,r3
 1009ce4:	100d883a 	mov	r6,r2
 1009ce8:	100c1640 	call	100c164 <__adddf3>
 1009cec:	bdffffc4 	addi	r23,r23,-1
 1009cf0:	e7000104 	addi	fp,fp,4
 1009cf4:	1029883a 	mov	r20,r2
 1009cf8:	182b883a 	mov	r21,r3
 1009cfc:	b83fd51e 	bne	r23,zero,1009c54 <__kernel_rem_pio2+0x1e8>
 1009d00:	d9809317 	ldw	r6,588(sp)
 1009d04:	a80b883a 	mov	r5,r21
 1009d08:	a009883a 	mov	r4,r20
 1009d0c:	100b50c0 	call	100b50c <scalbn>
 1009d10:	0009883a 	mov	r4,zero
 1009d14:	014ff034 	movhi	r5,16320
 1009d18:	280f883a 	mov	r7,r5
 1009d1c:	200d883a 	mov	r6,r4
 1009d20:	180b883a 	mov	r5,r3
 1009d24:	1009883a 	mov	r4,r2
 1009d28:	1021883a 	mov	r16,r2
 1009d2c:	1823883a 	mov	r17,r3
 1009d30:	100c1d80 	call	100c1d8 <__muldf3>
 1009d34:	180b883a 	mov	r5,r3
 1009d38:	1009883a 	mov	r4,r2
 1009d3c:	100b2b00 	call	100b2b0 <floor>
 1009d40:	0011883a 	mov	r8,zero
 1009d44:	02700834 	movhi	r9,49184
 1009d48:	480f883a 	mov	r7,r9
 1009d4c:	400d883a 	mov	r6,r8
 1009d50:	180b883a 	mov	r5,r3
 1009d54:	1009883a 	mov	r4,r2
 1009d58:	100c1d80 	call	100c1d8 <__muldf3>
 1009d5c:	180f883a 	mov	r7,r3
 1009d60:	100d883a 	mov	r6,r2
 1009d64:	880b883a 	mov	r5,r17
 1009d68:	8009883a 	mov	r4,r16
 1009d6c:	100c1640 	call	100c164 <__adddf3>
 1009d70:	180b883a 	mov	r5,r3
 1009d74:	1009883a 	mov	r4,r2
 1009d78:	1823883a 	mov	r17,r3
 1009d7c:	1021883a 	mov	r16,r2
 1009d80:	100cb0c0 	call	100cb0c <__fixdfsi>
 1009d84:	1009883a 	mov	r4,r2
 1009d88:	d8809415 	stw	r2,592(sp)
 1009d8c:	100ca140 	call	100ca14 <__floatsidf>
 1009d90:	880b883a 	mov	r5,r17
 1009d94:	8009883a 	mov	r4,r16
 1009d98:	180f883a 	mov	r7,r3
 1009d9c:	100d883a 	mov	r6,r2
 1009da0:	100c0e40 	call	100c0e4 <__subdf3>
 1009da4:	d9c0a017 	ldw	r7,640(sp)
 1009da8:	180d883a 	mov	r6,r3
 1009dac:	1021883a 	mov	r16,r2
 1009db0:	1823883a 	mov	r17,r3
 1009db4:	38017d1e 	bne	r7,zero,100a3ac <__kernel_rem_pio2+0x940>
 1009db8:	da808d17 	ldw	r10,564(sp)
 1009dbc:	d9009317 	ldw	r4,588(sp)
 1009dc0:	00c00604 	movi	r3,24
 1009dc4:	50bfffc4 	addi	r2,r10,-1
 1009dc8:	1085883a 	add	r2,r2,r2
 1009dcc:	1085883a 	add	r2,r2,r2
 1009dd0:	16c5883a 	add	r2,r2,sp
 1009dd4:	11400017 	ldw	r5,0(r2)
 1009dd8:	1907c83a 	sub	r3,r3,r4
 1009ddc:	d9c09317 	ldw	r7,588(sp)
 1009de0:	28cdd83a 	sra	r6,r5,r3
 1009de4:	010005c4 	movi	r4,23
 1009de8:	da809417 	ldw	r10,592(sp)
 1009dec:	30c6983a 	sll	r3,r6,r3
 1009df0:	21c9c83a 	sub	r4,r4,r7
 1009df4:	5195883a 	add	r10,r10,r6
 1009df8:	28cbc83a 	sub	r5,r5,r3
 1009dfc:	2909d83a 	sra	r4,r5,r4
 1009e00:	da809415 	stw	r10,592(sp)
 1009e04:	11400015 	stw	r5,0(r2)
 1009e08:	d9009215 	stw	r4,584(sp)
 1009e0c:	d9409217 	ldw	r5,584(sp)
 1009e10:	0140270e 	bge	zero,r5,1009eb0 <__kernel_rem_pio2+0x444>
 1009e14:	d9809417 	ldw	r6,592(sp)
 1009e18:	d9c08d17 	ldw	r7,564(sp)
 1009e1c:	31800044 	addi	r6,r6,1
 1009e20:	d9809415 	stw	r6,592(sp)
 1009e24:	01c1a50e 	bge	zero,r7,100a4bc <__kernel_rem_pio2+0xa50>
 1009e28:	002d883a 	mov	r22,zero
 1009e2c:	000b883a 	mov	r5,zero
 1009e30:	d809883a 	mov	r4,sp
 1009e34:	01c04034 	movhi	r7,256
 1009e38:	01804034 	movhi	r6,256
 1009e3c:	31bfffc4 	addi	r6,r6,-1
 1009e40:	00000806 	br	1009e64 <__kernel_rem_pio2+0x3f8>
 1009e44:	38c5c83a 	sub	r2,r7,r3
 1009e48:	18000226 	beq	r3,zero,1009e54 <__kernel_rem_pio2+0x3e8>
 1009e4c:	05800044 	movi	r22,1
 1009e50:	20800015 	stw	r2,0(r4)
 1009e54:	da808d17 	ldw	r10,564(sp)
 1009e58:	29400044 	addi	r5,r5,1
 1009e5c:	21000104 	addi	r4,r4,4
 1009e60:	51400926 	beq	r10,r5,1009e88 <__kernel_rem_pio2+0x41c>
 1009e64:	b004c03a 	cmpne	r2,r22,zero
 1009e68:	20c00017 	ldw	r3,0(r4)
 1009e6c:	103ff526 	beq	r2,zero,1009e44 <__kernel_rem_pio2+0x3d8>
 1009e70:	da808d17 	ldw	r10,564(sp)
 1009e74:	30c5c83a 	sub	r2,r6,r3
 1009e78:	29400044 	addi	r5,r5,1
 1009e7c:	20800015 	stw	r2,0(r4)
 1009e80:	21000104 	addi	r4,r4,4
 1009e84:	517ff71e 	bne	r10,r5,1009e64 <__kernel_rem_pio2+0x3f8>
 1009e88:	d880a017 	ldw	r2,640(sp)
 1009e8c:	1000051e 	bne	r2,zero,1009ea4 <__kernel_rem_pio2+0x438>
 1009e90:	d8c09317 	ldw	r3,588(sp)
 1009e94:	00800044 	movi	r2,1
 1009e98:	18814e26 	beq	r3,r2,100a3d4 <__kernel_rem_pio2+0x968>
 1009e9c:	00800084 	movi	r2,2
 1009ea0:	18815826 	beq	r3,r2,100a404 <__kernel_rem_pio2+0x998>
 1009ea4:	d9c09217 	ldw	r7,584(sp)
 1009ea8:	00800084 	movi	r2,2
 1009eac:	38806926 	beq	r7,r2,100a054 <__kernel_rem_pio2+0x5e8>
 1009eb0:	000d883a 	mov	r6,zero
 1009eb4:	000f883a 	mov	r7,zero
 1009eb8:	8009883a 	mov	r4,r16
 1009ebc:	880b883a 	mov	r5,r17
 1009ec0:	100c7f40 	call	100c7f4 <__eqdf2>
 1009ec4:	1000811e 	bne	r2,zero,100a0cc <__kernel_rem_pio2+0x660>
 1009ec8:	da808d17 	ldw	r10,564(sp)
 1009ecc:	d8809517 	ldw	r2,596(sp)
 1009ed0:	51bfffc4 	addi	r6,r10,-1
 1009ed4:	30800c16 	blt	r6,r2,1009f08 <__kernel_rem_pio2+0x49c>
 1009ed8:	3185883a 	add	r2,r6,r6
 1009edc:	1085883a 	add	r2,r2,r2
 1009ee0:	16c9883a 	add	r4,r2,sp
 1009ee4:	3007883a 	mov	r3,r6
 1009ee8:	000b883a 	mov	r5,zero
 1009eec:	20800017 	ldw	r2,0(r4)
 1009ef0:	d9c09517 	ldw	r7,596(sp)
 1009ef4:	18ffffc4 	addi	r3,r3,-1
 1009ef8:	213fff04 	addi	r4,r4,-4
 1009efc:	288ab03a 	or	r5,r5,r2
 1009f00:	19fffa0e 	bge	r3,r7,1009eec <__kernel_rem_pio2+0x480>
 1009f04:	2800791e 	bne	r5,zero,100a0ec <__kernel_rem_pio2+0x680>
 1009f08:	da809917 	ldw	r10,612(sp)
 1009f0c:	50bfff17 	ldw	r2,-4(r10)
 1009f10:	1001511e 	bne	r2,zero,100a458 <__kernel_rem_pio2+0x9ec>
 1009f14:	d880a117 	ldw	r2,644(sp)
 1009f18:	01000044 	movi	r4,1
 1009f1c:	10ffff04 	addi	r3,r2,-4
 1009f20:	18ffff04 	addi	r3,r3,-4
 1009f24:	18800017 	ldw	r2,0(r3)
 1009f28:	21000044 	addi	r4,r4,1
 1009f2c:	103ffc26 	beq	r2,zero,1009f20 <__kernel_rem_pio2+0x4b4>
 1009f30:	d8c08d17 	ldw	r3,564(sp)
 1009f34:	192f883a 	add	r23,r3,r4
 1009f38:	1f000044 	addi	fp,r3,1
 1009f3c:	bf00020e 	bge	r23,fp,1009f48 <__kernel_rem_pio2+0x4dc>
 1009f40:	ddc08d15 	stw	r23,564(sp)
 1009f44:	003f3a06 	br	1009c30 <__kernel_rem_pio2+0x1c4>
 1009f48:	d9408c17 	ldw	r5,560(sp)
 1009f4c:	d9009817 	ldw	r4,608(sp)
 1009f50:	da80ae17 	ldw	r10,696(sp)
 1009f54:	1945883a 	add	r2,r3,r5
 1009f58:	190f883a 	add	r7,r3,r4
 1009f5c:	1085883a 	add	r2,r2,r2
 1009f60:	380a90fa 	slli	r5,r7,3
 1009f64:	e00c90fa 	slli	r6,fp,3
 1009f68:	1085883a 	add	r2,r2,r2
 1009f6c:	5085883a 	add	r2,r10,r2
 1009f70:	d8c01404 	addi	r3,sp,80
 1009f74:	d9006404 	addi	r4,sp,400
 1009f78:	10800104 	addi	r2,r2,4
 1009f7c:	196b883a 	add	r21,r3,r5
 1009f80:	21a1883a 	add	r16,r4,r6
 1009f84:	d8809115 	stw	r2,580(sp)
 1009f88:	d9c09015 	stw	r7,576(sp)
 1009f8c:	d8809117 	ldw	r2,580(sp)
 1009f90:	11000017 	ldw	r4,0(r2)
 1009f94:	100ca140 	call	100ca14 <__floatsidf>
 1009f98:	a8c00115 	stw	r3,4(r21)
 1009f9c:	d8c0a217 	ldw	r3,648(sp)
 1009fa0:	a8800015 	stw	r2,0(r21)
 1009fa4:	18002826 	beq	r3,zero,100a048 <__kernel_rem_pio2+0x5dc>
 1009fa8:	d9009017 	ldw	r4,576(sp)
 1009fac:	dd009617 	ldw	r20,600(sp)
 1009fb0:	0023883a 	mov	r17,zero
 1009fb4:	200490fa 	slli	r2,r4,3
 1009fb8:	002d883a 	mov	r22,zero
 1009fbc:	0025883a 	mov	r18,zero
 1009fc0:	16e7883a 	add	r19,r2,sp
 1009fc4:	98801417 	ldw	r2,80(r19)
 1009fc8:	98c01517 	ldw	r3,84(r19)
 1009fcc:	a1800017 	ldw	r6,0(r20)
 1009fd0:	a1c00117 	ldw	r7,4(r20)
 1009fd4:	180b883a 	mov	r5,r3
 1009fd8:	1009883a 	mov	r4,r2
 1009fdc:	100c1d80 	call	100c1d8 <__muldf3>
 1009fe0:	180f883a 	mov	r7,r3
 1009fe4:	900b883a 	mov	r5,r18
 1009fe8:	8809883a 	mov	r4,r17
 1009fec:	100d883a 	mov	r6,r2
 1009ff0:	100c1640 	call	100c164 <__adddf3>
 1009ff4:	d9409817 	ldw	r5,608(sp)
 1009ff8:	b5800044 	addi	r22,r22,1
 1009ffc:	9cfffe04 	addi	r19,r19,-8
 100a000:	1023883a 	mov	r17,r2
 100a004:	1825883a 	mov	r18,r3
 100a008:	a5000204 	addi	r20,r20,8
 100a00c:	2dbfed1e 	bne	r5,r22,1009fc4 <__kernel_rem_pio2+0x558>
 100a010:	d9809117 	ldw	r6,580(sp)
 100a014:	d9c09017 	ldw	r7,576(sp)
 100a018:	e7000044 	addi	fp,fp,1
 100a01c:	31800104 	addi	r6,r6,4
 100a020:	39c00044 	addi	r7,r7,1
 100a024:	84800115 	stw	r18,4(r16)
 100a028:	84400015 	stw	r17,0(r16)
 100a02c:	d9809115 	stw	r6,580(sp)
 100a030:	ad400204 	addi	r21,r21,8
 100a034:	84000204 	addi	r16,r16,8
 100a038:	d9c09015 	stw	r7,576(sp)
 100a03c:	bf3fd30e 	bge	r23,fp,1009f8c <__kernel_rem_pio2+0x520>
 100a040:	ddc08d15 	stw	r23,564(sp)
 100a044:	003efa06 	br	1009c30 <__kernel_rem_pio2+0x1c4>
 100a048:	0023883a 	mov	r17,zero
 100a04c:	0025883a 	mov	r18,zero
 100a050:	003fef06 	br	100a010 <__kernel_rem_pio2+0x5a4>
 100a054:	0029883a 	mov	r20,zero
 100a058:	054ffc34 	movhi	r21,16368
 100a05c:	880f883a 	mov	r7,r17
 100a060:	800d883a 	mov	r6,r16
 100a064:	a009883a 	mov	r4,r20
 100a068:	a80b883a 	mov	r5,r21
 100a06c:	100c0e40 	call	100c0e4 <__subdf3>
 100a070:	1025883a 	mov	r18,r2
 100a074:	b005003a 	cmpeq	r2,r22,zero
 100a078:	1827883a 	mov	r19,r3
 100a07c:	9021883a 	mov	r16,r18
 100a080:	1823883a 	mov	r17,r3
 100a084:	103f8a1e 	bne	r2,zero,1009eb0 <__kernel_rem_pio2+0x444>
 100a088:	d9809317 	ldw	r6,588(sp)
 100a08c:	0009883a 	mov	r4,zero
 100a090:	a80b883a 	mov	r5,r21
 100a094:	100b50c0 	call	100b50c <scalbn>
 100a098:	180f883a 	mov	r7,r3
 100a09c:	9009883a 	mov	r4,r18
 100a0a0:	980b883a 	mov	r5,r19
 100a0a4:	100d883a 	mov	r6,r2
 100a0a8:	100c0e40 	call	100c0e4 <__subdf3>
 100a0ac:	1021883a 	mov	r16,r2
 100a0b0:	1823883a 	mov	r17,r3
 100a0b4:	000d883a 	mov	r6,zero
 100a0b8:	000f883a 	mov	r7,zero
 100a0bc:	8009883a 	mov	r4,r16
 100a0c0:	880b883a 	mov	r5,r17
 100a0c4:	100c7f40 	call	100c7f4 <__eqdf2>
 100a0c8:	103f7f26 	beq	r2,zero,1009ec8 <__kernel_rem_pio2+0x45c>
 100a0cc:	000d883a 	mov	r6,zero
 100a0d0:	000f883a 	mov	r7,zero
 100a0d4:	8009883a 	mov	r4,r16
 100a0d8:	880b883a 	mov	r5,r17
 100a0dc:	100c7f40 	call	100c7f4 <__eqdf2>
 100a0e0:	10019a1e 	bne	r2,zero,100a74c <__kernel_rem_pio2+0xce0>
 100a0e4:	da808d17 	ldw	r10,564(sp)
 100a0e8:	51bfffc4 	addi	r6,r10,-1
 100a0ec:	3185883a 	add	r2,r6,r6
 100a0f0:	1085883a 	add	r2,r2,r2
 100a0f4:	d9009317 	ldw	r4,588(sp)
 100a0f8:	16c5883a 	add	r2,r2,sp
 100a0fc:	10c00017 	ldw	r3,0(r2)
 100a100:	213ffa04 	addi	r4,r4,-24
 100a104:	d9009315 	stw	r4,588(sp)
 100a108:	1801d41e 	bne	r3,zero,100a85c <__kernel_rem_pio2+0xdf0>
 100a10c:	d9808d15 	stw	r6,564(sp)
 100a110:	1007883a 	mov	r3,r2
 100a114:	d9408d17 	ldw	r5,564(sp)
 100a118:	d9809317 	ldw	r6,588(sp)
 100a11c:	18ffff04 	addi	r3,r3,-4
 100a120:	18800017 	ldw	r2,0(r3)
 100a124:	297fffc4 	addi	r5,r5,-1
 100a128:	31bffa04 	addi	r6,r6,-24
 100a12c:	d9408d15 	stw	r5,564(sp)
 100a130:	d9809315 	stw	r6,588(sp)
 100a134:	103ff726 	beq	r2,zero,100a114 <__kernel_rem_pio2+0x6a8>
 100a138:	d9809317 	ldw	r6,588(sp)
 100a13c:	0005883a 	mov	r2,zero
 100a140:	00cffc34 	movhi	r3,16368
 100a144:	180b883a 	mov	r5,r3
 100a148:	1009883a 	mov	r4,r2
 100a14c:	100b50c0 	call	100b50c <scalbn>
 100a150:	d9808d17 	ldw	r6,564(sp)
 100a154:	1021883a 	mov	r16,r2
 100a158:	1823883a 	mov	r17,r3
 100a15c:	30004616 	blt	r6,zero,100a278 <__kernel_rem_pio2+0x80c>
 100a160:	300690fa 	slli	r3,r6,3
 100a164:	3185883a 	add	r2,r6,r6
 100a168:	1085883a 	add	r2,r2,r2
 100a16c:	16e9883a 	add	r20,r2,sp
 100a170:	1ee5883a 	add	r18,r3,sp
 100a174:	3027883a 	mov	r19,r6
 100a178:	057fffc4 	movi	r21,-1
 100a17c:	a1000017 	ldw	r4,0(r20)
 100a180:	9cffffc4 	addi	r19,r19,-1
 100a184:	a53fff04 	addi	r20,r20,-4
 100a188:	100ca140 	call	100ca14 <__floatsidf>
 100a18c:	800d883a 	mov	r6,r16
 100a190:	880f883a 	mov	r7,r17
 100a194:	180b883a 	mov	r5,r3
 100a198:	1009883a 	mov	r4,r2
 100a19c:	100c1d80 	call	100c1d8 <__muldf3>
 100a1a0:	0015883a 	mov	r10,zero
 100a1a4:	02cf9c34 	movhi	r11,15984
 100a1a8:	880b883a 	mov	r5,r17
 100a1ac:	8009883a 	mov	r4,r16
 100a1b0:	90c06515 	stw	r3,404(r18)
 100a1b4:	90806415 	stw	r2,400(r18)
 100a1b8:	580f883a 	mov	r7,r11
 100a1bc:	500d883a 	mov	r6,r10
 100a1c0:	100c1d80 	call	100c1d8 <__muldf3>
 100a1c4:	1021883a 	mov	r16,r2
 100a1c8:	1823883a 	mov	r17,r3
 100a1cc:	94bffe04 	addi	r18,r18,-8
 100a1d0:	9d7fea1e 	bne	r19,r21,100a17c <__kernel_rem_pio2+0x710>
 100a1d4:	d9c09517 	ldw	r7,596(sp)
 100a1d8:	dd808d17 	ldw	r22,564(sp)
 100a1dc:	002b883a 	mov	r21,zero
 100a1e0:	382e403a 	cmpge	r23,r7,zero
 100a1e4:	b800aa26 	beq	r23,zero,100a490 <__kernel_rem_pio2+0xa24>
 100a1e8:	a800a916 	blt	r21,zero,100a490 <__kernel_rem_pio2+0xa24>
 100a1ec:	b00690fa 	slli	r3,r22,3
 100a1f0:	d8806404 	addi	r2,sp,400
 100a1f4:	0021883a 	mov	r16,zero
 100a1f8:	10e9883a 	add	r20,r2,r3
 100a1fc:	0027883a 	mov	r19,zero
 100a200:	0023883a 	mov	r17,zero
 100a204:	048040b4 	movhi	r18,258
 100a208:	949da404 	addi	r18,r18,30352
 100a20c:	00000106 	br	100a214 <__kernel_rem_pio2+0x7a8>
 100a210:	acc01116 	blt	r21,r19,100a258 <__kernel_rem_pio2+0x7ec>
 100a214:	91000017 	ldw	r4,0(r18)
 100a218:	91400117 	ldw	r5,4(r18)
 100a21c:	a1800017 	ldw	r6,0(r20)
 100a220:	a1c00117 	ldw	r7,4(r20)
 100a224:	9cc00044 	addi	r19,r19,1
 100a228:	94800204 	addi	r18,r18,8
 100a22c:	100c1d80 	call	100c1d8 <__muldf3>
 100a230:	180f883a 	mov	r7,r3
 100a234:	880b883a 	mov	r5,r17
 100a238:	8009883a 	mov	r4,r16
 100a23c:	100d883a 	mov	r6,r2
 100a240:	100c1640 	call	100c164 <__adddf3>
 100a244:	da809517 	ldw	r10,596(sp)
 100a248:	a5000204 	addi	r20,r20,8
 100a24c:	1021883a 	mov	r16,r2
 100a250:	1823883a 	mov	r17,r3
 100a254:	54ffee0e 	bge	r10,r19,100a210 <__kernel_rem_pio2+0x7a4>
 100a258:	a80490fa 	slli	r2,r21,3
 100a25c:	b5bfffc4 	addi	r22,r22,-1
 100a260:	ad400044 	addi	r21,r21,1
 100a264:	16c5883a 	add	r2,r2,sp
 100a268:	14403d15 	stw	r17,244(r2)
 100a26c:	14003c15 	stw	r16,240(r2)
 100a270:	00bfffc4 	movi	r2,-1
 100a274:	b0bfdb1e 	bne	r22,r2,100a1e4 <__kernel_rem_pio2+0x778>
 100a278:	d8c0ad17 	ldw	r3,692(sp)
 100a27c:	00800084 	movi	r2,2
 100a280:	10c09316 	blt	r2,r3,100a4d0 <__kernel_rem_pio2+0xa64>
 100a284:	00c1120e 	bge	zero,r3,100a6d0 <__kernel_rem_pio2+0xc64>
 100a288:	d9808d17 	ldw	r6,564(sp)
 100a28c:	30018d16 	blt	r6,zero,100a8c4 <__kernel_rem_pio2+0xe58>
 100a290:	d8c08d17 	ldw	r3,564(sp)
 100a294:	0011883a 	mov	r8,zero
 100a298:	0013883a 	mov	r9,zero
 100a29c:	180490fa 	slli	r2,r3,3
 100a2a0:	1823883a 	mov	r17,r3
 100a2a4:	04bfffc4 	movi	r18,-1
 100a2a8:	16e1883a 	add	r16,r2,sp
 100a2ac:	80803c17 	ldw	r2,240(r16)
 100a2b0:	80c03d17 	ldw	r3,244(r16)
 100a2b4:	480b883a 	mov	r5,r9
 100a2b8:	4009883a 	mov	r4,r8
 100a2bc:	180f883a 	mov	r7,r3
 100a2c0:	100d883a 	mov	r6,r2
 100a2c4:	100c1640 	call	100c164 <__adddf3>
 100a2c8:	8c7fffc4 	addi	r17,r17,-1
 100a2cc:	843ffe04 	addi	r16,r16,-8
 100a2d0:	1011883a 	mov	r8,r2
 100a2d4:	1813883a 	mov	r9,r3
 100a2d8:	8cbff41e 	bne	r17,r18,100a2ac <__kernel_rem_pio2+0x840>
 100a2dc:	d9009217 	ldw	r4,584(sp)
 100a2e0:	20015b1e 	bne	r4,zero,100a850 <__kernel_rem_pio2+0xde4>
 100a2e4:	4009883a 	mov	r4,r8
 100a2e8:	480b883a 	mov	r5,r9
 100a2ec:	d9809717 	ldw	r6,604(sp)
 100a2f0:	d8803c17 	ldw	r2,240(sp)
 100a2f4:	480f883a 	mov	r7,r9
 100a2f8:	31400115 	stw	r5,4(r6)
 100a2fc:	31000015 	stw	r4,0(r6)
 100a300:	d8c03d17 	ldw	r3,244(sp)
 100a304:	400d883a 	mov	r6,r8
 100a308:	1009883a 	mov	r4,r2
 100a30c:	180b883a 	mov	r5,r3
 100a310:	100c0e40 	call	100c0e4 <__subdf3>
 100a314:	d9c08d17 	ldw	r7,564(sp)
 100a318:	1011883a 	mov	r8,r2
 100a31c:	1813883a 	mov	r9,r3
 100a320:	01c00d0e 	bge	zero,r7,100a358 <__kernel_rem_pio2+0x8ec>
 100a324:	0023883a 	mov	r17,zero
 100a328:	dc003e04 	addi	r16,sp,248
 100a32c:	81800017 	ldw	r6,0(r16)
 100a330:	81c00117 	ldw	r7,4(r16)
 100a334:	480b883a 	mov	r5,r9
 100a338:	4009883a 	mov	r4,r8
 100a33c:	100c1640 	call	100c164 <__adddf3>
 100a340:	da808d17 	ldw	r10,564(sp)
 100a344:	8c400044 	addi	r17,r17,1
 100a348:	1011883a 	mov	r8,r2
 100a34c:	1813883a 	mov	r9,r3
 100a350:	84000204 	addi	r16,r16,8
 100a354:	8abff51e 	bne	r17,r10,100a32c <__kernel_rem_pio2+0x8c0>
 100a358:	d8809217 	ldw	r2,584(sp)
 100a35c:	10000226 	beq	r2,zero,100a368 <__kernel_rem_pio2+0x8fc>
 100a360:	48e0003c 	xorhi	r3,r9,32768
 100a364:	1813883a 	mov	r9,r3
 100a368:	d8c09717 	ldw	r3,604(sp)
 100a36c:	1a400315 	stw	r9,12(r3)
 100a370:	1a000215 	stw	r8,8(r3)
 100a374:	d8c09417 	ldw	r3,592(sp)
 100a378:	188001cc 	andi	r2,r3,7
 100a37c:	dfc0ac17 	ldw	ra,688(sp)
 100a380:	df00ab17 	ldw	fp,684(sp)
 100a384:	ddc0aa17 	ldw	r23,680(sp)
 100a388:	dd80a917 	ldw	r22,676(sp)
 100a38c:	dd40a817 	ldw	r21,672(sp)
 100a390:	dd00a717 	ldw	r20,668(sp)
 100a394:	dcc0a617 	ldw	r19,664(sp)
 100a398:	dc80a517 	ldw	r18,660(sp)
 100a39c:	dc40a417 	ldw	r17,656(sp)
 100a3a0:	dc00a317 	ldw	r16,652(sp)
 100a3a4:	dec0ad04 	addi	sp,sp,692
 100a3a8:	f800283a 	ret
 100a3ac:	d8809317 	ldw	r2,588(sp)
 100a3b0:	10001f1e 	bne	r2,zero,100a430 <__kernel_rem_pio2+0x9c4>
 100a3b4:	d8c08d17 	ldw	r3,564(sp)
 100a3b8:	18c5883a 	add	r2,r3,r3
 100a3bc:	1085883a 	add	r2,r2,r2
 100a3c0:	16c5883a 	add	r2,r2,sp
 100a3c4:	10ffff17 	ldw	r3,-4(r2)
 100a3c8:	1807d5fa 	srai	r3,r3,23
 100a3cc:	d8c09215 	stw	r3,584(sp)
 100a3d0:	003e8e06 	br	1009e0c <__kernel_rem_pio2+0x3a0>
 100a3d4:	d9008d17 	ldw	r4,564(sp)
 100a3d8:	d9409317 	ldw	r5,588(sp)
 100a3dc:	2145c83a 	sub	r2,r4,r5
 100a3e0:	1085883a 	add	r2,r2,r2
 100a3e4:	1085883a 	add	r2,r2,r2
 100a3e8:	16c5883a 	add	r2,r2,sp
 100a3ec:	10c00017 	ldw	r3,0(r2)
 100a3f0:	01002034 	movhi	r4,128
 100a3f4:	213fffc4 	addi	r4,r4,-1
 100a3f8:	1906703a 	and	r3,r3,r4
 100a3fc:	10c00015 	stw	r3,0(r2)
 100a400:	003ea806 	br	1009ea4 <__kernel_rem_pio2+0x438>
 100a404:	d9808d17 	ldw	r6,564(sp)
 100a408:	01001034 	movhi	r4,64
 100a40c:	213fffc4 	addi	r4,r4,-1
 100a410:	30bfffc4 	addi	r2,r6,-1
 100a414:	1085883a 	add	r2,r2,r2
 100a418:	1085883a 	add	r2,r2,r2
 100a41c:	16c5883a 	add	r2,r2,sp
 100a420:	10c00017 	ldw	r3,0(r2)
 100a424:	1906703a 	and	r3,r3,r4
 100a428:	10c00015 	stw	r3,0(r2)
 100a42c:	003e9d06 	br	1009ea4 <__kernel_rem_pio2+0x438>
 100a430:	0005883a 	mov	r2,zero
 100a434:	00cff834 	movhi	r3,16352
 100a438:	300b883a 	mov	r5,r6
 100a43c:	180f883a 	mov	r7,r3
 100a440:	8009883a 	mov	r4,r16
 100a444:	100d883a 	mov	r6,r2
 100a448:	100c9040 	call	100c904 <__gedf2>
 100a44c:	10001d0e 	bge	r2,zero,100a4c4 <__kernel_rem_pio2+0xa58>
 100a450:	d8009215 	stw	zero,584(sp)
 100a454:	003e9606 	br	1009eb0 <__kernel_rem_pio2+0x444>
 100a458:	d8c08d17 	ldw	r3,564(sp)
 100a45c:	01000044 	movi	r4,1
 100a460:	192f883a 	add	r23,r3,r4
 100a464:	1f000044 	addi	fp,r3,1
 100a468:	bf3eb516 	blt	r23,fp,1009f40 <__kernel_rem_pio2+0x4d4>
 100a46c:	003eb606 	br	1009f48 <__kernel_rem_pio2+0x4dc>
 100a470:	0021883a 	mov	r16,zero
 100a474:	0023883a 	mov	r17,zero
 100a478:	a5000044 	addi	r20,r20,1
 100a47c:	ac400115 	stw	r17,4(r21)
 100a480:	ac000015 	stw	r16,0(r21)
 100a484:	ad400204 	addi	r21,r21,8
 100a488:	a5fdba1e 	bne	r20,r23,1009b74 <__kernel_rem_pio2+0x108>
 100a48c:	003dd806 	br	1009bf0 <__kernel_rem_pio2+0x184>
 100a490:	a80490fa 	slli	r2,r21,3
 100a494:	0021883a 	mov	r16,zero
 100a498:	0023883a 	mov	r17,zero
 100a49c:	16c5883a 	add	r2,r2,sp
 100a4a0:	14403d15 	stw	r17,244(r2)
 100a4a4:	14003c15 	stw	r16,240(r2)
 100a4a8:	b5bfffc4 	addi	r22,r22,-1
 100a4ac:	00bfffc4 	movi	r2,-1
 100a4b0:	ad400044 	addi	r21,r21,1
 100a4b4:	b0bf4b1e 	bne	r22,r2,100a1e4 <__kernel_rem_pio2+0x778>
 100a4b8:	003f6f06 	br	100a278 <__kernel_rem_pio2+0x80c>
 100a4bc:	002d883a 	mov	r22,zero
 100a4c0:	003e7106 	br	1009e88 <__kernel_rem_pio2+0x41c>
 100a4c4:	01000084 	movi	r4,2
 100a4c8:	d9009215 	stw	r4,584(sp)
 100a4cc:	003e5106 	br	1009e14 <__kernel_rem_pio2+0x3a8>
 100a4d0:	d900ad17 	ldw	r4,692(sp)
 100a4d4:	008000c4 	movi	r2,3
 100a4d8:	20bfa61e 	bne	r4,r2,100a374 <__kernel_rem_pio2+0x908>
 100a4dc:	d9c08d17 	ldw	r7,564(sp)
 100a4e0:	01c02c0e 	bge	zero,r7,100a594 <__kernel_rem_pio2+0xb28>
 100a4e4:	3805883a 	mov	r2,r7
 100a4e8:	00000106 	br	100a4f0 <__kernel_rem_pio2+0xa84>
 100a4ec:	d8808e17 	ldw	r2,568(sp)
 100a4f0:	113fffc4 	addi	r4,r2,-1
 100a4f4:	100690fa 	slli	r3,r2,3
 100a4f8:	200490fa 	slli	r2,r4,3
 100a4fc:	d9008e15 	stw	r4,568(sp)
 100a500:	1ef9883a 	add	fp,r3,sp
 100a504:	16c5883a 	add	r2,r2,sp
 100a508:	d8809a15 	stw	r2,616(sp)
 100a50c:	11403c04 	addi	r5,r2,240
 100a510:	e1803c04 	addi	r6,fp,240
 100a514:	14003c17 	ldw	r16,240(r2)
 100a518:	e5003c17 	ldw	r20,240(fp)
 100a51c:	d9409b15 	stw	r5,620(sp)
 100a520:	d9809c15 	stw	r6,624(sp)
 100a524:	35400117 	ldw	r21,4(r6)
 100a528:	2c400117 	ldw	r17,4(r5)
 100a52c:	8009883a 	mov	r4,r16
 100a530:	a00d883a 	mov	r6,r20
 100a534:	880b883a 	mov	r5,r17
 100a538:	a80f883a 	mov	r7,r21
 100a53c:	100c1640 	call	100c164 <__adddf3>
 100a540:	100d883a 	mov	r6,r2
 100a544:	880b883a 	mov	r5,r17
 100a548:	8009883a 	mov	r4,r16
 100a54c:	180f883a 	mov	r7,r3
 100a550:	1025883a 	mov	r18,r2
 100a554:	1827883a 	mov	r19,r3
 100a558:	100c0e40 	call	100c0e4 <__subdf3>
 100a55c:	180f883a 	mov	r7,r3
 100a560:	a80b883a 	mov	r5,r21
 100a564:	a009883a 	mov	r4,r20
 100a568:	100d883a 	mov	r6,r2
 100a56c:	100c1640 	call	100c164 <__adddf3>
 100a570:	e0803c15 	stw	r2,240(fp)
 100a574:	d9c09c17 	ldw	r7,624(sp)
 100a578:	38c00115 	stw	r3,4(r7)
 100a57c:	da809a17 	ldw	r10,616(sp)
 100a580:	54803c15 	stw	r18,240(r10)
 100a584:	d8809b17 	ldw	r2,620(sp)
 100a588:	14c00115 	stw	r19,4(r2)
 100a58c:	d8c08e17 	ldw	r3,568(sp)
 100a590:	183fd61e 	bne	r3,zero,100a4ec <__kernel_rem_pio2+0xa80>
 100a594:	d9008d17 	ldw	r4,564(sp)
 100a598:	00800044 	movi	r2,1
 100a59c:	1100cc0e 	bge	r2,r4,100a8d0 <__kernel_rem_pio2+0xe64>
 100a5a0:	d8808d17 	ldw	r2,564(sp)
 100a5a4:	117fffc4 	addi	r5,r2,-1
 100a5a8:	100690fa 	slli	r3,r2,3
 100a5ac:	280490fa 	slli	r2,r5,3
 100a5b0:	d9408f15 	stw	r5,572(sp)
 100a5b4:	1ef9883a 	add	fp,r3,sp
 100a5b8:	16c5883a 	add	r2,r2,sp
 100a5bc:	d8809d15 	stw	r2,628(sp)
 100a5c0:	11803c04 	addi	r6,r2,240
 100a5c4:	e1c03c04 	addi	r7,fp,240
 100a5c8:	14003c17 	ldw	r16,240(r2)
 100a5cc:	e5003c17 	ldw	r20,240(fp)
 100a5d0:	d9809e15 	stw	r6,632(sp)
 100a5d4:	d9c09f15 	stw	r7,636(sp)
 100a5d8:	34400117 	ldw	r17,4(r6)
 100a5dc:	3d400117 	ldw	r21,4(r7)
 100a5e0:	8009883a 	mov	r4,r16
 100a5e4:	880b883a 	mov	r5,r17
 100a5e8:	a00d883a 	mov	r6,r20
 100a5ec:	a80f883a 	mov	r7,r21
 100a5f0:	100c1640 	call	100c164 <__adddf3>
 100a5f4:	100d883a 	mov	r6,r2
 100a5f8:	880b883a 	mov	r5,r17
 100a5fc:	8009883a 	mov	r4,r16
 100a600:	180f883a 	mov	r7,r3
 100a604:	1025883a 	mov	r18,r2
 100a608:	1827883a 	mov	r19,r3
 100a60c:	100c0e40 	call	100c0e4 <__subdf3>
 100a610:	180f883a 	mov	r7,r3
 100a614:	a80b883a 	mov	r5,r21
 100a618:	a009883a 	mov	r4,r20
 100a61c:	100d883a 	mov	r6,r2
 100a620:	100c1640 	call	100c164 <__adddf3>
 100a624:	e0803c15 	stw	r2,240(fp)
 100a628:	da809f17 	ldw	r10,636(sp)
 100a62c:	50c00115 	stw	r3,4(r10)
 100a630:	d8c09d17 	ldw	r3,628(sp)
 100a634:	d8808f17 	ldw	r2,572(sp)
 100a638:	1c803c15 	stw	r18,240(r3)
 100a63c:	d9009e17 	ldw	r4,632(sp)
 100a640:	00c00044 	movi	r3,1
 100a644:	24c00115 	stw	r19,4(r4)
 100a648:	d9408f17 	ldw	r5,572(sp)
 100a64c:	28ffd51e 	bne	r5,r3,100a5a4 <__kernel_rem_pio2+0xb38>
 100a650:	dc008d17 	ldw	r16,564(sp)
 100a654:	0011883a 	mov	r8,zero
 100a658:	1825883a 	mov	r18,r3
 100a65c:	800490fa 	slli	r2,r16,3
 100a660:	0013883a 	mov	r9,zero
 100a664:	16e3883a 	add	r17,r2,sp
 100a668:	88803c17 	ldw	r2,240(r17)
 100a66c:	88c03d17 	ldw	r3,244(r17)
 100a670:	480b883a 	mov	r5,r9
 100a674:	4009883a 	mov	r4,r8
 100a678:	180f883a 	mov	r7,r3
 100a67c:	100d883a 	mov	r6,r2
 100a680:	100c1640 	call	100c164 <__adddf3>
 100a684:	843fffc4 	addi	r16,r16,-1
 100a688:	8c7ffe04 	addi	r17,r17,-8
 100a68c:	1011883a 	mov	r8,r2
 100a690:	1813883a 	mov	r9,r3
 100a694:	84bff41e 	bne	r16,r18,100a668 <__kernel_rem_pio2+0xbfc>
 100a698:	d9809217 	ldw	r6,584(sp)
 100a69c:	30007a1e 	bne	r6,zero,100a888 <__kernel_rem_pio2+0xe1c>
 100a6a0:	d9c09717 	ldw	r7,604(sp)
 100a6a4:	d8803c17 	ldw	r2,240(sp)
 100a6a8:	d9003e17 	ldw	r4,248(sp)
 100a6ac:	3a400515 	stw	r9,20(r7)
 100a6b0:	d8c03d17 	ldw	r3,244(sp)
 100a6b4:	d9403f17 	ldw	r5,252(sp)
 100a6b8:	3a000415 	stw	r8,16(r7)
 100a6bc:	38c00115 	stw	r3,4(r7)
 100a6c0:	39400315 	stw	r5,12(r7)
 100a6c4:	38800015 	stw	r2,0(r7)
 100a6c8:	39000215 	stw	r4,8(r7)
 100a6cc:	003f2906 	br	100a374 <__kernel_rem_pio2+0x908>
 100a6d0:	183f281e 	bne	r3,zero,100a374 <__kernel_rem_pio2+0x908>
 100a6d4:	d9408d17 	ldw	r5,564(sp)
 100a6d8:	28008016 	blt	r5,zero,100a8dc <__kernel_rem_pio2+0xe70>
 100a6dc:	dc008d17 	ldw	r16,564(sp)
 100a6e0:	000d883a 	mov	r6,zero
 100a6e4:	000f883a 	mov	r7,zero
 100a6e8:	800490fa 	slli	r2,r16,3
 100a6ec:	04bfffc4 	movi	r18,-1
 100a6f0:	16e3883a 	add	r17,r2,sp
 100a6f4:	88803c17 	ldw	r2,240(r17)
 100a6f8:	88c03d17 	ldw	r3,244(r17)
 100a6fc:	380b883a 	mov	r5,r7
 100a700:	3009883a 	mov	r4,r6
 100a704:	180f883a 	mov	r7,r3
 100a708:	100d883a 	mov	r6,r2
 100a70c:	100c1640 	call	100c164 <__adddf3>
 100a710:	843fffc4 	addi	r16,r16,-1
 100a714:	8c7ffe04 	addi	r17,r17,-8
 100a718:	100d883a 	mov	r6,r2
 100a71c:	180f883a 	mov	r7,r3
 100a720:	84bff41e 	bne	r16,r18,100a6f4 <__kernel_rem_pio2+0xc88>
 100a724:	da809217 	ldw	r10,584(sp)
 100a728:	50000226 	beq	r10,zero,100a734 <__kernel_rem_pio2+0xcc8>
 100a72c:	38e0003c 	xorhi	r3,r7,32768
 100a730:	180f883a 	mov	r7,r3
 100a734:	d8809717 	ldw	r2,604(sp)
 100a738:	11c00115 	stw	r7,4(r2)
 100a73c:	11800015 	stw	r6,0(r2)
 100a740:	003f0c06 	br	100a374 <__kernel_rem_pio2+0x908>
 100a744:	d8008c15 	stw	zero,560(sp)
 100a748:	003ce606 	br	1009ae4 <__kernel_rem_pio2+0x78>
 100a74c:	d9c09317 	ldw	r7,588(sp)
 100a750:	880b883a 	mov	r5,r17
 100a754:	8009883a 	mov	r4,r16
 100a758:	01cdc83a 	sub	r6,zero,r7
 100a75c:	100b50c0 	call	100b50c <scalbn>
 100a760:	0011883a 	mov	r8,zero
 100a764:	02505c34 	movhi	r9,16752
 100a768:	480f883a 	mov	r7,r9
 100a76c:	1009883a 	mov	r4,r2
 100a770:	180b883a 	mov	r5,r3
 100a774:	400d883a 	mov	r6,r8
 100a778:	102d883a 	mov	r22,r2
 100a77c:	182f883a 	mov	r23,r3
 100a780:	100c9040 	call	100c904 <__gedf2>
 100a784:	10003716 	blt	r2,zero,100a864 <__kernel_rem_pio2+0xdf8>
 100a788:	0005883a 	mov	r2,zero
 100a78c:	00cf9c34 	movhi	r3,15984
 100a790:	180f883a 	mov	r7,r3
 100a794:	100d883a 	mov	r6,r2
 100a798:	b009883a 	mov	r4,r22
 100a79c:	b80b883a 	mov	r5,r23
 100a7a0:	100c1d80 	call	100c1d8 <__muldf3>
 100a7a4:	180b883a 	mov	r5,r3
 100a7a8:	1009883a 	mov	r4,r2
 100a7ac:	100cb0c0 	call	100cb0c <__fixdfsi>
 100a7b0:	1009883a 	mov	r4,r2
 100a7b4:	100ca140 	call	100ca14 <__floatsidf>
 100a7b8:	da808d17 	ldw	r10,564(sp)
 100a7bc:	1023883a 	mov	r17,r2
 100a7c0:	1825883a 	mov	r18,r3
 100a7c4:	0005883a 	mov	r2,zero
 100a7c8:	00f05c34 	movhi	r3,49520
 100a7cc:	180f883a 	mov	r7,r3
 100a7d0:	8809883a 	mov	r4,r17
 100a7d4:	900b883a 	mov	r5,r18
 100a7d8:	100d883a 	mov	r6,r2
 100a7dc:	52ab883a 	add	r21,r10,r10
 100a7e0:	100c1d80 	call	100c1d8 <__muldf3>
 100a7e4:	180f883a 	mov	r7,r3
 100a7e8:	b80b883a 	mov	r5,r23
 100a7ec:	100d883a 	mov	r6,r2
 100a7f0:	b009883a 	mov	r4,r22
 100a7f4:	100c1640 	call	100c164 <__adddf3>
 100a7f8:	100d883a 	mov	r6,r2
 100a7fc:	d8808d17 	ldw	r2,564(sp)
 100a800:	180b883a 	mov	r5,r3
 100a804:	3009883a 	mov	r4,r6
 100a808:	10800044 	addi	r2,r2,1
 100a80c:	ad6b883a 	add	r21,r21,r21
 100a810:	d8808d15 	stw	r2,564(sp)
 100a814:	100cb0c0 	call	100cb0c <__fixdfsi>
 100a818:	d8c08d17 	ldw	r3,564(sp)
 100a81c:	aeeb883a 	add	r21,r21,sp
 100a820:	8809883a 	mov	r4,r17
 100a824:	900b883a 	mov	r5,r18
 100a828:	a8800015 	stw	r2,0(r21)
 100a82c:	18e1883a 	add	r16,r3,r3
 100a830:	100cb0c0 	call	100cb0c <__fixdfsi>
 100a834:	d9009317 	ldw	r4,588(sp)
 100a838:	8421883a 	add	r16,r16,r16
 100a83c:	86e1883a 	add	r16,r16,sp
 100a840:	21000604 	addi	r4,r4,24
 100a844:	d9009315 	stw	r4,588(sp)
 100a848:	80800015 	stw	r2,0(r16)
 100a84c:	003e3a06 	br	100a138 <__kernel_rem_pio2+0x6cc>
 100a850:	4009883a 	mov	r4,r8
 100a854:	4960003c 	xorhi	r5,r9,32768
 100a858:	003ea406 	br	100a2ec <__kernel_rem_pio2+0x880>
 100a85c:	d9808d15 	stw	r6,564(sp)
 100a860:	003e3506 	br	100a138 <__kernel_rem_pio2+0x6cc>
 100a864:	d9408d17 	ldw	r5,564(sp)
 100a868:	b009883a 	mov	r4,r22
 100a86c:	2961883a 	add	r16,r5,r5
 100a870:	8421883a 	add	r16,r16,r16
 100a874:	b80b883a 	mov	r5,r23
 100a878:	86e1883a 	add	r16,r16,sp
 100a87c:	100cb0c0 	call	100cb0c <__fixdfsi>
 100a880:	80800015 	stw	r2,0(r16)
 100a884:	003e2c06 	br	100a138 <__kernel_rem_pio2+0x6cc>
 100a888:	d8c03d17 	ldw	r3,244(sp)
 100a88c:	d9403f17 	ldw	r5,252(sp)
 100a890:	da809717 	ldw	r10,604(sp)
 100a894:	d8803c17 	ldw	r2,240(sp)
 100a898:	d9003e17 	ldw	r4,248(sp)
 100a89c:	49e0003c 	xorhi	r7,r9,32768
 100a8a0:	51c00515 	stw	r7,20(r10)
 100a8a4:	19a0003c 	xorhi	r6,r3,32768
 100a8a8:	29e0003c 	xorhi	r7,r5,32768
 100a8ac:	51800115 	stw	r6,4(r10)
 100a8b0:	51c00315 	stw	r7,12(r10)
 100a8b4:	50800015 	stw	r2,0(r10)
 100a8b8:	51000215 	stw	r4,8(r10)
 100a8bc:	52000415 	stw	r8,16(r10)
 100a8c0:	003eac06 	br	100a374 <__kernel_rem_pio2+0x908>
 100a8c4:	0011883a 	mov	r8,zero
 100a8c8:	0013883a 	mov	r9,zero
 100a8cc:	003e8306 	br	100a2dc <__kernel_rem_pio2+0x870>
 100a8d0:	0011883a 	mov	r8,zero
 100a8d4:	0013883a 	mov	r9,zero
 100a8d8:	003f6f06 	br	100a698 <__kernel_rem_pio2+0xc2c>
 100a8dc:	000d883a 	mov	r6,zero
 100a8e0:	000f883a 	mov	r7,zero
 100a8e4:	003f8f06 	br	100a724 <__kernel_rem_pio2+0xcb8>

0100a8e8 <__kernel_sin>:
 100a8e8:	00a00034 	movhi	r2,32768
 100a8ec:	10bfffc4 	addi	r2,r2,-1
 100a8f0:	deffef04 	addi	sp,sp,-68
 100a8f4:	1144703a 	and	r2,r2,r5
 100a8f8:	00cf9034 	movhi	r3,15936
 100a8fc:	18ffffc4 	addi	r3,r3,-1
 100a900:	dd400d15 	stw	r21,52(sp)
 100a904:	dd000c15 	stw	r20,48(sp)
 100a908:	dfc01015 	stw	ra,64(sp)
 100a90c:	ddc00f15 	stw	r23,60(sp)
 100a910:	dd800e15 	stw	r22,56(sp)
 100a914:	dcc00b15 	stw	r19,44(sp)
 100a918:	dc800a15 	stw	r18,40(sp)
 100a91c:	dc400915 	stw	r17,36(sp)
 100a920:	dc000815 	stw	r16,32(sp)
 100a924:	2029883a 	mov	r20,r4
 100a928:	282b883a 	mov	r21,r5
 100a92c:	d9800415 	stw	r6,16(sp)
 100a930:	d9c00515 	stw	r7,20(sp)
 100a934:	18800216 	blt	r3,r2,100a940 <__kernel_sin+0x58>
 100a938:	100cb0c0 	call	100cb0c <__fixdfsi>
 100a93c:	10008826 	beq	r2,zero,100ab60 <__kernel_sin+0x278>
 100a940:	a009883a 	mov	r4,r20
 100a944:	a80b883a 	mov	r5,r21
 100a948:	a00d883a 	mov	r6,r20
 100a94c:	a80f883a 	mov	r7,r21
 100a950:	100c1d80 	call	100c1d8 <__muldf3>
 100a954:	102d883a 	mov	r22,r2
 100a958:	a009883a 	mov	r4,r20
 100a95c:	a80b883a 	mov	r5,r21
 100a960:	b00d883a 	mov	r6,r22
 100a964:	180f883a 	mov	r7,r3
 100a968:	182f883a 	mov	r23,r3
 100a96c:	d8800215 	stw	r2,8(sp)
 100a970:	d8c00315 	stw	r3,12(sp)
 100a974:	100c1d80 	call	100c1d8 <__muldf3>
 100a978:	d9000217 	ldw	r4,8(sp)
 100a97c:	0216b434 	movhi	r8,23248
 100a980:	42355f04 	addi	r8,r8,-10884
 100a984:	024f79b4 	movhi	r9,15846
 100a988:	4a764e84 	addi	r9,r9,-9926
 100a98c:	480f883a 	mov	r7,r9
 100a990:	400d883a 	mov	r6,r8
 100a994:	b80b883a 	mov	r5,r23
 100a998:	d8800615 	stw	r2,24(sp)
 100a99c:	d8c00715 	stw	r3,28(sp)
 100a9a0:	100c1d80 	call	100c1d8 <__muldf3>
 100a9a4:	02228b34 	movhi	r8,35372
 100a9a8:	42273ac4 	addi	r8,r8,-25365
 100a9ac:	024f96f4 	movhi	r9,15963
 100a9b0:	4a797984 	addi	r9,r9,-6682
 100a9b4:	480f883a 	mov	r7,r9
 100a9b8:	400d883a 	mov	r6,r8
 100a9bc:	180b883a 	mov	r5,r3
 100a9c0:	1009883a 	mov	r4,r2
 100a9c4:	100c0e40 	call	100c0e4 <__subdf3>
 100a9c8:	d9000217 	ldw	r4,8(sp)
 100a9cc:	180f883a 	mov	r7,r3
 100a9d0:	b80b883a 	mov	r5,r23
 100a9d4:	100d883a 	mov	r6,r2
 100a9d8:	100c1d80 	call	100c1d8 <__muldf3>
 100a9dc:	0215ecb4 	movhi	r8,22450
 100a9e0:	423f9f44 	addi	r8,r8,-387
 100a9e4:	024fb1f4 	movhi	r9,16071
 100a9e8:	4a4778c4 	addi	r9,r9,7651
 100a9ec:	480f883a 	mov	r7,r9
 100a9f0:	400d883a 	mov	r6,r8
 100a9f4:	180b883a 	mov	r5,r3
 100a9f8:	1009883a 	mov	r4,r2
 100a9fc:	100c1640 	call	100c164 <__adddf3>
 100aa00:	d9000217 	ldw	r4,8(sp)
 100aa04:	180f883a 	mov	r7,r3
 100aa08:	b80b883a 	mov	r5,r23
 100aa0c:	100d883a 	mov	r6,r2
 100aa10:	100c1d80 	call	100c1d8 <__muldf3>
 100aa14:	02067074 	movhi	r8,6593
 100aa18:	42187544 	addi	r8,r8,25045
 100aa1c:	024fcab4 	movhi	r9,16170
 100aa20:	4a406804 	addi	r9,r9,416
 100aa24:	480f883a 	mov	r7,r9
 100aa28:	400d883a 	mov	r6,r8
 100aa2c:	180b883a 	mov	r5,r3
 100aa30:	1009883a 	mov	r4,r2
 100aa34:	100c0e40 	call	100c0e4 <__subdf3>
 100aa38:	d9000217 	ldw	r4,8(sp)
 100aa3c:	180f883a 	mov	r7,r3
 100aa40:	b80b883a 	mov	r5,r23
 100aa44:	100d883a 	mov	r6,r2
 100aa48:	100c1d80 	call	100c1d8 <__muldf3>
 100aa4c:	02044474 	movhi	r8,4369
 100aa50:	423e2984 	addi	r8,r8,-1882
 100aa54:	024fe074 	movhi	r9,16257
 100aa58:	4a444444 	addi	r9,r9,4369
 100aa5c:	180b883a 	mov	r5,r3
 100aa60:	480f883a 	mov	r7,r9
 100aa64:	1009883a 	mov	r4,r2
 100aa68:	400d883a 	mov	r6,r8
 100aa6c:	100c1640 	call	100c164 <__adddf3>
 100aa70:	1021883a 	mov	r16,r2
 100aa74:	d8800617 	ldw	r2,24(sp)
 100aa78:	1823883a 	mov	r17,r3
 100aa7c:	d8800015 	stw	r2,0(sp)
 100aa80:	d8800717 	ldw	r2,28(sp)
 100aa84:	d8800115 	stw	r2,4(sp)
 100aa88:	d8801117 	ldw	r2,68(sp)
 100aa8c:	10004126 	beq	r2,zero,100ab94 <__kernel_sin+0x2ac>
 100aa90:	d9000417 	ldw	r4,16(sp)
 100aa94:	d9400517 	ldw	r5,20(sp)
 100aa98:	0005883a 	mov	r2,zero
 100aa9c:	00cff834 	movhi	r3,16352
 100aaa0:	180f883a 	mov	r7,r3
 100aaa4:	100d883a 	mov	r6,r2
 100aaa8:	100c1d80 	call	100c1d8 <__muldf3>
 100aaac:	d9000017 	ldw	r4,0(sp)
 100aab0:	d9400717 	ldw	r5,28(sp)
 100aab4:	800d883a 	mov	r6,r16
 100aab8:	880f883a 	mov	r7,r17
 100aabc:	1021883a 	mov	r16,r2
 100aac0:	1823883a 	mov	r17,r3
 100aac4:	100c1d80 	call	100c1d8 <__muldf3>
 100aac8:	180f883a 	mov	r7,r3
 100aacc:	880b883a 	mov	r5,r17
 100aad0:	8009883a 	mov	r4,r16
 100aad4:	100d883a 	mov	r6,r2
 100aad8:	100c0e40 	call	100c0e4 <__subdf3>
 100aadc:	d9000217 	ldw	r4,8(sp)
 100aae0:	b80b883a 	mov	r5,r23
 100aae4:	180f883a 	mov	r7,r3
 100aae8:	100d883a 	mov	r6,r2
 100aaec:	100c1d80 	call	100c1d8 <__muldf3>
 100aaf0:	d9c00517 	ldw	r7,20(sp)
 100aaf4:	d9800417 	ldw	r6,16(sp)
 100aaf8:	180b883a 	mov	r5,r3
 100aafc:	1009883a 	mov	r4,r2
 100ab00:	100c0e40 	call	100c0e4 <__subdf3>
 100ab04:	d9000017 	ldw	r4,0(sp)
 100ab08:	d9400717 	ldw	r5,28(sp)
 100ab0c:	02155574 	movhi	r8,21845
 100ab10:	42155244 	addi	r8,r8,21833
 100ab14:	024ff174 	movhi	r9,16325
 100ab18:	4a555544 	addi	r9,r9,21845
 100ab1c:	480f883a 	mov	r7,r9
 100ab20:	400d883a 	mov	r6,r8
 100ab24:	1021883a 	mov	r16,r2
 100ab28:	1823883a 	mov	r17,r3
 100ab2c:	100c1d80 	call	100c1d8 <__muldf3>
 100ab30:	180f883a 	mov	r7,r3
 100ab34:	880b883a 	mov	r5,r17
 100ab38:	8009883a 	mov	r4,r16
 100ab3c:	100d883a 	mov	r6,r2
 100ab40:	100c1640 	call	100c164 <__adddf3>
 100ab44:	180f883a 	mov	r7,r3
 100ab48:	a80b883a 	mov	r5,r21
 100ab4c:	a009883a 	mov	r4,r20
 100ab50:	100d883a 	mov	r6,r2
 100ab54:	100c0e40 	call	100c0e4 <__subdf3>
 100ab58:	1029883a 	mov	r20,r2
 100ab5c:	182b883a 	mov	r21,r3
 100ab60:	a005883a 	mov	r2,r20
 100ab64:	a807883a 	mov	r3,r21
 100ab68:	dfc01017 	ldw	ra,64(sp)
 100ab6c:	ddc00f17 	ldw	r23,60(sp)
 100ab70:	dd800e17 	ldw	r22,56(sp)
 100ab74:	dd400d17 	ldw	r21,52(sp)
 100ab78:	dd000c17 	ldw	r20,48(sp)
 100ab7c:	dcc00b17 	ldw	r19,44(sp)
 100ab80:	dc800a17 	ldw	r18,40(sp)
 100ab84:	dc400917 	ldw	r17,36(sp)
 100ab88:	dc000817 	ldw	r16,32(sp)
 100ab8c:	dec01104 	addi	sp,sp,68
 100ab90:	f800283a 	ret
 100ab94:	d9000217 	ldw	r4,8(sp)
 100ab98:	b80b883a 	mov	r5,r23
 100ab9c:	800d883a 	mov	r6,r16
 100aba0:	180f883a 	mov	r7,r3
 100aba4:	100c1d80 	call	100c1d8 <__muldf3>
 100aba8:	02155574 	movhi	r8,21845
 100abac:	42155244 	addi	r8,r8,21833
 100abb0:	024ff174 	movhi	r9,16325
 100abb4:	4a555544 	addi	r9,r9,21845
 100abb8:	480f883a 	mov	r7,r9
 100abbc:	400d883a 	mov	r6,r8
 100abc0:	180b883a 	mov	r5,r3
 100abc4:	1009883a 	mov	r4,r2
 100abc8:	100c0e40 	call	100c0e4 <__subdf3>
 100abcc:	d9000017 	ldw	r4,0(sp)
 100abd0:	d9400717 	ldw	r5,28(sp)
 100abd4:	180f883a 	mov	r7,r3
 100abd8:	100d883a 	mov	r6,r2
 100abdc:	100c1d80 	call	100c1d8 <__muldf3>
 100abe0:	180f883a 	mov	r7,r3
 100abe4:	a80b883a 	mov	r5,r21
 100abe8:	a009883a 	mov	r4,r20
 100abec:	100d883a 	mov	r6,r2
 100abf0:	100c1640 	call	100c164 <__adddf3>
 100abf4:	1029883a 	mov	r20,r2
 100abf8:	182b883a 	mov	r21,r3
 100abfc:	003fd806 	br	100ab60 <__kernel_sin+0x278>

0100ac00 <atan>:
 100ac00:	defff304 	addi	sp,sp,-52
 100ac04:	00a00034 	movhi	r2,32768
 100ac08:	10bfffc4 	addi	r2,r2,-1
 100ac0c:	dc000315 	stw	r16,12(sp)
 100ac10:	28a0703a 	and	r16,r5,r2
 100ac14:	00910434 	movhi	r2,17424
 100ac18:	10bfffc4 	addi	r2,r2,-1
 100ac1c:	df000b15 	stw	fp,44(sp)
 100ac20:	dfc00c15 	stw	ra,48(sp)
 100ac24:	ddc00a15 	stw	r23,40(sp)
 100ac28:	dd800915 	stw	r22,36(sp)
 100ac2c:	dd400815 	stw	r21,32(sp)
 100ac30:	dd000715 	stw	r20,28(sp)
 100ac34:	dcc00615 	stw	r19,24(sp)
 100ac38:	dc800515 	stw	r18,20(sp)
 100ac3c:	dc400415 	stw	r17,16(sp)
 100ac40:	d9000115 	stw	r4,4(sp)
 100ac44:	d9400215 	stw	r5,8(sp)
 100ac48:	2839883a 	mov	fp,r5
 100ac4c:	1400190e 	bge	r2,r16,100acb4 <atan+0xb4>
 100ac50:	2005883a 	mov	r2,r4
 100ac54:	011ffc34 	movhi	r4,32752
 100ac58:	2400eb0e 	bge	r4,r16,100b008 <atan+0x408>
 100ac5c:	d9000117 	ldw	r4,4(sp)
 100ac60:	d9c00217 	ldw	r7,8(sp)
 100ac64:	200d883a 	mov	r6,r4
 100ac68:	100c1640 	call	100c164 <__adddf3>
 100ac6c:	d8800115 	stw	r2,4(sp)
 100ac70:	d8c00215 	stw	r3,8(sp)
 100ac74:	d9000117 	ldw	r4,4(sp)
 100ac78:	2005883a 	mov	r2,r4
 100ac7c:	d9000217 	ldw	r4,8(sp)
 100ac80:	2007883a 	mov	r3,r4
 100ac84:	dfc00c17 	ldw	ra,48(sp)
 100ac88:	df000b17 	ldw	fp,44(sp)
 100ac8c:	ddc00a17 	ldw	r23,40(sp)
 100ac90:	dd800917 	ldw	r22,36(sp)
 100ac94:	dd400817 	ldw	r21,32(sp)
 100ac98:	dd000717 	ldw	r20,28(sp)
 100ac9c:	dcc00617 	ldw	r19,24(sp)
 100aca0:	dc800517 	ldw	r18,20(sp)
 100aca4:	dc400417 	ldw	r17,16(sp)
 100aca8:	dc000317 	ldw	r16,12(sp)
 100acac:	dec00d04 	addi	sp,sp,52
 100acb0:	f800283a 	ret
 100acb4:	008ff734 	movhi	r2,16348
 100acb8:	10bfffc4 	addi	r2,r2,-1
 100acbc:	1400ec16 	blt	r2,r16,100b070 <atan+0x470>
 100acc0:	008f8834 	movhi	r2,15904
 100acc4:	10bfffc4 	addi	r2,r2,-1
 100acc8:	1400d80e 	bge	r2,r16,100b02c <atan+0x42c>
 100accc:	00bfffc4 	movi	r2,-1
 100acd0:	d8800015 	stw	r2,0(sp)
 100acd4:	d9000117 	ldw	r4,4(sp)
 100acd8:	d9400217 	ldw	r5,8(sp)
 100acdc:	200d883a 	mov	r6,r4
 100ace0:	280f883a 	mov	r7,r5
 100ace4:	100c1d80 	call	100c1d8 <__muldf3>
 100ace8:	1009883a 	mov	r4,r2
 100acec:	180b883a 	mov	r5,r3
 100acf0:	100d883a 	mov	r6,r2
 100acf4:	180f883a 	mov	r7,r3
 100acf8:	1025883a 	mov	r18,r2
 100acfc:	1827883a 	mov	r19,r3
 100ad00:	100c1d80 	call	100c1d8 <__muldf3>
 100ad04:	1021883a 	mov	r16,r2
 100ad08:	1823883a 	mov	r17,r3
 100ad0c:	00b8c8f4 	movhi	r2,58147
 100ad10:	10b68444 	addi	r2,r2,-9711
 100ad14:	00cfe474 	movhi	r3,16273
 100ad18:	18eb4e84 	addi	r3,r3,-21190
 100ad1c:	180f883a 	mov	r7,r3
 100ad20:	8009883a 	mov	r4,r16
 100ad24:	880b883a 	mov	r5,r17
 100ad28:	100d883a 	mov	r6,r2
 100ad2c:	100c1d80 	call	100c1d8 <__muldf3>
 100ad30:	02091db4 	movhi	r8,9334
 100ad34:	42037ac4 	addi	r8,r8,3563
 100ad38:	024fea74 	movhi	r9,16297
 100ad3c:	4a5ed2c4 	addi	r9,r9,31563
 100ad40:	480f883a 	mov	r7,r9
 100ad44:	400d883a 	mov	r6,r8
 100ad48:	180b883a 	mov	r5,r3
 100ad4c:	1009883a 	mov	r4,r2
 100ad50:	100c1640 	call	100c164 <__adddf3>
 100ad54:	180f883a 	mov	r7,r3
 100ad58:	8009883a 	mov	r4,r16
 100ad5c:	880b883a 	mov	r5,r17
 100ad60:	100d883a 	mov	r6,r2
 100ad64:	100c1d80 	call	100c1d8 <__muldf3>
 100ad68:	02283434 	movhi	r8,41168
 100ad6c:	420f5444 	addi	r8,r8,15697
 100ad70:	024fec74 	movhi	r9,16305
 100ad74:	4a435984 	addi	r9,r9,3430
 100ad78:	480f883a 	mov	r7,r9
 100ad7c:	400d883a 	mov	r6,r8
 100ad80:	180b883a 	mov	r5,r3
 100ad84:	1009883a 	mov	r4,r2
 100ad88:	100c1640 	call	100c164 <__adddf3>
 100ad8c:	180f883a 	mov	r7,r3
 100ad90:	8009883a 	mov	r4,r16
 100ad94:	880b883a 	mov	r5,r17
 100ad98:	100d883a 	mov	r6,r2
 100ad9c:	100c1d80 	call	100c1d8 <__muldf3>
 100ada0:	02315334 	movhi	r8,50508
 100ada4:	42081b84 	addi	r8,r8,8302
 100ada8:	024fedf4 	movhi	r9,16311
 100adac:	4a517344 	addi	r9,r9,17869
 100adb0:	480f883a 	mov	r7,r9
 100adb4:	400d883a 	mov	r6,r8
 100adb8:	180b883a 	mov	r5,r3
 100adbc:	1009883a 	mov	r4,r2
 100adc0:	100c1640 	call	100c164 <__adddf3>
 100adc4:	180f883a 	mov	r7,r3
 100adc8:	8009883a 	mov	r4,r16
 100adcc:	880b883a 	mov	r5,r17
 100add0:	100d883a 	mov	r6,r2
 100add4:	100c1d80 	call	100c1d8 <__muldf3>
 100add8:	02248074 	movhi	r8,37377
 100addc:	4220ffc4 	addi	r8,r8,-31745
 100ade0:	024ff0b4 	movhi	r9,16322
 100ade4:	4a524904 	addi	r9,r9,18724
 100ade8:	480f883a 	mov	r7,r9
 100adec:	400d883a 	mov	r6,r8
 100adf0:	180b883a 	mov	r5,r3
 100adf4:	1009883a 	mov	r4,r2
 100adf8:	100c1640 	call	100c164 <__adddf3>
 100adfc:	180f883a 	mov	r7,r3
 100ae00:	8009883a 	mov	r4,r16
 100ae04:	880b883a 	mov	r5,r17
 100ae08:	100d883a 	mov	r6,r2
 100ae0c:	100c1d80 	call	100c1d8 <__muldf3>
 100ae10:	02155574 	movhi	r8,21845
 100ae14:	42154344 	addi	r8,r8,21773
 100ae18:	024ff574 	movhi	r9,16341
 100ae1c:	4a555544 	addi	r9,r9,21845
 100ae20:	480f883a 	mov	r7,r9
 100ae24:	400d883a 	mov	r6,r8
 100ae28:	180b883a 	mov	r5,r3
 100ae2c:	1009883a 	mov	r4,r2
 100ae30:	100c1640 	call	100c164 <__adddf3>
 100ae34:	180f883a 	mov	r7,r3
 100ae38:	9009883a 	mov	r4,r18
 100ae3c:	980b883a 	mov	r5,r19
 100ae40:	100d883a 	mov	r6,r2
 100ae44:	100c1d80 	call	100c1d8 <__muldf3>
 100ae48:	020b1ab4 	movhi	r8,11370
 100ae4c:	421b0bc4 	addi	r8,r8,27695
 100ae50:	026fe8f4 	movhi	r9,49059
 100ae54:	4a6d1104 	addi	r9,r9,-19388
 100ae58:	480f883a 	mov	r7,r9
 100ae5c:	400d883a 	mov	r6,r8
 100ae60:	8009883a 	mov	r4,r16
 100ae64:	880b883a 	mov	r5,r17
 100ae68:	102d883a 	mov	r22,r2
 100ae6c:	182f883a 	mov	r23,r3
 100ae70:	100c1d80 	call	100c1d8 <__muldf3>
 100ae74:	0214b7f4 	movhi	r8,21215
 100ae78:	423f6684 	addi	r8,r8,-614
 100ae7c:	024febb4 	movhi	r9,16302
 100ae80:	4a778b44 	addi	r9,r9,-8659
 100ae84:	480f883a 	mov	r7,r9
 100ae88:	400d883a 	mov	r6,r8
 100ae8c:	180b883a 	mov	r5,r3
 100ae90:	1009883a 	mov	r4,r2
 100ae94:	100c0e40 	call	100c0e4 <__subdf3>
 100ae98:	180f883a 	mov	r7,r3
 100ae9c:	8009883a 	mov	r4,r16
 100aea0:	880b883a 	mov	r5,r17
 100aea4:	100d883a 	mov	r6,r2
 100aea8:	100c1d80 	call	100c1d8 <__muldf3>
 100aeac:	022bdd74 	movhi	r8,44917
 100aeb0:	42269b44 	addi	r8,r8,-26003
 100aeb4:	024fed34 	movhi	r9,16308
 100aeb8:	4a6c3c84 	addi	r9,r9,-20238
 100aebc:	480f883a 	mov	r7,r9
 100aec0:	400d883a 	mov	r6,r8
 100aec4:	180b883a 	mov	r5,r3
 100aec8:	1009883a 	mov	r4,r2
 100aecc:	100c0e40 	call	100c0e4 <__subdf3>
 100aed0:	180f883a 	mov	r7,r3
 100aed4:	8009883a 	mov	r4,r16
 100aed8:	880b883a 	mov	r5,r17
 100aedc:	100d883a 	mov	r6,r2
 100aee0:	100c1d80 	call	100c1d8 <__muldf3>
 100aee4:	023f88f4 	movhi	r8,65059
 100aee8:	42059c44 	addi	r8,r8,5745
 100aeec:	024fef34 	movhi	r9,16316
 100aef0:	4a5c7184 	addi	r9,r9,29126
 100aef4:	480f883a 	mov	r7,r9
 100aef8:	400d883a 	mov	r6,r8
 100aefc:	180b883a 	mov	r5,r3
 100af00:	1009883a 	mov	r4,r2
 100af04:	100c0e40 	call	100c0e4 <__subdf3>
 100af08:	180f883a 	mov	r7,r3
 100af0c:	8009883a 	mov	r4,r16
 100af10:	880b883a 	mov	r5,r17
 100af14:	100d883a 	mov	r6,r2
 100af18:	100c1d80 	call	100c1d8 <__muldf3>
 100af1c:	02266674 	movhi	r8,39321
 100af20:	423af104 	addi	r8,r8,-5180
 100af24:	024ff2b4 	movhi	r9,16330
 100af28:	4a666644 	addi	r9,r9,-26215
 100af2c:	480f883a 	mov	r7,r9
 100af30:	400d883a 	mov	r6,r8
 100af34:	180b883a 	mov	r5,r3
 100af38:	1009883a 	mov	r4,r2
 100af3c:	100c0e40 	call	100c0e4 <__subdf3>
 100af40:	180f883a 	mov	r7,r3
 100af44:	8009883a 	mov	r4,r16
 100af48:	880b883a 	mov	r5,r17
 100af4c:	100d883a 	mov	r6,r2
 100af50:	100c1d80 	call	100c1d8 <__muldf3>
 100af54:	100f883a 	mov	r7,r2
 100af58:	d8800017 	ldw	r2,0(sp)
 100af5c:	b009883a 	mov	r4,r22
 100af60:	b80b883a 	mov	r5,r23
 100af64:	10006b16 	blt	r2,zero,100b114 <atan+0x514>
 100af68:	d8800017 	ldw	r2,0(sp)
 100af6c:	380d883a 	mov	r6,r7
 100af70:	b80b883a 	mov	r5,r23
 100af74:	102490fa 	slli	r18,r2,3
 100af78:	008040b4 	movhi	r2,258
 100af7c:	109db404 	addi	r2,r2,30416
 100af80:	180f883a 	mov	r7,r3
 100af84:	9085883a 	add	r2,r18,r2
 100af88:	14000017 	ldw	r16,0(r2)
 100af8c:	14400117 	ldw	r17,4(r2)
 100af90:	100c1640 	call	100c164 <__adddf3>
 100af94:	d9000117 	ldw	r4,4(sp)
 100af98:	d9400217 	ldw	r5,8(sp)
 100af9c:	180f883a 	mov	r7,r3
 100afa0:	100d883a 	mov	r6,r2
 100afa4:	100c1d80 	call	100c1d8 <__muldf3>
 100afa8:	010040b4 	movhi	r4,258
 100afac:	211dbc04 	addi	r4,r4,30448
 100afb0:	9125883a 	add	r18,r18,r4
 100afb4:	92000017 	ldw	r8,0(r18)
 100afb8:	92400117 	ldw	r9,4(r18)
 100afbc:	180b883a 	mov	r5,r3
 100afc0:	400d883a 	mov	r6,r8
 100afc4:	480f883a 	mov	r7,r9
 100afc8:	1009883a 	mov	r4,r2
 100afcc:	100c0e40 	call	100c0e4 <__subdf3>
 100afd0:	d9c00217 	ldw	r7,8(sp)
 100afd4:	d9800117 	ldw	r6,4(sp)
 100afd8:	180b883a 	mov	r5,r3
 100afdc:	1009883a 	mov	r4,r2
 100afe0:	100c0e40 	call	100c0e4 <__subdf3>
 100afe4:	180f883a 	mov	r7,r3
 100afe8:	880b883a 	mov	r5,r17
 100afec:	8009883a 	mov	r4,r16
 100aff0:	100d883a 	mov	r6,r2
 100aff4:	100c0e40 	call	100c0e4 <__subdf3>
 100aff8:	e0003f16 	blt	fp,zero,100b0f8 <atan+0x4f8>
 100affc:	d8800115 	stw	r2,4(sp)
 100b000:	d8c00215 	stw	r3,8(sp)
 100b004:	003f1b06 	br	100ac74 <atan+0x74>
 100b008:	81003f26 	beq	r16,r4,100b108 <atan+0x508>
 100b00c:	07005e0e 	bge	zero,fp,100b188 <atan+0x588>
 100b010:	01151134 	movhi	r4,21572
 100b014:	210b4604 	addi	r4,r4,11544
 100b018:	008ffe74 	movhi	r2,16377
 100b01c:	10887ec4 	addi	r2,r2,8699
 100b020:	d9000115 	stw	r4,4(sp)
 100b024:	d8800215 	stw	r2,8(sp)
 100b028:	003f1206 	br	100ac74 <atan+0x74>
 100b02c:	d9000117 	ldw	r4,4(sp)
 100b030:	00a20034 	movhi	r2,34816
 100b034:	109d6704 	addi	r2,r2,30108
 100b038:	00df8e34 	movhi	r3,32312
 100b03c:	18f90f04 	addi	r3,r3,-7108
 100b040:	180f883a 	mov	r7,r3
 100b044:	100d883a 	mov	r6,r2
 100b048:	100c1640 	call	100c164 <__adddf3>
 100b04c:	0011883a 	mov	r8,zero
 100b050:	024ffc34 	movhi	r9,16368
 100b054:	180b883a 	mov	r5,r3
 100b058:	480f883a 	mov	r7,r9
 100b05c:	1009883a 	mov	r4,r2
 100b060:	400d883a 	mov	r6,r8
 100b064:	100c87c0 	call	100c87c <__gtdf2>
 100b068:	00bf0216 	blt	zero,r2,100ac74 <atan+0x74>
 100b06c:	003f1706 	br	100accc <atan+0xcc>
 100b070:	d9000117 	ldw	r4,4(sp)
 100b074:	100b2980 	call	100b298 <fabs>
 100b078:	102d883a 	mov	r22,r2
 100b07c:	008ffcf4 	movhi	r2,16371
 100b080:	10bfffc4 	addi	r2,r2,-1
 100b084:	182f883a 	mov	r23,r3
 100b088:	14003016 	blt	r2,r16,100b14c <atan+0x54c>
 100b08c:	008ff9b4 	movhi	r2,16358
 100b090:	10bfffc4 	addi	r2,r2,-1
 100b094:	1400430e 	bge	r2,r16,100b1a4 <atan+0x5a4>
 100b098:	044ffc34 	movhi	r17,16368
 100b09c:	0021883a 	mov	r16,zero
 100b0a0:	800d883a 	mov	r6,r16
 100b0a4:	880f883a 	mov	r7,r17
 100b0a8:	b009883a 	mov	r4,r22
 100b0ac:	180b883a 	mov	r5,r3
 100b0b0:	100c0e40 	call	100c0e4 <__subdf3>
 100b0b4:	880f883a 	mov	r7,r17
 100b0b8:	000d883a 	mov	r6,zero
 100b0bc:	b80b883a 	mov	r5,r23
 100b0c0:	b009883a 	mov	r4,r22
 100b0c4:	1021883a 	mov	r16,r2
 100b0c8:	1823883a 	mov	r17,r3
 100b0cc:	100c1640 	call	100c164 <__adddf3>
 100b0d0:	180f883a 	mov	r7,r3
 100b0d4:	8009883a 	mov	r4,r16
 100b0d8:	880b883a 	mov	r5,r17
 100b0dc:	100d883a 	mov	r6,r2
 100b0e0:	100c59c0 	call	100c59c <__divdf3>
 100b0e4:	01000044 	movi	r4,1
 100b0e8:	d8800115 	stw	r2,4(sp)
 100b0ec:	d8c00215 	stw	r3,8(sp)
 100b0f0:	d9000015 	stw	r4,0(sp)
 100b0f4:	003ef706 	br	100acd4 <atan+0xd4>
 100b0f8:	18e0003c 	xorhi	r3,r3,32768
 100b0fc:	d8800115 	stw	r2,4(sp)
 100b100:	d8c00215 	stw	r3,8(sp)
 100b104:	003edb06 	br	100ac74 <atan+0x74>
 100b108:	103ed41e 	bne	r2,zero,100ac5c <atan+0x5c>
 100b10c:	073fc016 	blt	zero,fp,100b010 <atan+0x410>
 100b110:	00001d06 	br	100b188 <atan+0x588>
 100b114:	380d883a 	mov	r6,r7
 100b118:	180f883a 	mov	r7,r3
 100b11c:	100c1640 	call	100c164 <__adddf3>
 100b120:	d9000117 	ldw	r4,4(sp)
 100b124:	d9400217 	ldw	r5,8(sp)
 100b128:	180f883a 	mov	r7,r3
 100b12c:	100d883a 	mov	r6,r2
 100b130:	100c1d80 	call	100c1d8 <__muldf3>
 100b134:	d9400217 	ldw	r5,8(sp)
 100b138:	d9000117 	ldw	r4,4(sp)
 100b13c:	180f883a 	mov	r7,r3
 100b140:	100d883a 	mov	r6,r2
 100b144:	100c0e40 	call	100c0e4 <__subdf3>
 100b148:	003ec806 	br	100ac6c <atan+0x6c>
 100b14c:	009000f4 	movhi	r2,16387
 100b150:	109fffc4 	addi	r2,r2,32767
 100b154:	1400310e 	bge	r2,r16,100b21c <atan+0x61c>
 100b158:	0005883a 	mov	r2,zero
 100b15c:	00effc34 	movhi	r3,49136
 100b160:	1009883a 	mov	r4,r2
 100b164:	180b883a 	mov	r5,r3
 100b168:	b80f883a 	mov	r7,r23
 100b16c:	b00d883a 	mov	r6,r22
 100b170:	100c59c0 	call	100c59c <__divdf3>
 100b174:	010000c4 	movi	r4,3
 100b178:	d8800115 	stw	r2,4(sp)
 100b17c:	d8c00215 	stw	r3,8(sp)
 100b180:	d9000015 	stw	r4,0(sp)
 100b184:	003ed306 	br	100acd4 <atan+0xd4>
 100b188:	01151134 	movhi	r4,21572
 100b18c:	210b4604 	addi	r4,r4,11544
 100b190:	00affe74 	movhi	r2,49145
 100b194:	10887ec4 	addi	r2,r2,8699
 100b198:	d9000115 	stw	r4,4(sp)
 100b19c:	d8800215 	stw	r2,8(sp)
 100b1a0:	003eb406 	br	100ac74 <atan+0x74>
 100b1a4:	b009883a 	mov	r4,r22
 100b1a8:	180b883a 	mov	r5,r3
 100b1ac:	b00d883a 	mov	r6,r22
 100b1b0:	180f883a 	mov	r7,r3
 100b1b4:	100c1640 	call	100c164 <__adddf3>
 100b1b8:	0011883a 	mov	r8,zero
 100b1bc:	024ffc34 	movhi	r9,16368
 100b1c0:	480f883a 	mov	r7,r9
 100b1c4:	400d883a 	mov	r6,r8
 100b1c8:	180b883a 	mov	r5,r3
 100b1cc:	1009883a 	mov	r4,r2
 100b1d0:	100c0e40 	call	100c0e4 <__subdf3>
 100b1d4:	0011883a 	mov	r8,zero
 100b1d8:	02500034 	movhi	r9,16384
 100b1dc:	480f883a 	mov	r7,r9
 100b1e0:	400d883a 	mov	r6,r8
 100b1e4:	b80b883a 	mov	r5,r23
 100b1e8:	b009883a 	mov	r4,r22
 100b1ec:	1021883a 	mov	r16,r2
 100b1f0:	1823883a 	mov	r17,r3
 100b1f4:	100c1640 	call	100c164 <__adddf3>
 100b1f8:	180f883a 	mov	r7,r3
 100b1fc:	880b883a 	mov	r5,r17
 100b200:	8009883a 	mov	r4,r16
 100b204:	100d883a 	mov	r6,r2
 100b208:	100c59c0 	call	100c59c <__divdf3>
 100b20c:	d8800115 	stw	r2,4(sp)
 100b210:	d8c00215 	stw	r3,8(sp)
 100b214:	d8000015 	stw	zero,0(sp)
 100b218:	003eae06 	br	100acd4 <atan+0xd4>
 100b21c:	044ffe34 	movhi	r17,16376
 100b220:	0021883a 	mov	r16,zero
 100b224:	800d883a 	mov	r6,r16
 100b228:	880f883a 	mov	r7,r17
 100b22c:	b009883a 	mov	r4,r22
 100b230:	180b883a 	mov	r5,r3
 100b234:	100c0e40 	call	100c0e4 <__subdf3>
 100b238:	880f883a 	mov	r7,r17
 100b23c:	000d883a 	mov	r6,zero
 100b240:	b80b883a 	mov	r5,r23
 100b244:	b009883a 	mov	r4,r22
 100b248:	1021883a 	mov	r16,r2
 100b24c:	1823883a 	mov	r17,r3
 100b250:	100c1d80 	call	100c1d8 <__muldf3>
 100b254:	0011883a 	mov	r8,zero
 100b258:	024ffc34 	movhi	r9,16368
 100b25c:	480f883a 	mov	r7,r9
 100b260:	400d883a 	mov	r6,r8
 100b264:	180b883a 	mov	r5,r3
 100b268:	1009883a 	mov	r4,r2
 100b26c:	100c1640 	call	100c164 <__adddf3>
 100b270:	180f883a 	mov	r7,r3
 100b274:	8009883a 	mov	r4,r16
 100b278:	880b883a 	mov	r5,r17
 100b27c:	100d883a 	mov	r6,r2
 100b280:	100c59c0 	call	100c59c <__divdf3>
 100b284:	01000084 	movi	r4,2
 100b288:	d8800115 	stw	r2,4(sp)
 100b28c:	d8c00215 	stw	r3,8(sp)
 100b290:	d9000015 	stw	r4,0(sp)
 100b294:	003e8f06 	br	100acd4 <atan+0xd4>

0100b298 <fabs>:
 100b298:	01e00034 	movhi	r7,32768
 100b29c:	39ffffc4 	addi	r7,r7,-1
 100b2a0:	394e703a 	and	r7,r7,r5
 100b2a4:	2005883a 	mov	r2,r4
 100b2a8:	3807883a 	mov	r3,r7
 100b2ac:	f800283a 	ret

0100b2b0 <floor>:
 100b2b0:	2805d53a 	srai	r2,r5,20
 100b2b4:	defff604 	addi	sp,sp,-40
 100b2b8:	dd800615 	stw	r22,24(sp)
 100b2bc:	10c1ffcc 	andi	r3,r2,2047
 100b2c0:	1dbf0044 	addi	r22,r3,-1023
 100b2c4:	008004c4 	movi	r2,19
 100b2c8:	ddc00715 	stw	r23,28(sp)
 100b2cc:	dc800215 	stw	r18,8(sp)
 100b2d0:	dc400115 	stw	r17,4(sp)
 100b2d4:	dc000015 	stw	r16,0(sp)
 100b2d8:	dfc00915 	stw	ra,36(sp)
 100b2dc:	df000815 	stw	fp,32(sp)
 100b2e0:	dd400515 	stw	r21,20(sp)
 100b2e4:	dd000415 	stw	r20,16(sp)
 100b2e8:	dcc00315 	stw	r19,12(sp)
 100b2ec:	2021883a 	mov	r16,r4
 100b2f0:	2823883a 	mov	r17,r5
 100b2f4:	282f883a 	mov	r23,r5
 100b2f8:	2025883a 	mov	r18,r4
 100b2fc:	15802916 	blt	r2,r22,100b3a4 <floor+0xf4>
 100b300:	b0004816 	blt	r22,zero,100b424 <floor+0x174>
 100b304:	00800434 	movhi	r2,16
 100b308:	10bfffc4 	addi	r2,r2,-1
 100b30c:	15b9d83a 	sra	fp,r2,r22
 100b310:	282f883a 	mov	r23,r5
 100b314:	e144703a 	and	r2,fp,r5
 100b318:	1104b03a 	or	r2,r2,r4
 100b31c:	10001326 	beq	r2,zero,100b36c <floor+0xbc>
 100b320:	00a20034 	movhi	r2,34816
 100b324:	109d6704 	addi	r2,r2,30108
 100b328:	00df8e34 	movhi	r3,32312
 100b32c:	18f90f04 	addi	r3,r3,-7108
 100b330:	180f883a 	mov	r7,r3
 100b334:	100d883a 	mov	r6,r2
 100b338:	100c1640 	call	100c164 <__adddf3>
 100b33c:	180b883a 	mov	r5,r3
 100b340:	000d883a 	mov	r6,zero
 100b344:	000f883a 	mov	r7,zero
 100b348:	1009883a 	mov	r4,r2
 100b34c:	100c87c0 	call	100c87c <__gtdf2>
 100b350:	0080040e 	bge	zero,r2,100b364 <floor+0xb4>
 100b354:	88004416 	blt	r17,zero,100b468 <floor+0x1b8>
 100b358:	0704303a 	nor	r2,zero,fp
 100b35c:	b8ae703a 	and	r23,r23,r2
 100b360:	0025883a 	mov	r18,zero
 100b364:	9021883a 	mov	r16,r18
 100b368:	b823883a 	mov	r17,r23
 100b36c:	8005883a 	mov	r2,r16
 100b370:	8807883a 	mov	r3,r17
 100b374:	dfc00917 	ldw	ra,36(sp)
 100b378:	df000817 	ldw	fp,32(sp)
 100b37c:	ddc00717 	ldw	r23,28(sp)
 100b380:	dd800617 	ldw	r22,24(sp)
 100b384:	dd400517 	ldw	r21,20(sp)
 100b388:	dd000417 	ldw	r20,16(sp)
 100b38c:	dcc00317 	ldw	r19,12(sp)
 100b390:	dc800217 	ldw	r18,8(sp)
 100b394:	dc400117 	ldw	r17,4(sp)
 100b398:	dc000017 	ldw	r16,0(sp)
 100b39c:	dec00a04 	addi	sp,sp,40
 100b3a0:	f800283a 	ret
 100b3a4:	00800cc4 	movi	r2,51
 100b3a8:	15801616 	blt	r2,r22,100b404 <floor+0x154>
 100b3ac:	18befb44 	addi	r2,r3,-1043
 100b3b0:	00ffffc4 	movi	r3,-1
 100b3b4:	18b8d83a 	srl	fp,r3,r2
 100b3b8:	e104703a 	and	r2,fp,r4
 100b3bc:	103feb26 	beq	r2,zero,100b36c <floor+0xbc>
 100b3c0:	00a20034 	movhi	r2,34816
 100b3c4:	109d6704 	addi	r2,r2,30108
 100b3c8:	00df8e34 	movhi	r3,32312
 100b3cc:	18f90f04 	addi	r3,r3,-7108
 100b3d0:	180f883a 	mov	r7,r3
 100b3d4:	100d883a 	mov	r6,r2
 100b3d8:	100c1640 	call	100c164 <__adddf3>
 100b3dc:	180b883a 	mov	r5,r3
 100b3e0:	000d883a 	mov	r6,zero
 100b3e4:	000f883a 	mov	r7,zero
 100b3e8:	1009883a 	mov	r4,r2
 100b3ec:	100c87c0 	call	100c87c <__gtdf2>
 100b3f0:	0080210e 	bge	zero,r2,100b478 <floor+0x1c8>
 100b3f4:	88002216 	blt	r17,zero,100b480 <floor+0x1d0>
 100b3f8:	0704303a 	nor	r2,zero,fp
 100b3fc:	90a4703a 	and	r18,r18,r2
 100b400:	003fd806 	br	100b364 <floor+0xb4>
 100b404:	00810004 	movi	r2,1024
 100b408:	b0bfd81e 	bne	r22,r2,100b36c <floor+0xbc>
 100b40c:	800d883a 	mov	r6,r16
 100b410:	280f883a 	mov	r7,r5
 100b414:	100c1640 	call	100c164 <__adddf3>
 100b418:	1021883a 	mov	r16,r2
 100b41c:	1823883a 	mov	r17,r3
 100b420:	003fd206 	br	100b36c <floor+0xbc>
 100b424:	00a20034 	movhi	r2,34816
 100b428:	109d6704 	addi	r2,r2,30108
 100b42c:	00df8e34 	movhi	r3,32312
 100b430:	18f90f04 	addi	r3,r3,-7108
 100b434:	180f883a 	mov	r7,r3
 100b438:	100d883a 	mov	r6,r2
 100b43c:	100c1640 	call	100c164 <__adddf3>
 100b440:	180b883a 	mov	r5,r3
 100b444:	000d883a 	mov	r6,zero
 100b448:	000f883a 	mov	r7,zero
 100b44c:	1009883a 	mov	r4,r2
 100b450:	100c87c0 	call	100c87c <__gtdf2>
 100b454:	00bfc30e 	bge	zero,r2,100b364 <floor+0xb4>
 100b458:	88001416 	blt	r17,zero,100b4ac <floor+0x1fc>
 100b45c:	002f883a 	mov	r23,zero
 100b460:	0025883a 	mov	r18,zero
 100b464:	003fbf06 	br	100b364 <floor+0xb4>
 100b468:	00800434 	movhi	r2,16
 100b46c:	1585d83a 	sra	r2,r2,r22
 100b470:	88af883a 	add	r23,r17,r2
 100b474:	003fb806 	br	100b358 <floor+0xa8>
 100b478:	882f883a 	mov	r23,r17
 100b47c:	003fb906 	br	100b364 <floor+0xb4>
 100b480:	00800504 	movi	r2,20
 100b484:	b0801126 	beq	r22,r2,100b4cc <floor+0x21c>
 100b488:	00c00d04 	movi	r3,52
 100b48c:	1d87c83a 	sub	r3,r3,r22
 100b490:	00800044 	movi	r2,1
 100b494:	10c4983a 	sll	r2,r2,r3
 100b498:	8085883a 	add	r2,r16,r2
 100b49c:	1400012e 	bgeu	r2,r16,100b4a4 <floor+0x1f4>
 100b4a0:	8dc00044 	addi	r23,r17,1
 100b4a4:	1025883a 	mov	r18,r2
 100b4a8:	003fd306 	br	100b3f8 <floor+0x148>
 100b4ac:	00a00034 	movhi	r2,32768
 100b4b0:	10bfffc4 	addi	r2,r2,-1
 100b4b4:	8884703a 	and	r2,r17,r2
 100b4b8:	8084b03a 	or	r2,r16,r2
 100b4bc:	103fee26 	beq	r2,zero,100b478 <floor+0x1c8>
 100b4c0:	05effc34 	movhi	r23,49136
 100b4c4:	0025883a 	mov	r18,zero
 100b4c8:	003fa606 	br	100b364 <floor+0xb4>
 100b4cc:	8dc00044 	addi	r23,r17,1
 100b4d0:	003fc906 	br	100b3f8 <floor+0x148>

0100b4d4 <__isnand>:
 100b4d4:	200d883a 	mov	r6,r4
 100b4d8:	0109c83a 	sub	r4,zero,r4
 100b4dc:	2188b03a 	or	r4,r4,r6
 100b4e0:	2008d7fa 	srli	r4,r4,31
 100b4e4:	00a00034 	movhi	r2,32768
 100b4e8:	10bfffc4 	addi	r2,r2,-1
 100b4ec:	1144703a 	and	r2,r2,r5
 100b4f0:	2088b03a 	or	r4,r4,r2
 100b4f4:	009ffc34 	movhi	r2,32752
 100b4f8:	1105c83a 	sub	r2,r2,r4
 100b4fc:	1004d7fa 	srli	r2,r2,31
 100b500:	f800283a 	ret

0100b504 <matherr>:
 100b504:	0005883a 	mov	r2,zero
 100b508:	f800283a 	ret

0100b50c <scalbn>:
 100b50c:	2011883a 	mov	r8,r4
 100b510:	291ffc2c 	andhi	r4,r5,32752
 100b514:	2009d53a 	srai	r4,r4,20
 100b518:	defffd04 	addi	sp,sp,-12
 100b51c:	dc000015 	stw	r16,0(sp)
 100b520:	dfc00215 	stw	ra,8(sp)
 100b524:	dc400115 	stw	r17,4(sp)
 100b528:	2813883a 	mov	r9,r5
 100b52c:	2815883a 	mov	r10,r5
 100b530:	3021883a 	mov	r16,r6
 100b534:	2000281e 	bne	r4,zero,100b5d8 <scalbn+0xcc>
 100b538:	00a00034 	movhi	r2,32768
 100b53c:	10bfffc4 	addi	r2,r2,-1
 100b540:	2884703a 	and	r2,r5,r2
 100b544:	4084b03a 	or	r2,r8,r2
 100b548:	10001826 	beq	r2,zero,100b5ac <scalbn+0xa0>
 100b54c:	0005883a 	mov	r2,zero
 100b550:	00d0d434 	movhi	r3,17232
 100b554:	4009883a 	mov	r4,r8
 100b558:	100d883a 	mov	r6,r2
 100b55c:	180f883a 	mov	r7,r3
 100b560:	100c1d80 	call	100c1d8 <__muldf3>
 100b564:	100b883a 	mov	r5,r2
 100b568:	1011883a 	mov	r8,r2
 100b56c:	00bffff4 	movhi	r2,65535
 100b570:	108f2c04 	addi	r2,r2,15536
 100b574:	180d883a 	mov	r6,r3
 100b578:	1813883a 	mov	r9,r3
 100b57c:	8080120e 	bge	r16,r2,100b5c8 <scalbn+0xbc>
 100b580:	00b0be74 	movhi	r2,49913
 100b584:	10bcd644 	addi	r2,r2,-3239
 100b588:	00c06974 	movhi	r3,421
 100b58c:	18db87c4 	addi	r3,r3,28191
 100b590:	2809883a 	mov	r4,r5
 100b594:	180f883a 	mov	r7,r3
 100b598:	300b883a 	mov	r5,r6
 100b59c:	100d883a 	mov	r6,r2
 100b5a0:	100c1d80 	call	100c1d8 <__muldf3>
 100b5a4:	1011883a 	mov	r8,r2
 100b5a8:	1813883a 	mov	r9,r3
 100b5ac:	4005883a 	mov	r2,r8
 100b5b0:	4807883a 	mov	r3,r9
 100b5b4:	dfc00217 	ldw	ra,8(sp)
 100b5b8:	dc400117 	ldw	r17,4(sp)
 100b5bc:	dc000017 	ldw	r16,0(sp)
 100b5c0:	dec00304 	addi	sp,sp,12
 100b5c4:	f800283a 	ret
 100b5c8:	189ffc2c 	andhi	r2,r3,32752
 100b5cc:	1005d53a 	srai	r2,r2,20
 100b5d0:	1815883a 	mov	r10,r3
 100b5d4:	113ff284 	addi	r4,r2,-54
 100b5d8:	0081ffc4 	movi	r2,2047
 100b5dc:	20801126 	beq	r4,r2,100b624 <scalbn+0x118>
 100b5e0:	2409883a 	add	r4,r4,r16
 100b5e4:	0081ff84 	movi	r2,2046
 100b5e8:	11001c16 	blt	r2,r4,100b65c <scalbn+0x150>
 100b5ec:	0100290e 	bge	zero,r4,100b694 <scalbn+0x188>
 100b5f0:	200a953a 	slli	r5,r4,20
 100b5f4:	01200434 	movhi	r4,32784
 100b5f8:	213fffc4 	addi	r4,r4,-1
 100b5fc:	5108703a 	and	r4,r10,r4
 100b600:	2148b03a 	or	r4,r4,r5
 100b604:	2013883a 	mov	r9,r4
 100b608:	4005883a 	mov	r2,r8
 100b60c:	4807883a 	mov	r3,r9
 100b610:	dfc00217 	ldw	ra,8(sp)
 100b614:	dc400117 	ldw	r17,4(sp)
 100b618:	dc000017 	ldw	r16,0(sp)
 100b61c:	dec00304 	addi	sp,sp,12
 100b620:	f800283a 	ret
 100b624:	480f883a 	mov	r7,r9
 100b628:	4009883a 	mov	r4,r8
 100b62c:	480b883a 	mov	r5,r9
 100b630:	400d883a 	mov	r6,r8
 100b634:	100c1640 	call	100c164 <__adddf3>
 100b638:	1011883a 	mov	r8,r2
 100b63c:	1813883a 	mov	r9,r3
 100b640:	4005883a 	mov	r2,r8
 100b644:	4807883a 	mov	r3,r9
 100b648:	dfc00217 	ldw	ra,8(sp)
 100b64c:	dc400117 	ldw	r17,4(sp)
 100b650:	dc000017 	ldw	r16,0(sp)
 100b654:	dec00304 	addi	sp,sp,12
 100b658:	f800283a 	ret
 100b65c:	04220034 	movhi	r16,34816
 100b660:	841d6704 	addi	r16,r16,30108
 100b664:	045f8e34 	movhi	r17,32312
 100b668:	8c790f04 	addi	r17,r17,-7108
 100b66c:	480f883a 	mov	r7,r9
 100b670:	400d883a 	mov	r6,r8
 100b674:	8009883a 	mov	r4,r16
 100b678:	880b883a 	mov	r5,r17
 100b67c:	100b6ec0 	call	100b6ec <copysign>
 100b680:	180b883a 	mov	r5,r3
 100b684:	800d883a 	mov	r6,r16
 100b688:	880f883a 	mov	r7,r17
 100b68c:	1009883a 	mov	r4,r2
 100b690:	003fc306 	br	100b5a0 <scalbn+0x94>
 100b694:	00bff284 	movi	r2,-54
 100b698:	11000716 	blt	r2,r4,100b6b8 <scalbn+0x1ac>
 100b69c:	00b0d414 	movui	r2,50000
 100b6a0:	143fee16 	blt	r2,r16,100b65c <scalbn+0x150>
 100b6a4:	0430be74 	movhi	r16,49913
 100b6a8:	843cd644 	addi	r16,r16,-3239
 100b6ac:	04406974 	movhi	r17,421
 100b6b0:	8c5b87c4 	addi	r17,r17,28191
 100b6b4:	003fed06 	br	100b66c <scalbn+0x160>
 100b6b8:	21000d84 	addi	r4,r4,54
 100b6bc:	2008953a 	slli	r4,r4,20
 100b6c0:	01e00434 	movhi	r7,32784
 100b6c4:	39ffffc4 	addi	r7,r7,-1
 100b6c8:	51ce703a 	and	r7,r10,r7
 100b6cc:	390eb03a 	or	r7,r7,r4
 100b6d0:	024f2434 	movhi	r9,15504
 100b6d4:	4009883a 	mov	r4,r8
 100b6d8:	0011883a 	mov	r8,zero
 100b6dc:	380b883a 	mov	r5,r7
 100b6e0:	400d883a 	mov	r6,r8
 100b6e4:	480f883a 	mov	r7,r9
 100b6e8:	003fad06 	br	100b5a0 <scalbn+0x94>

0100b6ec <copysign>:
 100b6ec:	3813883a 	mov	r9,r7
 100b6f0:	01e00034 	movhi	r7,32768
 100b6f4:	39ffffc4 	addi	r7,r7,-1
 100b6f8:	394e703a 	and	r7,r7,r5
 100b6fc:	4aa0002c 	andhi	r10,r9,32768
 100b700:	3a8eb03a 	or	r7,r7,r10
 100b704:	2005883a 	mov	r2,r4
 100b708:	3807883a 	mov	r3,r7
 100b70c:	f800283a 	ret

0100b710 <__mulsf3>:
 100b710:	deffef04 	addi	sp,sp,-68
 100b714:	dc400f15 	stw	r17,60(sp)
 100b718:	dc400204 	addi	r17,sp,8
 100b71c:	dc000e15 	stw	r16,56(sp)
 100b720:	d9000015 	stw	r4,0(sp)
 100b724:	d9400115 	stw	r5,4(sp)
 100b728:	d809883a 	mov	r4,sp
 100b72c:	880b883a 	mov	r5,r17
 100b730:	dc000604 	addi	r16,sp,24
 100b734:	dfc01015 	stw	ra,64(sp)
 100b738:	100d0540 	call	100d054 <__unpack_f>
 100b73c:	d9000104 	addi	r4,sp,4
 100b740:	800b883a 	mov	r5,r16
 100b744:	100d0540 	call	100d054 <__unpack_f>
 100b748:	d9000217 	ldw	r4,8(sp)
 100b74c:	00800044 	movi	r2,1
 100b750:	01400104 	movi	r5,4
 100b754:	1100142e 	bgeu	r2,r4,100b7a8 <__mulsf3+0x98>
 100b758:	d8c00617 	ldw	r3,24(sp)
 100b75c:	10c0052e 	bgeu	r2,r3,100b774 <__mulsf3+0x64>
 100b760:	21400f26 	beq	r4,r5,100b7a0 <__mulsf3+0x90>
 100b764:	19405d26 	beq	r3,r5,100b8dc <__mulsf3+0x1cc>
 100b768:	00800084 	movi	r2,2
 100b76c:	20800e26 	beq	r4,r2,100b7a8 <__mulsf3+0x98>
 100b770:	1880181e 	bne	r3,r2,100b7d4 <__mulsf3+0xc4>
 100b774:	d8c00717 	ldw	r3,28(sp)
 100b778:	d8800317 	ldw	r2,12(sp)
 100b77c:	8009883a 	mov	r4,r16
 100b780:	10c4c03a 	cmpne	r2,r2,r3
 100b784:	d8800715 	stw	r2,28(sp)
 100b788:	100cef40 	call	100cef4 <__pack_f>
 100b78c:	dfc01017 	ldw	ra,64(sp)
 100b790:	dc400f17 	ldw	r17,60(sp)
 100b794:	dc000e17 	ldw	r16,56(sp)
 100b798:	dec01104 	addi	sp,sp,68
 100b79c:	f800283a 	ret
 100b7a0:	00800084 	movi	r2,2
 100b7a4:	18804f26 	beq	r3,r2,100b8e4 <__mulsf3+0x1d4>
 100b7a8:	d8800317 	ldw	r2,12(sp)
 100b7ac:	d8c00717 	ldw	r3,28(sp)
 100b7b0:	8809883a 	mov	r4,r17
 100b7b4:	10c4c03a 	cmpne	r2,r2,r3
 100b7b8:	d8800315 	stw	r2,12(sp)
 100b7bc:	100cef40 	call	100cef4 <__pack_f>
 100b7c0:	dfc01017 	ldw	ra,64(sp)
 100b7c4:	dc400f17 	ldw	r17,60(sp)
 100b7c8:	dc000e17 	ldw	r16,56(sp)
 100b7cc:	dec01104 	addi	sp,sp,68
 100b7d0:	f800283a 	ret
 100b7d4:	d8800517 	ldw	r2,20(sp)
 100b7d8:	da000917 	ldw	r8,36(sp)
 100b7dc:	0013883a 	mov	r9,zero
 100b7e0:	0007883a 	mov	r3,zero
 100b7e4:	480f883a 	mov	r7,r9
 100b7e8:	180b883a 	mov	r5,r3
 100b7ec:	400d883a 	mov	r6,r8
 100b7f0:	1009883a 	mov	r4,r2
 100b7f4:	100cddc0 	call	100cddc <__muldi3>
 100b7f8:	da800417 	ldw	r10,16(sp)
 100b7fc:	d9800817 	ldw	r6,32(sp)
 100b800:	da400317 	ldw	r9,12(sp)
 100b804:	52800084 	addi	r10,r10,2
 100b808:	3295883a 	add	r10,r6,r10
 100b80c:	d9800717 	ldw	r6,28(sp)
 100b810:	180b883a 	mov	r5,r3
 100b814:	180f883a 	mov	r7,r3
 100b818:	4992c03a 	cmpne	r9,r9,r6
 100b81c:	da400b15 	stw	r9,44(sp)
 100b820:	1007883a 	mov	r3,r2
 100b824:	da800c15 	stw	r10,48(sp)
 100b828:	2800070e 	bge	r5,zero,100b848 <__mulsf3+0x138>
 100b82c:	2880004c 	andi	r2,r5,1
 100b830:	1005003a 	cmpeq	r2,r2,zero
 100b834:	500d883a 	mov	r6,r10
 100b838:	10001e26 	beq	r2,zero,100b8b4 <__mulsf3+0x1a4>
 100b83c:	380ed07a 	srli	r7,r7,1
 100b840:	31800044 	addi	r6,r6,1
 100b844:	d9800c15 	stw	r6,48(sp)
 100b848:	01100034 	movhi	r4,16384
 100b84c:	213fffc4 	addi	r4,r4,-1
 100b850:	21c00b36 	bltu	r4,r7,100b880 <__mulsf3+0x170>
 100b854:	d8800c17 	ldw	r2,48(sp)
 100b858:	00000206 	br	100b864 <__mulsf3+0x154>
 100b85c:	18c7883a 	add	r3,r3,r3
 100b860:	21c00636 	bltu	r4,r7,100b87c <__mulsf3+0x16c>
 100b864:	10bfffc4 	addi	r2,r2,-1
 100b868:	39cf883a 	add	r7,r7,r7
 100b86c:	183ffb0e 	bge	r3,zero,100b85c <__mulsf3+0x14c>
 100b870:	39c00054 	ori	r7,r7,1
 100b874:	18c7883a 	add	r3,r3,r3
 100b878:	21fffa2e 	bgeu	r4,r7,100b864 <__mulsf3+0x154>
 100b87c:	d8800c15 	stw	r2,48(sp)
 100b880:	39001fcc 	andi	r4,r7,127
 100b884:	00801004 	movi	r2,64
 100b888:	20800d26 	beq	r4,r2,100b8c0 <__mulsf3+0x1b0>
 100b88c:	008000c4 	movi	r2,3
 100b890:	d9000a04 	addi	r4,sp,40
 100b894:	d9c00d15 	stw	r7,52(sp)
 100b898:	d8800a15 	stw	r2,40(sp)
 100b89c:	100cef40 	call	100cef4 <__pack_f>
 100b8a0:	dfc01017 	ldw	ra,64(sp)
 100b8a4:	dc400f17 	ldw	r17,60(sp)
 100b8a8:	dc000e17 	ldw	r16,56(sp)
 100b8ac:	dec01104 	addi	sp,sp,68
 100b8b0:	f800283a 	ret
 100b8b4:	1804d07a 	srli	r2,r3,1
 100b8b8:	10e00034 	orhi	r3,r2,32768
 100b8bc:	003fdf06 	br	100b83c <__mulsf3+0x12c>
 100b8c0:	3880200c 	andi	r2,r7,128
 100b8c4:	103ff11e 	bne	r2,zero,100b88c <__mulsf3+0x17c>
 100b8c8:	183ff026 	beq	r3,zero,100b88c <__mulsf3+0x17c>
 100b8cc:	3907883a 	add	r3,r7,r4
 100b8d0:	00bfe004 	movi	r2,-128
 100b8d4:	188e703a 	and	r7,r3,r2
 100b8d8:	003fec06 	br	100b88c <__mulsf3+0x17c>
 100b8dc:	00800084 	movi	r2,2
 100b8e0:	20bfa41e 	bne	r4,r2,100b774 <__mulsf3+0x64>
 100b8e4:	010040b4 	movhi	r4,258
 100b8e8:	211dc404 	addi	r4,r4,30480
 100b8ec:	003fb306 	br	100b7bc <__mulsf3+0xac>

0100b8f0 <__divsf3>:
 100b8f0:	defff304 	addi	sp,sp,-52
 100b8f4:	dc400b15 	stw	r17,44(sp)
 100b8f8:	dc400204 	addi	r17,sp,8
 100b8fc:	dc000a15 	stw	r16,40(sp)
 100b900:	d9000015 	stw	r4,0(sp)
 100b904:	d9400115 	stw	r5,4(sp)
 100b908:	d809883a 	mov	r4,sp
 100b90c:	880b883a 	mov	r5,r17
 100b910:	dc000604 	addi	r16,sp,24
 100b914:	dfc00c15 	stw	ra,48(sp)
 100b918:	100d0540 	call	100d054 <__unpack_f>
 100b91c:	d9000104 	addi	r4,sp,4
 100b920:	800b883a 	mov	r5,r16
 100b924:	100d0540 	call	100d054 <__unpack_f>
 100b928:	d9000217 	ldw	r4,8(sp)
 100b92c:	00800044 	movi	r2,1
 100b930:	01800104 	movi	r6,4
 100b934:	11000a2e 	bgeu	r2,r4,100b960 <__divsf3+0x70>
 100b938:	d9400617 	ldw	r5,24(sp)
 100b93c:	1140432e 	bgeu	r2,r5,100ba4c <__divsf3+0x15c>
 100b940:	d8800317 	ldw	r2,12(sp)
 100b944:	d8c00717 	ldw	r3,28(sp)
 100b948:	10c4f03a 	xor	r2,r2,r3
 100b94c:	d8800315 	stw	r2,12(sp)
 100b950:	21800226 	beq	r4,r6,100b95c <__divsf3+0x6c>
 100b954:	00800084 	movi	r2,2
 100b958:	2080101e 	bne	r4,r2,100b99c <__divsf3+0xac>
 100b95c:	29000726 	beq	r5,r4,100b97c <__divsf3+0x8c>
 100b960:	8809883a 	mov	r4,r17
 100b964:	100cef40 	call	100cef4 <__pack_f>
 100b968:	dfc00c17 	ldw	ra,48(sp)
 100b96c:	dc400b17 	ldw	r17,44(sp)
 100b970:	dc000a17 	ldw	r16,40(sp)
 100b974:	dec00d04 	addi	sp,sp,52
 100b978:	f800283a 	ret
 100b97c:	010040b4 	movhi	r4,258
 100b980:	211dc404 	addi	r4,r4,30480
 100b984:	100cef40 	call	100cef4 <__pack_f>
 100b988:	dfc00c17 	ldw	ra,48(sp)
 100b98c:	dc400b17 	ldw	r17,44(sp)
 100b990:	dc000a17 	ldw	r16,40(sp)
 100b994:	dec00d04 	addi	sp,sp,52
 100b998:	f800283a 	ret
 100b99c:	29802d26 	beq	r5,r6,100ba54 <__divsf3+0x164>
 100b9a0:	28801a26 	beq	r5,r2,100ba0c <__divsf3+0x11c>
 100b9a4:	d8c00417 	ldw	r3,16(sp)
 100b9a8:	d8800817 	ldw	r2,32(sp)
 100b9ac:	d9000517 	ldw	r4,20(sp)
 100b9b0:	d9800917 	ldw	r6,36(sp)
 100b9b4:	1885c83a 	sub	r2,r3,r2
 100b9b8:	d8800415 	stw	r2,16(sp)
 100b9bc:	2180032e 	bgeu	r4,r6,100b9cc <__divsf3+0xdc>
 100b9c0:	10bfffc4 	addi	r2,r2,-1
 100b9c4:	d8800415 	stw	r2,16(sp)
 100b9c8:	2109883a 	add	r4,r4,r4
 100b9cc:	01500034 	movhi	r5,16384
 100b9d0:	0007883a 	mov	r3,zero
 100b9d4:	0005883a 	mov	r2,zero
 100b9d8:	01c007c4 	movi	r7,31
 100b9dc:	10800044 	addi	r2,r2,1
 100b9e0:	21800236 	bltu	r4,r6,100b9ec <__divsf3+0xfc>
 100b9e4:	1946b03a 	or	r3,r3,r5
 100b9e8:	2189c83a 	sub	r4,r4,r6
 100b9ec:	280ad07a 	srli	r5,r5,1
 100b9f0:	2109883a 	add	r4,r4,r4
 100b9f4:	11fff91e 	bne	r2,r7,100b9dc <__divsf3+0xec>
 100b9f8:	19401fcc 	andi	r5,r3,127
 100b9fc:	00801004 	movi	r2,64
 100ba00:	28800a26 	beq	r5,r2,100ba2c <__divsf3+0x13c>
 100ba04:	d8c00515 	stw	r3,20(sp)
 100ba08:	003fd506 	br	100b960 <__divsf3+0x70>
 100ba0c:	8809883a 	mov	r4,r17
 100ba10:	d9800215 	stw	r6,8(sp)
 100ba14:	100cef40 	call	100cef4 <__pack_f>
 100ba18:	dfc00c17 	ldw	ra,48(sp)
 100ba1c:	dc400b17 	ldw	r17,44(sp)
 100ba20:	dc000a17 	ldw	r16,40(sp)
 100ba24:	dec00d04 	addi	sp,sp,52
 100ba28:	f800283a 	ret
 100ba2c:	1880200c 	andi	r2,r3,128
 100ba30:	103ff41e 	bne	r2,zero,100ba04 <__divsf3+0x114>
 100ba34:	203ff326 	beq	r4,zero,100ba04 <__divsf3+0x114>
 100ba38:	1947883a 	add	r3,r3,r5
 100ba3c:	00bfe004 	movi	r2,-128
 100ba40:	1886703a 	and	r3,r3,r2
 100ba44:	d8c00515 	stw	r3,20(sp)
 100ba48:	003fc506 	br	100b960 <__divsf3+0x70>
 100ba4c:	8009883a 	mov	r4,r16
 100ba50:	003fc406 	br	100b964 <__divsf3+0x74>
 100ba54:	8809883a 	mov	r4,r17
 100ba58:	d8000515 	stw	zero,20(sp)
 100ba5c:	d8000415 	stw	zero,16(sp)
 100ba60:	003fc006 	br	100b964 <__divsf3+0x74>

0100ba64 <__gesf2>:
 100ba64:	defff304 	addi	sp,sp,-52
 100ba68:	dc400b15 	stw	r17,44(sp)
 100ba6c:	dc400204 	addi	r17,sp,8
 100ba70:	dc000a15 	stw	r16,40(sp)
 100ba74:	d9000015 	stw	r4,0(sp)
 100ba78:	d9400115 	stw	r5,4(sp)
 100ba7c:	d809883a 	mov	r4,sp
 100ba80:	880b883a 	mov	r5,r17
 100ba84:	dc000604 	addi	r16,sp,24
 100ba88:	dfc00c15 	stw	ra,48(sp)
 100ba8c:	100d0540 	call	100d054 <__unpack_f>
 100ba90:	d9000104 	addi	r4,sp,4
 100ba94:	800b883a 	mov	r5,r16
 100ba98:	100d0540 	call	100d054 <__unpack_f>
 100ba9c:	d8800217 	ldw	r2,8(sp)
 100baa0:	00c00044 	movi	r3,1
 100baa4:	01bfffc4 	movi	r6,-1
 100baa8:	1880062e 	bgeu	r3,r2,100bac4 <__gesf2+0x60>
 100baac:	d8800617 	ldw	r2,24(sp)
 100bab0:	8809883a 	mov	r4,r17
 100bab4:	800b883a 	mov	r5,r16
 100bab8:	1880022e 	bgeu	r3,r2,100bac4 <__gesf2+0x60>
 100babc:	100d11c0 	call	100d11c <__fpcmp_parts_f>
 100bac0:	100d883a 	mov	r6,r2
 100bac4:	3005883a 	mov	r2,r6
 100bac8:	dfc00c17 	ldw	ra,48(sp)
 100bacc:	dc400b17 	ldw	r17,44(sp)
 100bad0:	dc000a17 	ldw	r16,40(sp)
 100bad4:	dec00d04 	addi	sp,sp,52
 100bad8:	f800283a 	ret

0100badc <__ltsf2>:
 100badc:	defff304 	addi	sp,sp,-52
 100bae0:	dc400b15 	stw	r17,44(sp)
 100bae4:	dc400204 	addi	r17,sp,8
 100bae8:	dc000a15 	stw	r16,40(sp)
 100baec:	d9000015 	stw	r4,0(sp)
 100baf0:	d9400115 	stw	r5,4(sp)
 100baf4:	d809883a 	mov	r4,sp
 100baf8:	880b883a 	mov	r5,r17
 100bafc:	dc000604 	addi	r16,sp,24
 100bb00:	dfc00c15 	stw	ra,48(sp)
 100bb04:	100d0540 	call	100d054 <__unpack_f>
 100bb08:	d9000104 	addi	r4,sp,4
 100bb0c:	800b883a 	mov	r5,r16
 100bb10:	100d0540 	call	100d054 <__unpack_f>
 100bb14:	d8800217 	ldw	r2,8(sp)
 100bb18:	00c00044 	movi	r3,1
 100bb1c:	180d883a 	mov	r6,r3
 100bb20:	1880062e 	bgeu	r3,r2,100bb3c <__ltsf2+0x60>
 100bb24:	d8800617 	ldw	r2,24(sp)
 100bb28:	8809883a 	mov	r4,r17
 100bb2c:	800b883a 	mov	r5,r16
 100bb30:	1880022e 	bgeu	r3,r2,100bb3c <__ltsf2+0x60>
 100bb34:	100d11c0 	call	100d11c <__fpcmp_parts_f>
 100bb38:	100d883a 	mov	r6,r2
 100bb3c:	3005883a 	mov	r2,r6
 100bb40:	dfc00c17 	ldw	ra,48(sp)
 100bb44:	dc400b17 	ldw	r17,44(sp)
 100bb48:	dc000a17 	ldw	r16,40(sp)
 100bb4c:	dec00d04 	addi	sp,sp,52
 100bb50:	f800283a 	ret

0100bb54 <__floatsisf>:
 100bb54:	2006d7fa 	srli	r3,r4,31
 100bb58:	defffa04 	addi	sp,sp,-24
 100bb5c:	008000c4 	movi	r2,3
 100bb60:	dfc00515 	stw	ra,20(sp)
 100bb64:	dc000415 	stw	r16,16(sp)
 100bb68:	d8800015 	stw	r2,0(sp)
 100bb6c:	d8c00115 	stw	r3,4(sp)
 100bb70:	2000081e 	bne	r4,zero,100bb94 <__floatsisf+0x40>
 100bb74:	00800084 	movi	r2,2
 100bb78:	d8800015 	stw	r2,0(sp)
 100bb7c:	d809883a 	mov	r4,sp
 100bb80:	100cef40 	call	100cef4 <__pack_f>
 100bb84:	dfc00517 	ldw	ra,20(sp)
 100bb88:	dc000417 	ldw	r16,16(sp)
 100bb8c:	dec00604 	addi	sp,sp,24
 100bb90:	f800283a 	ret
 100bb94:	00800784 	movi	r2,30
 100bb98:	1807003a 	cmpeq	r3,r3,zero
 100bb9c:	d8800215 	stw	r2,8(sp)
 100bba0:	18000e1e 	bne	r3,zero,100bbdc <__floatsisf+0x88>
 100bba4:	00a00034 	movhi	r2,32768
 100bba8:	20800e26 	beq	r4,r2,100bbe4 <__floatsisf+0x90>
 100bbac:	0121c83a 	sub	r16,zero,r4
 100bbb0:	8009883a 	mov	r4,r16
 100bbb4:	dc000315 	stw	r16,12(sp)
 100bbb8:	100ce740 	call	100ce74 <__clzsi2>
 100bbbc:	117fffc4 	addi	r5,r2,-1
 100bbc0:	017fee0e 	bge	zero,r5,100bb7c <__floatsisf+0x28>
 100bbc4:	d8800217 	ldw	r2,8(sp)
 100bbc8:	8146983a 	sll	r3,r16,r5
 100bbcc:	1145c83a 	sub	r2,r2,r5
 100bbd0:	d8c00315 	stw	r3,12(sp)
 100bbd4:	d8800215 	stw	r2,8(sp)
 100bbd8:	003fe806 	br	100bb7c <__floatsisf+0x28>
 100bbdc:	2021883a 	mov	r16,r4
 100bbe0:	003ff306 	br	100bbb0 <__floatsisf+0x5c>
 100bbe4:	00b3c034 	movhi	r2,52992
 100bbe8:	003fe606 	br	100bb84 <__floatsisf+0x30>

0100bbec <__fixsfsi>:
 100bbec:	defffa04 	addi	sp,sp,-24
 100bbf0:	d9000015 	stw	r4,0(sp)
 100bbf4:	d9400104 	addi	r5,sp,4
 100bbf8:	d809883a 	mov	r4,sp
 100bbfc:	dfc00515 	stw	ra,20(sp)
 100bc00:	100d0540 	call	100d054 <__unpack_f>
 100bc04:	d8c00117 	ldw	r3,4(sp)
 100bc08:	00800084 	movi	r2,2
 100bc0c:	1880041e 	bne	r3,r2,100bc20 <__fixsfsi+0x34>
 100bc10:	0005883a 	mov	r2,zero
 100bc14:	dfc00517 	ldw	ra,20(sp)
 100bc18:	dec00604 	addi	sp,sp,24
 100bc1c:	f800283a 	ret
 100bc20:	00800044 	movi	r2,1
 100bc24:	10fffa2e 	bgeu	r2,r3,100bc10 <__fixsfsi+0x24>
 100bc28:	00800104 	movi	r2,4
 100bc2c:	18800426 	beq	r3,r2,100bc40 <__fixsfsi+0x54>
 100bc30:	d8800317 	ldw	r2,12(sp)
 100bc34:	103ff616 	blt	r2,zero,100bc10 <__fixsfsi+0x24>
 100bc38:	00c00784 	movi	r3,30
 100bc3c:	1880070e 	bge	r3,r2,100bc5c <__fixsfsi+0x70>
 100bc40:	d8800217 	ldw	r2,8(sp)
 100bc44:	10000c1e 	bne	r2,zero,100bc78 <__fixsfsi+0x8c>
 100bc48:	00a00034 	movhi	r2,32768
 100bc4c:	10bfffc4 	addi	r2,r2,-1
 100bc50:	dfc00517 	ldw	ra,20(sp)
 100bc54:	dec00604 	addi	sp,sp,24
 100bc58:	f800283a 	ret
 100bc5c:	1885c83a 	sub	r2,r3,r2
 100bc60:	d9000217 	ldw	r4,8(sp)
 100bc64:	d8c00417 	ldw	r3,16(sp)
 100bc68:	1884d83a 	srl	r2,r3,r2
 100bc6c:	203fe926 	beq	r4,zero,100bc14 <__fixsfsi+0x28>
 100bc70:	0085c83a 	sub	r2,zero,r2
 100bc74:	003fe706 	br	100bc14 <__fixsfsi+0x28>
 100bc78:	00a00034 	movhi	r2,32768
 100bc7c:	003fe506 	br	100bc14 <__fixsfsi+0x28>

0100bc80 <__extendsfdf2>:
 100bc80:	defff904 	addi	sp,sp,-28
 100bc84:	d9000115 	stw	r4,4(sp)
 100bc88:	d9400204 	addi	r5,sp,8
 100bc8c:	d9000104 	addi	r4,sp,4
 100bc90:	dfc00615 	stw	ra,24(sp)
 100bc94:	100d0540 	call	100d054 <__unpack_f>
 100bc98:	d9c00517 	ldw	r7,20(sp)
 100bc9c:	0011883a 	mov	r8,zero
 100bca0:	400697ba 	slli	r3,r8,30
 100bca4:	3812d0ba 	srli	r9,r7,2
 100bca8:	380497ba 	slli	r2,r7,30
 100bcac:	d9000217 	ldw	r4,8(sp)
 100bcb0:	d9400317 	ldw	r5,12(sp)
 100bcb4:	d9800417 	ldw	r6,16(sp)
 100bcb8:	48c6b03a 	or	r3,r9,r3
 100bcbc:	100f883a 	mov	r7,r2
 100bcc0:	d8c00015 	stw	r3,0(sp)
 100bcc4:	100cbe40 	call	100cbe4 <__make_dp>
 100bcc8:	dfc00617 	ldw	ra,24(sp)
 100bccc:	dec00704 	addi	sp,sp,28
 100bcd0:	f800283a 	ret

0100bcd4 <_fpadd_parts>:
 100bcd4:	defff804 	addi	sp,sp,-32
 100bcd8:	dcc00315 	stw	r19,12(sp)
 100bcdc:	2027883a 	mov	r19,r4
 100bce0:	21000017 	ldw	r4,0(r4)
 100bce4:	00c00044 	movi	r3,1
 100bce8:	dd400515 	stw	r21,20(sp)
 100bcec:	dd000415 	stw	r20,16(sp)
 100bcf0:	ddc00715 	stw	r23,28(sp)
 100bcf4:	dd800615 	stw	r22,24(sp)
 100bcf8:	dc800215 	stw	r18,8(sp)
 100bcfc:	dc400115 	stw	r17,4(sp)
 100bd00:	dc000015 	stw	r16,0(sp)
 100bd04:	282b883a 	mov	r21,r5
 100bd08:	3029883a 	mov	r20,r6
 100bd0c:	1900632e 	bgeu	r3,r4,100be9c <_fpadd_parts+0x1c8>
 100bd10:	28800017 	ldw	r2,0(r5)
 100bd14:	1880812e 	bgeu	r3,r2,100bf1c <_fpadd_parts+0x248>
 100bd18:	00c00104 	movi	r3,4
 100bd1c:	20c0dc26 	beq	r4,r3,100c090 <_fpadd_parts+0x3bc>
 100bd20:	10c07e26 	beq	r2,r3,100bf1c <_fpadd_parts+0x248>
 100bd24:	00c00084 	movi	r3,2
 100bd28:	10c06726 	beq	r2,r3,100bec8 <_fpadd_parts+0x1f4>
 100bd2c:	20c07b26 	beq	r4,r3,100bf1c <_fpadd_parts+0x248>
 100bd30:	9dc00217 	ldw	r23,8(r19)
 100bd34:	28c00217 	ldw	r3,8(r5)
 100bd38:	9c400317 	ldw	r17,12(r19)
 100bd3c:	2bc00317 	ldw	r15,12(r5)
 100bd40:	b8cdc83a 	sub	r6,r23,r3
 100bd44:	9c800417 	ldw	r18,16(r19)
 100bd48:	2c000417 	ldw	r16,16(r5)
 100bd4c:	3009883a 	mov	r4,r6
 100bd50:	30009716 	blt	r6,zero,100bfb0 <_fpadd_parts+0x2dc>
 100bd54:	00800fc4 	movi	r2,63
 100bd58:	11806b16 	blt	r2,r6,100bf08 <_fpadd_parts+0x234>
 100bd5c:	0100a40e 	bge	zero,r4,100bff0 <_fpadd_parts+0x31c>
 100bd60:	35bff804 	addi	r22,r6,-32
 100bd64:	b000bc16 	blt	r22,zero,100c058 <_fpadd_parts+0x384>
 100bd68:	8596d83a 	srl	r11,r16,r22
 100bd6c:	0019883a 	mov	r12,zero
 100bd70:	0013883a 	mov	r9,zero
 100bd74:	01000044 	movi	r4,1
 100bd78:	0015883a 	mov	r10,zero
 100bd7c:	b000be16 	blt	r22,zero,100c078 <_fpadd_parts+0x3a4>
 100bd80:	2590983a 	sll	r8,r4,r22
 100bd84:	000f883a 	mov	r7,zero
 100bd88:	00bfffc4 	movi	r2,-1
 100bd8c:	3889883a 	add	r4,r7,r2
 100bd90:	408b883a 	add	r5,r8,r2
 100bd94:	21cd803a 	cmpltu	r6,r4,r7
 100bd98:	314b883a 	add	r5,r6,r5
 100bd9c:	7904703a 	and	r2,r15,r4
 100bda0:	8146703a 	and	r3,r16,r5
 100bda4:	10c4b03a 	or	r2,r2,r3
 100bda8:	10000226 	beq	r2,zero,100bdb4 <_fpadd_parts+0xe0>
 100bdac:	02400044 	movi	r9,1
 100bdb0:	0015883a 	mov	r10,zero
 100bdb4:	5a5eb03a 	or	r15,r11,r9
 100bdb8:	62a0b03a 	or	r16,r12,r10
 100bdbc:	99400117 	ldw	r5,4(r19)
 100bdc0:	a8800117 	ldw	r2,4(r21)
 100bdc4:	28806e26 	beq	r5,r2,100bf80 <_fpadd_parts+0x2ac>
 100bdc8:	28006626 	beq	r5,zero,100bf64 <_fpadd_parts+0x290>
 100bdcc:	7c45c83a 	sub	r2,r15,r17
 100bdd0:	7889803a 	cmpltu	r4,r15,r2
 100bdd4:	8487c83a 	sub	r3,r16,r18
 100bdd8:	1909c83a 	sub	r4,r3,r4
 100bddc:	100d883a 	mov	r6,r2
 100bde0:	200f883a 	mov	r7,r4
 100bde4:	38007716 	blt	r7,zero,100bfc4 <_fpadd_parts+0x2f0>
 100bde8:	a5c00215 	stw	r23,8(r20)
 100bdec:	a1c00415 	stw	r7,16(r20)
 100bdf0:	a0000115 	stw	zero,4(r20)
 100bdf4:	a1800315 	stw	r6,12(r20)
 100bdf8:	a2000317 	ldw	r8,12(r20)
 100bdfc:	a2400417 	ldw	r9,16(r20)
 100be00:	00bfffc4 	movi	r2,-1
 100be04:	408b883a 	add	r5,r8,r2
 100be08:	2a09803a 	cmpltu	r4,r5,r8
 100be0c:	488d883a 	add	r6,r9,r2
 100be10:	01c40034 	movhi	r7,4096
 100be14:	39ffffc4 	addi	r7,r7,-1
 100be18:	218d883a 	add	r6,r4,r6
 100be1c:	39801736 	bltu	r7,r6,100be7c <_fpadd_parts+0x1a8>
 100be20:	31c06526 	beq	r6,r7,100bfb8 <_fpadd_parts+0x2e4>
 100be24:	a3000217 	ldw	r12,8(r20)
 100be28:	4209883a 	add	r4,r8,r8
 100be2c:	00bfffc4 	movi	r2,-1
 100be30:	220f803a 	cmpltu	r7,r4,r8
 100be34:	4a4b883a 	add	r5,r9,r9
 100be38:	394f883a 	add	r7,r7,r5
 100be3c:	2095883a 	add	r10,r4,r2
 100be40:	3897883a 	add	r11,r7,r2
 100be44:	510d803a 	cmpltu	r6,r10,r4
 100be48:	6099883a 	add	r12,r12,r2
 100be4c:	32d7883a 	add	r11,r6,r11
 100be50:	00840034 	movhi	r2,4096
 100be54:	10bfffc4 	addi	r2,r2,-1
 100be58:	2011883a 	mov	r8,r4
 100be5c:	3813883a 	mov	r9,r7
 100be60:	a1000315 	stw	r4,12(r20)
 100be64:	a1c00415 	stw	r7,16(r20)
 100be68:	a3000215 	stw	r12,8(r20)
 100be6c:	12c00336 	bltu	r2,r11,100be7c <_fpadd_parts+0x1a8>
 100be70:	58bfed1e 	bne	r11,r2,100be28 <_fpadd_parts+0x154>
 100be74:	00bfff84 	movi	r2,-2
 100be78:	12bfeb2e 	bgeu	r2,r10,100be28 <_fpadd_parts+0x154>
 100be7c:	a2800417 	ldw	r10,16(r20)
 100be80:	008000c4 	movi	r2,3
 100be84:	00c80034 	movhi	r3,8192
 100be88:	18ffffc4 	addi	r3,r3,-1
 100be8c:	a2400317 	ldw	r9,12(r20)
 100be90:	a0800015 	stw	r2,0(r20)
 100be94:	1a802336 	bltu	r3,r10,100bf24 <_fpadd_parts+0x250>
 100be98:	a027883a 	mov	r19,r20
 100be9c:	9805883a 	mov	r2,r19
 100bea0:	ddc00717 	ldw	r23,28(sp)
 100bea4:	dd800617 	ldw	r22,24(sp)
 100bea8:	dd400517 	ldw	r21,20(sp)
 100beac:	dd000417 	ldw	r20,16(sp)
 100beb0:	dcc00317 	ldw	r19,12(sp)
 100beb4:	dc800217 	ldw	r18,8(sp)
 100beb8:	dc400117 	ldw	r17,4(sp)
 100bebc:	dc000017 	ldw	r16,0(sp)
 100bec0:	dec00804 	addi	sp,sp,32
 100bec4:	f800283a 	ret
 100bec8:	20fff41e 	bne	r4,r3,100be9c <_fpadd_parts+0x1c8>
 100becc:	31000015 	stw	r4,0(r6)
 100bed0:	98800117 	ldw	r2,4(r19)
 100bed4:	30800115 	stw	r2,4(r6)
 100bed8:	98c00217 	ldw	r3,8(r19)
 100bedc:	30c00215 	stw	r3,8(r6)
 100bee0:	98800317 	ldw	r2,12(r19)
 100bee4:	30800315 	stw	r2,12(r6)
 100bee8:	98c00417 	ldw	r3,16(r19)
 100beec:	30c00415 	stw	r3,16(r6)
 100bef0:	98800117 	ldw	r2,4(r19)
 100bef4:	28c00117 	ldw	r3,4(r5)
 100bef8:	3027883a 	mov	r19,r6
 100befc:	10c4703a 	and	r2,r2,r3
 100bf00:	30800115 	stw	r2,4(r6)
 100bf04:	003fe506 	br	100be9c <_fpadd_parts+0x1c8>
 100bf08:	1dc02616 	blt	r3,r23,100bfa4 <_fpadd_parts+0x2d0>
 100bf0c:	0023883a 	mov	r17,zero
 100bf10:	182f883a 	mov	r23,r3
 100bf14:	0025883a 	mov	r18,zero
 100bf18:	003fa806 	br	100bdbc <_fpadd_parts+0xe8>
 100bf1c:	a827883a 	mov	r19,r21
 100bf20:	003fde06 	br	100be9c <_fpadd_parts+0x1c8>
 100bf24:	01800044 	movi	r6,1
 100bf28:	500497fa 	slli	r2,r10,31
 100bf2c:	4808d07a 	srli	r4,r9,1
 100bf30:	518ad83a 	srl	r5,r10,r6
 100bf34:	a2000217 	ldw	r8,8(r20)
 100bf38:	1108b03a 	or	r4,r2,r4
 100bf3c:	0007883a 	mov	r3,zero
 100bf40:	4984703a 	and	r2,r9,r6
 100bf44:	208cb03a 	or	r6,r4,r2
 100bf48:	28ceb03a 	or	r7,r5,r3
 100bf4c:	42000044 	addi	r8,r8,1
 100bf50:	a027883a 	mov	r19,r20
 100bf54:	a1c00415 	stw	r7,16(r20)
 100bf58:	a2000215 	stw	r8,8(r20)
 100bf5c:	a1800315 	stw	r6,12(r20)
 100bf60:	003fce06 	br	100be9c <_fpadd_parts+0x1c8>
 100bf64:	8bc5c83a 	sub	r2,r17,r15
 100bf68:	8889803a 	cmpltu	r4,r17,r2
 100bf6c:	9407c83a 	sub	r3,r18,r16
 100bf70:	1909c83a 	sub	r4,r3,r4
 100bf74:	100d883a 	mov	r6,r2
 100bf78:	200f883a 	mov	r7,r4
 100bf7c:	003f9906 	br	100bde4 <_fpadd_parts+0x110>
 100bf80:	7c45883a 	add	r2,r15,r17
 100bf84:	13c9803a 	cmpltu	r4,r2,r15
 100bf88:	8487883a 	add	r3,r16,r18
 100bf8c:	20c9883a 	add	r4,r4,r3
 100bf90:	a1400115 	stw	r5,4(r20)
 100bf94:	a5c00215 	stw	r23,8(r20)
 100bf98:	a0800315 	stw	r2,12(r20)
 100bf9c:	a1000415 	stw	r4,16(r20)
 100bfa0:	003fb606 	br	100be7c <_fpadd_parts+0x1a8>
 100bfa4:	001f883a 	mov	r15,zero
 100bfa8:	0021883a 	mov	r16,zero
 100bfac:	003f8306 	br	100bdbc <_fpadd_parts+0xe8>
 100bfb0:	018dc83a 	sub	r6,zero,r6
 100bfb4:	003f6706 	br	100bd54 <_fpadd_parts+0x80>
 100bfb8:	00bfff84 	movi	r2,-2
 100bfbc:	117faf36 	bltu	r2,r5,100be7c <_fpadd_parts+0x1a8>
 100bfc0:	003f9806 	br	100be24 <_fpadd_parts+0x150>
 100bfc4:	0005883a 	mov	r2,zero
 100bfc8:	1189c83a 	sub	r4,r2,r6
 100bfcc:	1105803a 	cmpltu	r2,r2,r4
 100bfd0:	01cbc83a 	sub	r5,zero,r7
 100bfd4:	2885c83a 	sub	r2,r5,r2
 100bfd8:	01800044 	movi	r6,1
 100bfdc:	a1800115 	stw	r6,4(r20)
 100bfe0:	a5c00215 	stw	r23,8(r20)
 100bfe4:	a1000315 	stw	r4,12(r20)
 100bfe8:	a0800415 	stw	r2,16(r20)
 100bfec:	003f8206 	br	100bdf8 <_fpadd_parts+0x124>
 100bff0:	203f7226 	beq	r4,zero,100bdbc <_fpadd_parts+0xe8>
 100bff4:	35bff804 	addi	r22,r6,-32
 100bff8:	b9af883a 	add	r23,r23,r6
 100bffc:	b0003116 	blt	r22,zero,100c0c4 <_fpadd_parts+0x3f0>
 100c000:	959ad83a 	srl	r13,r18,r22
 100c004:	001d883a 	mov	r14,zero
 100c008:	000f883a 	mov	r7,zero
 100c00c:	01000044 	movi	r4,1
 100c010:	0011883a 	mov	r8,zero
 100c014:	b0002516 	blt	r22,zero,100c0ac <_fpadd_parts+0x3d8>
 100c018:	2594983a 	sll	r10,r4,r22
 100c01c:	0013883a 	mov	r9,zero
 100c020:	00bfffc4 	movi	r2,-1
 100c024:	4889883a 	add	r4,r9,r2
 100c028:	508b883a 	add	r5,r10,r2
 100c02c:	224d803a 	cmpltu	r6,r4,r9
 100c030:	314b883a 	add	r5,r6,r5
 100c034:	8904703a 	and	r2,r17,r4
 100c038:	9146703a 	and	r3,r18,r5
 100c03c:	10c4b03a 	or	r2,r2,r3
 100c040:	10000226 	beq	r2,zero,100c04c <_fpadd_parts+0x378>
 100c044:	01c00044 	movi	r7,1
 100c048:	0011883a 	mov	r8,zero
 100c04c:	69e2b03a 	or	r17,r13,r7
 100c050:	7224b03a 	or	r18,r14,r8
 100c054:	003f5906 	br	100bdbc <_fpadd_parts+0xe8>
 100c058:	8407883a 	add	r3,r16,r16
 100c05c:	008007c4 	movi	r2,31
 100c060:	1185c83a 	sub	r2,r2,r6
 100c064:	1886983a 	sll	r3,r3,r2
 100c068:	7996d83a 	srl	r11,r15,r6
 100c06c:	8198d83a 	srl	r12,r16,r6
 100c070:	1ad6b03a 	or	r11,r3,r11
 100c074:	003f3e06 	br	100bd70 <_fpadd_parts+0x9c>
 100c078:	2006d07a 	srli	r3,r4,1
 100c07c:	008007c4 	movi	r2,31
 100c080:	1185c83a 	sub	r2,r2,r6
 100c084:	1890d83a 	srl	r8,r3,r2
 100c088:	218e983a 	sll	r7,r4,r6
 100c08c:	003f3e06 	br	100bd88 <_fpadd_parts+0xb4>
 100c090:	113f821e 	bne	r2,r4,100be9c <_fpadd_parts+0x1c8>
 100c094:	28c00117 	ldw	r3,4(r5)
 100c098:	98800117 	ldw	r2,4(r19)
 100c09c:	10ff7f26 	beq	r2,r3,100be9c <_fpadd_parts+0x1c8>
 100c0a0:	04c040b4 	movhi	r19,258
 100c0a4:	9cddc804 	addi	r19,r19,30496
 100c0a8:	003f7c06 	br	100be9c <_fpadd_parts+0x1c8>
 100c0ac:	2006d07a 	srli	r3,r4,1
 100c0b0:	008007c4 	movi	r2,31
 100c0b4:	1185c83a 	sub	r2,r2,r6
 100c0b8:	1894d83a 	srl	r10,r3,r2
 100c0bc:	2192983a 	sll	r9,r4,r6
 100c0c0:	003fd706 	br	100c020 <_fpadd_parts+0x34c>
 100c0c4:	9487883a 	add	r3,r18,r18
 100c0c8:	008007c4 	movi	r2,31
 100c0cc:	1185c83a 	sub	r2,r2,r6
 100c0d0:	1886983a 	sll	r3,r3,r2
 100c0d4:	899ad83a 	srl	r13,r17,r6
 100c0d8:	919cd83a 	srl	r14,r18,r6
 100c0dc:	1b5ab03a 	or	r13,r3,r13
 100c0e0:	003fc906 	br	100c008 <_fpadd_parts+0x334>

0100c0e4 <__subdf3>:
 100c0e4:	deffea04 	addi	sp,sp,-88
 100c0e8:	dcc01415 	stw	r19,80(sp)
 100c0ec:	dcc00404 	addi	r19,sp,16
 100c0f0:	2011883a 	mov	r8,r4
 100c0f4:	2813883a 	mov	r9,r5
 100c0f8:	dc401315 	stw	r17,76(sp)
 100c0fc:	d809883a 	mov	r4,sp
 100c100:	980b883a 	mov	r5,r19
 100c104:	dc400904 	addi	r17,sp,36
 100c108:	dfc01515 	stw	ra,84(sp)
 100c10c:	da400115 	stw	r9,4(sp)
 100c110:	d9c00315 	stw	r7,12(sp)
 100c114:	da000015 	stw	r8,0(sp)
 100c118:	d9800215 	stw	r6,8(sp)
 100c11c:	100d5040 	call	100d504 <__unpack_d>
 100c120:	d9000204 	addi	r4,sp,8
 100c124:	880b883a 	mov	r5,r17
 100c128:	100d5040 	call	100d504 <__unpack_d>
 100c12c:	d8800a17 	ldw	r2,40(sp)
 100c130:	880b883a 	mov	r5,r17
 100c134:	9809883a 	mov	r4,r19
 100c138:	d9800e04 	addi	r6,sp,56
 100c13c:	1080005c 	xori	r2,r2,1
 100c140:	d8800a15 	stw	r2,40(sp)
 100c144:	100bcd40 	call	100bcd4 <_fpadd_parts>
 100c148:	1009883a 	mov	r4,r2
 100c14c:	100d1f00 	call	100d1f0 <__pack_d>
 100c150:	dfc01517 	ldw	ra,84(sp)
 100c154:	dcc01417 	ldw	r19,80(sp)
 100c158:	dc401317 	ldw	r17,76(sp)
 100c15c:	dec01604 	addi	sp,sp,88
 100c160:	f800283a 	ret

0100c164 <__adddf3>:
 100c164:	deffea04 	addi	sp,sp,-88
 100c168:	dcc01415 	stw	r19,80(sp)
 100c16c:	dcc00404 	addi	r19,sp,16
 100c170:	2011883a 	mov	r8,r4
 100c174:	2813883a 	mov	r9,r5
 100c178:	dc401315 	stw	r17,76(sp)
 100c17c:	d809883a 	mov	r4,sp
 100c180:	980b883a 	mov	r5,r19
 100c184:	dc400904 	addi	r17,sp,36
 100c188:	dfc01515 	stw	ra,84(sp)
 100c18c:	da400115 	stw	r9,4(sp)
 100c190:	d9c00315 	stw	r7,12(sp)
 100c194:	da000015 	stw	r8,0(sp)
 100c198:	d9800215 	stw	r6,8(sp)
 100c19c:	100d5040 	call	100d504 <__unpack_d>
 100c1a0:	d9000204 	addi	r4,sp,8
 100c1a4:	880b883a 	mov	r5,r17
 100c1a8:	100d5040 	call	100d504 <__unpack_d>
 100c1ac:	d9800e04 	addi	r6,sp,56
 100c1b0:	9809883a 	mov	r4,r19
 100c1b4:	880b883a 	mov	r5,r17
 100c1b8:	100bcd40 	call	100bcd4 <_fpadd_parts>
 100c1bc:	1009883a 	mov	r4,r2
 100c1c0:	100d1f00 	call	100d1f0 <__pack_d>
 100c1c4:	dfc01517 	ldw	ra,84(sp)
 100c1c8:	dcc01417 	ldw	r19,80(sp)
 100c1cc:	dc401317 	ldw	r17,76(sp)
 100c1d0:	dec01604 	addi	sp,sp,88
 100c1d4:	f800283a 	ret

0100c1d8 <__muldf3>:
 100c1d8:	deffe004 	addi	sp,sp,-128
 100c1dc:	dc401815 	stw	r17,96(sp)
 100c1e0:	dc400404 	addi	r17,sp,16
 100c1e4:	2011883a 	mov	r8,r4
 100c1e8:	2813883a 	mov	r9,r5
 100c1ec:	dc001715 	stw	r16,92(sp)
 100c1f0:	d809883a 	mov	r4,sp
 100c1f4:	880b883a 	mov	r5,r17
 100c1f8:	dc000904 	addi	r16,sp,36
 100c1fc:	dfc01f15 	stw	ra,124(sp)
 100c200:	da400115 	stw	r9,4(sp)
 100c204:	d9c00315 	stw	r7,12(sp)
 100c208:	da000015 	stw	r8,0(sp)
 100c20c:	d9800215 	stw	r6,8(sp)
 100c210:	ddc01e15 	stw	r23,120(sp)
 100c214:	dd801d15 	stw	r22,116(sp)
 100c218:	dd401c15 	stw	r21,112(sp)
 100c21c:	dd001b15 	stw	r20,108(sp)
 100c220:	dcc01a15 	stw	r19,104(sp)
 100c224:	dc801915 	stw	r18,100(sp)
 100c228:	100d5040 	call	100d504 <__unpack_d>
 100c22c:	d9000204 	addi	r4,sp,8
 100c230:	800b883a 	mov	r5,r16
 100c234:	100d5040 	call	100d504 <__unpack_d>
 100c238:	d9000417 	ldw	r4,16(sp)
 100c23c:	00800044 	movi	r2,1
 100c240:	1100102e 	bgeu	r2,r4,100c284 <__muldf3+0xac>
 100c244:	d8c00917 	ldw	r3,36(sp)
 100c248:	10c0062e 	bgeu	r2,r3,100c264 <__muldf3+0x8c>
 100c24c:	00800104 	movi	r2,4
 100c250:	20800a26 	beq	r4,r2,100c27c <__muldf3+0xa4>
 100c254:	1880cc26 	beq	r3,r2,100c588 <__muldf3+0x3b0>
 100c258:	00800084 	movi	r2,2
 100c25c:	20800926 	beq	r4,r2,100c284 <__muldf3+0xac>
 100c260:	1880191e 	bne	r3,r2,100c2c8 <__muldf3+0xf0>
 100c264:	d8c00a17 	ldw	r3,40(sp)
 100c268:	d8800517 	ldw	r2,20(sp)
 100c26c:	8009883a 	mov	r4,r16
 100c270:	10c4c03a 	cmpne	r2,r2,r3
 100c274:	d8800a15 	stw	r2,40(sp)
 100c278:	00000706 	br	100c298 <__muldf3+0xc0>
 100c27c:	00800084 	movi	r2,2
 100c280:	1880c326 	beq	r3,r2,100c590 <__muldf3+0x3b8>
 100c284:	d8800517 	ldw	r2,20(sp)
 100c288:	d8c00a17 	ldw	r3,40(sp)
 100c28c:	8809883a 	mov	r4,r17
 100c290:	10c4c03a 	cmpne	r2,r2,r3
 100c294:	d8800515 	stw	r2,20(sp)
 100c298:	100d1f00 	call	100d1f0 <__pack_d>
 100c29c:	dfc01f17 	ldw	ra,124(sp)
 100c2a0:	ddc01e17 	ldw	r23,120(sp)
 100c2a4:	dd801d17 	ldw	r22,116(sp)
 100c2a8:	dd401c17 	ldw	r21,112(sp)
 100c2ac:	dd001b17 	ldw	r20,108(sp)
 100c2b0:	dcc01a17 	ldw	r19,104(sp)
 100c2b4:	dc801917 	ldw	r18,100(sp)
 100c2b8:	dc401817 	ldw	r17,96(sp)
 100c2bc:	dc001717 	ldw	r16,92(sp)
 100c2c0:	dec02004 	addi	sp,sp,128
 100c2c4:	f800283a 	ret
 100c2c8:	dd800717 	ldw	r22,28(sp)
 100c2cc:	dc800c17 	ldw	r18,48(sp)
 100c2d0:	002b883a 	mov	r21,zero
 100c2d4:	0023883a 	mov	r17,zero
 100c2d8:	a80b883a 	mov	r5,r21
 100c2dc:	b00d883a 	mov	r6,r22
 100c2e0:	880f883a 	mov	r7,r17
 100c2e4:	ddc00817 	ldw	r23,32(sp)
 100c2e8:	dcc00d17 	ldw	r19,52(sp)
 100c2ec:	9009883a 	mov	r4,r18
 100c2f0:	100cddc0 	call	100cddc <__muldi3>
 100c2f4:	001b883a 	mov	r13,zero
 100c2f8:	680f883a 	mov	r7,r13
 100c2fc:	b009883a 	mov	r4,r22
 100c300:	000b883a 	mov	r5,zero
 100c304:	980d883a 	mov	r6,r19
 100c308:	b82d883a 	mov	r22,r23
 100c30c:	002f883a 	mov	r23,zero
 100c310:	db401615 	stw	r13,88(sp)
 100c314:	d8801315 	stw	r2,76(sp)
 100c318:	d8c01415 	stw	r3,80(sp)
 100c31c:	dcc01515 	stw	r19,84(sp)
 100c320:	100cddc0 	call	100cddc <__muldi3>
 100c324:	b00d883a 	mov	r6,r22
 100c328:	000b883a 	mov	r5,zero
 100c32c:	9009883a 	mov	r4,r18
 100c330:	b80f883a 	mov	r7,r23
 100c334:	1021883a 	mov	r16,r2
 100c338:	1823883a 	mov	r17,r3
 100c33c:	100cddc0 	call	100cddc <__muldi3>
 100c340:	8085883a 	add	r2,r16,r2
 100c344:	140d803a 	cmpltu	r6,r2,r16
 100c348:	88c7883a 	add	r3,r17,r3
 100c34c:	30cd883a 	add	r6,r6,r3
 100c350:	1029883a 	mov	r20,r2
 100c354:	302b883a 	mov	r21,r6
 100c358:	da801317 	ldw	r10,76(sp)
 100c35c:	dac01417 	ldw	r11,80(sp)
 100c360:	db001517 	ldw	r12,84(sp)
 100c364:	db401617 	ldw	r13,88(sp)
 100c368:	3440612e 	bgeu	r6,r17,100c4f0 <__muldf3+0x318>
 100c36c:	0009883a 	mov	r4,zero
 100c370:	5105883a 	add	r2,r10,r4
 100c374:	128d803a 	cmpltu	r6,r2,r10
 100c378:	5d07883a 	add	r3,r11,r20
 100c37c:	30cd883a 	add	r6,r6,r3
 100c380:	0021883a 	mov	r16,zero
 100c384:	04400044 	movi	r17,1
 100c388:	1025883a 	mov	r18,r2
 100c38c:	3027883a 	mov	r19,r6
 100c390:	32c06236 	bltu	r6,r11,100c51c <__muldf3+0x344>
 100c394:	59807a26 	beq	r11,r6,100c580 <__muldf3+0x3a8>
 100c398:	680b883a 	mov	r5,r13
 100c39c:	b80f883a 	mov	r7,r23
 100c3a0:	6009883a 	mov	r4,r12
 100c3a4:	b00d883a 	mov	r6,r22
 100c3a8:	100cddc0 	call	100cddc <__muldi3>
 100c3ac:	1009883a 	mov	r4,r2
 100c3b0:	000f883a 	mov	r7,zero
 100c3b4:	1545883a 	add	r2,r2,r21
 100c3b8:	1111803a 	cmpltu	r8,r2,r4
 100c3bc:	19c7883a 	add	r3,r3,r7
 100c3c0:	40c7883a 	add	r3,r8,r3
 100c3c4:	88cb883a 	add	r5,r17,r3
 100c3c8:	d8c00617 	ldw	r3,24(sp)
 100c3cc:	8089883a 	add	r4,r16,r2
 100c3d0:	d8800b17 	ldw	r2,44(sp)
 100c3d4:	18c00104 	addi	r3,r3,4
 100c3d8:	240d803a 	cmpltu	r6,r4,r16
 100c3dc:	10c7883a 	add	r3,r2,r3
 100c3e0:	2013883a 	mov	r9,r4
 100c3e4:	d8800a17 	ldw	r2,40(sp)
 100c3e8:	d9000517 	ldw	r4,20(sp)
 100c3ec:	314d883a 	add	r6,r6,r5
 100c3f0:	3015883a 	mov	r10,r6
 100c3f4:	2088c03a 	cmpne	r4,r4,r2
 100c3f8:	00880034 	movhi	r2,8192
 100c3fc:	10bfffc4 	addi	r2,r2,-1
 100c400:	d9000f15 	stw	r4,60(sp)
 100c404:	d8c01015 	stw	r3,64(sp)
 100c408:	1180162e 	bgeu	r2,r6,100c464 <__muldf3+0x28c>
 100c40c:	1811883a 	mov	r8,r3
 100c410:	101f883a 	mov	r15,r2
 100c414:	980497fa 	slli	r2,r19,31
 100c418:	9016d07a 	srli	r11,r18,1
 100c41c:	500697fa 	slli	r3,r10,31
 100c420:	480cd07a 	srli	r6,r9,1
 100c424:	500ed07a 	srli	r7,r10,1
 100c428:	12d6b03a 	or	r11,r2,r11
 100c42c:	00800044 	movi	r2,1
 100c430:	198cb03a 	or	r6,r3,r6
 100c434:	4888703a 	and	r4,r9,r2
 100c438:	9818d07a 	srli	r12,r19,1
 100c43c:	001b883a 	mov	r13,zero
 100c440:	03a00034 	movhi	r14,32768
 100c444:	3013883a 	mov	r9,r6
 100c448:	3815883a 	mov	r10,r7
 100c44c:	4091883a 	add	r8,r8,r2
 100c450:	20000226 	beq	r4,zero,100c45c <__muldf3+0x284>
 100c454:	5b64b03a 	or	r18,r11,r13
 100c458:	63a6b03a 	or	r19,r12,r14
 100c45c:	7abfed36 	bltu	r15,r10,100c414 <__muldf3+0x23c>
 100c460:	da001015 	stw	r8,64(sp)
 100c464:	00840034 	movhi	r2,4096
 100c468:	10bfffc4 	addi	r2,r2,-1
 100c46c:	12801436 	bltu	r2,r10,100c4c0 <__muldf3+0x2e8>
 100c470:	da001017 	ldw	r8,64(sp)
 100c474:	101f883a 	mov	r15,r2
 100c478:	4a45883a 	add	r2,r9,r9
 100c47c:	124d803a 	cmpltu	r6,r2,r9
 100c480:	5287883a 	add	r3,r10,r10
 100c484:	9497883a 	add	r11,r18,r18
 100c488:	5c8f803a 	cmpltu	r7,r11,r18
 100c48c:	9cd9883a 	add	r12,r19,r19
 100c490:	01000044 	movi	r4,1
 100c494:	30cd883a 	add	r6,r6,r3
 100c498:	3b0f883a 	add	r7,r7,r12
 100c49c:	423fffc4 	addi	r8,r8,-1
 100c4a0:	1013883a 	mov	r9,r2
 100c4a4:	3015883a 	mov	r10,r6
 100c4a8:	111ab03a 	or	r13,r2,r4
 100c4ac:	98003016 	blt	r19,zero,100c570 <__muldf3+0x398>
 100c4b0:	5825883a 	mov	r18,r11
 100c4b4:	3827883a 	mov	r19,r7
 100c4b8:	7abfef2e 	bgeu	r15,r10,100c478 <__muldf3+0x2a0>
 100c4bc:	da001015 	stw	r8,64(sp)
 100c4c0:	00803fc4 	movi	r2,255
 100c4c4:	488e703a 	and	r7,r9,r2
 100c4c8:	00802004 	movi	r2,128
 100c4cc:	0007883a 	mov	r3,zero
 100c4d0:	0011883a 	mov	r8,zero
 100c4d4:	38801826 	beq	r7,r2,100c538 <__muldf3+0x360>
 100c4d8:	008000c4 	movi	r2,3
 100c4dc:	d9000e04 	addi	r4,sp,56
 100c4e0:	da801215 	stw	r10,72(sp)
 100c4e4:	d8800e15 	stw	r2,56(sp)
 100c4e8:	da401115 	stw	r9,68(sp)
 100c4ec:	003f6a06 	br	100c298 <__muldf3+0xc0>
 100c4f0:	89802126 	beq	r17,r6,100c578 <__muldf3+0x3a0>
 100c4f4:	0009883a 	mov	r4,zero
 100c4f8:	5105883a 	add	r2,r10,r4
 100c4fc:	128d803a 	cmpltu	r6,r2,r10
 100c500:	5d07883a 	add	r3,r11,r20
 100c504:	30cd883a 	add	r6,r6,r3
 100c508:	0021883a 	mov	r16,zero
 100c50c:	0023883a 	mov	r17,zero
 100c510:	1025883a 	mov	r18,r2
 100c514:	3027883a 	mov	r19,r6
 100c518:	32ff9e2e 	bgeu	r6,r11,100c394 <__muldf3+0x1bc>
 100c51c:	00800044 	movi	r2,1
 100c520:	8089883a 	add	r4,r16,r2
 100c524:	240d803a 	cmpltu	r6,r4,r16
 100c528:	344d883a 	add	r6,r6,r17
 100c52c:	2021883a 	mov	r16,r4
 100c530:	3023883a 	mov	r17,r6
 100c534:	003f9806 	br	100c398 <__muldf3+0x1c0>
 100c538:	403fe71e 	bne	r8,zero,100c4d8 <__muldf3+0x300>
 100c53c:	01004004 	movi	r4,256
 100c540:	4904703a 	and	r2,r9,r4
 100c544:	10c4b03a 	or	r2,r2,r3
 100c548:	103fe31e 	bne	r2,zero,100c4d8 <__muldf3+0x300>
 100c54c:	94c4b03a 	or	r2,r18,r19
 100c550:	103fe126 	beq	r2,zero,100c4d8 <__muldf3+0x300>
 100c554:	49c5883a 	add	r2,r9,r7
 100c558:	1251803a 	cmpltu	r8,r2,r9
 100c55c:	4291883a 	add	r8,r8,r10
 100c560:	013fc004 	movi	r4,-256
 100c564:	1112703a 	and	r9,r2,r4
 100c568:	4015883a 	mov	r10,r8
 100c56c:	003fda06 	br	100c4d8 <__muldf3+0x300>
 100c570:	6813883a 	mov	r9,r13
 100c574:	003fce06 	br	100c4b0 <__muldf3+0x2d8>
 100c578:	143f7c36 	bltu	r2,r16,100c36c <__muldf3+0x194>
 100c57c:	003fdd06 	br	100c4f4 <__muldf3+0x31c>
 100c580:	12bf852e 	bgeu	r2,r10,100c398 <__muldf3+0x1c0>
 100c584:	003fe506 	br	100c51c <__muldf3+0x344>
 100c588:	00800084 	movi	r2,2
 100c58c:	20bf351e 	bne	r4,r2,100c264 <__muldf3+0x8c>
 100c590:	010040b4 	movhi	r4,258
 100c594:	211dc804 	addi	r4,r4,30496
 100c598:	003f3f06 	br	100c298 <__muldf3+0xc0>

0100c59c <__divdf3>:
 100c59c:	deffed04 	addi	sp,sp,-76
 100c5a0:	dcc01115 	stw	r19,68(sp)
 100c5a4:	dcc00404 	addi	r19,sp,16
 100c5a8:	2011883a 	mov	r8,r4
 100c5ac:	2813883a 	mov	r9,r5
 100c5b0:	dc000e15 	stw	r16,56(sp)
 100c5b4:	d809883a 	mov	r4,sp
 100c5b8:	980b883a 	mov	r5,r19
 100c5bc:	dc000904 	addi	r16,sp,36
 100c5c0:	dfc01215 	stw	ra,72(sp)
 100c5c4:	da400115 	stw	r9,4(sp)
 100c5c8:	d9c00315 	stw	r7,12(sp)
 100c5cc:	da000015 	stw	r8,0(sp)
 100c5d0:	d9800215 	stw	r6,8(sp)
 100c5d4:	dc801015 	stw	r18,64(sp)
 100c5d8:	dc400f15 	stw	r17,60(sp)
 100c5dc:	100d5040 	call	100d504 <__unpack_d>
 100c5e0:	d9000204 	addi	r4,sp,8
 100c5e4:	800b883a 	mov	r5,r16
 100c5e8:	100d5040 	call	100d504 <__unpack_d>
 100c5ec:	d9000417 	ldw	r4,16(sp)
 100c5f0:	00800044 	movi	r2,1
 100c5f4:	11000b2e 	bgeu	r2,r4,100c624 <__divdf3+0x88>
 100c5f8:	d9400917 	ldw	r5,36(sp)
 100c5fc:	1140762e 	bgeu	r2,r5,100c7d8 <__divdf3+0x23c>
 100c600:	d8800517 	ldw	r2,20(sp)
 100c604:	d8c00a17 	ldw	r3,40(sp)
 100c608:	01800104 	movi	r6,4
 100c60c:	10c4f03a 	xor	r2,r2,r3
 100c610:	d8800515 	stw	r2,20(sp)
 100c614:	21800226 	beq	r4,r6,100c620 <__divdf3+0x84>
 100c618:	00800084 	movi	r2,2
 100c61c:	2080141e 	bne	r4,r2,100c670 <__divdf3+0xd4>
 100c620:	29000926 	beq	r5,r4,100c648 <__divdf3+0xac>
 100c624:	9809883a 	mov	r4,r19
 100c628:	100d1f00 	call	100d1f0 <__pack_d>
 100c62c:	dfc01217 	ldw	ra,72(sp)
 100c630:	dcc01117 	ldw	r19,68(sp)
 100c634:	dc801017 	ldw	r18,64(sp)
 100c638:	dc400f17 	ldw	r17,60(sp)
 100c63c:	dc000e17 	ldw	r16,56(sp)
 100c640:	dec01304 	addi	sp,sp,76
 100c644:	f800283a 	ret
 100c648:	010040b4 	movhi	r4,258
 100c64c:	211dc804 	addi	r4,r4,30496
 100c650:	100d1f00 	call	100d1f0 <__pack_d>
 100c654:	dfc01217 	ldw	ra,72(sp)
 100c658:	dcc01117 	ldw	r19,68(sp)
 100c65c:	dc801017 	ldw	r18,64(sp)
 100c660:	dc400f17 	ldw	r17,60(sp)
 100c664:	dc000e17 	ldw	r16,56(sp)
 100c668:	dec01304 	addi	sp,sp,76
 100c66c:	f800283a 	ret
 100c670:	29805b26 	beq	r5,r6,100c7e0 <__divdf3+0x244>
 100c674:	28802d26 	beq	r5,r2,100c72c <__divdf3+0x190>
 100c678:	d8c00617 	ldw	r3,24(sp)
 100c67c:	d8800b17 	ldw	r2,44(sp)
 100c680:	d9c00817 	ldw	r7,32(sp)
 100c684:	dc400d17 	ldw	r17,52(sp)
 100c688:	188bc83a 	sub	r5,r3,r2
 100c68c:	d9800717 	ldw	r6,28(sp)
 100c690:	dc000c17 	ldw	r16,48(sp)
 100c694:	d9400615 	stw	r5,24(sp)
 100c698:	3c403836 	bltu	r7,r17,100c77c <__divdf3+0x1e0>
 100c69c:	89c03626 	beq	r17,r7,100c778 <__divdf3+0x1dc>
 100c6a0:	0015883a 	mov	r10,zero
 100c6a4:	001d883a 	mov	r14,zero
 100c6a8:	02c40034 	movhi	r11,4096
 100c6ac:	001f883a 	mov	r15,zero
 100c6b0:	003f883a 	mov	ra,zero
 100c6b4:	04800f44 	movi	r18,61
 100c6b8:	00000f06 	br	100c6f8 <__divdf3+0x15c>
 100c6bc:	601d883a 	mov	r14,r12
 100c6c0:	681f883a 	mov	r15,r13
 100c6c4:	400d883a 	mov	r6,r8
 100c6c8:	100f883a 	mov	r7,r2
 100c6cc:	3191883a 	add	r8,r6,r6
 100c6d0:	5808d07a 	srli	r4,r11,1
 100c6d4:	4185803a 	cmpltu	r2,r8,r6
 100c6d8:	39d3883a 	add	r9,r7,r7
 100c6dc:	28c6b03a 	or	r3,r5,r3
 100c6e0:	1245883a 	add	r2,r2,r9
 100c6e4:	1815883a 	mov	r10,r3
 100c6e8:	2017883a 	mov	r11,r4
 100c6ec:	400d883a 	mov	r6,r8
 100c6f0:	100f883a 	mov	r7,r2
 100c6f4:	fc801726 	beq	ra,r18,100c754 <__divdf3+0x1b8>
 100c6f8:	580a97fa 	slli	r5,r11,31
 100c6fc:	5006d07a 	srli	r3,r10,1
 100c700:	ffc00044 	addi	ra,ra,1
 100c704:	3c7ff136 	bltu	r7,r17,100c6cc <__divdf3+0x130>
 100c708:	3411c83a 	sub	r8,r6,r16
 100c70c:	3205803a 	cmpltu	r2,r6,r8
 100c710:	3c53c83a 	sub	r9,r7,r17
 100c714:	7298b03a 	or	r12,r14,r10
 100c718:	7adab03a 	or	r13,r15,r11
 100c71c:	4885c83a 	sub	r2,r9,r2
 100c720:	89ffe61e 	bne	r17,r7,100c6bc <__divdf3+0x120>
 100c724:	343fe936 	bltu	r6,r16,100c6cc <__divdf3+0x130>
 100c728:	003fe406 	br	100c6bc <__divdf3+0x120>
 100c72c:	9809883a 	mov	r4,r19
 100c730:	d9800415 	stw	r6,16(sp)
 100c734:	100d1f00 	call	100d1f0 <__pack_d>
 100c738:	dfc01217 	ldw	ra,72(sp)
 100c73c:	dcc01117 	ldw	r19,68(sp)
 100c740:	dc801017 	ldw	r18,64(sp)
 100c744:	dc400f17 	ldw	r17,60(sp)
 100c748:	dc000e17 	ldw	r16,56(sp)
 100c74c:	dec01304 	addi	sp,sp,76
 100c750:	f800283a 	ret
 100c754:	00803fc4 	movi	r2,255
 100c758:	7090703a 	and	r8,r14,r2
 100c75c:	00802004 	movi	r2,128
 100c760:	0007883a 	mov	r3,zero
 100c764:	0013883a 	mov	r9,zero
 100c768:	40800d26 	beq	r8,r2,100c7a0 <__divdf3+0x204>
 100c76c:	dbc00815 	stw	r15,32(sp)
 100c770:	db800715 	stw	r14,28(sp)
 100c774:	003fab06 	br	100c624 <__divdf3+0x88>
 100c778:	343fc92e 	bgeu	r6,r16,100c6a0 <__divdf3+0x104>
 100c77c:	3185883a 	add	r2,r6,r6
 100c780:	1189803a 	cmpltu	r4,r2,r6
 100c784:	39c7883a 	add	r3,r7,r7
 100c788:	20c9883a 	add	r4,r4,r3
 100c78c:	297fffc4 	addi	r5,r5,-1
 100c790:	100d883a 	mov	r6,r2
 100c794:	200f883a 	mov	r7,r4
 100c798:	d9400615 	stw	r5,24(sp)
 100c79c:	003fc006 	br	100c6a0 <__divdf3+0x104>
 100c7a0:	483ff21e 	bne	r9,zero,100c76c <__divdf3+0x1d0>
 100c7a4:	01004004 	movi	r4,256
 100c7a8:	7104703a 	and	r2,r14,r4
 100c7ac:	10c4b03a 	or	r2,r2,r3
 100c7b0:	103fee1e 	bne	r2,zero,100c76c <__divdf3+0x1d0>
 100c7b4:	31c4b03a 	or	r2,r6,r7
 100c7b8:	103fec26 	beq	r2,zero,100c76c <__divdf3+0x1d0>
 100c7bc:	7205883a 	add	r2,r14,r8
 100c7c0:	1391803a 	cmpltu	r8,r2,r14
 100c7c4:	43d1883a 	add	r8,r8,r15
 100c7c8:	013fc004 	movi	r4,-256
 100c7cc:	111c703a 	and	r14,r2,r4
 100c7d0:	401f883a 	mov	r15,r8
 100c7d4:	003fe506 	br	100c76c <__divdf3+0x1d0>
 100c7d8:	8009883a 	mov	r4,r16
 100c7dc:	003f9206 	br	100c628 <__divdf3+0x8c>
 100c7e0:	9809883a 	mov	r4,r19
 100c7e4:	d8000715 	stw	zero,28(sp)
 100c7e8:	d8000815 	stw	zero,32(sp)
 100c7ec:	d8000615 	stw	zero,24(sp)
 100c7f0:	003f8d06 	br	100c628 <__divdf3+0x8c>

0100c7f4 <__eqdf2>:
 100c7f4:	deffef04 	addi	sp,sp,-68
 100c7f8:	dc400f15 	stw	r17,60(sp)
 100c7fc:	dc400404 	addi	r17,sp,16
 100c800:	2005883a 	mov	r2,r4
 100c804:	2807883a 	mov	r3,r5
 100c808:	dc000e15 	stw	r16,56(sp)
 100c80c:	d809883a 	mov	r4,sp
 100c810:	880b883a 	mov	r5,r17
 100c814:	dc000904 	addi	r16,sp,36
 100c818:	d8c00115 	stw	r3,4(sp)
 100c81c:	d8800015 	stw	r2,0(sp)
 100c820:	d9800215 	stw	r6,8(sp)
 100c824:	dfc01015 	stw	ra,64(sp)
 100c828:	d9c00315 	stw	r7,12(sp)
 100c82c:	100d5040 	call	100d504 <__unpack_d>
 100c830:	d9000204 	addi	r4,sp,8
 100c834:	800b883a 	mov	r5,r16
 100c838:	100d5040 	call	100d504 <__unpack_d>
 100c83c:	d8800417 	ldw	r2,16(sp)
 100c840:	00c00044 	movi	r3,1
 100c844:	180d883a 	mov	r6,r3
 100c848:	1880062e 	bgeu	r3,r2,100c864 <__eqdf2+0x70>
 100c84c:	d8800917 	ldw	r2,36(sp)
 100c850:	8809883a 	mov	r4,r17
 100c854:	800b883a 	mov	r5,r16
 100c858:	1880022e 	bgeu	r3,r2,100c864 <__eqdf2+0x70>
 100c85c:	100d63c0 	call	100d63c <__fpcmp_parts_d>
 100c860:	100d883a 	mov	r6,r2
 100c864:	3005883a 	mov	r2,r6
 100c868:	dfc01017 	ldw	ra,64(sp)
 100c86c:	dc400f17 	ldw	r17,60(sp)
 100c870:	dc000e17 	ldw	r16,56(sp)
 100c874:	dec01104 	addi	sp,sp,68
 100c878:	f800283a 	ret

0100c87c <__gtdf2>:
 100c87c:	deffef04 	addi	sp,sp,-68
 100c880:	dc400f15 	stw	r17,60(sp)
 100c884:	dc400404 	addi	r17,sp,16
 100c888:	2005883a 	mov	r2,r4
 100c88c:	2807883a 	mov	r3,r5
 100c890:	dc000e15 	stw	r16,56(sp)
 100c894:	d809883a 	mov	r4,sp
 100c898:	880b883a 	mov	r5,r17
 100c89c:	dc000904 	addi	r16,sp,36
 100c8a0:	d8c00115 	stw	r3,4(sp)
 100c8a4:	d8800015 	stw	r2,0(sp)
 100c8a8:	d9800215 	stw	r6,8(sp)
 100c8ac:	dfc01015 	stw	ra,64(sp)
 100c8b0:	d9c00315 	stw	r7,12(sp)
 100c8b4:	100d5040 	call	100d504 <__unpack_d>
 100c8b8:	d9000204 	addi	r4,sp,8
 100c8bc:	800b883a 	mov	r5,r16
 100c8c0:	100d5040 	call	100d504 <__unpack_d>
 100c8c4:	d8800417 	ldw	r2,16(sp)
 100c8c8:	00c00044 	movi	r3,1
 100c8cc:	01bfffc4 	movi	r6,-1
 100c8d0:	1880062e 	bgeu	r3,r2,100c8ec <__gtdf2+0x70>
 100c8d4:	d8800917 	ldw	r2,36(sp)
 100c8d8:	8809883a 	mov	r4,r17
 100c8dc:	800b883a 	mov	r5,r16
 100c8e0:	1880022e 	bgeu	r3,r2,100c8ec <__gtdf2+0x70>
 100c8e4:	100d63c0 	call	100d63c <__fpcmp_parts_d>
 100c8e8:	100d883a 	mov	r6,r2
 100c8ec:	3005883a 	mov	r2,r6
 100c8f0:	dfc01017 	ldw	ra,64(sp)
 100c8f4:	dc400f17 	ldw	r17,60(sp)
 100c8f8:	dc000e17 	ldw	r16,56(sp)
 100c8fc:	dec01104 	addi	sp,sp,68
 100c900:	f800283a 	ret

0100c904 <__gedf2>:
 100c904:	deffef04 	addi	sp,sp,-68
 100c908:	dc400f15 	stw	r17,60(sp)
 100c90c:	dc400404 	addi	r17,sp,16
 100c910:	2005883a 	mov	r2,r4
 100c914:	2807883a 	mov	r3,r5
 100c918:	dc000e15 	stw	r16,56(sp)
 100c91c:	d809883a 	mov	r4,sp
 100c920:	880b883a 	mov	r5,r17
 100c924:	dc000904 	addi	r16,sp,36
 100c928:	d8c00115 	stw	r3,4(sp)
 100c92c:	d8800015 	stw	r2,0(sp)
 100c930:	d9800215 	stw	r6,8(sp)
 100c934:	dfc01015 	stw	ra,64(sp)
 100c938:	d9c00315 	stw	r7,12(sp)
 100c93c:	100d5040 	call	100d504 <__unpack_d>
 100c940:	d9000204 	addi	r4,sp,8
 100c944:	800b883a 	mov	r5,r16
 100c948:	100d5040 	call	100d504 <__unpack_d>
 100c94c:	d8800417 	ldw	r2,16(sp)
 100c950:	00c00044 	movi	r3,1
 100c954:	01bfffc4 	movi	r6,-1
 100c958:	1880062e 	bgeu	r3,r2,100c974 <__gedf2+0x70>
 100c95c:	d8800917 	ldw	r2,36(sp)
 100c960:	8809883a 	mov	r4,r17
 100c964:	800b883a 	mov	r5,r16
 100c968:	1880022e 	bgeu	r3,r2,100c974 <__gedf2+0x70>
 100c96c:	100d63c0 	call	100d63c <__fpcmp_parts_d>
 100c970:	100d883a 	mov	r6,r2
 100c974:	3005883a 	mov	r2,r6
 100c978:	dfc01017 	ldw	ra,64(sp)
 100c97c:	dc400f17 	ldw	r17,60(sp)
 100c980:	dc000e17 	ldw	r16,56(sp)
 100c984:	dec01104 	addi	sp,sp,68
 100c988:	f800283a 	ret

0100c98c <__ltdf2>:
 100c98c:	deffef04 	addi	sp,sp,-68
 100c990:	dc400f15 	stw	r17,60(sp)
 100c994:	dc400404 	addi	r17,sp,16
 100c998:	2005883a 	mov	r2,r4
 100c99c:	2807883a 	mov	r3,r5
 100c9a0:	dc000e15 	stw	r16,56(sp)
 100c9a4:	d809883a 	mov	r4,sp
 100c9a8:	880b883a 	mov	r5,r17
 100c9ac:	dc000904 	addi	r16,sp,36
 100c9b0:	d8c00115 	stw	r3,4(sp)
 100c9b4:	d8800015 	stw	r2,0(sp)
 100c9b8:	d9800215 	stw	r6,8(sp)
 100c9bc:	dfc01015 	stw	ra,64(sp)
 100c9c0:	d9c00315 	stw	r7,12(sp)
 100c9c4:	100d5040 	call	100d504 <__unpack_d>
 100c9c8:	d9000204 	addi	r4,sp,8
 100c9cc:	800b883a 	mov	r5,r16
 100c9d0:	100d5040 	call	100d504 <__unpack_d>
 100c9d4:	d8800417 	ldw	r2,16(sp)
 100c9d8:	00c00044 	movi	r3,1
 100c9dc:	180d883a 	mov	r6,r3
 100c9e0:	1880062e 	bgeu	r3,r2,100c9fc <__ltdf2+0x70>
 100c9e4:	d8800917 	ldw	r2,36(sp)
 100c9e8:	8809883a 	mov	r4,r17
 100c9ec:	800b883a 	mov	r5,r16
 100c9f0:	1880022e 	bgeu	r3,r2,100c9fc <__ltdf2+0x70>
 100c9f4:	100d63c0 	call	100d63c <__fpcmp_parts_d>
 100c9f8:	100d883a 	mov	r6,r2
 100c9fc:	3005883a 	mov	r2,r6
 100ca00:	dfc01017 	ldw	ra,64(sp)
 100ca04:	dc400f17 	ldw	r17,60(sp)
 100ca08:	dc000e17 	ldw	r16,56(sp)
 100ca0c:	dec01104 	addi	sp,sp,68
 100ca10:	f800283a 	ret

0100ca14 <__floatsidf>:
 100ca14:	2006d7fa 	srli	r3,r4,31
 100ca18:	defff604 	addi	sp,sp,-40
 100ca1c:	008000c4 	movi	r2,3
 100ca20:	dfc00915 	stw	ra,36(sp)
 100ca24:	dcc00815 	stw	r19,32(sp)
 100ca28:	dc800715 	stw	r18,28(sp)
 100ca2c:	dc400615 	stw	r17,24(sp)
 100ca30:	dc000515 	stw	r16,20(sp)
 100ca34:	d8800015 	stw	r2,0(sp)
 100ca38:	d8c00115 	stw	r3,4(sp)
 100ca3c:	20000f1e 	bne	r4,zero,100ca7c <__floatsidf+0x68>
 100ca40:	00800084 	movi	r2,2
 100ca44:	d8800015 	stw	r2,0(sp)
 100ca48:	d809883a 	mov	r4,sp
 100ca4c:	100d1f00 	call	100d1f0 <__pack_d>
 100ca50:	1009883a 	mov	r4,r2
 100ca54:	180b883a 	mov	r5,r3
 100ca58:	2005883a 	mov	r2,r4
 100ca5c:	2807883a 	mov	r3,r5
 100ca60:	dfc00917 	ldw	ra,36(sp)
 100ca64:	dcc00817 	ldw	r19,32(sp)
 100ca68:	dc800717 	ldw	r18,28(sp)
 100ca6c:	dc400617 	ldw	r17,24(sp)
 100ca70:	dc000517 	ldw	r16,20(sp)
 100ca74:	dec00a04 	addi	sp,sp,40
 100ca78:	f800283a 	ret
 100ca7c:	00800f04 	movi	r2,60
 100ca80:	1807003a 	cmpeq	r3,r3,zero
 100ca84:	d8800215 	stw	r2,8(sp)
 100ca88:	18001126 	beq	r3,zero,100cad0 <__floatsidf+0xbc>
 100ca8c:	0027883a 	mov	r19,zero
 100ca90:	2025883a 	mov	r18,r4
 100ca94:	d9000315 	stw	r4,12(sp)
 100ca98:	dcc00415 	stw	r19,16(sp)
 100ca9c:	100ce740 	call	100ce74 <__clzsi2>
 100caa0:	11000744 	addi	r4,r2,29
 100caa4:	013fe80e 	bge	zero,r4,100ca48 <__floatsidf+0x34>
 100caa8:	10bfff44 	addi	r2,r2,-3
 100caac:	10000c16 	blt	r2,zero,100cae0 <__floatsidf+0xcc>
 100cab0:	90a2983a 	sll	r17,r18,r2
 100cab4:	0021883a 	mov	r16,zero
 100cab8:	d8800217 	ldw	r2,8(sp)
 100cabc:	dc400415 	stw	r17,16(sp)
 100cac0:	dc000315 	stw	r16,12(sp)
 100cac4:	1105c83a 	sub	r2,r2,r4
 100cac8:	d8800215 	stw	r2,8(sp)
 100cacc:	003fde06 	br	100ca48 <__floatsidf+0x34>
 100cad0:	00a00034 	movhi	r2,32768
 100cad4:	20800a26 	beq	r4,r2,100cb00 <__floatsidf+0xec>
 100cad8:	0109c83a 	sub	r4,zero,r4
 100cadc:	003feb06 	br	100ca8c <__floatsidf+0x78>
 100cae0:	9006d07a 	srli	r3,r18,1
 100cae4:	008007c4 	movi	r2,31
 100cae8:	1105c83a 	sub	r2,r2,r4
 100caec:	1886d83a 	srl	r3,r3,r2
 100caf0:	9922983a 	sll	r17,r19,r4
 100caf4:	9120983a 	sll	r16,r18,r4
 100caf8:	1c62b03a 	or	r17,r3,r17
 100cafc:	003fee06 	br	100cab8 <__floatsidf+0xa4>
 100cb00:	0009883a 	mov	r4,zero
 100cb04:	01707834 	movhi	r5,49632
 100cb08:	003fd306 	br	100ca58 <__floatsidf+0x44>

0100cb0c <__fixdfsi>:
 100cb0c:	defff804 	addi	sp,sp,-32
 100cb10:	2005883a 	mov	r2,r4
 100cb14:	2807883a 	mov	r3,r5
 100cb18:	d809883a 	mov	r4,sp
 100cb1c:	d9400204 	addi	r5,sp,8
 100cb20:	d8c00115 	stw	r3,4(sp)
 100cb24:	d8800015 	stw	r2,0(sp)
 100cb28:	dfc00715 	stw	ra,28(sp)
 100cb2c:	100d5040 	call	100d504 <__unpack_d>
 100cb30:	d8c00217 	ldw	r3,8(sp)
 100cb34:	00800084 	movi	r2,2
 100cb38:	1880051e 	bne	r3,r2,100cb50 <__fixdfsi+0x44>
 100cb3c:	0007883a 	mov	r3,zero
 100cb40:	1805883a 	mov	r2,r3
 100cb44:	dfc00717 	ldw	ra,28(sp)
 100cb48:	dec00804 	addi	sp,sp,32
 100cb4c:	f800283a 	ret
 100cb50:	00800044 	movi	r2,1
 100cb54:	10fff92e 	bgeu	r2,r3,100cb3c <__fixdfsi+0x30>
 100cb58:	00800104 	movi	r2,4
 100cb5c:	18800426 	beq	r3,r2,100cb70 <__fixdfsi+0x64>
 100cb60:	d8c00417 	ldw	r3,16(sp)
 100cb64:	183ff516 	blt	r3,zero,100cb3c <__fixdfsi+0x30>
 100cb68:	00800784 	movi	r2,30
 100cb6c:	10c0080e 	bge	r2,r3,100cb90 <__fixdfsi+0x84>
 100cb70:	d8800317 	ldw	r2,12(sp)
 100cb74:	1000121e 	bne	r2,zero,100cbc0 <__fixdfsi+0xb4>
 100cb78:	00e00034 	movhi	r3,32768
 100cb7c:	18ffffc4 	addi	r3,r3,-1
 100cb80:	1805883a 	mov	r2,r3
 100cb84:	dfc00717 	ldw	ra,28(sp)
 100cb88:	dec00804 	addi	sp,sp,32
 100cb8c:	f800283a 	ret
 100cb90:	00800f04 	movi	r2,60
 100cb94:	10d1c83a 	sub	r8,r2,r3
 100cb98:	40bff804 	addi	r2,r8,-32
 100cb9c:	d9800517 	ldw	r6,20(sp)
 100cba0:	d9c00617 	ldw	r7,24(sp)
 100cba4:	10000816 	blt	r2,zero,100cbc8 <__fixdfsi+0xbc>
 100cba8:	3888d83a 	srl	r4,r7,r2
 100cbac:	d8800317 	ldw	r2,12(sp)
 100cbb0:	2007883a 	mov	r3,r4
 100cbb4:	103fe226 	beq	r2,zero,100cb40 <__fixdfsi+0x34>
 100cbb8:	0107c83a 	sub	r3,zero,r4
 100cbbc:	003fe006 	br	100cb40 <__fixdfsi+0x34>
 100cbc0:	00e00034 	movhi	r3,32768
 100cbc4:	003fde06 	br	100cb40 <__fixdfsi+0x34>
 100cbc8:	39c7883a 	add	r3,r7,r7
 100cbcc:	008007c4 	movi	r2,31
 100cbd0:	1205c83a 	sub	r2,r2,r8
 100cbd4:	1886983a 	sll	r3,r3,r2
 100cbd8:	3208d83a 	srl	r4,r6,r8
 100cbdc:	1908b03a 	or	r4,r3,r4
 100cbe0:	003ff206 	br	100cbac <__fixdfsi+0xa0>

0100cbe4 <__make_dp>:
 100cbe4:	defff904 	addi	sp,sp,-28
 100cbe8:	d8c00717 	ldw	r3,28(sp)
 100cbec:	d9000015 	stw	r4,0(sp)
 100cbf0:	d809883a 	mov	r4,sp
 100cbf4:	dfc00515 	stw	ra,20(sp)
 100cbf8:	d9c00615 	stw	r7,24(sp)
 100cbfc:	d9400115 	stw	r5,4(sp)
 100cc00:	d9800215 	stw	r6,8(sp)
 100cc04:	d8c00415 	stw	r3,16(sp)
 100cc08:	d9c00315 	stw	r7,12(sp)
 100cc0c:	100d1f00 	call	100d1f0 <__pack_d>
 100cc10:	dfc00517 	ldw	ra,20(sp)
 100cc14:	dec00704 	addi	sp,sp,28
 100cc18:	f800283a 	ret

0100cc1c <__truncdfsf2>:
 100cc1c:	defff804 	addi	sp,sp,-32
 100cc20:	2005883a 	mov	r2,r4
 100cc24:	2807883a 	mov	r3,r5
 100cc28:	d809883a 	mov	r4,sp
 100cc2c:	d9400204 	addi	r5,sp,8
 100cc30:	d8c00115 	stw	r3,4(sp)
 100cc34:	d8800015 	stw	r2,0(sp)
 100cc38:	dfc00715 	stw	ra,28(sp)
 100cc3c:	100d5040 	call	100d504 <__unpack_d>
 100cc40:	d9c00517 	ldw	r7,20(sp)
 100cc44:	da000617 	ldw	r8,24(sp)
 100cc48:	02d00034 	movhi	r11,16384
 100cc4c:	5affffc4 	addi	r11,r11,-1
 100cc50:	3812d7ba 	srli	r9,r7,30
 100cc54:	401a90ba 	slli	r13,r8,2
 100cc58:	3ac4703a 	and	r2,r7,r11
 100cc5c:	0007883a 	mov	r3,zero
 100cc60:	6a52b03a 	or	r9,r13,r9
 100cc64:	10c4b03a 	or	r2,r2,r3
 100cc68:	d9000217 	ldw	r4,8(sp)
 100cc6c:	d9400317 	ldw	r5,12(sp)
 100cc70:	d9800417 	ldw	r6,16(sp)
 100cc74:	480f883a 	mov	r7,r9
 100cc78:	10000126 	beq	r2,zero,100cc80 <__truncdfsf2+0x64>
 100cc7c:	49c00054 	ori	r7,r9,1
 100cc80:	100d1c40 	call	100d1c4 <__make_fp>
 100cc84:	dfc00717 	ldw	ra,28(sp)
 100cc88:	dec00804 	addi	sp,sp,32
 100cc8c:	f800283a 	ret

0100cc90 <udivmodsi4>:
 100cc90:	29001b2e 	bgeu	r5,r4,100cd00 <udivmodsi4+0x70>
 100cc94:	28001a16 	blt	r5,zero,100cd00 <udivmodsi4+0x70>
 100cc98:	00800044 	movi	r2,1
 100cc9c:	0007883a 	mov	r3,zero
 100cca0:	01c007c4 	movi	r7,31
 100cca4:	00000306 	br	100ccb4 <udivmodsi4+0x24>
 100cca8:	19c01326 	beq	r3,r7,100ccf8 <udivmodsi4+0x68>
 100ccac:	18c00044 	addi	r3,r3,1
 100ccb0:	28000416 	blt	r5,zero,100ccc4 <udivmodsi4+0x34>
 100ccb4:	294b883a 	add	r5,r5,r5
 100ccb8:	1085883a 	add	r2,r2,r2
 100ccbc:	293ffa36 	bltu	r5,r4,100cca8 <udivmodsi4+0x18>
 100ccc0:	10000d26 	beq	r2,zero,100ccf8 <udivmodsi4+0x68>
 100ccc4:	0007883a 	mov	r3,zero
 100ccc8:	21400236 	bltu	r4,r5,100ccd4 <udivmodsi4+0x44>
 100cccc:	2149c83a 	sub	r4,r4,r5
 100ccd0:	1886b03a 	or	r3,r3,r2
 100ccd4:	1004d07a 	srli	r2,r2,1
 100ccd8:	280ad07a 	srli	r5,r5,1
 100ccdc:	103ffa1e 	bne	r2,zero,100ccc8 <udivmodsi4+0x38>
 100cce0:	30000226 	beq	r6,zero,100ccec <udivmodsi4+0x5c>
 100cce4:	2005883a 	mov	r2,r4
 100cce8:	f800283a 	ret
 100ccec:	1809883a 	mov	r4,r3
 100ccf0:	2005883a 	mov	r2,r4
 100ccf4:	f800283a 	ret
 100ccf8:	0007883a 	mov	r3,zero
 100ccfc:	003ff806 	br	100cce0 <udivmodsi4+0x50>
 100cd00:	00800044 	movi	r2,1
 100cd04:	0007883a 	mov	r3,zero
 100cd08:	003fef06 	br	100ccc8 <udivmodsi4+0x38>

0100cd0c <__divsi3>:
 100cd0c:	defffe04 	addi	sp,sp,-8
 100cd10:	dc000015 	stw	r16,0(sp)
 100cd14:	dfc00115 	stw	ra,4(sp)
 100cd18:	0021883a 	mov	r16,zero
 100cd1c:	20000c16 	blt	r4,zero,100cd50 <__divsi3+0x44>
 100cd20:	000d883a 	mov	r6,zero
 100cd24:	28000e16 	blt	r5,zero,100cd60 <__divsi3+0x54>
 100cd28:	100cc900 	call	100cc90 <udivmodsi4>
 100cd2c:	1007883a 	mov	r3,r2
 100cd30:	8005003a 	cmpeq	r2,r16,zero
 100cd34:	1000011e 	bne	r2,zero,100cd3c <__divsi3+0x30>
 100cd38:	00c7c83a 	sub	r3,zero,r3
 100cd3c:	1805883a 	mov	r2,r3
 100cd40:	dfc00117 	ldw	ra,4(sp)
 100cd44:	dc000017 	ldw	r16,0(sp)
 100cd48:	dec00204 	addi	sp,sp,8
 100cd4c:	f800283a 	ret
 100cd50:	0109c83a 	sub	r4,zero,r4
 100cd54:	04000044 	movi	r16,1
 100cd58:	000d883a 	mov	r6,zero
 100cd5c:	283ff20e 	bge	r5,zero,100cd28 <__divsi3+0x1c>
 100cd60:	014bc83a 	sub	r5,zero,r5
 100cd64:	8021003a 	cmpeq	r16,r16,zero
 100cd68:	003fef06 	br	100cd28 <__divsi3+0x1c>

0100cd6c <__modsi3>:
 100cd6c:	deffff04 	addi	sp,sp,-4
 100cd70:	dfc00015 	stw	ra,0(sp)
 100cd74:	01800044 	movi	r6,1
 100cd78:	2807883a 	mov	r3,r5
 100cd7c:	20000416 	blt	r4,zero,100cd90 <__modsi3+0x24>
 100cd80:	28000c16 	blt	r5,zero,100cdb4 <__modsi3+0x48>
 100cd84:	dfc00017 	ldw	ra,0(sp)
 100cd88:	dec00104 	addi	sp,sp,4
 100cd8c:	100cc901 	jmpi	100cc90 <udivmodsi4>
 100cd90:	0109c83a 	sub	r4,zero,r4
 100cd94:	28000b16 	blt	r5,zero,100cdc4 <__modsi3+0x58>
 100cd98:	180b883a 	mov	r5,r3
 100cd9c:	01800044 	movi	r6,1
 100cda0:	100cc900 	call	100cc90 <udivmodsi4>
 100cda4:	0085c83a 	sub	r2,zero,r2
 100cda8:	dfc00017 	ldw	ra,0(sp)
 100cdac:	dec00104 	addi	sp,sp,4
 100cdb0:	f800283a 	ret
 100cdb4:	014bc83a 	sub	r5,zero,r5
 100cdb8:	dfc00017 	ldw	ra,0(sp)
 100cdbc:	dec00104 	addi	sp,sp,4
 100cdc0:	100cc901 	jmpi	100cc90 <udivmodsi4>
 100cdc4:	0147c83a 	sub	r3,zero,r5
 100cdc8:	003ff306 	br	100cd98 <__modsi3+0x2c>

0100cdcc <__udivsi3>:
 100cdcc:	000d883a 	mov	r6,zero
 100cdd0:	100cc901 	jmpi	100cc90 <udivmodsi4>

0100cdd4 <__umodsi3>:
 100cdd4:	01800044 	movi	r6,1
 100cdd8:	100cc901 	jmpi	100cc90 <udivmodsi4>

0100cddc <__muldi3>:
 100cddc:	2011883a 	mov	r8,r4
 100cde0:	427fffcc 	andi	r9,r8,65535
 100cde4:	4018d43a 	srli	r12,r8,16
 100cde8:	32bfffcc 	andi	r10,r6,65535
 100cdec:	3016d43a 	srli	r11,r6,16
 100cdf0:	4a85383a 	mul	r2,r9,r10
 100cdf4:	6295383a 	mul	r10,r12,r10
 100cdf8:	4ad3383a 	mul	r9,r9,r11
 100cdfc:	113fffcc 	andi	r4,r2,65535
 100ce00:	1004d43a 	srli	r2,r2,16
 100ce04:	4a93883a 	add	r9,r9,r10
 100ce08:	3807883a 	mov	r3,r7
 100ce0c:	1245883a 	add	r2,r2,r9
 100ce10:	280f883a 	mov	r7,r5
 100ce14:	180b883a 	mov	r5,r3
 100ce18:	1006943a 	slli	r3,r2,16
 100ce1c:	defffd04 	addi	sp,sp,-12
 100ce20:	dc800215 	stw	r18,8(sp)
 100ce24:	1907883a 	add	r3,r3,r4
 100ce28:	dc400115 	stw	r17,4(sp)
 100ce2c:	dc000015 	stw	r16,0(sp)
 100ce30:	4165383a 	mul	r18,r8,r5
 100ce34:	31e3383a 	mul	r17,r6,r7
 100ce38:	1012d43a 	srli	r9,r2,16
 100ce3c:	62d9383a 	mul	r12,r12,r11
 100ce40:	181f883a 	mov	r15,r3
 100ce44:	1280022e 	bgeu	r2,r10,100ce50 <__muldi3+0x74>
 100ce48:	00800074 	movhi	r2,1
 100ce4c:	6099883a 	add	r12,r12,r2
 100ce50:	624d883a 	add	r6,r12,r9
 100ce54:	9187883a 	add	r3,r18,r6
 100ce58:	88c7883a 	add	r3,r17,r3
 100ce5c:	7805883a 	mov	r2,r15
 100ce60:	dc800217 	ldw	r18,8(sp)
 100ce64:	dc400117 	ldw	r17,4(sp)
 100ce68:	dc000017 	ldw	r16,0(sp)
 100ce6c:	dec00304 	addi	sp,sp,12
 100ce70:	f800283a 	ret

0100ce74 <__clzsi2>:
 100ce74:	00bfffd4 	movui	r2,65535
 100ce78:	11000e36 	bltu	r2,r4,100ceb4 <__clzsi2+0x40>
 100ce7c:	00803fc4 	movi	r2,255
 100ce80:	01400204 	movi	r5,8
 100ce84:	0007883a 	mov	r3,zero
 100ce88:	11001036 	bltu	r2,r4,100cecc <__clzsi2+0x58>
 100ce8c:	000b883a 	mov	r5,zero
 100ce90:	20c6d83a 	srl	r3,r4,r3
 100ce94:	008040b4 	movhi	r2,258
 100ce98:	109dcd04 	addi	r2,r2,30516
 100ce9c:	1887883a 	add	r3,r3,r2
 100cea0:	18800003 	ldbu	r2,0(r3)
 100cea4:	00c00804 	movi	r3,32
 100cea8:	2885883a 	add	r2,r5,r2
 100ceac:	1885c83a 	sub	r2,r3,r2
 100ceb0:	f800283a 	ret
 100ceb4:	01400404 	movi	r5,16
 100ceb8:	00804034 	movhi	r2,256
 100cebc:	10bfffc4 	addi	r2,r2,-1
 100cec0:	2807883a 	mov	r3,r5
 100cec4:	113ff22e 	bgeu	r2,r4,100ce90 <__clzsi2+0x1c>
 100cec8:	01400604 	movi	r5,24
 100cecc:	2807883a 	mov	r3,r5
 100ced0:	20c6d83a 	srl	r3,r4,r3
 100ced4:	008040b4 	movhi	r2,258
 100ced8:	109dcd04 	addi	r2,r2,30516
 100cedc:	1887883a 	add	r3,r3,r2
 100cee0:	18800003 	ldbu	r2,0(r3)
 100cee4:	00c00804 	movi	r3,32
 100cee8:	2885883a 	add	r2,r5,r2
 100ceec:	1885c83a 	sub	r2,r3,r2
 100cef0:	f800283a 	ret

0100cef4 <__pack_f>:
 100cef4:	20c00017 	ldw	r3,0(r4)
 100cef8:	01c00044 	movi	r7,1
 100cefc:	21800317 	ldw	r6,12(r4)
 100cf00:	21400117 	ldw	r5,4(r4)
 100cf04:	38c02d2e 	bgeu	r7,r3,100cfbc <__pack_f+0xc8>
 100cf08:	00800104 	movi	r2,4
 100cf0c:	18802826 	beq	r3,r2,100cfb0 <__pack_f+0xbc>
 100cf10:	00800084 	movi	r2,2
 100cf14:	18800126 	beq	r3,r2,100cf1c <__pack_f+0x28>
 100cf18:	3000101e 	bne	r6,zero,100cf5c <__pack_f+0x68>
 100cf1c:	000d883a 	mov	r6,zero
 100cf20:	0007883a 	mov	r3,zero
 100cf24:	19003fcc 	andi	r4,r3,255
 100cf28:	200895fa 	slli	r4,r4,23
 100cf2c:	00c02034 	movhi	r3,128
 100cf30:	18ffffc4 	addi	r3,r3,-1
 100cf34:	30c6703a 	and	r3,r6,r3
 100cf38:	10a0002c 	andhi	r2,r2,32768
 100cf3c:	10c4b03a 	or	r2,r2,r3
 100cf40:	280a97fa 	slli	r5,r5,31
 100cf44:	1104b03a 	or	r2,r2,r4
 100cf48:	00e00034 	movhi	r3,32768
 100cf4c:	18ffffc4 	addi	r3,r3,-1
 100cf50:	10c4703a 	and	r2,r2,r3
 100cf54:	1144b03a 	or	r2,r2,r5
 100cf58:	f800283a 	ret
 100cf5c:	21000217 	ldw	r4,8(r4)
 100cf60:	00bfe084 	movi	r2,-126
 100cf64:	20801b16 	blt	r4,r2,100cfd4 <__pack_f+0xe0>
 100cf68:	00801fc4 	movi	r2,127
 100cf6c:	11001016 	blt	r2,r4,100cfb0 <__pack_f+0xbc>
 100cf70:	308e703a 	and	r7,r6,r2
 100cf74:	2087883a 	add	r3,r4,r2
 100cf78:	00801004 	movi	r2,64
 100cf7c:	38800526 	beq	r7,r2,100cf94 <__pack_f+0xa0>
 100cf80:	31800fc4 	addi	r6,r6,63
 100cf84:	30000716 	blt	r6,zero,100cfa4 <__pack_f+0xb0>
 100cf88:	300490ba 	slli	r2,r6,2
 100cf8c:	100cd27a 	srli	r6,r2,9
 100cf90:	003fe406 	br	100cf24 <__pack_f+0x30>
 100cf94:	3080200c 	andi	r2,r6,128
 100cf98:	103ffa26 	beq	r2,zero,100cf84 <__pack_f+0x90>
 100cf9c:	31cd883a 	add	r6,r6,r7
 100cfa0:	003ff806 	br	100cf84 <__pack_f+0x90>
 100cfa4:	300cd07a 	srli	r6,r6,1
 100cfa8:	18c00044 	addi	r3,r3,1
 100cfac:	003ff606 	br	100cf88 <__pack_f+0x94>
 100cfb0:	000d883a 	mov	r6,zero
 100cfb4:	00ffffc4 	movi	r3,-1
 100cfb8:	003fda06 	br	100cf24 <__pack_f+0x30>
 100cfbc:	31800434 	orhi	r6,r6,16
 100cfc0:	00802034 	movhi	r2,128
 100cfc4:	10bfffc4 	addi	r2,r2,-1
 100cfc8:	308c703a 	and	r6,r6,r2
 100cfcc:	00ffffc4 	movi	r3,-1
 100cfd0:	003fd406 	br	100cf24 <__pack_f+0x30>
 100cfd4:	1109c83a 	sub	r4,r2,r4
 100cfd8:	00800644 	movi	r2,25
 100cfdc:	11001216 	blt	r2,r4,100d028 <__pack_f+0x134>
 100cfe0:	3904983a 	sll	r2,r7,r4
 100cfe4:	3106d83a 	srl	r3,r6,r4
 100cfe8:	10bfffc4 	addi	r2,r2,-1
 100cfec:	3084703a 	and	r2,r6,r2
 100cff0:	1004c03a 	cmpne	r2,r2,zero
 100cff4:	1886b03a 	or	r3,r3,r2
 100cff8:	19001fcc 	andi	r4,r3,127
 100cffc:	00801004 	movi	r2,64
 100d000:	20800c26 	beq	r4,r2,100d034 <__pack_f+0x140>
 100d004:	18c00fc4 	addi	r3,r3,63
 100d008:	00900034 	movhi	r2,16384
 100d00c:	10bfffc4 	addi	r2,r2,-1
 100d010:	180cd1fa 	srli	r6,r3,7
 100d014:	10c7803a 	cmpltu	r3,r2,r3
 100d018:	00802034 	movhi	r2,128
 100d01c:	10bfffc4 	addi	r2,r2,-1
 100d020:	308c703a 	and	r6,r6,r2
 100d024:	003fbf06 	br	100cf24 <__pack_f+0x30>
 100d028:	0007883a 	mov	r3,zero
 100d02c:	000d883a 	mov	r6,zero
 100d030:	003ff906 	br	100d018 <__pack_f+0x124>
 100d034:	1880200c 	andi	r2,r3,128
 100d038:	10000126 	beq	r2,zero,100d040 <__pack_f+0x14c>
 100d03c:	1907883a 	add	r3,r3,r4
 100d040:	180cd1fa 	srli	r6,r3,7
 100d044:	00900034 	movhi	r2,16384
 100d048:	10bfffc4 	addi	r2,r2,-1
 100d04c:	10c7803a 	cmpltu	r3,r2,r3
 100d050:	003ff106 	br	100d018 <__pack_f+0x124>

0100d054 <__unpack_f>:
 100d054:	21800017 	ldw	r6,0(r4)
 100d058:	00c02034 	movhi	r3,128
 100d05c:	18ffffc4 	addi	r3,r3,-1
 100d060:	3004d5fa 	srli	r2,r6,23
 100d064:	3008d7fa 	srli	r4,r6,31
 100d068:	30ce703a 	and	r7,r6,r3
 100d06c:	10c03fcc 	andi	r3,r2,255
 100d070:	29000115 	stw	r4,4(r5)
 100d074:	1800131e 	bne	r3,zero,100d0c4 <__unpack_f+0x70>
 100d078:	38000f26 	beq	r7,zero,100d0b8 <__unpack_f+0x64>
 100d07c:	380691fa 	slli	r3,r7,7
 100d080:	01bfe084 	movi	r6,-126
 100d084:	008000c4 	movi	r2,3
 100d088:	01100034 	movhi	r4,16384
 100d08c:	213fffc4 	addi	r4,r4,-1
 100d090:	28800015 	stw	r2,0(r5)
 100d094:	29800215 	stw	r6,8(r5)
 100d098:	20c00536 	bltu	r4,r3,100d0b0 <__unpack_f+0x5c>
 100d09c:	3005883a 	mov	r2,r6
 100d0a0:	18c7883a 	add	r3,r3,r3
 100d0a4:	10bfffc4 	addi	r2,r2,-1
 100d0a8:	20fffd2e 	bgeu	r4,r3,100d0a0 <__unpack_f+0x4c>
 100d0ac:	28800215 	stw	r2,8(r5)
 100d0b0:	28c00315 	stw	r3,12(r5)
 100d0b4:	f800283a 	ret
 100d0b8:	00800084 	movi	r2,2
 100d0bc:	28800015 	stw	r2,0(r5)
 100d0c0:	f800283a 	ret
 100d0c4:	00803fc4 	movi	r2,255
 100d0c8:	18800826 	beq	r3,r2,100d0ec <__unpack_f+0x98>
 100d0cc:	380491fa 	slli	r2,r7,7
 100d0d0:	18ffe044 	addi	r3,r3,-127
 100d0d4:	28c00215 	stw	r3,8(r5)
 100d0d8:	10900034 	orhi	r2,r2,16384
 100d0dc:	28800315 	stw	r2,12(r5)
 100d0e0:	008000c4 	movi	r2,3
 100d0e4:	28800015 	stw	r2,0(r5)
 100d0e8:	f800283a 	ret
 100d0ec:	3800031e 	bne	r7,zero,100d0fc <__unpack_f+0xa8>
 100d0f0:	00800104 	movi	r2,4
 100d0f4:	28800015 	stw	r2,0(r5)
 100d0f8:	f800283a 	ret
 100d0fc:	3080042c 	andhi	r2,r6,16
 100d100:	10000426 	beq	r2,zero,100d114 <__unpack_f+0xc0>
 100d104:	00800044 	movi	r2,1
 100d108:	28800015 	stw	r2,0(r5)
 100d10c:	29c00315 	stw	r7,12(r5)
 100d110:	f800283a 	ret
 100d114:	28000015 	stw	zero,0(r5)
 100d118:	003ffc06 	br	100d10c <__unpack_f+0xb8>

0100d11c <__fpcmp_parts_f>:
 100d11c:	21800017 	ldw	r6,0(r4)
 100d120:	00c00044 	movi	r3,1
 100d124:	19800a2e 	bgeu	r3,r6,100d150 <__fpcmp_parts_f+0x34>
 100d128:	28800017 	ldw	r2,0(r5)
 100d12c:	1880082e 	bgeu	r3,r2,100d150 <__fpcmp_parts_f+0x34>
 100d130:	00c00104 	movi	r3,4
 100d134:	30c01e26 	beq	r6,r3,100d1b0 <__fpcmp_parts_f+0x94>
 100d138:	10c01a26 	beq	r2,r3,100d1a4 <__fpcmp_parts_f+0x88>
 100d13c:	00c00084 	movi	r3,2
 100d140:	30c00526 	beq	r6,r3,100d158 <__fpcmp_parts_f+0x3c>
 100d144:	10c0071e 	bne	r2,r3,100d164 <__fpcmp_parts_f+0x48>
 100d148:	20800117 	ldw	r2,4(r4)
 100d14c:	1000091e 	bne	r2,zero,100d174 <__fpcmp_parts_f+0x58>
 100d150:	00800044 	movi	r2,1
 100d154:	f800283a 	ret
 100d158:	10c0121e 	bne	r2,r3,100d1a4 <__fpcmp_parts_f+0x88>
 100d15c:	0005883a 	mov	r2,zero
 100d160:	f800283a 	ret
 100d164:	20c00117 	ldw	r3,4(r4)
 100d168:	28800117 	ldw	r2,4(r5)
 100d16c:	18800326 	beq	r3,r2,100d17c <__fpcmp_parts_f+0x60>
 100d170:	183ff726 	beq	r3,zero,100d150 <__fpcmp_parts_f+0x34>
 100d174:	00bfffc4 	movi	r2,-1
 100d178:	f800283a 	ret
 100d17c:	21800217 	ldw	r6,8(r4)
 100d180:	28800217 	ldw	r2,8(r5)
 100d184:	11bffa16 	blt	r2,r6,100d170 <__fpcmp_parts_f+0x54>
 100d188:	30800416 	blt	r6,r2,100d19c <__fpcmp_parts_f+0x80>
 100d18c:	21000317 	ldw	r4,12(r4)
 100d190:	29400317 	ldw	r5,12(r5)
 100d194:	293ff636 	bltu	r5,r4,100d170 <__fpcmp_parts_f+0x54>
 100d198:	217ff02e 	bgeu	r4,r5,100d15c <__fpcmp_parts_f+0x40>
 100d19c:	183fec1e 	bne	r3,zero,100d150 <__fpcmp_parts_f+0x34>
 100d1a0:	003ff406 	br	100d174 <__fpcmp_parts_f+0x58>
 100d1a4:	28800117 	ldw	r2,4(r5)
 100d1a8:	103fe91e 	bne	r2,zero,100d150 <__fpcmp_parts_f+0x34>
 100d1ac:	003ff106 	br	100d174 <__fpcmp_parts_f+0x58>
 100d1b0:	11bfe51e 	bne	r2,r6,100d148 <__fpcmp_parts_f+0x2c>
 100d1b4:	28c00117 	ldw	r3,4(r5)
 100d1b8:	20800117 	ldw	r2,4(r4)
 100d1bc:	1885c83a 	sub	r2,r3,r2
 100d1c0:	f800283a 	ret

0100d1c4 <__make_fp>:
 100d1c4:	defffb04 	addi	sp,sp,-20
 100d1c8:	d9000015 	stw	r4,0(sp)
 100d1cc:	d809883a 	mov	r4,sp
 100d1d0:	dfc00415 	stw	ra,16(sp)
 100d1d4:	d9400115 	stw	r5,4(sp)
 100d1d8:	d9800215 	stw	r6,8(sp)
 100d1dc:	d9c00315 	stw	r7,12(sp)
 100d1e0:	100cef40 	call	100cef4 <__pack_f>
 100d1e4:	dfc00417 	ldw	ra,16(sp)
 100d1e8:	dec00504 	addi	sp,sp,20
 100d1ec:	f800283a 	ret

0100d1f0 <__pack_d>:
 100d1f0:	20c00017 	ldw	r3,0(r4)
 100d1f4:	defffd04 	addi	sp,sp,-12
 100d1f8:	dc000015 	stw	r16,0(sp)
 100d1fc:	dc800215 	stw	r18,8(sp)
 100d200:	dc400115 	stw	r17,4(sp)
 100d204:	00800044 	movi	r2,1
 100d208:	22000317 	ldw	r8,12(r4)
 100d20c:	001f883a 	mov	r15,zero
 100d210:	22400417 	ldw	r9,16(r4)
 100d214:	24000117 	ldw	r16,4(r4)
 100d218:	10c0552e 	bgeu	r2,r3,100d370 <__pack_d+0x180>
 100d21c:	00800104 	movi	r2,4
 100d220:	18804f26 	beq	r3,r2,100d360 <__pack_d+0x170>
 100d224:	00800084 	movi	r2,2
 100d228:	18800226 	beq	r3,r2,100d234 <__pack_d+0x44>
 100d22c:	4244b03a 	or	r2,r8,r9
 100d230:	10001a1e 	bne	r2,zero,100d29c <__pack_d+0xac>
 100d234:	000d883a 	mov	r6,zero
 100d238:	000f883a 	mov	r7,zero
 100d23c:	0011883a 	mov	r8,zero
 100d240:	00800434 	movhi	r2,16
 100d244:	10bfffc4 	addi	r2,r2,-1
 100d248:	301d883a 	mov	r14,r6
 100d24c:	3884703a 	and	r2,r7,r2
 100d250:	400a953a 	slli	r5,r8,20
 100d254:	79bffc2c 	andhi	r6,r15,65520
 100d258:	308cb03a 	or	r6,r6,r2
 100d25c:	00e00434 	movhi	r3,32784
 100d260:	18ffffc4 	addi	r3,r3,-1
 100d264:	800497fa 	slli	r2,r16,31
 100d268:	30c6703a 	and	r3,r6,r3
 100d26c:	1946b03a 	or	r3,r3,r5
 100d270:	01600034 	movhi	r5,32768
 100d274:	297fffc4 	addi	r5,r5,-1
 100d278:	194a703a 	and	r5,r3,r5
 100d27c:	288ab03a 	or	r5,r5,r2
 100d280:	2807883a 	mov	r3,r5
 100d284:	7005883a 	mov	r2,r14
 100d288:	dc800217 	ldw	r18,8(sp)
 100d28c:	dc400117 	ldw	r17,4(sp)
 100d290:	dc000017 	ldw	r16,0(sp)
 100d294:	dec00304 	addi	sp,sp,12
 100d298:	f800283a 	ret
 100d29c:	21000217 	ldw	r4,8(r4)
 100d2a0:	00bf0084 	movi	r2,-1022
 100d2a4:	20803f16 	blt	r4,r2,100d3a4 <__pack_d+0x1b4>
 100d2a8:	0080ffc4 	movi	r2,1023
 100d2ac:	11002c16 	blt	r2,r4,100d360 <__pack_d+0x170>
 100d2b0:	00803fc4 	movi	r2,255
 100d2b4:	408c703a 	and	r6,r8,r2
 100d2b8:	00802004 	movi	r2,128
 100d2bc:	0007883a 	mov	r3,zero
 100d2c0:	000f883a 	mov	r7,zero
 100d2c4:	2280ffc4 	addi	r10,r4,1023
 100d2c8:	30801e26 	beq	r6,r2,100d344 <__pack_d+0x154>
 100d2cc:	00801fc4 	movi	r2,127
 100d2d0:	4089883a 	add	r4,r8,r2
 100d2d4:	220d803a 	cmpltu	r6,r4,r8
 100d2d8:	324d883a 	add	r6,r6,r9
 100d2dc:	2011883a 	mov	r8,r4
 100d2e0:	3013883a 	mov	r9,r6
 100d2e4:	00880034 	movhi	r2,8192
 100d2e8:	10bfffc4 	addi	r2,r2,-1
 100d2ec:	12400d36 	bltu	r2,r9,100d324 <__pack_d+0x134>
 100d2f0:	4804963a 	slli	r2,r9,24
 100d2f4:	400cd23a 	srli	r6,r8,8
 100d2f8:	480ed23a 	srli	r7,r9,8
 100d2fc:	013fffc4 	movi	r4,-1
 100d300:	118cb03a 	or	r6,r2,r6
 100d304:	01400434 	movhi	r5,16
 100d308:	297fffc4 	addi	r5,r5,-1
 100d30c:	3104703a 	and	r2,r6,r4
 100d310:	3946703a 	and	r3,r7,r5
 100d314:	5201ffcc 	andi	r8,r10,2047
 100d318:	100d883a 	mov	r6,r2
 100d31c:	180f883a 	mov	r7,r3
 100d320:	003fc706 	br	100d240 <__pack_d+0x50>
 100d324:	480897fa 	slli	r4,r9,31
 100d328:	4004d07a 	srli	r2,r8,1
 100d32c:	4806d07a 	srli	r3,r9,1
 100d330:	52800044 	addi	r10,r10,1
 100d334:	2084b03a 	or	r2,r4,r2
 100d338:	1011883a 	mov	r8,r2
 100d33c:	1813883a 	mov	r9,r3
 100d340:	003feb06 	br	100d2f0 <__pack_d+0x100>
 100d344:	383fe11e 	bne	r7,zero,100d2cc <__pack_d+0xdc>
 100d348:	01004004 	movi	r4,256
 100d34c:	4104703a 	and	r2,r8,r4
 100d350:	10c4b03a 	or	r2,r2,r3
 100d354:	103fe326 	beq	r2,zero,100d2e4 <__pack_d+0xf4>
 100d358:	3005883a 	mov	r2,r6
 100d35c:	003fdc06 	br	100d2d0 <__pack_d+0xe0>
 100d360:	000d883a 	mov	r6,zero
 100d364:	000f883a 	mov	r7,zero
 100d368:	0201ffc4 	movi	r8,2047
 100d36c:	003fb406 	br	100d240 <__pack_d+0x50>
 100d370:	0005883a 	mov	r2,zero
 100d374:	00c00234 	movhi	r3,8
 100d378:	408cb03a 	or	r6,r8,r2
 100d37c:	48ceb03a 	or	r7,r9,r3
 100d380:	013fffc4 	movi	r4,-1
 100d384:	01400434 	movhi	r5,16
 100d388:	297fffc4 	addi	r5,r5,-1
 100d38c:	3104703a 	and	r2,r6,r4
 100d390:	3946703a 	and	r3,r7,r5
 100d394:	100d883a 	mov	r6,r2
 100d398:	180f883a 	mov	r7,r3
 100d39c:	0201ffc4 	movi	r8,2047
 100d3a0:	003fa706 	br	100d240 <__pack_d+0x50>
 100d3a4:	1109c83a 	sub	r4,r2,r4
 100d3a8:	00800e04 	movi	r2,56
 100d3ac:	11004316 	blt	r2,r4,100d4bc <__pack_d+0x2cc>
 100d3b0:	21fff804 	addi	r7,r4,-32
 100d3b4:	38004516 	blt	r7,zero,100d4cc <__pack_d+0x2dc>
 100d3b8:	49d8d83a 	srl	r12,r9,r7
 100d3bc:	001b883a 	mov	r13,zero
 100d3c0:	0023883a 	mov	r17,zero
 100d3c4:	01400044 	movi	r5,1
 100d3c8:	0025883a 	mov	r18,zero
 100d3cc:	38004716 	blt	r7,zero,100d4ec <__pack_d+0x2fc>
 100d3d0:	29d6983a 	sll	r11,r5,r7
 100d3d4:	0015883a 	mov	r10,zero
 100d3d8:	00bfffc4 	movi	r2,-1
 100d3dc:	5089883a 	add	r4,r10,r2
 100d3e0:	588b883a 	add	r5,r11,r2
 100d3e4:	228d803a 	cmpltu	r6,r4,r10
 100d3e8:	314b883a 	add	r5,r6,r5
 100d3ec:	4104703a 	and	r2,r8,r4
 100d3f0:	4946703a 	and	r3,r9,r5
 100d3f4:	10c4b03a 	or	r2,r2,r3
 100d3f8:	10000226 	beq	r2,zero,100d404 <__pack_d+0x214>
 100d3fc:	04400044 	movi	r17,1
 100d400:	0025883a 	mov	r18,zero
 100d404:	00803fc4 	movi	r2,255
 100d408:	644eb03a 	or	r7,r12,r17
 100d40c:	3892703a 	and	r9,r7,r2
 100d410:	00802004 	movi	r2,128
 100d414:	6c90b03a 	or	r8,r13,r18
 100d418:	0015883a 	mov	r10,zero
 100d41c:	48801626 	beq	r9,r2,100d478 <__pack_d+0x288>
 100d420:	01001fc4 	movi	r4,127
 100d424:	3905883a 	add	r2,r7,r4
 100d428:	11cd803a 	cmpltu	r6,r2,r7
 100d42c:	320d883a 	add	r6,r6,r8
 100d430:	100f883a 	mov	r7,r2
 100d434:	00840034 	movhi	r2,4096
 100d438:	10bfffc4 	addi	r2,r2,-1
 100d43c:	3011883a 	mov	r8,r6
 100d440:	0007883a 	mov	r3,zero
 100d444:	11801b36 	bltu	r2,r6,100d4b4 <__pack_d+0x2c4>
 100d448:	4004963a 	slli	r2,r8,24
 100d44c:	3808d23a 	srli	r4,r7,8
 100d450:	400ad23a 	srli	r5,r8,8
 100d454:	1813883a 	mov	r9,r3
 100d458:	1108b03a 	or	r4,r2,r4
 100d45c:	00bfffc4 	movi	r2,-1
 100d460:	00c00434 	movhi	r3,16
 100d464:	18ffffc4 	addi	r3,r3,-1
 100d468:	208c703a 	and	r6,r4,r2
 100d46c:	28ce703a 	and	r7,r5,r3
 100d470:	4a01ffcc 	andi	r8,r9,2047
 100d474:	003f7206 	br	100d240 <__pack_d+0x50>
 100d478:	503fe91e 	bne	r10,zero,100d420 <__pack_d+0x230>
 100d47c:	01004004 	movi	r4,256
 100d480:	3904703a 	and	r2,r7,r4
 100d484:	0007883a 	mov	r3,zero
 100d488:	10c4b03a 	or	r2,r2,r3
 100d48c:	10000626 	beq	r2,zero,100d4a8 <__pack_d+0x2b8>
 100d490:	3a45883a 	add	r2,r7,r9
 100d494:	11cd803a 	cmpltu	r6,r2,r7
 100d498:	320d883a 	add	r6,r6,r8
 100d49c:	100f883a 	mov	r7,r2
 100d4a0:	3011883a 	mov	r8,r6
 100d4a4:	0007883a 	mov	r3,zero
 100d4a8:	00840034 	movhi	r2,4096
 100d4ac:	10bfffc4 	addi	r2,r2,-1
 100d4b0:	123fe52e 	bgeu	r2,r8,100d448 <__pack_d+0x258>
 100d4b4:	00c00044 	movi	r3,1
 100d4b8:	003fe306 	br	100d448 <__pack_d+0x258>
 100d4bc:	0009883a 	mov	r4,zero
 100d4c0:	0013883a 	mov	r9,zero
 100d4c4:	000b883a 	mov	r5,zero
 100d4c8:	003fe406 	br	100d45c <__pack_d+0x26c>
 100d4cc:	4a47883a 	add	r3,r9,r9
 100d4d0:	008007c4 	movi	r2,31
 100d4d4:	1105c83a 	sub	r2,r2,r4
 100d4d8:	1886983a 	sll	r3,r3,r2
 100d4dc:	4118d83a 	srl	r12,r8,r4
 100d4e0:	491ad83a 	srl	r13,r9,r4
 100d4e4:	1b18b03a 	or	r12,r3,r12
 100d4e8:	003fb506 	br	100d3c0 <__pack_d+0x1d0>
 100d4ec:	2806d07a 	srli	r3,r5,1
 100d4f0:	008007c4 	movi	r2,31
 100d4f4:	1105c83a 	sub	r2,r2,r4
 100d4f8:	1896d83a 	srl	r11,r3,r2
 100d4fc:	2914983a 	sll	r10,r5,r4
 100d500:	003fb506 	br	100d3d8 <__pack_d+0x1e8>

0100d504 <__unpack_d>:
 100d504:	20c00117 	ldw	r3,4(r4)
 100d508:	22400017 	ldw	r9,0(r4)
 100d50c:	00800434 	movhi	r2,16
 100d510:	10bfffc4 	addi	r2,r2,-1
 100d514:	1808d53a 	srli	r4,r3,20
 100d518:	180cd7fa 	srli	r6,r3,31
 100d51c:	1894703a 	and	r10,r3,r2
 100d520:	2201ffcc 	andi	r8,r4,2047
 100d524:	281b883a 	mov	r13,r5
 100d528:	4817883a 	mov	r11,r9
 100d52c:	29800115 	stw	r6,4(r5)
 100d530:	5019883a 	mov	r12,r10
 100d534:	40001e1e 	bne	r8,zero,100d5b0 <__unpack_d+0xac>
 100d538:	4a84b03a 	or	r2,r9,r10
 100d53c:	10001926 	beq	r2,zero,100d5a4 <__unpack_d+0xa0>
 100d540:	4804d63a 	srli	r2,r9,24
 100d544:	500c923a 	slli	r6,r10,8
 100d548:	013f0084 	movi	r4,-1022
 100d54c:	00c40034 	movhi	r3,4096
 100d550:	18ffffc4 	addi	r3,r3,-1
 100d554:	118cb03a 	or	r6,r2,r6
 100d558:	008000c4 	movi	r2,3
 100d55c:	480a923a 	slli	r5,r9,8
 100d560:	68800015 	stw	r2,0(r13)
 100d564:	69000215 	stw	r4,8(r13)
 100d568:	19800b36 	bltu	r3,r6,100d598 <__unpack_d+0x94>
 100d56c:	200f883a 	mov	r7,r4
 100d570:	1811883a 	mov	r8,r3
 100d574:	2945883a 	add	r2,r5,r5
 100d578:	1149803a 	cmpltu	r4,r2,r5
 100d57c:	3187883a 	add	r3,r6,r6
 100d580:	20c9883a 	add	r4,r4,r3
 100d584:	100b883a 	mov	r5,r2
 100d588:	200d883a 	mov	r6,r4
 100d58c:	39ffffc4 	addi	r7,r7,-1
 100d590:	413ff82e 	bgeu	r8,r4,100d574 <__unpack_d+0x70>
 100d594:	69c00215 	stw	r7,8(r13)
 100d598:	69800415 	stw	r6,16(r13)
 100d59c:	69400315 	stw	r5,12(r13)
 100d5a0:	f800283a 	ret
 100d5a4:	00800084 	movi	r2,2
 100d5a8:	28800015 	stw	r2,0(r5)
 100d5ac:	f800283a 	ret
 100d5b0:	0081ffc4 	movi	r2,2047
 100d5b4:	40800f26 	beq	r8,r2,100d5f4 <__unpack_d+0xf0>
 100d5b8:	480cd63a 	srli	r6,r9,24
 100d5bc:	5006923a 	slli	r3,r10,8
 100d5c0:	4804923a 	slli	r2,r9,8
 100d5c4:	0009883a 	mov	r4,zero
 100d5c8:	30c6b03a 	or	r3,r6,r3
 100d5cc:	01440034 	movhi	r5,4096
 100d5d0:	110cb03a 	or	r6,r2,r4
 100d5d4:	423f0044 	addi	r8,r8,-1023
 100d5d8:	194eb03a 	or	r7,r3,r5
 100d5dc:	008000c4 	movi	r2,3
 100d5e0:	69c00415 	stw	r7,16(r13)
 100d5e4:	6a000215 	stw	r8,8(r13)
 100d5e8:	68800015 	stw	r2,0(r13)
 100d5ec:	69800315 	stw	r6,12(r13)
 100d5f0:	f800283a 	ret
 100d5f4:	4a84b03a 	or	r2,r9,r10
 100d5f8:	1000031e 	bne	r2,zero,100d608 <__unpack_d+0x104>
 100d5fc:	00800104 	movi	r2,4
 100d600:	28800015 	stw	r2,0(r5)
 100d604:	f800283a 	ret
 100d608:	0009883a 	mov	r4,zero
 100d60c:	01400234 	movhi	r5,8
 100d610:	4904703a 	and	r2,r9,r4
 100d614:	5146703a 	and	r3,r10,r5
 100d618:	10c4b03a 	or	r2,r2,r3
 100d61c:	10000526 	beq	r2,zero,100d634 <__unpack_d+0x130>
 100d620:	00800044 	movi	r2,1
 100d624:	68800015 	stw	r2,0(r13)
 100d628:	6b000415 	stw	r12,16(r13)
 100d62c:	6ac00315 	stw	r11,12(r13)
 100d630:	f800283a 	ret
 100d634:	68000015 	stw	zero,0(r13)
 100d638:	003ffb06 	br	100d628 <__unpack_d+0x124>

0100d63c <__fpcmp_parts_d>:
 100d63c:	21800017 	ldw	r6,0(r4)
 100d640:	00c00044 	movi	r3,1
 100d644:	19800a2e 	bgeu	r3,r6,100d670 <__fpcmp_parts_d+0x34>
 100d648:	28800017 	ldw	r2,0(r5)
 100d64c:	1880082e 	bgeu	r3,r2,100d670 <__fpcmp_parts_d+0x34>
 100d650:	00c00104 	movi	r3,4
 100d654:	30c02626 	beq	r6,r3,100d6f0 <__fpcmp_parts_d+0xb4>
 100d658:	10c02226 	beq	r2,r3,100d6e4 <__fpcmp_parts_d+0xa8>
 100d65c:	00c00084 	movi	r3,2
 100d660:	30c00526 	beq	r6,r3,100d678 <__fpcmp_parts_d+0x3c>
 100d664:	10c0071e 	bne	r2,r3,100d684 <__fpcmp_parts_d+0x48>
 100d668:	20800117 	ldw	r2,4(r4)
 100d66c:	1000091e 	bne	r2,zero,100d694 <__fpcmp_parts_d+0x58>
 100d670:	00800044 	movi	r2,1
 100d674:	f800283a 	ret
 100d678:	10c01a1e 	bne	r2,r3,100d6e4 <__fpcmp_parts_d+0xa8>
 100d67c:	0005883a 	mov	r2,zero
 100d680:	f800283a 	ret
 100d684:	22000117 	ldw	r8,4(r4)
 100d688:	28800117 	ldw	r2,4(r5)
 100d68c:	40800326 	beq	r8,r2,100d69c <__fpcmp_parts_d+0x60>
 100d690:	403ff726 	beq	r8,zero,100d670 <__fpcmp_parts_d+0x34>
 100d694:	00bfffc4 	movi	r2,-1
 100d698:	f800283a 	ret
 100d69c:	20c00217 	ldw	r3,8(r4)
 100d6a0:	28800217 	ldw	r2,8(r5)
 100d6a4:	10fffa16 	blt	r2,r3,100d690 <__fpcmp_parts_d+0x54>
 100d6a8:	18800916 	blt	r3,r2,100d6d0 <__fpcmp_parts_d+0x94>
 100d6ac:	21c00417 	ldw	r7,16(r4)
 100d6b0:	28c00417 	ldw	r3,16(r5)
 100d6b4:	21800317 	ldw	r6,12(r4)
 100d6b8:	28800317 	ldw	r2,12(r5)
 100d6bc:	19fff436 	bltu	r3,r7,100d690 <__fpcmp_parts_d+0x54>
 100d6c0:	38c00526 	beq	r7,r3,100d6d8 <__fpcmp_parts_d+0x9c>
 100d6c4:	38c00236 	bltu	r7,r3,100d6d0 <__fpcmp_parts_d+0x94>
 100d6c8:	19ffec1e 	bne	r3,r7,100d67c <__fpcmp_parts_d+0x40>
 100d6cc:	30bfeb2e 	bgeu	r6,r2,100d67c <__fpcmp_parts_d+0x40>
 100d6d0:	403fe71e 	bne	r8,zero,100d670 <__fpcmp_parts_d+0x34>
 100d6d4:	003fef06 	br	100d694 <__fpcmp_parts_d+0x58>
 100d6d8:	11bffa2e 	bgeu	r2,r6,100d6c4 <__fpcmp_parts_d+0x88>
 100d6dc:	403fe426 	beq	r8,zero,100d670 <__fpcmp_parts_d+0x34>
 100d6e0:	003fec06 	br	100d694 <__fpcmp_parts_d+0x58>
 100d6e4:	28800117 	ldw	r2,4(r5)
 100d6e8:	103fe11e 	bne	r2,zero,100d670 <__fpcmp_parts_d+0x34>
 100d6ec:	003fe906 	br	100d694 <__fpcmp_parts_d+0x58>
 100d6f0:	11bfdd1e 	bne	r2,r6,100d668 <__fpcmp_parts_d+0x2c>
 100d6f4:	28c00117 	ldw	r3,4(r5)
 100d6f8:	20800117 	ldw	r2,4(r4)
 100d6fc:	1885c83a 	sub	r2,r3,r2
 100d700:	f800283a 	ret

0100d704 <atof>:
 100d704:	000b883a 	mov	r5,zero
 100d708:	100fa881 	jmpi	100fa88 <strtod>

0100d70c <_atoi_r>:
 100d70c:	000d883a 	mov	r6,zero
 100d710:	01c00284 	movi	r7,10
 100d714:	100faa41 	jmpi	100faa4 <_strtol_r>

0100d718 <atoi>:
 100d718:	000b883a 	mov	r5,zero
 100d71c:	01800284 	movi	r6,10
 100d720:	100fce81 	jmpi	100fce8 <strtol>

0100d724 <__errno>:
 100d724:	00c040f4 	movhi	r3,259
 100d728:	18e67004 	addi	r3,r3,-26176
 100d72c:	18800017 	ldw	r2,0(r3)
 100d730:	f800283a 	ret

0100d734 <gmtime>:
 100d734:	008040f4 	movhi	r2,259
 100d738:	10a67004 	addi	r2,r2,-26176
 100d73c:	11400017 	ldw	r5,0(r2)
 100d740:	29401f04 	addi	r5,r5,124
 100d744:	100d7481 	jmpi	100d748 <gmtime_r>

0100d748 <gmtime_r>:
 100d748:	01800044 	movi	r6,1
 100d74c:	100da241 	jmpi	100da24 <_mktm_r>

0100d750 <memcpy>:
 100d750:	01c003c4 	movi	r7,15
 100d754:	2007883a 	mov	r3,r4
 100d758:	3980032e 	bgeu	r7,r6,100d768 <memcpy+0x18>
 100d75c:	2904b03a 	or	r2,r5,r4
 100d760:	108000cc 	andi	r2,r2,3
 100d764:	10000926 	beq	r2,zero,100d78c <memcpy+0x3c>
 100d768:	30000626 	beq	r6,zero,100d784 <memcpy+0x34>
 100d76c:	30cd883a 	add	r6,r6,r3
 100d770:	28800003 	ldbu	r2,0(r5)
 100d774:	29400044 	addi	r5,r5,1
 100d778:	18800005 	stb	r2,0(r3)
 100d77c:	18c00044 	addi	r3,r3,1
 100d780:	30fffb1e 	bne	r6,r3,100d770 <memcpy+0x20>
 100d784:	2005883a 	mov	r2,r4
 100d788:	f800283a 	ret
 100d78c:	3811883a 	mov	r8,r7
 100d790:	200f883a 	mov	r7,r4
 100d794:	28c00017 	ldw	r3,0(r5)
 100d798:	31bffc04 	addi	r6,r6,-16
 100d79c:	38c00015 	stw	r3,0(r7)
 100d7a0:	28800117 	ldw	r2,4(r5)
 100d7a4:	38800115 	stw	r2,4(r7)
 100d7a8:	28c00217 	ldw	r3,8(r5)
 100d7ac:	38c00215 	stw	r3,8(r7)
 100d7b0:	28800317 	ldw	r2,12(r5)
 100d7b4:	29400404 	addi	r5,r5,16
 100d7b8:	38800315 	stw	r2,12(r7)
 100d7bc:	39c00404 	addi	r7,r7,16
 100d7c0:	41bff436 	bltu	r8,r6,100d794 <memcpy+0x44>
 100d7c4:	008000c4 	movi	r2,3
 100d7c8:	1180072e 	bgeu	r2,r6,100d7e8 <memcpy+0x98>
 100d7cc:	1007883a 	mov	r3,r2
 100d7d0:	28800017 	ldw	r2,0(r5)
 100d7d4:	31bfff04 	addi	r6,r6,-4
 100d7d8:	29400104 	addi	r5,r5,4
 100d7dc:	38800015 	stw	r2,0(r7)
 100d7e0:	39c00104 	addi	r7,r7,4
 100d7e4:	19bffa36 	bltu	r3,r6,100d7d0 <memcpy+0x80>
 100d7e8:	3807883a 	mov	r3,r7
 100d7ec:	003fde06 	br	100d768 <memcpy+0x18>

0100d7f0 <__tzcalc_limits>:
 100d7f0:	defff504 	addi	sp,sp,-44
 100d7f4:	dcc00415 	stw	r19,16(sp)
 100d7f8:	dc800315 	stw	r18,12(sp)
 100d7fc:	dfc00a15 	stw	ra,40(sp)
 100d800:	df000915 	stw	fp,36(sp)
 100d804:	ddc00815 	stw	r23,32(sp)
 100d808:	dd800715 	stw	r22,28(sp)
 100d80c:	dd400615 	stw	r21,24(sp)
 100d810:	dd000515 	stw	r20,20(sp)
 100d814:	dc400215 	stw	r17,8(sp)
 100d818:	dc000115 	stw	r16,4(sp)
 100d81c:	2025883a 	mov	r18,r4
 100d820:	101526c0 	call	101526c <__gettzinfo>
 100d824:	1027883a 	mov	r19,r2
 100d828:	0081ec44 	movi	r2,1969
 100d82c:	14806e0e 	bge	r2,r18,100d9e8 <__tzcalc_limits+0x1f8>
 100d830:	943e1384 	addi	r16,r18,-1970
 100d834:	90be13c4 	addi	r2,r18,-1969
 100d838:	1005d0ba 	srai	r2,r2,2
 100d83c:	84005b64 	muli	r16,r16,365
 100d840:	913e24c4 	addi	r4,r18,-1901
 100d844:	9c800115 	stw	r18,4(r19)
 100d848:	01401904 	movi	r5,100
 100d84c:	80a1883a 	add	r16,r16,r2
 100d850:	100cd0c0 	call	100cd0c <__divsi3>
 100d854:	913e6fc4 	addi	r4,r18,-1601
 100d858:	01406404 	movi	r5,400
 100d85c:	80a1c83a 	sub	r16,r16,r2
 100d860:	100cd0c0 	call	100cd0c <__divsi3>
 100d864:	9009883a 	mov	r4,r18
 100d868:	01406404 	movi	r5,400
 100d86c:	80ad883a 	add	r22,r16,r2
 100d870:	100cd6c0 	call	100cd6c <__modsi3>
 100d874:	9009883a 	mov	r4,r18
 100d878:	01401904 	movi	r5,100
 100d87c:	1023883a 	mov	r17,r2
 100d880:	100cd6c0 	call	100cd6c <__modsi3>
 100d884:	90c000cc 	andi	r3,r18,3
 100d888:	1004c03a 	cmpne	r2,r2,zero
 100d88c:	182ec03a 	cmpne	r23,r3,zero
 100d890:	d8800015 	stw	r2,0(sp)
 100d894:	8839003a 	cmpeq	fp,r17,zero
 100d898:	9825883a 	mov	r18,r19
 100d89c:	0029883a 	mov	r20,zero
 100d8a0:	90c00207 	ldb	r3,8(r18)
 100d8a4:	00801284 	movi	r2,74
 100d8a8:	18804726 	beq	r3,r2,100d9c8 <__tzcalc_limits+0x1d8>
 100d8ac:	00801104 	movi	r2,68
 100d8b0:	18804f26 	beq	r3,r2,100d9f0 <__tzcalc_limits+0x200>
 100d8b4:	b8003e26 	beq	r23,zero,100d9b0 <__tzcalc_limits+0x1c0>
 100d8b8:	e0004026 	beq	fp,zero,100d9bc <__tzcalc_limits+0x1cc>
 100d8bc:	044040b4 	movhi	r17,258
 100d8c0:	8c5e1a04 	addi	r17,r17,30824
 100d8c4:	91400317 	ldw	r5,12(r18)
 100d8c8:	00800044 	movi	r2,1
 100d8cc:	1140520e 	bge	r2,r5,100da18 <__tzcalc_limits+0x228>
 100d8d0:	1009883a 	mov	r4,r2
 100d8d4:	8807883a 	mov	r3,r17
 100d8d8:	b021883a 	mov	r16,r22
 100d8dc:	18800017 	ldw	r2,0(r3)
 100d8e0:	21000044 	addi	r4,r4,1
 100d8e4:	18c00104 	addi	r3,r3,4
 100d8e8:	80a1883a 	add	r16,r16,r2
 100d8ec:	293ffb1e 	bne	r5,r4,100d8dc <__tzcalc_limits+0xec>
 100d8f0:	2945883a 	add	r2,r5,r5
 100d8f4:	10ab883a 	add	r21,r2,r2
 100d8f8:	81000104 	addi	r4,r16,4
 100d8fc:	014001c4 	movi	r5,7
 100d900:	100cd6c0 	call	100cd6c <__modsi3>
 100d904:	90c00517 	ldw	r3,20(r18)
 100d908:	1889c83a 	sub	r4,r3,r2
 100d90c:	20004016 	blt	r4,zero,100da10 <__tzcalc_limits+0x220>
 100d910:	90800417 	ldw	r2,16(r18)
 100d914:	8d47883a 	add	r3,r17,r21
 100d918:	18ffff17 	ldw	r3,-4(r3)
 100d91c:	108001e4 	muli	r2,r2,7
 100d920:	10bffe44 	addi	r2,r2,-7
 100d924:	2085883a 	add	r2,r4,r2
 100d928:	10c00216 	blt	r2,r3,100d934 <__tzcalc_limits+0x144>
 100d92c:	10bffe44 	addi	r2,r2,-7
 100d930:	10fffe0e 	bge	r2,r3,100d92c <__tzcalc_limits+0x13c>
 100d934:	808b883a 	add	r5,r16,r2
 100d938:	90c00617 	ldw	r3,24(r18)
 100d93c:	91000817 	ldw	r4,32(r18)
 100d940:	00800074 	movhi	r2,1
 100d944:	10946004 	addi	r2,r2,20864
 100d948:	2885383a 	mul	r2,r5,r2
 100d94c:	1907883a 	add	r3,r3,r4
 100d950:	a5000044 	addi	r20,r20,1
 100d954:	10c5883a 	add	r2,r2,r3
 100d958:	90800715 	stw	r2,28(r18)
 100d95c:	00800084 	movi	r2,2
 100d960:	94800704 	addi	r18,r18,28
 100d964:	a0bfce1e 	bne	r20,r2,100d8a0 <__tzcalc_limits+0xb0>
 100d968:	98800717 	ldw	r2,28(r19)
 100d96c:	98c00e17 	ldw	r3,56(r19)
 100d970:	01000044 	movi	r4,1
 100d974:	10c4803a 	cmplt	r2,r2,r3
 100d978:	98800015 	stw	r2,0(r19)
 100d97c:	2005883a 	mov	r2,r4
 100d980:	dfc00a17 	ldw	ra,40(sp)
 100d984:	df000917 	ldw	fp,36(sp)
 100d988:	ddc00817 	ldw	r23,32(sp)
 100d98c:	dd800717 	ldw	r22,28(sp)
 100d990:	dd400617 	ldw	r21,24(sp)
 100d994:	dd000517 	ldw	r20,20(sp)
 100d998:	dcc00417 	ldw	r19,16(sp)
 100d99c:	dc800317 	ldw	r18,12(sp)
 100d9a0:	dc400217 	ldw	r17,8(sp)
 100d9a4:	dc000117 	ldw	r16,4(sp)
 100d9a8:	dec00b04 	addi	sp,sp,44
 100d9ac:	f800283a 	ret
 100d9b0:	d8800017 	ldw	r2,0(sp)
 100d9b4:	103fc11e 	bne	r2,zero,100d8bc <__tzcalc_limits+0xcc>
 100d9b8:	e03fc01e 	bne	fp,zero,100d8bc <__tzcalc_limits+0xcc>
 100d9bc:	044040b4 	movhi	r17,258
 100d9c0:	8c5e0e04 	addi	r17,r17,30776
 100d9c4:	003fbf06 	br	100d8c4 <__tzcalc_limits+0xd4>
 100d9c8:	90c00517 	ldw	r3,20(r18)
 100d9cc:	b8000b26 	beq	r23,zero,100d9fc <__tzcalc_limits+0x20c>
 100d9d0:	e0000d26 	beq	fp,zero,100da08 <__tzcalc_limits+0x218>
 100d9d4:	00800ec4 	movi	r2,59
 100d9d8:	10c8803a 	cmplt	r4,r2,r3
 100d9dc:	b0c5883a 	add	r2,r22,r3
 100d9e0:	208b883a 	add	r5,r4,r2
 100d9e4:	003fd406 	br	100d938 <__tzcalc_limits+0x148>
 100d9e8:	0009883a 	mov	r4,zero
 100d9ec:	003fe306 	br	100d97c <__tzcalc_limits+0x18c>
 100d9f0:	90800517 	ldw	r2,20(r18)
 100d9f4:	b08b883a 	add	r5,r22,r2
 100d9f8:	003fcf06 	br	100d938 <__tzcalc_limits+0x148>
 100d9fc:	d8800017 	ldw	r2,0(sp)
 100da00:	103ff41e 	bne	r2,zero,100d9d4 <__tzcalc_limits+0x1e4>
 100da04:	e03ff31e 	bne	fp,zero,100d9d4 <__tzcalc_limits+0x1e4>
 100da08:	0009883a 	mov	r4,zero
 100da0c:	003ff306 	br	100d9dc <__tzcalc_limits+0x1ec>
 100da10:	210001c4 	addi	r4,r4,7
 100da14:	003fbe06 	br	100d910 <__tzcalc_limits+0x120>
 100da18:	b021883a 	mov	r16,r22
 100da1c:	05400104 	movi	r21,4
 100da20:	003fb506 	br	100d8f8 <__tzcalc_limits+0x108>

0100da24 <_mktm_r>:
 100da24:	defff704 	addi	sp,sp,-36
 100da28:	dd400515 	stw	r21,20(sp)
 100da2c:	202b883a 	mov	r21,r4
 100da30:	dfc00815 	stw	ra,32(sp)
 100da34:	ddc00715 	stw	r23,28(sp)
 100da38:	dd000415 	stw	r20,16(sp)
 100da3c:	302f883a 	mov	r23,r6
 100da40:	dc800215 	stw	r18,8(sp)
 100da44:	dc400115 	stw	r17,4(sp)
 100da48:	dc000015 	stw	r16,0(sp)
 100da4c:	2825883a 	mov	r18,r5
 100da50:	dd800615 	stw	r22,24(sp)
 100da54:	dcc00315 	stw	r19,12(sp)
 100da58:	101526c0 	call	101526c <__gettzinfo>
 100da5c:	ac400017 	ldw	r17,0(r21)
 100da60:	01400074 	movhi	r5,1
 100da64:	29546004 	addi	r5,r5,20864
 100da68:	1029883a 	mov	r20,r2
 100da6c:	8809883a 	mov	r4,r17
 100da70:	100cd0c0 	call	100cd0c <__divsi3>
 100da74:	8809883a 	mov	r4,r17
 100da78:	01400074 	movhi	r5,1
 100da7c:	29546004 	addi	r5,r5,20864
 100da80:	1021883a 	mov	r16,r2
 100da84:	100cd6c0 	call	100cd6c <__modsi3>
 100da88:	1023883a 	mov	r17,r2
 100da8c:	1000050e 	bge	r2,zero,100daa4 <_mktm_r+0x80>
 100da90:	00800074 	movhi	r2,1
 100da94:	10946004 	addi	r2,r2,20864
 100da98:	88a3883a 	add	r17,r17,r2
 100da9c:	843fffc4 	addi	r16,r16,-1
 100daa0:	883ffd16 	blt	r17,zero,100da98 <_mktm_r+0x74>
 100daa4:	00800074 	movhi	r2,1
 100daa8:	10945fc4 	addi	r2,r2,20863
 100daac:	1440060e 	bge	r2,r17,100dac8 <_mktm_r+0xa4>
 100dab0:	1007883a 	mov	r3,r2
 100dab4:	00bffff4 	movhi	r2,65535
 100dab8:	10aba004 	addi	r2,r2,-20864
 100dabc:	88a3883a 	add	r17,r17,r2
 100dac0:	84000044 	addi	r16,r16,1
 100dac4:	1c7ffd16 	blt	r3,r17,100dabc <_mktm_r+0x98>
 100dac8:	8809883a 	mov	r4,r17
 100dacc:	01438404 	movi	r5,3600
 100dad0:	100cd0c0 	call	100cd0c <__divsi3>
 100dad4:	90800215 	stw	r2,8(r18)
 100dad8:	8809883a 	mov	r4,r17
 100dadc:	01438404 	movi	r5,3600
 100dae0:	100cd6c0 	call	100cd6c <__modsi3>
 100dae4:	1009883a 	mov	r4,r2
 100dae8:	01400f04 	movi	r5,60
 100daec:	1023883a 	mov	r17,r2
 100daf0:	100cd0c0 	call	100cd0c <__divsi3>
 100daf4:	90800115 	stw	r2,4(r18)
 100daf8:	8809883a 	mov	r4,r17
 100dafc:	01400f04 	movi	r5,60
 100db00:	100cd6c0 	call	100cd6c <__modsi3>
 100db04:	90800015 	stw	r2,0(r18)
 100db08:	81000104 	addi	r4,r16,4
 100db0c:	014001c4 	movi	r5,7
 100db10:	100cd6c0 	call	100cd6c <__modsi3>
 100db14:	90800615 	stw	r2,24(r18)
 100db18:	10003916 	blt	r2,zero,100dc00 <_mktm_r+0x1dc>
 100db1c:	80003b16 	blt	r16,zero,100dc0c <_mktm_r+0x1e8>
 100db20:	0441ec84 	movi	r17,1970
 100db24:	d4e00404 	addi	r19,gp,-32752
 100db28:	00000206 	br	100db34 <_mktm_r+0x110>
 100db2c:	80a1c83a 	sub	r16,r16,r2
 100db30:	8c400044 	addi	r17,r17,1
 100db34:	888000cc 	andi	r2,r17,3
 100db38:	8809883a 	mov	r4,r17
 100db3c:	01401904 	movi	r5,100
 100db40:	1000031e 	bne	r2,zero,100db50 <_mktm_r+0x12c>
 100db44:	100cd6c0 	call	100cd6c <__modsi3>
 100db48:	01000044 	movi	r4,1
 100db4c:	1000041e 	bne	r2,zero,100db60 <_mktm_r+0x13c>
 100db50:	8809883a 	mov	r4,r17
 100db54:	01406404 	movi	r5,400
 100db58:	100cd6c0 	call	100cd6c <__modsi3>
 100db5c:	1009003a 	cmpeq	r4,r2,zero
 100db60:	2105883a 	add	r2,r4,r4
 100db64:	1085883a 	add	r2,r2,r2
 100db68:	14c5883a 	add	r2,r2,r19
 100db6c:	10800017 	ldw	r2,0(r2)
 100db70:	80bfee0e 	bge	r16,r2,100db2c <_mktm_r+0x108>
 100db74:	21000c24 	muli	r4,r4,48
 100db78:	88be2504 	addi	r2,r17,-1900
 100db7c:	014040b4 	movhi	r5,258
 100db80:	295e0e04 	addi	r5,r5,30776
 100db84:	90800515 	stw	r2,20(r18)
 100db88:	94000715 	stw	r16,28(r18)
 100db8c:	90000415 	stw	zero,16(r18)
 100db90:	216d883a 	add	r22,r4,r5
 100db94:	b0c00017 	ldw	r3,0(r22)
 100db98:	80c00916 	blt	r16,r3,100dbc0 <_mktm_r+0x19c>
 100db9c:	28800104 	addi	r2,r5,4
 100dba0:	2085883a 	add	r2,r4,r2
 100dba4:	01000044 	movi	r4,1
 100dba8:	91000415 	stw	r4,16(r18)
 100dbac:	80e1c83a 	sub	r16,r16,r3
 100dbb0:	10c00017 	ldw	r3,0(r2)
 100dbb4:	21000044 	addi	r4,r4,1
 100dbb8:	10800104 	addi	r2,r2,4
 100dbbc:	80fffa0e 	bge	r16,r3,100dba8 <_mktm_r+0x184>
 100dbc0:	80800044 	addi	r2,r16,1
 100dbc4:	90800315 	stw	r2,12(r18)
 100dbc8:	b8002526 	beq	r23,zero,100dc60 <_mktm_r+0x23c>
 100dbcc:	90000815 	stw	zero,32(r18)
 100dbd0:	9005883a 	mov	r2,r18
 100dbd4:	dfc00817 	ldw	ra,32(sp)
 100dbd8:	ddc00717 	ldw	r23,28(sp)
 100dbdc:	dd800617 	ldw	r22,24(sp)
 100dbe0:	dd400517 	ldw	r21,20(sp)
 100dbe4:	dd000417 	ldw	r20,16(sp)
 100dbe8:	dcc00317 	ldw	r19,12(sp)
 100dbec:	dc800217 	ldw	r18,8(sp)
 100dbf0:	dc400117 	ldw	r17,4(sp)
 100dbf4:	dc000017 	ldw	r16,0(sp)
 100dbf8:	dec00904 	addi	sp,sp,36
 100dbfc:	f800283a 	ret
 100dc00:	108001c4 	addi	r2,r2,7
 100dc04:	90800615 	stw	r2,24(r18)
 100dc08:	803fc50e 	bge	r16,zero,100db20 <_mktm_r+0xfc>
 100dc0c:	0441ec84 	movi	r17,1970
 100dc10:	d4e00404 	addi	r19,gp,-32752
 100dc14:	8c7fffc4 	addi	r17,r17,-1
 100dc18:	888000cc 	andi	r2,r17,3
 100dc1c:	8809883a 	mov	r4,r17
 100dc20:	01401904 	movi	r5,100
 100dc24:	1000031e 	bne	r2,zero,100dc34 <_mktm_r+0x210>
 100dc28:	100cd6c0 	call	100cd6c <__modsi3>
 100dc2c:	01000044 	movi	r4,1
 100dc30:	1000041e 	bne	r2,zero,100dc44 <_mktm_r+0x220>
 100dc34:	8809883a 	mov	r4,r17
 100dc38:	01406404 	movi	r5,400
 100dc3c:	100cd6c0 	call	100cd6c <__modsi3>
 100dc40:	1009003a 	cmpeq	r4,r2,zero
 100dc44:	2105883a 	add	r2,r4,r4
 100dc48:	1085883a 	add	r2,r2,r2
 100dc4c:	14c5883a 	add	r2,r2,r19
 100dc50:	10c00017 	ldw	r3,0(r2)
 100dc54:	80e1883a 	add	r16,r16,r3
 100dc58:	803fee16 	blt	r16,zero,100dc14 <_mktm_r+0x1f0>
 100dc5c:	003fc506 	br	100db74 <_mktm_r+0x150>
 100dc60:	100ff600 	call	100ff60 <__tz_lock>
 100dc64:	008040f4 	movhi	r2,259
 100dc68:	10ad7404 	addi	r2,r2,-18992
 100dc6c:	10c00017 	ldw	r3,0(r2)
 100dc70:	18000a26 	beq	r3,zero,100dc9c <_mktm_r+0x278>
 100dc74:	a0800117 	ldw	r2,4(r20)
 100dc78:	88800326 	beq	r17,r2,100dc88 <_mktm_r+0x264>
 100dc7c:	8809883a 	mov	r4,r17
 100dc80:	100d7f00 	call	100d7f0 <__tzcalc_limits>
 100dc84:	10007426 	beq	r2,zero,100de58 <_mktm_r+0x434>
 100dc88:	a0800017 	ldw	r2,0(r20)
 100dc8c:	10006b26 	beq	r2,zero,100de3c <_mktm_r+0x418>
 100dc90:	a9000017 	ldw	r4,0(r21)
 100dc94:	a0800717 	ldw	r2,28(r20)
 100dc98:	2080750e 	bge	r4,r2,100de70 <_mktm_r+0x44c>
 100dc9c:	90000815 	stw	zero,32(r18)
 100dca0:	a4c00817 	ldw	r19,32(r20)
 100dca4:	01438404 	movi	r5,3600
 100dca8:	9809883a 	mov	r4,r19
 100dcac:	100cd6c0 	call	100cd6c <__modsi3>
 100dcb0:	1009883a 	mov	r4,r2
 100dcb4:	01400f04 	movi	r5,60
 100dcb8:	1023883a 	mov	r17,r2
 100dcbc:	100cd6c0 	call	100cd6c <__modsi3>
 100dcc0:	90c00017 	ldw	r3,0(r18)
 100dcc4:	8809883a 	mov	r4,r17
 100dcc8:	01400f04 	movi	r5,60
 100dccc:	1887c83a 	sub	r3,r3,r2
 100dcd0:	90c00015 	stw	r3,0(r18)
 100dcd4:	100cd0c0 	call	100cd0c <__divsi3>
 100dcd8:	94000117 	ldw	r16,4(r18)
 100dcdc:	9809883a 	mov	r4,r19
 100dce0:	01438404 	movi	r5,3600
 100dce4:	80a1c83a 	sub	r16,r16,r2
 100dce8:	94000115 	stw	r16,4(r18)
 100dcec:	100cd0c0 	call	100cd0c <__divsi3>
 100dcf0:	91000217 	ldw	r4,8(r18)
 100dcf4:	90c00017 	ldw	r3,0(r18)
 100dcf8:	2089c83a 	sub	r4,r4,r2
 100dcfc:	00800ec4 	movi	r2,59
 100dd00:	91000215 	stw	r4,8(r18)
 100dd04:	10c0280e 	bge	r2,r3,100dda8 <_mktm_r+0x384>
 100dd08:	84000044 	addi	r16,r16,1
 100dd0c:	18bff104 	addi	r2,r3,-60
 100dd10:	90800015 	stw	r2,0(r18)
 100dd14:	94000115 	stw	r16,4(r18)
 100dd18:	00800ec4 	movi	r2,59
 100dd1c:	1400410e 	bge	r2,r16,100de24 <_mktm_r+0x400>
 100dd20:	21000044 	addi	r4,r4,1
 100dd24:	843ff104 	addi	r16,r16,-60
 100dd28:	94000115 	stw	r16,4(r18)
 100dd2c:	91000215 	stw	r4,8(r18)
 100dd30:	008005c4 	movi	r2,23
 100dd34:	1100220e 	bge	r2,r4,100ddc0 <_mktm_r+0x39c>
 100dd38:	90800717 	ldw	r2,28(r18)
 100dd3c:	90c00617 	ldw	r3,24(r18)
 100dd40:	10800044 	addi	r2,r2,1
 100dd44:	18c00044 	addi	r3,r3,1
 100dd48:	90800715 	stw	r2,28(r18)
 100dd4c:	00800184 	movi	r2,6
 100dd50:	90c00615 	stw	r3,24(r18)
 100dd54:	10c0010e 	bge	r2,r3,100dd5c <_mktm_r+0x338>
 100dd58:	90000615 	stw	zero,24(r18)
 100dd5c:	91400417 	ldw	r5,16(r18)
 100dd60:	90c00317 	ldw	r3,12(r18)
 100dd64:	213ffa04 	addi	r4,r4,-24
 100dd68:	2945883a 	add	r2,r5,r5
 100dd6c:	18c00044 	addi	r3,r3,1
 100dd70:	1085883a 	add	r2,r2,r2
 100dd74:	91000215 	stw	r4,8(r18)
 100dd78:	1585883a 	add	r2,r2,r22
 100dd7c:	90c00315 	stw	r3,12(r18)
 100dd80:	10800017 	ldw	r2,0(r2)
 100dd84:	10c0060e 	bge	r2,r3,100dda0 <_mktm_r+0x37c>
 100dd88:	1885c83a 	sub	r2,r3,r2
 100dd8c:	29400044 	addi	r5,r5,1
 100dd90:	90800315 	stw	r2,12(r18)
 100dd94:	00800304 	movi	r2,12
 100dd98:	91400415 	stw	r5,16(r18)
 100dd9c:	28803c26 	beq	r5,r2,100de90 <_mktm_r+0x46c>
 100dda0:	100ff640 	call	100ff64 <__tz_unlock>
 100dda4:	003f8a06 	br	100dbd0 <_mktm_r+0x1ac>
 100dda8:	183fdb0e 	bge	r3,zero,100dd18 <_mktm_r+0x2f4>
 100ddac:	843fffc4 	addi	r16,r16,-1
 100ddb0:	18800f04 	addi	r2,r3,60
 100ddb4:	90800015 	stw	r2,0(r18)
 100ddb8:	94000115 	stw	r16,4(r18)
 100ddbc:	003fd606 	br	100dd18 <_mktm_r+0x2f4>
 100ddc0:	203ff70e 	bge	r4,zero,100dda0 <_mktm_r+0x37c>
 100ddc4:	90800717 	ldw	r2,28(r18)
 100ddc8:	90c00617 	ldw	r3,24(r18)
 100ddcc:	10bfffc4 	addi	r2,r2,-1
 100ddd0:	18ffffc4 	addi	r3,r3,-1
 100ddd4:	90800715 	stw	r2,28(r18)
 100ddd8:	90c00615 	stw	r3,24(r18)
 100dddc:	18003316 	blt	r3,zero,100deac <_mktm_r+0x488>
 100dde0:	90800317 	ldw	r2,12(r18)
 100dde4:	20c00604 	addi	r3,r4,24
 100dde8:	90c00215 	stw	r3,8(r18)
 100ddec:	10bfffc4 	addi	r2,r2,-1
 100ddf0:	90800315 	stw	r2,12(r18)
 100ddf4:	103fea1e 	bne	r2,zero,100dda0 <_mktm_r+0x37c>
 100ddf8:	91400417 	ldw	r5,16(r18)
 100ddfc:	297fffc4 	addi	r5,r5,-1
 100de00:	91400415 	stw	r5,16(r18)
 100de04:	28002c16 	blt	r5,zero,100deb8 <_mktm_r+0x494>
 100de08:	2945883a 	add	r2,r5,r5
 100de0c:	1085883a 	add	r2,r2,r2
 100de10:	1585883a 	add	r2,r2,r22
 100de14:	10c00017 	ldw	r3,0(r2)
 100de18:	90c00315 	stw	r3,12(r18)
 100de1c:	100ff640 	call	100ff64 <__tz_unlock>
 100de20:	003f6b06 	br	100dbd0 <_mktm_r+0x1ac>
 100de24:	803fc20e 	bge	r16,zero,100dd30 <_mktm_r+0x30c>
 100de28:	213fffc4 	addi	r4,r4,-1
 100de2c:	80800f04 	addi	r2,r16,60
 100de30:	90800115 	stw	r2,4(r18)
 100de34:	91000215 	stw	r4,8(r18)
 100de38:	003fbd06 	br	100dd30 <_mktm_r+0x30c>
 100de3c:	a9000017 	ldw	r4,0(r21)
 100de40:	a0800717 	ldw	r2,28(r20)
 100de44:	20800716 	blt	r4,r2,100de64 <_mktm_r+0x440>
 100de48:	a4c00f17 	ldw	r19,60(r20)
 100de4c:	00800044 	movi	r2,1
 100de50:	90800815 	stw	r2,32(r18)
 100de54:	003f9306 	br	100dca4 <_mktm_r+0x280>
 100de58:	00bfffc4 	movi	r2,-1
 100de5c:	90800815 	stw	r2,32(r18)
 100de60:	003f8f06 	br	100dca0 <_mktm_r+0x27c>
 100de64:	a0800e17 	ldw	r2,56(r20)
 100de68:	20bff716 	blt	r4,r2,100de48 <_mktm_r+0x424>
 100de6c:	003f8b06 	br	100dc9c <_mktm_r+0x278>
 100de70:	a0800e17 	ldw	r2,56(r20)
 100de74:	2084403a 	cmpge	r2,r4,r2
 100de78:	1007003a 	cmpeq	r3,r2,zero
 100de7c:	1080005c 	xori	r2,r2,1
 100de80:	90800815 	stw	r2,32(r18)
 100de84:	183f8626 	beq	r3,zero,100dca0 <_mktm_r+0x27c>
 100de88:	a4c00f17 	ldw	r19,60(r20)
 100de8c:	003f8506 	br	100dca4 <_mktm_r+0x280>
 100de90:	90800517 	ldw	r2,20(r18)
 100de94:	90000415 	stw	zero,16(r18)
 100de98:	90000715 	stw	zero,28(r18)
 100de9c:	10800044 	addi	r2,r2,1
 100dea0:	90800515 	stw	r2,20(r18)
 100dea4:	100ff640 	call	100ff64 <__tz_unlock>
 100dea8:	003f4906 	br	100dbd0 <_mktm_r+0x1ac>
 100deac:	00800184 	movi	r2,6
 100deb0:	90800615 	stw	r2,24(r18)
 100deb4:	003fca06 	br	100dde0 <_mktm_r+0x3bc>
 100deb8:	90c00517 	ldw	r3,20(r18)
 100debc:	014002c4 	movi	r5,11
 100dec0:	91400415 	stw	r5,16(r18)
 100dec4:	1c3fffc4 	addi	r16,r3,-1
 100dec8:	808000cc 	andi	r2,r16,3
 100decc:	94000515 	stw	r16,20(r18)
 100ded0:	1000041e 	bne	r2,zero,100dee4 <_mktm_r+0x4c0>
 100ded4:	8009883a 	mov	r4,r16
 100ded8:	01401904 	movi	r5,100
 100dedc:	100cd6c0 	call	100cd6c <__modsi3>
 100dee0:	1000081e 	bne	r2,zero,100df04 <_mktm_r+0x4e0>
 100dee4:	8009883a 	mov	r4,r16
 100dee8:	01406404 	movi	r5,400
 100deec:	100cd6c0 	call	100cd6c <__modsi3>
 100def0:	10000426 	beq	r2,zero,100df04 <_mktm_r+0x4e0>
 100def4:	00805b44 	movi	r2,365
 100def8:	91400417 	ldw	r5,16(r18)
 100defc:	90800715 	stw	r2,28(r18)
 100df00:	003fc106 	br	100de08 <_mktm_r+0x3e4>
 100df04:	00805b84 	movi	r2,366
 100df08:	003ffb06 	br	100def8 <_mktm_r+0x4d4>

0100df0c <printf>:
 100df0c:	defffb04 	addi	sp,sp,-20
 100df10:	dfc00115 	stw	ra,4(sp)
 100df14:	d9400215 	stw	r5,8(sp)
 100df18:	d9800315 	stw	r6,12(sp)
 100df1c:	d9c00415 	stw	r7,16(sp)
 100df20:	008040f4 	movhi	r2,259
 100df24:	10a67004 	addi	r2,r2,-26176
 100df28:	10c00017 	ldw	r3,0(r2)
 100df2c:	200b883a 	mov	r5,r4
 100df30:	d8800204 	addi	r2,sp,8
 100df34:	19000217 	ldw	r4,8(r3)
 100df38:	100d883a 	mov	r6,r2
 100df3c:	d8800015 	stw	r2,0(sp)
 100df40:	1011e6c0 	call	1011e6c <__vfprintf_internal>
 100df44:	dfc00117 	ldw	ra,4(sp)
 100df48:	dec00504 	addi	sp,sp,20
 100df4c:	f800283a 	ret

0100df50 <_printf_r>:
 100df50:	defffc04 	addi	sp,sp,-16
 100df54:	dfc00115 	stw	ra,4(sp)
 100df58:	d9800215 	stw	r6,8(sp)
 100df5c:	d9c00315 	stw	r7,12(sp)
 100df60:	280d883a 	mov	r6,r5
 100df64:	21400217 	ldw	r5,8(r4)
 100df68:	d8c00204 	addi	r3,sp,8
 100df6c:	180f883a 	mov	r7,r3
 100df70:	d8c00015 	stw	r3,0(sp)
 100df74:	100ffc00 	call	100ffc0 <___vfprintf_internal_r>
 100df78:	dfc00117 	ldw	ra,4(sp)
 100df7c:	dec00404 	addi	sp,sp,16
 100df80:	f800283a 	ret

0100df84 <putchar>:
 100df84:	008040f4 	movhi	r2,259
 100df88:	10a67004 	addi	r2,r2,-26176
 100df8c:	11800017 	ldw	r6,0(r2)
 100df90:	200b883a 	mov	r5,r4
 100df94:	3009883a 	mov	r4,r6
 100df98:	31800217 	ldw	r6,8(r6)
 100df9c:	1016f641 	jmpi	1016f64 <_putc_r>

0100dfa0 <_putchar_r>:
 100dfa0:	21800217 	ldw	r6,8(r4)
 100dfa4:	1016f641 	jmpi	1016f64 <_putc_r>

0100dfa8 <_puts_r>:
 100dfa8:	defff604 	addi	sp,sp,-40
 100dfac:	dc400715 	stw	r17,28(sp)
 100dfb0:	2023883a 	mov	r17,r4
 100dfb4:	2809883a 	mov	r4,r5
 100dfb8:	dfc00915 	stw	ra,36(sp)
 100dfbc:	dcc00815 	stw	r19,32(sp)
 100dfc0:	2827883a 	mov	r19,r5
 100dfc4:	100e3080 	call	100e308 <strlen>
 100dfc8:	89400217 	ldw	r5,8(r17)
 100dfcc:	00c040b4 	movhi	r3,258
 100dfd0:	18de2604 	addi	r3,r3,30872
 100dfd4:	01c00044 	movi	r7,1
 100dfd8:	12000044 	addi	r8,r2,1
 100dfdc:	d8c00515 	stw	r3,20(sp)
 100dfe0:	d9c00615 	stw	r7,24(sp)
 100dfe4:	d8c00304 	addi	r3,sp,12
 100dfe8:	01c00084 	movi	r7,2
 100dfec:	8809883a 	mov	r4,r17
 100dff0:	d80d883a 	mov	r6,sp
 100dff4:	d8c00015 	stw	r3,0(sp)
 100dff8:	dcc00315 	stw	r19,12(sp)
 100dffc:	da000215 	stw	r8,8(sp)
 100e000:	d9c00115 	stw	r7,4(sp)
 100e004:	d8800415 	stw	r2,16(sp)
 100e008:	10140c80 	call	10140c8 <__sfvwrite_r>
 100e00c:	00ffffc4 	movi	r3,-1
 100e010:	10000626 	beq	r2,zero,100e02c <_puts_r+0x84>
 100e014:	1805883a 	mov	r2,r3
 100e018:	dfc00917 	ldw	ra,36(sp)
 100e01c:	dcc00817 	ldw	r19,32(sp)
 100e020:	dc400717 	ldw	r17,28(sp)
 100e024:	dec00a04 	addi	sp,sp,40
 100e028:	f800283a 	ret
 100e02c:	00c00284 	movi	r3,10
 100e030:	1805883a 	mov	r2,r3
 100e034:	dfc00917 	ldw	ra,36(sp)
 100e038:	dcc00817 	ldw	r19,32(sp)
 100e03c:	dc400717 	ldw	r17,28(sp)
 100e040:	dec00a04 	addi	sp,sp,40
 100e044:	f800283a 	ret

0100e048 <puts>:
 100e048:	008040f4 	movhi	r2,259
 100e04c:	10a67004 	addi	r2,r2,-26176
 100e050:	200b883a 	mov	r5,r4
 100e054:	11000017 	ldw	r4,0(r2)
 100e058:	100dfa81 	jmpi	100dfa8 <_puts_r>

0100e05c <sprintf>:
 100e05c:	deffe504 	addi	sp,sp,-108
 100e060:	2013883a 	mov	r9,r4
 100e064:	dfc01815 	stw	ra,96(sp)
 100e068:	d9801915 	stw	r6,100(sp)
 100e06c:	d9c01a15 	stw	r7,104(sp)
 100e070:	d8801904 	addi	r2,sp,100
 100e074:	d8800015 	stw	r2,0(sp)
 100e078:	008040f4 	movhi	r2,259
 100e07c:	10a67004 	addi	r2,r2,-26176
 100e080:	11000017 	ldw	r4,0(r2)
 100e084:	d9c00017 	ldw	r7,0(sp)
 100e088:	00808204 	movi	r2,520
 100e08c:	00e00034 	movhi	r3,32768
 100e090:	18ffffc4 	addi	r3,r3,-1
 100e094:	280d883a 	mov	r6,r5
 100e098:	d880040d 	sth	r2,16(sp)
 100e09c:	d9400104 	addi	r5,sp,4
 100e0a0:	00bfffc4 	movi	r2,-1
 100e0a4:	d8c00615 	stw	r3,24(sp)
 100e0a8:	d8c00315 	stw	r3,12(sp)
 100e0ac:	da400515 	stw	r9,20(sp)
 100e0b0:	d880048d 	sth	r2,18(sp)
 100e0b4:	da400115 	stw	r9,4(sp)
 100e0b8:	100ffc00 	call	100ffc0 <___vfprintf_internal_r>
 100e0bc:	d8c00117 	ldw	r3,4(sp)
 100e0c0:	18000005 	stb	zero,0(r3)
 100e0c4:	dfc01817 	ldw	ra,96(sp)
 100e0c8:	dec01b04 	addi	sp,sp,108
 100e0cc:	f800283a 	ret

0100e0d0 <_sprintf_r>:
 100e0d0:	deffe604 	addi	sp,sp,-104
 100e0d4:	2813883a 	mov	r9,r5
 100e0d8:	dfc01815 	stw	ra,96(sp)
 100e0dc:	d9c01915 	stw	r7,100(sp)
 100e0e0:	d8801904 	addi	r2,sp,100
 100e0e4:	d8800015 	stw	r2,0(sp)
 100e0e8:	100f883a 	mov	r7,r2
 100e0ec:	00808204 	movi	r2,520
 100e0f0:	00e00034 	movhi	r3,32768
 100e0f4:	18ffffc4 	addi	r3,r3,-1
 100e0f8:	d880040d 	sth	r2,16(sp)
 100e0fc:	d9400104 	addi	r5,sp,4
 100e100:	00bfffc4 	movi	r2,-1
 100e104:	d8c00615 	stw	r3,24(sp)
 100e108:	d8c00315 	stw	r3,12(sp)
 100e10c:	da400515 	stw	r9,20(sp)
 100e110:	d880048d 	sth	r2,18(sp)
 100e114:	da400115 	stw	r9,4(sp)
 100e118:	100ffc00 	call	100ffc0 <___vfprintf_internal_r>
 100e11c:	d8c00117 	ldw	r3,4(sp)
 100e120:	18000005 	stb	zero,0(r3)
 100e124:	dfc01817 	ldw	ra,96(sp)
 100e128:	dec01a04 	addi	sp,sp,104
 100e12c:	f800283a 	ret

0100e130 <strcat>:
 100e130:	defffe04 	addi	sp,sp,-8
 100e134:	208000cc 	andi	r2,r4,3
 100e138:	dc000015 	stw	r16,0(sp)
 100e13c:	dfc00115 	stw	ra,4(sp)
 100e140:	2021883a 	mov	r16,r4
 100e144:	1000161e 	bne	r2,zero,100e1a0 <strcat+0x70>
 100e148:	20c00017 	ldw	r3,0(r4)
 100e14c:	01bfbff4 	movhi	r6,65279
 100e150:	31bfbfc4 	addi	r6,r6,-257
 100e154:	02202074 	movhi	r8,32897
 100e158:	42202004 	addi	r8,r8,-32640
 100e15c:	1985883a 	add	r2,r3,r6
 100e160:	1204703a 	and	r2,r2,r8
 100e164:	00c6303a 	nor	r3,zero,r3
 100e168:	1886703a 	and	r3,r3,r2
 100e16c:	18000c1e 	bne	r3,zero,100e1a0 <strcat+0x70>
 100e170:	300f883a 	mov	r7,r6
 100e174:	400d883a 	mov	r6,r8
 100e178:	21000104 	addi	r4,r4,4
 100e17c:	20800017 	ldw	r2,0(r4)
 100e180:	11c7883a 	add	r3,r2,r7
 100e184:	1986703a 	and	r3,r3,r6
 100e188:	0084303a 	nor	r2,zero,r2
 100e18c:	10c4703a 	and	r2,r2,r3
 100e190:	103ff926 	beq	r2,zero,100e178 <strcat+0x48>
 100e194:	20800007 	ldb	r2,0(r4)
 100e198:	10000326 	beq	r2,zero,100e1a8 <strcat+0x78>
 100e19c:	21000044 	addi	r4,r4,1
 100e1a0:	20800007 	ldb	r2,0(r4)
 100e1a4:	103ffd1e 	bne	r2,zero,100e19c <strcat+0x6c>
 100e1a8:	100e27c0 	call	100e27c <strcpy>
 100e1ac:	8005883a 	mov	r2,r16
 100e1b0:	dfc00117 	ldw	ra,4(sp)
 100e1b4:	dc000017 	ldw	r16,0(sp)
 100e1b8:	dec00204 	addi	sp,sp,8
 100e1bc:	f800283a 	ret

0100e1c0 <strcmp>:
 100e1c0:	2144b03a 	or	r2,r4,r5
 100e1c4:	108000cc 	andi	r2,r2,3
 100e1c8:	10001d1e 	bne	r2,zero,100e240 <strcmp+0x80>
 100e1cc:	200f883a 	mov	r7,r4
 100e1d0:	28800017 	ldw	r2,0(r5)
 100e1d4:	21000017 	ldw	r4,0(r4)
 100e1d8:	280d883a 	mov	r6,r5
 100e1dc:	2080161e 	bne	r4,r2,100e238 <strcmp+0x78>
 100e1e0:	023fbff4 	movhi	r8,65279
 100e1e4:	423fbfc4 	addi	r8,r8,-257
 100e1e8:	2207883a 	add	r3,r4,r8
 100e1ec:	01602074 	movhi	r5,32897
 100e1f0:	29602004 	addi	r5,r5,-32640
 100e1f4:	1946703a 	and	r3,r3,r5
 100e1f8:	0104303a 	nor	r2,zero,r4
 100e1fc:	10c4703a 	and	r2,r2,r3
 100e200:	10001c1e 	bne	r2,zero,100e274 <strcmp+0xb4>
 100e204:	4013883a 	mov	r9,r8
 100e208:	2811883a 	mov	r8,r5
 100e20c:	00000106 	br	100e214 <strcmp+0x54>
 100e210:	1800181e 	bne	r3,zero,100e274 <strcmp+0xb4>
 100e214:	39c00104 	addi	r7,r7,4
 100e218:	39000017 	ldw	r4,0(r7)
 100e21c:	31800104 	addi	r6,r6,4
 100e220:	31400017 	ldw	r5,0(r6)
 100e224:	2245883a 	add	r2,r4,r9
 100e228:	1204703a 	and	r2,r2,r8
 100e22c:	0106303a 	nor	r3,zero,r4
 100e230:	1886703a 	and	r3,r3,r2
 100e234:	217ff626 	beq	r4,r5,100e210 <strcmp+0x50>
 100e238:	3809883a 	mov	r4,r7
 100e23c:	300b883a 	mov	r5,r6
 100e240:	20c00007 	ldb	r3,0(r4)
 100e244:	1800051e 	bne	r3,zero,100e25c <strcmp+0x9c>
 100e248:	00000606 	br	100e264 <strcmp+0xa4>
 100e24c:	21000044 	addi	r4,r4,1
 100e250:	20c00007 	ldb	r3,0(r4)
 100e254:	29400044 	addi	r5,r5,1
 100e258:	18000226 	beq	r3,zero,100e264 <strcmp+0xa4>
 100e25c:	28800007 	ldb	r2,0(r5)
 100e260:	18bffa26 	beq	r3,r2,100e24c <strcmp+0x8c>
 100e264:	20c00003 	ldbu	r3,0(r4)
 100e268:	28800003 	ldbu	r2,0(r5)
 100e26c:	1885c83a 	sub	r2,r3,r2
 100e270:	f800283a 	ret
 100e274:	0005883a 	mov	r2,zero
 100e278:	f800283a 	ret

0100e27c <strcpy>:
 100e27c:	2904b03a 	or	r2,r5,r4
 100e280:	108000cc 	andi	r2,r2,3
 100e284:	10000826 	beq	r2,zero,100e2a8 <strcpy+0x2c>
 100e288:	2007883a 	mov	r3,r4
 100e28c:	28800003 	ldbu	r2,0(r5)
 100e290:	29400044 	addi	r5,r5,1
 100e294:	18800005 	stb	r2,0(r3)
 100e298:	18c00044 	addi	r3,r3,1
 100e29c:	103ffb1e 	bne	r2,zero,100e28c <strcpy+0x10>
 100e2a0:	2005883a 	mov	r2,r4
 100e2a4:	f800283a 	ret
 100e2a8:	29800017 	ldw	r6,0(r5)
 100e2ac:	023fbff4 	movhi	r8,65279
 100e2b0:	423fbfc4 	addi	r8,r8,-257
 100e2b4:	02a02074 	movhi	r10,32897
 100e2b8:	52a02004 	addi	r10,r10,-32640
 100e2bc:	3205883a 	add	r2,r6,r8
 100e2c0:	0186303a 	nor	r3,zero,r6
 100e2c4:	10c4703a 	and	r2,r2,r3
 100e2c8:	1284703a 	and	r2,r2,r10
 100e2cc:	200f883a 	mov	r7,r4
 100e2d0:	10000b1e 	bne	r2,zero,100e300 <strcpy+0x84>
 100e2d4:	4013883a 	mov	r9,r8
 100e2d8:	5011883a 	mov	r8,r10
 100e2dc:	39800015 	stw	r6,0(r7)
 100e2e0:	29400104 	addi	r5,r5,4
 100e2e4:	29800017 	ldw	r6,0(r5)
 100e2e8:	39c00104 	addi	r7,r7,4
 100e2ec:	3245883a 	add	r2,r6,r9
 100e2f0:	0186303a 	nor	r3,zero,r6
 100e2f4:	10c4703a 	and	r2,r2,r3
 100e2f8:	1204703a 	and	r2,r2,r8
 100e2fc:	103ff726 	beq	r2,zero,100e2dc <strcpy+0x60>
 100e300:	3807883a 	mov	r3,r7
 100e304:	003fe106 	br	100e28c <strcpy+0x10>

0100e308 <strlen>:
 100e308:	208000cc 	andi	r2,r4,3
 100e30c:	2011883a 	mov	r8,r4
 100e310:	1000161e 	bne	r2,zero,100e36c <strlen+0x64>
 100e314:	20c00017 	ldw	r3,0(r4)
 100e318:	017fbff4 	movhi	r5,65279
 100e31c:	297fbfc4 	addi	r5,r5,-257
 100e320:	01e02074 	movhi	r7,32897
 100e324:	39e02004 	addi	r7,r7,-32640
 100e328:	1945883a 	add	r2,r3,r5
 100e32c:	11c4703a 	and	r2,r2,r7
 100e330:	00c6303a 	nor	r3,zero,r3
 100e334:	1886703a 	and	r3,r3,r2
 100e338:	18000c1e 	bne	r3,zero,100e36c <strlen+0x64>
 100e33c:	280d883a 	mov	r6,r5
 100e340:	380b883a 	mov	r5,r7
 100e344:	21000104 	addi	r4,r4,4
 100e348:	20800017 	ldw	r2,0(r4)
 100e34c:	1187883a 	add	r3,r2,r6
 100e350:	1946703a 	and	r3,r3,r5
 100e354:	0084303a 	nor	r2,zero,r2
 100e358:	10c4703a 	and	r2,r2,r3
 100e35c:	103ff926 	beq	r2,zero,100e344 <strlen+0x3c>
 100e360:	20800007 	ldb	r2,0(r4)
 100e364:	10000326 	beq	r2,zero,100e374 <strlen+0x6c>
 100e368:	21000044 	addi	r4,r4,1
 100e36c:	20800007 	ldb	r2,0(r4)
 100e370:	103ffd1e 	bne	r2,zero,100e368 <strlen+0x60>
 100e374:	2205c83a 	sub	r2,r4,r8
 100e378:	f800283a 	ret

0100e37c <strncpy>:
 100e37c:	2904b03a 	or	r2,r5,r4
 100e380:	108000cc 	andi	r2,r2,3
 100e384:	00c000c4 	movi	r3,3
 100e388:	1000291e 	bne	r2,zero,100e430 <strncpy+0xb4>
 100e38c:	1980282e 	bgeu	r3,r6,100e430 <strncpy+0xb4>
 100e390:	1817883a 	mov	r11,r3
 100e394:	2011883a 	mov	r8,r4
 100e398:	02bfbff4 	movhi	r10,65279
 100e39c:	52bfbfc4 	addi	r10,r10,-257
 100e3a0:	02602074 	movhi	r9,32897
 100e3a4:	4a602004 	addi	r9,r9,-32640
 100e3a8:	29c00017 	ldw	r7,0(r5)
 100e3ac:	3a85883a 	add	r2,r7,r10
 100e3b0:	01c6303a 	nor	r3,zero,r7
 100e3b4:	10c4703a 	and	r2,r2,r3
 100e3b8:	1244703a 	and	r2,r2,r9
 100e3bc:	1000051e 	bne	r2,zero,100e3d4 <strncpy+0x58>
 100e3c0:	31bfff04 	addi	r6,r6,-4
 100e3c4:	41c00015 	stw	r7,0(r8)
 100e3c8:	29400104 	addi	r5,r5,4
 100e3cc:	42000104 	addi	r8,r8,4
 100e3d0:	59bff536 	bltu	r11,r6,100e3a8 <strncpy+0x2c>
 100e3d4:	400f883a 	mov	r7,r8
 100e3d8:	30001326 	beq	r6,zero,100e428 <strncpy+0xac>
 100e3dc:	28800003 	ldbu	r2,0(r5)
 100e3e0:	31bfffc4 	addi	r6,r6,-1
 100e3e4:	38c00044 	addi	r3,r7,1
 100e3e8:	38800005 	stb	r2,0(r7)
 100e3ec:	10000826 	beq	r2,zero,100e410 <strncpy+0x94>
 100e3f0:	29400044 	addi	r5,r5,1
 100e3f4:	30000c26 	beq	r6,zero,100e428 <strncpy+0xac>
 100e3f8:	28800003 	ldbu	r2,0(r5)
 100e3fc:	31bfffc4 	addi	r6,r6,-1
 100e400:	29400044 	addi	r5,r5,1
 100e404:	18800005 	stb	r2,0(r3)
 100e408:	18c00044 	addi	r3,r3,1
 100e40c:	103ff91e 	bne	r2,zero,100e3f4 <strncpy+0x78>
 100e410:	30000526 	beq	r6,zero,100e428 <strncpy+0xac>
 100e414:	1805883a 	mov	r2,r3
 100e418:	30cd883a 	add	r6,r6,r3
 100e41c:	10000005 	stb	zero,0(r2)
 100e420:	10800044 	addi	r2,r2,1
 100e424:	30bffd1e 	bne	r6,r2,100e41c <strncpy+0xa0>
 100e428:	2005883a 	mov	r2,r4
 100e42c:	f800283a 	ret
 100e430:	200f883a 	mov	r7,r4
 100e434:	003fe806 	br	100e3d8 <strncpy+0x5c>

0100e438 <match>:
 100e438:	21800017 	ldw	r6,0(r4)
 100e43c:	01c01004 	movi	r7,64
 100e440:	02001684 	movi	r8,90
 100e444:	28800007 	ldb	r2,0(r5)
 100e448:	29400044 	addi	r5,r5,1
 100e44c:	10000826 	beq	r2,zero,100e470 <match+0x38>
 100e450:	31800044 	addi	r6,r6,1
 100e454:	30c00007 	ldb	r3,0(r6)
 100e458:	38c0020e 	bge	r7,r3,100e464 <match+0x2c>
 100e45c:	40c00116 	blt	r8,r3,100e464 <match+0x2c>
 100e460:	18c00804 	addi	r3,r3,32
 100e464:	18bff726 	beq	r3,r2,100e444 <match+0xc>
 100e468:	0005883a 	mov	r2,zero
 100e46c:	f800283a 	ret
 100e470:	30800044 	addi	r2,r6,1
 100e474:	20800015 	stw	r2,0(r4)
 100e478:	00800044 	movi	r2,1
 100e47c:	f800283a 	ret

0100e480 <_strtod_r>:
 100e480:	deffde04 	addi	sp,sp,-136
 100e484:	df002015 	stw	fp,128(sp)
 100e488:	dd401d15 	stw	r21,116(sp)
 100e48c:	dc401915 	stw	r17,100(sp)
 100e490:	dfc02115 	stw	ra,132(sp)
 100e494:	ddc01f15 	stw	r23,124(sp)
 100e498:	dd801e15 	stw	r22,120(sp)
 100e49c:	dd001c15 	stw	r20,112(sp)
 100e4a0:	dcc01b15 	stw	r19,108(sp)
 100e4a4:	dc801a15 	stw	r18,104(sp)
 100e4a8:	dc001815 	stw	r16,96(sp)
 100e4ac:	2823883a 	mov	r17,r5
 100e4b0:	202b883a 	mov	r21,r4
 100e4b4:	d9801515 	stw	r6,84(sp)
 100e4b8:	d8000915 	stw	zero,36(sp)
 100e4bc:	d8000a15 	stw	zero,40(sp)
 100e4c0:	d9400415 	stw	r5,16(sp)
 100e4c4:	df000904 	addi	fp,sp,36
 100e4c8:	da000417 	ldw	r8,16(sp)
 100e4cc:	00800b44 	movi	r2,45
 100e4d0:	40c00003 	ldbu	r3,0(r8)
 100e4d4:	10c03536 	bltu	r2,r3,100e5ac <_strtod_r+0x12c>
 100e4d8:	18c5883a 	add	r2,r3,r3
 100e4dc:	1085883a 	add	r2,r2,r2
 100e4e0:	00c04074 	movhi	r3,257
 100e4e4:	18f93d04 	addi	r3,r3,-6924
 100e4e8:	10c5883a 	add	r2,r2,r3
 100e4ec:	11000017 	ldw	r4,0(r2)
 100e4f0:	2000683a 	jmp	r4
 100e4f4:	0100e6e8 	cmpgeui	r4,zero,923
 100e4f8:	0100e5ac 	andhi	r4,zero,918
 100e4fc:	0100e5ac 	andhi	r4,zero,918
 100e500:	0100e5ac 	andhi	r4,zero,918
 100e504:	0100e5ac 	andhi	r4,zero,918
 100e508:	0100e5ac 	andhi	r4,zero,918
 100e50c:	0100e5ac 	andhi	r4,zero,918
 100e510:	0100e5ac 	andhi	r4,zero,918
 100e514:	0100e5ac 	andhi	r4,zero,918
 100e518:	0100ea00 	call	100ea0 <__alt_mem_onchip_memory2_0+0x100ea0>
 100e51c:	0100ea00 	call	100ea0 <__alt_mem_onchip_memory2_0+0x100ea0>
 100e520:	0100ea00 	call	100ea0 <__alt_mem_onchip_memory2_0+0x100ea0>
 100e524:	0100ea00 	call	100ea0 <__alt_mem_onchip_memory2_0+0x100ea0>
 100e528:	0100ea00 	call	100ea0 <__alt_mem_onchip_memory2_0+0x100ea0>
 100e52c:	0100e5ac 	andhi	r4,zero,918
 100e530:	0100e5ac 	andhi	r4,zero,918
 100e534:	0100e5ac 	andhi	r4,zero,918
 100e538:	0100e5ac 	andhi	r4,zero,918
 100e53c:	0100e5ac 	andhi	r4,zero,918
 100e540:	0100e5ac 	andhi	r4,zero,918
 100e544:	0100e5ac 	andhi	r4,zero,918
 100e548:	0100e5ac 	andhi	r4,zero,918
 100e54c:	0100e5ac 	andhi	r4,zero,918
 100e550:	0100e5ac 	andhi	r4,zero,918
 100e554:	0100e5ac 	andhi	r4,zero,918
 100e558:	0100e5ac 	andhi	r4,zero,918
 100e55c:	0100e5ac 	andhi	r4,zero,918
 100e560:	0100e5ac 	andhi	r4,zero,918
 100e564:	0100e5ac 	andhi	r4,zero,918
 100e568:	0100e5ac 	andhi	r4,zero,918
 100e56c:	0100e5ac 	andhi	r4,zero,918
 100e570:	0100e5ac 	andhi	r4,zero,918
 100e574:	0100ea00 	call	100ea0 <__alt_mem_onchip_memory2_0+0x100ea0>
 100e578:	0100e5ac 	andhi	r4,zero,918
 100e57c:	0100e5ac 	andhi	r4,zero,918
 100e580:	0100e5ac 	andhi	r4,zero,918
 100e584:	0100e5ac 	andhi	r4,zero,918
 100e588:	0100e5ac 	andhi	r4,zero,918
 100e58c:	0100e5ac 	andhi	r4,zero,918
 100e590:	0100e5ac 	andhi	r4,zero,918
 100e594:	0100e5ac 	andhi	r4,zero,918
 100e598:	0100e5ac 	andhi	r4,zero,918
 100e59c:	0100e5ac 	andhi	r4,zero,918
 100e5a0:	0100e9e0 	cmpeqi	r4,zero,935
 100e5a4:	0100e5ac 	andhi	r4,zero,918
 100e5a8:	0100ea0c 	andi	r4,zero,936
 100e5ac:	d8001115 	stw	zero,68(sp)
 100e5b0:	40c00007 	ldb	r3,0(r8)
 100e5b4:	00800c04 	movi	r2,48
 100e5b8:	1880d026 	beq	r3,r2,100e8fc <_strtod_r+0x47c>
 100e5bc:	001f883a 	mov	r15,zero
 100e5c0:	41000007 	ldb	r4,0(r8)
 100e5c4:	00c00bc4 	movi	r3,47
 100e5c8:	402d883a 	mov	r22,r8
 100e5cc:	1903470e 	bge	r3,r4,100f2ec <_strtod_r+0xe6c>
 100e5d0:	00800e44 	movi	r2,57
 100e5d4:	11034516 	blt	r2,r4,100f2ec <_strtod_r+0xe6c>
 100e5d8:	180f883a 	mov	r7,r3
 100e5dc:	1013883a 	mov	r9,r2
 100e5e0:	4007883a 	mov	r3,r8
 100e5e4:	000d883a 	mov	r6,zero
 100e5e8:	0029883a 	mov	r20,zero
 100e5ec:	0021883a 	mov	r16,zero
 100e5f0:	01400204 	movi	r5,8
 100e5f4:	028003c4 	movi	r10,15
 100e5f8:	29803116 	blt	r5,r6,100e6c0 <_strtod_r+0x240>
 100e5fc:	a08002a4 	muli	r2,r20,10
 100e600:	1105883a 	add	r2,r2,r4
 100e604:	153ff404 	addi	r20,r2,-48
 100e608:	1a000044 	addi	r8,r3,1
 100e60c:	da000415 	stw	r8,16(sp)
 100e610:	41000007 	ldb	r4,0(r8)
 100e614:	31800044 	addi	r6,r6,1
 100e618:	4007883a 	mov	r3,r8
 100e61c:	3900010e 	bge	r7,r4,100e624 <_strtod_r+0x1a4>
 100e620:	493ff50e 	bge	r9,r4,100e5f8 <_strtod_r+0x178>
 100e624:	00800b84 	movi	r2,46
 100e628:	2080c126 	beq	r4,r2,100e930 <_strtod_r+0x4b0>
 100e62c:	3027883a 	mov	r19,r6
 100e630:	0025883a 	mov	r18,zero
 100e634:	0015883a 	mov	r10,zero
 100e638:	000f883a 	mov	r7,zero
 100e63c:	00801944 	movi	r2,101
 100e640:	20802426 	beq	r4,r2,100e6d4 <_strtod_r+0x254>
 100e644:	00801144 	movi	r2,69
 100e648:	20802226 	beq	r4,r2,100e6d4 <_strtod_r+0x254>
 100e64c:	9816c03a 	cmpne	r11,r19,zero
 100e650:	000b883a 	mov	r5,zero
 100e654:	5800631e 	bne	r11,zero,100e7e4 <_strtod_r+0x364>
 100e658:	3800c126 	beq	r7,zero,100e960 <_strtod_r+0x4e0>
 100e65c:	d8c01517 	ldw	r3,84(sp)
 100e660:	18000226 	beq	r3,zero,100e66c <_strtod_r+0x1ec>
 100e664:	d8800417 	ldw	r2,16(sp)
 100e668:	18800015 	stw	r2,0(r3)
 100e66c:	d9001117 	ldw	r4,68(sp)
 100e670:	2005003a 	cmpeq	r2,r4,zero
 100e674:	10001f1e 	bne	r2,zero,100e6f4 <_strtod_r+0x274>
 100e678:	e0800017 	ldw	r2,0(fp)
 100e67c:	e0c00117 	ldw	r3,4(fp)
 100e680:	1009883a 	mov	r4,r2
 100e684:	1960003c 	xorhi	r5,r3,32768
 100e688:	2005883a 	mov	r2,r4
 100e68c:	2807883a 	mov	r3,r5
 100e690:	dfc02117 	ldw	ra,132(sp)
 100e694:	df002017 	ldw	fp,128(sp)
 100e698:	ddc01f17 	ldw	r23,124(sp)
 100e69c:	dd801e17 	ldw	r22,120(sp)
 100e6a0:	dd401d17 	ldw	r21,116(sp)
 100e6a4:	dd001c17 	ldw	r20,112(sp)
 100e6a8:	dcc01b17 	ldw	r19,108(sp)
 100e6ac:	dc801a17 	ldw	r18,104(sp)
 100e6b0:	dc401917 	ldw	r17,100(sp)
 100e6b4:	dc001817 	ldw	r16,96(sp)
 100e6b8:	dec02204 	addi	sp,sp,136
 100e6bc:	f800283a 	ret
 100e6c0:	51bfd116 	blt	r10,r6,100e608 <_strtod_r+0x188>
 100e6c4:	808002a4 	muli	r2,r16,10
 100e6c8:	1105883a 	add	r2,r2,r4
 100e6cc:	143ff404 	addi	r16,r2,-48
 100e6d0:	003fcd06 	br	100e608 <_strtod_r+0x188>
 100e6d4:	9816c03a 	cmpne	r11,r19,zero
 100e6d8:	5800091e 	bne	r11,zero,100e700 <_strtod_r+0x280>
 100e6dc:	3800081e 	bne	r7,zero,100e700 <_strtod_r+0x280>
 100e6e0:	7805003a 	cmpeq	r2,r15,zero
 100e6e4:	10000626 	beq	r2,zero,100e700 <_strtod_r+0x280>
 100e6e8:	d8001115 	stw	zero,68(sp)
 100e6ec:	dc400415 	stw	r17,16(sp)
 100e6f0:	003fda06 	br	100e65c <_strtod_r+0x1dc>
 100e6f4:	e1000017 	ldw	r4,0(fp)
 100e6f8:	e1400117 	ldw	r5,4(fp)
 100e6fc:	003fe206 	br	100e688 <_strtod_r+0x208>
 100e700:	dc400417 	ldw	r17,16(sp)
 100e704:	00800ac4 	movi	r2,43
 100e708:	8a000044 	addi	r8,r17,1
 100e70c:	da000415 	stw	r8,16(sp)
 100e710:	88c00047 	ldb	r3,1(r17)
 100e714:	4009883a 	mov	r4,r8
 100e718:	1880bf26 	beq	r3,r2,100ea18 <_strtod_r+0x598>
 100e71c:	00800b44 	movi	r2,45
 100e720:	18834526 	beq	r3,r2,100f438 <_strtod_r+0xfb8>
 100e724:	1809883a 	mov	r4,r3
 100e728:	20fff404 	addi	r3,r4,-48
 100e72c:	00800244 	movi	r2,9
 100e730:	001d883a 	mov	r14,zero
 100e734:	10c0bf36 	bltu	r2,r3,100ea34 <_strtod_r+0x5b4>
 100e738:	00800c04 	movi	r2,48
 100e73c:	2080061e 	bne	r4,r2,100e758 <_strtod_r+0x2d8>
 100e740:	da000417 	ldw	r8,16(sp)
 100e744:	2005883a 	mov	r2,r4
 100e748:	42000044 	addi	r8,r8,1
 100e74c:	da000415 	stw	r8,16(sp)
 100e750:	41000007 	ldb	r4,0(r8)
 100e754:	20bffc26 	beq	r4,r2,100e748 <_strtod_r+0x2c8>
 100e758:	20fff3c4 	addi	r3,r4,-49
 100e75c:	00800204 	movi	r2,8
 100e760:	10ffbb36 	bltu	r2,r3,100e650 <_strtod_r+0x1d0>
 100e764:	da000417 	ldw	r8,16(sp)
 100e768:	227ff404 	addi	r9,r4,-48
 100e76c:	03000bc4 	movi	r12,47
 100e770:	4007883a 	mov	r3,r8
 100e774:	42000044 	addi	r8,r8,1
 100e778:	da000415 	stw	r8,16(sp)
 100e77c:	41000007 	ldb	r4,0(r8)
 100e780:	61000d0e 	bge	r12,r4,100e7b8 <_strtod_r+0x338>
 100e784:	00800e44 	movi	r2,57
 100e788:	11000b16 	blt	r2,r4,100e7b8 <_strtod_r+0x338>
 100e78c:	601b883a 	mov	r13,r12
 100e790:	1019883a 	mov	r12,r2
 100e794:	00000106 	br	100e79c <_strtod_r+0x31c>
 100e798:	61000716 	blt	r12,r4,100e7b8 <_strtod_r+0x338>
 100e79c:	488002a4 	muli	r2,r9,10
 100e7a0:	42000044 	addi	r8,r8,1
 100e7a4:	da000415 	stw	r8,16(sp)
 100e7a8:	2085883a 	add	r2,r4,r2
 100e7ac:	41000007 	ldb	r4,0(r8)
 100e7b0:	127ff404 	addi	r9,r2,-48
 100e7b4:	693ff816 	blt	r13,r4,100e798 <_strtod_r+0x318>
 100e7b8:	40c7c83a 	sub	r3,r8,r3
 100e7bc:	00800204 	movi	r2,8
 100e7c0:	10c2e416 	blt	r2,r3,100f354 <_strtod_r+0xed4>
 100e7c4:	009387c4 	movi	r2,19999
 100e7c8:	480b883a 	mov	r5,r9
 100e7cc:	1240010e 	bge	r2,r9,100e7d4 <_strtod_r+0x354>
 100e7d0:	100b883a 	mov	r5,r2
 100e7d4:	7005003a 	cmpeq	r2,r14,zero
 100e7d8:	103f9e1e 	bne	r2,zero,100e654 <_strtod_r+0x1d4>
 100e7dc:	014bc83a 	sub	r5,zero,r5
 100e7e0:	583f9d26 	beq	r11,zero,100e658 <_strtod_r+0x1d8>
 100e7e4:	2a8bc83a 	sub	r5,r5,r10
 100e7e8:	d9400f15 	stw	r5,60(sp)
 100e7ec:	30007a1e 	bne	r6,zero,100e9d8 <_strtod_r+0x558>
 100e7f0:	dcc01215 	stw	r19,72(sp)
 100e7f4:	00800404 	movi	r2,16
 100e7f8:	9825883a 	mov	r18,r19
 100e7fc:	14c0010e 	bge	r2,r19,100e804 <_strtod_r+0x384>
 100e800:	1025883a 	mov	r18,r2
 100e804:	a009883a 	mov	r4,r20
 100e808:	1018c4c0 	call	1018c4c <__floatunsidf>
 100e80c:	100f883a 	mov	r7,r2
 100e810:	e0800015 	stw	r2,0(fp)
 100e814:	00800244 	movi	r2,9
 100e818:	e0c00115 	stw	r3,4(fp)
 100e81c:	1480160e 	bge	r2,r18,100e878 <_strtod_r+0x3f8>
 100e820:	900c90fa 	slli	r6,r18,3
 100e824:	010040b4 	movhi	r4,258
 100e828:	211f1104 	addi	r4,r4,31812
 100e82c:	180b883a 	mov	r5,r3
 100e830:	310d883a 	add	r6,r6,r4
 100e834:	30ffef17 	ldw	r3,-68(r6)
 100e838:	30bfee17 	ldw	r2,-72(r6)
 100e83c:	3809883a 	mov	r4,r7
 100e840:	180f883a 	mov	r7,r3
 100e844:	100d883a 	mov	r6,r2
 100e848:	100c1d80 	call	100c1d8 <__muldf3>
 100e84c:	8009883a 	mov	r4,r16
 100e850:	1823883a 	mov	r17,r3
 100e854:	1021883a 	mov	r16,r2
 100e858:	1018c4c0 	call	1018c4c <__floatunsidf>
 100e85c:	880b883a 	mov	r5,r17
 100e860:	180f883a 	mov	r7,r3
 100e864:	8009883a 	mov	r4,r16
 100e868:	100d883a 	mov	r6,r2
 100e86c:	100c1640 	call	100c164 <__adddf3>
 100e870:	e0c00115 	stw	r3,4(fp)
 100e874:	e0800015 	stw	r2,0(fp)
 100e878:	010003c4 	movi	r4,15
 100e87c:	24c09816 	blt	r4,r19,100eae0 <_strtod_r+0x660>
 100e880:	d9800f17 	ldw	r6,60(sp)
 100e884:	303f7526 	beq	r6,zero,100e65c <_strtod_r+0x1dc>
 100e888:	0183be0e 	bge	zero,r6,100f784 <_strtod_r+0x1304>
 100e88c:	00800584 	movi	r2,22
 100e890:	1182b20e 	bge	r2,r6,100f35c <_strtod_r+0xedc>
 100e894:	d8c00f17 	ldw	r3,60(sp)
 100e898:	24e3c83a 	sub	r17,r4,r19
 100e89c:	88800584 	addi	r2,r17,22
 100e8a0:	10c08f16 	blt	r2,r3,100eae0 <_strtod_r+0x660>
 100e8a4:	880890fa 	slli	r4,r17,3
 100e8a8:	040040b4 	movhi	r16,258
 100e8ac:	841f1104 	addi	r16,r16,31812
 100e8b0:	e0800017 	ldw	r2,0(fp)
 100e8b4:	2409883a 	add	r4,r4,r16
 100e8b8:	22000017 	ldw	r8,0(r4)
 100e8bc:	22400117 	ldw	r9,4(r4)
 100e8c0:	e0c00117 	ldw	r3,4(fp)
 100e8c4:	1009883a 	mov	r4,r2
 100e8c8:	480f883a 	mov	r7,r9
 100e8cc:	180b883a 	mov	r5,r3
 100e8d0:	400d883a 	mov	r6,r8
 100e8d4:	100c1d80 	call	100c1d8 <__muldf3>
 100e8d8:	d9000f17 	ldw	r4,60(sp)
 100e8dc:	180b883a 	mov	r5,r3
 100e8e0:	2455c83a 	sub	r10,r4,r17
 100e8e4:	501490fa 	slli	r10,r10,3
 100e8e8:	1009883a 	mov	r4,r2
 100e8ec:	5415883a 	add	r10,r10,r16
 100e8f0:	52000017 	ldw	r8,0(r10)
 100e8f4:	52400117 	ldw	r9,4(r10)
 100e8f8:	0002a206 	br	100f384 <_strtod_r+0xf04>
 100e8fc:	40c00047 	ldb	r3,1(r8)
 100e900:	00801604 	movi	r2,88
 100e904:	18804e26 	beq	r3,r2,100ea40 <_strtod_r+0x5c0>
 100e908:	00801e04 	movi	r2,120
 100e90c:	18804c26 	beq	r3,r2,100ea40 <_strtod_r+0x5c0>
 100e910:	42000044 	addi	r8,r8,1
 100e914:	da000415 	stw	r8,16(sp)
 100e918:	40c00007 	ldb	r3,0(r8)
 100e91c:	00800c04 	movi	r2,48
 100e920:	18bffb26 	beq	r3,r2,100e910 <_strtod_r+0x490>
 100e924:	183f4d26 	beq	r3,zero,100e65c <_strtod_r+0x1dc>
 100e928:	03c00044 	movi	r15,1
 100e92c:	003f2406 	br	100e5c0 <_strtod_r+0x140>
 100e930:	42000044 	addi	r8,r8,1
 100e934:	da000415 	stw	r8,16(sp)
 100e938:	19000047 	ldb	r4,1(r3)
 100e93c:	3000b726 	beq	r6,zero,100ec1c <_strtod_r+0x79c>
 100e940:	3027883a 	mov	r19,r6
 100e944:	0015883a 	mov	r10,zero
 100e948:	000f883a 	mov	r7,zero
 100e94c:	227ff404 	addi	r9,r4,-48
 100e950:	00800244 	movi	r2,9
 100e954:	1242592e 	bgeu	r2,r9,100f2bc <_strtod_r+0xe3c>
 100e958:	04800044 	movi	r18,1
 100e95c:	003f3706 	br	100e63c <_strtod_r+0x1bc>
 100e960:	7804c03a 	cmpne	r2,r15,zero
 100e964:	103f3d1e 	bne	r2,zero,100e65c <_strtod_r+0x1dc>
 100e968:	9004c03a 	cmpne	r2,r18,zero
 100e96c:	103f5e1e 	bne	r2,zero,100e6e8 <_strtod_r+0x268>
 100e970:	00801384 	movi	r2,78
 100e974:	2083a226 	beq	r4,r2,100f800 <_strtod_r+0x1380>
 100e978:	11039d16 	blt	r2,r4,100f7f0 <_strtod_r+0x1370>
 100e97c:	00801244 	movi	r2,73
 100e980:	20bf591e 	bne	r4,r2,100e6e8 <_strtod_r+0x268>
 100e984:	dc000404 	addi	r16,sp,16
 100e988:	8009883a 	mov	r4,r16
 100e98c:	014040b4 	movhi	r5,258
 100e990:	295e2704 	addi	r5,r5,30876
 100e994:	100e4380 	call	100e438 <match>
 100e998:	103f5326 	beq	r2,zero,100e6e8 <_strtod_r+0x268>
 100e99c:	d8800417 	ldw	r2,16(sp)
 100e9a0:	8009883a 	mov	r4,r16
 100e9a4:	014040b4 	movhi	r5,258
 100e9a8:	295e2804 	addi	r5,r5,30880
 100e9ac:	123fffc4 	addi	r8,r2,-1
 100e9b0:	da000415 	stw	r8,16(sp)
 100e9b4:	100e4380 	call	100e438 <match>
 100e9b8:	1000031e 	bne	r2,zero,100e9c8 <_strtod_r+0x548>
 100e9bc:	d8800417 	ldw	r2,16(sp)
 100e9c0:	12000044 	addi	r8,r2,1
 100e9c4:	da000415 	stw	r8,16(sp)
 100e9c8:	019ffc34 	movhi	r6,32752
 100e9cc:	e1800115 	stw	r6,4(fp)
 100e9d0:	e0000015 	stw	zero,0(fp)
 100e9d4:	003f2106 	br	100e65c <_strtod_r+0x1dc>
 100e9d8:	d9801215 	stw	r6,72(sp)
 100e9dc:	003f8506 	br	100e7f4 <_strtod_r+0x374>
 100e9e0:	d8001115 	stw	zero,68(sp)
 100e9e4:	42000044 	addi	r8,r8,1
 100e9e8:	da000415 	stw	r8,16(sp)
 100e9ec:	40800007 	ldb	r2,0(r8)
 100e9f0:	103eef1e 	bne	r2,zero,100e5b0 <_strtod_r+0x130>
 100e9f4:	d8001115 	stw	zero,68(sp)
 100e9f8:	dc400415 	stw	r17,16(sp)
 100e9fc:	003f1706 	br	100e65c <_strtod_r+0x1dc>
 100ea00:	42000044 	addi	r8,r8,1
 100ea04:	da000415 	stw	r8,16(sp)
 100ea08:	003eaf06 	br	100e4c8 <_strtod_r+0x48>
 100ea0c:	00800044 	movi	r2,1
 100ea10:	d8801115 	stw	r2,68(sp)
 100ea14:	003ff306 	br	100e9e4 <_strtod_r+0x564>
 100ea18:	001d883a 	mov	r14,zero
 100ea1c:	42000044 	addi	r8,r8,1
 100ea20:	da000415 	stw	r8,16(sp)
 100ea24:	21000047 	ldb	r4,1(r4)
 100ea28:	00800244 	movi	r2,9
 100ea2c:	20fff404 	addi	r3,r4,-48
 100ea30:	10ff412e 	bgeu	r2,r3,100e738 <_strtod_r+0x2b8>
 100ea34:	000b883a 	mov	r5,zero
 100ea38:	dc400415 	stw	r17,16(sp)
 100ea3c:	003f0506 	br	100e654 <_strtod_r+0x1d4>
 100ea40:	d8c01117 	ldw	r3,68(sp)
 100ea44:	048040f4 	movhi	r18,259
 100ea48:	94a0b104 	addi	r18,r18,-32060
 100ea4c:	d8800504 	addi	r2,sp,20
 100ea50:	a809883a 	mov	r4,r21
 100ea54:	d9400404 	addi	r5,sp,16
 100ea58:	900d883a 	mov	r6,r18
 100ea5c:	d9c00604 	addi	r7,sp,24
 100ea60:	d8800015 	stw	r2,0(sp)
 100ea64:	d8c00115 	stw	r3,4(sp)
 100ea68:	10148200 	call	1014820 <__gethex>
 100ea6c:	140001cc 	andi	r16,r2,7
 100ea70:	1027883a 	mov	r19,r2
 100ea74:	803ef926 	beq	r16,zero,100e65c <_strtod_r+0x1dc>
 100ea78:	05000184 	movi	r20,6
 100ea7c:	853f1a26 	beq	r16,r20,100e6e8 <_strtod_r+0x268>
 100ea80:	d9800517 	ldw	r6,20(sp)
 100ea84:	30000626 	beq	r6,zero,100eaa0 <_strtod_r+0x620>
 100ea88:	91400017 	ldw	r5,0(r18)
 100ea8c:	d9000d04 	addi	r4,sp,52
 100ea90:	101630c0 	call	101630c <__copybits>
 100ea94:	d9400517 	ldw	r5,20(sp)
 100ea98:	a809883a 	mov	r4,r21
 100ea9c:	1015e6c0 	call	1015e6c <_Bfree>
 100eaa0:	d9400617 	ldw	r5,24(sp)
 100eaa4:	a4024136 	bltu	r20,r16,100f3ac <_strtod_r+0xf2c>
 100eaa8:	8405883a 	add	r2,r16,r16
 100eaac:	1085883a 	add	r2,r2,r2
 100eab0:	00c04074 	movhi	r3,257
 100eab4:	18fab104 	addi	r3,r3,-5436
 100eab8:	10c5883a 	add	r2,r2,r3
 100eabc:	11000017 	ldw	r4,0(r2)
 100eac0:	2000683a 	jmp	r4
 100eac4:	0100f3ec 	andhi	r4,zero,975
 100eac8:	0100f3f8 	rdprs	r4,zero,975
 100eacc:	0100f39c 	xori	r4,zero,974
 100ead0:	0100f3c4 	movi	r4,975
 100ead4:	0100f3d4 	movui	r4,975
 100ead8:	0100f3f8 	rdprs	r4,zero,975
 100eadc:	0100f3ec 	andhi	r4,zero,975
 100eae0:	d8c00f17 	ldw	r3,60(sp)
 100eae4:	9c85c83a 	sub	r2,r19,r18
 100eae8:	18a1883a 	add	r16,r3,r2
 100eaec:	0402d00e 	bge	zero,r16,100f630 <_strtod_r+0x11b0>
 100eaf0:	814003cc 	andi	r5,r16,15
 100eaf4:	28000f26 	beq	r5,zero,100eb34 <_strtod_r+0x6b4>
 100eaf8:	280a90fa 	slli	r5,r5,3
 100eafc:	010040b4 	movhi	r4,258
 100eb00:	211f1104 	addi	r4,r4,31812
 100eb04:	e0800017 	ldw	r2,0(fp)
 100eb08:	290b883a 	add	r5,r5,r4
 100eb0c:	2a000017 	ldw	r8,0(r5)
 100eb10:	e0c00117 	ldw	r3,4(fp)
 100eb14:	2a400117 	ldw	r9,4(r5)
 100eb18:	1009883a 	mov	r4,r2
 100eb1c:	180b883a 	mov	r5,r3
 100eb20:	480f883a 	mov	r7,r9
 100eb24:	400d883a 	mov	r6,r8
 100eb28:	100c1d80 	call	100c1d8 <__muldf3>
 100eb2c:	e0c00115 	stw	r3,4(fp)
 100eb30:	e0800015 	stw	r2,0(fp)
 100eb34:	00bffc04 	movi	r2,-16
 100eb38:	808c703a 	and	r6,r16,r2
 100eb3c:	30005b26 	beq	r6,zero,100ecac <_strtod_r+0x82c>
 100eb40:	00804d04 	movi	r2,308
 100eb44:	1181fd16 	blt	r2,r6,100f33c <_strtod_r+0xebc>
 100eb48:	3021d13a 	srai	r16,r6,4
 100eb4c:	00800044 	movi	r2,1
 100eb50:	1403610e 	bge	r2,r16,100f8d8 <_strtod_r+0x1458>
 100eb54:	102f883a 	mov	r23,r2
 100eb58:	0025883a 	mov	r18,zero
 100eb5c:	044040b4 	movhi	r17,258
 100eb60:	8c5f4304 	addi	r17,r17,32012
 100eb64:	8080004c 	andi	r2,r16,1
 100eb68:	1005003a 	cmpeq	r2,r2,zero
 100eb6c:	1000091e 	bne	r2,zero,100eb94 <_strtod_r+0x714>
 100eb70:	e0800017 	ldw	r2,0(fp)
 100eb74:	e0c00117 	ldw	r3,4(fp)
 100eb78:	89800017 	ldw	r6,0(r17)
 100eb7c:	89c00117 	ldw	r7,4(r17)
 100eb80:	180b883a 	mov	r5,r3
 100eb84:	1009883a 	mov	r4,r2
 100eb88:	100c1d80 	call	100c1d8 <__muldf3>
 100eb8c:	e0c00115 	stw	r3,4(fp)
 100eb90:	e0800015 	stw	r2,0(fp)
 100eb94:	8021d07a 	srai	r16,r16,1
 100eb98:	94800044 	addi	r18,r18,1
 100eb9c:	8c400204 	addi	r17,r17,8
 100eba0:	bc3ff016 	blt	r23,r16,100eb64 <_strtod_r+0x6e4>
 100eba4:	900e90fa 	slli	r7,r18,3
 100eba8:	018040b4 	movhi	r6,258
 100ebac:	319f4304 	addi	r6,r6,32012
 100ebb0:	e2000117 	ldw	r8,4(fp)
 100ebb4:	398f883a 	add	r7,r7,r6
 100ebb8:	38800017 	ldw	r2,0(r7)
 100ebbc:	38c00117 	ldw	r3,4(r7)
 100ebc0:	e1000017 	ldw	r4,0(fp)
 100ebc4:	01bf2c34 	movhi	r6,64688
 100ebc8:	418d883a 	add	r6,r8,r6
 100ebcc:	300b883a 	mov	r5,r6
 100ebd0:	180f883a 	mov	r7,r3
 100ebd4:	100d883a 	mov	r6,r2
 100ebd8:	100c1d80 	call	100c1d8 <__muldf3>
 100ebdc:	1009883a 	mov	r4,r2
 100ebe0:	180b883a 	mov	r5,r3
 100ebe4:	199ffc2c 	andhi	r6,r3,32752
 100ebe8:	009f2834 	movhi	r2,31904
 100ebec:	e1000015 	stw	r4,0(fp)
 100ebf0:	e1400115 	stw	r5,4(fp)
 100ebf4:	1181d136 	bltu	r2,r6,100f33c <_strtod_r+0xebc>
 100ebf8:	009f2434 	movhi	r2,31888
 100ebfc:	1183202e 	bgeu	r2,r6,100f880 <_strtod_r+0x1400>
 100ec00:	d8001415 	stw	zero,80(sp)
 100ec04:	019ffc34 	movhi	r6,32752
 100ec08:	31bfffc4 	addi	r6,r6,-1
 100ec0c:	01ffffc4 	movi	r7,-1
 100ec10:	e1800115 	stw	r6,4(fp)
 100ec14:	e1c00015 	stw	r7,0(fp)
 100ec18:	00002506 	br	100ecb0 <_strtod_r+0x830>
 100ec1c:	00800c04 	movi	r2,48
 100ec20:	2083151e 	bne	r4,r2,100f878 <_strtod_r+0x13f8>
 100ec24:	2005883a 	mov	r2,r4
 100ec28:	000f883a 	mov	r7,zero
 100ec2c:	42000044 	addi	r8,r8,1
 100ec30:	da000415 	stw	r8,16(sp)
 100ec34:	41000007 	ldb	r4,0(r8)
 100ec38:	39c00044 	addi	r7,r7,1
 100ec3c:	20bffb26 	beq	r4,r2,100ec2c <_strtod_r+0x7ac>
 100ec40:	20fff3c4 	addi	r3,r4,-49
 100ec44:	00800204 	movi	r2,8
 100ec48:	10c1b836 	bltu	r2,r3,100f32c <_strtod_r+0xeac>
 100ec4c:	dd800417 	ldw	r22,16(sp)
 100ec50:	3815883a 	mov	r10,r7
 100ec54:	227ff404 	addi	r9,r4,-48
 100ec58:	b011883a 	mov	r8,r22
 100ec5c:	0027883a 	mov	r19,zero
 100ec60:	01c00044 	movi	r7,1
 100ec64:	4801fe26 	beq	r9,zero,100f460 <_strtod_r+0xfe0>
 100ec68:	00800044 	movi	r2,1
 100ec6c:	51d5883a 	add	r10,r10,r7
 100ec70:	11c31f0e 	bge	r2,r7,100f8f0 <_strtod_r+0x1470>
 100ec74:	1009883a 	mov	r4,r2
 100ec78:	9807883a 	mov	r3,r19
 100ec7c:	02c00204 	movi	r11,8
 100ec80:	03000404 	movi	r12,16
 100ec84:	00000306 	br	100ec94 <_strtod_r+0x814>
 100ec88:	a50002a4 	muli	r20,r20,10
 100ec8c:	21000044 	addi	r4,r4,1
 100ec90:	21c1eb26 	beq	r4,r7,100f440 <_strtod_r+0xfc0>
 100ec94:	18c00044 	addi	r3,r3,1
 100ec98:	18bfffc4 	addi	r2,r3,-1
 100ec9c:	58bffa0e 	bge	r11,r2,100ec88 <_strtod_r+0x808>
 100eca0:	60fffa16 	blt	r12,r3,100ec8c <_strtod_r+0x80c>
 100eca4:	840002a4 	muli	r16,r16,10
 100eca8:	003ff806 	br	100ec8c <_strtod_r+0x80c>
 100ecac:	d8001415 	stw	zero,80(sp)
 100ecb0:	d9801217 	ldw	r6,72(sp)
 100ecb4:	a809883a 	mov	r4,r21
 100ecb8:	b00b883a 	mov	r5,r22
 100ecbc:	980f883a 	mov	r7,r19
 100ecc0:	dd000015 	stw	r20,0(sp)
 100ecc4:	1016d400 	call	1016d40 <__s2b>
 100ecc8:	d9800f17 	ldw	r6,60(sp)
 100eccc:	11000304 	addi	r4,r2,12
 100ecd0:	d8801015 	stw	r2,64(sp)
 100ecd4:	300c803a 	cmplt	r6,r6,zero
 100ecd8:	d9001715 	stw	r4,92(sp)
 100ecdc:	d9801615 	stw	r6,88(sp)
 100ece0:	d8801017 	ldw	r2,64(sp)
 100ece4:	a809883a 	mov	r4,r21
 100ece8:	11400117 	ldw	r5,4(r2)
 100ecec:	10163ec0 	call	10163ec <_Balloc>
 100ecf0:	d8c01017 	ldw	r3,64(sp)
 100ecf4:	d9401717 	ldw	r5,92(sp)
 100ecf8:	11000304 	addi	r4,r2,12
 100ecfc:	19800417 	ldw	r6,16(r3)
 100ed00:	102f883a 	mov	r23,r2
 100ed04:	318d883a 	add	r6,r6,r6
 100ed08:	318d883a 	add	r6,r6,r6
 100ed0c:	31800204 	addi	r6,r6,8
 100ed10:	100d7500 	call	100d750 <memcpy>
 100ed14:	e2000017 	ldw	r8,0(fp)
 100ed18:	e2400117 	ldw	r9,4(fp)
 100ed1c:	d9800304 	addi	r6,sp,12
 100ed20:	400b883a 	mov	r5,r8
 100ed24:	a809883a 	mov	r4,r21
 100ed28:	d9c00204 	addi	r7,sp,8
 100ed2c:	d9800015 	stw	r6,0(sp)
 100ed30:	480d883a 	mov	r6,r9
 100ed34:	10164a80 	call	10164a8 <__d2b>
 100ed38:	a809883a 	mov	r4,r21
 100ed3c:	01400044 	movi	r5,1
 100ed40:	d8800515 	stw	r2,20(sp)
 100ed44:	1016ae40 	call	1016ae4 <__i2b>
 100ed48:	102d883a 	mov	r22,r2
 100ed4c:	d8801617 	ldw	r2,88(sp)
 100ed50:	1001051e 	bne	r2,zero,100f168 <_strtod_r+0xce8>
 100ed54:	dd000f17 	ldw	r20,60(sp)
 100ed58:	000f883a 	mov	r7,zero
 100ed5c:	0013883a 	mov	r9,zero
 100ed60:	a011883a 	mov	r8,r20
 100ed64:	d8800217 	ldw	r2,8(sp)
 100ed68:	1000fd16 	blt	r2,zero,100f160 <_strtod_r+0xce0>
 100ed6c:	388f883a 	add	r7,r7,r2
 100ed70:	d9801417 	ldw	r6,80(sp)
 100ed74:	d9400317 	ldw	r5,12(sp)
 100ed78:	00ff0084 	movi	r3,-1022
 100ed7c:	1189c83a 	sub	r4,r2,r6
 100ed80:	2145883a 	add	r2,r4,r5
 100ed84:	10bfffc4 	addi	r2,r2,-1
 100ed88:	10c09f0e 	bge	r2,r3,100f008 <_strtod_r+0xb88>
 100ed8c:	21810cc4 	addi	r6,r4,1075
 100ed90:	d8c01417 	ldw	r3,80(sp)
 100ed94:	4185883a 	add	r2,r8,r6
 100ed98:	39a1883a 	add	r16,r7,r6
 100ed9c:	18a5883a 	add	r18,r3,r2
 100eda0:	3807883a 	mov	r3,r7
 100eda4:	81c0010e 	bge	r16,r7,100edac <_strtod_r+0x92c>
 100eda8:	8007883a 	mov	r3,r16
 100edac:	9005883a 	mov	r2,r18
 100edb0:	1c80010e 	bge	r3,r18,100edb8 <_strtod_r+0x938>
 100edb4:	1805883a 	mov	r2,r3
 100edb8:	0080e70e 	bge	zero,r2,100f158 <_strtod_r+0xcd8>
 100edbc:	38a7c83a 	sub	r19,r7,r2
 100edc0:	80a1c83a 	sub	r16,r16,r2
 100edc4:	90a5c83a 	sub	r18,r18,r2
 100edc8:	02400e0e 	bge	zero,r9,100ee04 <_strtod_r+0x984>
 100edcc:	480d883a 	mov	r6,r9
 100edd0:	b00b883a 	mov	r5,r22
 100edd4:	a809883a 	mov	r4,r21
 100edd8:	1016c200 	call	1016c20 <__pow5mult>
 100eddc:	d9800517 	ldw	r6,20(sp)
 100ede0:	a809883a 	mov	r4,r21
 100ede4:	100b883a 	mov	r5,r2
 100ede8:	102d883a 	mov	r22,r2
 100edec:	10168fc0 	call	10168fc <__multiply>
 100edf0:	d9400517 	ldw	r5,20(sp)
 100edf4:	1023883a 	mov	r17,r2
 100edf8:	a809883a 	mov	r4,r21
 100edfc:	1015e6c0 	call	1015e6c <_Bfree>
 100ee00:	dc400515 	stw	r17,20(sp)
 100ee04:	0400050e 	bge	zero,r16,100ee1c <_strtod_r+0x99c>
 100ee08:	d9400517 	ldw	r5,20(sp)
 100ee0c:	800d883a 	mov	r6,r16
 100ee10:	a809883a 	mov	r4,r21
 100ee14:	10167b00 	call	10167b0 <__lshift>
 100ee18:	d8800515 	stw	r2,20(sp)
 100ee1c:	a000741e 	bne	r20,zero,100eff0 <_strtod_r+0xb70>
 100ee20:	0480050e 	bge	zero,r18,100ee38 <_strtod_r+0x9b8>
 100ee24:	b80b883a 	mov	r5,r23
 100ee28:	900d883a 	mov	r6,r18
 100ee2c:	a809883a 	mov	r4,r21
 100ee30:	10167b00 	call	10167b0 <__lshift>
 100ee34:	102f883a 	mov	r23,r2
 100ee38:	04c0050e 	bge	zero,r19,100ee50 <_strtod_r+0x9d0>
 100ee3c:	b00b883a 	mov	r5,r22
 100ee40:	980d883a 	mov	r6,r19
 100ee44:	a809883a 	mov	r4,r21
 100ee48:	10167b00 	call	10167b0 <__lshift>
 100ee4c:	102d883a 	mov	r22,r2
 100ee50:	d9400517 	ldw	r5,20(sp)
 100ee54:	a809883a 	mov	r4,r21
 100ee58:	b80d883a 	mov	r6,r23
 100ee5c:	10166240 	call	1016624 <__mdiff>
 100ee60:	11000317 	ldw	r4,12(r2)
 100ee64:	b00b883a 	mov	r5,r22
 100ee68:	10000315 	stw	zero,12(r2)
 100ee6c:	d9001315 	stw	r4,76(sp)
 100ee70:	1009883a 	mov	r4,r2
 100ee74:	1029883a 	mov	r20,r2
 100ee78:	1015fc80 	call	1015fc8 <__mcmp>
 100ee7c:	10017c16 	blt	r2,zero,100f470 <_strtod_r+0xff0>
 100ee80:	1001af26 	beq	r2,zero,100f540 <_strtod_r+0x10c0>
 100ee84:	a009883a 	mov	r4,r20
 100ee88:	b00b883a 	mov	r5,r22
 100ee8c:	10161c80 	call	10161c8 <__ratio>
 100ee90:	0011883a 	mov	r8,zero
 100ee94:	02500034 	movhi	r9,16384
 100ee98:	480f883a 	mov	r7,r9
 100ee9c:	1009883a 	mov	r4,r2
 100eea0:	180b883a 	mov	r5,r3
 100eea4:	400d883a 	mov	r6,r8
 100eea8:	1021883a 	mov	r16,r2
 100eeac:	1823883a 	mov	r17,r3
 100eeb0:	1018bc40 	call	1018bc4 <__ledf2>
 100eeb4:	00805716 	blt	zero,r2,100f014 <_strtod_r+0xb94>
 100eeb8:	d9801317 	ldw	r6,76(sp)
 100eebc:	3025003a 	cmpeq	r18,r6,zero
 100eec0:	90008b1e 	bne	r18,zero,100f0f0 <_strtod_r+0xc70>
 100eec4:	008ffc34 	movhi	r2,16368
 100eec8:	0021883a 	mov	r16,zero
 100eecc:	1023883a 	mov	r17,r2
 100eed0:	d8000715 	stw	zero,28(sp)
 100eed4:	d8800815 	stw	r2,32(sp)
 100eed8:	e1c00117 	ldw	r7,4(fp)
 100eedc:	009ff834 	movhi	r2,32736
 100eee0:	3cdffc2c 	andhi	r19,r7,32752
 100eee4:	98805e26 	beq	r19,r2,100f060 <_strtod_r+0xbe0>
 100eee8:	d8801417 	ldw	r2,80(sp)
 100eeec:	10001b26 	beq	r2,zero,100ef5c <_strtod_r+0xadc>
 100eef0:	0081a834 	movhi	r2,1696
 100eef4:	14c01936 	bltu	r2,r19,100ef5c <_strtod_r+0xadc>
 100eef8:	00bff034 	movhi	r2,65472
 100eefc:	00d07834 	movhi	r3,16864
 100ef00:	18ffffc4 	addi	r3,r3,-1
 100ef04:	180f883a 	mov	r7,r3
 100ef08:	8009883a 	mov	r4,r16
 100ef0c:	880b883a 	mov	r5,r17
 100ef10:	100d883a 	mov	r6,r2
 100ef14:	1018bc40 	call	1018bc4 <__ledf2>
 100ef18:	00800b16 	blt	zero,r2,100ef48 <_strtod_r+0xac8>
 100ef1c:	880b883a 	mov	r5,r17
 100ef20:	8009883a 	mov	r4,r16
 100ef24:	1017e1c0 	call	1017e1c <__fixunsdfsi>
 100ef28:	1000df1e 	bne	r2,zero,100f2a8 <_strtod_r+0xe28>
 100ef2c:	0021883a 	mov	r16,zero
 100ef30:	044ffc34 	movhi	r17,16368
 100ef34:	9000d91e 	bne	r18,zero,100f29c <_strtod_r+0xe1c>
 100ef38:	8005883a 	mov	r2,r16
 100ef3c:	8807883a 	mov	r3,r17
 100ef40:	d8c00815 	stw	r3,32(sp)
 100ef44:	d8800715 	stw	r2,28(sp)
 100ef48:	d8800817 	ldw	r2,32(sp)
 100ef4c:	00c1ac34 	movhi	r3,1712
 100ef50:	14c5c83a 	sub	r2,r2,r19
 100ef54:	10c5883a 	add	r2,r2,r3
 100ef58:	d8800815 	stw	r2,32(sp)
 100ef5c:	e0800017 	ldw	r2,0(fp)
 100ef60:	e0c00117 	ldw	r3,4(fp)
 100ef64:	1009883a 	mov	r4,r2
 100ef68:	180b883a 	mov	r5,r3
 100ef6c:	10160280 	call	1016028 <__ulp>
 100ef70:	d9800717 	ldw	r6,28(sp)
 100ef74:	d9c00817 	ldw	r7,32(sp)
 100ef78:	180b883a 	mov	r5,r3
 100ef7c:	1009883a 	mov	r4,r2
 100ef80:	100c1d80 	call	100c1d8 <__muldf3>
 100ef84:	e2000017 	ldw	r8,0(fp)
 100ef88:	e2400117 	ldw	r9,4(fp)
 100ef8c:	180b883a 	mov	r5,r3
 100ef90:	1009883a 	mov	r4,r2
 100ef94:	480f883a 	mov	r7,r9
 100ef98:	400d883a 	mov	r6,r8
 100ef9c:	100c1640 	call	100c164 <__adddf3>
 100efa0:	e0c00115 	stw	r3,4(fp)
 100efa4:	e0800015 	stw	r2,0(fp)
 100efa8:	d8c01417 	ldw	r3,80(sp)
 100efac:	e4800117 	ldw	r18,4(fp)
 100efb0:	1800021e 	bne	r3,zero,100efbc <_strtod_r+0xb3c>
 100efb4:	909ffc2c 	andhi	r2,r18,32752
 100efb8:	98807b26 	beq	r19,r2,100f1a8 <_strtod_r+0xd28>
 100efbc:	d9400517 	ldw	r5,20(sp)
 100efc0:	a809883a 	mov	r4,r21
 100efc4:	1015e6c0 	call	1015e6c <_Bfree>
 100efc8:	a809883a 	mov	r4,r21
 100efcc:	b80b883a 	mov	r5,r23
 100efd0:	1015e6c0 	call	1015e6c <_Bfree>
 100efd4:	a809883a 	mov	r4,r21
 100efd8:	b00b883a 	mov	r5,r22
 100efdc:	1015e6c0 	call	1015e6c <_Bfree>
 100efe0:	a809883a 	mov	r4,r21
 100efe4:	a00b883a 	mov	r5,r20
 100efe8:	1015e6c0 	call	1015e6c <_Bfree>
 100efec:	003f3c06 	br	100ece0 <_strtod_r+0x860>
 100eff0:	b80b883a 	mov	r5,r23
 100eff4:	a00d883a 	mov	r6,r20
 100eff8:	a809883a 	mov	r4,r21
 100effc:	1016c200 	call	1016c20 <__pow5mult>
 100f000:	102f883a 	mov	r23,r2
 100f004:	003f8606 	br	100ee20 <_strtod_r+0x9a0>
 100f008:	00800d84 	movi	r2,54
 100f00c:	114dc83a 	sub	r6,r2,r5
 100f010:	003f5f06 	br	100ed90 <_strtod_r+0x910>
 100f014:	0005883a 	mov	r2,zero
 100f018:	00cff834 	movhi	r3,16352
 100f01c:	880b883a 	mov	r5,r17
 100f020:	8009883a 	mov	r4,r16
 100f024:	100d883a 	mov	r6,r2
 100f028:	180f883a 	mov	r7,r3
 100f02c:	100c1d80 	call	100c1d8 <__muldf3>
 100f030:	d9801317 	ldw	r6,76(sp)
 100f034:	1021883a 	mov	r16,r2
 100f038:	1823883a 	mov	r17,r3
 100f03c:	3025003a 	cmpeq	r18,r6,zero
 100f040:	90000126 	beq	r18,zero,100f048 <_strtod_r+0xbc8>
 100f044:	18e0003c 	xorhi	r3,r3,32768
 100f048:	d8800715 	stw	r2,28(sp)
 100f04c:	d8c00815 	stw	r3,32(sp)
 100f050:	e1c00117 	ldw	r7,4(fp)
 100f054:	009ff834 	movhi	r2,32736
 100f058:	3cdffc2c 	andhi	r19,r7,32752
 100f05c:	98bfa21e 	bne	r19,r2,100eee8 <_strtod_r+0xa68>
 100f060:	e1000017 	ldw	r4,0(fp)
 100f064:	01bf2c34 	movhi	r6,64688
 100f068:	398d883a 	add	r6,r7,r6
 100f06c:	d9000b15 	stw	r4,44(sp)
 100f070:	d9c00c15 	stw	r7,48(sp)
 100f074:	300b883a 	mov	r5,r6
 100f078:	e1800115 	stw	r6,4(fp)
 100f07c:	10160280 	call	1016028 <__ulp>
 100f080:	d9800717 	ldw	r6,28(sp)
 100f084:	d9c00817 	ldw	r7,32(sp)
 100f088:	180b883a 	mov	r5,r3
 100f08c:	1009883a 	mov	r4,r2
 100f090:	100c1d80 	call	100c1d8 <__muldf3>
 100f094:	e2000017 	ldw	r8,0(fp)
 100f098:	e2400117 	ldw	r9,4(fp)
 100f09c:	180b883a 	mov	r5,r3
 100f0a0:	1009883a 	mov	r4,r2
 100f0a4:	480f883a 	mov	r7,r9
 100f0a8:	400d883a 	mov	r6,r8
 100f0ac:	100c1640 	call	100c164 <__adddf3>
 100f0b0:	1009883a 	mov	r4,r2
 100f0b4:	180b883a 	mov	r5,r3
 100f0b8:	009f2834 	movhi	r2,31904
 100f0bc:	10bfffc4 	addi	r2,r2,-1
 100f0c0:	18dffc2c 	andhi	r3,r3,32752
 100f0c4:	e1000015 	stw	r4,0(fp)
 100f0c8:	e1400115 	stw	r5,4(fp)
 100f0cc:	10c06f2e 	bgeu	r2,r3,100f28c <_strtod_r+0xe0c>
 100f0d0:	d8800c17 	ldw	r2,48(sp)
 100f0d4:	011ffc34 	movhi	r4,32752
 100f0d8:	213fffc4 	addi	r4,r4,-1
 100f0dc:	11007a26 	beq	r2,r4,100f2c8 <_strtod_r+0xe48>
 100f0e0:	01ffffc4 	movi	r7,-1
 100f0e4:	e1000115 	stw	r4,4(fp)
 100f0e8:	e1c00015 	stw	r7,0(fp)
 100f0ec:	003fb306 	br	100efbc <_strtod_r+0xb3c>
 100f0f0:	e0c00017 	ldw	r3,0(fp)
 100f0f4:	1800221e 	bne	r3,zero,100f180 <_strtod_r+0xd00>
 100f0f8:	e0800117 	ldw	r2,4(fp)
 100f0fc:	00c00434 	movhi	r3,16
 100f100:	18ffffc4 	addi	r3,r3,-1
 100f104:	10c4703a 	and	r2,r2,r3
 100f108:	1000211e 	bne	r2,zero,100f190 <_strtod_r+0xd10>
 100f10c:	0005883a 	mov	r2,zero
 100f110:	00cffc34 	movhi	r3,16368
 100f114:	180f883a 	mov	r7,r3
 100f118:	8009883a 	mov	r4,r16
 100f11c:	880b883a 	mov	r5,r17
 100f120:	100d883a 	mov	r6,r2
 100f124:	100c98c0 	call	100c98c <__ltdf2>
 100f128:	10013c16 	blt	r2,zero,100f61c <_strtod_r+0x119c>
 100f12c:	0005883a 	mov	r2,zero
 100f130:	00cff834 	movhi	r3,16352
 100f134:	880b883a 	mov	r5,r17
 100f138:	8009883a 	mov	r4,r16
 100f13c:	180f883a 	mov	r7,r3
 100f140:	100d883a 	mov	r6,r2
 100f144:	100c1d80 	call	100c1d8 <__muldf3>
 100f148:	1823883a 	mov	r17,r3
 100f14c:	1021883a 	mov	r16,r2
 100f150:	18e0003c 	xorhi	r3,r3,32768
 100f154:	003fbc06 	br	100f048 <_strtod_r+0xbc8>
 100f158:	3827883a 	mov	r19,r7
 100f15c:	003f1a06 	br	100edc8 <_strtod_r+0x948>
 100f160:	4091c83a 	sub	r8,r8,r2
 100f164:	003f0206 	br	100ed70 <_strtod_r+0x8f0>
 100f168:	d8c00f17 	ldw	r3,60(sp)
 100f16c:	0011883a 	mov	r8,zero
 100f170:	0029883a 	mov	r20,zero
 100f174:	00d3c83a 	sub	r9,zero,r3
 100f178:	480f883a 	mov	r7,r9
 100f17c:	003ef906 	br	100ed64 <_strtod_r+0x8e4>
 100f180:	00800044 	movi	r2,1
 100f184:	1880021e 	bne	r3,r2,100f190 <_strtod_r+0xd10>
 100f188:	e0800117 	ldw	r2,4(fp)
 100f18c:	1000a526 	beq	r2,zero,100f424 <_strtod_r+0xfa4>
 100f190:	00affc34 	movhi	r2,49136
 100f194:	0021883a 	mov	r16,zero
 100f198:	044ffc34 	movhi	r17,16368
 100f19c:	d8800815 	stw	r2,32(sp)
 100f1a0:	d8000715 	stw	zero,28(sp)
 100f1a4:	003f4c06 	br	100eed8 <_strtod_r+0xa58>
 100f1a8:	880b883a 	mov	r5,r17
 100f1ac:	8009883a 	mov	r4,r16
 100f1b0:	100cb0c0 	call	100cb0c <__fixdfsi>
 100f1b4:	1009883a 	mov	r4,r2
 100f1b8:	100ca140 	call	100ca14 <__floatsidf>
 100f1bc:	880b883a 	mov	r5,r17
 100f1c0:	8009883a 	mov	r4,r16
 100f1c4:	100d883a 	mov	r6,r2
 100f1c8:	180f883a 	mov	r7,r3
 100f1cc:	100c0e40 	call	100c0e4 <__subdf3>
 100f1d0:	d9001317 	ldw	r4,76(sp)
 100f1d4:	100b883a 	mov	r5,r2
 100f1d8:	180d883a 	mov	r6,r3
 100f1dc:	1021883a 	mov	r16,r2
 100f1e0:	1823883a 	mov	r17,r3
 100f1e4:	2000061e 	bne	r4,zero,100f200 <_strtod_r+0xd80>
 100f1e8:	e0800017 	ldw	r2,0(fp)
 100f1ec:	1000041e 	bne	r2,zero,100f200 <_strtod_r+0xd80>
 100f1f0:	00c00434 	movhi	r3,16
 100f1f4:	18ffffc4 	addi	r3,r3,-1
 100f1f8:	90c4703a 	and	r2,r18,r3
 100f1fc:	10004026 	beq	r2,zero,100f300 <_strtod_r+0xe80>
 100f200:	00a52834 	movhi	r2,38048
 100f204:	108d6544 	addi	r2,r2,13717
 100f208:	00cff834 	movhi	r3,16352
 100f20c:	18ffffc4 	addi	r3,r3,-1
 100f210:	180f883a 	mov	r7,r3
 100f214:	8009883a 	mov	r4,r16
 100f218:	880b883a 	mov	r5,r17
 100f21c:	100d883a 	mov	r6,r2
 100f220:	100c98c0 	call	100c98c <__ltdf2>
 100f224:	10000916 	blt	r2,zero,100f24c <_strtod_r+0xdcc>
 100f228:	008d6c34 	movhi	r2,13744
 100f22c:	10b94d44 	addi	r2,r2,-6859
 100f230:	00cff834 	movhi	r3,16352
 100f234:	880b883a 	mov	r5,r17
 100f238:	180f883a 	mov	r7,r3
 100f23c:	8009883a 	mov	r4,r16
 100f240:	100d883a 	mov	r6,r2
 100f244:	100c87c0 	call	100c87c <__gtdf2>
 100f248:	00bf5c0e 	bge	zero,r2,100efbc <_strtod_r+0xb3c>
 100f24c:	d9400517 	ldw	r5,20(sp)
 100f250:	a809883a 	mov	r4,r21
 100f254:	1015e6c0 	call	1015e6c <_Bfree>
 100f258:	a809883a 	mov	r4,r21
 100f25c:	b80b883a 	mov	r5,r23
 100f260:	1015e6c0 	call	1015e6c <_Bfree>
 100f264:	a809883a 	mov	r4,r21
 100f268:	b00b883a 	mov	r5,r22
 100f26c:	1015e6c0 	call	1015e6c <_Bfree>
 100f270:	d9401017 	ldw	r5,64(sp)
 100f274:	a809883a 	mov	r4,r21
 100f278:	1015e6c0 	call	1015e6c <_Bfree>
 100f27c:	a809883a 	mov	r4,r21
 100f280:	a00b883a 	mov	r5,r20
 100f284:	1015e6c0 	call	1015e6c <_Bfree>
 100f288:	003cf406 	br	100e65c <_strtod_r+0x1dc>
 100f28c:	0080d434 	movhi	r2,848
 100f290:	288d883a 	add	r6,r5,r2
 100f294:	e1800115 	stw	r6,4(fp)
 100f298:	003f4306 	br	100efa8 <_strtod_r+0xb28>
 100f29c:	8005883a 	mov	r2,r16
 100f2a0:	88e0003c 	xorhi	r3,r17,32768
 100f2a4:	003f2606 	br	100ef40 <_strtod_r+0xac0>
 100f2a8:	1009883a 	mov	r4,r2
 100f2ac:	1018c4c0 	call	1018c4c <__floatunsidf>
 100f2b0:	1021883a 	mov	r16,r2
 100f2b4:	1823883a 	mov	r17,r3
 100f2b8:	003f1e06 	br	100ef34 <_strtod_r+0xab4>
 100f2bc:	da000417 	ldw	r8,16(sp)
 100f2c0:	39c00044 	addi	r7,r7,1
 100f2c4:	003e6706 	br	100ec64 <_strtod_r+0x7e4>
 100f2c8:	d8c00b17 	ldw	r3,44(sp)
 100f2cc:	00bfffc4 	movi	r2,-1
 100f2d0:	18bf831e 	bne	r3,r2,100f0e0 <_strtod_r+0xc60>
 100f2d4:	00c00884 	movi	r3,34
 100f2d8:	a8c00015 	stw	r3,0(r21)
 100f2dc:	009ffc34 	movhi	r2,32752
 100f2e0:	e0800115 	stw	r2,4(fp)
 100f2e4:	e0000015 	stw	zero,0(fp)
 100f2e8:	003fd806 	br	100f24c <_strtod_r+0xdcc>
 100f2ec:	4007883a 	mov	r3,r8
 100f2f0:	000d883a 	mov	r6,zero
 100f2f4:	0029883a 	mov	r20,zero
 100f2f8:	0021883a 	mov	r16,zero
 100f2fc:	003cc906 	br	100e624 <_strtod_r+0x1a4>
 100f300:	00a52834 	movhi	r2,38048
 100f304:	108d6544 	addi	r2,r2,13717
 100f308:	00cff434 	movhi	r3,16336
 100f30c:	18ffffc4 	addi	r3,r3,-1
 100f310:	2809883a 	mov	r4,r5
 100f314:	180f883a 	mov	r7,r3
 100f318:	300b883a 	mov	r5,r6
 100f31c:	100d883a 	mov	r6,r2
 100f320:	100c98c0 	call	100c98c <__ltdf2>
 100f324:	103f250e 	bge	r2,zero,100efbc <_strtod_r+0xb3c>
 100f328:	003fc806 	br	100f24c <_strtod_r+0xdcc>
 100f32c:	0027883a 	mov	r19,zero
 100f330:	04800044 	movi	r18,1
 100f334:	0015883a 	mov	r10,zero
 100f338:	003cc006 	br	100e63c <_strtod_r+0x1bc>
 100f33c:	00800884 	movi	r2,34
 100f340:	a8800015 	stw	r2,0(r21)
 100f344:	019ffc34 	movhi	r6,32752
 100f348:	e1800115 	stw	r6,4(fp)
 100f34c:	e0000015 	stw	zero,0(fp)
 100f350:	003cc206 	br	100e65c <_strtod_r+0x1dc>
 100f354:	015387c4 	movi	r5,19999
 100f358:	003d1e06 	br	100e7d4 <_strtod_r+0x354>
 100f35c:	300a90fa 	slli	r5,r6,3
 100f360:	e0800017 	ldw	r2,0(fp)
 100f364:	e0c00117 	ldw	r3,4(fp)
 100f368:	010040b4 	movhi	r4,258
 100f36c:	211f1104 	addi	r4,r4,31812
 100f370:	290b883a 	add	r5,r5,r4
 100f374:	2a000017 	ldw	r8,0(r5)
 100f378:	2a400117 	ldw	r9,4(r5)
 100f37c:	1009883a 	mov	r4,r2
 100f380:	180b883a 	mov	r5,r3
 100f384:	480f883a 	mov	r7,r9
 100f388:	400d883a 	mov	r6,r8
 100f38c:	100c1d80 	call	100c1d8 <__muldf3>
 100f390:	e0c00115 	stw	r3,4(fp)
 100f394:	e0800015 	stw	r2,0(fp)
 100f398:	003cb006 	br	100e65c <_strtod_r+0x1dc>
 100f39c:	d8800d17 	ldw	r2,52(sp)
 100f3a0:	e0800015 	stw	r2,0(fp)
 100f3a4:	d8c00e17 	ldw	r3,56(sp)
 100f3a8:	e0c00115 	stw	r3,4(fp)
 100f3ac:	9880020c 	andi	r2,r19,8
 100f3b0:	103caa26 	beq	r2,zero,100e65c <_strtod_r+0x1dc>
 100f3b4:	e0800117 	ldw	r2,4(fp)
 100f3b8:	10a00034 	orhi	r2,r2,32768
 100f3bc:	e0800115 	stw	r2,4(fp)
 100f3c0:	003ca606 	br	100e65c <_strtod_r+0x1dc>
 100f3c4:	009ffc34 	movhi	r2,32752
 100f3c8:	e0800115 	stw	r2,4(fp)
 100f3cc:	e0000015 	stw	zero,0(fp)
 100f3d0:	003ff606 	br	100f3ac <_strtod_r+0xf2c>
 100f3d4:	00a00034 	movhi	r2,32768
 100f3d8:	10bfffc4 	addi	r2,r2,-1
 100f3dc:	00ffffc4 	movi	r3,-1
 100f3e0:	e0800115 	stw	r2,4(fp)
 100f3e4:	e0c00015 	stw	r3,0(fp)
 100f3e8:	003ff006 	br	100f3ac <_strtod_r+0xf2c>
 100f3ec:	e0000115 	stw	zero,4(fp)
 100f3f0:	e0000015 	stw	zero,0(fp)
 100f3f4:	003fed06 	br	100f3ac <_strtod_r+0xf2c>
 100f3f8:	d8800e17 	ldw	r2,56(sp)
 100f3fc:	29010cc4 	addi	r4,r5,1075
 100f400:	00fffc34 	movhi	r3,65520
 100f404:	18ffffc4 	addi	r3,r3,-1
 100f408:	2008953a 	slli	r4,r4,20
 100f40c:	10c4703a 	and	r2,r2,r3
 100f410:	d8c00d17 	ldw	r3,52(sp)
 100f414:	1104b03a 	or	r2,r2,r4
 100f418:	e0800115 	stw	r2,4(fp)
 100f41c:	e0c00015 	stw	r3,0(fp)
 100f420:	003fe206 	br	100f3ac <_strtod_r+0xf2c>
 100f424:	00800884 	movi	r2,34
 100f428:	a8800015 	stw	r2,0(r21)
 100f42c:	e0000015 	stw	zero,0(fp)
 100f430:	e0000115 	stw	zero,4(fp)
 100f434:	003f8506 	br	100f24c <_strtod_r+0xdcc>
 100f438:	03800044 	movi	r14,1
 100f43c:	003d7706 	br	100ea1c <_strtod_r+0x59c>
 100f440:	99c5883a 	add	r2,r19,r7
 100f444:	11ffffc4 	addi	r7,r2,-1
 100f448:	00800204 	movi	r2,8
 100f44c:	3cc00044 	addi	r19,r7,1
 100f450:	11c0df16 	blt	r2,r7,100f7d0 <_strtod_r+0x1350>
 100f454:	a08002a4 	muli	r2,r20,10
 100f458:	000f883a 	mov	r7,zero
 100f45c:	1269883a 	add	r20,r2,r9
 100f460:	42000044 	addi	r8,r8,1
 100f464:	da000415 	stw	r8,16(sp)
 100f468:	41000007 	ldb	r4,0(r8)
 100f46c:	003d3706 	br	100e94c <_strtod_r+0x4cc>
 100f470:	d9801317 	ldw	r6,76(sp)
 100f474:	3000511e 	bne	r6,zero,100f5bc <_strtod_r+0x113c>
 100f478:	e0800017 	ldw	r2,0(fp)
 100f47c:	1000d81e 	bne	r2,zero,100f7e0 <_strtod_r+0x1360>
 100f480:	e0c00117 	ldw	r3,4(fp)
 100f484:	01000434 	movhi	r4,16
 100f488:	213fffc4 	addi	r4,r4,-1
 100f48c:	1904703a 	and	r2,r3,r4
 100f490:	1000b01e 	bne	r2,zero,100f754 <_strtod_r+0x12d4>
 100f494:	18dffc2c 	andhi	r3,r3,32752
 100f498:	0081ac34 	movhi	r2,1712
 100f49c:	10c1102e 	bgeu	r2,r3,100f8e0 <_strtod_r+0x1460>
 100f4a0:	a0800517 	ldw	r2,20(r20)
 100f4a4:	1000031e 	bne	r2,zero,100f4b4 <_strtod_r+0x1034>
 100f4a8:	a0c00417 	ldw	r3,16(r20)
 100f4ac:	00800044 	movi	r2,1
 100f4b0:	10c0420e 	bge	r2,r3,100f5bc <_strtod_r+0x113c>
 100f4b4:	a00b883a 	mov	r5,r20
 100f4b8:	a809883a 	mov	r4,r21
 100f4bc:	01800044 	movi	r6,1
 100f4c0:	10167b00 	call	10167b0 <__lshift>
 100f4c4:	1009883a 	mov	r4,r2
 100f4c8:	b00b883a 	mov	r5,r22
 100f4cc:	1029883a 	mov	r20,r2
 100f4d0:	1015fc80 	call	1015fc8 <__mcmp>
 100f4d4:	0080c20e 	bge	zero,r2,100f7e0 <_strtod_r+0x1360>
 100f4d8:	e1800117 	ldw	r6,4(fp)
 100f4dc:	d9001417 	ldw	r4,80(sp)
 100f4e0:	2013003a 	cmpeq	r9,r4,zero
 100f4e4:	4800ef1e 	bne	r9,zero,100f8a4 <_strtod_r+0x1424>
 100f4e8:	30dffc2c 	andhi	r3,r6,32752
 100f4ec:	0081ac34 	movhi	r2,1712
 100f4f0:	10c0ec36 	bltu	r2,r3,100f8a4 <_strtod_r+0x1424>
 100f4f4:	0080dc34 	movhi	r2,880
 100f4f8:	10ffca2e 	bgeu	r2,r3,100f424 <_strtod_r+0xfa4>
 100f4fc:	e0800017 	ldw	r2,0(fp)
 100f500:	e0c00117 	ldw	r3,4(fp)
 100f504:	020e5434 	movhi	r8,14672
 100f508:	000d883a 	mov	r6,zero
 100f50c:	400f883a 	mov	r7,r8
 100f510:	180b883a 	mov	r5,r3
 100f514:	1009883a 	mov	r4,r2
 100f518:	da000c15 	stw	r8,48(sp)
 100f51c:	d8000b15 	stw	zero,44(sp)
 100f520:	100c1d80 	call	100c1d8 <__muldf3>
 100f524:	e0800015 	stw	r2,0(fp)
 100f528:	e0c00115 	stw	r3,4(fp)
 100f52c:	183f471e 	bne	r3,zero,100f24c <_strtod_r+0xdcc>
 100f530:	103f461e 	bne	r2,zero,100f24c <_strtod_r+0xdcc>
 100f534:	00800884 	movi	r2,34
 100f538:	a8800015 	stw	r2,0(r21)
 100f53c:	003f4306 	br	100f24c <_strtod_r+0xdcc>
 100f540:	d8801317 	ldw	r2,76(sp)
 100f544:	1025003a 	cmpeq	r18,r2,zero
 100f548:	9000861e 	bne	r18,zero,100f764 <_strtod_r+0x12e4>
 100f54c:	e1400117 	ldw	r5,4(fp)
 100f550:	00c00434 	movhi	r3,16
 100f554:	18ffffc4 	addi	r3,r3,-1
 100f558:	28c4703a 	and	r2,r5,r3
 100f55c:	10c01b26 	beq	r2,r3,100f5cc <_strtod_r+0x114c>
 100f560:	e1c00017 	ldw	r7,0(fp)
 100f564:	3880004c 	andi	r2,r7,1
 100f568:	1005003a 	cmpeq	r2,r2,zero
 100f56c:	1000791e 	bne	r2,zero,100f754 <_strtod_r+0x12d4>
 100f570:	9000b126 	beq	r18,zero,100f838 <_strtod_r+0x13b8>
 100f574:	e4400117 	ldw	r17,4(fp)
 100f578:	3809883a 	mov	r4,r7
 100f57c:	3821883a 	mov	r16,r7
 100f580:	880b883a 	mov	r5,r17
 100f584:	10160280 	call	1016028 <__ulp>
 100f588:	180f883a 	mov	r7,r3
 100f58c:	880b883a 	mov	r5,r17
 100f590:	8009883a 	mov	r4,r16
 100f594:	100d883a 	mov	r6,r2
 100f598:	100c0e40 	call	100c0e4 <__subdf3>
 100f59c:	1009883a 	mov	r4,r2
 100f5a0:	000d883a 	mov	r6,zero
 100f5a4:	000f883a 	mov	r7,zero
 100f5a8:	180b883a 	mov	r5,r3
 100f5ac:	e0800015 	stw	r2,0(fp)
 100f5b0:	e0c00115 	stw	r3,4(fp)
 100f5b4:	1018b3c0 	call	1018b3c <__nedf2>
 100f5b8:	103f9a26 	beq	r2,zero,100f424 <_strtod_r+0xfa4>
 100f5bc:	d9001417 	ldw	r4,80(sp)
 100f5c0:	2013003a 	cmpeq	r9,r4,zero
 100f5c4:	483f211e 	bne	r9,zero,100f24c <_strtod_r+0xdcc>
 100f5c8:	003fcc06 	br	100f4fc <_strtod_r+0x107c>
 100f5cc:	d9001417 	ldw	r4,80(sp)
 100f5d0:	e1c00017 	ldw	r7,0(fp)
 100f5d4:	2013003a 	cmpeq	r9,r4,zero
 100f5d8:	4800bd1e 	bne	r9,zero,100f8d0 <_strtod_r+0x1450>
 100f5dc:	28dffc2c 	andhi	r3,r5,32752
 100f5e0:	0081a834 	movhi	r2,1696
 100f5e4:	10c0ba36 	bltu	r2,r3,100f8d0 <_strtod_r+0x1450>
 100f5e8:	1804d53a 	srli	r2,r3,20
 100f5ec:	00c01ac4 	movi	r3,107
 100f5f0:	013fffc4 	movi	r4,-1
 100f5f4:	1887c83a 	sub	r3,r3,r2
 100f5f8:	20c4983a 	sll	r2,r4,r3
 100f5fc:	11ffd91e 	bne	r2,r7,100f564 <_strtod_r+0x10e4>
 100f600:	28dffc2c 	andhi	r3,r5,32752
 100f604:	00800434 	movhi	r2,16
 100f608:	188d883a 	add	r6,r3,r2
 100f60c:	e1800115 	stw	r6,4(fp)
 100f610:	e0000015 	stw	zero,0(fp)
 100f614:	483f0d1e 	bne	r9,zero,100f24c <_strtod_r+0xdcc>
 100f618:	003fb806 	br	100f4fc <_strtod_r+0x107c>
 100f61c:	0021883a 	mov	r16,zero
 100f620:	0005883a 	mov	r2,zero
 100f624:	044ff834 	movhi	r17,16352
 100f628:	00eff834 	movhi	r3,49120
 100f62c:	003e8606 	br	100f048 <_strtod_r+0xbc8>
 100f630:	803d9e26 	beq	r16,zero,100ecac <_strtod_r+0x82c>
 100f634:	0421c83a 	sub	r16,zero,r16
 100f638:	814003cc 	andi	r5,r16,15
 100f63c:	28000f26 	beq	r5,zero,100f67c <_strtod_r+0x11fc>
 100f640:	280a90fa 	slli	r5,r5,3
 100f644:	010040b4 	movhi	r4,258
 100f648:	211f1104 	addi	r4,r4,31812
 100f64c:	e0800017 	ldw	r2,0(fp)
 100f650:	290b883a 	add	r5,r5,r4
 100f654:	2a000017 	ldw	r8,0(r5)
 100f658:	e0c00117 	ldw	r3,4(fp)
 100f65c:	2a400117 	ldw	r9,4(r5)
 100f660:	1009883a 	mov	r4,r2
 100f664:	180b883a 	mov	r5,r3
 100f668:	480f883a 	mov	r7,r9
 100f66c:	400d883a 	mov	r6,r8
 100f670:	100c59c0 	call	100c59c <__divdf3>
 100f674:	e0c00115 	stw	r3,4(fp)
 100f678:	e0800015 	stw	r2,0(fp)
 100f67c:	8021d13a 	srai	r16,r16,4
 100f680:	803d8a26 	beq	r16,zero,100ecac <_strtod_r+0x82c>
 100f684:	008007c4 	movi	r2,31
 100f688:	14002d16 	blt	r2,r16,100f740 <_strtod_r+0x12c0>
 100f68c:	8080040c 	andi	r2,r16,16
 100f690:	10009926 	beq	r2,zero,100f8f8 <_strtod_r+0x1478>
 100f694:	00801a84 	movi	r2,106
 100f698:	d8801415 	stw	r2,80(sp)
 100f69c:	0400110e 	bge	zero,r16,100f6e4 <_strtod_r+0x1264>
 100f6a0:	044040b4 	movhi	r17,258
 100f6a4:	8c5e2b04 	addi	r17,r17,30892
 100f6a8:	8080004c 	andi	r2,r16,1
 100f6ac:	1005003a 	cmpeq	r2,r2,zero
 100f6b0:	1000091e 	bne	r2,zero,100f6d8 <_strtod_r+0x1258>
 100f6b4:	e0800017 	ldw	r2,0(fp)
 100f6b8:	e0c00117 	ldw	r3,4(fp)
 100f6bc:	89800017 	ldw	r6,0(r17)
 100f6c0:	89c00117 	ldw	r7,4(r17)
 100f6c4:	180b883a 	mov	r5,r3
 100f6c8:	1009883a 	mov	r4,r2
 100f6cc:	100c1d80 	call	100c1d8 <__muldf3>
 100f6d0:	e0c00115 	stw	r3,4(fp)
 100f6d4:	e0800015 	stw	r2,0(fp)
 100f6d8:	8021d07a 	srai	r16,r16,1
 100f6dc:	8c400204 	addi	r17,r17,8
 100f6e0:	043ff116 	blt	zero,r16,100f6a8 <_strtod_r+0x1228>
 100f6e4:	d8c01417 	ldw	r3,80(sp)
 100f6e8:	18000d26 	beq	r3,zero,100f720 <_strtod_r+0x12a0>
 100f6ec:	e1000117 	ldw	r4,4(fp)
 100f6f0:	00c01ac4 	movi	r3,107
 100f6f4:	209ffc2c 	andhi	r2,r4,32752
 100f6f8:	1004d53a 	srli	r2,r2,20
 100f6fc:	1887c83a 	sub	r3,r3,r2
 100f700:	00c0070e 	bge	zero,r3,100f720 <_strtod_r+0x12a0>
 100f704:	008007c4 	movi	r2,31
 100f708:	10c0900e 	bge	r2,r3,100f94c <_strtod_r+0x14cc>
 100f70c:	00800d04 	movi	r2,52
 100f710:	e0000015 	stw	zero,0(fp)
 100f714:	10c0870e 	bge	r2,r3,100f934 <_strtod_r+0x14b4>
 100f718:	0180dc34 	movhi	r6,880
 100f71c:	e1800115 	stw	r6,4(fp)
 100f720:	e0800017 	ldw	r2,0(fp)
 100f724:	e0c00117 	ldw	r3,4(fp)
 100f728:	000d883a 	mov	r6,zero
 100f72c:	000f883a 	mov	r7,zero
 100f730:	180b883a 	mov	r5,r3
 100f734:	1009883a 	mov	r4,r2
 100f738:	1018b3c0 	call	1018b3c <__nedf2>
 100f73c:	103d5c1e 	bne	r2,zero,100ecb0 <_strtod_r+0x830>
 100f740:	00800884 	movi	r2,34
 100f744:	a8800015 	stw	r2,0(r21)
 100f748:	e0000015 	stw	zero,0(fp)
 100f74c:	e0000115 	stw	zero,4(fp)
 100f750:	003bc206 	br	100e65c <_strtod_r+0x1dc>
 100f754:	d8801417 	ldw	r2,80(sp)
 100f758:	1013003a 	cmpeq	r9,r2,zero
 100f75c:	483ebb1e 	bne	r9,zero,100f24c <_strtod_r+0xdcc>
 100f760:	003f6606 	br	100f4fc <_strtod_r+0x107c>
 100f764:	e1800117 	ldw	r6,4(fp)
 100f768:	00c00434 	movhi	r3,16
 100f76c:	18ffffc4 	addi	r3,r3,-1
 100f770:	30c4703a 	and	r2,r6,r3
 100f774:	103f7a1e 	bne	r2,zero,100f560 <_strtod_r+0x10e0>
 100f778:	e1c00017 	ldw	r7,0(fp)
 100f77c:	383f791e 	bne	r7,zero,100f564 <_strtod_r+0x10e4>
 100f780:	003f5606 	br	100f4dc <_strtod_r+0x105c>
 100f784:	d9800f17 	ldw	r6,60(sp)
 100f788:	00bffa84 	movi	r2,-22
 100f78c:	30bcd416 	blt	r6,r2,100eae0 <_strtod_r+0x660>
 100f790:	317ffe24 	muli	r5,r6,-8
 100f794:	010040b4 	movhi	r4,258
 100f798:	211f1104 	addi	r4,r4,31812
 100f79c:	e0800017 	ldw	r2,0(fp)
 100f7a0:	290b883a 	add	r5,r5,r4
 100f7a4:	2a000017 	ldw	r8,0(r5)
 100f7a8:	e0c00117 	ldw	r3,4(fp)
 100f7ac:	2a400117 	ldw	r9,4(r5)
 100f7b0:	1009883a 	mov	r4,r2
 100f7b4:	180b883a 	mov	r5,r3
 100f7b8:	480f883a 	mov	r7,r9
 100f7bc:	400d883a 	mov	r6,r8
 100f7c0:	100c59c0 	call	100c59c <__divdf3>
 100f7c4:	e0c00115 	stw	r3,4(fp)
 100f7c8:	e0800015 	stw	r2,0(fp)
 100f7cc:	003ba306 	br	100e65c <_strtod_r+0x1dc>
 100f7d0:	00800404 	movi	r2,16
 100f7d4:	14c02f0e 	bge	r2,r19,100f894 <_strtod_r+0x1414>
 100f7d8:	000f883a 	mov	r7,zero
 100f7dc:	003f2006 	br	100f460 <_strtod_r+0xfe0>
 100f7e0:	d9801417 	ldw	r6,80(sp)
 100f7e4:	3013003a 	cmpeq	r9,r6,zero
 100f7e8:	483e981e 	bne	r9,zero,100f24c <_strtod_r+0xdcc>
 100f7ec:	003f4306 	br	100f4fc <_strtod_r+0x107c>
 100f7f0:	00801a44 	movi	r2,105
 100f7f4:	20bc6326 	beq	r4,r2,100e984 <_strtod_r+0x504>
 100f7f8:	00801b84 	movi	r2,110
 100f7fc:	20bbba1e 	bne	r4,r2,100e6e8 <_strtod_r+0x268>
 100f800:	dc000404 	addi	r16,sp,16
 100f804:	8009883a 	mov	r4,r16
 100f808:	014040b4 	movhi	r5,258
 100f80c:	295e2a04 	addi	r5,r5,30888
 100f810:	100e4380 	call	100e438 <match>
 100f814:	103bb426 	beq	r2,zero,100e6e8 <_strtod_r+0x268>
 100f818:	d8800417 	ldw	r2,16(sp)
 100f81c:	00c00a04 	movi	r3,40
 100f820:	11000007 	ldb	r4,0(r2)
 100f824:	20c03626 	beq	r4,r3,100f900 <_strtod_r+0x1480>
 100f828:	01bffe34 	movhi	r6,65528
 100f82c:	e1800115 	stw	r6,4(fp)
 100f830:	e0000015 	stw	zero,0(fp)
 100f834:	003b8906 	br	100e65c <_strtod_r+0x1dc>
 100f838:	e4400117 	ldw	r17,4(fp)
 100f83c:	3809883a 	mov	r4,r7
 100f840:	3821883a 	mov	r16,r7
 100f844:	880b883a 	mov	r5,r17
 100f848:	10160280 	call	1016028 <__ulp>
 100f84c:	100d883a 	mov	r6,r2
 100f850:	880b883a 	mov	r5,r17
 100f854:	180f883a 	mov	r7,r3
 100f858:	8009883a 	mov	r4,r16
 100f85c:	100c1640 	call	100c164 <__adddf3>
 100f860:	d9801417 	ldw	r6,80(sp)
 100f864:	e0c00115 	stw	r3,4(fp)
 100f868:	e0800015 	stw	r2,0(fp)
 100f86c:	3013003a 	cmpeq	r9,r6,zero
 100f870:	483e761e 	bne	r9,zero,100f24c <_strtod_r+0xdcc>
 100f874:	003f2106 	br	100f4fc <_strtod_r+0x107c>
 100f878:	000f883a 	mov	r7,zero
 100f87c:	003cf006 	br	100ec40 <_strtod_r+0x7c0>
 100f880:	0080d434 	movhi	r2,848
 100f884:	188d883a 	add	r6,r3,r2
 100f888:	d8001415 	stw	zero,80(sp)
 100f88c:	e1800115 	stw	r6,4(fp)
 100f890:	003d0706 	br	100ecb0 <_strtod_r+0x830>
 100f894:	808002a4 	muli	r2,r16,10
 100f898:	000f883a 	mov	r7,zero
 100f89c:	1261883a 	add	r16,r2,r9
 100f8a0:	003eef06 	br	100f460 <_strtod_r+0xfe0>
 100f8a4:	309ffc2c 	andhi	r2,r6,32752
 100f8a8:	00fffc34 	movhi	r3,65520
 100f8ac:	10c5883a 	add	r2,r2,r3
 100f8b0:	00c00434 	movhi	r3,16
 100f8b4:	18ffffc4 	addi	r3,r3,-1
 100f8b8:	10ccb03a 	or	r6,r2,r3
 100f8bc:	01ffffc4 	movi	r7,-1
 100f8c0:	e1800115 	stw	r6,4(fp)
 100f8c4:	e1c00015 	stw	r7,0(fp)
 100f8c8:	483e601e 	bne	r9,zero,100f24c <_strtod_r+0xdcc>
 100f8cc:	003f0b06 	br	100f4fc <_strtod_r+0x107c>
 100f8d0:	00bfffc4 	movi	r2,-1
 100f8d4:	003f4906 	br	100f5fc <_strtod_r+0x117c>
 100f8d8:	0025883a 	mov	r18,zero
 100f8dc:	003cb106 	br	100eba4 <_strtod_r+0x724>
 100f8e0:	d8c01417 	ldw	r3,80(sp)
 100f8e4:	1813003a 	cmpeq	r9,r3,zero
 100f8e8:	483e581e 	bne	r9,zero,100f24c <_strtod_r+0xdcc>
 100f8ec:	003f0306 	br	100f4fc <_strtod_r+0x107c>
 100f8f0:	980f883a 	mov	r7,r19
 100f8f4:	003ed406 	br	100f448 <_strtod_r+0xfc8>
 100f8f8:	d8001415 	stw	zero,80(sp)
 100f8fc:	003f6706 	br	100f69c <_strtod_r+0x121c>
 100f900:	8009883a 	mov	r4,r16
 100f904:	014040f4 	movhi	r5,259
 100f908:	2960ac04 	addi	r5,r5,-32080
 100f90c:	d9800d04 	addi	r6,sp,52
 100f910:	10150240 	call	1015024 <__hexnan>
 100f914:	00c00144 	movi	r3,5
 100f918:	10ffc31e 	bne	r2,r3,100f828 <_strtod_r+0x13a8>
 100f91c:	d8800e17 	ldw	r2,56(sp)
 100f920:	d9c00d17 	ldw	r7,52(sp)
 100f924:	119ffc34 	orhi	r6,r2,32752
 100f928:	e1800115 	stw	r6,4(fp)
 100f92c:	e1c00015 	stw	r7,0(fp)
 100f930:	003b4a06 	br	100e65c <_strtod_r+0x1dc>
 100f934:	18fff804 	addi	r3,r3,-32
 100f938:	00bfffc4 	movi	r2,-1
 100f93c:	10c4983a 	sll	r2,r2,r3
 100f940:	208c703a 	and	r6,r4,r2
 100f944:	e1800115 	stw	r6,4(fp)
 100f948:	003f7506 	br	100f720 <_strtod_r+0x12a0>
 100f94c:	00bfffc4 	movi	r2,-1
 100f950:	10c4983a 	sll	r2,r2,r3
 100f954:	e0c00017 	ldw	r3,0(fp)
 100f958:	188e703a 	and	r7,r3,r2
 100f95c:	e1c00015 	stw	r7,0(fp)
 100f960:	003f6f06 	br	100f720 <_strtod_r+0x12a0>

0100f964 <strtof>:
 100f964:	defffa04 	addi	sp,sp,-24
 100f968:	dd000415 	stw	r20,16(sp)
 100f96c:	050040f4 	movhi	r20,259
 100f970:	a5267004 	addi	r20,r20,-26176
 100f974:	2007883a 	mov	r3,r4
 100f978:	a1000017 	ldw	r4,0(r20)
 100f97c:	280d883a 	mov	r6,r5
 100f980:	180b883a 	mov	r5,r3
 100f984:	dfc00515 	stw	ra,20(sp)
 100f988:	dcc00315 	stw	r19,12(sp)
 100f98c:	dc800215 	stw	r18,8(sp)
 100f990:	dc400115 	stw	r17,4(sp)
 100f994:	dc000015 	stw	r16,0(sp)
 100f998:	100e4800 	call	100e480 <_strtod_r>
 100f99c:	180b883a 	mov	r5,r3
 100f9a0:	1009883a 	mov	r4,r2
 100f9a4:	1823883a 	mov	r17,r3
 100f9a8:	1021883a 	mov	r16,r2
 100f9ac:	100cc1c0 	call	100cc1c <__truncdfsf2>
 100f9b0:	1009883a 	mov	r4,r2
 100f9b4:	000b883a 	mov	r5,zero
 100f9b8:	1025883a 	mov	r18,r2
 100f9bc:	1027883a 	mov	r19,r2
 100f9c0:	1018a4c0 	call	1018a4c <__nesf2>
 100f9c4:	000d883a 	mov	r6,zero
 100f9c8:	000f883a 	mov	r7,zero
 100f9cc:	8009883a 	mov	r4,r16
 100f9d0:	880b883a 	mov	r5,r17
 100f9d4:	10000e1e 	bne	r2,zero,100fa10 <strtof+0xac>
 100f9d8:	1018b3c0 	call	1018b3c <__nedf2>
 100f9dc:	10000c26 	beq	r2,zero,100fa10 <strtof+0xac>
 100f9e0:	a0c00017 	ldw	r3,0(r20)
 100f9e4:	00800884 	movi	r2,34
 100f9e8:	18800015 	stw	r2,0(r3)
 100f9ec:	9805883a 	mov	r2,r19
 100f9f0:	dfc00517 	ldw	ra,20(sp)
 100f9f4:	dd000417 	ldw	r20,16(sp)
 100f9f8:	dcc00317 	ldw	r19,12(sp)
 100f9fc:	dc800217 	ldw	r18,8(sp)
 100fa00:	dc400117 	ldw	r17,4(sp)
 100fa04:	dc000017 	ldw	r16,0(sp)
 100fa08:	dec00604 	addi	sp,sp,24
 100fa0c:	f800283a 	ret
 100fa10:	9009883a 	mov	r4,r18
 100fa14:	015fe034 	movhi	r5,32640
 100fa18:	297fffc4 	addi	r5,r5,-1
 100fa1c:	1018ac40 	call	1018ac4 <__gtsf2>
 100fa20:	00ffffc4 	movi	r3,-1
 100fa24:	011ffc34 	movhi	r4,32752
 100fa28:	213fffc4 	addi	r4,r4,-1
 100fa2c:	200f883a 	mov	r7,r4
 100fa30:	180d883a 	mov	r6,r3
 100fa34:	8009883a 	mov	r4,r16
 100fa38:	880b883a 	mov	r5,r17
 100fa3c:	00800f16 	blt	zero,r2,100fa7c <strtof+0x118>
 100fa40:	9009883a 	mov	r4,r18
 100fa44:	017fe034 	movhi	r5,65408
 100fa48:	297fffc4 	addi	r5,r5,-1
 100fa4c:	100badc0 	call	100badc <__ltsf2>
 100fa50:	023fffc4 	movi	r8,-1
 100fa54:	027ffc34 	movhi	r9,65520
 100fa58:	4a7fffc4 	addi	r9,r9,-1
 100fa5c:	880b883a 	mov	r5,r17
 100fa60:	480f883a 	mov	r7,r9
 100fa64:	8009883a 	mov	r4,r16
 100fa68:	400d883a 	mov	r6,r8
 100fa6c:	103fdf0e 	bge	r2,zero,100f9ec <strtof+0x88>
 100fa70:	100c98c0 	call	100c98c <__ltdf2>
 100fa74:	103fda0e 	bge	r2,zero,100f9e0 <strtof+0x7c>
 100fa78:	003fdc06 	br	100f9ec <strtof+0x88>
 100fa7c:	100c87c0 	call	100c87c <__gtdf2>
 100fa80:	00bfd70e 	bge	zero,r2,100f9e0 <strtof+0x7c>
 100fa84:	003fee06 	br	100fa40 <strtof+0xdc>

0100fa88 <strtod>:
 100fa88:	018040f4 	movhi	r6,259
 100fa8c:	31a67004 	addi	r6,r6,-26176
 100fa90:	2007883a 	mov	r3,r4
 100fa94:	31000017 	ldw	r4,0(r6)
 100fa98:	280d883a 	mov	r6,r5
 100fa9c:	180b883a 	mov	r5,r3
 100faa0:	100e4801 	jmpi	100e480 <_strtod_r>

0100faa4 <_strtol_r>:
 100faa4:	defff304 	addi	sp,sp,-52
 100faa8:	008040f4 	movhi	r2,259
 100faac:	10a67604 	addi	r2,r2,-26152
 100fab0:	dcc00615 	stw	r19,24(sp)
 100fab4:	14c00017 	ldw	r19,0(r2)
 100fab8:	ddc00a15 	stw	r23,40(sp)
 100fabc:	dc000315 	stw	r16,12(sp)
 100fac0:	dfc00c15 	stw	ra,48(sp)
 100fac4:	df000b15 	stw	fp,44(sp)
 100fac8:	dd800915 	stw	r22,36(sp)
 100facc:	dd400815 	stw	r21,32(sp)
 100fad0:	dd000715 	stw	r20,28(sp)
 100fad4:	dc800515 	stw	r18,20(sp)
 100fad8:	dc400415 	stw	r17,16(sp)
 100fadc:	282f883a 	mov	r23,r5
 100fae0:	d9000015 	stw	r4,0(sp)
 100fae4:	d9800115 	stw	r6,4(sp)
 100fae8:	2821883a 	mov	r16,r5
 100faec:	84400007 	ldb	r17,0(r16)
 100faf0:	84000044 	addi	r16,r16,1
 100faf4:	9c47883a 	add	r3,r19,r17
 100faf8:	18800003 	ldbu	r2,0(r3)
 100fafc:	1080020c 	andi	r2,r2,8
 100fb00:	103ffa1e 	bne	r2,zero,100faec <_strtol_r+0x48>
 100fb04:	00800b44 	movi	r2,45
 100fb08:	88805c26 	beq	r17,r2,100fc7c <_strtol_r+0x1d8>
 100fb0c:	00800ac4 	movi	r2,43
 100fb10:	88805726 	beq	r17,r2,100fc70 <_strtol_r+0x1cc>
 100fb14:	0039883a 	mov	fp,zero
 100fb18:	3807003a 	cmpeq	r3,r7,zero
 100fb1c:	1800431e 	bne	r3,zero,100fc2c <_strtol_r+0x188>
 100fb20:	00800404 	movi	r2,16
 100fb24:	38804126 	beq	r7,r2,100fc2c <_strtol_r+0x188>
 100fb28:	3829883a 	mov	r20,r7
 100fb2c:	e02cc03a 	cmpne	r22,fp,zero
 100fb30:	b0004b1e 	bne	r22,zero,100fc60 <_strtol_r+0x1bc>
 100fb34:	04a00034 	movhi	r18,32768
 100fb38:	94bfffc4 	addi	r18,r18,-1
 100fb3c:	9009883a 	mov	r4,r18
 100fb40:	a00b883a 	mov	r5,r20
 100fb44:	d9c00215 	stw	r7,8(sp)
 100fb48:	100cdd40 	call	100cdd4 <__umodsi3>
 100fb4c:	9009883a 	mov	r4,r18
 100fb50:	a00b883a 	mov	r5,r20
 100fb54:	102b883a 	mov	r21,r2
 100fb58:	100cdcc0 	call	100cdcc <__udivsi3>
 100fb5c:	1011883a 	mov	r8,r2
 100fb60:	9c45883a 	add	r2,r19,r17
 100fb64:	11000003 	ldbu	r4,0(r2)
 100fb68:	000b883a 	mov	r5,zero
 100fb6c:	000d883a 	mov	r6,zero
 100fb70:	20c0010c 	andi	r3,r4,4
 100fb74:	d9c00217 	ldw	r7,8(sp)
 100fb78:	18000e26 	beq	r3,zero,100fbb4 <_strtol_r+0x110>
 100fb7c:	88fff404 	addi	r3,r17,-48
 100fb80:	19c0140e 	bge	r3,r7,100fbd4 <_strtol_r+0x130>
 100fb84:	30003116 	blt	r6,zero,100fc4c <_strtol_r+0x1a8>
 100fb88:	41403036 	bltu	r8,r5,100fc4c <_strtol_r+0x1a8>
 100fb8c:	2a002e26 	beq	r5,r8,100fc48 <_strtol_r+0x1a4>
 100fb90:	2d05383a 	mul	r2,r5,r20
 100fb94:	01800044 	movi	r6,1
 100fb98:	10cb883a 	add	r5,r2,r3
 100fb9c:	84400007 	ldb	r17,0(r16)
 100fba0:	84000044 	addi	r16,r16,1
 100fba4:	9c45883a 	add	r2,r19,r17
 100fba8:	11000003 	ldbu	r4,0(r2)
 100fbac:	20c0010c 	andi	r3,r4,4
 100fbb0:	183ff21e 	bne	r3,zero,100fb7c <_strtol_r+0xd8>
 100fbb4:	208000cc 	andi	r2,r4,3
 100fbb8:	10000626 	beq	r2,zero,100fbd4 <_strtol_r+0x130>
 100fbbc:	2080004c 	andi	r2,r4,1
 100fbc0:	1005003a 	cmpeq	r2,r2,zero
 100fbc4:	1000231e 	bne	r2,zero,100fc54 <_strtol_r+0x1b0>
 100fbc8:	00800dc4 	movi	r2,55
 100fbcc:	8887c83a 	sub	r3,r17,r2
 100fbd0:	19ffec16 	blt	r3,r7,100fb84 <_strtol_r+0xe0>
 100fbd4:	30002d16 	blt	r6,zero,100fc8c <_strtol_r+0x1e8>
 100fbd8:	b000231e 	bne	r22,zero,100fc68 <_strtol_r+0x1c4>
 100fbdc:	2807883a 	mov	r3,r5
 100fbe0:	d8800117 	ldw	r2,4(sp)
 100fbe4:	10000426 	beq	r2,zero,100fbf8 <_strtol_r+0x154>
 100fbe8:	30000126 	beq	r6,zero,100fbf0 <_strtol_r+0x14c>
 100fbec:	85ffffc4 	addi	r23,r16,-1
 100fbf0:	d9000117 	ldw	r4,4(sp)
 100fbf4:	25c00015 	stw	r23,0(r4)
 100fbf8:	1805883a 	mov	r2,r3
 100fbfc:	dfc00c17 	ldw	ra,48(sp)
 100fc00:	df000b17 	ldw	fp,44(sp)
 100fc04:	ddc00a17 	ldw	r23,40(sp)
 100fc08:	dd800917 	ldw	r22,36(sp)
 100fc0c:	dd400817 	ldw	r21,32(sp)
 100fc10:	dd000717 	ldw	r20,28(sp)
 100fc14:	dcc00617 	ldw	r19,24(sp)
 100fc18:	dc800517 	ldw	r18,20(sp)
 100fc1c:	dc400417 	ldw	r17,16(sp)
 100fc20:	dc000317 	ldw	r16,12(sp)
 100fc24:	dec00d04 	addi	sp,sp,52
 100fc28:	f800283a 	ret
 100fc2c:	00800c04 	movi	r2,48
 100fc30:	88801d26 	beq	r17,r2,100fca8 <_strtol_r+0x204>
 100fc34:	183fbc26 	beq	r3,zero,100fb28 <_strtol_r+0x84>
 100fc38:	00800c04 	movi	r2,48
 100fc3c:	88802726 	beq	r17,r2,100fcdc <_strtol_r+0x238>
 100fc40:	01c00284 	movi	r7,10
 100fc44:	003fb806 	br	100fb28 <_strtol_r+0x84>
 100fc48:	a8ffd10e 	bge	r21,r3,100fb90 <_strtol_r+0xec>
 100fc4c:	01bfffc4 	movi	r6,-1
 100fc50:	003fd206 	br	100fb9c <_strtol_r+0xf8>
 100fc54:	008015c4 	movi	r2,87
 100fc58:	8887c83a 	sub	r3,r17,r2
 100fc5c:	003fdc06 	br	100fbd0 <_strtol_r+0x12c>
 100fc60:	04a00034 	movhi	r18,32768
 100fc64:	003fb506 	br	100fb3c <_strtol_r+0x98>
 100fc68:	0147c83a 	sub	r3,zero,r5
 100fc6c:	003fdc06 	br	100fbe0 <_strtol_r+0x13c>
 100fc70:	84400007 	ldb	r17,0(r16)
 100fc74:	84000044 	addi	r16,r16,1
 100fc78:	003fa606 	br	100fb14 <_strtol_r+0x70>
 100fc7c:	84400007 	ldb	r17,0(r16)
 100fc80:	07000044 	movi	fp,1
 100fc84:	84000044 	addi	r16,r16,1
 100fc88:	003fa306 	br	100fb18 <_strtol_r+0x74>
 100fc8c:	e005003a 	cmpeq	r2,fp,zero
 100fc90:	10000f1e 	bne	r2,zero,100fcd0 <_strtol_r+0x22c>
 100fc94:	00e00034 	movhi	r3,32768
 100fc98:	d9000017 	ldw	r4,0(sp)
 100fc9c:	00800884 	movi	r2,34
 100fca0:	20800015 	stw	r2,0(r4)
 100fca4:	003fce06 	br	100fbe0 <_strtol_r+0x13c>
 100fca8:	81000007 	ldb	r4,0(r16)
 100fcac:	00801e04 	movi	r2,120
 100fcb0:	20800226 	beq	r4,r2,100fcbc <_strtol_r+0x218>
 100fcb4:	00801604 	movi	r2,88
 100fcb8:	20bfde1e 	bne	r4,r2,100fc34 <_strtol_r+0x190>
 100fcbc:	84400047 	ldb	r17,1(r16)
 100fcc0:	01c00404 	movi	r7,16
 100fcc4:	84000084 	addi	r16,r16,2
 100fcc8:	3829883a 	mov	r20,r7
 100fccc:	003f9706 	br	100fb2c <_strtol_r+0x88>
 100fcd0:	00e00034 	movhi	r3,32768
 100fcd4:	18ffffc4 	addi	r3,r3,-1
 100fcd8:	003fef06 	br	100fc98 <_strtol_r+0x1f4>
 100fcdc:	01c00204 	movi	r7,8
 100fce0:	3829883a 	mov	r20,r7
 100fce4:	003f9106 	br	100fb2c <_strtol_r+0x88>

0100fce8 <strtol>:
 100fce8:	008040f4 	movhi	r2,259
 100fcec:	10a67004 	addi	r2,r2,-26176
 100fcf0:	2013883a 	mov	r9,r4
 100fcf4:	11000017 	ldw	r4,0(r2)
 100fcf8:	2805883a 	mov	r2,r5
 100fcfc:	300f883a 	mov	r7,r6
 100fd00:	480b883a 	mov	r5,r9
 100fd04:	100d883a 	mov	r6,r2
 100fd08:	100faa41 	jmpi	100faa4 <_strtol_r>

0100fd0c <_strtoul_r>:
 100fd0c:	defff604 	addi	sp,sp,-40
 100fd10:	008040f4 	movhi	r2,259
 100fd14:	10a67604 	addi	r2,r2,-26152
 100fd18:	dd000415 	stw	r20,16(sp)
 100fd1c:	15000017 	ldw	r20,0(r2)
 100fd20:	ddc00715 	stw	r23,28(sp)
 100fd24:	dd800615 	stw	r22,24(sp)
 100fd28:	dd400515 	stw	r21,20(sp)
 100fd2c:	dc800215 	stw	r18,8(sp)
 100fd30:	dc000015 	stw	r16,0(sp)
 100fd34:	dfc00915 	stw	ra,36(sp)
 100fd38:	df000815 	stw	fp,32(sp)
 100fd3c:	dcc00315 	stw	r19,12(sp)
 100fd40:	dc400115 	stw	r17,4(sp)
 100fd44:	282b883a 	mov	r21,r5
 100fd48:	202f883a 	mov	r23,r4
 100fd4c:	302d883a 	mov	r22,r6
 100fd50:	3825883a 	mov	r18,r7
 100fd54:	2821883a 	mov	r16,r5
 100fd58:	84400007 	ldb	r17,0(r16)
 100fd5c:	84000044 	addi	r16,r16,1
 100fd60:	a447883a 	add	r3,r20,r17
 100fd64:	18800003 	ldbu	r2,0(r3)
 100fd68:	1080020c 	andi	r2,r2,8
 100fd6c:	103ffa1e 	bne	r2,zero,100fd58 <_strtoul_r+0x4c>
 100fd70:	00800b44 	movi	r2,45
 100fd74:	88805626 	beq	r17,r2,100fed0 <_strtoul_r+0x1c4>
 100fd78:	00800ac4 	movi	r2,43
 100fd7c:	88805126 	beq	r17,r2,100fec4 <_strtoul_r+0x1b8>
 100fd80:	0039883a 	mov	fp,zero
 100fd84:	9007003a 	cmpeq	r3,r18,zero
 100fd88:	18003b1e 	bne	r3,zero,100fe78 <_strtoul_r+0x16c>
 100fd8c:	00800404 	movi	r2,16
 100fd90:	90803926 	beq	r18,r2,100fe78 <_strtoul_r+0x16c>
 100fd94:	013fffc4 	movi	r4,-1
 100fd98:	900b883a 	mov	r5,r18
 100fd9c:	100cdcc0 	call	100cdcc <__udivsi3>
 100fda0:	013fffc4 	movi	r4,-1
 100fda4:	900b883a 	mov	r5,r18
 100fda8:	1027883a 	mov	r19,r2
 100fdac:	100cdd40 	call	100cdd4 <__umodsi3>
 100fdb0:	1011883a 	mov	r8,r2
 100fdb4:	900f883a 	mov	r7,r18
 100fdb8:	a445883a 	add	r2,r20,r17
 100fdbc:	11000003 	ldbu	r4,0(r2)
 100fdc0:	000b883a 	mov	r5,zero
 100fdc4:	000d883a 	mov	r6,zero
 100fdc8:	20c0010c 	andi	r3,r4,4
 100fdcc:	18000e26 	beq	r3,zero,100fe08 <_strtoul_r+0xfc>
 100fdd0:	88fff404 	addi	r3,r17,-48
 100fdd4:	1c80140e 	bge	r3,r18,100fe28 <_strtoul_r+0x11c>
 100fdd8:	30003316 	blt	r6,zero,100fea8 <_strtoul_r+0x19c>
 100fddc:	99403236 	bltu	r19,r5,100fea8 <_strtoul_r+0x19c>
 100fde0:	2cc03026 	beq	r5,r19,100fea4 <_strtoul_r+0x198>
 100fde4:	29c5383a 	mul	r2,r5,r7
 100fde8:	01800044 	movi	r6,1
 100fdec:	10cb883a 	add	r5,r2,r3
 100fdf0:	84400007 	ldb	r17,0(r16)
 100fdf4:	84000044 	addi	r16,r16,1
 100fdf8:	a445883a 	add	r2,r20,r17
 100fdfc:	11000003 	ldbu	r4,0(r2)
 100fe00:	20c0010c 	andi	r3,r4,4
 100fe04:	183ff21e 	bne	r3,zero,100fdd0 <_strtoul_r+0xc4>
 100fe08:	208000cc 	andi	r2,r4,3
 100fe0c:	10000626 	beq	r2,zero,100fe28 <_strtoul_r+0x11c>
 100fe10:	2080004c 	andi	r2,r4,1
 100fe14:	1005003a 	cmpeq	r2,r2,zero
 100fe18:	1000251e 	bne	r2,zero,100feb0 <_strtoul_r+0x1a4>
 100fe1c:	00800dc4 	movi	r2,55
 100fe20:	8887c83a 	sub	r3,r17,r2
 100fe24:	1cbfec16 	blt	r3,r18,100fdd8 <_strtoul_r+0xcc>
 100fe28:	3000400e 	bge	r6,zero,100ff2c <_strtoul_r+0x220>
 100fe2c:	00800884 	movi	r2,34
 100fe30:	017fffc4 	movi	r5,-1
 100fe34:	b8800015 	stw	r2,0(r23)
 100fe38:	b0000226 	beq	r22,zero,100fe44 <_strtoul_r+0x138>
 100fe3c:	30001f1e 	bne	r6,zero,100febc <_strtoul_r+0x1b0>
 100fe40:	b5400015 	stw	r21,0(r22)
 100fe44:	2805883a 	mov	r2,r5
 100fe48:	dfc00917 	ldw	ra,36(sp)
 100fe4c:	df000817 	ldw	fp,32(sp)
 100fe50:	ddc00717 	ldw	r23,28(sp)
 100fe54:	dd800617 	ldw	r22,24(sp)
 100fe58:	dd400517 	ldw	r21,20(sp)
 100fe5c:	dd000417 	ldw	r20,16(sp)
 100fe60:	dcc00317 	ldw	r19,12(sp)
 100fe64:	dc800217 	ldw	r18,8(sp)
 100fe68:	dc400117 	ldw	r17,4(sp)
 100fe6c:	dc000017 	ldw	r16,0(sp)
 100fe70:	dec00a04 	addi	sp,sp,40
 100fe74:	f800283a 	ret
 100fe78:	00800c04 	movi	r2,48
 100fe7c:	88801826 	beq	r17,r2,100fee0 <_strtoul_r+0x1d4>
 100fe80:	183fc426 	beq	r3,zero,100fd94 <_strtoul_r+0x88>
 100fe84:	00800c04 	movi	r2,48
 100fe88:	88802226 	beq	r17,r2,100ff14 <_strtoul_r+0x208>
 100fe8c:	04800284 	movi	r18,10
 100fe90:	900f883a 	mov	r7,r18
 100fe94:	04c666b4 	movhi	r19,6554
 100fe98:	9ce66644 	addi	r19,r19,-26215
 100fe9c:	02000144 	movi	r8,5
 100fea0:	003fc506 	br	100fdb8 <_strtoul_r+0xac>
 100fea4:	40ffcf0e 	bge	r8,r3,100fde4 <_strtoul_r+0xd8>
 100fea8:	01bfffc4 	movi	r6,-1
 100feac:	003fd006 	br	100fdf0 <_strtoul_r+0xe4>
 100feb0:	008015c4 	movi	r2,87
 100feb4:	8887c83a 	sub	r3,r17,r2
 100feb8:	003fda06 	br	100fe24 <_strtoul_r+0x118>
 100febc:	857fffc4 	addi	r21,r16,-1
 100fec0:	003fdf06 	br	100fe40 <_strtoul_r+0x134>
 100fec4:	84400007 	ldb	r17,0(r16)
 100fec8:	84000044 	addi	r16,r16,1
 100fecc:	003fac06 	br	100fd80 <_strtoul_r+0x74>
 100fed0:	84400007 	ldb	r17,0(r16)
 100fed4:	07000044 	movi	fp,1
 100fed8:	84000044 	addi	r16,r16,1
 100fedc:	003fa906 	br	100fd84 <_strtoul_r+0x78>
 100fee0:	81000007 	ldb	r4,0(r16)
 100fee4:	00801e04 	movi	r2,120
 100fee8:	20800226 	beq	r4,r2,100fef4 <_strtoul_r+0x1e8>
 100feec:	00801604 	movi	r2,88
 100fef0:	20bfe31e 	bne	r4,r2,100fe80 <_strtoul_r+0x174>
 100fef4:	84400047 	ldb	r17,1(r16)
 100fef8:	04800404 	movi	r18,16
 100fefc:	84000084 	addi	r16,r16,2
 100ff00:	900f883a 	mov	r7,r18
 100ff04:	04c40034 	movhi	r19,4096
 100ff08:	9cffffc4 	addi	r19,r19,-1
 100ff0c:	020003c4 	movi	r8,15
 100ff10:	003fa906 	br	100fdb8 <_strtoul_r+0xac>
 100ff14:	04800204 	movi	r18,8
 100ff18:	900f883a 	mov	r7,r18
 100ff1c:	04c80034 	movhi	r19,8192
 100ff20:	9cffffc4 	addi	r19,r19,-1
 100ff24:	020001c4 	movi	r8,7
 100ff28:	003fa306 	br	100fdb8 <_strtoul_r+0xac>
 100ff2c:	e005003a 	cmpeq	r2,fp,zero
 100ff30:	103fc11e 	bne	r2,zero,100fe38 <_strtoul_r+0x12c>
 100ff34:	014bc83a 	sub	r5,zero,r5
 100ff38:	003fbf06 	br	100fe38 <_strtoul_r+0x12c>

0100ff3c <strtoul>:
 100ff3c:	008040f4 	movhi	r2,259
 100ff40:	10a67004 	addi	r2,r2,-26176
 100ff44:	2013883a 	mov	r9,r4
 100ff48:	11000017 	ldw	r4,0(r2)
 100ff4c:	2805883a 	mov	r2,r5
 100ff50:	300f883a 	mov	r7,r6
 100ff54:	480b883a 	mov	r5,r9
 100ff58:	100d883a 	mov	r6,r2
 100ff5c:	100fd0c1 	jmpi	100fd0c <_strtoul_r>

0100ff60 <__tz_lock>:
 100ff60:	f800283a 	ret

0100ff64 <__tz_unlock>:
 100ff64:	f800283a 	ret

0100ff68 <__sprint_r>:
 100ff68:	30800217 	ldw	r2,8(r6)
 100ff6c:	defffe04 	addi	sp,sp,-8
 100ff70:	dc000015 	stw	r16,0(sp)
 100ff74:	dfc00115 	stw	ra,4(sp)
 100ff78:	3021883a 	mov	r16,r6
 100ff7c:	0007883a 	mov	r3,zero
 100ff80:	1000061e 	bne	r2,zero,100ff9c <__sprint_r+0x34>
 100ff84:	1805883a 	mov	r2,r3
 100ff88:	30000115 	stw	zero,4(r6)
 100ff8c:	dfc00117 	ldw	ra,4(sp)
 100ff90:	dc000017 	ldw	r16,0(sp)
 100ff94:	dec00204 	addi	sp,sp,8
 100ff98:	f800283a 	ret
 100ff9c:	10140c80 	call	10140c8 <__sfvwrite_r>
 100ffa0:	1007883a 	mov	r3,r2
 100ffa4:	1805883a 	mov	r2,r3
 100ffa8:	80000115 	stw	zero,4(r16)
 100ffac:	80000215 	stw	zero,8(r16)
 100ffb0:	dfc00117 	ldw	ra,4(sp)
 100ffb4:	dc000017 	ldw	r16,0(sp)
 100ffb8:	dec00204 	addi	sp,sp,8
 100ffbc:	f800283a 	ret

0100ffc0 <___vfprintf_internal_r>:
 100ffc0:	defea404 	addi	sp,sp,-1392
 100ffc4:	dd815815 	stw	r22,1376(sp)
 100ffc8:	dc015215 	stw	r16,1352(sp)
 100ffcc:	d9c15115 	stw	r7,1348(sp)
 100ffd0:	dfc15b15 	stw	ra,1388(sp)
 100ffd4:	df015a15 	stw	fp,1384(sp)
 100ffd8:	ddc15915 	stw	r23,1380(sp)
 100ffdc:	dd415715 	stw	r21,1372(sp)
 100ffe0:	dd015615 	stw	r20,1368(sp)
 100ffe4:	dcc15515 	stw	r19,1364(sp)
 100ffe8:	dc815415 	stw	r18,1360(sp)
 100ffec:	dc415315 	stw	r17,1356(sp)
 100fff0:	282d883a 	mov	r22,r5
 100fff4:	3021883a 	mov	r16,r6
 100fff8:	d9014f15 	stw	r4,1340(sp)
 100fffc:	10152800 	call	1015280 <_localeconv_r>
 1010000:	10800017 	ldw	r2,0(r2)
 1010004:	d9c15117 	ldw	r7,1348(sp)
 1010008:	d8814915 	stw	r2,1316(sp)
 101000c:	d8814f17 	ldw	r2,1340(sp)
 1010010:	10000226 	beq	r2,zero,101001c <___vfprintf_internal_r+0x5c>
 1010014:	10800e17 	ldw	r2,56(r2)
 1010018:	10020d26 	beq	r2,zero,1010850 <___vfprintf_internal_r+0x890>
 101001c:	b080030b 	ldhu	r2,12(r22)
 1010020:	1080020c 	andi	r2,r2,8
 1010024:	10020e26 	beq	r2,zero,1010860 <___vfprintf_internal_r+0x8a0>
 1010028:	b0800417 	ldw	r2,16(r22)
 101002c:	10020c26 	beq	r2,zero,1010860 <___vfprintf_internal_r+0x8a0>
 1010030:	b200030b 	ldhu	r8,12(r22)
 1010034:	00800284 	movi	r2,10
 1010038:	40c0068c 	andi	r3,r8,26
 101003c:	18802f1e 	bne	r3,r2,10100fc <___vfprintf_internal_r+0x13c>
 1010040:	b080038f 	ldh	r2,14(r22)
 1010044:	10002d16 	blt	r2,zero,10100fc <___vfprintf_internal_r+0x13c>
 1010048:	b240038b 	ldhu	r9,14(r22)
 101004c:	b2800717 	ldw	r10,28(r22)
 1010050:	b2c00917 	ldw	r11,36(r22)
 1010054:	d9014f17 	ldw	r4,1340(sp)
 1010058:	dc402904 	addi	r17,sp,164
 101005c:	d8804004 	addi	r2,sp,256
 1010060:	00c10004 	movi	r3,1024
 1010064:	423fff4c 	andi	r8,r8,65533
 1010068:	800d883a 	mov	r6,r16
 101006c:	880b883a 	mov	r5,r17
 1010070:	da002c0d 	sth	r8,176(sp)
 1010074:	da402c8d 	sth	r9,178(sp)
 1010078:	da803015 	stw	r10,192(sp)
 101007c:	dac03215 	stw	r11,200(sp)
 1010080:	d8802d15 	stw	r2,180(sp)
 1010084:	d8c02e15 	stw	r3,184(sp)
 1010088:	d8802915 	stw	r2,164(sp)
 101008c:	d8c02b15 	stw	r3,172(sp)
 1010090:	d8002f15 	stw	zero,188(sp)
 1010094:	100ffc00 	call	100ffc0 <___vfprintf_internal_r>
 1010098:	d8814b15 	stw	r2,1324(sp)
 101009c:	10000416 	blt	r2,zero,10100b0 <___vfprintf_internal_r+0xf0>
 10100a0:	d9014f17 	ldw	r4,1340(sp)
 10100a4:	880b883a 	mov	r5,r17
 10100a8:	10137980 	call	1013798 <_fflush_r>
 10100ac:	1002321e 	bne	r2,zero,1010978 <___vfprintf_internal_r+0x9b8>
 10100b0:	d8802c0b 	ldhu	r2,176(sp)
 10100b4:	1080100c 	andi	r2,r2,64
 10100b8:	10000326 	beq	r2,zero,10100c8 <___vfprintf_internal_r+0x108>
 10100bc:	b080030b 	ldhu	r2,12(r22)
 10100c0:	10801014 	ori	r2,r2,64
 10100c4:	b080030d 	sth	r2,12(r22)
 10100c8:	d8814b17 	ldw	r2,1324(sp)
 10100cc:	dfc15b17 	ldw	ra,1388(sp)
 10100d0:	df015a17 	ldw	fp,1384(sp)
 10100d4:	ddc15917 	ldw	r23,1380(sp)
 10100d8:	dd815817 	ldw	r22,1376(sp)
 10100dc:	dd415717 	ldw	r21,1372(sp)
 10100e0:	dd015617 	ldw	r20,1368(sp)
 10100e4:	dcc15517 	ldw	r19,1364(sp)
 10100e8:	dc815417 	ldw	r18,1360(sp)
 10100ec:	dc415317 	ldw	r17,1356(sp)
 10100f0:	dc015217 	ldw	r16,1352(sp)
 10100f4:	dec15c04 	addi	sp,sp,1392
 10100f8:	f800283a 	ret
 10100fc:	0005883a 	mov	r2,zero
 1010100:	0007883a 	mov	r3,zero
 1010104:	dd401904 	addi	r21,sp,100
 1010108:	d8814215 	stw	r2,1288(sp)
 101010c:	802f883a 	mov	r23,r16
 1010110:	d8c14315 	stw	r3,1292(sp)
 1010114:	d8014b15 	stw	zero,1324(sp)
 1010118:	d8014815 	stw	zero,1312(sp)
 101011c:	d8014415 	stw	zero,1296(sp)
 1010120:	d8014715 	stw	zero,1308(sp)
 1010124:	dd400c15 	stw	r21,48(sp)
 1010128:	d8000e15 	stw	zero,56(sp)
 101012c:	d8000d15 	stw	zero,52(sp)
 1010130:	b8800007 	ldb	r2,0(r23)
 1010134:	10001926 	beq	r2,zero,101019c <___vfprintf_internal_r+0x1dc>
 1010138:	00c00944 	movi	r3,37
 101013c:	10c01726 	beq	r2,r3,101019c <___vfprintf_internal_r+0x1dc>
 1010140:	b821883a 	mov	r16,r23
 1010144:	00000106 	br	101014c <___vfprintf_internal_r+0x18c>
 1010148:	10c00326 	beq	r2,r3,1010158 <___vfprintf_internal_r+0x198>
 101014c:	84000044 	addi	r16,r16,1
 1010150:	80800007 	ldb	r2,0(r16)
 1010154:	103ffc1e 	bne	r2,zero,1010148 <___vfprintf_internal_r+0x188>
 1010158:	85e7c83a 	sub	r19,r16,r23
 101015c:	98000e26 	beq	r19,zero,1010198 <___vfprintf_internal_r+0x1d8>
 1010160:	dc800e17 	ldw	r18,56(sp)
 1010164:	dc400d17 	ldw	r17,52(sp)
 1010168:	008001c4 	movi	r2,7
 101016c:	94e5883a 	add	r18,r18,r19
 1010170:	8c400044 	addi	r17,r17,1
 1010174:	adc00015 	stw	r23,0(r21)
 1010178:	dc800e15 	stw	r18,56(sp)
 101017c:	acc00115 	stw	r19,4(r21)
 1010180:	dc400d15 	stw	r17,52(sp)
 1010184:	14428b16 	blt	r2,r17,1010bb4 <___vfprintf_internal_r+0xbf4>
 1010188:	ad400204 	addi	r21,r21,8
 101018c:	d9014b17 	ldw	r4,1324(sp)
 1010190:	24c9883a 	add	r4,r4,r19
 1010194:	d9014b15 	stw	r4,1324(sp)
 1010198:	802f883a 	mov	r23,r16
 101019c:	b8800007 	ldb	r2,0(r23)
 10101a0:	10013c26 	beq	r2,zero,1010694 <___vfprintf_internal_r+0x6d4>
 10101a4:	bdc00044 	addi	r23,r23,1
 10101a8:	d8000405 	stb	zero,16(sp)
 10101ac:	b8c00007 	ldb	r3,0(r23)
 10101b0:	04ffffc4 	movi	r19,-1
 10101b4:	d8014c15 	stw	zero,1328(sp)
 10101b8:	d8014a15 	stw	zero,1320(sp)
 10101bc:	d8c14d15 	stw	r3,1332(sp)
 10101c0:	bdc00044 	addi	r23,r23,1
 10101c4:	d9414d17 	ldw	r5,1332(sp)
 10101c8:	00801604 	movi	r2,88
 10101cc:	28fff804 	addi	r3,r5,-32
 10101d0:	10c06036 	bltu	r2,r3,1010354 <___vfprintf_internal_r+0x394>
 10101d4:	18c5883a 	add	r2,r3,r3
 10101d8:	1085883a 	add	r2,r2,r2
 10101dc:	00c04074 	movhi	r3,257
 10101e0:	18c07c04 	addi	r3,r3,496
 10101e4:	10c5883a 	add	r2,r2,r3
 10101e8:	11000017 	ldw	r4,0(r2)
 10101ec:	2000683a 	jmp	r4
 10101f0:	01011164 	muli	r4,zero,1093
 10101f4:	01010354 	movui	r4,1037
 10101f8:	01010354 	movui	r4,1037
 10101fc:	01011150 	cmplti	r4,zero,1093
 1010200:	01010354 	movui	r4,1037
 1010204:	01010354 	movui	r4,1037
 1010208:	01010354 	movui	r4,1037
 101020c:	01010354 	movui	r4,1037
 1010210:	01010354 	movui	r4,1037
 1010214:	01010354 	movui	r4,1037
 1010218:	01010f30 	cmpltui	r4,zero,1084
 101021c:	01011140 	call	101114 <__alt_mem_onchip_memory2_0+0x101114>
 1010220:	01010354 	movui	r4,1037
 1010224:	01010f48 	cmpgei	r4,zero,1085
 1010228:	010111dc 	xori	r4,zero,1095
 101022c:	01010354 	movui	r4,1037
 1010230:	010111c8 	cmpgei	r4,zero,1095
 1010234:	01011190 	cmplti	r4,zero,1094
 1010238:	01011190 	cmplti	r4,zero,1094
 101023c:	01011190 	cmplti	r4,zero,1094
 1010240:	01011190 	cmplti	r4,zero,1094
 1010244:	01011190 	cmplti	r4,zero,1094
 1010248:	01011190 	cmplti	r4,zero,1094
 101024c:	01011190 	cmplti	r4,zero,1094
 1010250:	01011190 	cmplti	r4,zero,1094
 1010254:	01011190 	cmplti	r4,zero,1094
 1010258:	01010354 	movui	r4,1037
 101025c:	01010354 	movui	r4,1037
 1010260:	01010354 	movui	r4,1037
 1010264:	01010354 	movui	r4,1037
 1010268:	01010354 	movui	r4,1037
 101026c:	01010354 	movui	r4,1037
 1010270:	01010354 	movui	r4,1037
 1010274:	01010354 	movui	r4,1037
 1010278:	01010354 	movui	r4,1037
 101027c:	01010354 	movui	r4,1037
 1010280:	010109ac 	andhi	r4,zero,1062
 1010284:	01011018 	cmpnei	r4,zero,1088
 1010288:	01010354 	movui	r4,1037
 101028c:	01011018 	cmpnei	r4,zero,1088
 1010290:	01010354 	movui	r4,1037
 1010294:	01010354 	movui	r4,1037
 1010298:	01010354 	movui	r4,1037
 101029c:	01010354 	movui	r4,1037
 10102a0:	0101117c 	xorhi	r4,zero,1093
 10102a4:	01010354 	movui	r4,1037
 10102a8:	01010354 	movui	r4,1037
 10102ac:	01010a60 	cmpeqi	r4,zero,1065
 10102b0:	01010354 	movui	r4,1037
 10102b4:	01010354 	movui	r4,1037
 10102b8:	01010354 	movui	r4,1037
 10102bc:	01010354 	movui	r4,1037
 10102c0:	01010354 	movui	r4,1037
 10102c4:	01010aac 	andhi	r4,zero,1066
 10102c8:	01010354 	movui	r4,1037
 10102cc:	01010354 	movui	r4,1037
 10102d0:	010110cc 	andi	r4,zero,1091
 10102d4:	01010354 	movui	r4,1037
 10102d8:	01010354 	movui	r4,1037
 10102dc:	01010354 	movui	r4,1037
 10102e0:	01010354 	movui	r4,1037
 10102e4:	01010354 	movui	r4,1037
 10102e8:	01010354 	movui	r4,1037
 10102ec:	01010354 	movui	r4,1037
 10102f0:	01010354 	movui	r4,1037
 10102f4:	01010354 	movui	r4,1037
 10102f8:	01010354 	movui	r4,1037
 10102fc:	010110a0 	cmpeqi	r4,zero,1090
 1010300:	010109b8 	rdprs	r4,zero,1062
 1010304:	01011018 	cmpnei	r4,zero,1088
 1010308:	01011018 	cmpnei	r4,zero,1088
 101030c:	01011018 	cmpnei	r4,zero,1088
 1010310:	01011004 	movi	r4,1088
 1010314:	010109b8 	rdprs	r4,zero,1062
 1010318:	01010354 	movui	r4,1037
 101031c:	01010354 	movui	r4,1037
 1010320:	01010f8c 	andi	r4,zero,1086
 1010324:	01010354 	movui	r4,1037
 1010328:	01010f5c 	xori	r4,zero,1085
 101032c:	01010a6c 	andhi	r4,zero,1065
 1010330:	01010fbc 	xorhi	r4,zero,1086
 1010334:	01010fa8 	cmpgeui	r4,zero,1086
 1010338:	01010354 	movui	r4,1037
 101033c:	01011238 	rdprs	r4,zero,1096
 1010340:	01010354 	movui	r4,1037
 1010344:	01010ab8 	rdprs	r4,zero,1066
 1010348:	01010354 	movui	r4,1037
 101034c:	01010354 	movui	r4,1037
 1010350:	01011130 	cmpltui	r4,zero,1092
 1010354:	d9014d17 	ldw	r4,1332(sp)
 1010358:	2000ce26 	beq	r4,zero,1010694 <___vfprintf_internal_r+0x6d4>
 101035c:	01400044 	movi	r5,1
 1010360:	d9800f04 	addi	r6,sp,60
 1010364:	d9c14015 	stw	r7,1280(sp)
 1010368:	d9414515 	stw	r5,1300(sp)
 101036c:	d9814115 	stw	r6,1284(sp)
 1010370:	280f883a 	mov	r7,r5
 1010374:	d9000f05 	stb	r4,60(sp)
 1010378:	d8000405 	stb	zero,16(sp)
 101037c:	d8014615 	stw	zero,1304(sp)
 1010380:	d8c14c17 	ldw	r3,1328(sp)
 1010384:	1880008c 	andi	r2,r3,2
 1010388:	1005003a 	cmpeq	r2,r2,zero
 101038c:	d8815015 	stw	r2,1344(sp)
 1010390:	1000031e 	bne	r2,zero,10103a0 <___vfprintf_internal_r+0x3e0>
 1010394:	d9014517 	ldw	r4,1300(sp)
 1010398:	21000084 	addi	r4,r4,2
 101039c:	d9014515 	stw	r4,1300(sp)
 10103a0:	d9414c17 	ldw	r5,1328(sp)
 10103a4:	2940210c 	andi	r5,r5,132
 10103a8:	d9414e15 	stw	r5,1336(sp)
 10103ac:	28002d1e 	bne	r5,zero,1010464 <___vfprintf_internal_r+0x4a4>
 10103b0:	d9814a17 	ldw	r6,1320(sp)
 10103b4:	d8814517 	ldw	r2,1300(sp)
 10103b8:	30a1c83a 	sub	r16,r6,r2
 10103bc:	0400290e 	bge	zero,r16,1010464 <___vfprintf_internal_r+0x4a4>
 10103c0:	00800404 	movi	r2,16
 10103c4:	1404580e 	bge	r2,r16,1011528 <___vfprintf_internal_r+0x1568>
 10103c8:	dc800e17 	ldw	r18,56(sp)
 10103cc:	dc400d17 	ldw	r17,52(sp)
 10103d0:	1027883a 	mov	r19,r2
 10103d4:	070040b4 	movhi	fp,258
 10103d8:	e71e5184 	addi	fp,fp,31046
 10103dc:	050001c4 	movi	r20,7
 10103e0:	00000306 	br	10103f0 <___vfprintf_internal_r+0x430>
 10103e4:	843ffc04 	addi	r16,r16,-16
 10103e8:	ad400204 	addi	r21,r21,8
 10103ec:	9c00130e 	bge	r19,r16,101043c <___vfprintf_internal_r+0x47c>
 10103f0:	94800404 	addi	r18,r18,16
 10103f4:	8c400044 	addi	r17,r17,1
 10103f8:	af000015 	stw	fp,0(r21)
 10103fc:	acc00115 	stw	r19,4(r21)
 1010400:	dc800e15 	stw	r18,56(sp)
 1010404:	dc400d15 	stw	r17,52(sp)
 1010408:	a47ff60e 	bge	r20,r17,10103e4 <___vfprintf_internal_r+0x424>
 101040c:	d9014f17 	ldw	r4,1340(sp)
 1010410:	b00b883a 	mov	r5,r22
 1010414:	d9800c04 	addi	r6,sp,48
 1010418:	d9c15115 	stw	r7,1348(sp)
 101041c:	100ff680 	call	100ff68 <__sprint_r>
 1010420:	d9c15117 	ldw	r7,1348(sp)
 1010424:	10009e1e 	bne	r2,zero,10106a0 <___vfprintf_internal_r+0x6e0>
 1010428:	843ffc04 	addi	r16,r16,-16
 101042c:	dc800e17 	ldw	r18,56(sp)
 1010430:	dc400d17 	ldw	r17,52(sp)
 1010434:	dd401904 	addi	r21,sp,100
 1010438:	9c3fed16 	blt	r19,r16,10103f0 <___vfprintf_internal_r+0x430>
 101043c:	9425883a 	add	r18,r18,r16
 1010440:	8c400044 	addi	r17,r17,1
 1010444:	008001c4 	movi	r2,7
 1010448:	af000015 	stw	fp,0(r21)
 101044c:	ac000115 	stw	r16,4(r21)
 1010450:	dc800e15 	stw	r18,56(sp)
 1010454:	dc400d15 	stw	r17,52(sp)
 1010458:	1441f516 	blt	r2,r17,1010c30 <___vfprintf_internal_r+0xc70>
 101045c:	ad400204 	addi	r21,r21,8
 1010460:	00000206 	br	101046c <___vfprintf_internal_r+0x4ac>
 1010464:	dc800e17 	ldw	r18,56(sp)
 1010468:	dc400d17 	ldw	r17,52(sp)
 101046c:	d8800407 	ldb	r2,16(sp)
 1010470:	10000b26 	beq	r2,zero,10104a0 <___vfprintf_internal_r+0x4e0>
 1010474:	00800044 	movi	r2,1
 1010478:	94800044 	addi	r18,r18,1
 101047c:	8c400044 	addi	r17,r17,1
 1010480:	a8800115 	stw	r2,4(r21)
 1010484:	d8c00404 	addi	r3,sp,16
 1010488:	008001c4 	movi	r2,7
 101048c:	a8c00015 	stw	r3,0(r21)
 1010490:	dc800e15 	stw	r18,56(sp)
 1010494:	dc400d15 	stw	r17,52(sp)
 1010498:	1441da16 	blt	r2,r17,1010c04 <___vfprintf_internal_r+0xc44>
 101049c:	ad400204 	addi	r21,r21,8
 10104a0:	d9015017 	ldw	r4,1344(sp)
 10104a4:	20000b1e 	bne	r4,zero,10104d4 <___vfprintf_internal_r+0x514>
 10104a8:	d8800444 	addi	r2,sp,17
 10104ac:	94800084 	addi	r18,r18,2
 10104b0:	8c400044 	addi	r17,r17,1
 10104b4:	a8800015 	stw	r2,0(r21)
 10104b8:	00c00084 	movi	r3,2
 10104bc:	008001c4 	movi	r2,7
 10104c0:	a8c00115 	stw	r3,4(r21)
 10104c4:	dc800e15 	stw	r18,56(sp)
 10104c8:	dc400d15 	stw	r17,52(sp)
 10104cc:	1441c216 	blt	r2,r17,1010bd8 <___vfprintf_internal_r+0xc18>
 10104d0:	ad400204 	addi	r21,r21,8
 10104d4:	d9414e17 	ldw	r5,1336(sp)
 10104d8:	00802004 	movi	r2,128
 10104dc:	2880b126 	beq	r5,r2,10107a4 <___vfprintf_internal_r+0x7e4>
 10104e0:	d8c14617 	ldw	r3,1304(sp)
 10104e4:	19e1c83a 	sub	r16,r3,r7
 10104e8:	0400260e 	bge	zero,r16,1010584 <___vfprintf_internal_r+0x5c4>
 10104ec:	00800404 	movi	r2,16
 10104f0:	1403c90e 	bge	r2,r16,1011418 <___vfprintf_internal_r+0x1458>
 10104f4:	1027883a 	mov	r19,r2
 10104f8:	070040b4 	movhi	fp,258
 10104fc:	e71e4d84 	addi	fp,fp,31030
 1010500:	050001c4 	movi	r20,7
 1010504:	00000306 	br	1010514 <___vfprintf_internal_r+0x554>
 1010508:	843ffc04 	addi	r16,r16,-16
 101050c:	ad400204 	addi	r21,r21,8
 1010510:	9c00130e 	bge	r19,r16,1010560 <___vfprintf_internal_r+0x5a0>
 1010514:	94800404 	addi	r18,r18,16
 1010518:	8c400044 	addi	r17,r17,1
 101051c:	af000015 	stw	fp,0(r21)
 1010520:	acc00115 	stw	r19,4(r21)
 1010524:	dc800e15 	stw	r18,56(sp)
 1010528:	dc400d15 	stw	r17,52(sp)
 101052c:	a47ff60e 	bge	r20,r17,1010508 <___vfprintf_internal_r+0x548>
 1010530:	d9014f17 	ldw	r4,1340(sp)
 1010534:	b00b883a 	mov	r5,r22
 1010538:	d9800c04 	addi	r6,sp,48
 101053c:	d9c15115 	stw	r7,1348(sp)
 1010540:	100ff680 	call	100ff68 <__sprint_r>
 1010544:	d9c15117 	ldw	r7,1348(sp)
 1010548:	1000551e 	bne	r2,zero,10106a0 <___vfprintf_internal_r+0x6e0>
 101054c:	843ffc04 	addi	r16,r16,-16
 1010550:	dc800e17 	ldw	r18,56(sp)
 1010554:	dc400d17 	ldw	r17,52(sp)
 1010558:	dd401904 	addi	r21,sp,100
 101055c:	9c3fed16 	blt	r19,r16,1010514 <___vfprintf_internal_r+0x554>
 1010560:	9425883a 	add	r18,r18,r16
 1010564:	8c400044 	addi	r17,r17,1
 1010568:	008001c4 	movi	r2,7
 101056c:	af000015 	stw	fp,0(r21)
 1010570:	ac000115 	stw	r16,4(r21)
 1010574:	dc800e15 	stw	r18,56(sp)
 1010578:	dc400d15 	stw	r17,52(sp)
 101057c:	14418216 	blt	r2,r17,1010b88 <___vfprintf_internal_r+0xbc8>
 1010580:	ad400204 	addi	r21,r21,8
 1010584:	d9014c17 	ldw	r4,1328(sp)
 1010588:	2080400c 	andi	r2,r4,256
 101058c:	10004a1e 	bne	r2,zero,10106b8 <___vfprintf_internal_r+0x6f8>
 1010590:	d9414117 	ldw	r5,1284(sp)
 1010594:	91e5883a 	add	r18,r18,r7
 1010598:	8c400044 	addi	r17,r17,1
 101059c:	008001c4 	movi	r2,7
 10105a0:	a9400015 	stw	r5,0(r21)
 10105a4:	a9c00115 	stw	r7,4(r21)
 10105a8:	dc800e15 	stw	r18,56(sp)
 10105ac:	dc400d15 	stw	r17,52(sp)
 10105b0:	14416716 	blt	r2,r17,1010b50 <___vfprintf_internal_r+0xb90>
 10105b4:	a8c00204 	addi	r3,r21,8
 10105b8:	d9814c17 	ldw	r6,1328(sp)
 10105bc:	3080010c 	andi	r2,r6,4
 10105c0:	10002826 	beq	r2,zero,1010664 <___vfprintf_internal_r+0x6a4>
 10105c4:	d8814a17 	ldw	r2,1320(sp)
 10105c8:	d9014517 	ldw	r4,1300(sp)
 10105cc:	1121c83a 	sub	r16,r2,r4
 10105d0:	0400240e 	bge	zero,r16,1010664 <___vfprintf_internal_r+0x6a4>
 10105d4:	00800404 	movi	r2,16
 10105d8:	14044f0e 	bge	r2,r16,1011718 <___vfprintf_internal_r+0x1758>
 10105dc:	dc400d17 	ldw	r17,52(sp)
 10105e0:	1027883a 	mov	r19,r2
 10105e4:	070040b4 	movhi	fp,258
 10105e8:	e71e5184 	addi	fp,fp,31046
 10105ec:	050001c4 	movi	r20,7
 10105f0:	00000306 	br	1010600 <___vfprintf_internal_r+0x640>
 10105f4:	843ffc04 	addi	r16,r16,-16
 10105f8:	18c00204 	addi	r3,r3,8
 10105fc:	9c00110e 	bge	r19,r16,1010644 <___vfprintf_internal_r+0x684>
 1010600:	94800404 	addi	r18,r18,16
 1010604:	8c400044 	addi	r17,r17,1
 1010608:	1f000015 	stw	fp,0(r3)
 101060c:	1cc00115 	stw	r19,4(r3)
 1010610:	dc800e15 	stw	r18,56(sp)
 1010614:	dc400d15 	stw	r17,52(sp)
 1010618:	a47ff60e 	bge	r20,r17,10105f4 <___vfprintf_internal_r+0x634>
 101061c:	d9014f17 	ldw	r4,1340(sp)
 1010620:	b00b883a 	mov	r5,r22
 1010624:	d9800c04 	addi	r6,sp,48
 1010628:	100ff680 	call	100ff68 <__sprint_r>
 101062c:	10001c1e 	bne	r2,zero,10106a0 <___vfprintf_internal_r+0x6e0>
 1010630:	843ffc04 	addi	r16,r16,-16
 1010634:	dc800e17 	ldw	r18,56(sp)
 1010638:	dc400d17 	ldw	r17,52(sp)
 101063c:	d8c01904 	addi	r3,sp,100
 1010640:	9c3fef16 	blt	r19,r16,1010600 <___vfprintf_internal_r+0x640>
 1010644:	9425883a 	add	r18,r18,r16
 1010648:	8c400044 	addi	r17,r17,1
 101064c:	008001c4 	movi	r2,7
 1010650:	1f000015 	stw	fp,0(r3)
 1010654:	1c000115 	stw	r16,4(r3)
 1010658:	dc800e15 	stw	r18,56(sp)
 101065c:	dc400d15 	stw	r17,52(sp)
 1010660:	1440cb16 	blt	r2,r17,1010990 <___vfprintf_internal_r+0x9d0>
 1010664:	d8814a17 	ldw	r2,1320(sp)
 1010668:	d9414517 	ldw	r5,1300(sp)
 101066c:	1140010e 	bge	r2,r5,1010674 <___vfprintf_internal_r+0x6b4>
 1010670:	2805883a 	mov	r2,r5
 1010674:	d9814b17 	ldw	r6,1324(sp)
 1010678:	308d883a 	add	r6,r6,r2
 101067c:	d9814b15 	stw	r6,1324(sp)
 1010680:	90013b1e 	bne	r18,zero,1010b70 <___vfprintf_internal_r+0xbb0>
 1010684:	d9c14017 	ldw	r7,1280(sp)
 1010688:	dd401904 	addi	r21,sp,100
 101068c:	d8000d15 	stw	zero,52(sp)
 1010690:	003ea706 	br	1010130 <___vfprintf_internal_r+0x170>
 1010694:	d8800e17 	ldw	r2,56(sp)
 1010698:	10053f1e 	bne	r2,zero,1011b98 <___vfprintf_internal_r+0x1bd8>
 101069c:	d8000d15 	stw	zero,52(sp)
 10106a0:	b080030b 	ldhu	r2,12(r22)
 10106a4:	1080100c 	andi	r2,r2,64
 10106a8:	103e8726 	beq	r2,zero,10100c8 <___vfprintf_internal_r+0x108>
 10106ac:	00bfffc4 	movi	r2,-1
 10106b0:	d8814b15 	stw	r2,1324(sp)
 10106b4:	003e8406 	br	10100c8 <___vfprintf_internal_r+0x108>
 10106b8:	d9814d17 	ldw	r6,1332(sp)
 10106bc:	00801944 	movi	r2,101
 10106c0:	11806e16 	blt	r2,r6,101087c <___vfprintf_internal_r+0x8bc>
 10106c4:	d9414717 	ldw	r5,1308(sp)
 10106c8:	00c00044 	movi	r3,1
 10106cc:	1943430e 	bge	r3,r5,10113dc <___vfprintf_internal_r+0x141c>
 10106d0:	d8814117 	ldw	r2,1284(sp)
 10106d4:	94800044 	addi	r18,r18,1
 10106d8:	8c400044 	addi	r17,r17,1
 10106dc:	a8800015 	stw	r2,0(r21)
 10106e0:	008001c4 	movi	r2,7
 10106e4:	a8c00115 	stw	r3,4(r21)
 10106e8:	dc800e15 	stw	r18,56(sp)
 10106ec:	dc400d15 	stw	r17,52(sp)
 10106f0:	1441ca16 	blt	r2,r17,1010e1c <___vfprintf_internal_r+0xe5c>
 10106f4:	a8c00204 	addi	r3,r21,8
 10106f8:	d9014917 	ldw	r4,1316(sp)
 10106fc:	00800044 	movi	r2,1
 1010700:	94800044 	addi	r18,r18,1
 1010704:	8c400044 	addi	r17,r17,1
 1010708:	18800115 	stw	r2,4(r3)
 101070c:	008001c4 	movi	r2,7
 1010710:	19000015 	stw	r4,0(r3)
 1010714:	dc800e15 	stw	r18,56(sp)
 1010718:	dc400d15 	stw	r17,52(sp)
 101071c:	1441b616 	blt	r2,r17,1010df8 <___vfprintf_internal_r+0xe38>
 1010720:	1cc00204 	addi	r19,r3,8
 1010724:	d9014217 	ldw	r4,1288(sp)
 1010728:	d9414317 	ldw	r5,1292(sp)
 101072c:	000d883a 	mov	r6,zero
 1010730:	000f883a 	mov	r7,zero
 1010734:	1018b3c0 	call	1018b3c <__nedf2>
 1010738:	10017426 	beq	r2,zero,1010d0c <___vfprintf_internal_r+0xd4c>
 101073c:	d9414717 	ldw	r5,1308(sp)
 1010740:	d9814117 	ldw	r6,1284(sp)
 1010744:	8c400044 	addi	r17,r17,1
 1010748:	2c85883a 	add	r2,r5,r18
 101074c:	14bfffc4 	addi	r18,r2,-1
 1010750:	28bfffc4 	addi	r2,r5,-1
 1010754:	30c00044 	addi	r3,r6,1
 1010758:	98800115 	stw	r2,4(r19)
 101075c:	008001c4 	movi	r2,7
 1010760:	98c00015 	stw	r3,0(r19)
 1010764:	dc800e15 	stw	r18,56(sp)
 1010768:	dc400d15 	stw	r17,52(sp)
 101076c:	14418e16 	blt	r2,r17,1010da8 <___vfprintf_internal_r+0xde8>
 1010770:	9cc00204 	addi	r19,r19,8
 1010774:	d9414817 	ldw	r5,1312(sp)
 1010778:	d8800804 	addi	r2,sp,32
 101077c:	8c400044 	addi	r17,r17,1
 1010780:	9165883a 	add	r18,r18,r5
 1010784:	98800015 	stw	r2,0(r19)
 1010788:	008001c4 	movi	r2,7
 101078c:	99400115 	stw	r5,4(r19)
 1010790:	dc800e15 	stw	r18,56(sp)
 1010794:	dc400d15 	stw	r17,52(sp)
 1010798:	1440ed16 	blt	r2,r17,1010b50 <___vfprintf_internal_r+0xb90>
 101079c:	98c00204 	addi	r3,r19,8
 10107a0:	003f8506 	br	10105b8 <___vfprintf_internal_r+0x5f8>
 10107a4:	d9814a17 	ldw	r6,1320(sp)
 10107a8:	d8814517 	ldw	r2,1300(sp)
 10107ac:	30a1c83a 	sub	r16,r6,r2
 10107b0:	043f4b0e 	bge	zero,r16,10104e0 <___vfprintf_internal_r+0x520>
 10107b4:	00800404 	movi	r2,16
 10107b8:	1404340e 	bge	r2,r16,101188c <___vfprintf_internal_r+0x18cc>
 10107bc:	1027883a 	mov	r19,r2
 10107c0:	070040b4 	movhi	fp,258
 10107c4:	e71e4d84 	addi	fp,fp,31030
 10107c8:	050001c4 	movi	r20,7
 10107cc:	00000306 	br	10107dc <___vfprintf_internal_r+0x81c>
 10107d0:	843ffc04 	addi	r16,r16,-16
 10107d4:	ad400204 	addi	r21,r21,8
 10107d8:	9c00130e 	bge	r19,r16,1010828 <___vfprintf_internal_r+0x868>
 10107dc:	94800404 	addi	r18,r18,16
 10107e0:	8c400044 	addi	r17,r17,1
 10107e4:	af000015 	stw	fp,0(r21)
 10107e8:	acc00115 	stw	r19,4(r21)
 10107ec:	dc800e15 	stw	r18,56(sp)
 10107f0:	dc400d15 	stw	r17,52(sp)
 10107f4:	a47ff60e 	bge	r20,r17,10107d0 <___vfprintf_internal_r+0x810>
 10107f8:	d9014f17 	ldw	r4,1340(sp)
 10107fc:	b00b883a 	mov	r5,r22
 1010800:	d9800c04 	addi	r6,sp,48
 1010804:	d9c15115 	stw	r7,1348(sp)
 1010808:	100ff680 	call	100ff68 <__sprint_r>
 101080c:	d9c15117 	ldw	r7,1348(sp)
 1010810:	103fa31e 	bne	r2,zero,10106a0 <___vfprintf_internal_r+0x6e0>
 1010814:	843ffc04 	addi	r16,r16,-16
 1010818:	dc800e17 	ldw	r18,56(sp)
 101081c:	dc400d17 	ldw	r17,52(sp)
 1010820:	dd401904 	addi	r21,sp,100
 1010824:	9c3fed16 	blt	r19,r16,10107dc <___vfprintf_internal_r+0x81c>
 1010828:	9425883a 	add	r18,r18,r16
 101082c:	8c400044 	addi	r17,r17,1
 1010830:	008001c4 	movi	r2,7
 1010834:	af000015 	stw	fp,0(r21)
 1010838:	ac000115 	stw	r16,4(r21)
 101083c:	dc800e15 	stw	r18,56(sp)
 1010840:	dc400d15 	stw	r17,52(sp)
 1010844:	14416116 	blt	r2,r17,1010dcc <___vfprintf_internal_r+0xe0c>
 1010848:	ad400204 	addi	r21,r21,8
 101084c:	003f2406 	br	10104e0 <___vfprintf_internal_r+0x520>
 1010850:	d9014f17 	ldw	r4,1340(sp)
 1010854:	1013a300 	call	1013a30 <__sinit>
 1010858:	d9c15117 	ldw	r7,1348(sp)
 101085c:	003def06 	br	101001c <___vfprintf_internal_r+0x5c>
 1010860:	d9014f17 	ldw	r4,1340(sp)
 1010864:	b00b883a 	mov	r5,r22
 1010868:	d9c15115 	stw	r7,1348(sp)
 101086c:	1011e900 	call	1011e90 <__swsetup_r>
 1010870:	d9c15117 	ldw	r7,1348(sp)
 1010874:	103dee26 	beq	r2,zero,1010030 <___vfprintf_internal_r+0x70>
 1010878:	003f8c06 	br	10106ac <___vfprintf_internal_r+0x6ec>
 101087c:	d9014217 	ldw	r4,1288(sp)
 1010880:	d9414317 	ldw	r5,1292(sp)
 1010884:	000d883a 	mov	r6,zero
 1010888:	000f883a 	mov	r7,zero
 101088c:	100c7f40 	call	100c7f4 <__eqdf2>
 1010890:	1000f21e 	bne	r2,zero,1010c5c <___vfprintf_internal_r+0xc9c>
 1010894:	008040b4 	movhi	r2,258
 1010898:	109e4d04 	addi	r2,r2,31028
 101089c:	94800044 	addi	r18,r18,1
 10108a0:	8c400044 	addi	r17,r17,1
 10108a4:	a8800015 	stw	r2,0(r21)
 10108a8:	00c00044 	movi	r3,1
 10108ac:	008001c4 	movi	r2,7
 10108b0:	a8c00115 	stw	r3,4(r21)
 10108b4:	dc800e15 	stw	r18,56(sp)
 10108b8:	dc400d15 	stw	r17,52(sp)
 10108bc:	1442fa16 	blt	r2,r17,10114a8 <___vfprintf_internal_r+0x14e8>
 10108c0:	a8c00204 	addi	r3,r21,8
 10108c4:	d8800517 	ldw	r2,20(sp)
 10108c8:	d9014717 	ldw	r4,1308(sp)
 10108cc:	11015c0e 	bge	r2,r4,1010e40 <___vfprintf_internal_r+0xe80>
 10108d0:	dc400d17 	ldw	r17,52(sp)
 10108d4:	d9814917 	ldw	r6,1316(sp)
 10108d8:	00800044 	movi	r2,1
 10108dc:	94800044 	addi	r18,r18,1
 10108e0:	8c400044 	addi	r17,r17,1
 10108e4:	18800115 	stw	r2,4(r3)
 10108e8:	008001c4 	movi	r2,7
 10108ec:	19800015 	stw	r6,0(r3)
 10108f0:	dc800e15 	stw	r18,56(sp)
 10108f4:	dc400d15 	stw	r17,52(sp)
 10108f8:	14431016 	blt	r2,r17,101153c <___vfprintf_internal_r+0x157c>
 10108fc:	18c00204 	addi	r3,r3,8
 1010900:	d8814717 	ldw	r2,1308(sp)
 1010904:	143fffc4 	addi	r16,r2,-1
 1010908:	043f2b0e 	bge	zero,r16,10105b8 <___vfprintf_internal_r+0x5f8>
 101090c:	00800404 	movi	r2,16
 1010910:	1402a20e 	bge	r2,r16,101139c <___vfprintf_internal_r+0x13dc>
 1010914:	dc400d17 	ldw	r17,52(sp)
 1010918:	1027883a 	mov	r19,r2
 101091c:	070040b4 	movhi	fp,258
 1010920:	e71e4d84 	addi	fp,fp,31030
 1010924:	050001c4 	movi	r20,7
 1010928:	00000306 	br	1010938 <___vfprintf_internal_r+0x978>
 101092c:	18c00204 	addi	r3,r3,8
 1010930:	843ffc04 	addi	r16,r16,-16
 1010934:	9c029c0e 	bge	r19,r16,10113a8 <___vfprintf_internal_r+0x13e8>
 1010938:	94800404 	addi	r18,r18,16
 101093c:	8c400044 	addi	r17,r17,1
 1010940:	1f000015 	stw	fp,0(r3)
 1010944:	1cc00115 	stw	r19,4(r3)
 1010948:	dc800e15 	stw	r18,56(sp)
 101094c:	dc400d15 	stw	r17,52(sp)
 1010950:	a47ff60e 	bge	r20,r17,101092c <___vfprintf_internal_r+0x96c>
 1010954:	d9014f17 	ldw	r4,1340(sp)
 1010958:	b00b883a 	mov	r5,r22
 101095c:	d9800c04 	addi	r6,sp,48
 1010960:	100ff680 	call	100ff68 <__sprint_r>
 1010964:	103f4e1e 	bne	r2,zero,10106a0 <___vfprintf_internal_r+0x6e0>
 1010968:	dc800e17 	ldw	r18,56(sp)
 101096c:	dc400d17 	ldw	r17,52(sp)
 1010970:	d8c01904 	addi	r3,sp,100
 1010974:	003fee06 	br	1010930 <___vfprintf_internal_r+0x970>
 1010978:	d8802c0b 	ldhu	r2,176(sp)
 101097c:	00ffffc4 	movi	r3,-1
 1010980:	d8c14b15 	stw	r3,1324(sp)
 1010984:	1080100c 	andi	r2,r2,64
 1010988:	103dcc1e 	bne	r2,zero,10100bc <___vfprintf_internal_r+0xfc>
 101098c:	003dce06 	br	10100c8 <___vfprintf_internal_r+0x108>
 1010990:	d9014f17 	ldw	r4,1340(sp)
 1010994:	b00b883a 	mov	r5,r22
 1010998:	d9800c04 	addi	r6,sp,48
 101099c:	100ff680 	call	100ff68 <__sprint_r>
 10109a0:	103f3f1e 	bne	r2,zero,10106a0 <___vfprintf_internal_r+0x6e0>
 10109a4:	dc800e17 	ldw	r18,56(sp)
 10109a8:	003f2e06 	br	1010664 <___vfprintf_internal_r+0x6a4>
 10109ac:	d9414c17 	ldw	r5,1328(sp)
 10109b0:	29400414 	ori	r5,r5,16
 10109b4:	d9414c15 	stw	r5,1328(sp)
 10109b8:	d9814c17 	ldw	r6,1328(sp)
 10109bc:	3080080c 	andi	r2,r6,32
 10109c0:	10014f1e 	bne	r2,zero,1010f00 <___vfprintf_internal_r+0xf40>
 10109c4:	d8c14c17 	ldw	r3,1328(sp)
 10109c8:	1880040c 	andi	r2,r3,16
 10109cc:	1002ea1e 	bne	r2,zero,1011578 <___vfprintf_internal_r+0x15b8>
 10109d0:	d9014c17 	ldw	r4,1328(sp)
 10109d4:	2080100c 	andi	r2,r4,64
 10109d8:	1002e726 	beq	r2,zero,1011578 <___vfprintf_internal_r+0x15b8>
 10109dc:	3880000f 	ldh	r2,0(r7)
 10109e0:	39c00104 	addi	r7,r7,4
 10109e4:	d9c14015 	stw	r7,1280(sp)
 10109e8:	1023d7fa 	srai	r17,r2,31
 10109ec:	1021883a 	mov	r16,r2
 10109f0:	88037216 	blt	r17,zero,10117bc <___vfprintf_internal_r+0x17fc>
 10109f4:	01000044 	movi	r4,1
 10109f8:	98000416 	blt	r19,zero,1010a0c <___vfprintf_internal_r+0xa4c>
 10109fc:	d8c14c17 	ldw	r3,1328(sp)
 1010a00:	00bfdfc4 	movi	r2,-129
 1010a04:	1886703a 	and	r3,r3,r2
 1010a08:	d8c14c15 	stw	r3,1328(sp)
 1010a0c:	8444b03a 	or	r2,r16,r17
 1010a10:	1002261e 	bne	r2,zero,10112ac <___vfprintf_internal_r+0x12ec>
 1010a14:	9802251e 	bne	r19,zero,10112ac <___vfprintf_internal_r+0x12ec>
 1010a18:	20803fcc 	andi	r2,r4,255
 1010a1c:	10029b26 	beq	r2,zero,101148c <___vfprintf_internal_r+0x14cc>
 1010a20:	d8c01904 	addi	r3,sp,100
 1010a24:	dd000f04 	addi	r20,sp,60
 1010a28:	d8c14115 	stw	r3,1284(sp)
 1010a2c:	d8c14117 	ldw	r3,1284(sp)
 1010a30:	dcc14515 	stw	r19,1300(sp)
 1010a34:	a0c5c83a 	sub	r2,r20,r3
 1010a38:	11c00a04 	addi	r7,r2,40
 1010a3c:	99c0010e 	bge	r19,r7,1010a44 <___vfprintf_internal_r+0xa84>
 1010a40:	d9c14515 	stw	r7,1300(sp)
 1010a44:	dcc14615 	stw	r19,1304(sp)
 1010a48:	d8800407 	ldb	r2,16(sp)
 1010a4c:	103e4c26 	beq	r2,zero,1010380 <___vfprintf_internal_r+0x3c0>
 1010a50:	d8814517 	ldw	r2,1300(sp)
 1010a54:	10800044 	addi	r2,r2,1
 1010a58:	d8814515 	stw	r2,1300(sp)
 1010a5c:	003e4806 	br	1010380 <___vfprintf_internal_r+0x3c0>
 1010a60:	d9814c17 	ldw	r6,1328(sp)
 1010a64:	31800414 	ori	r6,r6,16
 1010a68:	d9814c15 	stw	r6,1328(sp)
 1010a6c:	d8c14c17 	ldw	r3,1328(sp)
 1010a70:	1880080c 	andi	r2,r3,32
 1010a74:	1001271e 	bne	r2,zero,1010f14 <___vfprintf_internal_r+0xf54>
 1010a78:	d9414c17 	ldw	r5,1328(sp)
 1010a7c:	2880040c 	andi	r2,r5,16
 1010a80:	1002b61e 	bne	r2,zero,101155c <___vfprintf_internal_r+0x159c>
 1010a84:	d9814c17 	ldw	r6,1328(sp)
 1010a88:	3080100c 	andi	r2,r6,64
 1010a8c:	1002b326 	beq	r2,zero,101155c <___vfprintf_internal_r+0x159c>
 1010a90:	3c00000b 	ldhu	r16,0(r7)
 1010a94:	0009883a 	mov	r4,zero
 1010a98:	39c00104 	addi	r7,r7,4
 1010a9c:	0023883a 	mov	r17,zero
 1010aa0:	d9c14015 	stw	r7,1280(sp)
 1010aa4:	d8000405 	stb	zero,16(sp)
 1010aa8:	003fd306 	br	10109f8 <___vfprintf_internal_r+0xa38>
 1010aac:	d9014c17 	ldw	r4,1328(sp)
 1010ab0:	21000414 	ori	r4,r4,16
 1010ab4:	d9014c15 	stw	r4,1328(sp)
 1010ab8:	d9414c17 	ldw	r5,1328(sp)
 1010abc:	2880080c 	andi	r2,r5,32
 1010ac0:	1001081e 	bne	r2,zero,1010ee4 <___vfprintf_internal_r+0xf24>
 1010ac4:	d8c14c17 	ldw	r3,1328(sp)
 1010ac8:	1880040c 	andi	r2,r3,16
 1010acc:	1002b01e 	bne	r2,zero,1011590 <___vfprintf_internal_r+0x15d0>
 1010ad0:	d9014c17 	ldw	r4,1328(sp)
 1010ad4:	2080100c 	andi	r2,r4,64
 1010ad8:	1002ad26 	beq	r2,zero,1011590 <___vfprintf_internal_r+0x15d0>
 1010adc:	3c00000b 	ldhu	r16,0(r7)
 1010ae0:	01000044 	movi	r4,1
 1010ae4:	39c00104 	addi	r7,r7,4
 1010ae8:	0023883a 	mov	r17,zero
 1010aec:	d9c14015 	stw	r7,1280(sp)
 1010af0:	d8000405 	stb	zero,16(sp)
 1010af4:	003fc006 	br	10109f8 <___vfprintf_internal_r+0xa38>
 1010af8:	d9014f17 	ldw	r4,1340(sp)
 1010afc:	b00b883a 	mov	r5,r22
 1010b00:	d9800c04 	addi	r6,sp,48
 1010b04:	100ff680 	call	100ff68 <__sprint_r>
 1010b08:	103ee51e 	bne	r2,zero,10106a0 <___vfprintf_internal_r+0x6e0>
 1010b0c:	dc800e17 	ldw	r18,56(sp)
 1010b10:	d8c01904 	addi	r3,sp,100
 1010b14:	d9814c17 	ldw	r6,1328(sp)
 1010b18:	3080004c 	andi	r2,r6,1
 1010b1c:	1005003a 	cmpeq	r2,r2,zero
 1010b20:	103ea51e 	bne	r2,zero,10105b8 <___vfprintf_internal_r+0x5f8>
 1010b24:	00800044 	movi	r2,1
 1010b28:	dc400d17 	ldw	r17,52(sp)
 1010b2c:	18800115 	stw	r2,4(r3)
 1010b30:	d8814917 	ldw	r2,1316(sp)
 1010b34:	94800044 	addi	r18,r18,1
 1010b38:	8c400044 	addi	r17,r17,1
 1010b3c:	18800015 	stw	r2,0(r3)
 1010b40:	008001c4 	movi	r2,7
 1010b44:	dc800e15 	stw	r18,56(sp)
 1010b48:	dc400d15 	stw	r17,52(sp)
 1010b4c:	14421e0e 	bge	r2,r17,10113c8 <___vfprintf_internal_r+0x1408>
 1010b50:	d9014f17 	ldw	r4,1340(sp)
 1010b54:	b00b883a 	mov	r5,r22
 1010b58:	d9800c04 	addi	r6,sp,48
 1010b5c:	100ff680 	call	100ff68 <__sprint_r>
 1010b60:	103ecf1e 	bne	r2,zero,10106a0 <___vfprintf_internal_r+0x6e0>
 1010b64:	dc800e17 	ldw	r18,56(sp)
 1010b68:	d8c01904 	addi	r3,sp,100
 1010b6c:	003e9206 	br	10105b8 <___vfprintf_internal_r+0x5f8>
 1010b70:	d9014f17 	ldw	r4,1340(sp)
 1010b74:	b00b883a 	mov	r5,r22
 1010b78:	d9800c04 	addi	r6,sp,48
 1010b7c:	100ff680 	call	100ff68 <__sprint_r>
 1010b80:	103ec026 	beq	r2,zero,1010684 <___vfprintf_internal_r+0x6c4>
 1010b84:	003ec606 	br	10106a0 <___vfprintf_internal_r+0x6e0>
 1010b88:	d9014f17 	ldw	r4,1340(sp)
 1010b8c:	b00b883a 	mov	r5,r22
 1010b90:	d9800c04 	addi	r6,sp,48
 1010b94:	d9c15115 	stw	r7,1348(sp)
 1010b98:	100ff680 	call	100ff68 <__sprint_r>
 1010b9c:	d9c15117 	ldw	r7,1348(sp)
 1010ba0:	103ebf1e 	bne	r2,zero,10106a0 <___vfprintf_internal_r+0x6e0>
 1010ba4:	dc800e17 	ldw	r18,56(sp)
 1010ba8:	dc400d17 	ldw	r17,52(sp)
 1010bac:	dd401904 	addi	r21,sp,100
 1010bb0:	003e7406 	br	1010584 <___vfprintf_internal_r+0x5c4>
 1010bb4:	d9014f17 	ldw	r4,1340(sp)
 1010bb8:	b00b883a 	mov	r5,r22
 1010bbc:	d9800c04 	addi	r6,sp,48
 1010bc0:	d9c15115 	stw	r7,1348(sp)
 1010bc4:	100ff680 	call	100ff68 <__sprint_r>
 1010bc8:	d9c15117 	ldw	r7,1348(sp)
 1010bcc:	103eb41e 	bne	r2,zero,10106a0 <___vfprintf_internal_r+0x6e0>
 1010bd0:	dd401904 	addi	r21,sp,100
 1010bd4:	003d6d06 	br	101018c <___vfprintf_internal_r+0x1cc>
 1010bd8:	d9014f17 	ldw	r4,1340(sp)
 1010bdc:	b00b883a 	mov	r5,r22
 1010be0:	d9800c04 	addi	r6,sp,48
 1010be4:	d9c15115 	stw	r7,1348(sp)
 1010be8:	100ff680 	call	100ff68 <__sprint_r>
 1010bec:	d9c15117 	ldw	r7,1348(sp)
 1010bf0:	103eab1e 	bne	r2,zero,10106a0 <___vfprintf_internal_r+0x6e0>
 1010bf4:	dc800e17 	ldw	r18,56(sp)
 1010bf8:	dc400d17 	ldw	r17,52(sp)
 1010bfc:	dd401904 	addi	r21,sp,100
 1010c00:	003e3406 	br	10104d4 <___vfprintf_internal_r+0x514>
 1010c04:	d9014f17 	ldw	r4,1340(sp)
 1010c08:	b00b883a 	mov	r5,r22
 1010c0c:	d9800c04 	addi	r6,sp,48
 1010c10:	d9c15115 	stw	r7,1348(sp)
 1010c14:	100ff680 	call	100ff68 <__sprint_r>
 1010c18:	d9c15117 	ldw	r7,1348(sp)
 1010c1c:	103ea01e 	bne	r2,zero,10106a0 <___vfprintf_internal_r+0x6e0>
 1010c20:	dc800e17 	ldw	r18,56(sp)
 1010c24:	dc400d17 	ldw	r17,52(sp)
 1010c28:	dd401904 	addi	r21,sp,100
 1010c2c:	003e1c06 	br	10104a0 <___vfprintf_internal_r+0x4e0>
 1010c30:	d9014f17 	ldw	r4,1340(sp)
 1010c34:	b00b883a 	mov	r5,r22
 1010c38:	d9800c04 	addi	r6,sp,48
 1010c3c:	d9c15115 	stw	r7,1348(sp)
 1010c40:	100ff680 	call	100ff68 <__sprint_r>
 1010c44:	d9c15117 	ldw	r7,1348(sp)
 1010c48:	103e951e 	bne	r2,zero,10106a0 <___vfprintf_internal_r+0x6e0>
 1010c4c:	dc800e17 	ldw	r18,56(sp)
 1010c50:	dc400d17 	ldw	r17,52(sp)
 1010c54:	dd401904 	addi	r21,sp,100
 1010c58:	003e0406 	br	101046c <___vfprintf_internal_r+0x4ac>
 1010c5c:	d9000517 	ldw	r4,20(sp)
 1010c60:	0102520e 	bge	zero,r4,10115ac <___vfprintf_internal_r+0x15ec>
 1010c64:	d9814717 	ldw	r6,1308(sp)
 1010c68:	21807a16 	blt	r4,r6,1010e54 <___vfprintf_internal_r+0xe94>
 1010c6c:	d8814117 	ldw	r2,1284(sp)
 1010c70:	91a5883a 	add	r18,r18,r6
 1010c74:	8c400044 	addi	r17,r17,1
 1010c78:	a8800015 	stw	r2,0(r21)
 1010c7c:	008001c4 	movi	r2,7
 1010c80:	a9800115 	stw	r6,4(r21)
 1010c84:	dc800e15 	stw	r18,56(sp)
 1010c88:	dc400d15 	stw	r17,52(sp)
 1010c8c:	1442f616 	blt	r2,r17,1011868 <___vfprintf_internal_r+0x18a8>
 1010c90:	a8c00204 	addi	r3,r21,8
 1010c94:	d9414717 	ldw	r5,1308(sp)
 1010c98:	2161c83a 	sub	r16,r4,r5
 1010c9c:	043f9d0e 	bge	zero,r16,1010b14 <___vfprintf_internal_r+0xb54>
 1010ca0:	00800404 	movi	r2,16
 1010ca4:	1402130e 	bge	r2,r16,10114f4 <___vfprintf_internal_r+0x1534>
 1010ca8:	dc400d17 	ldw	r17,52(sp)
 1010cac:	1027883a 	mov	r19,r2
 1010cb0:	070040b4 	movhi	fp,258
 1010cb4:	e71e4d84 	addi	fp,fp,31030
 1010cb8:	050001c4 	movi	r20,7
 1010cbc:	00000306 	br	1010ccc <___vfprintf_internal_r+0xd0c>
 1010cc0:	18c00204 	addi	r3,r3,8
 1010cc4:	843ffc04 	addi	r16,r16,-16
 1010cc8:	9c020d0e 	bge	r19,r16,1011500 <___vfprintf_internal_r+0x1540>
 1010ccc:	94800404 	addi	r18,r18,16
 1010cd0:	8c400044 	addi	r17,r17,1
 1010cd4:	1f000015 	stw	fp,0(r3)
 1010cd8:	1cc00115 	stw	r19,4(r3)
 1010cdc:	dc800e15 	stw	r18,56(sp)
 1010ce0:	dc400d15 	stw	r17,52(sp)
 1010ce4:	a47ff60e 	bge	r20,r17,1010cc0 <___vfprintf_internal_r+0xd00>
 1010ce8:	d9014f17 	ldw	r4,1340(sp)
 1010cec:	b00b883a 	mov	r5,r22
 1010cf0:	d9800c04 	addi	r6,sp,48
 1010cf4:	100ff680 	call	100ff68 <__sprint_r>
 1010cf8:	103e691e 	bne	r2,zero,10106a0 <___vfprintf_internal_r+0x6e0>
 1010cfc:	dc800e17 	ldw	r18,56(sp)
 1010d00:	dc400d17 	ldw	r17,52(sp)
 1010d04:	d8c01904 	addi	r3,sp,100
 1010d08:	003fee06 	br	1010cc4 <___vfprintf_internal_r+0xd04>
 1010d0c:	d8814717 	ldw	r2,1308(sp)
 1010d10:	143fffc4 	addi	r16,r2,-1
 1010d14:	043e970e 	bge	zero,r16,1010774 <___vfprintf_internal_r+0x7b4>
 1010d18:	00800404 	movi	r2,16
 1010d1c:	1400180e 	bge	r2,r16,1010d80 <___vfprintf_internal_r+0xdc0>
 1010d20:	1029883a 	mov	r20,r2
 1010d24:	070040b4 	movhi	fp,258
 1010d28:	e71e4d84 	addi	fp,fp,31030
 1010d2c:	054001c4 	movi	r21,7
 1010d30:	00000306 	br	1010d40 <___vfprintf_internal_r+0xd80>
 1010d34:	9cc00204 	addi	r19,r19,8
 1010d38:	843ffc04 	addi	r16,r16,-16
 1010d3c:	a400120e 	bge	r20,r16,1010d88 <___vfprintf_internal_r+0xdc8>
 1010d40:	94800404 	addi	r18,r18,16
 1010d44:	8c400044 	addi	r17,r17,1
 1010d48:	9f000015 	stw	fp,0(r19)
 1010d4c:	9d000115 	stw	r20,4(r19)
 1010d50:	dc800e15 	stw	r18,56(sp)
 1010d54:	dc400d15 	stw	r17,52(sp)
 1010d58:	ac7ff60e 	bge	r21,r17,1010d34 <___vfprintf_internal_r+0xd74>
 1010d5c:	d9014f17 	ldw	r4,1340(sp)
 1010d60:	b00b883a 	mov	r5,r22
 1010d64:	d9800c04 	addi	r6,sp,48
 1010d68:	100ff680 	call	100ff68 <__sprint_r>
 1010d6c:	103e4c1e 	bne	r2,zero,10106a0 <___vfprintf_internal_r+0x6e0>
 1010d70:	dc800e17 	ldw	r18,56(sp)
 1010d74:	dc400d17 	ldw	r17,52(sp)
 1010d78:	dcc01904 	addi	r19,sp,100
 1010d7c:	003fee06 	br	1010d38 <___vfprintf_internal_r+0xd78>
 1010d80:	070040b4 	movhi	fp,258
 1010d84:	e71e4d84 	addi	fp,fp,31030
 1010d88:	9425883a 	add	r18,r18,r16
 1010d8c:	8c400044 	addi	r17,r17,1
 1010d90:	008001c4 	movi	r2,7
 1010d94:	9f000015 	stw	fp,0(r19)
 1010d98:	9c000115 	stw	r16,4(r19)
 1010d9c:	dc800e15 	stw	r18,56(sp)
 1010da0:	dc400d15 	stw	r17,52(sp)
 1010da4:	147e720e 	bge	r2,r17,1010770 <___vfprintf_internal_r+0x7b0>
 1010da8:	d9014f17 	ldw	r4,1340(sp)
 1010dac:	b00b883a 	mov	r5,r22
 1010db0:	d9800c04 	addi	r6,sp,48
 1010db4:	100ff680 	call	100ff68 <__sprint_r>
 1010db8:	103e391e 	bne	r2,zero,10106a0 <___vfprintf_internal_r+0x6e0>
 1010dbc:	dc800e17 	ldw	r18,56(sp)
 1010dc0:	dc400d17 	ldw	r17,52(sp)
 1010dc4:	dcc01904 	addi	r19,sp,100
 1010dc8:	003e6a06 	br	1010774 <___vfprintf_internal_r+0x7b4>
 1010dcc:	d9014f17 	ldw	r4,1340(sp)
 1010dd0:	b00b883a 	mov	r5,r22
 1010dd4:	d9800c04 	addi	r6,sp,48
 1010dd8:	d9c15115 	stw	r7,1348(sp)
 1010ddc:	100ff680 	call	100ff68 <__sprint_r>
 1010de0:	d9c15117 	ldw	r7,1348(sp)
 1010de4:	103e2e1e 	bne	r2,zero,10106a0 <___vfprintf_internal_r+0x6e0>
 1010de8:	dc800e17 	ldw	r18,56(sp)
 1010dec:	dc400d17 	ldw	r17,52(sp)
 1010df0:	dd401904 	addi	r21,sp,100
 1010df4:	003dba06 	br	10104e0 <___vfprintf_internal_r+0x520>
 1010df8:	d9014f17 	ldw	r4,1340(sp)
 1010dfc:	b00b883a 	mov	r5,r22
 1010e00:	d9800c04 	addi	r6,sp,48
 1010e04:	100ff680 	call	100ff68 <__sprint_r>
 1010e08:	103e251e 	bne	r2,zero,10106a0 <___vfprintf_internal_r+0x6e0>
 1010e0c:	dc800e17 	ldw	r18,56(sp)
 1010e10:	dc400d17 	ldw	r17,52(sp)
 1010e14:	dcc01904 	addi	r19,sp,100
 1010e18:	003e4206 	br	1010724 <___vfprintf_internal_r+0x764>
 1010e1c:	d9014f17 	ldw	r4,1340(sp)
 1010e20:	b00b883a 	mov	r5,r22
 1010e24:	d9800c04 	addi	r6,sp,48
 1010e28:	100ff680 	call	100ff68 <__sprint_r>
 1010e2c:	103e1c1e 	bne	r2,zero,10106a0 <___vfprintf_internal_r+0x6e0>
 1010e30:	dc800e17 	ldw	r18,56(sp)
 1010e34:	dc400d17 	ldw	r17,52(sp)
 1010e38:	d8c01904 	addi	r3,sp,100
 1010e3c:	003e2e06 	br	10106f8 <___vfprintf_internal_r+0x738>
 1010e40:	d9414c17 	ldw	r5,1328(sp)
 1010e44:	2880004c 	andi	r2,r5,1
 1010e48:	1005003a 	cmpeq	r2,r2,zero
 1010e4c:	103dda1e 	bne	r2,zero,10105b8 <___vfprintf_internal_r+0x5f8>
 1010e50:	003e9f06 	br	10108d0 <___vfprintf_internal_r+0x910>
 1010e54:	d8c14117 	ldw	r3,1284(sp)
 1010e58:	9125883a 	add	r18,r18,r4
 1010e5c:	8c400044 	addi	r17,r17,1
 1010e60:	008001c4 	movi	r2,7
 1010e64:	a8c00015 	stw	r3,0(r21)
 1010e68:	a9000115 	stw	r4,4(r21)
 1010e6c:	dc800e15 	stw	r18,56(sp)
 1010e70:	dc400d15 	stw	r17,52(sp)
 1010e74:	14426616 	blt	r2,r17,1011810 <___vfprintf_internal_r+0x1850>
 1010e78:	a8c00204 	addi	r3,r21,8
 1010e7c:	d9414917 	ldw	r5,1316(sp)
 1010e80:	00800044 	movi	r2,1
 1010e84:	94800044 	addi	r18,r18,1
 1010e88:	8c400044 	addi	r17,r17,1
 1010e8c:	18800115 	stw	r2,4(r3)
 1010e90:	008001c4 	movi	r2,7
 1010e94:	19400015 	stw	r5,0(r3)
 1010e98:	dc800e15 	stw	r18,56(sp)
 1010e9c:	dc400d15 	stw	r17,52(sp)
 1010ea0:	2021883a 	mov	r16,r4
 1010ea4:	14425016 	blt	r2,r17,10117e8 <___vfprintf_internal_r+0x1828>
 1010ea8:	19400204 	addi	r5,r3,8
 1010eac:	d9814717 	ldw	r6,1308(sp)
 1010eb0:	8c400044 	addi	r17,r17,1
 1010eb4:	dc400d15 	stw	r17,52(sp)
 1010eb8:	3107c83a 	sub	r3,r6,r4
 1010ebc:	d9014117 	ldw	r4,1284(sp)
 1010ec0:	90e5883a 	add	r18,r18,r3
 1010ec4:	28c00115 	stw	r3,4(r5)
 1010ec8:	8105883a 	add	r2,r16,r4
 1010ecc:	28800015 	stw	r2,0(r5)
 1010ed0:	008001c4 	movi	r2,7
 1010ed4:	dc800e15 	stw	r18,56(sp)
 1010ed8:	147f1d16 	blt	r2,r17,1010b50 <___vfprintf_internal_r+0xb90>
 1010edc:	28c00204 	addi	r3,r5,8
 1010ee0:	003db506 	br	10105b8 <___vfprintf_internal_r+0x5f8>
 1010ee4:	3c000017 	ldw	r16,0(r7)
 1010ee8:	3c400117 	ldw	r17,4(r7)
 1010eec:	39800204 	addi	r6,r7,8
 1010ef0:	01000044 	movi	r4,1
 1010ef4:	d9814015 	stw	r6,1280(sp)
 1010ef8:	d8000405 	stb	zero,16(sp)
 1010efc:	003ebe06 	br	10109f8 <___vfprintf_internal_r+0xa38>
 1010f00:	3c000017 	ldw	r16,0(r7)
 1010f04:	3c400117 	ldw	r17,4(r7)
 1010f08:	38800204 	addi	r2,r7,8
 1010f0c:	d8814015 	stw	r2,1280(sp)
 1010f10:	003eb706 	br	10109f0 <___vfprintf_internal_r+0xa30>
 1010f14:	3c000017 	ldw	r16,0(r7)
 1010f18:	3c400117 	ldw	r17,4(r7)
 1010f1c:	39000204 	addi	r4,r7,8
 1010f20:	d9014015 	stw	r4,1280(sp)
 1010f24:	0009883a 	mov	r4,zero
 1010f28:	d8000405 	stb	zero,16(sp)
 1010f2c:	003eb206 	br	10109f8 <___vfprintf_internal_r+0xa38>
 1010f30:	38c00017 	ldw	r3,0(r7)
 1010f34:	39c00104 	addi	r7,r7,4
 1010f38:	d8c14a15 	stw	r3,1320(sp)
 1010f3c:	1800d10e 	bge	r3,zero,1011284 <___vfprintf_internal_r+0x12c4>
 1010f40:	00c7c83a 	sub	r3,zero,r3
 1010f44:	d8c14a15 	stw	r3,1320(sp)
 1010f48:	d9014c17 	ldw	r4,1328(sp)
 1010f4c:	b8c00007 	ldb	r3,0(r23)
 1010f50:	21000114 	ori	r4,r4,4
 1010f54:	d9014c15 	stw	r4,1328(sp)
 1010f58:	003c9806 	br	10101bc <___vfprintf_internal_r+0x1fc>
 1010f5c:	d9814c17 	ldw	r6,1328(sp)
 1010f60:	3080080c 	andi	r2,r6,32
 1010f64:	1001f026 	beq	r2,zero,1011728 <___vfprintf_internal_r+0x1768>
 1010f68:	d9014b17 	ldw	r4,1324(sp)
 1010f6c:	38800017 	ldw	r2,0(r7)
 1010f70:	39c00104 	addi	r7,r7,4
 1010f74:	d9c14015 	stw	r7,1280(sp)
 1010f78:	2007d7fa 	srai	r3,r4,31
 1010f7c:	d9c14017 	ldw	r7,1280(sp)
 1010f80:	11000015 	stw	r4,0(r2)
 1010f84:	10c00115 	stw	r3,4(r2)
 1010f88:	003c6906 	br	1010130 <___vfprintf_internal_r+0x170>
 1010f8c:	b8c00007 	ldb	r3,0(r23)
 1010f90:	00801b04 	movi	r2,108
 1010f94:	18824f26 	beq	r3,r2,10118d4 <___vfprintf_internal_r+0x1914>
 1010f98:	d9414c17 	ldw	r5,1328(sp)
 1010f9c:	29400414 	ori	r5,r5,16
 1010fa0:	d9414c15 	stw	r5,1328(sp)
 1010fa4:	003c8506 	br	10101bc <___vfprintf_internal_r+0x1fc>
 1010fa8:	d9814c17 	ldw	r6,1328(sp)
 1010fac:	b8c00007 	ldb	r3,0(r23)
 1010fb0:	31800814 	ori	r6,r6,32
 1010fb4:	d9814c15 	stw	r6,1328(sp)
 1010fb8:	003c8006 	br	10101bc <___vfprintf_internal_r+0x1fc>
 1010fbc:	d8814c17 	ldw	r2,1328(sp)
 1010fc0:	3c000017 	ldw	r16,0(r7)
 1010fc4:	00c01e04 	movi	r3,120
 1010fc8:	10800094 	ori	r2,r2,2
 1010fcc:	d8814c15 	stw	r2,1328(sp)
 1010fd0:	39c00104 	addi	r7,r7,4
 1010fd4:	014040b4 	movhi	r5,258
 1010fd8:	295e3604 	addi	r5,r5,30936
 1010fdc:	00800c04 	movi	r2,48
 1010fe0:	0023883a 	mov	r17,zero
 1010fe4:	01000084 	movi	r4,2
 1010fe8:	d9c14015 	stw	r7,1280(sp)
 1010fec:	d8c14d15 	stw	r3,1332(sp)
 1010ff0:	d9414415 	stw	r5,1296(sp)
 1010ff4:	d8800445 	stb	r2,17(sp)
 1010ff8:	d8c00485 	stb	r3,18(sp)
 1010ffc:	d8000405 	stb	zero,16(sp)
 1011000:	003e7d06 	br	10109f8 <___vfprintf_internal_r+0xa38>
 1011004:	d8814c17 	ldw	r2,1328(sp)
 1011008:	b8c00007 	ldb	r3,0(r23)
 101100c:	10801014 	ori	r2,r2,64
 1011010:	d8814c15 	stw	r2,1328(sp)
 1011014:	003c6906 	br	10101bc <___vfprintf_internal_r+0x1fc>
 1011018:	d9414c17 	ldw	r5,1328(sp)
 101101c:	2880020c 	andi	r2,r5,8
 1011020:	1001df26 	beq	r2,zero,10117a0 <___vfprintf_internal_r+0x17e0>
 1011024:	39800017 	ldw	r6,0(r7)
 1011028:	38800204 	addi	r2,r7,8
 101102c:	d8814015 	stw	r2,1280(sp)
 1011030:	d9814215 	stw	r6,1288(sp)
 1011034:	39c00117 	ldw	r7,4(r7)
 1011038:	d9c14315 	stw	r7,1292(sp)
 101103c:	d9014217 	ldw	r4,1288(sp)
 1011040:	d9414317 	ldw	r5,1292(sp)
 1011044:	10176400 	call	1017640 <__isinfd>
 1011048:	10021726 	beq	r2,zero,10118a8 <___vfprintf_internal_r+0x18e8>
 101104c:	d9014217 	ldw	r4,1288(sp)
 1011050:	d9414317 	ldw	r5,1292(sp)
 1011054:	000d883a 	mov	r6,zero
 1011058:	000f883a 	mov	r7,zero
 101105c:	100c98c0 	call	100c98c <__ltdf2>
 1011060:	1002ca16 	blt	r2,zero,1011b8c <___vfprintf_internal_r+0x1bcc>
 1011064:	d9414d17 	ldw	r5,1332(sp)
 1011068:	008011c4 	movi	r2,71
 101106c:	11420a16 	blt	r2,r5,1011898 <___vfprintf_internal_r+0x18d8>
 1011070:	018040b4 	movhi	r6,258
 1011074:	319e3b04 	addi	r6,r6,30956
 1011078:	d9814115 	stw	r6,1284(sp)
 101107c:	d9014c17 	ldw	r4,1328(sp)
 1011080:	00c000c4 	movi	r3,3
 1011084:	00bfdfc4 	movi	r2,-129
 1011088:	2088703a 	and	r4,r4,r2
 101108c:	180f883a 	mov	r7,r3
 1011090:	d8c14515 	stw	r3,1300(sp)
 1011094:	d9014c15 	stw	r4,1328(sp)
 1011098:	d8014615 	stw	zero,1304(sp)
 101109c:	003e6a06 	br	1010a48 <___vfprintf_internal_r+0xa88>
 10110a0:	38800017 	ldw	r2,0(r7)
 10110a4:	00c00044 	movi	r3,1
 10110a8:	39c00104 	addi	r7,r7,4
 10110ac:	d9c14015 	stw	r7,1280(sp)
 10110b0:	d9000f04 	addi	r4,sp,60
 10110b4:	180f883a 	mov	r7,r3
 10110b8:	d8c14515 	stw	r3,1300(sp)
 10110bc:	d9014115 	stw	r4,1284(sp)
 10110c0:	d8800f05 	stb	r2,60(sp)
 10110c4:	d8000405 	stb	zero,16(sp)
 10110c8:	003cac06 	br	101037c <___vfprintf_internal_r+0x3bc>
 10110cc:	014040b4 	movhi	r5,258
 10110d0:	295e4104 	addi	r5,r5,30980
 10110d4:	d9414415 	stw	r5,1296(sp)
 10110d8:	d9814c17 	ldw	r6,1328(sp)
 10110dc:	3080080c 	andi	r2,r6,32
 10110e0:	1000f926 	beq	r2,zero,10114c8 <___vfprintf_internal_r+0x1508>
 10110e4:	3c000017 	ldw	r16,0(r7)
 10110e8:	3c400117 	ldw	r17,4(r7)
 10110ec:	38800204 	addi	r2,r7,8
 10110f0:	d8814015 	stw	r2,1280(sp)
 10110f4:	d9414c17 	ldw	r5,1328(sp)
 10110f8:	2880004c 	andi	r2,r5,1
 10110fc:	1005003a 	cmpeq	r2,r2,zero
 1011100:	1000b31e 	bne	r2,zero,10113d0 <___vfprintf_internal_r+0x1410>
 1011104:	8444b03a 	or	r2,r16,r17
 1011108:	1000b126 	beq	r2,zero,10113d0 <___vfprintf_internal_r+0x1410>
 101110c:	d9814d17 	ldw	r6,1332(sp)
 1011110:	29400094 	ori	r5,r5,2
 1011114:	00800c04 	movi	r2,48
 1011118:	01000084 	movi	r4,2
 101111c:	d9414c15 	stw	r5,1328(sp)
 1011120:	d8800445 	stb	r2,17(sp)
 1011124:	d9800485 	stb	r6,18(sp)
 1011128:	d8000405 	stb	zero,16(sp)
 101112c:	003e3206 	br	10109f8 <___vfprintf_internal_r+0xa38>
 1011130:	018040b4 	movhi	r6,258
 1011134:	319e3604 	addi	r6,r6,30936
 1011138:	d9814415 	stw	r6,1296(sp)
 101113c:	003fe606 	br	10110d8 <___vfprintf_internal_r+0x1118>
 1011140:	00800ac4 	movi	r2,43
 1011144:	d8800405 	stb	r2,16(sp)
 1011148:	b8c00007 	ldb	r3,0(r23)
 101114c:	003c1b06 	br	10101bc <___vfprintf_internal_r+0x1fc>
 1011150:	d8814c17 	ldw	r2,1328(sp)
 1011154:	b8c00007 	ldb	r3,0(r23)
 1011158:	10800054 	ori	r2,r2,1
 101115c:	d8814c15 	stw	r2,1328(sp)
 1011160:	003c1606 	br	10101bc <___vfprintf_internal_r+0x1fc>
 1011164:	d8800407 	ldb	r2,16(sp)
 1011168:	1000461e 	bne	r2,zero,1011284 <___vfprintf_internal_r+0x12c4>
 101116c:	00800804 	movi	r2,32
 1011170:	d8800405 	stb	r2,16(sp)
 1011174:	b8c00007 	ldb	r3,0(r23)
 1011178:	003c1006 	br	10101bc <___vfprintf_internal_r+0x1fc>
 101117c:	d9814c17 	ldw	r6,1328(sp)
 1011180:	b8c00007 	ldb	r3,0(r23)
 1011184:	31800214 	ori	r6,r6,8
 1011188:	d9814c15 	stw	r6,1328(sp)
 101118c:	003c0b06 	br	10101bc <___vfprintf_internal_r+0x1fc>
 1011190:	0007883a 	mov	r3,zero
 1011194:	01000244 	movi	r4,9
 1011198:	188002a4 	muli	r2,r3,10
 101119c:	b8c00007 	ldb	r3,0(r23)
 10111a0:	d9814d17 	ldw	r6,1332(sp)
 10111a4:	bdc00044 	addi	r23,r23,1
 10111a8:	d8c14d15 	stw	r3,1332(sp)
 10111ac:	d9414d17 	ldw	r5,1332(sp)
 10111b0:	3085883a 	add	r2,r6,r2
 10111b4:	10fff404 	addi	r3,r2,-48
 10111b8:	28bff404 	addi	r2,r5,-48
 10111bc:	20bff62e 	bgeu	r4,r2,1011198 <___vfprintf_internal_r+0x11d8>
 10111c0:	d8c14a15 	stw	r3,1320(sp)
 10111c4:	003bff06 	br	10101c4 <___vfprintf_internal_r+0x204>
 10111c8:	d9414c17 	ldw	r5,1328(sp)
 10111cc:	b8c00007 	ldb	r3,0(r23)
 10111d0:	29402014 	ori	r5,r5,128
 10111d4:	d9414c15 	stw	r5,1328(sp)
 10111d8:	003bf806 	br	10101bc <___vfprintf_internal_r+0x1fc>
 10111dc:	b8c00007 	ldb	r3,0(r23)
 10111e0:	00800a84 	movi	r2,42
 10111e4:	bdc00044 	addi	r23,r23,1
 10111e8:	18831526 	beq	r3,r2,1011e40 <___vfprintf_internal_r+0x1e80>
 10111ec:	d8c14d15 	stw	r3,1332(sp)
 10111f0:	18bff404 	addi	r2,r3,-48
 10111f4:	00c00244 	movi	r3,9
 10111f8:	18827836 	bltu	r3,r2,1011bdc <___vfprintf_internal_r+0x1c1c>
 10111fc:	000d883a 	mov	r6,zero
 1011200:	308002a4 	muli	r2,r6,10
 1011204:	b9800007 	ldb	r6,0(r23)
 1011208:	d9414d17 	ldw	r5,1332(sp)
 101120c:	bdc00044 	addi	r23,r23,1
 1011210:	d9814d15 	stw	r6,1332(sp)
 1011214:	d9014d17 	ldw	r4,1332(sp)
 1011218:	1145883a 	add	r2,r2,r5
 101121c:	11bff404 	addi	r6,r2,-48
 1011220:	20bff404 	addi	r2,r4,-48
 1011224:	18bff62e 	bgeu	r3,r2,1011200 <___vfprintf_internal_r+0x1240>
 1011228:	3027883a 	mov	r19,r6
 101122c:	303be50e 	bge	r6,zero,10101c4 <___vfprintf_internal_r+0x204>
 1011230:	04ffffc4 	movi	r19,-1
 1011234:	003be306 	br	10101c4 <___vfprintf_internal_r+0x204>
 1011238:	d8000405 	stb	zero,16(sp)
 101123c:	39800017 	ldw	r6,0(r7)
 1011240:	39c00104 	addi	r7,r7,4
 1011244:	d9c14015 	stw	r7,1280(sp)
 1011248:	d9814115 	stw	r6,1284(sp)
 101124c:	3001c926 	beq	r6,zero,1011974 <___vfprintf_internal_r+0x19b4>
 1011250:	98000e16 	blt	r19,zero,101128c <___vfprintf_internal_r+0x12cc>
 1011254:	d9014117 	ldw	r4,1284(sp)
 1011258:	000b883a 	mov	r5,zero
 101125c:	980d883a 	mov	r6,r19
 1011260:	1015c100 	call	1015c10 <memchr>
 1011264:	10025926 	beq	r2,zero,1011bcc <___vfprintf_internal_r+0x1c0c>
 1011268:	d8c14117 	ldw	r3,1284(sp)
 101126c:	10cfc83a 	sub	r7,r2,r3
 1011270:	99c19e16 	blt	r19,r7,10118ec <___vfprintf_internal_r+0x192c>
 1011274:	d9c14515 	stw	r7,1300(sp)
 1011278:	38000916 	blt	r7,zero,10112a0 <___vfprintf_internal_r+0x12e0>
 101127c:	d8014615 	stw	zero,1304(sp)
 1011280:	003df106 	br	1010a48 <___vfprintf_internal_r+0xa88>
 1011284:	b8c00007 	ldb	r3,0(r23)
 1011288:	003bcc06 	br	10101bc <___vfprintf_internal_r+0x1fc>
 101128c:	d9014117 	ldw	r4,1284(sp)
 1011290:	100e3080 	call	100e308 <strlen>
 1011294:	d8814515 	stw	r2,1300(sp)
 1011298:	100f883a 	mov	r7,r2
 101129c:	103ff70e 	bge	r2,zero,101127c <___vfprintf_internal_r+0x12bc>
 10112a0:	d8014515 	stw	zero,1300(sp)
 10112a4:	d8014615 	stw	zero,1304(sp)
 10112a8:	003de706 	br	1010a48 <___vfprintf_internal_r+0xa88>
 10112ac:	20c03fcc 	andi	r3,r4,255
 10112b0:	00800044 	movi	r2,1
 10112b4:	18802d26 	beq	r3,r2,101136c <___vfprintf_internal_r+0x13ac>
 10112b8:	18800e36 	bltu	r3,r2,10112f4 <___vfprintf_internal_r+0x1334>
 10112bc:	00800084 	movi	r2,2
 10112c0:	1880fa26 	beq	r3,r2,10116ac <___vfprintf_internal_r+0x16ec>
 10112c4:	010040b4 	movhi	r4,258
 10112c8:	211e4604 	addi	r4,r4,31000
 10112cc:	100e3080 	call	100e308 <strlen>
 10112d0:	100f883a 	mov	r7,r2
 10112d4:	dcc14515 	stw	r19,1300(sp)
 10112d8:	9880010e 	bge	r19,r2,10112e0 <___vfprintf_internal_r+0x1320>
 10112dc:	d8814515 	stw	r2,1300(sp)
 10112e0:	008040b4 	movhi	r2,258
 10112e4:	109e4604 	addi	r2,r2,31000
 10112e8:	dcc14615 	stw	r19,1304(sp)
 10112ec:	d8814115 	stw	r2,1284(sp)
 10112f0:	003dd506 	br	1010a48 <___vfprintf_internal_r+0xa88>
 10112f4:	d9401904 	addi	r5,sp,100
 10112f8:	dd000f04 	addi	r20,sp,60
 10112fc:	d9414115 	stw	r5,1284(sp)
 1011300:	880a977a 	slli	r5,r17,29
 1011304:	d9814117 	ldw	r6,1284(sp)
 1011308:	8004d0fa 	srli	r2,r16,3
 101130c:	8806d0fa 	srli	r3,r17,3
 1011310:	810001cc 	andi	r4,r16,7
 1011314:	2884b03a 	or	r2,r5,r2
 1011318:	31bfffc4 	addi	r6,r6,-1
 101131c:	21000c04 	addi	r4,r4,48
 1011320:	d9814115 	stw	r6,1284(sp)
 1011324:	10cab03a 	or	r5,r2,r3
 1011328:	31000005 	stb	r4,0(r6)
 101132c:	1021883a 	mov	r16,r2
 1011330:	1823883a 	mov	r17,r3
 1011334:	283ff21e 	bne	r5,zero,1011300 <___vfprintf_internal_r+0x1340>
 1011338:	d8c14c17 	ldw	r3,1328(sp)
 101133c:	1880004c 	andi	r2,r3,1
 1011340:	1005003a 	cmpeq	r2,r2,zero
 1011344:	103db91e 	bne	r2,zero,1010a2c <___vfprintf_internal_r+0xa6c>
 1011348:	20803fcc 	andi	r2,r4,255
 101134c:	1080201c 	xori	r2,r2,128
 1011350:	10bfe004 	addi	r2,r2,-128
 1011354:	00c00c04 	movi	r3,48
 1011358:	10fdb426 	beq	r2,r3,1010a2c <___vfprintf_internal_r+0xa6c>
 101135c:	31bfffc4 	addi	r6,r6,-1
 1011360:	d9814115 	stw	r6,1284(sp)
 1011364:	30c00005 	stb	r3,0(r6)
 1011368:	003db006 	br	1010a2c <___vfprintf_internal_r+0xa6c>
 101136c:	88800068 	cmpgeui	r2,r17,1
 1011370:	10002c1e 	bne	r2,zero,1011424 <___vfprintf_internal_r+0x1464>
 1011374:	8800021e 	bne	r17,zero,1011380 <___vfprintf_internal_r+0x13c0>
 1011378:	00800244 	movi	r2,9
 101137c:	14002936 	bltu	r2,r16,1011424 <___vfprintf_internal_r+0x1464>
 1011380:	d90018c4 	addi	r4,sp,99
 1011384:	dd000f04 	addi	r20,sp,60
 1011388:	d9014115 	stw	r4,1284(sp)
 101138c:	d9014117 	ldw	r4,1284(sp)
 1011390:	80800c04 	addi	r2,r16,48
 1011394:	20800005 	stb	r2,0(r4)
 1011398:	003da406 	br	1010a2c <___vfprintf_internal_r+0xa6c>
 101139c:	dc400d17 	ldw	r17,52(sp)
 10113a0:	070040b4 	movhi	fp,258
 10113a4:	e71e4d84 	addi	fp,fp,31030
 10113a8:	9425883a 	add	r18,r18,r16
 10113ac:	8c400044 	addi	r17,r17,1
 10113b0:	008001c4 	movi	r2,7
 10113b4:	1f000015 	stw	fp,0(r3)
 10113b8:	1c000115 	stw	r16,4(r3)
 10113bc:	dc800e15 	stw	r18,56(sp)
 10113c0:	dc400d15 	stw	r17,52(sp)
 10113c4:	147de216 	blt	r2,r17,1010b50 <___vfprintf_internal_r+0xb90>
 10113c8:	18c00204 	addi	r3,r3,8
 10113cc:	003c7a06 	br	10105b8 <___vfprintf_internal_r+0x5f8>
 10113d0:	01000084 	movi	r4,2
 10113d4:	d8000405 	stb	zero,16(sp)
 10113d8:	003d8706 	br	10109f8 <___vfprintf_internal_r+0xa38>
 10113dc:	d9814c17 	ldw	r6,1328(sp)
 10113e0:	30c4703a 	and	r2,r6,r3
 10113e4:	1005003a 	cmpeq	r2,r2,zero
 10113e8:	103cb926 	beq	r2,zero,10106d0 <___vfprintf_internal_r+0x710>
 10113ec:	d9014117 	ldw	r4,1284(sp)
 10113f0:	94800044 	addi	r18,r18,1
 10113f4:	8c400044 	addi	r17,r17,1
 10113f8:	008001c4 	movi	r2,7
 10113fc:	a9000015 	stw	r4,0(r21)
 1011400:	a8c00115 	stw	r3,4(r21)
 1011404:	dc800e15 	stw	r18,56(sp)
 1011408:	dc400d15 	stw	r17,52(sp)
 101140c:	147e6616 	blt	r2,r17,1010da8 <___vfprintf_internal_r+0xde8>
 1011410:	acc00204 	addi	r19,r21,8
 1011414:	003cd706 	br	1010774 <___vfprintf_internal_r+0x7b4>
 1011418:	070040b4 	movhi	fp,258
 101141c:	e71e4d84 	addi	fp,fp,31030
 1011420:	003c4f06 	br	1010560 <___vfprintf_internal_r+0x5a0>
 1011424:	dd000f04 	addi	r20,sp,60
 1011428:	dc801904 	addi	r18,sp,100
 101142c:	8009883a 	mov	r4,r16
 1011430:	880b883a 	mov	r5,r17
 1011434:	01800284 	movi	r6,10
 1011438:	000f883a 	mov	r7,zero
 101143c:	101849c0 	call	101849c <__umoddi3>
 1011440:	12000c04 	addi	r8,r2,48
 1011444:	94bfffc4 	addi	r18,r18,-1
 1011448:	8009883a 	mov	r4,r16
 101144c:	880b883a 	mov	r5,r17
 1011450:	01800284 	movi	r6,10
 1011454:	000f883a 	mov	r7,zero
 1011458:	92000005 	stb	r8,0(r18)
 101145c:	1017ec00 	call	1017ec0 <__udivdi3>
 1011460:	1009883a 	mov	r4,r2
 1011464:	1021883a 	mov	r16,r2
 1011468:	18800068 	cmpgeui	r2,r3,1
 101146c:	1823883a 	mov	r17,r3
 1011470:	103fee1e 	bne	r2,zero,101142c <___vfprintf_internal_r+0x146c>
 1011474:	1800021e 	bne	r3,zero,1011480 <___vfprintf_internal_r+0x14c0>
 1011478:	00800244 	movi	r2,9
 101147c:	113feb36 	bltu	r2,r4,101142c <___vfprintf_internal_r+0x146c>
 1011480:	94bfffc4 	addi	r18,r18,-1
 1011484:	dc814115 	stw	r18,1284(sp)
 1011488:	003fc006 	br	101138c <___vfprintf_internal_r+0x13cc>
 101148c:	d9014c17 	ldw	r4,1328(sp)
 1011490:	2080004c 	andi	r2,r4,1
 1011494:	10009a1e 	bne	r2,zero,1011700 <___vfprintf_internal_r+0x1740>
 1011498:	d9401904 	addi	r5,sp,100
 101149c:	dd000f04 	addi	r20,sp,60
 10114a0:	d9414115 	stw	r5,1284(sp)
 10114a4:	003d6106 	br	1010a2c <___vfprintf_internal_r+0xa6c>
 10114a8:	d9014f17 	ldw	r4,1340(sp)
 10114ac:	b00b883a 	mov	r5,r22
 10114b0:	d9800c04 	addi	r6,sp,48
 10114b4:	100ff680 	call	100ff68 <__sprint_r>
 10114b8:	103c791e 	bne	r2,zero,10106a0 <___vfprintf_internal_r+0x6e0>
 10114bc:	dc800e17 	ldw	r18,56(sp)
 10114c0:	d8c01904 	addi	r3,sp,100
 10114c4:	003cff06 	br	10108c4 <___vfprintf_internal_r+0x904>
 10114c8:	d8c14c17 	ldw	r3,1328(sp)
 10114cc:	1880040c 	andi	r2,r3,16
 10114d0:	1000711e 	bne	r2,zero,1011698 <___vfprintf_internal_r+0x16d8>
 10114d4:	d9014c17 	ldw	r4,1328(sp)
 10114d8:	2080100c 	andi	r2,r4,64
 10114dc:	10006e26 	beq	r2,zero,1011698 <___vfprintf_internal_r+0x16d8>
 10114e0:	3c00000b 	ldhu	r16,0(r7)
 10114e4:	0023883a 	mov	r17,zero
 10114e8:	39c00104 	addi	r7,r7,4
 10114ec:	d9c14015 	stw	r7,1280(sp)
 10114f0:	003f0006 	br	10110f4 <___vfprintf_internal_r+0x1134>
 10114f4:	dc400d17 	ldw	r17,52(sp)
 10114f8:	070040b4 	movhi	fp,258
 10114fc:	e71e4d84 	addi	fp,fp,31030
 1011500:	9425883a 	add	r18,r18,r16
 1011504:	8c400044 	addi	r17,r17,1
 1011508:	008001c4 	movi	r2,7
 101150c:	1f000015 	stw	fp,0(r3)
 1011510:	1c000115 	stw	r16,4(r3)
 1011514:	dc800e15 	stw	r18,56(sp)
 1011518:	dc400d15 	stw	r17,52(sp)
 101151c:	147d7616 	blt	r2,r17,1010af8 <___vfprintf_internal_r+0xb38>
 1011520:	18c00204 	addi	r3,r3,8
 1011524:	003d7b06 	br	1010b14 <___vfprintf_internal_r+0xb54>
 1011528:	dc800e17 	ldw	r18,56(sp)
 101152c:	dc400d17 	ldw	r17,52(sp)
 1011530:	070040b4 	movhi	fp,258
 1011534:	e71e5184 	addi	fp,fp,31046
 1011538:	003bc006 	br	101043c <___vfprintf_internal_r+0x47c>
 101153c:	d9014f17 	ldw	r4,1340(sp)
 1011540:	b00b883a 	mov	r5,r22
 1011544:	d9800c04 	addi	r6,sp,48
 1011548:	100ff680 	call	100ff68 <__sprint_r>
 101154c:	103c541e 	bne	r2,zero,10106a0 <___vfprintf_internal_r+0x6e0>
 1011550:	dc800e17 	ldw	r18,56(sp)
 1011554:	d8c01904 	addi	r3,sp,100
 1011558:	003ce906 	br	1010900 <___vfprintf_internal_r+0x940>
 101155c:	3c000017 	ldw	r16,0(r7)
 1011560:	0009883a 	mov	r4,zero
 1011564:	39c00104 	addi	r7,r7,4
 1011568:	0023883a 	mov	r17,zero
 101156c:	d9c14015 	stw	r7,1280(sp)
 1011570:	d8000405 	stb	zero,16(sp)
 1011574:	003d2006 	br	10109f8 <___vfprintf_internal_r+0xa38>
 1011578:	38800017 	ldw	r2,0(r7)
 101157c:	39c00104 	addi	r7,r7,4
 1011580:	d9c14015 	stw	r7,1280(sp)
 1011584:	1023d7fa 	srai	r17,r2,31
 1011588:	1021883a 	mov	r16,r2
 101158c:	003d1806 	br	10109f0 <___vfprintf_internal_r+0xa30>
 1011590:	3c000017 	ldw	r16,0(r7)
 1011594:	01000044 	movi	r4,1
 1011598:	39c00104 	addi	r7,r7,4
 101159c:	0023883a 	mov	r17,zero
 10115a0:	d9c14015 	stw	r7,1280(sp)
 10115a4:	d8000405 	stb	zero,16(sp)
 10115a8:	003d1306 	br	10109f8 <___vfprintf_internal_r+0xa38>
 10115ac:	008040b4 	movhi	r2,258
 10115b0:	109e4d04 	addi	r2,r2,31028
 10115b4:	94800044 	addi	r18,r18,1
 10115b8:	8c400044 	addi	r17,r17,1
 10115bc:	a8800015 	stw	r2,0(r21)
 10115c0:	00c00044 	movi	r3,1
 10115c4:	008001c4 	movi	r2,7
 10115c8:	a8c00115 	stw	r3,4(r21)
 10115cc:	dc800e15 	stw	r18,56(sp)
 10115d0:	dc400d15 	stw	r17,52(sp)
 10115d4:	1440ca16 	blt	r2,r17,1011900 <___vfprintf_internal_r+0x1940>
 10115d8:	a8c00204 	addi	r3,r21,8
 10115dc:	2000061e 	bne	r4,zero,10115f8 <___vfprintf_internal_r+0x1638>
 10115e0:	d9414717 	ldw	r5,1308(sp)
 10115e4:	2800041e 	bne	r5,zero,10115f8 <___vfprintf_internal_r+0x1638>
 10115e8:	d9814c17 	ldw	r6,1328(sp)
 10115ec:	3080004c 	andi	r2,r6,1
 10115f0:	1005003a 	cmpeq	r2,r2,zero
 10115f4:	103bf01e 	bne	r2,zero,10105b8 <___vfprintf_internal_r+0x5f8>
 10115f8:	00800044 	movi	r2,1
 10115fc:	dc400d17 	ldw	r17,52(sp)
 1011600:	18800115 	stw	r2,4(r3)
 1011604:	d8814917 	ldw	r2,1316(sp)
 1011608:	94800044 	addi	r18,r18,1
 101160c:	8c400044 	addi	r17,r17,1
 1011610:	18800015 	stw	r2,0(r3)
 1011614:	008001c4 	movi	r2,7
 1011618:	dc800e15 	stw	r18,56(sp)
 101161c:	dc400d15 	stw	r17,52(sp)
 1011620:	1440ca16 	blt	r2,r17,101194c <___vfprintf_internal_r+0x198c>
 1011624:	18c00204 	addi	r3,r3,8
 1011628:	0121c83a 	sub	r16,zero,r4
 101162c:	0400500e 	bge	zero,r16,1011770 <___vfprintf_internal_r+0x17b0>
 1011630:	00800404 	movi	r2,16
 1011634:	1400800e 	bge	r2,r16,1011838 <___vfprintf_internal_r+0x1878>
 1011638:	1027883a 	mov	r19,r2
 101163c:	070040b4 	movhi	fp,258
 1011640:	e71e4d84 	addi	fp,fp,31030
 1011644:	050001c4 	movi	r20,7
 1011648:	00000306 	br	1011658 <___vfprintf_internal_r+0x1698>
 101164c:	18c00204 	addi	r3,r3,8
 1011650:	843ffc04 	addi	r16,r16,-16
 1011654:	9c007a0e 	bge	r19,r16,1011840 <___vfprintf_internal_r+0x1880>
 1011658:	94800404 	addi	r18,r18,16
 101165c:	8c400044 	addi	r17,r17,1
 1011660:	1f000015 	stw	fp,0(r3)
 1011664:	1cc00115 	stw	r19,4(r3)
 1011668:	dc800e15 	stw	r18,56(sp)
 101166c:	dc400d15 	stw	r17,52(sp)
 1011670:	a47ff60e 	bge	r20,r17,101164c <___vfprintf_internal_r+0x168c>
 1011674:	d9014f17 	ldw	r4,1340(sp)
 1011678:	b00b883a 	mov	r5,r22
 101167c:	d9800c04 	addi	r6,sp,48
 1011680:	100ff680 	call	100ff68 <__sprint_r>
 1011684:	103c061e 	bne	r2,zero,10106a0 <___vfprintf_internal_r+0x6e0>
 1011688:	dc800e17 	ldw	r18,56(sp)
 101168c:	dc400d17 	ldw	r17,52(sp)
 1011690:	d8c01904 	addi	r3,sp,100
 1011694:	003fee06 	br	1011650 <___vfprintf_internal_r+0x1690>
 1011698:	3c000017 	ldw	r16,0(r7)
 101169c:	0023883a 	mov	r17,zero
 10116a0:	39c00104 	addi	r7,r7,4
 10116a4:	d9c14015 	stw	r7,1280(sp)
 10116a8:	003e9206 	br	10110f4 <___vfprintf_internal_r+0x1134>
 10116ac:	d9401904 	addi	r5,sp,100
 10116b0:	dd000f04 	addi	r20,sp,60
 10116b4:	d9414115 	stw	r5,1284(sp)
 10116b8:	d9814417 	ldw	r6,1296(sp)
 10116bc:	880a973a 	slli	r5,r17,28
 10116c0:	8004d13a 	srli	r2,r16,4
 10116c4:	810003cc 	andi	r4,r16,15
 10116c8:	3109883a 	add	r4,r6,r4
 10116cc:	2884b03a 	or	r2,r5,r2
 10116d0:	21400003 	ldbu	r5,0(r4)
 10116d4:	d9014117 	ldw	r4,1284(sp)
 10116d8:	8806d13a 	srli	r3,r17,4
 10116dc:	1021883a 	mov	r16,r2
 10116e0:	213fffc4 	addi	r4,r4,-1
 10116e4:	d9014115 	stw	r4,1284(sp)
 10116e8:	d9814117 	ldw	r6,1284(sp)
 10116ec:	10c8b03a 	or	r4,r2,r3
 10116f0:	1823883a 	mov	r17,r3
 10116f4:	31400005 	stb	r5,0(r6)
 10116f8:	203fef1e 	bne	r4,zero,10116b8 <___vfprintf_internal_r+0x16f8>
 10116fc:	003ccb06 	br	1010a2c <___vfprintf_internal_r+0xa6c>
 1011700:	00800c04 	movi	r2,48
 1011704:	d98018c4 	addi	r6,sp,99
 1011708:	dd000f04 	addi	r20,sp,60
 101170c:	d88018c5 	stb	r2,99(sp)
 1011710:	d9814115 	stw	r6,1284(sp)
 1011714:	003cc506 	br	1010a2c <___vfprintf_internal_r+0xa6c>
 1011718:	dc400d17 	ldw	r17,52(sp)
 101171c:	070040b4 	movhi	fp,258
 1011720:	e71e5184 	addi	fp,fp,31046
 1011724:	003bc706 	br	1010644 <___vfprintf_internal_r+0x684>
 1011728:	d9414c17 	ldw	r5,1328(sp)
 101172c:	2880040c 	andi	r2,r5,16
 1011730:	10007c26 	beq	r2,zero,1011924 <___vfprintf_internal_r+0x1964>
 1011734:	38800017 	ldw	r2,0(r7)
 1011738:	39c00104 	addi	r7,r7,4
 101173c:	d9c14015 	stw	r7,1280(sp)
 1011740:	d9814b17 	ldw	r6,1324(sp)
 1011744:	d9c14017 	ldw	r7,1280(sp)
 1011748:	11800015 	stw	r6,0(r2)
 101174c:	003a7806 	br	1010130 <___vfprintf_internal_r+0x170>
 1011750:	d9014f17 	ldw	r4,1340(sp)
 1011754:	b00b883a 	mov	r5,r22
 1011758:	d9800c04 	addi	r6,sp,48
 101175c:	100ff680 	call	100ff68 <__sprint_r>
 1011760:	103bcf1e 	bne	r2,zero,10106a0 <___vfprintf_internal_r+0x6e0>
 1011764:	dc800e17 	ldw	r18,56(sp)
 1011768:	dc400d17 	ldw	r17,52(sp)
 101176c:	d8c01904 	addi	r3,sp,100
 1011770:	d9014717 	ldw	r4,1308(sp)
 1011774:	d9414117 	ldw	r5,1284(sp)
 1011778:	8c400044 	addi	r17,r17,1
 101177c:	9125883a 	add	r18,r18,r4
 1011780:	008001c4 	movi	r2,7
 1011784:	19400015 	stw	r5,0(r3)
 1011788:	19000115 	stw	r4,4(r3)
 101178c:	dc800e15 	stw	r18,56(sp)
 1011790:	dc400d15 	stw	r17,52(sp)
 1011794:	147cee16 	blt	r2,r17,1010b50 <___vfprintf_internal_r+0xb90>
 1011798:	18c00204 	addi	r3,r3,8
 101179c:	003b8606 	br	10105b8 <___vfprintf_internal_r+0x5f8>
 10117a0:	38c00017 	ldw	r3,0(r7)
 10117a4:	39000204 	addi	r4,r7,8
 10117a8:	d9014015 	stw	r4,1280(sp)
 10117ac:	d8c14215 	stw	r3,1288(sp)
 10117b0:	39c00117 	ldw	r7,4(r7)
 10117b4:	d9c14315 	stw	r7,1292(sp)
 10117b8:	003e2006 	br	101103c <___vfprintf_internal_r+0x107c>
 10117bc:	0005883a 	mov	r2,zero
 10117c0:	1409c83a 	sub	r4,r2,r16
 10117c4:	1105803a 	cmpltu	r2,r2,r4
 10117c8:	044bc83a 	sub	r5,zero,r17
 10117cc:	2885c83a 	sub	r2,r5,r2
 10117d0:	2021883a 	mov	r16,r4
 10117d4:	1023883a 	mov	r17,r2
 10117d8:	01000044 	movi	r4,1
 10117dc:	00800b44 	movi	r2,45
 10117e0:	d8800405 	stb	r2,16(sp)
 10117e4:	003c8406 	br	10109f8 <___vfprintf_internal_r+0xa38>
 10117e8:	d9014f17 	ldw	r4,1340(sp)
 10117ec:	b00b883a 	mov	r5,r22
 10117f0:	d9800c04 	addi	r6,sp,48
 10117f4:	100ff680 	call	100ff68 <__sprint_r>
 10117f8:	103ba91e 	bne	r2,zero,10106a0 <___vfprintf_internal_r+0x6e0>
 10117fc:	dc800e17 	ldw	r18,56(sp)
 1011800:	dc400d17 	ldw	r17,52(sp)
 1011804:	d9000517 	ldw	r4,20(sp)
 1011808:	d9401904 	addi	r5,sp,100
 101180c:	003da706 	br	1010eac <___vfprintf_internal_r+0xeec>
 1011810:	d9014f17 	ldw	r4,1340(sp)
 1011814:	b00b883a 	mov	r5,r22
 1011818:	d9800c04 	addi	r6,sp,48
 101181c:	100ff680 	call	100ff68 <__sprint_r>
 1011820:	103b9f1e 	bne	r2,zero,10106a0 <___vfprintf_internal_r+0x6e0>
 1011824:	dc800e17 	ldw	r18,56(sp)
 1011828:	dc400d17 	ldw	r17,52(sp)
 101182c:	d9000517 	ldw	r4,20(sp)
 1011830:	d8c01904 	addi	r3,sp,100
 1011834:	003d9106 	br	1010e7c <___vfprintf_internal_r+0xebc>
 1011838:	070040b4 	movhi	fp,258
 101183c:	e71e4d84 	addi	fp,fp,31030
 1011840:	9425883a 	add	r18,r18,r16
 1011844:	8c400044 	addi	r17,r17,1
 1011848:	008001c4 	movi	r2,7
 101184c:	1f000015 	stw	fp,0(r3)
 1011850:	1c000115 	stw	r16,4(r3)
 1011854:	dc800e15 	stw	r18,56(sp)
 1011858:	dc400d15 	stw	r17,52(sp)
 101185c:	147fbc16 	blt	r2,r17,1011750 <___vfprintf_internal_r+0x1790>
 1011860:	18c00204 	addi	r3,r3,8
 1011864:	003fc206 	br	1011770 <___vfprintf_internal_r+0x17b0>
 1011868:	d9014f17 	ldw	r4,1340(sp)
 101186c:	b00b883a 	mov	r5,r22
 1011870:	d9800c04 	addi	r6,sp,48
 1011874:	100ff680 	call	100ff68 <__sprint_r>
 1011878:	103b891e 	bne	r2,zero,10106a0 <___vfprintf_internal_r+0x6e0>
 101187c:	dc800e17 	ldw	r18,56(sp)
 1011880:	d9000517 	ldw	r4,20(sp)
 1011884:	d8c01904 	addi	r3,sp,100
 1011888:	003d0206 	br	1010c94 <___vfprintf_internal_r+0xcd4>
 101188c:	070040b4 	movhi	fp,258
 1011890:	e71e4d84 	addi	fp,fp,31030
 1011894:	003be406 	br	1010828 <___vfprintf_internal_r+0x868>
 1011898:	008040b4 	movhi	r2,258
 101189c:	109e3c04 	addi	r2,r2,30960
 10118a0:	d8814115 	stw	r2,1284(sp)
 10118a4:	003df506 	br	101107c <___vfprintf_internal_r+0x10bc>
 10118a8:	d9014217 	ldw	r4,1288(sp)
 10118ac:	d9414317 	ldw	r5,1292(sp)
 10118b0:	100b4d40 	call	100b4d4 <__isnand>
 10118b4:	10003926 	beq	r2,zero,101199c <___vfprintf_internal_r+0x19dc>
 10118b8:	d9414d17 	ldw	r5,1332(sp)
 10118bc:	008011c4 	movi	r2,71
 10118c0:	1140ce16 	blt	r2,r5,1011bfc <___vfprintf_internal_r+0x1c3c>
 10118c4:	018040b4 	movhi	r6,258
 10118c8:	319e3d04 	addi	r6,r6,30964
 10118cc:	d9814115 	stw	r6,1284(sp)
 10118d0:	003dea06 	br	101107c <___vfprintf_internal_r+0x10bc>
 10118d4:	d9014c17 	ldw	r4,1328(sp)
 10118d8:	bdc00044 	addi	r23,r23,1
 10118dc:	b8c00007 	ldb	r3,0(r23)
 10118e0:	21000814 	ori	r4,r4,32
 10118e4:	d9014c15 	stw	r4,1328(sp)
 10118e8:	003a3406 	br	10101bc <___vfprintf_internal_r+0x1fc>
 10118ec:	dcc14515 	stw	r19,1300(sp)
 10118f0:	98011016 	blt	r19,zero,1011d34 <___vfprintf_internal_r+0x1d74>
 10118f4:	980f883a 	mov	r7,r19
 10118f8:	d8014615 	stw	zero,1304(sp)
 10118fc:	003c5206 	br	1010a48 <___vfprintf_internal_r+0xa88>
 1011900:	d9014f17 	ldw	r4,1340(sp)
 1011904:	b00b883a 	mov	r5,r22
 1011908:	d9800c04 	addi	r6,sp,48
 101190c:	100ff680 	call	100ff68 <__sprint_r>
 1011910:	103b631e 	bne	r2,zero,10106a0 <___vfprintf_internal_r+0x6e0>
 1011914:	dc800e17 	ldw	r18,56(sp)
 1011918:	d9000517 	ldw	r4,20(sp)
 101191c:	d8c01904 	addi	r3,sp,100
 1011920:	003f2e06 	br	10115dc <___vfprintf_internal_r+0x161c>
 1011924:	d8c14c17 	ldw	r3,1328(sp)
 1011928:	1880100c 	andi	r2,r3,64
 101192c:	1000a026 	beq	r2,zero,1011bb0 <___vfprintf_internal_r+0x1bf0>
 1011930:	38800017 	ldw	r2,0(r7)
 1011934:	39c00104 	addi	r7,r7,4
 1011938:	d9c14015 	stw	r7,1280(sp)
 101193c:	d9014b17 	ldw	r4,1324(sp)
 1011940:	d9c14017 	ldw	r7,1280(sp)
 1011944:	1100000d 	sth	r4,0(r2)
 1011948:	0039f906 	br	1010130 <___vfprintf_internal_r+0x170>
 101194c:	d9014f17 	ldw	r4,1340(sp)
 1011950:	b00b883a 	mov	r5,r22
 1011954:	d9800c04 	addi	r6,sp,48
 1011958:	100ff680 	call	100ff68 <__sprint_r>
 101195c:	103b501e 	bne	r2,zero,10106a0 <___vfprintf_internal_r+0x6e0>
 1011960:	dc800e17 	ldw	r18,56(sp)
 1011964:	dc400d17 	ldw	r17,52(sp)
 1011968:	d9000517 	ldw	r4,20(sp)
 101196c:	d8c01904 	addi	r3,sp,100
 1011970:	003f2d06 	br	1011628 <___vfprintf_internal_r+0x1668>
 1011974:	00800184 	movi	r2,6
 1011978:	14c09a36 	bltu	r2,r19,1011be4 <___vfprintf_internal_r+0x1c24>
 101197c:	dcc14515 	stw	r19,1300(sp)
 1011980:	9800010e 	bge	r19,zero,1011988 <___vfprintf_internal_r+0x19c8>
 1011984:	d8014515 	stw	zero,1300(sp)
 1011988:	008040b4 	movhi	r2,258
 101198c:	109e3f04 	addi	r2,r2,30972
 1011990:	980f883a 	mov	r7,r19
 1011994:	d8814115 	stw	r2,1284(sp)
 1011998:	003a7806 	br	101037c <___vfprintf_internal_r+0x3bc>
 101199c:	00bfffc4 	movi	r2,-1
 10119a0:	9880e226 	beq	r19,r2,1011d2c <___vfprintf_internal_r+0x1d6c>
 10119a4:	d9414d17 	ldw	r5,1332(sp)
 10119a8:	008019c4 	movi	r2,103
 10119ac:	2880dc26 	beq	r5,r2,1011d20 <___vfprintf_internal_r+0x1d60>
 10119b0:	008011c4 	movi	r2,71
 10119b4:	2880da26 	beq	r5,r2,1011d20 <___vfprintf_internal_r+0x1d60>
 10119b8:	d9414c17 	ldw	r5,1328(sp)
 10119bc:	d9014317 	ldw	r4,1292(sp)
 10119c0:	d9814217 	ldw	r6,1288(sp)
 10119c4:	29404014 	ori	r5,r5,256
 10119c8:	d9414c15 	stw	r5,1328(sp)
 10119cc:	2000cc16 	blt	r4,zero,1011d00 <___vfprintf_internal_r+0x1d40>
 10119d0:	3021883a 	mov	r16,r6
 10119d4:	2023883a 	mov	r17,r4
 10119d8:	0039883a 	mov	fp,zero
 10119dc:	d9414d17 	ldw	r5,1332(sp)
 10119e0:	00801984 	movi	r2,102
 10119e4:	2880b726 	beq	r5,r2,1011cc4 <___vfprintf_internal_r+0x1d04>
 10119e8:	00801184 	movi	r2,70
 10119ec:	2880b526 	beq	r5,r2,1011cc4 <___vfprintf_internal_r+0x1d04>
 10119f0:	00801944 	movi	r2,101
 10119f4:	2880c826 	beq	r5,r2,1011d18 <___vfprintf_internal_r+0x1d58>
 10119f8:	00801144 	movi	r2,69
 10119fc:	2880c626 	beq	r5,r2,1011d18 <___vfprintf_internal_r+0x1d58>
 1011a00:	9829883a 	mov	r20,r19
 1011a04:	d9014f17 	ldw	r4,1340(sp)
 1011a08:	d8800504 	addi	r2,sp,20
 1011a0c:	880d883a 	mov	r6,r17
 1011a10:	d8800115 	stw	r2,4(sp)
 1011a14:	d8c00604 	addi	r3,sp,24
 1011a18:	d8800704 	addi	r2,sp,28
 1011a1c:	800b883a 	mov	r5,r16
 1011a20:	01c00084 	movi	r7,2
 1011a24:	d8c00215 	stw	r3,8(sp)
 1011a28:	d8800315 	stw	r2,12(sp)
 1011a2c:	dd000015 	stw	r20,0(sp)
 1011a30:	10121e40 	call	10121e4 <_dtoa_r>
 1011a34:	d9814d17 	ldw	r6,1332(sp)
 1011a38:	d8814115 	stw	r2,1284(sp)
 1011a3c:	008019c4 	movi	r2,103
 1011a40:	30809526 	beq	r6,r2,1011c98 <___vfprintf_internal_r+0x1cd8>
 1011a44:	d8c14d17 	ldw	r3,1332(sp)
 1011a48:	008011c4 	movi	r2,71
 1011a4c:	18809226 	beq	r3,r2,1011c98 <___vfprintf_internal_r+0x1cd8>
 1011a50:	d9414117 	ldw	r5,1284(sp)
 1011a54:	d9814d17 	ldw	r6,1332(sp)
 1011a58:	00801984 	movi	r2,102
 1011a5c:	2d25883a 	add	r18,r5,r20
 1011a60:	30808626 	beq	r6,r2,1011c7c <___vfprintf_internal_r+0x1cbc>
 1011a64:	00801184 	movi	r2,70
 1011a68:	30808426 	beq	r6,r2,1011c7c <___vfprintf_internal_r+0x1cbc>
 1011a6c:	000d883a 	mov	r6,zero
 1011a70:	000f883a 	mov	r7,zero
 1011a74:	880b883a 	mov	r5,r17
 1011a78:	8009883a 	mov	r4,r16
 1011a7c:	100c7f40 	call	100c7f4 <__eqdf2>
 1011a80:	1000751e 	bne	r2,zero,1011c58 <___vfprintf_internal_r+0x1c98>
 1011a84:	9005883a 	mov	r2,r18
 1011a88:	dc800715 	stw	r18,28(sp)
 1011a8c:	d9014117 	ldw	r4,1284(sp)
 1011a90:	d9414d17 	ldw	r5,1332(sp)
 1011a94:	00c019c4 	movi	r3,103
 1011a98:	1125c83a 	sub	r18,r2,r4
 1011a9c:	28c06826 	beq	r5,r3,1011c40 <___vfprintf_internal_r+0x1c80>
 1011aa0:	008011c4 	movi	r2,71
 1011aa4:	28806626 	beq	r5,r2,1011c40 <___vfprintf_internal_r+0x1c80>
 1011aa8:	d9000517 	ldw	r4,20(sp)
 1011aac:	d8c14d17 	ldw	r3,1332(sp)
 1011ab0:	00801944 	movi	r2,101
 1011ab4:	10c05516 	blt	r2,r3,1011c0c <___vfprintf_internal_r+0x1c4c>
 1011ab8:	213fffc4 	addi	r4,r4,-1
 1011abc:	d9000515 	stw	r4,20(sp)
 1011ac0:	d8c00805 	stb	r3,32(sp)
 1011ac4:	2021883a 	mov	r16,r4
 1011ac8:	2000c116 	blt	r4,zero,1011dd0 <___vfprintf_internal_r+0x1e10>
 1011acc:	00800ac4 	movi	r2,43
 1011ad0:	d8800845 	stb	r2,33(sp)
 1011ad4:	00800244 	movi	r2,9
 1011ad8:	1400af0e 	bge	r2,r16,1011d98 <___vfprintf_internal_r+0x1dd8>
 1011adc:	1027883a 	mov	r19,r2
 1011ae0:	dc400b84 	addi	r17,sp,46
 1011ae4:	8009883a 	mov	r4,r16
 1011ae8:	01400284 	movi	r5,10
 1011aec:	100cd6c0 	call	100cd6c <__modsi3>
 1011af0:	10800c04 	addi	r2,r2,48
 1011af4:	8c7fffc4 	addi	r17,r17,-1
 1011af8:	8009883a 	mov	r4,r16
 1011afc:	01400284 	movi	r5,10
 1011b00:	88800005 	stb	r2,0(r17)
 1011b04:	100cd0c0 	call	100cd0c <__divsi3>
 1011b08:	1021883a 	mov	r16,r2
 1011b0c:	98bff516 	blt	r19,r2,1011ae4 <___vfprintf_internal_r+0x1b24>
 1011b10:	10c00c04 	addi	r3,r2,48
 1011b14:	d88009c4 	addi	r2,sp,39
 1011b18:	108001c4 	addi	r2,r2,7
 1011b1c:	897fffc4 	addi	r5,r17,-1
 1011b20:	88ffffc5 	stb	r3,-1(r17)
 1011b24:	2880a72e 	bgeu	r5,r2,1011dc4 <___vfprintf_internal_r+0x1e04>
 1011b28:	1009883a 	mov	r4,r2
 1011b2c:	d9800804 	addi	r6,sp,32
 1011b30:	d8c00884 	addi	r3,sp,34
 1011b34:	28800003 	ldbu	r2,0(r5)
 1011b38:	29400044 	addi	r5,r5,1
 1011b3c:	18800005 	stb	r2,0(r3)
 1011b40:	18c00044 	addi	r3,r3,1
 1011b44:	293ffb36 	bltu	r5,r4,1011b34 <___vfprintf_internal_r+0x1b74>
 1011b48:	1987c83a 	sub	r3,r3,r6
 1011b4c:	00800044 	movi	r2,1
 1011b50:	d8c14815 	stw	r3,1312(sp)
 1011b54:	90cf883a 	add	r7,r18,r3
 1011b58:	1480960e 	bge	r2,r18,1011db4 <___vfprintf_internal_r+0x1df4>
 1011b5c:	39c00044 	addi	r7,r7,1
 1011b60:	d9c14515 	stw	r7,1300(sp)
 1011b64:	38003416 	blt	r7,zero,1011c38 <___vfprintf_internal_r+0x1c78>
 1011b68:	e0803fcc 	andi	r2,fp,255
 1011b6c:	1080201c 	xori	r2,r2,128
 1011b70:	10bfe004 	addi	r2,r2,-128
 1011b74:	10004e26 	beq	r2,zero,1011cb0 <___vfprintf_internal_r+0x1cf0>
 1011b78:	00800b44 	movi	r2,45
 1011b7c:	dc814715 	stw	r18,1308(sp)
 1011b80:	d8014615 	stw	zero,1304(sp)
 1011b84:	d8800405 	stb	r2,16(sp)
 1011b88:	003bb106 	br	1010a50 <___vfprintf_internal_r+0xa90>
 1011b8c:	00800b44 	movi	r2,45
 1011b90:	d8800405 	stb	r2,16(sp)
 1011b94:	003d3306 	br	1011064 <___vfprintf_internal_r+0x10a4>
 1011b98:	d9014f17 	ldw	r4,1340(sp)
 1011b9c:	b00b883a 	mov	r5,r22
 1011ba0:	d9800c04 	addi	r6,sp,48
 1011ba4:	100ff680 	call	100ff68 <__sprint_r>
 1011ba8:	103abd1e 	bne	r2,zero,10106a0 <___vfprintf_internal_r+0x6e0>
 1011bac:	003abb06 	br	101069c <___vfprintf_internal_r+0x6dc>
 1011bb0:	38800017 	ldw	r2,0(r7)
 1011bb4:	39c00104 	addi	r7,r7,4
 1011bb8:	d9c14015 	stw	r7,1280(sp)
 1011bbc:	d9414b17 	ldw	r5,1324(sp)
 1011bc0:	d9c14017 	ldw	r7,1280(sp)
 1011bc4:	11400015 	stw	r5,0(r2)
 1011bc8:	00395906 	br	1010130 <___vfprintf_internal_r+0x170>
 1011bcc:	980f883a 	mov	r7,r19
 1011bd0:	dcc14515 	stw	r19,1300(sp)
 1011bd4:	d8014615 	stw	zero,1304(sp)
 1011bd8:	003b9b06 	br	1010a48 <___vfprintf_internal_r+0xa88>
 1011bdc:	0027883a 	mov	r19,zero
 1011be0:	00397806 	br	10101c4 <___vfprintf_internal_r+0x204>
 1011be4:	00c040b4 	movhi	r3,258
 1011be8:	18de3f04 	addi	r3,r3,30972
 1011bec:	100f883a 	mov	r7,r2
 1011bf0:	d8814515 	stw	r2,1300(sp)
 1011bf4:	d8c14115 	stw	r3,1284(sp)
 1011bf8:	0039e006 	br	101037c <___vfprintf_internal_r+0x3bc>
 1011bfc:	008040b4 	movhi	r2,258
 1011c00:	109e3e04 	addi	r2,r2,30968
 1011c04:	d8814115 	stw	r2,1284(sp)
 1011c08:	003d1c06 	br	101107c <___vfprintf_internal_r+0x10bc>
 1011c0c:	d9414d17 	ldw	r5,1332(sp)
 1011c10:	00801984 	movi	r2,102
 1011c14:	28804926 	beq	r5,r2,1011d3c <___vfprintf_internal_r+0x1d7c>
 1011c18:	200f883a 	mov	r7,r4
 1011c1c:	24805716 	blt	r4,r18,1011d7c <___vfprintf_internal_r+0x1dbc>
 1011c20:	d9414c17 	ldw	r5,1328(sp)
 1011c24:	2880004c 	andi	r2,r5,1
 1011c28:	10000126 	beq	r2,zero,1011c30 <___vfprintf_internal_r+0x1c70>
 1011c2c:	21c00044 	addi	r7,r4,1
 1011c30:	d9c14515 	stw	r7,1300(sp)
 1011c34:	383fcc0e 	bge	r7,zero,1011b68 <___vfprintf_internal_r+0x1ba8>
 1011c38:	d8014515 	stw	zero,1300(sp)
 1011c3c:	003fca06 	br	1011b68 <___vfprintf_internal_r+0x1ba8>
 1011c40:	d9000517 	ldw	r4,20(sp)
 1011c44:	00bfff04 	movi	r2,-4
 1011c48:	1100480e 	bge	r2,r4,1011d6c <___vfprintf_internal_r+0x1dac>
 1011c4c:	99004716 	blt	r19,r4,1011d6c <___vfprintf_internal_r+0x1dac>
 1011c50:	d8c14d15 	stw	r3,1332(sp)
 1011c54:	003ff006 	br	1011c18 <___vfprintf_internal_r+0x1c58>
 1011c58:	d8800717 	ldw	r2,28(sp)
 1011c5c:	14bf8b2e 	bgeu	r2,r18,1011a8c <___vfprintf_internal_r+0x1acc>
 1011c60:	9007883a 	mov	r3,r18
 1011c64:	01000c04 	movi	r4,48
 1011c68:	11000005 	stb	r4,0(r2)
 1011c6c:	10800044 	addi	r2,r2,1
 1011c70:	d8800715 	stw	r2,28(sp)
 1011c74:	18bffc1e 	bne	r3,r2,1011c68 <___vfprintf_internal_r+0x1ca8>
 1011c78:	003f8406 	br	1011a8c <___vfprintf_internal_r+0x1acc>
 1011c7c:	d8814117 	ldw	r2,1284(sp)
 1011c80:	10c00007 	ldb	r3,0(r2)
 1011c84:	00800c04 	movi	r2,48
 1011c88:	18805b26 	beq	r3,r2,1011df8 <___vfprintf_internal_r+0x1e38>
 1011c8c:	d9000517 	ldw	r4,20(sp)
 1011c90:	9125883a 	add	r18,r18,r4
 1011c94:	003f7506 	br	1011a6c <___vfprintf_internal_r+0x1aac>
 1011c98:	d9014c17 	ldw	r4,1328(sp)
 1011c9c:	2080004c 	andi	r2,r4,1
 1011ca0:	1005003a 	cmpeq	r2,r2,zero
 1011ca4:	103f6a26 	beq	r2,zero,1011a50 <___vfprintf_internal_r+0x1a90>
 1011ca8:	d8800717 	ldw	r2,28(sp)
 1011cac:	003f7706 	br	1011a8c <___vfprintf_internal_r+0x1acc>
 1011cb0:	d9c14515 	stw	r7,1300(sp)
 1011cb4:	38004d16 	blt	r7,zero,1011dec <___vfprintf_internal_r+0x1e2c>
 1011cb8:	dc814715 	stw	r18,1308(sp)
 1011cbc:	d8014615 	stw	zero,1304(sp)
 1011cc0:	003b6106 	br	1010a48 <___vfprintf_internal_r+0xa88>
 1011cc4:	d9014f17 	ldw	r4,1340(sp)
 1011cc8:	d8800504 	addi	r2,sp,20
 1011ccc:	d8800115 	stw	r2,4(sp)
 1011cd0:	d8c00604 	addi	r3,sp,24
 1011cd4:	d8800704 	addi	r2,sp,28
 1011cd8:	800b883a 	mov	r5,r16
 1011cdc:	880d883a 	mov	r6,r17
 1011ce0:	01c000c4 	movi	r7,3
 1011ce4:	d8c00215 	stw	r3,8(sp)
 1011ce8:	d8800315 	stw	r2,12(sp)
 1011cec:	dcc00015 	stw	r19,0(sp)
 1011cf0:	9829883a 	mov	r20,r19
 1011cf4:	10121e40 	call	10121e4 <_dtoa_r>
 1011cf8:	d8814115 	stw	r2,1284(sp)
 1011cfc:	003f5106 	br	1011a44 <___vfprintf_internal_r+0x1a84>
 1011d00:	d8c14217 	ldw	r3,1288(sp)
 1011d04:	d9014317 	ldw	r4,1292(sp)
 1011d08:	07000b44 	movi	fp,45
 1011d0c:	1821883a 	mov	r16,r3
 1011d10:	2460003c 	xorhi	r17,r4,32768
 1011d14:	003f3106 	br	10119dc <___vfprintf_internal_r+0x1a1c>
 1011d18:	9d000044 	addi	r20,r19,1
 1011d1c:	003f3906 	br	1011a04 <___vfprintf_internal_r+0x1a44>
 1011d20:	983f251e 	bne	r19,zero,10119b8 <___vfprintf_internal_r+0x19f8>
 1011d24:	04c00044 	movi	r19,1
 1011d28:	003f2306 	br	10119b8 <___vfprintf_internal_r+0x19f8>
 1011d2c:	04c00184 	movi	r19,6
 1011d30:	003f2106 	br	10119b8 <___vfprintf_internal_r+0x19f8>
 1011d34:	d8014515 	stw	zero,1300(sp)
 1011d38:	003eee06 	br	10118f4 <___vfprintf_internal_r+0x1934>
 1011d3c:	200f883a 	mov	r7,r4
 1011d40:	0100370e 	bge	zero,r4,1011e20 <___vfprintf_internal_r+0x1e60>
 1011d44:	9800031e 	bne	r19,zero,1011d54 <___vfprintf_internal_r+0x1d94>
 1011d48:	d9814c17 	ldw	r6,1328(sp)
 1011d4c:	3080004c 	andi	r2,r6,1
 1011d50:	103fb726 	beq	r2,zero,1011c30 <___vfprintf_internal_r+0x1c70>
 1011d54:	20800044 	addi	r2,r4,1
 1011d58:	98a7883a 	add	r19,r19,r2
 1011d5c:	dcc14515 	stw	r19,1300(sp)
 1011d60:	980f883a 	mov	r7,r19
 1011d64:	983f800e 	bge	r19,zero,1011b68 <___vfprintf_internal_r+0x1ba8>
 1011d68:	003fb306 	br	1011c38 <___vfprintf_internal_r+0x1c78>
 1011d6c:	d9814d17 	ldw	r6,1332(sp)
 1011d70:	31bfff84 	addi	r6,r6,-2
 1011d74:	d9814d15 	stw	r6,1332(sp)
 1011d78:	003f4c06 	br	1011aac <___vfprintf_internal_r+0x1aec>
 1011d7c:	0100180e 	bge	zero,r4,1011de0 <___vfprintf_internal_r+0x1e20>
 1011d80:	00800044 	movi	r2,1
 1011d84:	1485883a 	add	r2,r2,r18
 1011d88:	d8814515 	stw	r2,1300(sp)
 1011d8c:	100f883a 	mov	r7,r2
 1011d90:	103f750e 	bge	r2,zero,1011b68 <___vfprintf_internal_r+0x1ba8>
 1011d94:	003fa806 	br	1011c38 <___vfprintf_internal_r+0x1c78>
 1011d98:	80c00c04 	addi	r3,r16,48
 1011d9c:	00800c04 	movi	r2,48
 1011da0:	d8c008c5 	stb	r3,35(sp)
 1011da4:	d9800804 	addi	r6,sp,32
 1011da8:	d8c00904 	addi	r3,sp,36
 1011dac:	d8800885 	stb	r2,34(sp)
 1011db0:	003f6506 	br	1011b48 <___vfprintf_internal_r+0x1b88>
 1011db4:	d9014c17 	ldw	r4,1328(sp)
 1011db8:	2084703a 	and	r2,r4,r2
 1011dbc:	103f9c26 	beq	r2,zero,1011c30 <___vfprintf_internal_r+0x1c70>
 1011dc0:	003f6606 	br	1011b5c <___vfprintf_internal_r+0x1b9c>
 1011dc4:	d9800804 	addi	r6,sp,32
 1011dc8:	d8c00884 	addi	r3,sp,34
 1011dcc:	003f5e06 	br	1011b48 <___vfprintf_internal_r+0x1b88>
 1011dd0:	00800b44 	movi	r2,45
 1011dd4:	0121c83a 	sub	r16,zero,r4
 1011dd8:	d8800845 	stb	r2,33(sp)
 1011ddc:	003f3d06 	br	1011ad4 <___vfprintf_internal_r+0x1b14>
 1011de0:	00800084 	movi	r2,2
 1011de4:	1105c83a 	sub	r2,r2,r4
 1011de8:	003fe606 	br	1011d84 <___vfprintf_internal_r+0x1dc4>
 1011dec:	d8014515 	stw	zero,1300(sp)
 1011df0:	dc814715 	stw	r18,1308(sp)
 1011df4:	003fb106 	br	1011cbc <___vfprintf_internal_r+0x1cfc>
 1011df8:	000d883a 	mov	r6,zero
 1011dfc:	000f883a 	mov	r7,zero
 1011e00:	8009883a 	mov	r4,r16
 1011e04:	880b883a 	mov	r5,r17
 1011e08:	1018b3c0 	call	1018b3c <__nedf2>
 1011e0c:	103f9f26 	beq	r2,zero,1011c8c <___vfprintf_internal_r+0x1ccc>
 1011e10:	00800044 	movi	r2,1
 1011e14:	1509c83a 	sub	r4,r2,r20
 1011e18:	d9000515 	stw	r4,20(sp)
 1011e1c:	003f9b06 	br	1011c8c <___vfprintf_internal_r+0x1ccc>
 1011e20:	98000d1e 	bne	r19,zero,1011e58 <___vfprintf_internal_r+0x1e98>
 1011e24:	d8c14c17 	ldw	r3,1328(sp)
 1011e28:	1880004c 	andi	r2,r3,1
 1011e2c:	10000a1e 	bne	r2,zero,1011e58 <___vfprintf_internal_r+0x1e98>
 1011e30:	01000044 	movi	r4,1
 1011e34:	200f883a 	mov	r7,r4
 1011e38:	d9014515 	stw	r4,1300(sp)
 1011e3c:	003f4a06 	br	1011b68 <___vfprintf_internal_r+0x1ba8>
 1011e40:	3cc00017 	ldw	r19,0(r7)
 1011e44:	39c00104 	addi	r7,r7,4
 1011e48:	983d0e0e 	bge	r19,zero,1011284 <___vfprintf_internal_r+0x12c4>
 1011e4c:	b8c00007 	ldb	r3,0(r23)
 1011e50:	04ffffc4 	movi	r19,-1
 1011e54:	0038d906 	br	10101bc <___vfprintf_internal_r+0x1fc>
 1011e58:	9cc00084 	addi	r19,r19,2
 1011e5c:	dcc14515 	stw	r19,1300(sp)
 1011e60:	980f883a 	mov	r7,r19
 1011e64:	983f400e 	bge	r19,zero,1011b68 <___vfprintf_internal_r+0x1ba8>
 1011e68:	003f7306 	br	1011c38 <___vfprintf_internal_r+0x1c78>

01011e6c <__vfprintf_internal>:
 1011e6c:	008040f4 	movhi	r2,259
 1011e70:	10a67004 	addi	r2,r2,-26176
 1011e74:	2013883a 	mov	r9,r4
 1011e78:	11000017 	ldw	r4,0(r2)
 1011e7c:	2805883a 	mov	r2,r5
 1011e80:	300f883a 	mov	r7,r6
 1011e84:	480b883a 	mov	r5,r9
 1011e88:	100d883a 	mov	r6,r2
 1011e8c:	100ffc01 	jmpi	100ffc0 <___vfprintf_internal_r>

01011e90 <__swsetup_r>:
 1011e90:	008040f4 	movhi	r2,259
 1011e94:	10a67004 	addi	r2,r2,-26176
 1011e98:	10c00017 	ldw	r3,0(r2)
 1011e9c:	defffd04 	addi	sp,sp,-12
 1011ea0:	dc400115 	stw	r17,4(sp)
 1011ea4:	dc000015 	stw	r16,0(sp)
 1011ea8:	dfc00215 	stw	ra,8(sp)
 1011eac:	2023883a 	mov	r17,r4
 1011eb0:	2821883a 	mov	r16,r5
 1011eb4:	18000226 	beq	r3,zero,1011ec0 <__swsetup_r+0x30>
 1011eb8:	18800e17 	ldw	r2,56(r3)
 1011ebc:	10001f26 	beq	r2,zero,1011f3c <__swsetup_r+0xac>
 1011ec0:	8100030b 	ldhu	r4,12(r16)
 1011ec4:	2080020c 	andi	r2,r4,8
 1011ec8:	10002826 	beq	r2,zero,1011f6c <__swsetup_r+0xdc>
 1011ecc:	81400417 	ldw	r5,16(r16)
 1011ed0:	28001d26 	beq	r5,zero,1011f48 <__swsetup_r+0xb8>
 1011ed4:	2080004c 	andi	r2,r4,1
 1011ed8:	1005003a 	cmpeq	r2,r2,zero
 1011edc:	10000b26 	beq	r2,zero,1011f0c <__swsetup_r+0x7c>
 1011ee0:	2080008c 	andi	r2,r4,2
 1011ee4:	10001226 	beq	r2,zero,1011f30 <__swsetup_r+0xa0>
 1011ee8:	0005883a 	mov	r2,zero
 1011eec:	80800215 	stw	r2,8(r16)
 1011ef0:	28000b26 	beq	r5,zero,1011f20 <__swsetup_r+0x90>
 1011ef4:	0005883a 	mov	r2,zero
 1011ef8:	dfc00217 	ldw	ra,8(sp)
 1011efc:	dc400117 	ldw	r17,4(sp)
 1011f00:	dc000017 	ldw	r16,0(sp)
 1011f04:	dec00304 	addi	sp,sp,12
 1011f08:	f800283a 	ret
 1011f0c:	80800517 	ldw	r2,20(r16)
 1011f10:	80000215 	stw	zero,8(r16)
 1011f14:	0085c83a 	sub	r2,zero,r2
 1011f18:	80800615 	stw	r2,24(r16)
 1011f1c:	283ff51e 	bne	r5,zero,1011ef4 <__swsetup_r+0x64>
 1011f20:	2080200c 	andi	r2,r4,128
 1011f24:	103ff326 	beq	r2,zero,1011ef4 <__swsetup_r+0x64>
 1011f28:	00bfffc4 	movi	r2,-1
 1011f2c:	003ff206 	br	1011ef8 <__swsetup_r+0x68>
 1011f30:	80800517 	ldw	r2,20(r16)
 1011f34:	80800215 	stw	r2,8(r16)
 1011f38:	003fed06 	br	1011ef0 <__swsetup_r+0x60>
 1011f3c:	1809883a 	mov	r4,r3
 1011f40:	1013a300 	call	1013a30 <__sinit>
 1011f44:	003fde06 	br	1011ec0 <__swsetup_r+0x30>
 1011f48:	20c0a00c 	andi	r3,r4,640
 1011f4c:	00808004 	movi	r2,512
 1011f50:	18bfe026 	beq	r3,r2,1011ed4 <__swsetup_r+0x44>
 1011f54:	8809883a 	mov	r4,r17
 1011f58:	800b883a 	mov	r5,r16
 1011f5c:	101533c0 	call	101533c <__smakebuf_r>
 1011f60:	8100030b 	ldhu	r4,12(r16)
 1011f64:	81400417 	ldw	r5,16(r16)
 1011f68:	003fda06 	br	1011ed4 <__swsetup_r+0x44>
 1011f6c:	2080040c 	andi	r2,r4,16
 1011f70:	103fed26 	beq	r2,zero,1011f28 <__swsetup_r+0x98>
 1011f74:	2080010c 	andi	r2,r4,4
 1011f78:	10001226 	beq	r2,zero,1011fc4 <__swsetup_r+0x134>
 1011f7c:	81400c17 	ldw	r5,48(r16)
 1011f80:	28000526 	beq	r5,zero,1011f98 <__swsetup_r+0x108>
 1011f84:	80801004 	addi	r2,r16,64
 1011f88:	28800226 	beq	r5,r2,1011f94 <__swsetup_r+0x104>
 1011f8c:	8809883a 	mov	r4,r17
 1011f90:	1013db40 	call	1013db4 <_free_r>
 1011f94:	80000c15 	stw	zero,48(r16)
 1011f98:	8080030b 	ldhu	r2,12(r16)
 1011f9c:	81400417 	ldw	r5,16(r16)
 1011fa0:	80000115 	stw	zero,4(r16)
 1011fa4:	10bff6cc 	andi	r2,r2,65499
 1011fa8:	8080030d 	sth	r2,12(r16)
 1011fac:	81400015 	stw	r5,0(r16)
 1011fb0:	8080030b 	ldhu	r2,12(r16)
 1011fb4:	10800214 	ori	r2,r2,8
 1011fb8:	113fffcc 	andi	r4,r2,65535
 1011fbc:	8080030d 	sth	r2,12(r16)
 1011fc0:	003fc306 	br	1011ed0 <__swsetup_r+0x40>
 1011fc4:	81400417 	ldw	r5,16(r16)
 1011fc8:	003ff906 	br	1011fb0 <__swsetup_r+0x120>

01011fcc <quorem>:
 1011fcc:	28c00417 	ldw	r3,16(r5)
 1011fd0:	20800417 	ldw	r2,16(r4)
 1011fd4:	defff604 	addi	sp,sp,-40
 1011fd8:	ddc00715 	stw	r23,28(sp)
 1011fdc:	dd400515 	stw	r21,20(sp)
 1011fe0:	dfc00915 	stw	ra,36(sp)
 1011fe4:	df000815 	stw	fp,32(sp)
 1011fe8:	dd800615 	stw	r22,24(sp)
 1011fec:	dd000415 	stw	r20,16(sp)
 1011ff0:	dcc00315 	stw	r19,12(sp)
 1011ff4:	dc800215 	stw	r18,8(sp)
 1011ff8:	dc400115 	stw	r17,4(sp)
 1011ffc:	dc000015 	stw	r16,0(sp)
 1012000:	202f883a 	mov	r23,r4
 1012004:	282b883a 	mov	r21,r5
 1012008:	10c07416 	blt	r2,r3,10121dc <quorem+0x210>
 101200c:	1c7fffc4 	addi	r17,r3,-1
 1012010:	8c45883a 	add	r2,r17,r17
 1012014:	1085883a 	add	r2,r2,r2
 1012018:	2c000504 	addi	r16,r5,20
 101201c:	24c00504 	addi	r19,r4,20
 1012020:	14ed883a 	add	r22,r2,r19
 1012024:	80a5883a 	add	r18,r16,r2
 1012028:	b7000017 	ldw	fp,0(r22)
 101202c:	91400017 	ldw	r5,0(r18)
 1012030:	e009883a 	mov	r4,fp
 1012034:	29400044 	addi	r5,r5,1
 1012038:	100cdcc0 	call	100cdcc <__udivsi3>
 101203c:	1029883a 	mov	r20,r2
 1012040:	10003c1e 	bne	r2,zero,1012134 <quorem+0x168>
 1012044:	a80b883a 	mov	r5,r21
 1012048:	b809883a 	mov	r4,r23
 101204c:	1015fc80 	call	1015fc8 <__mcmp>
 1012050:	10002b16 	blt	r2,zero,1012100 <quorem+0x134>
 1012054:	a5000044 	addi	r20,r20,1
 1012058:	980f883a 	mov	r7,r19
 101205c:	0011883a 	mov	r8,zero
 1012060:	0009883a 	mov	r4,zero
 1012064:	81400017 	ldw	r5,0(r16)
 1012068:	38c00017 	ldw	r3,0(r7)
 101206c:	84000104 	addi	r16,r16,4
 1012070:	28bfffcc 	andi	r2,r5,65535
 1012074:	2085883a 	add	r2,r4,r2
 1012078:	11bfffcc 	andi	r6,r2,65535
 101207c:	193fffcc 	andi	r4,r3,65535
 1012080:	1004d43a 	srli	r2,r2,16
 1012084:	280ad43a 	srli	r5,r5,16
 1012088:	2189c83a 	sub	r4,r4,r6
 101208c:	2209883a 	add	r4,r4,r8
 1012090:	1806d43a 	srli	r3,r3,16
 1012094:	288b883a 	add	r5,r5,r2
 1012098:	200dd43a 	srai	r6,r4,16
 101209c:	28bfffcc 	andi	r2,r5,65535
 10120a0:	1887c83a 	sub	r3,r3,r2
 10120a4:	1987883a 	add	r3,r3,r6
 10120a8:	3900000d 	sth	r4,0(r7)
 10120ac:	38c0008d 	sth	r3,2(r7)
 10120b0:	2808d43a 	srli	r4,r5,16
 10120b4:	39c00104 	addi	r7,r7,4
 10120b8:	1811d43a 	srai	r8,r3,16
 10120bc:	943fe92e 	bgeu	r18,r16,1012064 <quorem+0x98>
 10120c0:	8c45883a 	add	r2,r17,r17
 10120c4:	1085883a 	add	r2,r2,r2
 10120c8:	9885883a 	add	r2,r19,r2
 10120cc:	10c00017 	ldw	r3,0(r2)
 10120d0:	18000b1e 	bne	r3,zero,1012100 <quorem+0x134>
 10120d4:	113fff04 	addi	r4,r2,-4
 10120d8:	9900082e 	bgeu	r19,r4,10120fc <quorem+0x130>
 10120dc:	10bfff17 	ldw	r2,-4(r2)
 10120e0:	10000326 	beq	r2,zero,10120f0 <quorem+0x124>
 10120e4:	00000506 	br	10120fc <quorem+0x130>
 10120e8:	20800017 	ldw	r2,0(r4)
 10120ec:	1000031e 	bne	r2,zero,10120fc <quorem+0x130>
 10120f0:	213fff04 	addi	r4,r4,-4
 10120f4:	8c7fffc4 	addi	r17,r17,-1
 10120f8:	993ffb36 	bltu	r19,r4,10120e8 <quorem+0x11c>
 10120fc:	bc400415 	stw	r17,16(r23)
 1012100:	a005883a 	mov	r2,r20
 1012104:	dfc00917 	ldw	ra,36(sp)
 1012108:	df000817 	ldw	fp,32(sp)
 101210c:	ddc00717 	ldw	r23,28(sp)
 1012110:	dd800617 	ldw	r22,24(sp)
 1012114:	dd400517 	ldw	r21,20(sp)
 1012118:	dd000417 	ldw	r20,16(sp)
 101211c:	dcc00317 	ldw	r19,12(sp)
 1012120:	dc800217 	ldw	r18,8(sp)
 1012124:	dc400117 	ldw	r17,4(sp)
 1012128:	dc000017 	ldw	r16,0(sp)
 101212c:	dec00a04 	addi	sp,sp,40
 1012130:	f800283a 	ret
 1012134:	980f883a 	mov	r7,r19
 1012138:	8011883a 	mov	r8,r16
 101213c:	0013883a 	mov	r9,zero
 1012140:	000d883a 	mov	r6,zero
 1012144:	40c00017 	ldw	r3,0(r8)
 1012148:	39000017 	ldw	r4,0(r7)
 101214c:	42000104 	addi	r8,r8,4
 1012150:	18bfffcc 	andi	r2,r3,65535
 1012154:	a085383a 	mul	r2,r20,r2
 1012158:	1806d43a 	srli	r3,r3,16
 101215c:	217fffcc 	andi	r5,r4,65535
 1012160:	3085883a 	add	r2,r6,r2
 1012164:	11bfffcc 	andi	r6,r2,65535
 1012168:	a0c7383a 	mul	r3,r20,r3
 101216c:	1004d43a 	srli	r2,r2,16
 1012170:	298bc83a 	sub	r5,r5,r6
 1012174:	2a4b883a 	add	r5,r5,r9
 1012178:	2008d43a 	srli	r4,r4,16
 101217c:	1887883a 	add	r3,r3,r2
 1012180:	280dd43a 	srai	r6,r5,16
 1012184:	18bfffcc 	andi	r2,r3,65535
 1012188:	2089c83a 	sub	r4,r4,r2
 101218c:	2189883a 	add	r4,r4,r6
 1012190:	3900008d 	sth	r4,2(r7)
 1012194:	3940000d 	sth	r5,0(r7)
 1012198:	180cd43a 	srli	r6,r3,16
 101219c:	39c00104 	addi	r7,r7,4
 10121a0:	2013d43a 	srai	r9,r4,16
 10121a4:	923fe72e 	bgeu	r18,r8,1012144 <quorem+0x178>
 10121a8:	e03fa61e 	bne	fp,zero,1012044 <quorem+0x78>
 10121ac:	b0ffff04 	addi	r3,r22,-4
 10121b0:	98c0082e 	bgeu	r19,r3,10121d4 <quorem+0x208>
 10121b4:	b0bfff17 	ldw	r2,-4(r22)
 10121b8:	10000326 	beq	r2,zero,10121c8 <quorem+0x1fc>
 10121bc:	00000506 	br	10121d4 <quorem+0x208>
 10121c0:	18800017 	ldw	r2,0(r3)
 10121c4:	1000031e 	bne	r2,zero,10121d4 <quorem+0x208>
 10121c8:	18ffff04 	addi	r3,r3,-4
 10121cc:	8c7fffc4 	addi	r17,r17,-1
 10121d0:	98fffb36 	bltu	r19,r3,10121c0 <quorem+0x1f4>
 10121d4:	bc400415 	stw	r17,16(r23)
 10121d8:	003f9a06 	br	1012044 <quorem+0x78>
 10121dc:	0005883a 	mov	r2,zero
 10121e0:	003fc806 	br	1012104 <quorem+0x138>

010121e4 <_dtoa_r>:
 10121e4:	22001017 	ldw	r8,64(r4)
 10121e8:	deffda04 	addi	sp,sp,-152
 10121ec:	dd402115 	stw	r21,132(sp)
 10121f0:	dd002015 	stw	r20,128(sp)
 10121f4:	dc801e15 	stw	r18,120(sp)
 10121f8:	dc401d15 	stw	r17,116(sp)
 10121fc:	dfc02515 	stw	ra,148(sp)
 1012200:	df002415 	stw	fp,144(sp)
 1012204:	ddc02315 	stw	r23,140(sp)
 1012208:	dd802215 	stw	r22,136(sp)
 101220c:	dcc01f15 	stw	r19,124(sp)
 1012210:	dc001c15 	stw	r16,112(sp)
 1012214:	d9001615 	stw	r4,88(sp)
 1012218:	3023883a 	mov	r17,r6
 101221c:	2829883a 	mov	r20,r5
 1012220:	d9c01715 	stw	r7,92(sp)
 1012224:	dc802817 	ldw	r18,160(sp)
 1012228:	302b883a 	mov	r21,r6
 101222c:	40000a26 	beq	r8,zero,1012258 <_dtoa_r+0x74>
 1012230:	20801117 	ldw	r2,68(r4)
 1012234:	400b883a 	mov	r5,r8
 1012238:	40800115 	stw	r2,4(r8)
 101223c:	20c01117 	ldw	r3,68(r4)
 1012240:	00800044 	movi	r2,1
 1012244:	10c4983a 	sll	r2,r2,r3
 1012248:	40800215 	stw	r2,8(r8)
 101224c:	1015e6c0 	call	1015e6c <_Bfree>
 1012250:	d8c01617 	ldw	r3,88(sp)
 1012254:	18001015 	stw	zero,64(r3)
 1012258:	8800a316 	blt	r17,zero,10124e8 <_dtoa_r+0x304>
 101225c:	90000015 	stw	zero,0(r18)
 1012260:	a8dffc2c 	andhi	r3,r21,32752
 1012264:	009ffc34 	movhi	r2,32752
 1012268:	18809126 	beq	r3,r2,10124b0 <_dtoa_r+0x2cc>
 101226c:	000d883a 	mov	r6,zero
 1012270:	000f883a 	mov	r7,zero
 1012274:	a009883a 	mov	r4,r20
 1012278:	a80b883a 	mov	r5,r21
 101227c:	dd001215 	stw	r20,72(sp)
 1012280:	dd401315 	stw	r21,76(sp)
 1012284:	1018b3c0 	call	1018b3c <__nedf2>
 1012288:	1000171e 	bne	r2,zero,10122e8 <_dtoa_r+0x104>
 101228c:	d9802717 	ldw	r6,156(sp)
 1012290:	00800044 	movi	r2,1
 1012294:	30800015 	stw	r2,0(r6)
 1012298:	d8802917 	ldw	r2,164(sp)
 101229c:	10029b26 	beq	r2,zero,1012d0c <_dtoa_r+0xb28>
 10122a0:	d9002917 	ldw	r4,164(sp)
 10122a4:	008040b4 	movhi	r2,258
 10122a8:	109e4d44 	addi	r2,r2,31029
 10122ac:	10ffffc4 	addi	r3,r2,-1
 10122b0:	20800015 	stw	r2,0(r4)
 10122b4:	1805883a 	mov	r2,r3
 10122b8:	dfc02517 	ldw	ra,148(sp)
 10122bc:	df002417 	ldw	fp,144(sp)
 10122c0:	ddc02317 	ldw	r23,140(sp)
 10122c4:	dd802217 	ldw	r22,136(sp)
 10122c8:	dd402117 	ldw	r21,132(sp)
 10122cc:	dd002017 	ldw	r20,128(sp)
 10122d0:	dcc01f17 	ldw	r19,124(sp)
 10122d4:	dc801e17 	ldw	r18,120(sp)
 10122d8:	dc401d17 	ldw	r17,116(sp)
 10122dc:	dc001c17 	ldw	r16,112(sp)
 10122e0:	dec02604 	addi	sp,sp,152
 10122e4:	f800283a 	ret
 10122e8:	d9001617 	ldw	r4,88(sp)
 10122ec:	d9401217 	ldw	r5,72(sp)
 10122f0:	d8800104 	addi	r2,sp,4
 10122f4:	a80d883a 	mov	r6,r21
 10122f8:	d9c00204 	addi	r7,sp,8
 10122fc:	d8800015 	stw	r2,0(sp)
 1012300:	10164a80 	call	10164a8 <__d2b>
 1012304:	d8800715 	stw	r2,28(sp)
 1012308:	a804d53a 	srli	r2,r21,20
 101230c:	1101ffcc 	andi	r4,r2,2047
 1012310:	20008626 	beq	r4,zero,101252c <_dtoa_r+0x348>
 1012314:	d8c01217 	ldw	r3,72(sp)
 1012318:	00800434 	movhi	r2,16
 101231c:	10bfffc4 	addi	r2,r2,-1
 1012320:	ddc00117 	ldw	r23,4(sp)
 1012324:	a884703a 	and	r2,r21,r2
 1012328:	1811883a 	mov	r8,r3
 101232c:	124ffc34 	orhi	r9,r2,16368
 1012330:	25bf0044 	addi	r22,r4,-1023
 1012334:	d8000815 	stw	zero,32(sp)
 1012338:	0005883a 	mov	r2,zero
 101233c:	00cffe34 	movhi	r3,16376
 1012340:	480b883a 	mov	r5,r9
 1012344:	4009883a 	mov	r4,r8
 1012348:	180f883a 	mov	r7,r3
 101234c:	100d883a 	mov	r6,r2
 1012350:	100c0e40 	call	100c0e4 <__subdf3>
 1012354:	0218dbf4 	movhi	r8,25455
 1012358:	4210d844 	addi	r8,r8,17249
 101235c:	024ff4f4 	movhi	r9,16339
 1012360:	4a61e9c4 	addi	r9,r9,-30809
 1012364:	480f883a 	mov	r7,r9
 1012368:	400d883a 	mov	r6,r8
 101236c:	180b883a 	mov	r5,r3
 1012370:	1009883a 	mov	r4,r2
 1012374:	100c1d80 	call	100c1d8 <__muldf3>
 1012378:	0222d874 	movhi	r8,35681
 101237c:	42322cc4 	addi	r8,r8,-14157
 1012380:	024ff1f4 	movhi	r9,16327
 1012384:	4a628a04 	addi	r9,r9,-30168
 1012388:	480f883a 	mov	r7,r9
 101238c:	400d883a 	mov	r6,r8
 1012390:	180b883a 	mov	r5,r3
 1012394:	1009883a 	mov	r4,r2
 1012398:	100c1640 	call	100c164 <__adddf3>
 101239c:	b009883a 	mov	r4,r22
 10123a0:	1021883a 	mov	r16,r2
 10123a4:	1823883a 	mov	r17,r3
 10123a8:	100ca140 	call	100ca14 <__floatsidf>
 10123ac:	021427f4 	movhi	r8,20639
 10123b0:	421e7ec4 	addi	r8,r8,31227
 10123b4:	024ff4f4 	movhi	r9,16339
 10123b8:	4a5104c4 	addi	r9,r9,17427
 10123bc:	480f883a 	mov	r7,r9
 10123c0:	400d883a 	mov	r6,r8
 10123c4:	180b883a 	mov	r5,r3
 10123c8:	1009883a 	mov	r4,r2
 10123cc:	100c1d80 	call	100c1d8 <__muldf3>
 10123d0:	180f883a 	mov	r7,r3
 10123d4:	880b883a 	mov	r5,r17
 10123d8:	100d883a 	mov	r6,r2
 10123dc:	8009883a 	mov	r4,r16
 10123e0:	100c1640 	call	100c164 <__adddf3>
 10123e4:	1009883a 	mov	r4,r2
 10123e8:	180b883a 	mov	r5,r3
 10123ec:	1021883a 	mov	r16,r2
 10123f0:	1823883a 	mov	r17,r3
 10123f4:	100cb0c0 	call	100cb0c <__fixdfsi>
 10123f8:	000d883a 	mov	r6,zero
 10123fc:	000f883a 	mov	r7,zero
 1012400:	8009883a 	mov	r4,r16
 1012404:	880b883a 	mov	r5,r17
 1012408:	d8800d15 	stw	r2,52(sp)
 101240c:	100c98c0 	call	100c98c <__ltdf2>
 1012410:	10031716 	blt	r2,zero,1013070 <_dtoa_r+0xe8c>
 1012414:	d8c00d17 	ldw	r3,52(sp)
 1012418:	00800584 	movi	r2,22
 101241c:	10c1482e 	bgeu	r2,r3,1012940 <_dtoa_r+0x75c>
 1012420:	01000044 	movi	r4,1
 1012424:	d9000c15 	stw	r4,48(sp)
 1012428:	bd85c83a 	sub	r2,r23,r22
 101242c:	11bfffc4 	addi	r6,r2,-1
 1012430:	30030b16 	blt	r6,zero,1013060 <_dtoa_r+0xe7c>
 1012434:	d9800a15 	stw	r6,40(sp)
 1012438:	d8001115 	stw	zero,68(sp)
 101243c:	d8c00d17 	ldw	r3,52(sp)
 1012440:	1802ff16 	blt	r3,zero,1013040 <_dtoa_r+0xe5c>
 1012444:	d9000a17 	ldw	r4,40(sp)
 1012448:	d8c00915 	stw	r3,36(sp)
 101244c:	d8001015 	stw	zero,64(sp)
 1012450:	20c9883a 	add	r4,r4,r3
 1012454:	d9000a15 	stw	r4,40(sp)
 1012458:	d9001717 	ldw	r4,92(sp)
 101245c:	00800244 	movi	r2,9
 1012460:	11004636 	bltu	r2,r4,101257c <_dtoa_r+0x398>
 1012464:	00800144 	movi	r2,5
 1012468:	11020416 	blt	r2,r4,1012c7c <_dtoa_r+0xa98>
 101246c:	04400044 	movi	r17,1
 1012470:	d8c01717 	ldw	r3,92(sp)
 1012474:	00800144 	movi	r2,5
 1012478:	10c1ed36 	bltu	r2,r3,1012c30 <_dtoa_r+0xa4c>
 101247c:	18c5883a 	add	r2,r3,r3
 1012480:	1085883a 	add	r2,r2,r2
 1012484:	00c04074 	movhi	r3,257
 1012488:	18c92604 	addi	r3,r3,9368
 101248c:	10c5883a 	add	r2,r2,r3
 1012490:	11000017 	ldw	r4,0(r2)
 1012494:	2000683a 	jmp	r4
 1012498:	01012584 	movi	r4,1174
 101249c:	01012584 	movi	r4,1174
 10124a0:	01012f84 	movi	r4,1214
 10124a4:	01012f5c 	xori	r4,zero,1213
 10124a8:	01012fa0 	cmpeqi	r4,zero,1214
 10124ac:	01012fac 	andhi	r4,zero,1214
 10124b0:	d9002717 	ldw	r4,156(sp)
 10124b4:	0089c3c4 	movi	r2,9999
 10124b8:	20800015 	stw	r2,0(r4)
 10124bc:	a0001026 	beq	r20,zero,1012500 <_dtoa_r+0x31c>
 10124c0:	00c040b4 	movhi	r3,258
 10124c4:	18def904 	addi	r3,r3,31716
 10124c8:	d9802917 	ldw	r6,164(sp)
 10124cc:	303f7926 	beq	r6,zero,10122b4 <_dtoa_r+0xd0>
 10124d0:	188000c7 	ldb	r2,3(r3)
 10124d4:	190000c4 	addi	r4,r3,3
 10124d8:	1000101e 	bne	r2,zero,101251c <_dtoa_r+0x338>
 10124dc:	d8802917 	ldw	r2,164(sp)
 10124e0:	11000015 	stw	r4,0(r2)
 10124e4:	003f7306 	br	10122b4 <_dtoa_r+0xd0>
 10124e8:	00a00034 	movhi	r2,32768
 10124ec:	10bfffc4 	addi	r2,r2,-1
 10124f0:	00c00044 	movi	r3,1
 10124f4:	88aa703a 	and	r21,r17,r2
 10124f8:	90c00015 	stw	r3,0(r18)
 10124fc:	003f5806 	br	1012260 <_dtoa_r+0x7c>
 1012500:	00800434 	movhi	r2,16
 1012504:	10bfffc4 	addi	r2,r2,-1
 1012508:	a884703a 	and	r2,r21,r2
 101250c:	103fec1e 	bne	r2,zero,10124c0 <_dtoa_r+0x2dc>
 1012510:	00c040b4 	movhi	r3,258
 1012514:	18def604 	addi	r3,r3,31704
 1012518:	003feb06 	br	10124c8 <_dtoa_r+0x2e4>
 101251c:	d8802917 	ldw	r2,164(sp)
 1012520:	19000204 	addi	r4,r3,8
 1012524:	11000015 	stw	r4,0(r2)
 1012528:	003f6206 	br	10122b4 <_dtoa_r+0xd0>
 101252c:	ddc00117 	ldw	r23,4(sp)
 1012530:	d8800217 	ldw	r2,8(sp)
 1012534:	01000804 	movi	r4,32
 1012538:	b8c10c84 	addi	r3,r23,1074
 101253c:	18a3883a 	add	r17,r3,r2
 1012540:	2441b80e 	bge	r4,r17,1012c24 <_dtoa_r+0xa40>
 1012544:	00c01004 	movi	r3,64
 1012548:	1c47c83a 	sub	r3,r3,r17
 101254c:	88bff804 	addi	r2,r17,-32
 1012550:	a8c6983a 	sll	r3,r21,r3
 1012554:	a084d83a 	srl	r2,r20,r2
 1012558:	1888b03a 	or	r4,r3,r2
 101255c:	1018c4c0 	call	1018c4c <__floatunsidf>
 1012560:	1011883a 	mov	r8,r2
 1012564:	00bf8434 	movhi	r2,65040
 1012568:	01000044 	movi	r4,1
 101256c:	10d3883a 	add	r9,r2,r3
 1012570:	8dbef344 	addi	r22,r17,-1075
 1012574:	d9000815 	stw	r4,32(sp)
 1012578:	003f6f06 	br	1012338 <_dtoa_r+0x154>
 101257c:	d8001715 	stw	zero,92(sp)
 1012580:	04400044 	movi	r17,1
 1012584:	00bfffc4 	movi	r2,-1
 1012588:	00c00044 	movi	r3,1
 101258c:	d8800e15 	stw	r2,56(sp)
 1012590:	d8002615 	stw	zero,152(sp)
 1012594:	d8800f15 	stw	r2,60(sp)
 1012598:	d8c00b15 	stw	r3,44(sp)
 101259c:	1021883a 	mov	r16,r2
 10125a0:	d8801617 	ldw	r2,88(sp)
 10125a4:	10001115 	stw	zero,68(r2)
 10125a8:	d8801617 	ldw	r2,88(sp)
 10125ac:	11401117 	ldw	r5,68(r2)
 10125b0:	1009883a 	mov	r4,r2
 10125b4:	10163ec0 	call	10163ec <_Balloc>
 10125b8:	d8c01617 	ldw	r3,88(sp)
 10125bc:	d8800515 	stw	r2,20(sp)
 10125c0:	18801015 	stw	r2,64(r3)
 10125c4:	00800384 	movi	r2,14
 10125c8:	14006836 	bltu	r2,r16,101276c <_dtoa_r+0x588>
 10125cc:	8805003a 	cmpeq	r2,r17,zero
 10125d0:	1000661e 	bne	r2,zero,101276c <_dtoa_r+0x588>
 10125d4:	d9000d17 	ldw	r4,52(sp)
 10125d8:	0102300e 	bge	zero,r4,1012e9c <_dtoa_r+0xcb8>
 10125dc:	208003cc 	andi	r2,r4,15
 10125e0:	100490fa 	slli	r2,r2,3
 10125e4:	2025d13a 	srai	r18,r4,4
 10125e8:	00c040b4 	movhi	r3,258
 10125ec:	18df1104 	addi	r3,r3,31812
 10125f0:	10c5883a 	add	r2,r2,r3
 10125f4:	90c0040c 	andi	r3,r18,16
 10125f8:	14000017 	ldw	r16,0(r2)
 10125fc:	14400117 	ldw	r17,4(r2)
 1012600:	18036a1e 	bne	r3,zero,10133ac <_dtoa_r+0x11c8>
 1012604:	05800084 	movi	r22,2
 1012608:	90001026 	beq	r18,zero,101264c <_dtoa_r+0x468>
 101260c:	04c040b4 	movhi	r19,258
 1012610:	9cdf4304 	addi	r19,r19,32012
 1012614:	9080004c 	andi	r2,r18,1
 1012618:	1005003a 	cmpeq	r2,r2,zero
 101261c:	1000081e 	bne	r2,zero,1012640 <_dtoa_r+0x45c>
 1012620:	99800017 	ldw	r6,0(r19)
 1012624:	99c00117 	ldw	r7,4(r19)
 1012628:	880b883a 	mov	r5,r17
 101262c:	8009883a 	mov	r4,r16
 1012630:	100c1d80 	call	100c1d8 <__muldf3>
 1012634:	1021883a 	mov	r16,r2
 1012638:	b5800044 	addi	r22,r22,1
 101263c:	1823883a 	mov	r17,r3
 1012640:	9025d07a 	srai	r18,r18,1
 1012644:	9cc00204 	addi	r19,r19,8
 1012648:	903ff21e 	bne	r18,zero,1012614 <_dtoa_r+0x430>
 101264c:	a80b883a 	mov	r5,r21
 1012650:	a009883a 	mov	r4,r20
 1012654:	880f883a 	mov	r7,r17
 1012658:	800d883a 	mov	r6,r16
 101265c:	100c59c0 	call	100c59c <__divdf3>
 1012660:	1029883a 	mov	r20,r2
 1012664:	182b883a 	mov	r21,r3
 1012668:	d8c00c17 	ldw	r3,48(sp)
 101266c:	1805003a 	cmpeq	r2,r3,zero
 1012670:	1000081e 	bne	r2,zero,1012694 <_dtoa_r+0x4b0>
 1012674:	0005883a 	mov	r2,zero
 1012678:	00cffc34 	movhi	r3,16368
 101267c:	180f883a 	mov	r7,r3
 1012680:	a009883a 	mov	r4,r20
 1012684:	a80b883a 	mov	r5,r21
 1012688:	100d883a 	mov	r6,r2
 101268c:	100c98c0 	call	100c98c <__ltdf2>
 1012690:	1003fe16 	blt	r2,zero,101368c <_dtoa_r+0x14a8>
 1012694:	b009883a 	mov	r4,r22
 1012698:	100ca140 	call	100ca14 <__floatsidf>
 101269c:	180b883a 	mov	r5,r3
 10126a0:	1009883a 	mov	r4,r2
 10126a4:	a00d883a 	mov	r6,r20
 10126a8:	a80f883a 	mov	r7,r21
 10126ac:	100c1d80 	call	100c1d8 <__muldf3>
 10126b0:	0011883a 	mov	r8,zero
 10126b4:	02500734 	movhi	r9,16412
 10126b8:	1009883a 	mov	r4,r2
 10126bc:	180b883a 	mov	r5,r3
 10126c0:	480f883a 	mov	r7,r9
 10126c4:	400d883a 	mov	r6,r8
 10126c8:	100c1640 	call	100c164 <__adddf3>
 10126cc:	d9000f17 	ldw	r4,60(sp)
 10126d0:	102d883a 	mov	r22,r2
 10126d4:	00bf3034 	movhi	r2,64704
 10126d8:	18b9883a 	add	fp,r3,r2
 10126dc:	e02f883a 	mov	r23,fp
 10126e0:	20028f1e 	bne	r4,zero,1013120 <_dtoa_r+0xf3c>
 10126e4:	0005883a 	mov	r2,zero
 10126e8:	00d00534 	movhi	r3,16404
 10126ec:	a009883a 	mov	r4,r20
 10126f0:	a80b883a 	mov	r5,r21
 10126f4:	180f883a 	mov	r7,r3
 10126f8:	100d883a 	mov	r6,r2
 10126fc:	100c0e40 	call	100c0e4 <__subdf3>
 1012700:	1009883a 	mov	r4,r2
 1012704:	e00f883a 	mov	r7,fp
 1012708:	180b883a 	mov	r5,r3
 101270c:	b00d883a 	mov	r6,r22
 1012710:	1025883a 	mov	r18,r2
 1012714:	1827883a 	mov	r19,r3
 1012718:	100c87c0 	call	100c87c <__gtdf2>
 101271c:	00834f16 	blt	zero,r2,101345c <_dtoa_r+0x1278>
 1012720:	e0e0003c 	xorhi	r3,fp,32768
 1012724:	9009883a 	mov	r4,r18
 1012728:	980b883a 	mov	r5,r19
 101272c:	180f883a 	mov	r7,r3
 1012730:	b00d883a 	mov	r6,r22
 1012734:	100c98c0 	call	100c98c <__ltdf2>
 1012738:	1000080e 	bge	r2,zero,101275c <_dtoa_r+0x578>
 101273c:	0027883a 	mov	r19,zero
 1012740:	0025883a 	mov	r18,zero
 1012744:	d8802617 	ldw	r2,152(sp)
 1012748:	df000517 	ldw	fp,20(sp)
 101274c:	d8000615 	stw	zero,24(sp)
 1012750:	0084303a 	nor	r2,zero,r2
 1012754:	d8800d15 	stw	r2,52(sp)
 1012758:	00019b06 	br	1012dc8 <_dtoa_r+0xbe4>
 101275c:	d9801217 	ldw	r6,72(sp)
 1012760:	d8801317 	ldw	r2,76(sp)
 1012764:	3029883a 	mov	r20,r6
 1012768:	102b883a 	mov	r21,r2
 101276c:	d8c00217 	ldw	r3,8(sp)
 1012770:	18008516 	blt	r3,zero,1012988 <_dtoa_r+0x7a4>
 1012774:	d9000d17 	ldw	r4,52(sp)
 1012778:	00800384 	movi	r2,14
 101277c:	11008216 	blt	r2,r4,1012988 <_dtoa_r+0x7a4>
 1012780:	200490fa 	slli	r2,r4,3
 1012784:	d9802617 	ldw	r6,152(sp)
 1012788:	00c040b4 	movhi	r3,258
 101278c:	18df1104 	addi	r3,r3,31812
 1012790:	10c5883a 	add	r2,r2,r3
 1012794:	14800017 	ldw	r18,0(r2)
 1012798:	14c00117 	ldw	r19,4(r2)
 101279c:	30031e16 	blt	r6,zero,1013418 <_dtoa_r+0x1234>
 10127a0:	d9000517 	ldw	r4,20(sp)
 10127a4:	d8c00f17 	ldw	r3,60(sp)
 10127a8:	a823883a 	mov	r17,r21
 10127ac:	a021883a 	mov	r16,r20
 10127b0:	192b883a 	add	r21,r3,r4
 10127b4:	2039883a 	mov	fp,r4
 10127b8:	00000f06 	br	10127f8 <_dtoa_r+0x614>
 10127bc:	0005883a 	mov	r2,zero
 10127c0:	00d00934 	movhi	r3,16420
 10127c4:	5009883a 	mov	r4,r10
 10127c8:	580b883a 	mov	r5,r11
 10127cc:	180f883a 	mov	r7,r3
 10127d0:	100d883a 	mov	r6,r2
 10127d4:	100c1d80 	call	100c1d8 <__muldf3>
 10127d8:	180b883a 	mov	r5,r3
 10127dc:	000d883a 	mov	r6,zero
 10127e0:	000f883a 	mov	r7,zero
 10127e4:	1009883a 	mov	r4,r2
 10127e8:	1021883a 	mov	r16,r2
 10127ec:	1823883a 	mov	r17,r3
 10127f0:	1018b3c0 	call	1018b3c <__nedf2>
 10127f4:	10004526 	beq	r2,zero,101290c <_dtoa_r+0x728>
 10127f8:	900d883a 	mov	r6,r18
 10127fc:	980f883a 	mov	r7,r19
 1012800:	8009883a 	mov	r4,r16
 1012804:	880b883a 	mov	r5,r17
 1012808:	100c59c0 	call	100c59c <__divdf3>
 101280c:	180b883a 	mov	r5,r3
 1012810:	1009883a 	mov	r4,r2
 1012814:	100cb0c0 	call	100cb0c <__fixdfsi>
 1012818:	1009883a 	mov	r4,r2
 101281c:	1029883a 	mov	r20,r2
 1012820:	100ca140 	call	100ca14 <__floatsidf>
 1012824:	180f883a 	mov	r7,r3
 1012828:	9009883a 	mov	r4,r18
 101282c:	980b883a 	mov	r5,r19
 1012830:	100d883a 	mov	r6,r2
 1012834:	100c1d80 	call	100c1d8 <__muldf3>
 1012838:	180f883a 	mov	r7,r3
 101283c:	880b883a 	mov	r5,r17
 1012840:	8009883a 	mov	r4,r16
 1012844:	100d883a 	mov	r6,r2
 1012848:	100c0e40 	call	100c0e4 <__subdf3>
 101284c:	1015883a 	mov	r10,r2
 1012850:	a0800c04 	addi	r2,r20,48
 1012854:	e0800005 	stb	r2,0(fp)
 1012858:	e7000044 	addi	fp,fp,1
 101285c:	1817883a 	mov	r11,r3
 1012860:	e57fd61e 	bne	fp,r21,10127bc <_dtoa_r+0x5d8>
 1012864:	500d883a 	mov	r6,r10
 1012868:	180f883a 	mov	r7,r3
 101286c:	5009883a 	mov	r4,r10
 1012870:	180b883a 	mov	r5,r3
 1012874:	100c1640 	call	100c164 <__adddf3>
 1012878:	100d883a 	mov	r6,r2
 101287c:	9009883a 	mov	r4,r18
 1012880:	980b883a 	mov	r5,r19
 1012884:	180f883a 	mov	r7,r3
 1012888:	1021883a 	mov	r16,r2
 101288c:	1823883a 	mov	r17,r3
 1012890:	100c98c0 	call	100c98c <__ltdf2>
 1012894:	10000816 	blt	r2,zero,10128b8 <_dtoa_r+0x6d4>
 1012898:	980b883a 	mov	r5,r19
 101289c:	800d883a 	mov	r6,r16
 10128a0:	880f883a 	mov	r7,r17
 10128a4:	9009883a 	mov	r4,r18
 10128a8:	100c7f40 	call	100c7f4 <__eqdf2>
 10128ac:	1000171e 	bne	r2,zero,101290c <_dtoa_r+0x728>
 10128b0:	a080004c 	andi	r2,r20,1
 10128b4:	10001526 	beq	r2,zero,101290c <_dtoa_r+0x728>
 10128b8:	d8800d17 	ldw	r2,52(sp)
 10128bc:	d8800415 	stw	r2,16(sp)
 10128c0:	e009883a 	mov	r4,fp
 10128c4:	213fffc4 	addi	r4,r4,-1
 10128c8:	20c00007 	ldb	r3,0(r4)
 10128cc:	00800e44 	movi	r2,57
 10128d0:	1880081e 	bne	r3,r2,10128f4 <_dtoa_r+0x710>
 10128d4:	d8800517 	ldw	r2,20(sp)
 10128d8:	113ffa1e 	bne	r2,r4,10128c4 <_dtoa_r+0x6e0>
 10128dc:	d8c00417 	ldw	r3,16(sp)
 10128e0:	d9800517 	ldw	r6,20(sp)
 10128e4:	00800c04 	movi	r2,48
 10128e8:	18c00044 	addi	r3,r3,1
 10128ec:	d8c00415 	stw	r3,16(sp)
 10128f0:	30800005 	stb	r2,0(r6)
 10128f4:	20800003 	ldbu	r2,0(r4)
 10128f8:	d8c00417 	ldw	r3,16(sp)
 10128fc:	27000044 	addi	fp,r4,1
 1012900:	10800044 	addi	r2,r2,1
 1012904:	d8c00d15 	stw	r3,52(sp)
 1012908:	20800005 	stb	r2,0(r4)
 101290c:	d9001617 	ldw	r4,88(sp)
 1012910:	d9400717 	ldw	r5,28(sp)
 1012914:	1015e6c0 	call	1015e6c <_Bfree>
 1012918:	e0000005 	stb	zero,0(fp)
 101291c:	d9800d17 	ldw	r6,52(sp)
 1012920:	d8c02717 	ldw	r3,156(sp)
 1012924:	d9002917 	ldw	r4,164(sp)
 1012928:	30800044 	addi	r2,r6,1
 101292c:	18800015 	stw	r2,0(r3)
 1012930:	20029c26 	beq	r4,zero,10133a4 <_dtoa_r+0x11c0>
 1012934:	d8c00517 	ldw	r3,20(sp)
 1012938:	27000015 	stw	fp,0(r4)
 101293c:	003e5d06 	br	10122b4 <_dtoa_r+0xd0>
 1012940:	d9800d17 	ldw	r6,52(sp)
 1012944:	00c040b4 	movhi	r3,258
 1012948:	18df1104 	addi	r3,r3,31812
 101294c:	d9001217 	ldw	r4,72(sp)
 1012950:	300490fa 	slli	r2,r6,3
 1012954:	d9401317 	ldw	r5,76(sp)
 1012958:	10c5883a 	add	r2,r2,r3
 101295c:	12000017 	ldw	r8,0(r2)
 1012960:	12400117 	ldw	r9,4(r2)
 1012964:	400d883a 	mov	r6,r8
 1012968:	480f883a 	mov	r7,r9
 101296c:	100c98c0 	call	100c98c <__ltdf2>
 1012970:	1000030e 	bge	r2,zero,1012980 <_dtoa_r+0x79c>
 1012974:	d8800d17 	ldw	r2,52(sp)
 1012978:	10bfffc4 	addi	r2,r2,-1
 101297c:	d8800d15 	stw	r2,52(sp)
 1012980:	d8000c15 	stw	zero,48(sp)
 1012984:	003ea806 	br	1012428 <_dtoa_r+0x244>
 1012988:	d9000b17 	ldw	r4,44(sp)
 101298c:	202cc03a 	cmpne	r22,r4,zero
 1012990:	b000c71e 	bne	r22,zero,1012cb0 <_dtoa_r+0xacc>
 1012994:	dc001117 	ldw	r16,68(sp)
 1012998:	dc801017 	ldw	r18,64(sp)
 101299c:	0027883a 	mov	r19,zero
 10129a0:	04000b0e 	bge	zero,r16,10129d0 <_dtoa_r+0x7ec>
 10129a4:	d8c00a17 	ldw	r3,40(sp)
 10129a8:	00c0090e 	bge	zero,r3,10129d0 <_dtoa_r+0x7ec>
 10129ac:	8005883a 	mov	r2,r16
 10129b0:	1c011316 	blt	r3,r16,1012e00 <_dtoa_r+0xc1c>
 10129b4:	d9000a17 	ldw	r4,40(sp)
 10129b8:	d9801117 	ldw	r6,68(sp)
 10129bc:	80a1c83a 	sub	r16,r16,r2
 10129c0:	2089c83a 	sub	r4,r4,r2
 10129c4:	308dc83a 	sub	r6,r6,r2
 10129c8:	d9000a15 	stw	r4,40(sp)
 10129cc:	d9801115 	stw	r6,68(sp)
 10129d0:	d8801017 	ldw	r2,64(sp)
 10129d4:	0080150e 	bge	zero,r2,1012a2c <_dtoa_r+0x848>
 10129d8:	d8c00b17 	ldw	r3,44(sp)
 10129dc:	1805003a 	cmpeq	r2,r3,zero
 10129e0:	1001c91e 	bne	r2,zero,1013108 <_dtoa_r+0xf24>
 10129e4:	04800e0e 	bge	zero,r18,1012a20 <_dtoa_r+0x83c>
 10129e8:	d9001617 	ldw	r4,88(sp)
 10129ec:	980b883a 	mov	r5,r19
 10129f0:	900d883a 	mov	r6,r18
 10129f4:	1016c200 	call	1016c20 <__pow5mult>
 10129f8:	d9001617 	ldw	r4,88(sp)
 10129fc:	d9800717 	ldw	r6,28(sp)
 1012a00:	100b883a 	mov	r5,r2
 1012a04:	1027883a 	mov	r19,r2
 1012a08:	10168fc0 	call	10168fc <__multiply>
 1012a0c:	d9001617 	ldw	r4,88(sp)
 1012a10:	d9400717 	ldw	r5,28(sp)
 1012a14:	1023883a 	mov	r17,r2
 1012a18:	1015e6c0 	call	1015e6c <_Bfree>
 1012a1c:	dc400715 	stw	r17,28(sp)
 1012a20:	d9001017 	ldw	r4,64(sp)
 1012a24:	248dc83a 	sub	r6,r4,r18
 1012a28:	30010e1e 	bne	r6,zero,1012e64 <_dtoa_r+0xc80>
 1012a2c:	d9001617 	ldw	r4,88(sp)
 1012a30:	04400044 	movi	r17,1
 1012a34:	880b883a 	mov	r5,r17
 1012a38:	1016ae40 	call	1016ae4 <__i2b>
 1012a3c:	d9800917 	ldw	r6,36(sp)
 1012a40:	1025883a 	mov	r18,r2
 1012a44:	0180040e 	bge	zero,r6,1012a58 <_dtoa_r+0x874>
 1012a48:	d9001617 	ldw	r4,88(sp)
 1012a4c:	100b883a 	mov	r5,r2
 1012a50:	1016c200 	call	1016c20 <__pow5mult>
 1012a54:	1025883a 	mov	r18,r2
 1012a58:	d8801717 	ldw	r2,92(sp)
 1012a5c:	8880f30e 	bge	r17,r2,1012e2c <_dtoa_r+0xc48>
 1012a60:	0023883a 	mov	r17,zero
 1012a64:	d9800917 	ldw	r6,36(sp)
 1012a68:	30019e1e 	bne	r6,zero,10130e4 <_dtoa_r+0xf00>
 1012a6c:	00c00044 	movi	r3,1
 1012a70:	d9000a17 	ldw	r4,40(sp)
 1012a74:	20c5883a 	add	r2,r4,r3
 1012a78:	10c007cc 	andi	r3,r2,31
 1012a7c:	1800841e 	bne	r3,zero,1012c90 <_dtoa_r+0xaac>
 1012a80:	00800704 	movi	r2,28
 1012a84:	d9000a17 	ldw	r4,40(sp)
 1012a88:	d9801117 	ldw	r6,68(sp)
 1012a8c:	80a1883a 	add	r16,r16,r2
 1012a90:	2089883a 	add	r4,r4,r2
 1012a94:	308d883a 	add	r6,r6,r2
 1012a98:	d9000a15 	stw	r4,40(sp)
 1012a9c:	d9801115 	stw	r6,68(sp)
 1012aa0:	d8801117 	ldw	r2,68(sp)
 1012aa4:	0080050e 	bge	zero,r2,1012abc <_dtoa_r+0x8d8>
 1012aa8:	d9400717 	ldw	r5,28(sp)
 1012aac:	d9001617 	ldw	r4,88(sp)
 1012ab0:	100d883a 	mov	r6,r2
 1012ab4:	10167b00 	call	10167b0 <__lshift>
 1012ab8:	d8800715 	stw	r2,28(sp)
 1012abc:	d8c00a17 	ldw	r3,40(sp)
 1012ac0:	00c0050e 	bge	zero,r3,1012ad8 <_dtoa_r+0x8f4>
 1012ac4:	d9001617 	ldw	r4,88(sp)
 1012ac8:	900b883a 	mov	r5,r18
 1012acc:	180d883a 	mov	r6,r3
 1012ad0:	10167b00 	call	10167b0 <__lshift>
 1012ad4:	1025883a 	mov	r18,r2
 1012ad8:	d9000c17 	ldw	r4,48(sp)
 1012adc:	2005003a 	cmpeq	r2,r4,zero
 1012ae0:	10016f26 	beq	r2,zero,10130a0 <_dtoa_r+0xebc>
 1012ae4:	d9000f17 	ldw	r4,60(sp)
 1012ae8:	0102170e 	bge	zero,r4,1013348 <_dtoa_r+0x1164>
 1012aec:	d9800b17 	ldw	r6,44(sp)
 1012af0:	3005003a 	cmpeq	r2,r6,zero
 1012af4:	1000881e 	bne	r2,zero,1012d18 <_dtoa_r+0xb34>
 1012af8:	0400050e 	bge	zero,r16,1012b10 <_dtoa_r+0x92c>
 1012afc:	d9001617 	ldw	r4,88(sp)
 1012b00:	980b883a 	mov	r5,r19
 1012b04:	800d883a 	mov	r6,r16
 1012b08:	10167b00 	call	10167b0 <__lshift>
 1012b0c:	1027883a 	mov	r19,r2
 1012b10:	8804c03a 	cmpne	r2,r17,zero
 1012b14:	1002541e 	bne	r2,zero,1013468 <_dtoa_r+0x1284>
 1012b18:	980b883a 	mov	r5,r19
 1012b1c:	dd800517 	ldw	r22,20(sp)
 1012b20:	dcc00615 	stw	r19,24(sp)
 1012b24:	a700004c 	andi	fp,r20,1
 1012b28:	2827883a 	mov	r19,r5
 1012b2c:	d9000717 	ldw	r4,28(sp)
 1012b30:	900b883a 	mov	r5,r18
 1012b34:	1011fcc0 	call	1011fcc <quorem>
 1012b38:	d9000717 	ldw	r4,28(sp)
 1012b3c:	d9400617 	ldw	r5,24(sp)
 1012b40:	1023883a 	mov	r17,r2
 1012b44:	8dc00c04 	addi	r23,r17,48
 1012b48:	1015fc80 	call	1015fc8 <__mcmp>
 1012b4c:	d9001617 	ldw	r4,88(sp)
 1012b50:	900b883a 	mov	r5,r18
 1012b54:	980d883a 	mov	r6,r19
 1012b58:	1029883a 	mov	r20,r2
 1012b5c:	10166240 	call	1016624 <__mdiff>
 1012b60:	102b883a 	mov	r21,r2
 1012b64:	10800317 	ldw	r2,12(r2)
 1012b68:	1001281e 	bne	r2,zero,101300c <_dtoa_r+0xe28>
 1012b6c:	d9000717 	ldw	r4,28(sp)
 1012b70:	a80b883a 	mov	r5,r21
 1012b74:	1015fc80 	call	1015fc8 <__mcmp>
 1012b78:	d9001617 	ldw	r4,88(sp)
 1012b7c:	1021883a 	mov	r16,r2
 1012b80:	a80b883a 	mov	r5,r21
 1012b84:	1015e6c0 	call	1015e6c <_Bfree>
 1012b88:	8000041e 	bne	r16,zero,1012b9c <_dtoa_r+0x9b8>
 1012b8c:	d8801717 	ldw	r2,92(sp)
 1012b90:	1000021e 	bne	r2,zero,1012b9c <_dtoa_r+0x9b8>
 1012b94:	e004c03a 	cmpne	r2,fp,zero
 1012b98:	10011726 	beq	r2,zero,1012ff8 <_dtoa_r+0xe14>
 1012b9c:	a0010616 	blt	r20,zero,1012fb8 <_dtoa_r+0xdd4>
 1012ba0:	a000041e 	bne	r20,zero,1012bb4 <_dtoa_r+0x9d0>
 1012ba4:	d8c01717 	ldw	r3,92(sp)
 1012ba8:	1800021e 	bne	r3,zero,1012bb4 <_dtoa_r+0x9d0>
 1012bac:	e004c03a 	cmpne	r2,fp,zero
 1012bb0:	10010126 	beq	r2,zero,1012fb8 <_dtoa_r+0xdd4>
 1012bb4:	04023d16 	blt	zero,r16,10134ac <_dtoa_r+0x12c8>
 1012bb8:	b5c00005 	stb	r23,0(r22)
 1012bbc:	d9800517 	ldw	r6,20(sp)
 1012bc0:	d9000f17 	ldw	r4,60(sp)
 1012bc4:	b5800044 	addi	r22,r22,1
 1012bc8:	3105883a 	add	r2,r6,r4
 1012bcc:	b0806526 	beq	r22,r2,1012d64 <_dtoa_r+0xb80>
 1012bd0:	d9400717 	ldw	r5,28(sp)
 1012bd4:	d9001617 	ldw	r4,88(sp)
 1012bd8:	01800284 	movi	r6,10
 1012bdc:	000f883a 	mov	r7,zero
 1012be0:	1016b200 	call	1016b20 <__multadd>
 1012be4:	d8800715 	stw	r2,28(sp)
 1012be8:	d8800617 	ldw	r2,24(sp)
 1012bec:	14c10c26 	beq	r2,r19,1013020 <_dtoa_r+0xe3c>
 1012bf0:	d9400617 	ldw	r5,24(sp)
 1012bf4:	d9001617 	ldw	r4,88(sp)
 1012bf8:	01800284 	movi	r6,10
 1012bfc:	000f883a 	mov	r7,zero
 1012c00:	1016b200 	call	1016b20 <__multadd>
 1012c04:	d9001617 	ldw	r4,88(sp)
 1012c08:	980b883a 	mov	r5,r19
 1012c0c:	01800284 	movi	r6,10
 1012c10:	000f883a 	mov	r7,zero
 1012c14:	d8800615 	stw	r2,24(sp)
 1012c18:	1016b200 	call	1016b20 <__multadd>
 1012c1c:	1027883a 	mov	r19,r2
 1012c20:	003fc206 	br	1012b2c <_dtoa_r+0x948>
 1012c24:	2445c83a 	sub	r2,r4,r17
 1012c28:	a088983a 	sll	r4,r20,r2
 1012c2c:	003e4b06 	br	101255c <_dtoa_r+0x378>
 1012c30:	01bfffc4 	movi	r6,-1
 1012c34:	00800044 	movi	r2,1
 1012c38:	d9800e15 	stw	r6,56(sp)
 1012c3c:	d9800f15 	stw	r6,60(sp)
 1012c40:	d8800b15 	stw	r2,44(sp)
 1012c44:	d8c01617 	ldw	r3,88(sp)
 1012c48:	008005c4 	movi	r2,23
 1012c4c:	18001115 	stw	zero,68(r3)
 1012c50:	1580082e 	bgeu	r2,r22,1012c74 <_dtoa_r+0xa90>
 1012c54:	00c00104 	movi	r3,4
 1012c58:	0009883a 	mov	r4,zero
 1012c5c:	18c7883a 	add	r3,r3,r3
 1012c60:	18800504 	addi	r2,r3,20
 1012c64:	21000044 	addi	r4,r4,1
 1012c68:	b0bffc2e 	bgeu	r22,r2,1012c5c <_dtoa_r+0xa78>
 1012c6c:	d9801617 	ldw	r6,88(sp)
 1012c70:	31001115 	stw	r4,68(r6)
 1012c74:	dc000f17 	ldw	r16,60(sp)
 1012c78:	003e4b06 	br	10125a8 <_dtoa_r+0x3c4>
 1012c7c:	d9801717 	ldw	r6,92(sp)
 1012c80:	0023883a 	mov	r17,zero
 1012c84:	31bfff04 	addi	r6,r6,-4
 1012c88:	d9801715 	stw	r6,92(sp)
 1012c8c:	003df806 	br	1012470 <_dtoa_r+0x28c>
 1012c90:	00800804 	movi	r2,32
 1012c94:	10c9c83a 	sub	r4,r2,r3
 1012c98:	00c00104 	movi	r3,4
 1012c9c:	19005a16 	blt	r3,r4,1012e08 <_dtoa_r+0xc24>
 1012ca0:	008000c4 	movi	r2,3
 1012ca4:	113f7e16 	blt	r2,r4,1012aa0 <_dtoa_r+0x8bc>
 1012ca8:	20800704 	addi	r2,r4,28
 1012cac:	003f7506 	br	1012a84 <_dtoa_r+0x8a0>
 1012cb0:	d9801717 	ldw	r6,92(sp)
 1012cb4:	00800044 	movi	r2,1
 1012cb8:	1180a10e 	bge	r2,r6,1012f40 <_dtoa_r+0xd5c>
 1012cbc:	d9800f17 	ldw	r6,60(sp)
 1012cc0:	d8c01017 	ldw	r3,64(sp)
 1012cc4:	30bfffc4 	addi	r2,r6,-1
 1012cc8:	1881c616 	blt	r3,r2,10133e4 <_dtoa_r+0x1200>
 1012ccc:	18a5c83a 	sub	r18,r3,r2
 1012cd0:	d8800f17 	ldw	r2,60(sp)
 1012cd4:	10026216 	blt	r2,zero,1013660 <_dtoa_r+0x147c>
 1012cd8:	dc001117 	ldw	r16,68(sp)
 1012cdc:	1007883a 	mov	r3,r2
 1012ce0:	d9800a17 	ldw	r6,40(sp)
 1012ce4:	d8801117 	ldw	r2,68(sp)
 1012ce8:	d9001617 	ldw	r4,88(sp)
 1012cec:	30cd883a 	add	r6,r6,r3
 1012cf0:	10c5883a 	add	r2,r2,r3
 1012cf4:	01400044 	movi	r5,1
 1012cf8:	d9800a15 	stw	r6,40(sp)
 1012cfc:	d8801115 	stw	r2,68(sp)
 1012d00:	1016ae40 	call	1016ae4 <__i2b>
 1012d04:	1027883a 	mov	r19,r2
 1012d08:	003f2506 	br	10129a0 <_dtoa_r+0x7bc>
 1012d0c:	00c040b4 	movhi	r3,258
 1012d10:	18de4d04 	addi	r3,r3,31028
 1012d14:	003d6706 	br	10122b4 <_dtoa_r+0xd0>
 1012d18:	dd800517 	ldw	r22,20(sp)
 1012d1c:	04000044 	movi	r16,1
 1012d20:	00000706 	br	1012d40 <_dtoa_r+0xb5c>
 1012d24:	d9400717 	ldw	r5,28(sp)
 1012d28:	d9001617 	ldw	r4,88(sp)
 1012d2c:	01800284 	movi	r6,10
 1012d30:	000f883a 	mov	r7,zero
 1012d34:	1016b200 	call	1016b20 <__multadd>
 1012d38:	d8800715 	stw	r2,28(sp)
 1012d3c:	84000044 	addi	r16,r16,1
 1012d40:	d9000717 	ldw	r4,28(sp)
 1012d44:	900b883a 	mov	r5,r18
 1012d48:	1011fcc0 	call	1011fcc <quorem>
 1012d4c:	15c00c04 	addi	r23,r2,48
 1012d50:	b5c00005 	stb	r23,0(r22)
 1012d54:	d8c00f17 	ldw	r3,60(sp)
 1012d58:	b5800044 	addi	r22,r22,1
 1012d5c:	80fff116 	blt	r16,r3,1012d24 <_dtoa_r+0xb40>
 1012d60:	d8000615 	stw	zero,24(sp)
 1012d64:	d9400717 	ldw	r5,28(sp)
 1012d68:	d9001617 	ldw	r4,88(sp)
 1012d6c:	01800044 	movi	r6,1
 1012d70:	10167b00 	call	10167b0 <__lshift>
 1012d74:	1009883a 	mov	r4,r2
 1012d78:	900b883a 	mov	r5,r18
 1012d7c:	d8800715 	stw	r2,28(sp)
 1012d80:	1015fc80 	call	1015fc8 <__mcmp>
 1012d84:	00803c0e 	bge	zero,r2,1012e78 <_dtoa_r+0xc94>
 1012d88:	b009883a 	mov	r4,r22
 1012d8c:	213fffc4 	addi	r4,r4,-1
 1012d90:	21400003 	ldbu	r5,0(r4)
 1012d94:	00800e44 	movi	r2,57
 1012d98:	28c03fcc 	andi	r3,r5,255
 1012d9c:	18c0201c 	xori	r3,r3,128
 1012da0:	18ffe004 	addi	r3,r3,-128
 1012da4:	1881981e 	bne	r3,r2,1013408 <_dtoa_r+0x1224>
 1012da8:	d9800517 	ldw	r6,20(sp)
 1012dac:	21bff71e 	bne	r4,r6,1012d8c <_dtoa_r+0xba8>
 1012db0:	d8800d17 	ldw	r2,52(sp)
 1012db4:	37000044 	addi	fp,r6,1
 1012db8:	10800044 	addi	r2,r2,1
 1012dbc:	d8800d15 	stw	r2,52(sp)
 1012dc0:	00800c44 	movi	r2,49
 1012dc4:	30800005 	stb	r2,0(r6)
 1012dc8:	d9001617 	ldw	r4,88(sp)
 1012dcc:	900b883a 	mov	r5,r18
 1012dd0:	1015e6c0 	call	1015e6c <_Bfree>
 1012dd4:	983ecd26 	beq	r19,zero,101290c <_dtoa_r+0x728>
 1012dd8:	d8c00617 	ldw	r3,24(sp)
 1012ddc:	18000426 	beq	r3,zero,1012df0 <_dtoa_r+0xc0c>
 1012de0:	1cc00326 	beq	r3,r19,1012df0 <_dtoa_r+0xc0c>
 1012de4:	d9001617 	ldw	r4,88(sp)
 1012de8:	180b883a 	mov	r5,r3
 1012dec:	1015e6c0 	call	1015e6c <_Bfree>
 1012df0:	d9001617 	ldw	r4,88(sp)
 1012df4:	980b883a 	mov	r5,r19
 1012df8:	1015e6c0 	call	1015e6c <_Bfree>
 1012dfc:	003ec306 	br	101290c <_dtoa_r+0x728>
 1012e00:	1805883a 	mov	r2,r3
 1012e04:	003eeb06 	br	10129b4 <_dtoa_r+0x7d0>
 1012e08:	d9800a17 	ldw	r6,40(sp)
 1012e0c:	d8c01117 	ldw	r3,68(sp)
 1012e10:	20bfff04 	addi	r2,r4,-4
 1012e14:	308d883a 	add	r6,r6,r2
 1012e18:	1887883a 	add	r3,r3,r2
 1012e1c:	80a1883a 	add	r16,r16,r2
 1012e20:	d9800a15 	stw	r6,40(sp)
 1012e24:	d8c01115 	stw	r3,68(sp)
 1012e28:	003f1d06 	br	1012aa0 <_dtoa_r+0x8bc>
 1012e2c:	a03f0c1e 	bne	r20,zero,1012a60 <_dtoa_r+0x87c>
 1012e30:	00800434 	movhi	r2,16
 1012e34:	10bfffc4 	addi	r2,r2,-1
 1012e38:	a884703a 	and	r2,r21,r2
 1012e3c:	103f081e 	bne	r2,zero,1012a60 <_dtoa_r+0x87c>
 1012e40:	a89ffc2c 	andhi	r2,r21,32752
 1012e44:	103f0626 	beq	r2,zero,1012a60 <_dtoa_r+0x87c>
 1012e48:	d8c01117 	ldw	r3,68(sp)
 1012e4c:	d9000a17 	ldw	r4,40(sp)
 1012e50:	18c00044 	addi	r3,r3,1
 1012e54:	21000044 	addi	r4,r4,1
 1012e58:	d8c01115 	stw	r3,68(sp)
 1012e5c:	d9000a15 	stw	r4,40(sp)
 1012e60:	003f0006 	br	1012a64 <_dtoa_r+0x880>
 1012e64:	d9400717 	ldw	r5,28(sp)
 1012e68:	d9001617 	ldw	r4,88(sp)
 1012e6c:	1016c200 	call	1016c20 <__pow5mult>
 1012e70:	d8800715 	stw	r2,28(sp)
 1012e74:	003eed06 	br	1012a2c <_dtoa_r+0x848>
 1012e78:	1000021e 	bne	r2,zero,1012e84 <_dtoa_r+0xca0>
 1012e7c:	b880004c 	andi	r2,r23,1
 1012e80:	103fc11e 	bne	r2,zero,1012d88 <_dtoa_r+0xba4>
 1012e84:	b5bfffc4 	addi	r22,r22,-1
 1012e88:	b0c00007 	ldb	r3,0(r22)
 1012e8c:	00800c04 	movi	r2,48
 1012e90:	18bffc26 	beq	r3,r2,1012e84 <_dtoa_r+0xca0>
 1012e94:	b7000044 	addi	fp,r22,1
 1012e98:	003fcb06 	br	1012dc8 <_dtoa_r+0xbe4>
 1012e9c:	d9800d17 	ldw	r6,52(sp)
 1012ea0:	018fc83a 	sub	r7,zero,r6
 1012ea4:	3801f726 	beq	r7,zero,1013684 <_dtoa_r+0x14a0>
 1012ea8:	398003cc 	andi	r6,r7,15
 1012eac:	300c90fa 	slli	r6,r6,3
 1012eb0:	014040b4 	movhi	r5,258
 1012eb4:	295f1104 	addi	r5,r5,31812
 1012eb8:	d9001217 	ldw	r4,72(sp)
 1012ebc:	314d883a 	add	r6,r6,r5
 1012ec0:	30c00117 	ldw	r3,4(r6)
 1012ec4:	30800017 	ldw	r2,0(r6)
 1012ec8:	d9401317 	ldw	r5,76(sp)
 1012ecc:	3821d13a 	srai	r16,r7,4
 1012ed0:	100d883a 	mov	r6,r2
 1012ed4:	180f883a 	mov	r7,r3
 1012ed8:	100c1d80 	call	100c1d8 <__muldf3>
 1012edc:	1011883a 	mov	r8,r2
 1012ee0:	1813883a 	mov	r9,r3
 1012ee4:	1029883a 	mov	r20,r2
 1012ee8:	182b883a 	mov	r21,r3
 1012eec:	8001e526 	beq	r16,zero,1013684 <_dtoa_r+0x14a0>
 1012ef0:	05800084 	movi	r22,2
 1012ef4:	044040b4 	movhi	r17,258
 1012ef8:	8c5f4304 	addi	r17,r17,32012
 1012efc:	8080004c 	andi	r2,r16,1
 1012f00:	1005003a 	cmpeq	r2,r2,zero
 1012f04:	1000081e 	bne	r2,zero,1012f28 <_dtoa_r+0xd44>
 1012f08:	89800017 	ldw	r6,0(r17)
 1012f0c:	89c00117 	ldw	r7,4(r17)
 1012f10:	480b883a 	mov	r5,r9
 1012f14:	4009883a 	mov	r4,r8
 1012f18:	100c1d80 	call	100c1d8 <__muldf3>
 1012f1c:	1011883a 	mov	r8,r2
 1012f20:	b5800044 	addi	r22,r22,1
 1012f24:	1813883a 	mov	r9,r3
 1012f28:	8021d07a 	srai	r16,r16,1
 1012f2c:	8c400204 	addi	r17,r17,8
 1012f30:	803ff21e 	bne	r16,zero,1012efc <_dtoa_r+0xd18>
 1012f34:	4029883a 	mov	r20,r8
 1012f38:	482b883a 	mov	r21,r9
 1012f3c:	003dca06 	br	1012668 <_dtoa_r+0x484>
 1012f40:	d9000817 	ldw	r4,32(sp)
 1012f44:	2005003a 	cmpeq	r2,r4,zero
 1012f48:	1001f61e 	bne	r2,zero,1013724 <_dtoa_r+0x1540>
 1012f4c:	dc001117 	ldw	r16,68(sp)
 1012f50:	dc801017 	ldw	r18,64(sp)
 1012f54:	18c10cc4 	addi	r3,r3,1075
 1012f58:	003f6106 	br	1012ce0 <_dtoa_r+0xafc>
 1012f5c:	d8000b15 	stw	zero,44(sp)
 1012f60:	d9802617 	ldw	r6,152(sp)
 1012f64:	d8c00d17 	ldw	r3,52(sp)
 1012f68:	30800044 	addi	r2,r6,1
 1012f6c:	18ad883a 	add	r22,r3,r2
 1012f70:	b13fffc4 	addi	r4,r22,-1
 1012f74:	d9000e15 	stw	r4,56(sp)
 1012f78:	0581f60e 	bge	zero,r22,1013754 <_dtoa_r+0x1570>
 1012f7c:	dd800f15 	stw	r22,60(sp)
 1012f80:	003f3006 	br	1012c44 <_dtoa_r+0xa60>
 1012f84:	d8000b15 	stw	zero,44(sp)
 1012f88:	d9002617 	ldw	r4,152(sp)
 1012f8c:	0101eb0e 	bge	zero,r4,101373c <_dtoa_r+0x1558>
 1012f90:	202d883a 	mov	r22,r4
 1012f94:	d9000e15 	stw	r4,56(sp)
 1012f98:	d9000f15 	stw	r4,60(sp)
 1012f9c:	003f2906 	br	1012c44 <_dtoa_r+0xa60>
 1012fa0:	01800044 	movi	r6,1
 1012fa4:	d9800b15 	stw	r6,44(sp)
 1012fa8:	003ff706 	br	1012f88 <_dtoa_r+0xda4>
 1012fac:	01000044 	movi	r4,1
 1012fb0:	d9000b15 	stw	r4,44(sp)
 1012fb4:	003fea06 	br	1012f60 <_dtoa_r+0xd7c>
 1012fb8:	04000c0e 	bge	zero,r16,1012fec <_dtoa_r+0xe08>
 1012fbc:	d9400717 	ldw	r5,28(sp)
 1012fc0:	d9001617 	ldw	r4,88(sp)
 1012fc4:	01800044 	movi	r6,1
 1012fc8:	10167b00 	call	10167b0 <__lshift>
 1012fcc:	1009883a 	mov	r4,r2
 1012fd0:	900b883a 	mov	r5,r18
 1012fd4:	d8800715 	stw	r2,28(sp)
 1012fd8:	1015fc80 	call	1015fc8 <__mcmp>
 1012fdc:	0081e00e 	bge	zero,r2,1013760 <_dtoa_r+0x157c>
 1012fe0:	bdc00044 	addi	r23,r23,1
 1012fe4:	00800e84 	movi	r2,58
 1012fe8:	b881a226 	beq	r23,r2,1013674 <_dtoa_r+0x1490>
 1012fec:	b7000044 	addi	fp,r22,1
 1012ff0:	b5c00005 	stb	r23,0(r22)
 1012ff4:	003f7406 	br	1012dc8 <_dtoa_r+0xbe4>
 1012ff8:	00800e44 	movi	r2,57
 1012ffc:	b8819d26 	beq	r23,r2,1013674 <_dtoa_r+0x1490>
 1013000:	053ffa0e 	bge	zero,r20,1012fec <_dtoa_r+0xe08>
 1013004:	8dc00c44 	addi	r23,r17,49
 1013008:	003ff806 	br	1012fec <_dtoa_r+0xe08>
 101300c:	d9001617 	ldw	r4,88(sp)
 1013010:	a80b883a 	mov	r5,r21
 1013014:	04000044 	movi	r16,1
 1013018:	1015e6c0 	call	1015e6c <_Bfree>
 101301c:	003edf06 	br	1012b9c <_dtoa_r+0x9b8>
 1013020:	d9001617 	ldw	r4,88(sp)
 1013024:	980b883a 	mov	r5,r19
 1013028:	01800284 	movi	r6,10
 101302c:	000f883a 	mov	r7,zero
 1013030:	1016b200 	call	1016b20 <__multadd>
 1013034:	1027883a 	mov	r19,r2
 1013038:	d8800615 	stw	r2,24(sp)
 101303c:	003ebb06 	br	1012b2c <_dtoa_r+0x948>
 1013040:	d9801117 	ldw	r6,68(sp)
 1013044:	d8800d17 	ldw	r2,52(sp)
 1013048:	d8000915 	stw	zero,36(sp)
 101304c:	308dc83a 	sub	r6,r6,r2
 1013050:	0087c83a 	sub	r3,zero,r2
 1013054:	d9801115 	stw	r6,68(sp)
 1013058:	d8c01015 	stw	r3,64(sp)
 101305c:	003cfe06 	br	1012458 <_dtoa_r+0x274>
 1013060:	018dc83a 	sub	r6,zero,r6
 1013064:	d9801115 	stw	r6,68(sp)
 1013068:	d8000a15 	stw	zero,40(sp)
 101306c:	003cf306 	br	101243c <_dtoa_r+0x258>
 1013070:	d9000d17 	ldw	r4,52(sp)
 1013074:	100ca140 	call	100ca14 <__floatsidf>
 1013078:	880b883a 	mov	r5,r17
 101307c:	8009883a 	mov	r4,r16
 1013080:	180f883a 	mov	r7,r3
 1013084:	100d883a 	mov	r6,r2
 1013088:	1018b3c0 	call	1018b3c <__nedf2>
 101308c:	103ce126 	beq	r2,zero,1012414 <_dtoa_r+0x230>
 1013090:	d9800d17 	ldw	r6,52(sp)
 1013094:	31bfffc4 	addi	r6,r6,-1
 1013098:	d9800d15 	stw	r6,52(sp)
 101309c:	003cdd06 	br	1012414 <_dtoa_r+0x230>
 10130a0:	d9000717 	ldw	r4,28(sp)
 10130a4:	900b883a 	mov	r5,r18
 10130a8:	1015fc80 	call	1015fc8 <__mcmp>
 10130ac:	103e8d0e 	bge	r2,zero,1012ae4 <_dtoa_r+0x900>
 10130b0:	d9400717 	ldw	r5,28(sp)
 10130b4:	d9001617 	ldw	r4,88(sp)
 10130b8:	01800284 	movi	r6,10
 10130bc:	000f883a 	mov	r7,zero
 10130c0:	1016b200 	call	1016b20 <__multadd>
 10130c4:	d9800d17 	ldw	r6,52(sp)
 10130c8:	d8800715 	stw	r2,28(sp)
 10130cc:	31bfffc4 	addi	r6,r6,-1
 10130d0:	d9800d15 	stw	r6,52(sp)
 10130d4:	b001a71e 	bne	r22,zero,1013774 <_dtoa_r+0x1590>
 10130d8:	d8800e17 	ldw	r2,56(sp)
 10130dc:	d8800f15 	stw	r2,60(sp)
 10130e0:	003e8006 	br	1012ae4 <_dtoa_r+0x900>
 10130e4:	90800417 	ldw	r2,16(r18)
 10130e8:	1085883a 	add	r2,r2,r2
 10130ec:	1085883a 	add	r2,r2,r2
 10130f0:	1485883a 	add	r2,r2,r18
 10130f4:	11000417 	ldw	r4,16(r2)
 10130f8:	1015e940 	call	1015e94 <__hi0bits>
 10130fc:	00c00804 	movi	r3,32
 1013100:	1887c83a 	sub	r3,r3,r2
 1013104:	003e5a06 	br	1012a70 <_dtoa_r+0x88c>
 1013108:	d9400717 	ldw	r5,28(sp)
 101310c:	d9801017 	ldw	r6,64(sp)
 1013110:	d9001617 	ldw	r4,88(sp)
 1013114:	1016c200 	call	1016c20 <__pow5mult>
 1013118:	d8800715 	stw	r2,28(sp)
 101311c:	003e4306 	br	1012a2c <_dtoa_r+0x848>
 1013120:	d9800f17 	ldw	r6,60(sp)
 1013124:	d8800d17 	ldw	r2,52(sp)
 1013128:	d9800315 	stw	r6,12(sp)
 101312c:	d8800415 	stw	r2,16(sp)
 1013130:	d8c00b17 	ldw	r3,44(sp)
 1013134:	1805003a 	cmpeq	r2,r3,zero
 1013138:	1000e21e 	bne	r2,zero,10134c4 <_dtoa_r+0x12e0>
 101313c:	d9000317 	ldw	r4,12(sp)
 1013140:	0005883a 	mov	r2,zero
 1013144:	00cff834 	movhi	r3,16352
 1013148:	200c90fa 	slli	r6,r4,3
 101314c:	010040b4 	movhi	r4,258
 1013150:	211f1104 	addi	r4,r4,31812
 1013154:	180b883a 	mov	r5,r3
 1013158:	310d883a 	add	r6,r6,r4
 101315c:	327fff17 	ldw	r9,-4(r6)
 1013160:	323ffe17 	ldw	r8,-8(r6)
 1013164:	1009883a 	mov	r4,r2
 1013168:	480f883a 	mov	r7,r9
 101316c:	400d883a 	mov	r6,r8
 1013170:	100c59c0 	call	100c59c <__divdf3>
 1013174:	180b883a 	mov	r5,r3
 1013178:	b00d883a 	mov	r6,r22
 101317c:	b80f883a 	mov	r7,r23
 1013180:	1009883a 	mov	r4,r2
 1013184:	100c0e40 	call	100c0e4 <__subdf3>
 1013188:	a80b883a 	mov	r5,r21
 101318c:	a009883a 	mov	r4,r20
 1013190:	d8c01915 	stw	r3,100(sp)
 1013194:	d8801815 	stw	r2,96(sp)
 1013198:	100cb0c0 	call	100cb0c <__fixdfsi>
 101319c:	1009883a 	mov	r4,r2
 10131a0:	1027883a 	mov	r19,r2
 10131a4:	100ca140 	call	100ca14 <__floatsidf>
 10131a8:	a80b883a 	mov	r5,r21
 10131ac:	a009883a 	mov	r4,r20
 10131b0:	180f883a 	mov	r7,r3
 10131b4:	100d883a 	mov	r6,r2
 10131b8:	100c0e40 	call	100c0e4 <__subdf3>
 10131bc:	d9801817 	ldw	r6,96(sp)
 10131c0:	1823883a 	mov	r17,r3
 10131c4:	d8801415 	stw	r2,80(sp)
 10131c8:	302d883a 	mov	r22,r6
 10131cc:	d9800517 	ldw	r6,20(sp)
 10131d0:	9cc00c04 	addi	r19,r19,48
 10131d4:	dc401515 	stw	r17,84(sp)
 10131d8:	d8c01917 	ldw	r3,100(sp)
 10131dc:	34c00005 	stb	r19,0(r6)
 10131e0:	d8800517 	ldw	r2,20(sp)
 10131e4:	d9401917 	ldw	r5,100(sp)
 10131e8:	d9801417 	ldw	r6,80(sp)
 10131ec:	b009883a 	mov	r4,r22
 10131f0:	880f883a 	mov	r7,r17
 10131f4:	182f883a 	mov	r23,r3
 10131f8:	17000044 	addi	fp,r2,1
 10131fc:	100c87c0 	call	100c87c <__gtdf2>
 1013200:	00804e16 	blt	zero,r2,101333c <_dtoa_r+0x1158>
 1013204:	d9801417 	ldw	r6,80(sp)
 1013208:	0005883a 	mov	r2,zero
 101320c:	00cffc34 	movhi	r3,16368
 1013210:	180b883a 	mov	r5,r3
 1013214:	880f883a 	mov	r7,r17
 1013218:	1009883a 	mov	r4,r2
 101321c:	100c0e40 	call	100c0e4 <__subdf3>
 1013220:	d9401917 	ldw	r5,100(sp)
 1013224:	180f883a 	mov	r7,r3
 1013228:	b009883a 	mov	r4,r22
 101322c:	100d883a 	mov	r6,r2
 1013230:	100c87c0 	call	100c87c <__gtdf2>
 1013234:	00bda216 	blt	zero,r2,10128c0 <_dtoa_r+0x6dc>
 1013238:	d8c00317 	ldw	r3,12(sp)
 101323c:	00800044 	movi	r2,1
 1013240:	10c01216 	blt	r2,r3,101328c <_dtoa_r+0x10a8>
 1013244:	003d4506 	br	101275c <_dtoa_r+0x578>
 1013248:	d9801417 	ldw	r6,80(sp)
 101324c:	0005883a 	mov	r2,zero
 1013250:	00cffc34 	movhi	r3,16368
 1013254:	180b883a 	mov	r5,r3
 1013258:	880f883a 	mov	r7,r17
 101325c:	1009883a 	mov	r4,r2
 1013260:	100c0e40 	call	100c0e4 <__subdf3>
 1013264:	d9c01b17 	ldw	r7,108(sp)
 1013268:	180b883a 	mov	r5,r3
 101326c:	1009883a 	mov	r4,r2
 1013270:	b00d883a 	mov	r6,r22
 1013274:	100c98c0 	call	100c98c <__ltdf2>
 1013278:	103d9116 	blt	r2,zero,10128c0 <_dtoa_r+0x6dc>
 101327c:	d9800517 	ldw	r6,20(sp)
 1013280:	d9000317 	ldw	r4,12(sp)
 1013284:	3105883a 	add	r2,r6,r4
 1013288:	e0bd3426 	beq	fp,r2,101275c <_dtoa_r+0x578>
 101328c:	04500934 	movhi	r17,16420
 1013290:	0021883a 	mov	r16,zero
 1013294:	b80b883a 	mov	r5,r23
 1013298:	b009883a 	mov	r4,r22
 101329c:	800d883a 	mov	r6,r16
 10132a0:	880f883a 	mov	r7,r17
 10132a4:	100c1d80 	call	100c1d8 <__muldf3>
 10132a8:	d9401517 	ldw	r5,84(sp)
 10132ac:	d9001417 	ldw	r4,80(sp)
 10132b0:	880f883a 	mov	r7,r17
 10132b4:	000d883a 	mov	r6,zero
 10132b8:	d8801a15 	stw	r2,104(sp)
 10132bc:	d8c01b15 	stw	r3,108(sp)
 10132c0:	100c1d80 	call	100c1d8 <__muldf3>
 10132c4:	180b883a 	mov	r5,r3
 10132c8:	1009883a 	mov	r4,r2
 10132cc:	1823883a 	mov	r17,r3
 10132d0:	1021883a 	mov	r16,r2
 10132d4:	100cb0c0 	call	100cb0c <__fixdfsi>
 10132d8:	1009883a 	mov	r4,r2
 10132dc:	102b883a 	mov	r21,r2
 10132e0:	100ca140 	call	100ca14 <__floatsidf>
 10132e4:	880b883a 	mov	r5,r17
 10132e8:	8009883a 	mov	r4,r16
 10132ec:	180f883a 	mov	r7,r3
 10132f0:	100d883a 	mov	r6,r2
 10132f4:	100c0e40 	call	100c0e4 <__subdf3>
 10132f8:	1021883a 	mov	r16,r2
 10132fc:	d9001b17 	ldw	r4,108(sp)
 1013300:	1823883a 	mov	r17,r3
 1013304:	dc001415 	stw	r16,80(sp)
 1013308:	ad400c04 	addi	r21,r21,48
 101330c:	dc401515 	stw	r17,84(sp)
 1013310:	d8801a17 	ldw	r2,104(sp)
 1013314:	e5400005 	stb	r21,0(fp)
 1013318:	202f883a 	mov	r23,r4
 101331c:	d9c01b17 	ldw	r7,108(sp)
 1013320:	d9001417 	ldw	r4,80(sp)
 1013324:	880b883a 	mov	r5,r17
 1013328:	100d883a 	mov	r6,r2
 101332c:	102d883a 	mov	r22,r2
 1013330:	e7000044 	addi	fp,fp,1
 1013334:	100c98c0 	call	100c98c <__ltdf2>
 1013338:	103fc30e 	bge	r2,zero,1013248 <_dtoa_r+0x1064>
 101333c:	d9000417 	ldw	r4,16(sp)
 1013340:	d9000d15 	stw	r4,52(sp)
 1013344:	003d7106 	br	101290c <_dtoa_r+0x728>
 1013348:	d9801717 	ldw	r6,92(sp)
 101334c:	00800084 	movi	r2,2
 1013350:	11bde60e 	bge	r2,r6,1012aec <_dtoa_r+0x908>
 1013354:	203cfb1e 	bne	r4,zero,1012744 <_dtoa_r+0x560>
 1013358:	d9001617 	ldw	r4,88(sp)
 101335c:	900b883a 	mov	r5,r18
 1013360:	01800144 	movi	r6,5
 1013364:	000f883a 	mov	r7,zero
 1013368:	1016b200 	call	1016b20 <__multadd>
 101336c:	d9000717 	ldw	r4,28(sp)
 1013370:	100b883a 	mov	r5,r2
 1013374:	1025883a 	mov	r18,r2
 1013378:	1015fc80 	call	1015fc8 <__mcmp>
 101337c:	00bcf10e 	bge	zero,r2,1012744 <_dtoa_r+0x560>
 1013380:	d8c00d17 	ldw	r3,52(sp)
 1013384:	d9000517 	ldw	r4,20(sp)
 1013388:	d8000615 	stw	zero,24(sp)
 101338c:	18c00044 	addi	r3,r3,1
 1013390:	d8c00d15 	stw	r3,52(sp)
 1013394:	00800c44 	movi	r2,49
 1013398:	27000044 	addi	fp,r4,1
 101339c:	20800005 	stb	r2,0(r4)
 10133a0:	003e8906 	br	1012dc8 <_dtoa_r+0xbe4>
 10133a4:	d8c00517 	ldw	r3,20(sp)
 10133a8:	003bc206 	br	10122b4 <_dtoa_r+0xd0>
 10133ac:	018040b4 	movhi	r6,258
 10133b0:	319f4304 	addi	r6,r6,32012
 10133b4:	30c00917 	ldw	r3,36(r6)
 10133b8:	30800817 	ldw	r2,32(r6)
 10133bc:	d9001217 	ldw	r4,72(sp)
 10133c0:	d9401317 	ldw	r5,76(sp)
 10133c4:	180f883a 	mov	r7,r3
 10133c8:	100d883a 	mov	r6,r2
 10133cc:	100c59c0 	call	100c59c <__divdf3>
 10133d0:	948003cc 	andi	r18,r18,15
 10133d4:	058000c4 	movi	r22,3
 10133d8:	1029883a 	mov	r20,r2
 10133dc:	182b883a 	mov	r21,r3
 10133e0:	003c8906 	br	1012608 <_dtoa_r+0x424>
 10133e4:	d9001017 	ldw	r4,64(sp)
 10133e8:	d9800917 	ldw	r6,36(sp)
 10133ec:	0025883a 	mov	r18,zero
 10133f0:	1105c83a 	sub	r2,r2,r4
 10133f4:	2089883a 	add	r4,r4,r2
 10133f8:	308d883a 	add	r6,r6,r2
 10133fc:	d9001015 	stw	r4,64(sp)
 1013400:	d9800915 	stw	r6,36(sp)
 1013404:	003e3206 	br	1012cd0 <_dtoa_r+0xaec>
 1013408:	28800044 	addi	r2,r5,1
 101340c:	27000044 	addi	fp,r4,1
 1013410:	20800005 	stb	r2,0(r4)
 1013414:	003e6c06 	br	1012dc8 <_dtoa_r+0xbe4>
 1013418:	d8800f17 	ldw	r2,60(sp)
 101341c:	00bce016 	blt	zero,r2,10127a0 <_dtoa_r+0x5bc>
 1013420:	d9800f17 	ldw	r6,60(sp)
 1013424:	303cc51e 	bne	r6,zero,101273c <_dtoa_r+0x558>
 1013428:	0005883a 	mov	r2,zero
 101342c:	00d00534 	movhi	r3,16404
 1013430:	980b883a 	mov	r5,r19
 1013434:	180f883a 	mov	r7,r3
 1013438:	9009883a 	mov	r4,r18
 101343c:	100d883a 	mov	r6,r2
 1013440:	100c1d80 	call	100c1d8 <__muldf3>
 1013444:	180b883a 	mov	r5,r3
 1013448:	a80f883a 	mov	r7,r21
 101344c:	1009883a 	mov	r4,r2
 1013450:	a00d883a 	mov	r6,r20
 1013454:	100c9040 	call	100c904 <__gedf2>
 1013458:	103cb80e 	bge	r2,zero,101273c <_dtoa_r+0x558>
 101345c:	0027883a 	mov	r19,zero
 1013460:	0025883a 	mov	r18,zero
 1013464:	003fc606 	br	1013380 <_dtoa_r+0x119c>
 1013468:	99400117 	ldw	r5,4(r19)
 101346c:	d9001617 	ldw	r4,88(sp)
 1013470:	10163ec0 	call	10163ec <_Balloc>
 1013474:	99800417 	ldw	r6,16(r19)
 1013478:	11000304 	addi	r4,r2,12
 101347c:	99400304 	addi	r5,r19,12
 1013480:	318d883a 	add	r6,r6,r6
 1013484:	318d883a 	add	r6,r6,r6
 1013488:	31800204 	addi	r6,r6,8
 101348c:	1023883a 	mov	r17,r2
 1013490:	100d7500 	call	100d750 <memcpy>
 1013494:	d9001617 	ldw	r4,88(sp)
 1013498:	880b883a 	mov	r5,r17
 101349c:	01800044 	movi	r6,1
 10134a0:	10167b00 	call	10167b0 <__lshift>
 10134a4:	100b883a 	mov	r5,r2
 10134a8:	003d9c06 	br	1012b1c <_dtoa_r+0x938>
 10134ac:	00800e44 	movi	r2,57
 10134b0:	b8807026 	beq	r23,r2,1013674 <_dtoa_r+0x1490>
 10134b4:	b8800044 	addi	r2,r23,1
 10134b8:	b7000044 	addi	fp,r22,1
 10134bc:	b0800005 	stb	r2,0(r22)
 10134c0:	003e4106 	br	1012dc8 <_dtoa_r+0xbe4>
 10134c4:	d8800317 	ldw	r2,12(sp)
 10134c8:	018040b4 	movhi	r6,258
 10134cc:	319f1104 	addi	r6,r6,31812
 10134d0:	b009883a 	mov	r4,r22
 10134d4:	100e90fa 	slli	r7,r2,3
 10134d8:	b80b883a 	mov	r5,r23
 10134dc:	398f883a 	add	r7,r7,r6
 10134e0:	38bffe17 	ldw	r2,-8(r7)
 10134e4:	d9800517 	ldw	r6,20(sp)
 10134e8:	38ffff17 	ldw	r3,-4(r7)
 10134ec:	37000044 	addi	fp,r6,1
 10134f0:	180f883a 	mov	r7,r3
 10134f4:	100d883a 	mov	r6,r2
 10134f8:	100c1d80 	call	100c1d8 <__muldf3>
 10134fc:	a80b883a 	mov	r5,r21
 1013500:	a009883a 	mov	r4,r20
 1013504:	182f883a 	mov	r23,r3
 1013508:	102d883a 	mov	r22,r2
 101350c:	100cb0c0 	call	100cb0c <__fixdfsi>
 1013510:	1009883a 	mov	r4,r2
 1013514:	1027883a 	mov	r19,r2
 1013518:	100ca140 	call	100ca14 <__floatsidf>
 101351c:	a80b883a 	mov	r5,r21
 1013520:	a009883a 	mov	r4,r20
 1013524:	180f883a 	mov	r7,r3
 1013528:	100d883a 	mov	r6,r2
 101352c:	100c0e40 	call	100c0e4 <__subdf3>
 1013530:	180b883a 	mov	r5,r3
 1013534:	d8c00517 	ldw	r3,20(sp)
 1013538:	9cc00c04 	addi	r19,r19,48
 101353c:	1009883a 	mov	r4,r2
 1013540:	1cc00005 	stb	r19,0(r3)
 1013544:	2021883a 	mov	r16,r4
 1013548:	d9000317 	ldw	r4,12(sp)
 101354c:	00800044 	movi	r2,1
 1013550:	2823883a 	mov	r17,r5
 1013554:	20802226 	beq	r4,r2,10135e0 <_dtoa_r+0x13fc>
 1013558:	1029883a 	mov	r20,r2
 101355c:	0005883a 	mov	r2,zero
 1013560:	00d00934 	movhi	r3,16420
 1013564:	180f883a 	mov	r7,r3
 1013568:	100d883a 	mov	r6,r2
 101356c:	880b883a 	mov	r5,r17
 1013570:	8009883a 	mov	r4,r16
 1013574:	100c1d80 	call	100c1d8 <__muldf3>
 1013578:	180b883a 	mov	r5,r3
 101357c:	1009883a 	mov	r4,r2
 1013580:	1823883a 	mov	r17,r3
 1013584:	1021883a 	mov	r16,r2
 1013588:	100cb0c0 	call	100cb0c <__fixdfsi>
 101358c:	1009883a 	mov	r4,r2
 1013590:	102b883a 	mov	r21,r2
 1013594:	100ca140 	call	100ca14 <__floatsidf>
 1013598:	880b883a 	mov	r5,r17
 101359c:	8009883a 	mov	r4,r16
 10135a0:	180f883a 	mov	r7,r3
 10135a4:	100d883a 	mov	r6,r2
 10135a8:	100c0e40 	call	100c0e4 <__subdf3>
 10135ac:	180b883a 	mov	r5,r3
 10135b0:	d8c00517 	ldw	r3,20(sp)
 10135b4:	1009883a 	mov	r4,r2
 10135b8:	ad400c04 	addi	r21,r21,48
 10135bc:	1d05883a 	add	r2,r3,r20
 10135c0:	15400005 	stb	r21,0(r2)
 10135c4:	2021883a 	mov	r16,r4
 10135c8:	d9000317 	ldw	r4,12(sp)
 10135cc:	a5000044 	addi	r20,r20,1
 10135d0:	2823883a 	mov	r17,r5
 10135d4:	a13fe11e 	bne	r20,r4,101355c <_dtoa_r+0x1378>
 10135d8:	e505883a 	add	r2,fp,r20
 10135dc:	173fffc4 	addi	fp,r2,-1
 10135e0:	0025883a 	mov	r18,zero
 10135e4:	04cff834 	movhi	r19,16352
 10135e8:	b009883a 	mov	r4,r22
 10135ec:	b80b883a 	mov	r5,r23
 10135f0:	900d883a 	mov	r6,r18
 10135f4:	980f883a 	mov	r7,r19
 10135f8:	100c1640 	call	100c164 <__adddf3>
 10135fc:	180b883a 	mov	r5,r3
 1013600:	1009883a 	mov	r4,r2
 1013604:	800d883a 	mov	r6,r16
 1013608:	880f883a 	mov	r7,r17
 101360c:	100c98c0 	call	100c98c <__ltdf2>
 1013610:	103cab16 	blt	r2,zero,10128c0 <_dtoa_r+0x6dc>
 1013614:	0009883a 	mov	r4,zero
 1013618:	980b883a 	mov	r5,r19
 101361c:	b80f883a 	mov	r7,r23
 1013620:	b00d883a 	mov	r6,r22
 1013624:	100c0e40 	call	100c0e4 <__subdf3>
 1013628:	180b883a 	mov	r5,r3
 101362c:	880f883a 	mov	r7,r17
 1013630:	1009883a 	mov	r4,r2
 1013634:	800d883a 	mov	r6,r16
 1013638:	100c87c0 	call	100c87c <__gtdf2>
 101363c:	00bc470e 	bge	zero,r2,101275c <_dtoa_r+0x578>
 1013640:	00c00c04 	movi	r3,48
 1013644:	e73fffc4 	addi	fp,fp,-1
 1013648:	e0800007 	ldb	r2,0(fp)
 101364c:	10fffd26 	beq	r2,r3,1013644 <_dtoa_r+0x1460>
 1013650:	d9800417 	ldw	r6,16(sp)
 1013654:	e7000044 	addi	fp,fp,1
 1013658:	d9800d15 	stw	r6,52(sp)
 101365c:	003cab06 	br	101290c <_dtoa_r+0x728>
 1013660:	d8c00f17 	ldw	r3,60(sp)
 1013664:	d9001117 	ldw	r4,68(sp)
 1013668:	20e1c83a 	sub	r16,r4,r3
 101366c:	0007883a 	mov	r3,zero
 1013670:	003d9b06 	br	1012ce0 <_dtoa_r+0xafc>
 1013674:	00800e44 	movi	r2,57
 1013678:	b0800005 	stb	r2,0(r22)
 101367c:	b5800044 	addi	r22,r22,1
 1013680:	003dc106 	br	1012d88 <_dtoa_r+0xba4>
 1013684:	05800084 	movi	r22,2
 1013688:	003bf706 	br	1012668 <_dtoa_r+0x484>
 101368c:	d9000f17 	ldw	r4,60(sp)
 1013690:	013c000e 	bge	zero,r4,1012694 <_dtoa_r+0x4b0>
 1013694:	d9800e17 	ldw	r6,56(sp)
 1013698:	01bc300e 	bge	zero,r6,101275c <_dtoa_r+0x578>
 101369c:	0005883a 	mov	r2,zero
 10136a0:	00d00934 	movhi	r3,16420
 10136a4:	a80b883a 	mov	r5,r21
 10136a8:	180f883a 	mov	r7,r3
 10136ac:	a009883a 	mov	r4,r20
 10136b0:	100d883a 	mov	r6,r2
 10136b4:	100c1d80 	call	100c1d8 <__muldf3>
 10136b8:	b1000044 	addi	r4,r22,1
 10136bc:	1021883a 	mov	r16,r2
 10136c0:	1823883a 	mov	r17,r3
 10136c4:	100ca140 	call	100ca14 <__floatsidf>
 10136c8:	880b883a 	mov	r5,r17
 10136cc:	8009883a 	mov	r4,r16
 10136d0:	180f883a 	mov	r7,r3
 10136d4:	100d883a 	mov	r6,r2
 10136d8:	100c1d80 	call	100c1d8 <__muldf3>
 10136dc:	0011883a 	mov	r8,zero
 10136e0:	02500734 	movhi	r9,16412
 10136e4:	180b883a 	mov	r5,r3
 10136e8:	480f883a 	mov	r7,r9
 10136ec:	1009883a 	mov	r4,r2
 10136f0:	400d883a 	mov	r6,r8
 10136f4:	100c1640 	call	100c164 <__adddf3>
 10136f8:	102d883a 	mov	r22,r2
 10136fc:	00bf3034 	movhi	r2,64704
 1013700:	10ef883a 	add	r23,r2,r3
 1013704:	d8800d17 	ldw	r2,52(sp)
 1013708:	d8c00e17 	ldw	r3,56(sp)
 101370c:	8029883a 	mov	r20,r16
 1013710:	10bfffc4 	addi	r2,r2,-1
 1013714:	882b883a 	mov	r21,r17
 1013718:	d8800415 	stw	r2,16(sp)
 101371c:	d8c00315 	stw	r3,12(sp)
 1013720:	003e8306 	br	1013130 <_dtoa_r+0xf4c>
 1013724:	d8800117 	ldw	r2,4(sp)
 1013728:	dc001117 	ldw	r16,68(sp)
 101372c:	dc801017 	ldw	r18,64(sp)
 1013730:	00c00d84 	movi	r3,54
 1013734:	1887c83a 	sub	r3,r3,r2
 1013738:	003d6906 	br	1012ce0 <_dtoa_r+0xafc>
 101373c:	01800044 	movi	r6,1
 1013740:	3021883a 	mov	r16,r6
 1013744:	d9800f15 	stw	r6,60(sp)
 1013748:	d9802615 	stw	r6,152(sp)
 101374c:	d9800e15 	stw	r6,56(sp)
 1013750:	003b9306 	br	10125a0 <_dtoa_r+0x3bc>
 1013754:	b021883a 	mov	r16,r22
 1013758:	dd800f15 	stw	r22,60(sp)
 101375c:	003b9006 	br	10125a0 <_dtoa_r+0x3bc>
 1013760:	103e221e 	bne	r2,zero,1012fec <_dtoa_r+0xe08>
 1013764:	b880004c 	andi	r2,r23,1
 1013768:	1005003a 	cmpeq	r2,r2,zero
 101376c:	103e1f1e 	bne	r2,zero,1012fec <_dtoa_r+0xe08>
 1013770:	003e1b06 	br	1012fe0 <_dtoa_r+0xdfc>
 1013774:	d9001617 	ldw	r4,88(sp)
 1013778:	980b883a 	mov	r5,r19
 101377c:	01800284 	movi	r6,10
 1013780:	000f883a 	mov	r7,zero
 1013784:	1016b200 	call	1016b20 <__multadd>
 1013788:	d8c00e17 	ldw	r3,56(sp)
 101378c:	1027883a 	mov	r19,r2
 1013790:	d8c00f15 	stw	r3,60(sp)
 1013794:	003cd306 	br	1012ae4 <_dtoa_r+0x900>

01013798 <_fflush_r>:
 1013798:	defffb04 	addi	sp,sp,-20
 101379c:	dcc00315 	stw	r19,12(sp)
 10137a0:	dc800215 	stw	r18,8(sp)
 10137a4:	dfc00415 	stw	ra,16(sp)
 10137a8:	dc400115 	stw	r17,4(sp)
 10137ac:	dc000015 	stw	r16,0(sp)
 10137b0:	2027883a 	mov	r19,r4
 10137b4:	2825883a 	mov	r18,r5
 10137b8:	20000226 	beq	r4,zero,10137c4 <_fflush_r+0x2c>
 10137bc:	20800e17 	ldw	r2,56(r4)
 10137c0:	10005626 	beq	r2,zero,101391c <_fflush_r+0x184>
 10137c4:	9100030b 	ldhu	r4,12(r18)
 10137c8:	20ffffcc 	andi	r3,r4,65535
 10137cc:	18e0001c 	xori	r3,r3,32768
 10137d0:	18e00004 	addi	r3,r3,-32768
 10137d4:	1880020c 	andi	r2,r3,8
 10137d8:	1000261e 	bne	r2,zero,1013874 <_fflush_r+0xdc>
 10137dc:	90c00117 	ldw	r3,4(r18)
 10137e0:	20820014 	ori	r2,r4,2048
 10137e4:	9080030d 	sth	r2,12(r18)
 10137e8:	1009883a 	mov	r4,r2
 10137ec:	00c0400e 	bge	zero,r3,10138f0 <_fflush_r+0x158>
 10137f0:	92000a17 	ldw	r8,40(r18)
 10137f4:	40004026 	beq	r8,zero,10138f8 <_fflush_r+0x160>
 10137f8:	2084000c 	andi	r2,r4,4096
 10137fc:	10005326 	beq	r2,zero,101394c <_fflush_r+0x1b4>
 1013800:	94001417 	ldw	r16,80(r18)
 1013804:	9080030b 	ldhu	r2,12(r18)
 1013808:	1080010c 	andi	r2,r2,4
 101380c:	1000481e 	bne	r2,zero,1013930 <_fflush_r+0x198>
 1013810:	91400717 	ldw	r5,28(r18)
 1013814:	9809883a 	mov	r4,r19
 1013818:	800d883a 	mov	r6,r16
 101381c:	000f883a 	mov	r7,zero
 1013820:	403ee83a 	callr	r8
 1013824:	8080261e 	bne	r16,r2,10138c0 <_fflush_r+0x128>
 1013828:	9080030b 	ldhu	r2,12(r18)
 101382c:	91000417 	ldw	r4,16(r18)
 1013830:	90000115 	stw	zero,4(r18)
 1013834:	10bdffcc 	andi	r2,r2,63487
 1013838:	10ffffcc 	andi	r3,r2,65535
 101383c:	18c4000c 	andi	r3,r3,4096
 1013840:	9080030d 	sth	r2,12(r18)
 1013844:	91000015 	stw	r4,0(r18)
 1013848:	18002b26 	beq	r3,zero,10138f8 <_fflush_r+0x160>
 101384c:	0007883a 	mov	r3,zero
 1013850:	1805883a 	mov	r2,r3
 1013854:	94001415 	stw	r16,80(r18)
 1013858:	dfc00417 	ldw	ra,16(sp)
 101385c:	dcc00317 	ldw	r19,12(sp)
 1013860:	dc800217 	ldw	r18,8(sp)
 1013864:	dc400117 	ldw	r17,4(sp)
 1013868:	dc000017 	ldw	r16,0(sp)
 101386c:	dec00504 	addi	sp,sp,20
 1013870:	f800283a 	ret
 1013874:	94400417 	ldw	r17,16(r18)
 1013878:	88001f26 	beq	r17,zero,10138f8 <_fflush_r+0x160>
 101387c:	90800017 	ldw	r2,0(r18)
 1013880:	18c000cc 	andi	r3,r3,3
 1013884:	94400015 	stw	r17,0(r18)
 1013888:	1461c83a 	sub	r16,r2,r17
 101388c:	18002526 	beq	r3,zero,1013924 <_fflush_r+0x18c>
 1013890:	0005883a 	mov	r2,zero
 1013894:	90800215 	stw	r2,8(r18)
 1013898:	0400170e 	bge	zero,r16,10138f8 <_fflush_r+0x160>
 101389c:	90c00917 	ldw	r3,36(r18)
 10138a0:	91400717 	ldw	r5,28(r18)
 10138a4:	880d883a 	mov	r6,r17
 10138a8:	800f883a 	mov	r7,r16
 10138ac:	9809883a 	mov	r4,r19
 10138b0:	183ee83a 	callr	r3
 10138b4:	88a3883a 	add	r17,r17,r2
 10138b8:	80a1c83a 	sub	r16,r16,r2
 10138bc:	00bff616 	blt	zero,r2,1013898 <_fflush_r+0x100>
 10138c0:	9080030b 	ldhu	r2,12(r18)
 10138c4:	00ffffc4 	movi	r3,-1
 10138c8:	10801014 	ori	r2,r2,64
 10138cc:	9080030d 	sth	r2,12(r18)
 10138d0:	1805883a 	mov	r2,r3
 10138d4:	dfc00417 	ldw	ra,16(sp)
 10138d8:	dcc00317 	ldw	r19,12(sp)
 10138dc:	dc800217 	ldw	r18,8(sp)
 10138e0:	dc400117 	ldw	r17,4(sp)
 10138e4:	dc000017 	ldw	r16,0(sp)
 10138e8:	dec00504 	addi	sp,sp,20
 10138ec:	f800283a 	ret
 10138f0:	90800f17 	ldw	r2,60(r18)
 10138f4:	00bfbe16 	blt	zero,r2,10137f0 <_fflush_r+0x58>
 10138f8:	0007883a 	mov	r3,zero
 10138fc:	1805883a 	mov	r2,r3
 1013900:	dfc00417 	ldw	ra,16(sp)
 1013904:	dcc00317 	ldw	r19,12(sp)
 1013908:	dc800217 	ldw	r18,8(sp)
 101390c:	dc400117 	ldw	r17,4(sp)
 1013910:	dc000017 	ldw	r16,0(sp)
 1013914:	dec00504 	addi	sp,sp,20
 1013918:	f800283a 	ret
 101391c:	1013a300 	call	1013a30 <__sinit>
 1013920:	003fa806 	br	10137c4 <_fflush_r+0x2c>
 1013924:	90800517 	ldw	r2,20(r18)
 1013928:	90800215 	stw	r2,8(r18)
 101392c:	003fda06 	br	1013898 <_fflush_r+0x100>
 1013930:	90800117 	ldw	r2,4(r18)
 1013934:	90c00c17 	ldw	r3,48(r18)
 1013938:	80a1c83a 	sub	r16,r16,r2
 101393c:	183fb426 	beq	r3,zero,1013810 <_fflush_r+0x78>
 1013940:	90800f17 	ldw	r2,60(r18)
 1013944:	80a1c83a 	sub	r16,r16,r2
 1013948:	003fb106 	br	1013810 <_fflush_r+0x78>
 101394c:	91400717 	ldw	r5,28(r18)
 1013950:	9809883a 	mov	r4,r19
 1013954:	000d883a 	mov	r6,zero
 1013958:	01c00044 	movi	r7,1
 101395c:	403ee83a 	callr	r8
 1013960:	1021883a 	mov	r16,r2
 1013964:	00bfffc4 	movi	r2,-1
 1013968:	80800226 	beq	r16,r2,1013974 <_fflush_r+0x1dc>
 101396c:	92000a17 	ldw	r8,40(r18)
 1013970:	003fa406 	br	1013804 <_fflush_r+0x6c>
 1013974:	98c00017 	ldw	r3,0(r19)
 1013978:	00800744 	movi	r2,29
 101397c:	18bfde26 	beq	r3,r2,10138f8 <_fflush_r+0x160>
 1013980:	9080030b 	ldhu	r2,12(r18)
 1013984:	8007883a 	mov	r3,r16
 1013988:	10801014 	ori	r2,r2,64
 101398c:	9080030d 	sth	r2,12(r18)
 1013990:	003fcf06 	br	10138d0 <_fflush_r+0x138>

01013994 <fflush>:
 1013994:	01404074 	movhi	r5,257
 1013998:	294de604 	addi	r5,r5,14232
 101399c:	2007883a 	mov	r3,r4
 10139a0:	20000526 	beq	r4,zero,10139b8 <fflush+0x24>
 10139a4:	008040f4 	movhi	r2,259
 10139a8:	10a67004 	addi	r2,r2,-26176
 10139ac:	11000017 	ldw	r4,0(r2)
 10139b0:	180b883a 	mov	r5,r3
 10139b4:	10137981 	jmpi	1013798 <_fflush_r>
 10139b8:	008040f4 	movhi	r2,259
 10139bc:	10a67104 	addi	r2,r2,-26172
 10139c0:	11000017 	ldw	r4,0(r2)
 10139c4:	10145641 	jmpi	1014564 <_fwalk_reent>

010139c8 <std>:
 10139c8:	00804074 	movhi	r2,257
 10139cc:	109dbc04 	addi	r2,r2,30448
 10139d0:	20800b15 	stw	r2,44(r4)
 10139d4:	00804074 	movhi	r2,257
 10139d8:	109df704 	addi	r2,r2,30684
 10139dc:	20800815 	stw	r2,32(r4)
 10139e0:	00c04074 	movhi	r3,257
 10139e4:	18ddd804 	addi	r3,r3,30560
 10139e8:	00804074 	movhi	r2,257
 10139ec:	109dbe04 	addi	r2,r2,30456
 10139f0:	2140030d 	sth	r5,12(r4)
 10139f4:	2180038d 	sth	r6,14(r4)
 10139f8:	20c00915 	stw	r3,36(r4)
 10139fc:	20800a15 	stw	r2,40(r4)
 1013a00:	20000015 	stw	zero,0(r4)
 1013a04:	20000115 	stw	zero,4(r4)
 1013a08:	20000215 	stw	zero,8(r4)
 1013a0c:	20000415 	stw	zero,16(r4)
 1013a10:	20000515 	stw	zero,20(r4)
 1013a14:	20000615 	stw	zero,24(r4)
 1013a18:	21000715 	stw	r4,28(r4)
 1013a1c:	f800283a 	ret

01013a20 <__sfp_lock_acquire>:
 1013a20:	f800283a 	ret

01013a24 <__sfp_lock_release>:
 1013a24:	f800283a 	ret

01013a28 <__sinit_lock_acquire>:
 1013a28:	f800283a 	ret

01013a2c <__sinit_lock_release>:
 1013a2c:	f800283a 	ret

01013a30 <__sinit>:
 1013a30:	20800e17 	ldw	r2,56(r4)
 1013a34:	defffd04 	addi	sp,sp,-12
 1013a38:	dc400115 	stw	r17,4(sp)
 1013a3c:	dc000015 	stw	r16,0(sp)
 1013a40:	dfc00215 	stw	ra,8(sp)
 1013a44:	04400044 	movi	r17,1
 1013a48:	01400104 	movi	r5,4
 1013a4c:	000d883a 	mov	r6,zero
 1013a50:	2021883a 	mov	r16,r4
 1013a54:	2200bb04 	addi	r8,r4,748
 1013a58:	200f883a 	mov	r7,r4
 1013a5c:	10000526 	beq	r2,zero,1013a74 <__sinit+0x44>
 1013a60:	dfc00217 	ldw	ra,8(sp)
 1013a64:	dc400117 	ldw	r17,4(sp)
 1013a68:	dc000017 	ldw	r16,0(sp)
 1013a6c:	dec00304 	addi	sp,sp,12
 1013a70:	f800283a 	ret
 1013a74:	21000117 	ldw	r4,4(r4)
 1013a78:	00804074 	movhi	r2,257
 1013a7c:	108ec504 	addi	r2,r2,15124
 1013a80:	00c000c4 	movi	r3,3
 1013a84:	80800f15 	stw	r2,60(r16)
 1013a88:	80c0b915 	stw	r3,740(r16)
 1013a8c:	8200ba15 	stw	r8,744(r16)
 1013a90:	84400e15 	stw	r17,56(r16)
 1013a94:	8000b815 	stw	zero,736(r16)
 1013a98:	10139c80 	call	10139c8 <std>
 1013a9c:	81000217 	ldw	r4,8(r16)
 1013aa0:	880d883a 	mov	r6,r17
 1013aa4:	800f883a 	mov	r7,r16
 1013aa8:	01400284 	movi	r5,10
 1013aac:	10139c80 	call	10139c8 <std>
 1013ab0:	81000317 	ldw	r4,12(r16)
 1013ab4:	800f883a 	mov	r7,r16
 1013ab8:	01400484 	movi	r5,18
 1013abc:	01800084 	movi	r6,2
 1013ac0:	dfc00217 	ldw	ra,8(sp)
 1013ac4:	dc400117 	ldw	r17,4(sp)
 1013ac8:	dc000017 	ldw	r16,0(sp)
 1013acc:	dec00304 	addi	sp,sp,12
 1013ad0:	10139c81 	jmpi	10139c8 <std>

01013ad4 <__fp_lock>:
 1013ad4:	0005883a 	mov	r2,zero
 1013ad8:	f800283a 	ret

01013adc <__fp_unlock>:
 1013adc:	0005883a 	mov	r2,zero
 1013ae0:	f800283a 	ret

01013ae4 <__fp_unlock_all>:
 1013ae4:	008040f4 	movhi	r2,259
 1013ae8:	10a67004 	addi	r2,r2,-26176
 1013aec:	11000017 	ldw	r4,0(r2)
 1013af0:	01404074 	movhi	r5,257
 1013af4:	294eb704 	addi	r5,r5,15068
 1013af8:	101462c1 	jmpi	101462c <_fwalk>

01013afc <__fp_lock_all>:
 1013afc:	008040f4 	movhi	r2,259
 1013b00:	10a67004 	addi	r2,r2,-26176
 1013b04:	11000017 	ldw	r4,0(r2)
 1013b08:	01404074 	movhi	r5,257
 1013b0c:	294eb504 	addi	r5,r5,15060
 1013b10:	101462c1 	jmpi	101462c <_fwalk>

01013b14 <_cleanup_r>:
 1013b14:	01404074 	movhi	r5,257
 1013b18:	295f0d04 	addi	r5,r5,31796
 1013b1c:	101462c1 	jmpi	101462c <_fwalk>

01013b20 <_cleanup>:
 1013b20:	008040f4 	movhi	r2,259
 1013b24:	10a67104 	addi	r2,r2,-26172
 1013b28:	11000017 	ldw	r4,0(r2)
 1013b2c:	1013b141 	jmpi	1013b14 <_cleanup_r>

01013b30 <__sfmoreglue>:
 1013b30:	defffc04 	addi	sp,sp,-16
 1013b34:	dc400115 	stw	r17,4(sp)
 1013b38:	2c401724 	muli	r17,r5,92
 1013b3c:	dc800215 	stw	r18,8(sp)
 1013b40:	2825883a 	mov	r18,r5
 1013b44:	89400304 	addi	r5,r17,12
 1013b48:	dc000015 	stw	r16,0(sp)
 1013b4c:	dfc00315 	stw	ra,12(sp)
 1013b50:	10154d00 	call	10154d0 <_malloc_r>
 1013b54:	0021883a 	mov	r16,zero
 1013b58:	880d883a 	mov	r6,r17
 1013b5c:	000b883a 	mov	r5,zero
 1013b60:	10000626 	beq	r2,zero,1013b7c <__sfmoreglue+0x4c>
 1013b64:	11000304 	addi	r4,r2,12
 1013b68:	14800115 	stw	r18,4(r2)
 1013b6c:	10000015 	stw	zero,0(r2)
 1013b70:	11000215 	stw	r4,8(r2)
 1013b74:	1021883a 	mov	r16,r2
 1013b78:	1015dd40 	call	1015dd4 <memset>
 1013b7c:	8005883a 	mov	r2,r16
 1013b80:	dfc00317 	ldw	ra,12(sp)
 1013b84:	dc800217 	ldw	r18,8(sp)
 1013b88:	dc400117 	ldw	r17,4(sp)
 1013b8c:	dc000017 	ldw	r16,0(sp)
 1013b90:	dec00404 	addi	sp,sp,16
 1013b94:	f800283a 	ret

01013b98 <__sfp>:
 1013b98:	defffd04 	addi	sp,sp,-12
 1013b9c:	008040f4 	movhi	r2,259
 1013ba0:	10a67104 	addi	r2,r2,-26172
 1013ba4:	dc000015 	stw	r16,0(sp)
 1013ba8:	14000017 	ldw	r16,0(r2)
 1013bac:	dc400115 	stw	r17,4(sp)
 1013bb0:	dfc00215 	stw	ra,8(sp)
 1013bb4:	80800e17 	ldw	r2,56(r16)
 1013bb8:	2023883a 	mov	r17,r4
 1013bbc:	10002626 	beq	r2,zero,1013c58 <__sfp+0xc0>
 1013bc0:	8400b804 	addi	r16,r16,736
 1013bc4:	80800117 	ldw	r2,4(r16)
 1013bc8:	81000217 	ldw	r4,8(r16)
 1013bcc:	10ffffc4 	addi	r3,r2,-1
 1013bd0:	18000916 	blt	r3,zero,1013bf8 <__sfp+0x60>
 1013bd4:	2080030f 	ldh	r2,12(r4)
 1013bd8:	10000b26 	beq	r2,zero,1013c08 <__sfp+0x70>
 1013bdc:	017fffc4 	movi	r5,-1
 1013be0:	00000206 	br	1013bec <__sfp+0x54>
 1013be4:	2080030f 	ldh	r2,12(r4)
 1013be8:	10000726 	beq	r2,zero,1013c08 <__sfp+0x70>
 1013bec:	18ffffc4 	addi	r3,r3,-1
 1013bf0:	21001704 	addi	r4,r4,92
 1013bf4:	197ffb1e 	bne	r3,r5,1013be4 <__sfp+0x4c>
 1013bf8:	80800017 	ldw	r2,0(r16)
 1013bfc:	10001926 	beq	r2,zero,1013c64 <__sfp+0xcc>
 1013c00:	1021883a 	mov	r16,r2
 1013c04:	003fef06 	br	1013bc4 <__sfp+0x2c>
 1013c08:	00bfffc4 	movi	r2,-1
 1013c0c:	00c00044 	movi	r3,1
 1013c10:	2080038d 	sth	r2,14(r4)
 1013c14:	20c0030d 	sth	r3,12(r4)
 1013c18:	20000015 	stw	zero,0(r4)
 1013c1c:	20000215 	stw	zero,8(r4)
 1013c20:	20000115 	stw	zero,4(r4)
 1013c24:	20000415 	stw	zero,16(r4)
 1013c28:	20000515 	stw	zero,20(r4)
 1013c2c:	20000615 	stw	zero,24(r4)
 1013c30:	20000c15 	stw	zero,48(r4)
 1013c34:	20000d15 	stw	zero,52(r4)
 1013c38:	20001115 	stw	zero,68(r4)
 1013c3c:	20001215 	stw	zero,72(r4)
 1013c40:	2005883a 	mov	r2,r4
 1013c44:	dfc00217 	ldw	ra,8(sp)
 1013c48:	dc400117 	ldw	r17,4(sp)
 1013c4c:	dc000017 	ldw	r16,0(sp)
 1013c50:	dec00304 	addi	sp,sp,12
 1013c54:	f800283a 	ret
 1013c58:	8009883a 	mov	r4,r16
 1013c5c:	1013a300 	call	1013a30 <__sinit>
 1013c60:	003fd706 	br	1013bc0 <__sfp+0x28>
 1013c64:	8809883a 	mov	r4,r17
 1013c68:	01400104 	movi	r5,4
 1013c6c:	1013b300 	call	1013b30 <__sfmoreglue>
 1013c70:	80800015 	stw	r2,0(r16)
 1013c74:	103fe21e 	bne	r2,zero,1013c00 <__sfp+0x68>
 1013c78:	00800304 	movi	r2,12
 1013c7c:	0009883a 	mov	r4,zero
 1013c80:	88800015 	stw	r2,0(r17)
 1013c84:	003fee06 	br	1013c40 <__sfp+0xa8>

01013c88 <_malloc_trim_r>:
 1013c88:	defffb04 	addi	sp,sp,-20
 1013c8c:	dcc00315 	stw	r19,12(sp)
 1013c90:	04c040f4 	movhi	r19,259
 1013c94:	9ce0c904 	addi	r19,r19,-31964
 1013c98:	dc800215 	stw	r18,8(sp)
 1013c9c:	dc400115 	stw	r17,4(sp)
 1013ca0:	dc000015 	stw	r16,0(sp)
 1013ca4:	2823883a 	mov	r17,r5
 1013ca8:	2025883a 	mov	r18,r4
 1013cac:	dfc00415 	stw	ra,16(sp)
 1013cb0:	10194640 	call	1019464 <__malloc_lock>
 1013cb4:	98800217 	ldw	r2,8(r19)
 1013cb8:	9009883a 	mov	r4,r18
 1013cbc:	000b883a 	mov	r5,zero
 1013cc0:	10c00117 	ldw	r3,4(r2)
 1013cc4:	00bfff04 	movi	r2,-4
 1013cc8:	18a0703a 	and	r16,r3,r2
 1013ccc:	8463c83a 	sub	r17,r16,r17
 1013cd0:	8c43fbc4 	addi	r17,r17,4079
 1013cd4:	8822d33a 	srli	r17,r17,12
 1013cd8:	0083ffc4 	movi	r2,4095
 1013cdc:	8c7fffc4 	addi	r17,r17,-1
 1013ce0:	8822933a 	slli	r17,r17,12
 1013ce4:	1440060e 	bge	r2,r17,1013d00 <_malloc_trim_r+0x78>
 1013ce8:	10176800 	call	1017680 <_sbrk_r>
 1013cec:	98c00217 	ldw	r3,8(r19)
 1013cf0:	9009883a 	mov	r4,r18
 1013cf4:	044bc83a 	sub	r5,zero,r17
 1013cf8:	80c7883a 	add	r3,r16,r3
 1013cfc:	10c00926 	beq	r2,r3,1013d24 <_malloc_trim_r+0x9c>
 1013d00:	10194840 	call	1019484 <__malloc_unlock>
 1013d04:	0005883a 	mov	r2,zero
 1013d08:	dfc00417 	ldw	ra,16(sp)
 1013d0c:	dcc00317 	ldw	r19,12(sp)
 1013d10:	dc800217 	ldw	r18,8(sp)
 1013d14:	dc400117 	ldw	r17,4(sp)
 1013d18:	dc000017 	ldw	r16,0(sp)
 1013d1c:	dec00504 	addi	sp,sp,20
 1013d20:	f800283a 	ret
 1013d24:	9009883a 	mov	r4,r18
 1013d28:	10176800 	call	1017680 <_sbrk_r>
 1013d2c:	844dc83a 	sub	r6,r16,r17
 1013d30:	00ffffc4 	movi	r3,-1
 1013d34:	9009883a 	mov	r4,r18
 1013d38:	000b883a 	mov	r5,zero
 1013d3c:	01c040f4 	movhi	r7,259
 1013d40:	39edc204 	addi	r7,r7,-18680
 1013d44:	31800054 	ori	r6,r6,1
 1013d48:	10c00926 	beq	r2,r3,1013d70 <_malloc_trim_r+0xe8>
 1013d4c:	38800017 	ldw	r2,0(r7)
 1013d50:	98c00217 	ldw	r3,8(r19)
 1013d54:	9009883a 	mov	r4,r18
 1013d58:	1445c83a 	sub	r2,r2,r17
 1013d5c:	38800015 	stw	r2,0(r7)
 1013d60:	19800115 	stw	r6,4(r3)
 1013d64:	10194840 	call	1019484 <__malloc_unlock>
 1013d68:	00800044 	movi	r2,1
 1013d6c:	003fe606 	br	1013d08 <_malloc_trim_r+0x80>
 1013d70:	10176800 	call	1017680 <_sbrk_r>
 1013d74:	99800217 	ldw	r6,8(r19)
 1013d78:	100f883a 	mov	r7,r2
 1013d7c:	9009883a 	mov	r4,r18
 1013d80:	1187c83a 	sub	r3,r2,r6
 1013d84:	008003c4 	movi	r2,15
 1013d88:	19400054 	ori	r5,r3,1
 1013d8c:	10ffdc0e 	bge	r2,r3,1013d00 <_malloc_trim_r+0x78>
 1013d90:	008040f4 	movhi	r2,259
 1013d94:	10a67a04 	addi	r2,r2,-26136
 1013d98:	10c00017 	ldw	r3,0(r2)
 1013d9c:	008040f4 	movhi	r2,259
 1013da0:	10adc204 	addi	r2,r2,-18680
 1013da4:	31400115 	stw	r5,4(r6)
 1013da8:	38c7c83a 	sub	r3,r7,r3
 1013dac:	10c00015 	stw	r3,0(r2)
 1013db0:	003fd306 	br	1013d00 <_malloc_trim_r+0x78>

01013db4 <_free_r>:
 1013db4:	defffd04 	addi	sp,sp,-12
 1013db8:	dc400115 	stw	r17,4(sp)
 1013dbc:	dc000015 	stw	r16,0(sp)
 1013dc0:	dfc00215 	stw	ra,8(sp)
 1013dc4:	2821883a 	mov	r16,r5
 1013dc8:	2023883a 	mov	r17,r4
 1013dcc:	28005a26 	beq	r5,zero,1013f38 <_free_r+0x184>
 1013dd0:	10194640 	call	1019464 <__malloc_lock>
 1013dd4:	823ffe04 	addi	r8,r16,-8
 1013dd8:	41400117 	ldw	r5,4(r8)
 1013ddc:	00bfff84 	movi	r2,-2
 1013de0:	028040f4 	movhi	r10,259
 1013de4:	52a0c904 	addi	r10,r10,-31964
 1013de8:	288e703a 	and	r7,r5,r2
 1013dec:	41cd883a 	add	r6,r8,r7
 1013df0:	30c00117 	ldw	r3,4(r6)
 1013df4:	51000217 	ldw	r4,8(r10)
 1013df8:	00bfff04 	movi	r2,-4
 1013dfc:	1892703a 	and	r9,r3,r2
 1013e00:	5017883a 	mov	r11,r10
 1013e04:	31006726 	beq	r6,r4,1013fa4 <_free_r+0x1f0>
 1013e08:	2880004c 	andi	r2,r5,1
 1013e0c:	1005003a 	cmpeq	r2,r2,zero
 1013e10:	32400115 	stw	r9,4(r6)
 1013e14:	10001a1e 	bne	r2,zero,1013e80 <_free_r+0xcc>
 1013e18:	000b883a 	mov	r5,zero
 1013e1c:	3247883a 	add	r3,r6,r9
 1013e20:	18800117 	ldw	r2,4(r3)
 1013e24:	1080004c 	andi	r2,r2,1
 1013e28:	1000231e 	bne	r2,zero,1013eb8 <_free_r+0x104>
 1013e2c:	280ac03a 	cmpne	r5,r5,zero
 1013e30:	3a4f883a 	add	r7,r7,r9
 1013e34:	2800451e 	bne	r5,zero,1013f4c <_free_r+0x198>
 1013e38:	31000217 	ldw	r4,8(r6)
 1013e3c:	008040f4 	movhi	r2,259
 1013e40:	10a0cb04 	addi	r2,r2,-31956
 1013e44:	20807b26 	beq	r4,r2,1014034 <_free_r+0x280>
 1013e48:	30800317 	ldw	r2,12(r6)
 1013e4c:	3a07883a 	add	r3,r7,r8
 1013e50:	19c00015 	stw	r7,0(r3)
 1013e54:	11000215 	stw	r4,8(r2)
 1013e58:	20800315 	stw	r2,12(r4)
 1013e5c:	38800054 	ori	r2,r7,1
 1013e60:	40800115 	stw	r2,4(r8)
 1013e64:	28001a26 	beq	r5,zero,1013ed0 <_free_r+0x11c>
 1013e68:	8809883a 	mov	r4,r17
 1013e6c:	dfc00217 	ldw	ra,8(sp)
 1013e70:	dc400117 	ldw	r17,4(sp)
 1013e74:	dc000017 	ldw	r16,0(sp)
 1013e78:	dec00304 	addi	sp,sp,12
 1013e7c:	10194841 	jmpi	1019484 <__malloc_unlock>
 1013e80:	80bffe17 	ldw	r2,-8(r16)
 1013e84:	50c00204 	addi	r3,r10,8
 1013e88:	4091c83a 	sub	r8,r8,r2
 1013e8c:	41000217 	ldw	r4,8(r8)
 1013e90:	388f883a 	add	r7,r7,r2
 1013e94:	20c06126 	beq	r4,r3,101401c <_free_r+0x268>
 1013e98:	40800317 	ldw	r2,12(r8)
 1013e9c:	3247883a 	add	r3,r6,r9
 1013ea0:	000b883a 	mov	r5,zero
 1013ea4:	11000215 	stw	r4,8(r2)
 1013ea8:	20800315 	stw	r2,12(r4)
 1013eac:	18800117 	ldw	r2,4(r3)
 1013eb0:	1080004c 	andi	r2,r2,1
 1013eb4:	103fdd26 	beq	r2,zero,1013e2c <_free_r+0x78>
 1013eb8:	38800054 	ori	r2,r7,1
 1013ebc:	3a07883a 	add	r3,r7,r8
 1013ec0:	280ac03a 	cmpne	r5,r5,zero
 1013ec4:	40800115 	stw	r2,4(r8)
 1013ec8:	19c00015 	stw	r7,0(r3)
 1013ecc:	283fe61e 	bne	r5,zero,1013e68 <_free_r+0xb4>
 1013ed0:	00807fc4 	movi	r2,511
 1013ed4:	11c01f2e 	bgeu	r2,r7,1013f54 <_free_r+0x1a0>
 1013ed8:	3806d27a 	srli	r3,r7,9
 1013edc:	1800481e 	bne	r3,zero,1014000 <_free_r+0x24c>
 1013ee0:	3804d0fa 	srli	r2,r7,3
 1013ee4:	100690fa 	slli	r3,r2,3
 1013ee8:	1acd883a 	add	r6,r3,r11
 1013eec:	31400217 	ldw	r5,8(r6)
 1013ef0:	31405926 	beq	r6,r5,1014058 <_free_r+0x2a4>
 1013ef4:	28800117 	ldw	r2,4(r5)
 1013ef8:	00ffff04 	movi	r3,-4
 1013efc:	10c4703a 	and	r2,r2,r3
 1013f00:	3880022e 	bgeu	r7,r2,1013f0c <_free_r+0x158>
 1013f04:	29400217 	ldw	r5,8(r5)
 1013f08:	317ffa1e 	bne	r6,r5,1013ef4 <_free_r+0x140>
 1013f0c:	29800317 	ldw	r6,12(r5)
 1013f10:	41800315 	stw	r6,12(r8)
 1013f14:	41400215 	stw	r5,8(r8)
 1013f18:	8809883a 	mov	r4,r17
 1013f1c:	2a000315 	stw	r8,12(r5)
 1013f20:	32000215 	stw	r8,8(r6)
 1013f24:	dfc00217 	ldw	ra,8(sp)
 1013f28:	dc400117 	ldw	r17,4(sp)
 1013f2c:	dc000017 	ldw	r16,0(sp)
 1013f30:	dec00304 	addi	sp,sp,12
 1013f34:	10194841 	jmpi	1019484 <__malloc_unlock>
 1013f38:	dfc00217 	ldw	ra,8(sp)
 1013f3c:	dc400117 	ldw	r17,4(sp)
 1013f40:	dc000017 	ldw	r16,0(sp)
 1013f44:	dec00304 	addi	sp,sp,12
 1013f48:	f800283a 	ret
 1013f4c:	31000217 	ldw	r4,8(r6)
 1013f50:	003fbd06 	br	1013e48 <_free_r+0x94>
 1013f54:	3806d0fa 	srli	r3,r7,3
 1013f58:	00800044 	movi	r2,1
 1013f5c:	51400117 	ldw	r5,4(r10)
 1013f60:	180890fa 	slli	r4,r3,3
 1013f64:	1807d0ba 	srai	r3,r3,2
 1013f68:	22c9883a 	add	r4,r4,r11
 1013f6c:	21800217 	ldw	r6,8(r4)
 1013f70:	10c4983a 	sll	r2,r2,r3
 1013f74:	41000315 	stw	r4,12(r8)
 1013f78:	41800215 	stw	r6,8(r8)
 1013f7c:	288ab03a 	or	r5,r5,r2
 1013f80:	22000215 	stw	r8,8(r4)
 1013f84:	8809883a 	mov	r4,r17
 1013f88:	51400115 	stw	r5,4(r10)
 1013f8c:	32000315 	stw	r8,12(r6)
 1013f90:	dfc00217 	ldw	ra,8(sp)
 1013f94:	dc400117 	ldw	r17,4(sp)
 1013f98:	dc000017 	ldw	r16,0(sp)
 1013f9c:	dec00304 	addi	sp,sp,12
 1013fa0:	10194841 	jmpi	1019484 <__malloc_unlock>
 1013fa4:	2880004c 	andi	r2,r5,1
 1013fa8:	3a4d883a 	add	r6,r7,r9
 1013fac:	1000071e 	bne	r2,zero,1013fcc <_free_r+0x218>
 1013fb0:	80bffe17 	ldw	r2,-8(r16)
 1013fb4:	4091c83a 	sub	r8,r8,r2
 1013fb8:	41000317 	ldw	r4,12(r8)
 1013fbc:	40c00217 	ldw	r3,8(r8)
 1013fc0:	308d883a 	add	r6,r6,r2
 1013fc4:	20c00215 	stw	r3,8(r4)
 1013fc8:	19000315 	stw	r4,12(r3)
 1013fcc:	008040f4 	movhi	r2,259
 1013fd0:	10a67904 	addi	r2,r2,-26140
 1013fd4:	11000017 	ldw	r4,0(r2)
 1013fd8:	30c00054 	ori	r3,r6,1
 1013fdc:	52000215 	stw	r8,8(r10)
 1013fe0:	40c00115 	stw	r3,4(r8)
 1013fe4:	313fa036 	bltu	r6,r4,1013e68 <_free_r+0xb4>
 1013fe8:	008040f4 	movhi	r2,259
 1013fec:	10ad7904 	addi	r2,r2,-18972
 1013ff0:	11400017 	ldw	r5,0(r2)
 1013ff4:	8809883a 	mov	r4,r17
 1013ff8:	1013c880 	call	1013c88 <_malloc_trim_r>
 1013ffc:	003f9a06 	br	1013e68 <_free_r+0xb4>
 1014000:	00800104 	movi	r2,4
 1014004:	10c0072e 	bgeu	r2,r3,1014024 <_free_r+0x270>
 1014008:	00800504 	movi	r2,20
 101400c:	10c01936 	bltu	r2,r3,1014074 <_free_r+0x2c0>
 1014010:	188016c4 	addi	r2,r3,91
 1014014:	100690fa 	slli	r3,r2,3
 1014018:	003fb306 	br	1013ee8 <_free_r+0x134>
 101401c:	01400044 	movi	r5,1
 1014020:	003f7e06 	br	1013e1c <_free_r+0x68>
 1014024:	3804d1ba 	srli	r2,r7,6
 1014028:	10800e04 	addi	r2,r2,56
 101402c:	100690fa 	slli	r3,r2,3
 1014030:	003fad06 	br	1013ee8 <_free_r+0x134>
 1014034:	22000315 	stw	r8,12(r4)
 1014038:	22000215 	stw	r8,8(r4)
 101403c:	3a05883a 	add	r2,r7,r8
 1014040:	38c00054 	ori	r3,r7,1
 1014044:	11c00015 	stw	r7,0(r2)
 1014048:	41000215 	stw	r4,8(r8)
 101404c:	40c00115 	stw	r3,4(r8)
 1014050:	41000315 	stw	r4,12(r8)
 1014054:	003f8406 	br	1013e68 <_free_r+0xb4>
 1014058:	1005d0ba 	srai	r2,r2,2
 101405c:	00c00044 	movi	r3,1
 1014060:	51000117 	ldw	r4,4(r10)
 1014064:	1886983a 	sll	r3,r3,r2
 1014068:	20c8b03a 	or	r4,r4,r3
 101406c:	51000115 	stw	r4,4(r10)
 1014070:	003fa706 	br	1013f10 <_free_r+0x15c>
 1014074:	00801504 	movi	r2,84
 1014078:	10c00436 	bltu	r2,r3,101408c <_free_r+0x2d8>
 101407c:	3804d33a 	srli	r2,r7,12
 1014080:	10801b84 	addi	r2,r2,110
 1014084:	100690fa 	slli	r3,r2,3
 1014088:	003f9706 	br	1013ee8 <_free_r+0x134>
 101408c:	00805504 	movi	r2,340
 1014090:	10c00436 	bltu	r2,r3,10140a4 <_free_r+0x2f0>
 1014094:	3804d3fa 	srli	r2,r7,15
 1014098:	10801dc4 	addi	r2,r2,119
 101409c:	100690fa 	slli	r3,r2,3
 10140a0:	003f9106 	br	1013ee8 <_free_r+0x134>
 10140a4:	00815504 	movi	r2,1364
 10140a8:	10c0032e 	bgeu	r2,r3,10140b8 <_free_r+0x304>
 10140ac:	00801f84 	movi	r2,126
 10140b0:	00c0fc04 	movi	r3,1008
 10140b4:	003f8c06 	br	1013ee8 <_free_r+0x134>
 10140b8:	3804d4ba 	srli	r2,r7,18
 10140bc:	10801f04 	addi	r2,r2,124
 10140c0:	100690fa 	slli	r3,r2,3
 10140c4:	003f8806 	br	1013ee8 <_free_r+0x134>

010140c8 <__sfvwrite_r>:
 10140c8:	30800217 	ldw	r2,8(r6)
 10140cc:	defff504 	addi	sp,sp,-44
 10140d0:	df000915 	stw	fp,36(sp)
 10140d4:	dd800715 	stw	r22,28(sp)
 10140d8:	dc800315 	stw	r18,12(sp)
 10140dc:	dfc00a15 	stw	ra,40(sp)
 10140e0:	ddc00815 	stw	r23,32(sp)
 10140e4:	dd400615 	stw	r21,24(sp)
 10140e8:	dd000515 	stw	r20,20(sp)
 10140ec:	dcc00415 	stw	r19,16(sp)
 10140f0:	dc400215 	stw	r17,8(sp)
 10140f4:	dc000115 	stw	r16,4(sp)
 10140f8:	302d883a 	mov	r22,r6
 10140fc:	2039883a 	mov	fp,r4
 1014100:	2825883a 	mov	r18,r5
 1014104:	10001c26 	beq	r2,zero,1014178 <__sfvwrite_r+0xb0>
 1014108:	29c0030b 	ldhu	r7,12(r5)
 101410c:	3880020c 	andi	r2,r7,8
 1014110:	10002726 	beq	r2,zero,10141b0 <__sfvwrite_r+0xe8>
 1014114:	28800417 	ldw	r2,16(r5)
 1014118:	10002526 	beq	r2,zero,10141b0 <__sfvwrite_r+0xe8>
 101411c:	3880008c 	andi	r2,r7,2
 1014120:	b5400017 	ldw	r21,0(r22)
 1014124:	10002826 	beq	r2,zero,10141c8 <__sfvwrite_r+0x100>
 1014128:	0021883a 	mov	r16,zero
 101412c:	0023883a 	mov	r17,zero
 1014130:	880d883a 	mov	r6,r17
 1014134:	e009883a 	mov	r4,fp
 1014138:	00810004 	movi	r2,1024
 101413c:	80006e26 	beq	r16,zero,10142f8 <__sfvwrite_r+0x230>
 1014140:	800f883a 	mov	r7,r16
 1014144:	91400717 	ldw	r5,28(r18)
 1014148:	1400012e 	bgeu	r2,r16,1014150 <__sfvwrite_r+0x88>
 101414c:	100f883a 	mov	r7,r2
 1014150:	90c00917 	ldw	r3,36(r18)
 1014154:	183ee83a 	callr	r3
 1014158:	1007883a 	mov	r3,r2
 101415c:	80a1c83a 	sub	r16,r16,r2
 1014160:	88a3883a 	add	r17,r17,r2
 1014164:	00806d0e 	bge	zero,r2,101431c <__sfvwrite_r+0x254>
 1014168:	b0800217 	ldw	r2,8(r22)
 101416c:	10c5c83a 	sub	r2,r2,r3
 1014170:	b0800215 	stw	r2,8(r22)
 1014174:	103fee1e 	bne	r2,zero,1014130 <__sfvwrite_r+0x68>
 1014178:	0009883a 	mov	r4,zero
 101417c:	2005883a 	mov	r2,r4
 1014180:	dfc00a17 	ldw	ra,40(sp)
 1014184:	df000917 	ldw	fp,36(sp)
 1014188:	ddc00817 	ldw	r23,32(sp)
 101418c:	dd800717 	ldw	r22,28(sp)
 1014190:	dd400617 	ldw	r21,24(sp)
 1014194:	dd000517 	ldw	r20,20(sp)
 1014198:	dcc00417 	ldw	r19,16(sp)
 101419c:	dc800317 	ldw	r18,12(sp)
 10141a0:	dc400217 	ldw	r17,8(sp)
 10141a4:	dc000117 	ldw	r16,4(sp)
 10141a8:	dec00b04 	addi	sp,sp,44
 10141ac:	f800283a 	ret
 10141b0:	1011e900 	call	1011e90 <__swsetup_r>
 10141b4:	1000e41e 	bne	r2,zero,1014548 <__sfvwrite_r+0x480>
 10141b8:	91c0030b 	ldhu	r7,12(r18)
 10141bc:	b5400017 	ldw	r21,0(r22)
 10141c0:	3880008c 	andi	r2,r7,2
 10141c4:	103fd81e 	bne	r2,zero,1014128 <__sfvwrite_r+0x60>
 10141c8:	3880004c 	andi	r2,r7,1
 10141cc:	1005003a 	cmpeq	r2,r2,zero
 10141d0:	10005726 	beq	r2,zero,1014330 <__sfvwrite_r+0x268>
 10141d4:	0029883a 	mov	r20,zero
 10141d8:	002f883a 	mov	r23,zero
 10141dc:	a0004226 	beq	r20,zero,10142e8 <__sfvwrite_r+0x220>
 10141e0:	3880800c 	andi	r2,r7,512
 10141e4:	94000217 	ldw	r16,8(r18)
 10141e8:	10008b26 	beq	r2,zero,1014418 <__sfvwrite_r+0x350>
 10141ec:	800d883a 	mov	r6,r16
 10141f0:	a400a536 	bltu	r20,r16,1014488 <__sfvwrite_r+0x3c0>
 10141f4:	3881200c 	andi	r2,r7,1152
 10141f8:	10002726 	beq	r2,zero,1014298 <__sfvwrite_r+0x1d0>
 10141fc:	90800517 	ldw	r2,20(r18)
 1014200:	92000417 	ldw	r8,16(r18)
 1014204:	91400017 	ldw	r5,0(r18)
 1014208:	1087883a 	add	r3,r2,r2
 101420c:	1887883a 	add	r3,r3,r2
 1014210:	1808d7fa 	srli	r4,r3,31
 1014214:	2a21c83a 	sub	r16,r5,r8
 1014218:	80800044 	addi	r2,r16,1
 101421c:	20c9883a 	add	r4,r4,r3
 1014220:	2027d07a 	srai	r19,r4,1
 1014224:	a085883a 	add	r2,r20,r2
 1014228:	980d883a 	mov	r6,r19
 101422c:	9880022e 	bgeu	r19,r2,1014238 <__sfvwrite_r+0x170>
 1014230:	1027883a 	mov	r19,r2
 1014234:	100d883a 	mov	r6,r2
 1014238:	3881000c 	andi	r2,r7,1024
 101423c:	1000b826 	beq	r2,zero,1014520 <__sfvwrite_r+0x458>
 1014240:	300b883a 	mov	r5,r6
 1014244:	e009883a 	mov	r4,fp
 1014248:	10154d00 	call	10154d0 <_malloc_r>
 101424c:	10003126 	beq	r2,zero,1014314 <__sfvwrite_r+0x24c>
 1014250:	91400417 	ldw	r5,16(r18)
 1014254:	1009883a 	mov	r4,r2
 1014258:	800d883a 	mov	r6,r16
 101425c:	1023883a 	mov	r17,r2
 1014260:	100d7500 	call	100d750 <memcpy>
 1014264:	90c0030b 	ldhu	r3,12(r18)
 1014268:	00beffc4 	movi	r2,-1025
 101426c:	1886703a 	and	r3,r3,r2
 1014270:	18c02014 	ori	r3,r3,128
 1014274:	90c0030d 	sth	r3,12(r18)
 1014278:	9c07c83a 	sub	r3,r19,r16
 101427c:	8c05883a 	add	r2,r17,r16
 1014280:	a00d883a 	mov	r6,r20
 1014284:	a021883a 	mov	r16,r20
 1014288:	90800015 	stw	r2,0(r18)
 101428c:	90c00215 	stw	r3,8(r18)
 1014290:	94400415 	stw	r17,16(r18)
 1014294:	94c00515 	stw	r19,20(r18)
 1014298:	91000017 	ldw	r4,0(r18)
 101429c:	b80b883a 	mov	r5,r23
 10142a0:	a023883a 	mov	r17,r20
 10142a4:	1015cf40 	call	1015cf4 <memmove>
 10142a8:	90c00217 	ldw	r3,8(r18)
 10142ac:	90800017 	ldw	r2,0(r18)
 10142b0:	a027883a 	mov	r19,r20
 10142b4:	1c07c83a 	sub	r3,r3,r16
 10142b8:	1405883a 	add	r2,r2,r16
 10142bc:	90c00215 	stw	r3,8(r18)
 10142c0:	a021883a 	mov	r16,r20
 10142c4:	90800015 	stw	r2,0(r18)
 10142c8:	b0800217 	ldw	r2,8(r22)
 10142cc:	1405c83a 	sub	r2,r2,r16
 10142d0:	b0800215 	stw	r2,8(r22)
 10142d4:	103fa826 	beq	r2,zero,1014178 <__sfvwrite_r+0xb0>
 10142d8:	a469c83a 	sub	r20,r20,r17
 10142dc:	91c0030b 	ldhu	r7,12(r18)
 10142e0:	bcef883a 	add	r23,r23,r19
 10142e4:	a03fbe1e 	bne	r20,zero,10141e0 <__sfvwrite_r+0x118>
 10142e8:	adc00017 	ldw	r23,0(r21)
 10142ec:	ad000117 	ldw	r20,4(r21)
 10142f0:	ad400204 	addi	r21,r21,8
 10142f4:	003fb906 	br	10141dc <__sfvwrite_r+0x114>
 10142f8:	ac400017 	ldw	r17,0(r21)
 10142fc:	ac000117 	ldw	r16,4(r21)
 1014300:	ad400204 	addi	r21,r21,8
 1014304:	003f8a06 	br	1014130 <__sfvwrite_r+0x68>
 1014308:	91400417 	ldw	r5,16(r18)
 101430c:	e009883a 	mov	r4,fp
 1014310:	1013db40 	call	1013db4 <_free_r>
 1014314:	00800304 	movi	r2,12
 1014318:	e0800015 	stw	r2,0(fp)
 101431c:	9080030b 	ldhu	r2,12(r18)
 1014320:	013fffc4 	movi	r4,-1
 1014324:	10801014 	ori	r2,r2,64
 1014328:	9080030d 	sth	r2,12(r18)
 101432c:	003f9306 	br	101417c <__sfvwrite_r+0xb4>
 1014330:	0027883a 	mov	r19,zero
 1014334:	002f883a 	mov	r23,zero
 1014338:	d8000015 	stw	zero,0(sp)
 101433c:	0029883a 	mov	r20,zero
 1014340:	98001e26 	beq	r19,zero,10143bc <__sfvwrite_r+0x2f4>
 1014344:	d8c00017 	ldw	r3,0(sp)
 1014348:	1804c03a 	cmpne	r2,r3,zero
 101434c:	10005e26 	beq	r2,zero,10144c8 <__sfvwrite_r+0x400>
 1014350:	9821883a 	mov	r16,r19
 1014354:	a4c0012e 	bgeu	r20,r19,101435c <__sfvwrite_r+0x294>
 1014358:	a021883a 	mov	r16,r20
 101435c:	91000017 	ldw	r4,0(r18)
 1014360:	90800417 	ldw	r2,16(r18)
 1014364:	91800217 	ldw	r6,8(r18)
 1014368:	91c00517 	ldw	r7,20(r18)
 101436c:	1100022e 	bgeu	r2,r4,1014378 <__sfvwrite_r+0x2b0>
 1014370:	31e3883a 	add	r17,r6,r7
 1014374:	8c001616 	blt	r17,r16,10143d0 <__sfvwrite_r+0x308>
 1014378:	81c03816 	blt	r16,r7,101445c <__sfvwrite_r+0x394>
 101437c:	90c00917 	ldw	r3,36(r18)
 1014380:	91400717 	ldw	r5,28(r18)
 1014384:	e009883a 	mov	r4,fp
 1014388:	b80d883a 	mov	r6,r23
 101438c:	183ee83a 	callr	r3
 1014390:	1023883a 	mov	r17,r2
 1014394:	00bfe10e 	bge	zero,r2,101431c <__sfvwrite_r+0x254>
 1014398:	a469c83a 	sub	r20,r20,r17
 101439c:	a0001826 	beq	r20,zero,1014400 <__sfvwrite_r+0x338>
 10143a0:	b0800217 	ldw	r2,8(r22)
 10143a4:	1445c83a 	sub	r2,r2,r17
 10143a8:	b0800215 	stw	r2,8(r22)
 10143ac:	103f7226 	beq	r2,zero,1014178 <__sfvwrite_r+0xb0>
 10143b0:	9c67c83a 	sub	r19,r19,r17
 10143b4:	bc6f883a 	add	r23,r23,r17
 10143b8:	983fe21e 	bne	r19,zero,1014344 <__sfvwrite_r+0x27c>
 10143bc:	adc00017 	ldw	r23,0(r21)
 10143c0:	acc00117 	ldw	r19,4(r21)
 10143c4:	ad400204 	addi	r21,r21,8
 10143c8:	d8000015 	stw	zero,0(sp)
 10143cc:	003fdc06 	br	1014340 <__sfvwrite_r+0x278>
 10143d0:	b80b883a 	mov	r5,r23
 10143d4:	880d883a 	mov	r6,r17
 10143d8:	1015cf40 	call	1015cf4 <memmove>
 10143dc:	90c00017 	ldw	r3,0(r18)
 10143e0:	e009883a 	mov	r4,fp
 10143e4:	900b883a 	mov	r5,r18
 10143e8:	1c47883a 	add	r3,r3,r17
 10143ec:	90c00015 	stw	r3,0(r18)
 10143f0:	10137980 	call	1013798 <_fflush_r>
 10143f4:	103fc91e 	bne	r2,zero,101431c <__sfvwrite_r+0x254>
 10143f8:	a469c83a 	sub	r20,r20,r17
 10143fc:	a03fe81e 	bne	r20,zero,10143a0 <__sfvwrite_r+0x2d8>
 1014400:	e009883a 	mov	r4,fp
 1014404:	900b883a 	mov	r5,r18
 1014408:	10137980 	call	1013798 <_fflush_r>
 101440c:	103fc31e 	bne	r2,zero,101431c <__sfvwrite_r+0x254>
 1014410:	d8000015 	stw	zero,0(sp)
 1014414:	003fe206 	br	10143a0 <__sfvwrite_r+0x2d8>
 1014418:	91000017 	ldw	r4,0(r18)
 101441c:	90800417 	ldw	r2,16(r18)
 1014420:	1100022e 	bgeu	r2,r4,101442c <__sfvwrite_r+0x364>
 1014424:	8023883a 	mov	r17,r16
 1014428:	85003136 	bltu	r16,r20,10144f0 <__sfvwrite_r+0x428>
 101442c:	91c00517 	ldw	r7,20(r18)
 1014430:	a1c01836 	bltu	r20,r7,1014494 <__sfvwrite_r+0x3cc>
 1014434:	90c00917 	ldw	r3,36(r18)
 1014438:	91400717 	ldw	r5,28(r18)
 101443c:	e009883a 	mov	r4,fp
 1014440:	b80d883a 	mov	r6,r23
 1014444:	183ee83a 	callr	r3
 1014448:	1021883a 	mov	r16,r2
 101444c:	00bfb30e 	bge	zero,r2,101431c <__sfvwrite_r+0x254>
 1014450:	1023883a 	mov	r17,r2
 1014454:	1027883a 	mov	r19,r2
 1014458:	003f9b06 	br	10142c8 <__sfvwrite_r+0x200>
 101445c:	b80b883a 	mov	r5,r23
 1014460:	800d883a 	mov	r6,r16
 1014464:	1015cf40 	call	1015cf4 <memmove>
 1014468:	90c00217 	ldw	r3,8(r18)
 101446c:	90800017 	ldw	r2,0(r18)
 1014470:	8023883a 	mov	r17,r16
 1014474:	1c07c83a 	sub	r3,r3,r16
 1014478:	1405883a 	add	r2,r2,r16
 101447c:	90c00215 	stw	r3,8(r18)
 1014480:	90800015 	stw	r2,0(r18)
 1014484:	003fc406 	br	1014398 <__sfvwrite_r+0x2d0>
 1014488:	a00d883a 	mov	r6,r20
 101448c:	a021883a 	mov	r16,r20
 1014490:	003f8106 	br	1014298 <__sfvwrite_r+0x1d0>
 1014494:	b80b883a 	mov	r5,r23
 1014498:	a00d883a 	mov	r6,r20
 101449c:	1015cf40 	call	1015cf4 <memmove>
 10144a0:	90c00217 	ldw	r3,8(r18)
 10144a4:	90800017 	ldw	r2,0(r18)
 10144a8:	a021883a 	mov	r16,r20
 10144ac:	1d07c83a 	sub	r3,r3,r20
 10144b0:	1505883a 	add	r2,r2,r20
 10144b4:	a023883a 	mov	r17,r20
 10144b8:	a027883a 	mov	r19,r20
 10144bc:	90c00215 	stw	r3,8(r18)
 10144c0:	90800015 	stw	r2,0(r18)
 10144c4:	003f8006 	br	10142c8 <__sfvwrite_r+0x200>
 10144c8:	b809883a 	mov	r4,r23
 10144cc:	01400284 	movi	r5,10
 10144d0:	980d883a 	mov	r6,r19
 10144d4:	1015c100 	call	1015c10 <memchr>
 10144d8:	10001726 	beq	r2,zero,1014538 <__sfvwrite_r+0x470>
 10144dc:	15c5c83a 	sub	r2,r2,r23
 10144e0:	15000044 	addi	r20,r2,1
 10144e4:	00800044 	movi	r2,1
 10144e8:	d8800015 	stw	r2,0(sp)
 10144ec:	003f9806 	br	1014350 <__sfvwrite_r+0x288>
 10144f0:	b80b883a 	mov	r5,r23
 10144f4:	800d883a 	mov	r6,r16
 10144f8:	1015cf40 	call	1015cf4 <memmove>
 10144fc:	90c00017 	ldw	r3,0(r18)
 1014500:	e009883a 	mov	r4,fp
 1014504:	900b883a 	mov	r5,r18
 1014508:	1c07883a 	add	r3,r3,r16
 101450c:	90c00015 	stw	r3,0(r18)
 1014510:	8027883a 	mov	r19,r16
 1014514:	10137980 	call	1013798 <_fflush_r>
 1014518:	103f6b26 	beq	r2,zero,10142c8 <__sfvwrite_r+0x200>
 101451c:	003f7f06 	br	101431c <__sfvwrite_r+0x254>
 1014520:	400b883a 	mov	r5,r8
 1014524:	e009883a 	mov	r4,fp
 1014528:	101704c0 	call	101704c <_realloc_r>
 101452c:	103f7626 	beq	r2,zero,1014308 <__sfvwrite_r+0x240>
 1014530:	1023883a 	mov	r17,r2
 1014534:	003f5006 	br	1014278 <__sfvwrite_r+0x1b0>
 1014538:	00c00044 	movi	r3,1
 101453c:	9d000044 	addi	r20,r19,1
 1014540:	d8c00015 	stw	r3,0(sp)
 1014544:	003f8206 	br	1014350 <__sfvwrite_r+0x288>
 1014548:	9080030b 	ldhu	r2,12(r18)
 101454c:	00c00244 	movi	r3,9
 1014550:	013fffc4 	movi	r4,-1
 1014554:	10801014 	ori	r2,r2,64
 1014558:	9080030d 	sth	r2,12(r18)
 101455c:	e0c00015 	stw	r3,0(fp)
 1014560:	003f0606 	br	101417c <__sfvwrite_r+0xb4>

01014564 <_fwalk_reent>:
 1014564:	defff704 	addi	sp,sp,-36
 1014568:	dcc00315 	stw	r19,12(sp)
 101456c:	24c0b804 	addi	r19,r4,736
 1014570:	dd800615 	stw	r22,24(sp)
 1014574:	dd400515 	stw	r21,20(sp)
 1014578:	dfc00815 	stw	ra,32(sp)
 101457c:	ddc00715 	stw	r23,28(sp)
 1014580:	dd000415 	stw	r20,16(sp)
 1014584:	dc800215 	stw	r18,8(sp)
 1014588:	dc400115 	stw	r17,4(sp)
 101458c:	dc000015 	stw	r16,0(sp)
 1014590:	202b883a 	mov	r21,r4
 1014594:	282d883a 	mov	r22,r5
 1014598:	1013a200 	call	1013a20 <__sfp_lock_acquire>
 101459c:	98002126 	beq	r19,zero,1014624 <_fwalk_reent+0xc0>
 10145a0:	002f883a 	mov	r23,zero
 10145a4:	9c800117 	ldw	r18,4(r19)
 10145a8:	9c000217 	ldw	r16,8(r19)
 10145ac:	90bfffc4 	addi	r2,r18,-1
 10145b0:	10000d16 	blt	r2,zero,10145e8 <_fwalk_reent+0x84>
 10145b4:	0023883a 	mov	r17,zero
 10145b8:	053fffc4 	movi	r20,-1
 10145bc:	8080030f 	ldh	r2,12(r16)
 10145c0:	8c400044 	addi	r17,r17,1
 10145c4:	10000626 	beq	r2,zero,10145e0 <_fwalk_reent+0x7c>
 10145c8:	8080038f 	ldh	r2,14(r16)
 10145cc:	800b883a 	mov	r5,r16
 10145d0:	a809883a 	mov	r4,r21
 10145d4:	15000226 	beq	r2,r20,10145e0 <_fwalk_reent+0x7c>
 10145d8:	b03ee83a 	callr	r22
 10145dc:	b8aeb03a 	or	r23,r23,r2
 10145e0:	84001704 	addi	r16,r16,92
 10145e4:	947ff51e 	bne	r18,r17,10145bc <_fwalk_reent+0x58>
 10145e8:	9cc00017 	ldw	r19,0(r19)
 10145ec:	983fed1e 	bne	r19,zero,10145a4 <_fwalk_reent+0x40>
 10145f0:	1013a240 	call	1013a24 <__sfp_lock_release>
 10145f4:	b805883a 	mov	r2,r23
 10145f8:	dfc00817 	ldw	ra,32(sp)
 10145fc:	ddc00717 	ldw	r23,28(sp)
 1014600:	dd800617 	ldw	r22,24(sp)
 1014604:	dd400517 	ldw	r21,20(sp)
 1014608:	dd000417 	ldw	r20,16(sp)
 101460c:	dcc00317 	ldw	r19,12(sp)
 1014610:	dc800217 	ldw	r18,8(sp)
 1014614:	dc400117 	ldw	r17,4(sp)
 1014618:	dc000017 	ldw	r16,0(sp)
 101461c:	dec00904 	addi	sp,sp,36
 1014620:	f800283a 	ret
 1014624:	002f883a 	mov	r23,zero
 1014628:	003ff106 	br	10145f0 <_fwalk_reent+0x8c>

0101462c <_fwalk>:
 101462c:	defff804 	addi	sp,sp,-32
 1014630:	dcc00315 	stw	r19,12(sp)
 1014634:	24c0b804 	addi	r19,r4,736
 1014638:	dd400515 	stw	r21,20(sp)
 101463c:	dfc00715 	stw	ra,28(sp)
 1014640:	dd800615 	stw	r22,24(sp)
 1014644:	dd000415 	stw	r20,16(sp)
 1014648:	dc800215 	stw	r18,8(sp)
 101464c:	dc400115 	stw	r17,4(sp)
 1014650:	dc000015 	stw	r16,0(sp)
 1014654:	282b883a 	mov	r21,r5
 1014658:	1013a200 	call	1013a20 <__sfp_lock_acquire>
 101465c:	98001f26 	beq	r19,zero,10146dc <_fwalk+0xb0>
 1014660:	002d883a 	mov	r22,zero
 1014664:	9c800117 	ldw	r18,4(r19)
 1014668:	9c000217 	ldw	r16,8(r19)
 101466c:	90bfffc4 	addi	r2,r18,-1
 1014670:	10000c16 	blt	r2,zero,10146a4 <_fwalk+0x78>
 1014674:	0023883a 	mov	r17,zero
 1014678:	053fffc4 	movi	r20,-1
 101467c:	8080030f 	ldh	r2,12(r16)
 1014680:	8c400044 	addi	r17,r17,1
 1014684:	10000526 	beq	r2,zero,101469c <_fwalk+0x70>
 1014688:	8080038f 	ldh	r2,14(r16)
 101468c:	8009883a 	mov	r4,r16
 1014690:	15000226 	beq	r2,r20,101469c <_fwalk+0x70>
 1014694:	a83ee83a 	callr	r21
 1014698:	b0acb03a 	or	r22,r22,r2
 101469c:	84001704 	addi	r16,r16,92
 10146a0:	947ff61e 	bne	r18,r17,101467c <_fwalk+0x50>
 10146a4:	9cc00017 	ldw	r19,0(r19)
 10146a8:	983fee1e 	bne	r19,zero,1014664 <_fwalk+0x38>
 10146ac:	1013a240 	call	1013a24 <__sfp_lock_release>
 10146b0:	b005883a 	mov	r2,r22
 10146b4:	dfc00717 	ldw	ra,28(sp)
 10146b8:	dd800617 	ldw	r22,24(sp)
 10146bc:	dd400517 	ldw	r21,20(sp)
 10146c0:	dd000417 	ldw	r20,16(sp)
 10146c4:	dcc00317 	ldw	r19,12(sp)
 10146c8:	dc800217 	ldw	r18,8(sp)
 10146cc:	dc400117 	ldw	r17,4(sp)
 10146d0:	dc000017 	ldw	r16,0(sp)
 10146d4:	dec00804 	addi	sp,sp,32
 10146d8:	f800283a 	ret
 10146dc:	002d883a 	mov	r22,zero
 10146e0:	003ff206 	br	10146ac <_fwalk+0x80>

010146e4 <htinit>:
 10146e4:	28800003 	ldbu	r2,0(r5)
 10146e8:	10000626 	beq	r2,zero,1014704 <htinit+0x20>
 10146ec:	1105883a 	add	r2,r2,r4
 10146f0:	11800005 	stb	r6,0(r2)
 10146f4:	28800043 	ldbu	r2,1(r5)
 10146f8:	31800044 	addi	r6,r6,1
 10146fc:	29400044 	addi	r5,r5,1
 1014700:	103ffa1e 	bne	r2,zero,10146ec <htinit+0x8>
 1014704:	f800283a 	ret

01014708 <__hexdig_init>:
 1014708:	defffd04 	addi	sp,sp,-12
 101470c:	dc400015 	stw	r17,0(sp)
 1014710:	04404234 	movhi	r17,264
 1014714:	8c6be104 	addi	r17,r17,-20604
 1014718:	dcc00115 	stw	r19,4(sp)
 101471c:	8809883a 	mov	r4,r17
 1014720:	04c00684 	movi	r19,26
 1014724:	014040b4 	movhi	r5,258
 1014728:	295efa04 	addi	r5,r5,31720
 101472c:	01800404 	movi	r6,16
 1014730:	dfc00215 	stw	ra,8(sp)
 1014734:	10146e40 	call	10146e4 <htinit>
 1014738:	980d883a 	mov	r6,r19
 101473c:	8809883a 	mov	r4,r17
 1014740:	014040b4 	movhi	r5,258
 1014744:	295efd04 	addi	r5,r5,31732
 1014748:	10146e40 	call	10146e4 <htinit>
 101474c:	8809883a 	mov	r4,r17
 1014750:	980d883a 	mov	r6,r19
 1014754:	014040b4 	movhi	r5,258
 1014758:	295eff04 	addi	r5,r5,31740
 101475c:	dfc00217 	ldw	ra,8(sp)
 1014760:	dcc00117 	ldw	r19,4(sp)
 1014764:	dc400017 	ldw	r17,0(sp)
 1014768:	dec00304 	addi	sp,sp,12
 101476c:	10146e41 	jmpi	10146e4 <htinit>

01014770 <rshift>:
 1014770:	2807d17a 	srai	r3,r5,5
 1014774:	20800417 	ldw	r2,16(r4)
 1014778:	22400504 	addi	r9,r4,20
 101477c:	480f883a 	mov	r7,r9
 1014780:	1880190e 	bge	r3,r2,10147e8 <rshift+0x78>
 1014784:	1085883a 	add	r2,r2,r2
 1014788:	18c7883a 	add	r3,r3,r3
 101478c:	1085883a 	add	r2,r2,r2
 1014790:	18c7883a 	add	r3,r3,r3
 1014794:	294007cc 	andi	r5,r5,31
 1014798:	4891883a 	add	r8,r9,r2
 101479c:	48cd883a 	add	r6,r9,r3
 10147a0:	28001726 	beq	r5,zero,1014800 <rshift+0x90>
 10147a4:	30c00017 	ldw	r3,0(r6)
 10147a8:	00800804 	movi	r2,32
 10147ac:	31800104 	addi	r6,r6,4
 10147b0:	1155c83a 	sub	r10,r2,r5
 10147b4:	1946d83a 	srl	r3,r3,r5
 10147b8:	3200092e 	bgeu	r6,r8,10147e0 <rshift+0x70>
 10147bc:	30800017 	ldw	r2,0(r6)
 10147c0:	1284983a 	sll	r2,r2,r10
 10147c4:	10c4b03a 	or	r2,r2,r3
 10147c8:	38800015 	stw	r2,0(r7)
 10147cc:	30c00017 	ldw	r3,0(r6)
 10147d0:	31800104 	addi	r6,r6,4
 10147d4:	39c00104 	addi	r7,r7,4
 10147d8:	1946d83a 	srl	r3,r3,r5
 10147dc:	323ff736 	bltu	r6,r8,10147bc <rshift+0x4c>
 10147e0:	38c00015 	stw	r3,0(r7)
 10147e4:	18000c1e 	bne	r3,zero,1014818 <rshift+0xa8>
 10147e8:	3a45c83a 	sub	r2,r7,r9
 10147ec:	1005d0ba 	srai	r2,r2,2
 10147f0:	20800415 	stw	r2,16(r4)
 10147f4:	1000011e 	bne	r2,zero,10147fc <rshift+0x8c>
 10147f8:	20000515 	stw	zero,20(r4)
 10147fc:	f800283a 	ret
 1014800:	323ff92e 	bgeu	r6,r8,10147e8 <rshift+0x78>
 1014804:	30800017 	ldw	r2,0(r6)
 1014808:	31800104 	addi	r6,r6,4
 101480c:	38800015 	stw	r2,0(r7)
 1014810:	39c00104 	addi	r7,r7,4
 1014814:	003ffa06 	br	1014800 <rshift+0x90>
 1014818:	39c00104 	addi	r7,r7,4
 101481c:	003ff206 	br	10147e8 <rshift+0x78>

01014820 <__gethex>:
 1014820:	defff304 	addi	sp,sp,-52
 1014824:	dd400815 	stw	r21,32(sp)
 1014828:	dd000715 	stw	r20,28(sp)
 101482c:	dcc00615 	stw	r19,24(sp)
 1014830:	dc400415 	stw	r17,16(sp)
 1014834:	dfc00c15 	stw	ra,48(sp)
 1014838:	df000b15 	stw	fp,44(sp)
 101483c:	ddc00a15 	stw	r23,40(sp)
 1014840:	dd800915 	stw	r22,36(sp)
 1014844:	dc800515 	stw	r18,20(sp)
 1014848:	dc000315 	stw	r16,12(sp)
 101484c:	04404234 	movhi	r17,264
 1014850:	8c6be104 	addi	r17,r17,-20604
 1014854:	88800c03 	ldbu	r2,48(r17)
 1014858:	202b883a 	mov	r21,r4
 101485c:	2827883a 	mov	r19,r5
 1014860:	3029883a 	mov	r20,r6
 1014864:	d9c00115 	stw	r7,4(sp)
 1014868:	10006e26 	beq	r2,zero,1014a24 <__gethex+0x204>
 101486c:	99800017 	ldw	r6,0(r19)
 1014870:	00800c04 	movi	r2,48
 1014874:	31000083 	ldbu	r4,2(r6)
 1014878:	30c00084 	addi	r3,r6,2
 101487c:	20806f1e 	bne	r4,r2,1014a3c <__gethex+0x21c>
 1014880:	200b883a 	mov	r5,r4
 1014884:	3007883a 	mov	r3,r6
 1014888:	188000c3 	ldbu	r2,3(r3)
 101488c:	18c00044 	addi	r3,r3,1
 1014890:	1009883a 	mov	r4,r2
 1014894:	117ffc26 	beq	r2,r5,1014888 <__gethex+0x68>
 1014898:	1997c83a 	sub	r11,r3,r6
 101489c:	19400084 	addi	r5,r3,2
 10148a0:	2445883a 	add	r2,r4,r17
 10148a4:	10c00003 	ldbu	r3,0(r2)
 10148a8:	18002d26 	beq	r3,zero,1014960 <__gethex+0x140>
 10148ac:	29000003 	ldbu	r4,0(r5)
 10148b0:	2825883a 	mov	r18,r5
 10148b4:	000d883a 	mov	r6,zero
 10148b8:	0013883a 	mov	r9,zero
 10148bc:	21003fcc 	andi	r4,r4,255
 10148c0:	2445883a 	add	r2,r4,r17
 10148c4:	10c00003 	ldbu	r3,0(r2)
 10148c8:	18000526 	beq	r3,zero,10148e0 <__gethex+0xc0>
 10148cc:	29400044 	addi	r5,r5,1
 10148d0:	29000003 	ldbu	r4,0(r5)
 10148d4:	2445883a 	add	r2,r4,r17
 10148d8:	10c00003 	ldbu	r3,0(r2)
 10148dc:	183ffb1e 	bne	r3,zero,10148cc <__gethex+0xac>
 10148e0:	00800b84 	movi	r2,46
 10148e4:	20805826 	beq	r4,r2,1014a48 <__gethex+0x228>
 10148e8:	30007a26 	beq	r6,zero,1014ad4 <__gethex+0x2b4>
 10148ec:	2985c83a 	sub	r2,r5,r6
 10148f0:	1085883a 	add	r2,r2,r2
 10148f4:	1085883a 	add	r2,r2,r2
 10148f8:	00adc83a 	sub	r22,zero,r2
 10148fc:	2821883a 	mov	r16,r5
 1014900:	80c00003 	ldbu	r3,0(r16)
 1014904:	00801404 	movi	r2,80
 1014908:	18801e26 	beq	r3,r2,1014984 <__gethex+0x164>
 101490c:	00801c04 	movi	r2,112
 1014910:	18801c26 	beq	r3,r2,1014984 <__gethex+0x164>
 1014914:	800d883a 	mov	r6,r16
 1014918:	4805003a 	cmpeq	r2,r9,zero
 101491c:	99800015 	stw	r6,0(r19)
 1014920:	1000861e 	bne	r2,zero,1014b3c <__gethex+0x31c>
 1014924:	58003d26 	beq	r11,zero,1014a1c <__gethex+0x1fc>
 1014928:	0025883a 	mov	r18,zero
 101492c:	9005883a 	mov	r2,r18
 1014930:	dfc00c17 	ldw	ra,48(sp)
 1014934:	df000b17 	ldw	fp,44(sp)
 1014938:	ddc00a17 	ldw	r23,40(sp)
 101493c:	dd800917 	ldw	r22,36(sp)
 1014940:	dd400817 	ldw	r21,32(sp)
 1014944:	dd000717 	ldw	r20,28(sp)
 1014948:	dcc00617 	ldw	r19,24(sp)
 101494c:	dc800517 	ldw	r18,20(sp)
 1014950:	dc400417 	ldw	r17,16(sp)
 1014954:	dc000317 	ldw	r16,12(sp)
 1014958:	dec00d04 	addi	sp,sp,52
 101495c:	f800283a 	ret
 1014960:	00800b84 	movi	r2,46
 1014964:	20804a26 	beq	r4,r2,1014a90 <__gethex+0x270>
 1014968:	2821883a 	mov	r16,r5
 101496c:	80c00003 	ldbu	r3,0(r16)
 1014970:	00801404 	movi	r2,80
 1014974:	2825883a 	mov	r18,r5
 1014978:	02400044 	movi	r9,1
 101497c:	002d883a 	mov	r22,zero
 1014980:	18bfe21e 	bne	r3,r2,101490c <__gethex+0xec>
 1014984:	80c00043 	ldbu	r3,1(r16)
 1014988:	00800ac4 	movi	r2,43
 101498c:	81000044 	addi	r4,r16,1
 1014990:	18804a26 	beq	r3,r2,1014abc <__gethex+0x29c>
 1014994:	00800b44 	movi	r2,45
 1014998:	18804c26 	beq	r3,r2,1014acc <__gethex+0x2ac>
 101499c:	0015883a 	mov	r10,zero
 10149a0:	1c45883a 	add	r2,r3,r17
 10149a4:	10800003 	ldbu	r2,0(r2)
 10149a8:	103fda26 	beq	r2,zero,1014914 <__gethex+0xf4>
 10149ac:	02000644 	movi	r8,25
 10149b0:	40bfd816 	blt	r8,r2,1014914 <__gethex+0xf4>
 10149b4:	20c00043 	ldbu	r3,1(r4)
 10149b8:	11fffc04 	addi	r7,r2,-16
 10149bc:	00804234 	movhi	r2,264
 10149c0:	10abe104 	addi	r2,r2,-20604
 10149c4:	1887883a 	add	r3,r3,r2
 10149c8:	18800003 	ldbu	r2,0(r3)
 10149cc:	21800044 	addi	r6,r4,1
 10149d0:	10000d26 	beq	r2,zero,1014a08 <__gethex+0x1e8>
 10149d4:	100b883a 	mov	r5,r2
 10149d8:	4080020e 	bge	r8,r2,10149e4 <__gethex+0x1c4>
 10149dc:	00000a06 	br	1014a08 <__gethex+0x1e8>
 10149e0:	41000916 	blt	r8,r4,1014a08 <__gethex+0x1e8>
 10149e4:	31800044 	addi	r6,r6,1
 10149e8:	30800003 	ldbu	r2,0(r6)
 10149ec:	38c002a4 	muli	r3,r7,10
 10149f0:	1445883a 	add	r2,r2,r17
 10149f4:	11000003 	ldbu	r4,0(r2)
 10149f8:	1947883a 	add	r3,r3,r5
 10149fc:	19fffc04 	addi	r7,r3,-16
 1014a00:	200b883a 	mov	r5,r4
 1014a04:	203ff61e 	bne	r4,zero,10149e0 <__gethex+0x1c0>
 1014a08:	5005003a 	cmpeq	r2,r10,zero
 1014a0c:	1000011e 	bne	r2,zero,1014a14 <__gethex+0x1f4>
 1014a10:	01cfc83a 	sub	r7,zero,r7
 1014a14:	b1ed883a 	add	r22,r22,r7
 1014a18:	003fbf06 	br	1014918 <__gethex+0xf8>
 1014a1c:	04800184 	movi	r18,6
 1014a20:	003fc206 	br	101492c <__gethex+0x10c>
 1014a24:	10147080 	call	1014708 <__hexdig_init>
 1014a28:	99800017 	ldw	r6,0(r19)
 1014a2c:	00800c04 	movi	r2,48
 1014a30:	31000083 	ldbu	r4,2(r6)
 1014a34:	30c00084 	addi	r3,r6,2
 1014a38:	20bf9126 	beq	r4,r2,1014880 <__gethex+0x60>
 1014a3c:	180b883a 	mov	r5,r3
 1014a40:	0017883a 	mov	r11,zero
 1014a44:	003f9606 	br	10148a0 <__gethex+0x80>
 1014a48:	303fa81e 	bne	r6,zero,10148ec <__gethex+0xcc>
 1014a4c:	29400044 	addi	r5,r5,1
 1014a50:	28800003 	ldbu	r2,0(r5)
 1014a54:	1445883a 	add	r2,r2,r17
 1014a58:	10c00003 	ldbu	r3,0(r2)
 1014a5c:	1800ad26 	beq	r3,zero,1014d14 <__gethex+0x4f4>
 1014a60:	2809883a 	mov	r4,r5
 1014a64:	21000044 	addi	r4,r4,1
 1014a68:	20800003 	ldbu	r2,0(r4)
 1014a6c:	1445883a 	add	r2,r2,r17
 1014a70:	10c00003 	ldbu	r3,0(r2)
 1014a74:	183ffb1e 	bne	r3,zero,1014a64 <__gethex+0x244>
 1014a78:	2145c83a 	sub	r2,r4,r5
 1014a7c:	1085883a 	add	r2,r2,r2
 1014a80:	1085883a 	add	r2,r2,r2
 1014a84:	00adc83a 	sub	r22,zero,r2
 1014a88:	200b883a 	mov	r5,r4
 1014a8c:	003f9b06 	br	10148fc <__gethex+0xdc>
 1014a90:	29000043 	ldbu	r4,1(r5)
 1014a94:	00804234 	movhi	r2,264
 1014a98:	10abe104 	addi	r2,r2,-20604
 1014a9c:	2c000044 	addi	r16,r5,1
 1014aa0:	2085883a 	add	r2,r4,r2
 1014aa4:	10c00003 	ldbu	r3,0(r2)
 1014aa8:	18000d1e 	bne	r3,zero,1014ae0 <__gethex+0x2c0>
 1014aac:	2825883a 	mov	r18,r5
 1014ab0:	02400044 	movi	r9,1
 1014ab4:	002d883a 	mov	r22,zero
 1014ab8:	003f9106 	br	1014900 <__gethex+0xe0>
 1014abc:	0015883a 	mov	r10,zero
 1014ac0:	21000044 	addi	r4,r4,1
 1014ac4:	20c00003 	ldbu	r3,0(r4)
 1014ac8:	003fb506 	br	10149a0 <__gethex+0x180>
 1014acc:	02800044 	movi	r10,1
 1014ad0:	003ffb06 	br	1014ac0 <__gethex+0x2a0>
 1014ad4:	2821883a 	mov	r16,r5
 1014ad8:	002d883a 	mov	r22,zero
 1014adc:	003f8806 	br	1014900 <__gethex+0xe0>
 1014ae0:	00800c04 	movi	r2,48
 1014ae4:	20800e1e 	bne	r4,r2,1014b20 <__gethex+0x300>
 1014ae8:	2007883a 	mov	r3,r4
 1014aec:	800b883a 	mov	r5,r16
 1014af0:	29400044 	addi	r5,r5,1
 1014af4:	29000003 	ldbu	r4,0(r5)
 1014af8:	20803fcc 	andi	r2,r4,255
 1014afc:	10fffc26 	beq	r2,r3,1014af0 <__gethex+0x2d0>
 1014b00:	1445883a 	add	r2,r2,r17
 1014b04:	10c00003 	ldbu	r3,0(r2)
 1014b08:	1800071e 	bne	r3,zero,1014b28 <__gethex+0x308>
 1014b0c:	02c00044 	movi	r11,1
 1014b10:	800d883a 	mov	r6,r16
 1014b14:	2825883a 	mov	r18,r5
 1014b18:	5813883a 	mov	r9,r11
 1014b1c:	003f6706 	br	10148bc <__gethex+0x9c>
 1014b20:	81000003 	ldbu	r4,0(r16)
 1014b24:	800b883a 	mov	r5,r16
 1014b28:	800d883a 	mov	r6,r16
 1014b2c:	2825883a 	mov	r18,r5
 1014b30:	02c00044 	movi	r11,1
 1014b34:	0013883a 	mov	r9,zero
 1014b38:	003f6006 	br	10148bc <__gethex+0x9c>
 1014b3c:	8485c83a 	sub	r2,r16,r18
 1014b40:	10bfffc4 	addi	r2,r2,-1
 1014b44:	00c001c4 	movi	r3,7
 1014b48:	1880700e 	bge	r3,r2,1014d0c <__gethex+0x4ec>
 1014b4c:	000b883a 	mov	r5,zero
 1014b50:	1005d07a 	srai	r2,r2,1
 1014b54:	29400044 	addi	r5,r5,1
 1014b58:	18bffd16 	blt	r3,r2,1014b50 <__gethex+0x330>
 1014b5c:	a809883a 	mov	r4,r21
 1014b60:	10163ec0 	call	10163ec <_Balloc>
 1014b64:	1027883a 	mov	r19,r2
 1014b68:	10800504 	addi	r2,r2,20
 1014b6c:	d8800215 	stw	r2,8(sp)
 1014b70:	9400522e 	bgeu	r18,r16,1014cbc <__gethex+0x49c>
 1014b74:	da000217 	ldw	r8,8(sp)
 1014b78:	800b883a 	mov	r5,r16
 1014b7c:	000f883a 	mov	r7,zero
 1014b80:	0009883a 	mov	r4,zero
 1014b84:	02400b84 	movi	r9,46
 1014b88:	02800804 	movi	r10,32
 1014b8c:	297fffc4 	addi	r5,r5,-1
 1014b90:	28c00003 	ldbu	r3,0(r5)
 1014b94:	1a400826 	beq	r3,r9,1014bb8 <__gethex+0x398>
 1014b98:	380d883a 	mov	r6,r7
 1014b9c:	3a802726 	beq	r7,r10,1014c3c <__gethex+0x41c>
 1014ba0:	39c00104 	addi	r7,r7,4
 1014ba4:	1c47883a 	add	r3,r3,r17
 1014ba8:	18800003 	ldbu	r2,0(r3)
 1014bac:	108003cc 	andi	r2,r2,15
 1014bb0:	1184983a 	sll	r2,r2,r6
 1014bb4:	2088b03a 	or	r4,r4,r2
 1014bb8:	917ff436 	bltu	r18,r5,1014b8c <__gethex+0x36c>
 1014bbc:	d8c00217 	ldw	r3,8(sp)
 1014bc0:	40800104 	addi	r2,r8,4
 1014bc4:	41000015 	stw	r4,0(r8)
 1014bc8:	10c5c83a 	sub	r2,r2,r3
 1014bcc:	1021d0ba 	srai	r16,r2,2
 1014bd0:	9c000415 	stw	r16,16(r19)
 1014bd4:	1015e940 	call	1015e94 <__hi0bits>
 1014bd8:	8006917a 	slli	r3,r16,5
 1014bdc:	a5c00017 	ldw	r23,0(r20)
 1014be0:	1885c83a 	sub	r2,r3,r2
 1014be4:	b8801c16 	blt	r23,r2,1014c58 <__gethex+0x438>
 1014be8:	15c00a16 	blt	r2,r23,1014c14 <__gethex+0x3f4>
 1014bec:	0039883a 	mov	fp,zero
 1014bf0:	a0800217 	ldw	r2,8(r20)
 1014bf4:	1580340e 	bge	r2,r22,1014cc8 <__gethex+0x4a8>
 1014bf8:	a809883a 	mov	r4,r21
 1014bfc:	980b883a 	mov	r5,r19
 1014c00:	1015e6c0 	call	1015e6c <_Bfree>
 1014c04:	d8c00d17 	ldw	r3,52(sp)
 1014c08:	048028c4 	movi	r18,163
 1014c0c:	18000015 	stw	zero,0(r3)
 1014c10:	003f4606 	br	101492c <__gethex+0x10c>
 1014c14:	b8a1c83a 	sub	r16,r23,r2
 1014c18:	980b883a 	mov	r5,r19
 1014c1c:	a809883a 	mov	r4,r21
 1014c20:	800d883a 	mov	r6,r16
 1014c24:	10167b00 	call	10167b0 <__lshift>
 1014c28:	1027883a 	mov	r19,r2
 1014c2c:	b42dc83a 	sub	r22,r22,r16
 1014c30:	10800504 	addi	r2,r2,20
 1014c34:	d8800215 	stw	r2,8(sp)
 1014c38:	003fec06 	br	1014bec <__gethex+0x3cc>
 1014c3c:	41000015 	stw	r4,0(r8)
 1014c40:	28c00003 	ldbu	r3,0(r5)
 1014c44:	01c00104 	movi	r7,4
 1014c48:	000d883a 	mov	r6,zero
 1014c4c:	41d1883a 	add	r8,r8,r7
 1014c50:	0009883a 	mov	r4,zero
 1014c54:	003fd306 	br	1014ba4 <__gethex+0x384>
 1014c58:	15e1c83a 	sub	r16,r2,r23
 1014c5c:	9809883a 	mov	r4,r19
 1014c60:	800b883a 	mov	r5,r16
 1014c64:	10163640 	call	1016364 <__any_on>
 1014c68:	1000061e 	bne	r2,zero,1014c84 <__gethex+0x464>
 1014c6c:	0039883a 	mov	fp,zero
 1014c70:	9809883a 	mov	r4,r19
 1014c74:	800b883a 	mov	r5,r16
 1014c78:	10147700 	call	1014770 <rshift>
 1014c7c:	b42d883a 	add	r22,r22,r16
 1014c80:	003fdb06 	br	1014bf0 <__gethex+0x3d0>
 1014c84:	817fffc4 	addi	r5,r16,-1
 1014c88:	2805d17a 	srai	r2,r5,5
 1014c8c:	d8c00217 	ldw	r3,8(sp)
 1014c90:	290007cc 	andi	r4,r5,31
 1014c94:	1085883a 	add	r2,r2,r2
 1014c98:	1085883a 	add	r2,r2,r2
 1014c9c:	01800044 	movi	r6,1
 1014ca0:	10c5883a 	add	r2,r2,r3
 1014ca4:	3108983a 	sll	r4,r6,r4
 1014ca8:	10c00017 	ldw	r3,0(r2)
 1014cac:	20c8703a 	and	r4,r4,r3
 1014cb0:	20001a1e 	bne	r4,zero,1014d1c <__gethex+0x4fc>
 1014cb4:	3039883a 	mov	fp,r6
 1014cb8:	003fed06 	br	1014c70 <__gethex+0x450>
 1014cbc:	1011883a 	mov	r8,r2
 1014cc0:	0009883a 	mov	r4,zero
 1014cc4:	003fbd06 	br	1014bbc <__gethex+0x39c>
 1014cc8:	a1000117 	ldw	r4,4(r20)
 1014ccc:	b1001a16 	blt	r22,r4,1014d38 <__gethex+0x518>
 1014cd0:	04800044 	movi	r18,1
 1014cd4:	e0000826 	beq	fp,zero,1014cf8 <__gethex+0x4d8>
 1014cd8:	a1000317 	ldw	r4,12(r20)
 1014cdc:	00800084 	movi	r2,2
 1014ce0:	20809426 	beq	r4,r2,1014f34 <__gethex+0x714>
 1014ce4:	008000c4 	movi	r2,3
 1014ce8:	20805826 	beq	r4,r2,1014e4c <__gethex+0x62c>
 1014cec:	00800044 	movi	r2,1
 1014cf0:	20803f26 	beq	r4,r2,1014df0 <__gethex+0x5d0>
 1014cf4:	94800414 	ori	r18,r18,16
 1014cf8:	d8800d17 	ldw	r2,52(sp)
 1014cfc:	d8c00117 	ldw	r3,4(sp)
 1014d00:	14c00015 	stw	r19,0(r2)
 1014d04:	1d800015 	stw	r22,0(r3)
 1014d08:	003f0806 	br	101492c <__gethex+0x10c>
 1014d0c:	000b883a 	mov	r5,zero
 1014d10:	003f9206 	br	1014b5c <__gethex+0x33c>
 1014d14:	002d883a 	mov	r22,zero
 1014d18:	003ef806 	br	10148fc <__gethex+0xdc>
 1014d1c:	3140160e 	bge	r6,r5,1014d78 <__gethex+0x558>
 1014d20:	9809883a 	mov	r4,r19
 1014d24:	817fff84 	addi	r5,r16,-2
 1014d28:	10163640 	call	1016364 <__any_on>
 1014d2c:	10001226 	beq	r2,zero,1014d78 <__gethex+0x558>
 1014d30:	070000c4 	movi	fp,3
 1014d34:	003fce06 	br	1014c70 <__gethex+0x450>
 1014d38:	25a3c83a 	sub	r17,r4,r22
 1014d3c:	8dc01016 	blt	r17,r23,1014d80 <__gethex+0x560>
 1014d40:	a0c00317 	ldw	r3,12(r20)
 1014d44:	00800084 	movi	r2,2
 1014d48:	18809326 	beq	r3,r2,1014f98 <__gethex+0x778>
 1014d4c:	008000c4 	movi	r2,3
 1014d50:	18808e26 	beq	r3,r2,1014f8c <__gethex+0x76c>
 1014d54:	00800044 	movi	r2,1
 1014d58:	18807b26 	beq	r3,r2,1014f48 <__gethex+0x728>
 1014d5c:	a809883a 	mov	r4,r21
 1014d60:	980b883a 	mov	r5,r19
 1014d64:	1015e6c0 	call	1015e6c <_Bfree>
 1014d68:	d8c00d17 	ldw	r3,52(sp)
 1014d6c:	04801404 	movi	r18,80
 1014d70:	18000015 	stw	zero,0(r3)
 1014d74:	003eed06 	br	101492c <__gethex+0x10c>
 1014d78:	07000084 	movi	fp,2
 1014d7c:	003fbc06 	br	1014c70 <__gethex+0x450>
 1014d80:	8c3fffc4 	addi	r16,r17,-1
 1014d84:	e0001426 	beq	fp,zero,1014dd8 <__gethex+0x5b8>
 1014d88:	07000044 	movi	fp,1
 1014d8c:	8005d17a 	srai	r2,r16,5
 1014d90:	d8c00217 	ldw	r3,8(sp)
 1014d94:	814007cc 	andi	r5,r16,31
 1014d98:	1085883a 	add	r2,r2,r2
 1014d9c:	1085883a 	add	r2,r2,r2
 1014da0:	10c5883a 	add	r2,r2,r3
 1014da4:	00c00044 	movi	r3,1
 1014da8:	1946983a 	sll	r3,r3,r5
 1014dac:	11000017 	ldw	r4,0(r2)
 1014db0:	1906703a 	and	r3,r3,r4
 1014db4:	18000126 	beq	r3,zero,1014dbc <__gethex+0x59c>
 1014db8:	e7000094 	ori	fp,fp,2
 1014dbc:	880b883a 	mov	r5,r17
 1014dc0:	9809883a 	mov	r4,r19
 1014dc4:	10147700 	call	1014770 <rshift>
 1014dc8:	a5800117 	ldw	r22,4(r20)
 1014dcc:	bc6fc83a 	sub	r23,r23,r17
 1014dd0:	04800084 	movi	r18,2
 1014dd4:	003fbf06 	br	1014cd4 <__gethex+0x4b4>
 1014dd8:	043fec0e 	bge	zero,r16,1014d8c <__gethex+0x56c>
 1014ddc:	9809883a 	mov	r4,r19
 1014de0:	800b883a 	mov	r5,r16
 1014de4:	10163640 	call	1016364 <__any_on>
 1014de8:	1039883a 	mov	fp,r2
 1014dec:	003fe706 	br	1014d8c <__gethex+0x56c>
 1014df0:	e080008c 	andi	r2,fp,2
 1014df4:	103fbf26 	beq	r2,zero,1014cf4 <__gethex+0x4d4>
 1014df8:	d8c00217 	ldw	r3,8(sp)
 1014dfc:	18800017 	ldw	r2,0(r3)
 1014e00:	e084b03a 	or	r2,fp,r2
 1014e04:	1104703a 	and	r2,r2,r4
 1014e08:	103fba26 	beq	r2,zero,1014cf4 <__gethex+0x4d4>
 1014e0c:	9c000417 	ldw	r16,16(r19)
 1014e10:	d8c00217 	ldw	r3,8(sp)
 1014e14:	017fffc4 	movi	r5,-1
 1014e18:	8405883a 	add	r2,r16,r16
 1014e1c:	10b9883a 	add	fp,r2,r2
 1014e20:	1f09883a 	add	r4,r3,fp
 1014e24:	dc000015 	stw	r16,0(sp)
 1014e28:	00000306 	br	1014e38 <__gethex+0x618>
 1014e2c:	18000015 	stw	zero,0(r3)
 1014e30:	18c00104 	addi	r3,r3,4
 1014e34:	1900082e 	bgeu	r3,r4,1014e58 <__gethex+0x638>
 1014e38:	18800017 	ldw	r2,0(r3)
 1014e3c:	117ffb26 	beq	r2,r5,1014e2c <__gethex+0x60c>
 1014e40:	10800044 	addi	r2,r2,1
 1014e44:	18800015 	stw	r2,0(r3)
 1014e48:	00001f06 	br	1014ec8 <__gethex+0x6a8>
 1014e4c:	d8800e17 	ldw	r2,56(sp)
 1014e50:	103fa826 	beq	r2,zero,1014cf4 <__gethex+0x4d4>
 1014e54:	003fed06 	br	1014e0c <__gethex+0x5ec>
 1014e58:	98800217 	ldw	r2,8(r19)
 1014e5c:	80801316 	blt	r16,r2,1014eac <__gethex+0x68c>
 1014e60:	99400117 	ldw	r5,4(r19)
 1014e64:	a809883a 	mov	r4,r21
 1014e68:	29400044 	addi	r5,r5,1
 1014e6c:	10163ec0 	call	10163ec <_Balloc>
 1014e70:	99800417 	ldw	r6,16(r19)
 1014e74:	99400304 	addi	r5,r19,12
 1014e78:	11000304 	addi	r4,r2,12
 1014e7c:	318d883a 	add	r6,r6,r6
 1014e80:	318d883a 	add	r6,r6,r6
 1014e84:	31800204 	addi	r6,r6,8
 1014e88:	1023883a 	mov	r17,r2
 1014e8c:	100d7500 	call	100d750 <memcpy>
 1014e90:	980b883a 	mov	r5,r19
 1014e94:	a809883a 	mov	r4,r21
 1014e98:	1015e6c0 	call	1015e6c <_Bfree>
 1014e9c:	8c000417 	ldw	r16,16(r17)
 1014ea0:	88800504 	addi	r2,r17,20
 1014ea4:	8827883a 	mov	r19,r17
 1014ea8:	d8800215 	stw	r2,8(sp)
 1014eac:	8405883a 	add	r2,r16,r16
 1014eb0:	1085883a 	add	r2,r2,r2
 1014eb4:	14c5883a 	add	r2,r2,r19
 1014eb8:	84000044 	addi	r16,r16,1
 1014ebc:	00c00044 	movi	r3,1
 1014ec0:	10c00515 	stw	r3,20(r2)
 1014ec4:	9c000415 	stw	r16,16(r19)
 1014ec8:	00800084 	movi	r2,2
 1014ecc:	90801426 	beq	r18,r2,1014f20 <__gethex+0x700>
 1014ed0:	d8800017 	ldw	r2,0(sp)
 1014ed4:	14000b16 	blt	r2,r16,1014f04 <__gethex+0x6e4>
 1014ed8:	bc0007cc 	andi	r16,r23,31
 1014edc:	8000021e 	bne	r16,zero,1014ee8 <__gethex+0x6c8>
 1014ee0:	94800814 	ori	r18,r18,32
 1014ee4:	003f8406 	br	1014cf8 <__gethex+0x4d8>
 1014ee8:	d8c00217 	ldw	r3,8(sp)
 1014eec:	1f05883a 	add	r2,r3,fp
 1014ef0:	113fff17 	ldw	r4,-4(r2)
 1014ef4:	1015e940 	call	1015e94 <__hi0bits>
 1014ef8:	00c00804 	movi	r3,32
 1014efc:	1c07c83a 	sub	r3,r3,r16
 1014f00:	10fff70e 	bge	r2,r3,1014ee0 <__gethex+0x6c0>
 1014f04:	9809883a 	mov	r4,r19
 1014f08:	01400044 	movi	r5,1
 1014f0c:	10147700 	call	1014770 <rshift>
 1014f10:	a0800217 	ldw	r2,8(r20)
 1014f14:	b5800044 	addi	r22,r22,1
 1014f18:	15bf3716 	blt	r2,r22,1014bf8 <__gethex+0x3d8>
 1014f1c:	003ff006 	br	1014ee0 <__gethex+0x6c0>
 1014f20:	a0800017 	ldw	r2,0(r20)
 1014f24:	10bfffc4 	addi	r2,r2,-1
 1014f28:	b8801e26 	beq	r23,r2,1014fa4 <__gethex+0x784>
 1014f2c:	04800884 	movi	r18,34
 1014f30:	003f7106 	br	1014cf8 <__gethex+0x4d8>
 1014f34:	d8c00e17 	ldw	r3,56(sp)
 1014f38:	00800044 	movi	r2,1
 1014f3c:	10c5c83a 	sub	r2,r2,r3
 1014f40:	103f6c26 	beq	r2,zero,1014cf4 <__gethex+0x4d4>
 1014f44:	003fb106 	br	1014e0c <__gethex+0x5ec>
 1014f48:	bc7f841e 	bne	r23,r17,1014d5c <__gethex+0x53c>
 1014f4c:	1dc0050e 	bge	r3,r23,1014f64 <__gethex+0x744>
 1014f50:	b8cbc83a 	sub	r5,r23,r3
 1014f54:	9809883a 	mov	r4,r19
 1014f58:	10163640 	call	1016364 <__any_on>
 1014f5c:	103f7f26 	beq	r2,zero,1014d5c <__gethex+0x53c>
 1014f60:	a1000117 	ldw	r4,4(r20)
 1014f64:	d8800117 	ldw	r2,4(sp)
 1014f68:	d8c00217 	ldw	r3,8(sp)
 1014f6c:	04000044 	movi	r16,1
 1014f70:	11000015 	stw	r4,0(r2)
 1014f74:	d8800d17 	ldw	r2,52(sp)
 1014f78:	04801884 	movi	r18,98
 1014f7c:	1c000015 	stw	r16,0(r3)
 1014f80:	14c00015 	stw	r19,0(r2)
 1014f84:	9c000415 	stw	r16,16(r19)
 1014f88:	003e6806 	br	101492c <__gethex+0x10c>
 1014f8c:	d8c00e17 	ldw	r3,56(sp)
 1014f90:	183f7226 	beq	r3,zero,1014d5c <__gethex+0x53c>
 1014f94:	003ff306 	br	1014f64 <__gethex+0x744>
 1014f98:	d8800e17 	ldw	r2,56(sp)
 1014f9c:	103ff126 	beq	r2,zero,1014f64 <__gethex+0x744>
 1014fa0:	003f6e06 	br	1014d5c <__gethex+0x53c>
 1014fa4:	b805d17a 	srai	r2,r23,5
 1014fa8:	d8c00217 	ldw	r3,8(sp)
 1014fac:	b94007cc 	andi	r5,r23,31
 1014fb0:	1085883a 	add	r2,r2,r2
 1014fb4:	1085883a 	add	r2,r2,r2
 1014fb8:	10c5883a 	add	r2,r2,r3
 1014fbc:	00c00044 	movi	r3,1
 1014fc0:	1946983a 	sll	r3,r3,r5
 1014fc4:	11000017 	ldw	r4,0(r2)
 1014fc8:	1906703a 	and	r3,r3,r4
 1014fcc:	183fd726 	beq	r3,zero,1014f2c <__gethex+0x70c>
 1014fd0:	04800844 	movi	r18,33
 1014fd4:	003f4806 	br	1014cf8 <__gethex+0x4d8>

01014fd8 <L_shift>:
 1014fd8:	00800204 	movi	r2,8
 1014fdc:	1185c83a 	sub	r2,r2,r6
 1014fe0:	1085883a 	add	r2,r2,r2
 1014fe4:	21c00017 	ldw	r7,0(r4)
 1014fe8:	1093883a 	add	r9,r2,r2
 1014fec:	00800804 	movi	r2,32
 1014ff0:	200d883a 	mov	r6,r4
 1014ff4:	1251c83a 	sub	r8,r2,r9
 1014ff8:	31800104 	addi	r6,r6,4
 1014ffc:	3805883a 	mov	r2,r7
 1015000:	31c00017 	ldw	r7,0(r6)
 1015004:	3a08983a 	sll	r4,r7,r8
 1015008:	3a46d83a 	srl	r3,r7,r9
 101500c:	1104b03a 	or	r2,r2,r4
 1015010:	180f883a 	mov	r7,r3
 1015014:	30bfff15 	stw	r2,-4(r6)
 1015018:	30c00015 	stw	r3,0(r6)
 101501c:	317ff636 	bltu	r6,r5,1014ff8 <L_shift+0x20>
 1015020:	f800283a 	ret

01015024 <__hexnan>:
 1015024:	defff404 	addi	sp,sp,-48
 1015028:	dd800815 	stw	r22,32(sp)
 101502c:	05804234 	movhi	r22,264
 1015030:	b5abe104 	addi	r22,r22,-20604
 1015034:	b0800c03 	ldbu	r2,48(r22)
 1015038:	dcc00515 	stw	r19,20(sp)
 101503c:	dc000215 	stw	r16,8(sp)
 1015040:	dfc00b15 	stw	ra,44(sp)
 1015044:	df000a15 	stw	fp,40(sp)
 1015048:	ddc00915 	stw	r23,36(sp)
 101504c:	dd400715 	stw	r21,28(sp)
 1015050:	dd000615 	stw	r20,24(sp)
 1015054:	dc800415 	stw	r18,16(sp)
 1015058:	dc400315 	stw	r17,12(sp)
 101505c:	d9000115 	stw	r4,4(sp)
 1015060:	2821883a 	mov	r16,r5
 1015064:	3027883a 	mov	r19,r6
 1015068:	10007426 	beq	r2,zero,101523c <__hexnan+0x218>
 101506c:	80c00017 	ldw	r3,0(r16)
 1015070:	1805d17a 	srai	r2,r3,5
 1015074:	18c007cc 	andi	r3,r3,31
 1015078:	1839003a 	cmpeq	fp,r3,zero
 101507c:	1085883a 	add	r2,r2,r2
 1015080:	1085883a 	add	r2,r2,r2
 1015084:	d8c00015 	stw	r3,0(sp)
 1015088:	14c5883a 	add	r2,r2,r19
 101508c:	e000011e 	bne	fp,zero,1015094 <__hexnan+0x70>
 1015090:	10800104 	addi	r2,r2,4
 1015094:	d8c00117 	ldw	r3,4(sp)
 1015098:	153fff04 	addi	r20,r2,-4
 101509c:	a021883a 	mov	r16,r20
 10150a0:	1c400017 	ldw	r17,0(r3)
 10150a4:	a02b883a 	mov	r21,r20
 10150a8:	0025883a 	mov	r18,zero
 10150ac:	002f883a 	mov	r23,zero
 10150b0:	000d883a 	mov	r6,zero
 10150b4:	103fff15 	stw	zero,-4(r2)
 10150b8:	8c400044 	addi	r17,r17,1
 10150bc:	89000003 	ldbu	r4,0(r17)
 10150c0:	20000e26 	beq	r4,zero,10150fc <__hexnan+0xd8>
 10150c4:	2585883a 	add	r2,r4,r22
 10150c8:	10c00003 	ldbu	r3,0(r2)
 10150cc:	18002e1e 	bne	r3,zero,1015188 <__hexnan+0x164>
 10150d0:	00800804 	movi	r2,32
 10150d4:	11005536 	bltu	r2,r4,101522c <__hexnan+0x208>
 10150d8:	bcbff70e 	bge	r23,r18,10150b8 <__hexnan+0x94>
 10150dc:	8540022e 	bgeu	r16,r21,10150e8 <__hexnan+0xc4>
 10150e0:	008001c4 	movi	r2,7
 10150e4:	11803c0e 	bge	r2,r6,10151d8 <__hexnan+0x1b4>
 10150e8:	9c003536 	bltu	r19,r16,10151c0 <__hexnan+0x19c>
 10150ec:	8c400044 	addi	r17,r17,1
 10150f0:	89000003 	ldbu	r4,0(r17)
 10150f4:	01800204 	movi	r6,8
 10150f8:	203ff21e 	bne	r4,zero,10150c4 <__hexnan+0xa0>
 10150fc:	90004d26 	beq	r18,zero,1015234 <__hexnan+0x210>
 1015100:	85404336 	bltu	r16,r21,1015210 <__hexnan+0x1ec>
 1015104:	9c00382e 	bgeu	r19,r16,10151e8 <__hexnan+0x1c4>
 1015108:	9807883a 	mov	r3,r19
 101510c:	80800017 	ldw	r2,0(r16)
 1015110:	84000104 	addi	r16,r16,4
 1015114:	18800015 	stw	r2,0(r3)
 1015118:	18c00104 	addi	r3,r3,4
 101511c:	a43ffb2e 	bgeu	r20,r16,101510c <__hexnan+0xe8>
 1015120:	18000015 	stw	zero,0(r3)
 1015124:	18c00104 	addi	r3,r3,4
 1015128:	a0fffd2e 	bgeu	r20,r3,1015120 <__hexnan+0xfc>
 101512c:	a0800017 	ldw	r2,0(r20)
 1015130:	1000071e 	bne	r2,zero,1015150 <__hexnan+0x12c>
 1015134:	9d004326 	beq	r19,r20,1015244 <__hexnan+0x220>
 1015138:	a007883a 	mov	r3,r20
 101513c:	00000106 	br	1015144 <__hexnan+0x120>
 1015140:	98c04026 	beq	r19,r3,1015244 <__hexnan+0x220>
 1015144:	18ffff04 	addi	r3,r3,-4
 1015148:	18800017 	ldw	r2,0(r3)
 101514c:	103ffc26 	beq	r2,zero,1015140 <__hexnan+0x11c>
 1015150:	00c00144 	movi	r3,5
 1015154:	1805883a 	mov	r2,r3
 1015158:	dfc00b17 	ldw	ra,44(sp)
 101515c:	df000a17 	ldw	fp,40(sp)
 1015160:	ddc00917 	ldw	r23,36(sp)
 1015164:	dd800817 	ldw	r22,32(sp)
 1015168:	dd400717 	ldw	r21,28(sp)
 101516c:	dd000617 	ldw	r20,24(sp)
 1015170:	dcc00517 	ldw	r19,20(sp)
 1015174:	dc800417 	ldw	r18,16(sp)
 1015178:	dc400317 	ldw	r17,12(sp)
 101517c:	dc000217 	ldw	r16,8(sp)
 1015180:	dec00c04 	addi	sp,sp,48
 1015184:	f800283a 	ret
 1015188:	31800044 	addi	r6,r6,1
 101518c:	00800204 	movi	r2,8
 1015190:	94800044 	addi	r18,r18,1
 1015194:	1180040e 	bge	r2,r6,10151a8 <__hexnan+0x184>
 1015198:	9c3fc72e 	bgeu	r19,r16,10150b8 <__hexnan+0x94>
 101519c:	843fff04 	addi	r16,r16,-4
 10151a0:	80000015 	stw	zero,0(r16)
 10151a4:	01800044 	movi	r6,1
 10151a8:	80800017 	ldw	r2,0(r16)
 10151ac:	18c003cc 	andi	r3,r3,15
 10151b0:	1004913a 	slli	r2,r2,4
 10151b4:	10c4b03a 	or	r2,r2,r3
 10151b8:	80800015 	stw	r2,0(r16)
 10151bc:	003fbe06 	br	10150b8 <__hexnan+0x94>
 10151c0:	843fff04 	addi	r16,r16,-4
 10151c4:	802b883a 	mov	r21,r16
 10151c8:	902f883a 	mov	r23,r18
 10151cc:	000d883a 	mov	r6,zero
 10151d0:	80000015 	stw	zero,0(r16)
 10151d4:	003fb806 	br	10150b8 <__hexnan+0x94>
 10151d8:	8009883a 	mov	r4,r16
 10151dc:	a80b883a 	mov	r5,r21
 10151e0:	1014fd80 	call	1014fd8 <L_shift>
 10151e4:	003fc006 	br	10150e8 <__hexnan+0xc4>
 10151e8:	e03fd01e 	bne	fp,zero,101512c <__hexnan+0x108>
 10151ec:	d8c00017 	ldw	r3,0(sp)
 10151f0:	00800804 	movi	r2,32
 10151f4:	10c5c83a 	sub	r2,r2,r3
 10151f8:	00ffffc4 	movi	r3,-1
 10151fc:	1886d83a 	srl	r3,r3,r2
 1015200:	a0800017 	ldw	r2,0(r20)
 1015204:	10c4703a 	and	r2,r2,r3
 1015208:	a0800015 	stw	r2,0(r20)
 101520c:	003fc806 	br	1015130 <__hexnan+0x10c>
 1015210:	008001c4 	movi	r2,7
 1015214:	11bfbb16 	blt	r2,r6,1015104 <__hexnan+0xe0>
 1015218:	a80b883a 	mov	r5,r21
 101521c:	8009883a 	mov	r4,r16
 1015220:	1014fd80 	call	1014fd8 <L_shift>
 1015224:	9c3ff02e 	bgeu	r19,r16,10151e8 <__hexnan+0x1c4>
 1015228:	003fb706 	br	1015108 <__hexnan+0xe4>
 101522c:	00800a44 	movi	r2,41
 1015230:	20800826 	beq	r4,r2,1015254 <__hexnan+0x230>
 1015234:	00c00104 	movi	r3,4
 1015238:	003fc606 	br	1015154 <__hexnan+0x130>
 101523c:	10147080 	call	1014708 <__hexdig_init>
 1015240:	003f8a06 	br	101506c <__hexnan+0x48>
 1015244:	00800044 	movi	r2,1
 1015248:	00c00144 	movi	r3,5
 101524c:	98800015 	stw	r2,0(r19)
 1015250:	003fc006 	br	1015154 <__hexnan+0x130>
 1015254:	903ff726 	beq	r18,zero,1015234 <__hexnan+0x210>
 1015258:	d8c00117 	ldw	r3,4(sp)
 101525c:	88800044 	addi	r2,r17,1
 1015260:	18800015 	stw	r2,0(r3)
 1015264:	857fa72e 	bgeu	r16,r21,1015104 <__hexnan+0xe0>
 1015268:	003fe906 	br	1015210 <__hexnan+0x1ec>

0101526c <__gettzinfo>:
 101526c:	008040f4 	movhi	r2,259
 1015270:	10a0b604 	addi	r2,r2,-32040
 1015274:	f800283a 	ret

01015278 <__locale_charset>:
 1015278:	d0a00a17 	ldw	r2,-32728(gp)
 101527c:	f800283a 	ret

01015280 <_localeconv_r>:
 1015280:	008040b4 	movhi	r2,258
 1015284:	109f0504 	addi	r2,r2,31764
 1015288:	f800283a 	ret

0101528c <localeconv>:
 101528c:	008040f4 	movhi	r2,259
 1015290:	10a67004 	addi	r2,r2,-26176
 1015294:	11000017 	ldw	r4,0(r2)
 1015298:	10152801 	jmpi	1015280 <_localeconv_r>

0101529c <_setlocale_r>:
 101529c:	defffc04 	addi	sp,sp,-16
 10152a0:	00c040b4 	movhi	r3,258
 10152a4:	18de0d04 	addi	r3,r3,30772
 10152a8:	dc800215 	stw	r18,8(sp)
 10152ac:	dc400115 	stw	r17,4(sp)
 10152b0:	dc000015 	stw	r16,0(sp)
 10152b4:	2023883a 	mov	r17,r4
 10152b8:	2825883a 	mov	r18,r5
 10152bc:	dfc00315 	stw	ra,12(sp)
 10152c0:	3021883a 	mov	r16,r6
 10152c4:	3009883a 	mov	r4,r6
 10152c8:	180b883a 	mov	r5,r3
 10152cc:	30000926 	beq	r6,zero,10152f4 <_setlocale_r+0x58>
 10152d0:	100e1c00 	call	100e1c0 <strcmp>
 10152d4:	8009883a 	mov	r4,r16
 10152d8:	014040b4 	movhi	r5,258
 10152dc:	295fa304 	addi	r5,r5,32396
 10152e0:	10000b1e 	bne	r2,zero,1015310 <_setlocale_r+0x74>
 10152e4:	8c000d15 	stw	r16,52(r17)
 10152e8:	8c800c15 	stw	r18,48(r17)
 10152ec:	00c040b4 	movhi	r3,258
 10152f0:	18de0d04 	addi	r3,r3,30772
 10152f4:	1805883a 	mov	r2,r3
 10152f8:	dfc00317 	ldw	ra,12(sp)
 10152fc:	dc800217 	ldw	r18,8(sp)
 1015300:	dc400117 	ldw	r17,4(sp)
 1015304:	dc000017 	ldw	r16,0(sp)
 1015308:	dec00404 	addi	sp,sp,16
 101530c:	f800283a 	ret
 1015310:	100e1c00 	call	100e1c0 <strcmp>
 1015314:	0007883a 	mov	r3,zero
 1015318:	103ff226 	beq	r2,zero,10152e4 <_setlocale_r+0x48>
 101531c:	003ff506 	br	10152f4 <_setlocale_r+0x58>

01015320 <setlocale>:
 1015320:	018040f4 	movhi	r6,259
 1015324:	31a67004 	addi	r6,r6,-26176
 1015328:	2007883a 	mov	r3,r4
 101532c:	31000017 	ldw	r4,0(r6)
 1015330:	280d883a 	mov	r6,r5
 1015334:	180b883a 	mov	r5,r3
 1015338:	101529c1 	jmpi	101529c <_setlocale_r>

0101533c <__smakebuf_r>:
 101533c:	2880030b 	ldhu	r2,12(r5)
 1015340:	deffed04 	addi	sp,sp,-76
 1015344:	dc401015 	stw	r17,64(sp)
 1015348:	1080008c 	andi	r2,r2,2
 101534c:	dc000f15 	stw	r16,60(sp)
 1015350:	dfc01215 	stw	ra,72(sp)
 1015354:	dc801115 	stw	r18,68(sp)
 1015358:	2821883a 	mov	r16,r5
 101535c:	2023883a 	mov	r17,r4
 1015360:	10000b26 	beq	r2,zero,1015390 <__smakebuf_r+0x54>
 1015364:	28c010c4 	addi	r3,r5,67
 1015368:	00800044 	movi	r2,1
 101536c:	28800515 	stw	r2,20(r5)
 1015370:	28c00415 	stw	r3,16(r5)
 1015374:	28c00015 	stw	r3,0(r5)
 1015378:	dfc01217 	ldw	ra,72(sp)
 101537c:	dc801117 	ldw	r18,68(sp)
 1015380:	dc401017 	ldw	r17,64(sp)
 1015384:	dc000f17 	ldw	r16,60(sp)
 1015388:	dec01304 	addi	sp,sp,76
 101538c:	f800283a 	ret
 1015390:	2940038f 	ldh	r5,14(r5)
 1015394:	28002116 	blt	r5,zero,101541c <__smakebuf_r+0xe0>
 1015398:	d80d883a 	mov	r6,sp
 101539c:	1017c480 	call	1017c48 <_fstat_r>
 10153a0:	10001e16 	blt	r2,zero,101541c <__smakebuf_r+0xe0>
 10153a4:	d8800117 	ldw	r2,4(sp)
 10153a8:	00e00014 	movui	r3,32768
 10153ac:	113c000c 	andi	r4,r2,61440
 10153b0:	20c03126 	beq	r4,r3,1015478 <__smakebuf_r+0x13c>
 10153b4:	8080030b 	ldhu	r2,12(r16)
 10153b8:	00c80004 	movi	r3,8192
 10153bc:	10820014 	ori	r2,r2,2048
 10153c0:	8080030d 	sth	r2,12(r16)
 10153c4:	20c01e26 	beq	r4,r3,1015440 <__smakebuf_r+0x104>
 10153c8:	04810004 	movi	r18,1024
 10153cc:	8809883a 	mov	r4,r17
 10153d0:	900b883a 	mov	r5,r18
 10153d4:	10154d00 	call	10154d0 <_malloc_r>
 10153d8:	1009883a 	mov	r4,r2
 10153dc:	10003126 	beq	r2,zero,10154a4 <__smakebuf_r+0x168>
 10153e0:	80c0030b 	ldhu	r3,12(r16)
 10153e4:	00804074 	movhi	r2,257
 10153e8:	108ec504 	addi	r2,r2,15124
 10153ec:	88800f15 	stw	r2,60(r17)
 10153f0:	18c02014 	ori	r3,r3,128
 10153f4:	84800515 	stw	r18,20(r16)
 10153f8:	80c0030d 	sth	r3,12(r16)
 10153fc:	81000415 	stw	r4,16(r16)
 1015400:	81000015 	stw	r4,0(r16)
 1015404:	dfc01217 	ldw	ra,72(sp)
 1015408:	dc801117 	ldw	r18,68(sp)
 101540c:	dc401017 	ldw	r17,64(sp)
 1015410:	dc000f17 	ldw	r16,60(sp)
 1015414:	dec01304 	addi	sp,sp,76
 1015418:	f800283a 	ret
 101541c:	80c0030b 	ldhu	r3,12(r16)
 1015420:	1880200c 	andi	r2,r3,128
 1015424:	10000426 	beq	r2,zero,1015438 <__smakebuf_r+0xfc>
 1015428:	04801004 	movi	r18,64
 101542c:	18820014 	ori	r2,r3,2048
 1015430:	8080030d 	sth	r2,12(r16)
 1015434:	003fe506 	br	10153cc <__smakebuf_r+0x90>
 1015438:	04810004 	movi	r18,1024
 101543c:	003ffb06 	br	101542c <__smakebuf_r+0xf0>
 1015440:	8140038f 	ldh	r5,14(r16)
 1015444:	8809883a 	mov	r4,r17
 1015448:	1017cbc0 	call	1017cbc <_isatty_r>
 101544c:	103fde26 	beq	r2,zero,10153c8 <__smakebuf_r+0x8c>
 1015450:	8080030b 	ldhu	r2,12(r16)
 1015454:	80c010c4 	addi	r3,r16,67
 1015458:	04810004 	movi	r18,1024
 101545c:	10800054 	ori	r2,r2,1
 1015460:	8080030d 	sth	r2,12(r16)
 1015464:	00800044 	movi	r2,1
 1015468:	80c00415 	stw	r3,16(r16)
 101546c:	80800515 	stw	r2,20(r16)
 1015470:	80c00015 	stw	r3,0(r16)
 1015474:	003fd506 	br	10153cc <__smakebuf_r+0x90>
 1015478:	80c00a17 	ldw	r3,40(r16)
 101547c:	00804074 	movhi	r2,257
 1015480:	109dbe04 	addi	r2,r2,30456
 1015484:	18bfcb1e 	bne	r3,r2,10153b4 <__smakebuf_r+0x78>
 1015488:	8080030b 	ldhu	r2,12(r16)
 101548c:	00c10004 	movi	r3,1024
 1015490:	1825883a 	mov	r18,r3
 1015494:	10c4b03a 	or	r2,r2,r3
 1015498:	8080030d 	sth	r2,12(r16)
 101549c:	80c01315 	stw	r3,76(r16)
 10154a0:	003fca06 	br	10153cc <__smakebuf_r+0x90>
 10154a4:	8100030b 	ldhu	r4,12(r16)
 10154a8:	2080800c 	andi	r2,r4,512
 10154ac:	103fb21e 	bne	r2,zero,1015378 <__smakebuf_r+0x3c>
 10154b0:	80c010c4 	addi	r3,r16,67
 10154b4:	21000094 	ori	r4,r4,2
 10154b8:	00800044 	movi	r2,1
 10154bc:	80800515 	stw	r2,20(r16)
 10154c0:	8100030d 	sth	r4,12(r16)
 10154c4:	80c00415 	stw	r3,16(r16)
 10154c8:	80c00015 	stw	r3,0(r16)
 10154cc:	003faa06 	br	1015378 <__smakebuf_r+0x3c>

010154d0 <_malloc_r>:
 10154d0:	defff604 	addi	sp,sp,-40
 10154d4:	28c002c4 	addi	r3,r5,11
 10154d8:	00800584 	movi	r2,22
 10154dc:	dc800215 	stw	r18,8(sp)
 10154e0:	dfc00915 	stw	ra,36(sp)
 10154e4:	df000815 	stw	fp,32(sp)
 10154e8:	ddc00715 	stw	r23,28(sp)
 10154ec:	dd800615 	stw	r22,24(sp)
 10154f0:	dd400515 	stw	r21,20(sp)
 10154f4:	dd000415 	stw	r20,16(sp)
 10154f8:	dcc00315 	stw	r19,12(sp)
 10154fc:	dc400115 	stw	r17,4(sp)
 1015500:	dc000015 	stw	r16,0(sp)
 1015504:	2025883a 	mov	r18,r4
 1015508:	10c01236 	bltu	r2,r3,1015554 <_malloc_r+0x84>
 101550c:	04400404 	movi	r17,16
 1015510:	8940142e 	bgeu	r17,r5,1015564 <_malloc_r+0x94>
 1015514:	00800304 	movi	r2,12
 1015518:	0007883a 	mov	r3,zero
 101551c:	90800015 	stw	r2,0(r18)
 1015520:	1805883a 	mov	r2,r3
 1015524:	dfc00917 	ldw	ra,36(sp)
 1015528:	df000817 	ldw	fp,32(sp)
 101552c:	ddc00717 	ldw	r23,28(sp)
 1015530:	dd800617 	ldw	r22,24(sp)
 1015534:	dd400517 	ldw	r21,20(sp)
 1015538:	dd000417 	ldw	r20,16(sp)
 101553c:	dcc00317 	ldw	r19,12(sp)
 1015540:	dc800217 	ldw	r18,8(sp)
 1015544:	dc400117 	ldw	r17,4(sp)
 1015548:	dc000017 	ldw	r16,0(sp)
 101554c:	dec00a04 	addi	sp,sp,40
 1015550:	f800283a 	ret
 1015554:	00bffe04 	movi	r2,-8
 1015558:	18a2703a 	and	r17,r3,r2
 101555c:	883fed16 	blt	r17,zero,1015514 <_malloc_r+0x44>
 1015560:	897fec36 	bltu	r17,r5,1015514 <_malloc_r+0x44>
 1015564:	9009883a 	mov	r4,r18
 1015568:	10194640 	call	1019464 <__malloc_lock>
 101556c:	00807dc4 	movi	r2,503
 1015570:	14402b2e 	bgeu	r2,r17,1015620 <_malloc_r+0x150>
 1015574:	8806d27a 	srli	r3,r17,9
 1015578:	18003f1e 	bne	r3,zero,1015678 <_malloc_r+0x1a8>
 101557c:	880cd0fa 	srli	r6,r17,3
 1015580:	300490fa 	slli	r2,r6,3
 1015584:	02c040f4 	movhi	r11,259
 1015588:	5ae0c904 	addi	r11,r11,-31964
 101558c:	12cb883a 	add	r5,r2,r11
 1015590:	2c000317 	ldw	r16,12(r5)
 1015594:	580f883a 	mov	r7,r11
 1015598:	2c00041e 	bne	r5,r16,10155ac <_malloc_r+0xdc>
 101559c:	00000a06 	br	10155c8 <_malloc_r+0xf8>
 10155a0:	1800860e 	bge	r3,zero,10157bc <_malloc_r+0x2ec>
 10155a4:	84000317 	ldw	r16,12(r16)
 10155a8:	2c000726 	beq	r5,r16,10155c8 <_malloc_r+0xf8>
 10155ac:	80800117 	ldw	r2,4(r16)
 10155b0:	00ffff04 	movi	r3,-4
 10155b4:	10c8703a 	and	r4,r2,r3
 10155b8:	2447c83a 	sub	r3,r4,r17
 10155bc:	008003c4 	movi	r2,15
 10155c0:	10fff70e 	bge	r2,r3,10155a0 <_malloc_r+0xd0>
 10155c4:	31bfffc4 	addi	r6,r6,-1
 10155c8:	32400044 	addi	r9,r6,1
 10155cc:	028040f4 	movhi	r10,259
 10155d0:	52a0cb04 	addi	r10,r10,-31956
 10155d4:	54000217 	ldw	r16,8(r10)
 10155d8:	8280a026 	beq	r16,r10,101585c <_malloc_r+0x38c>
 10155dc:	80800117 	ldw	r2,4(r16)
 10155e0:	00ffff04 	movi	r3,-4
 10155e4:	10ca703a 	and	r5,r2,r3
 10155e8:	2c4dc83a 	sub	r6,r5,r17
 10155ec:	008003c4 	movi	r2,15
 10155f0:	11808316 	blt	r2,r6,1015800 <_malloc_r+0x330>
 10155f4:	52800315 	stw	r10,12(r10)
 10155f8:	52800215 	stw	r10,8(r10)
 10155fc:	30002916 	blt	r6,zero,10156a4 <_malloc_r+0x1d4>
 1015600:	8147883a 	add	r3,r16,r5
 1015604:	18800117 	ldw	r2,4(r3)
 1015608:	9009883a 	mov	r4,r18
 101560c:	10800054 	ori	r2,r2,1
 1015610:	18800115 	stw	r2,4(r3)
 1015614:	10194840 	call	1019484 <__malloc_unlock>
 1015618:	80c00204 	addi	r3,r16,8
 101561c:	003fc006 	br	1015520 <_malloc_r+0x50>
 1015620:	02c040f4 	movhi	r11,259
 1015624:	5ae0c904 	addi	r11,r11,-31964
 1015628:	8ac5883a 	add	r2,r17,r11
 101562c:	14000317 	ldw	r16,12(r2)
 1015630:	580f883a 	mov	r7,r11
 1015634:	8806d0fa 	srli	r3,r17,3
 1015638:	14006c26 	beq	r2,r16,10157ec <_malloc_r+0x31c>
 101563c:	80c00117 	ldw	r3,4(r16)
 1015640:	00bfff04 	movi	r2,-4
 1015644:	81800317 	ldw	r6,12(r16)
 1015648:	1886703a 	and	r3,r3,r2
 101564c:	80c7883a 	add	r3,r16,r3
 1015650:	18800117 	ldw	r2,4(r3)
 1015654:	81400217 	ldw	r5,8(r16)
 1015658:	9009883a 	mov	r4,r18
 101565c:	10800054 	ori	r2,r2,1
 1015660:	18800115 	stw	r2,4(r3)
 1015664:	31400215 	stw	r5,8(r6)
 1015668:	29800315 	stw	r6,12(r5)
 101566c:	10194840 	call	1019484 <__malloc_unlock>
 1015670:	80c00204 	addi	r3,r16,8
 1015674:	003faa06 	br	1015520 <_malloc_r+0x50>
 1015678:	00800104 	movi	r2,4
 101567c:	10c0052e 	bgeu	r2,r3,1015694 <_malloc_r+0x1c4>
 1015680:	00800504 	movi	r2,20
 1015684:	10c07836 	bltu	r2,r3,1015868 <_malloc_r+0x398>
 1015688:	198016c4 	addi	r6,r3,91
 101568c:	300490fa 	slli	r2,r6,3
 1015690:	003fbc06 	br	1015584 <_malloc_r+0xb4>
 1015694:	8804d1ba 	srli	r2,r17,6
 1015698:	11800e04 	addi	r6,r2,56
 101569c:	300490fa 	slli	r2,r6,3
 10156a0:	003fb806 	br	1015584 <_malloc_r+0xb4>
 10156a4:	00807fc4 	movi	r2,511
 10156a8:	1140bb36 	bltu	r2,r5,1015998 <_malloc_r+0x4c8>
 10156ac:	2806d0fa 	srli	r3,r5,3
 10156b0:	573ffe04 	addi	fp,r10,-8
 10156b4:	00800044 	movi	r2,1
 10156b8:	180890fa 	slli	r4,r3,3
 10156bc:	1807d0ba 	srai	r3,r3,2
 10156c0:	e1c00117 	ldw	r7,4(fp)
 10156c4:	5909883a 	add	r4,r11,r4
 10156c8:	21400217 	ldw	r5,8(r4)
 10156cc:	10c4983a 	sll	r2,r2,r3
 10156d0:	81000315 	stw	r4,12(r16)
 10156d4:	81400215 	stw	r5,8(r16)
 10156d8:	388eb03a 	or	r7,r7,r2
 10156dc:	2c000315 	stw	r16,12(r5)
 10156e0:	24000215 	stw	r16,8(r4)
 10156e4:	e1c00115 	stw	r7,4(fp)
 10156e8:	4807883a 	mov	r3,r9
 10156ec:	4800cd16 	blt	r9,zero,1015a24 <_malloc_r+0x554>
 10156f0:	1807d0ba 	srai	r3,r3,2
 10156f4:	00800044 	movi	r2,1
 10156f8:	10c8983a 	sll	r4,r2,r3
 10156fc:	39004436 	bltu	r7,r4,1015810 <_malloc_r+0x340>
 1015700:	21c4703a 	and	r2,r4,r7
 1015704:	10000a1e 	bne	r2,zero,1015730 <_malloc_r+0x260>
 1015708:	2109883a 	add	r4,r4,r4
 101570c:	00bfff04 	movi	r2,-4
 1015710:	4884703a 	and	r2,r9,r2
 1015714:	3906703a 	and	r3,r7,r4
 1015718:	12400104 	addi	r9,r2,4
 101571c:	1800041e 	bne	r3,zero,1015730 <_malloc_r+0x260>
 1015720:	2109883a 	add	r4,r4,r4
 1015724:	3904703a 	and	r2,r7,r4
 1015728:	4a400104 	addi	r9,r9,4
 101572c:	103ffc26 	beq	r2,zero,1015720 <_malloc_r+0x250>
 1015730:	480490fa 	slli	r2,r9,3
 1015734:	4819883a 	mov	r12,r9
 1015738:	023fff04 	movi	r8,-4
 101573c:	589b883a 	add	r13,r11,r2
 1015740:	6807883a 	mov	r3,r13
 1015744:	014003c4 	movi	r5,15
 1015748:	1c000317 	ldw	r16,12(r3)
 101574c:	1c00041e 	bne	r3,r16,1015760 <_malloc_r+0x290>
 1015750:	0000a706 	br	10159f0 <_malloc_r+0x520>
 1015754:	3000ab0e 	bge	r6,zero,1015a04 <_malloc_r+0x534>
 1015758:	84000317 	ldw	r16,12(r16)
 101575c:	1c00a426 	beq	r3,r16,10159f0 <_malloc_r+0x520>
 1015760:	80800117 	ldw	r2,4(r16)
 1015764:	1204703a 	and	r2,r2,r8
 1015768:	144dc83a 	sub	r6,r2,r17
 101576c:	29bff90e 	bge	r5,r6,1015754 <_malloc_r+0x284>
 1015770:	81000317 	ldw	r4,12(r16)
 1015774:	80c00217 	ldw	r3,8(r16)
 1015778:	89400054 	ori	r5,r17,1
 101577c:	8445883a 	add	r2,r16,r17
 1015780:	20c00215 	stw	r3,8(r4)
 1015784:	19000315 	stw	r4,12(r3)
 1015788:	81400115 	stw	r5,4(r16)
 101578c:	1187883a 	add	r3,r2,r6
 1015790:	31000054 	ori	r4,r6,1
 1015794:	50800315 	stw	r2,12(r10)
 1015798:	50800215 	stw	r2,8(r10)
 101579c:	19800015 	stw	r6,0(r3)
 10157a0:	11000115 	stw	r4,4(r2)
 10157a4:	12800215 	stw	r10,8(r2)
 10157a8:	12800315 	stw	r10,12(r2)
 10157ac:	9009883a 	mov	r4,r18
 10157b0:	10194840 	call	1019484 <__malloc_unlock>
 10157b4:	80c00204 	addi	r3,r16,8
 10157b8:	003f5906 	br	1015520 <_malloc_r+0x50>
 10157bc:	8109883a 	add	r4,r16,r4
 10157c0:	20800117 	ldw	r2,4(r4)
 10157c4:	80c00217 	ldw	r3,8(r16)
 10157c8:	81400317 	ldw	r5,12(r16)
 10157cc:	10800054 	ori	r2,r2,1
 10157d0:	20800115 	stw	r2,4(r4)
 10157d4:	28c00215 	stw	r3,8(r5)
 10157d8:	19400315 	stw	r5,12(r3)
 10157dc:	9009883a 	mov	r4,r18
 10157e0:	10194840 	call	1019484 <__malloc_unlock>
 10157e4:	80c00204 	addi	r3,r16,8
 10157e8:	003f4d06 	br	1015520 <_malloc_r+0x50>
 10157ec:	80800204 	addi	r2,r16,8
 10157f0:	14000317 	ldw	r16,12(r2)
 10157f4:	143f911e 	bne	r2,r16,101563c <_malloc_r+0x16c>
 10157f8:	1a400084 	addi	r9,r3,2
 10157fc:	003f7306 	br	10155cc <_malloc_r+0xfc>
 1015800:	88c00054 	ori	r3,r17,1
 1015804:	8445883a 	add	r2,r16,r17
 1015808:	80c00115 	stw	r3,4(r16)
 101580c:	003fdf06 	br	101578c <_malloc_r+0x2bc>
 1015810:	e4000217 	ldw	r16,8(fp)
 1015814:	00bfff04 	movi	r2,-4
 1015818:	80c00117 	ldw	r3,4(r16)
 101581c:	802d883a 	mov	r22,r16
 1015820:	18aa703a 	and	r21,r3,r2
 1015824:	ac401636 	bltu	r21,r17,1015880 <_malloc_r+0x3b0>
 1015828:	ac49c83a 	sub	r4,r21,r17
 101582c:	008003c4 	movi	r2,15
 1015830:	1100130e 	bge	r2,r4,1015880 <_malloc_r+0x3b0>
 1015834:	88800054 	ori	r2,r17,1
 1015838:	8447883a 	add	r3,r16,r17
 101583c:	80800115 	stw	r2,4(r16)
 1015840:	20800054 	ori	r2,r4,1
 1015844:	18800115 	stw	r2,4(r3)
 1015848:	e0c00215 	stw	r3,8(fp)
 101584c:	9009883a 	mov	r4,r18
 1015850:	10194840 	call	1019484 <__malloc_unlock>
 1015854:	80c00204 	addi	r3,r16,8
 1015858:	003f3106 	br	1015520 <_malloc_r+0x50>
 101585c:	39c00117 	ldw	r7,4(r7)
 1015860:	573ffe04 	addi	fp,r10,-8
 1015864:	003fa006 	br	10156e8 <_malloc_r+0x218>
 1015868:	00801504 	movi	r2,84
 101586c:	10c06736 	bltu	r2,r3,1015a0c <_malloc_r+0x53c>
 1015870:	8804d33a 	srli	r2,r17,12
 1015874:	11801b84 	addi	r6,r2,110
 1015878:	300490fa 	slli	r2,r6,3
 101587c:	003f4106 	br	1015584 <_malloc_r+0xb4>
 1015880:	d0a70b17 	ldw	r2,-25556(gp)
 1015884:	d0e00c17 	ldw	r3,-32720(gp)
 1015888:	053fffc4 	movi	r20,-1
 101588c:	10800404 	addi	r2,r2,16
 1015890:	88a7883a 	add	r19,r17,r2
 1015894:	1d000326 	beq	r3,r20,10158a4 <_malloc_r+0x3d4>
 1015898:	98c3ffc4 	addi	r3,r19,4095
 101589c:	00bc0004 	movi	r2,-4096
 10158a0:	18a6703a 	and	r19,r3,r2
 10158a4:	9009883a 	mov	r4,r18
 10158a8:	980b883a 	mov	r5,r19
 10158ac:	10176800 	call	1017680 <_sbrk_r>
 10158b0:	1009883a 	mov	r4,r2
 10158b4:	15000426 	beq	r2,r20,10158c8 <_malloc_r+0x3f8>
 10158b8:	854b883a 	add	r5,r16,r21
 10158bc:	1029883a 	mov	r20,r2
 10158c0:	11405a2e 	bgeu	r2,r5,1015a2c <_malloc_r+0x55c>
 10158c4:	87000c26 	beq	r16,fp,10158f8 <_malloc_r+0x428>
 10158c8:	e4000217 	ldw	r16,8(fp)
 10158cc:	80c00117 	ldw	r3,4(r16)
 10158d0:	00bfff04 	movi	r2,-4
 10158d4:	1884703a 	and	r2,r3,r2
 10158d8:	14400336 	bltu	r2,r17,10158e8 <_malloc_r+0x418>
 10158dc:	1449c83a 	sub	r4,r2,r17
 10158e0:	008003c4 	movi	r2,15
 10158e4:	113fd316 	blt	r2,r4,1015834 <_malloc_r+0x364>
 10158e8:	9009883a 	mov	r4,r18
 10158ec:	10194840 	call	1019484 <__malloc_unlock>
 10158f0:	0007883a 	mov	r3,zero
 10158f4:	003f0a06 	br	1015520 <_malloc_r+0x50>
 10158f8:	05c040f4 	movhi	r23,259
 10158fc:	bdedc204 	addi	r23,r23,-18680
 1015900:	b8800017 	ldw	r2,0(r23)
 1015904:	988d883a 	add	r6,r19,r2
 1015908:	b9800015 	stw	r6,0(r23)
 101590c:	d0e00c17 	ldw	r3,-32720(gp)
 1015910:	00bfffc4 	movi	r2,-1
 1015914:	18808e26 	beq	r3,r2,1015b50 <_malloc_r+0x680>
 1015918:	2145c83a 	sub	r2,r4,r5
 101591c:	3085883a 	add	r2,r6,r2
 1015920:	b8800015 	stw	r2,0(r23)
 1015924:	20c001cc 	andi	r3,r4,7
 1015928:	18005f1e 	bne	r3,zero,1015aa8 <_malloc_r+0x5d8>
 101592c:	000b883a 	mov	r5,zero
 1015930:	a4c5883a 	add	r2,r20,r19
 1015934:	1083ffcc 	andi	r2,r2,4095
 1015938:	00c40004 	movi	r3,4096
 101593c:	1887c83a 	sub	r3,r3,r2
 1015940:	28e7883a 	add	r19,r5,r3
 1015944:	9009883a 	mov	r4,r18
 1015948:	980b883a 	mov	r5,r19
 101594c:	10176800 	call	1017680 <_sbrk_r>
 1015950:	1007883a 	mov	r3,r2
 1015954:	00bfffc4 	movi	r2,-1
 1015958:	18807a26 	beq	r3,r2,1015b44 <_malloc_r+0x674>
 101595c:	1d05c83a 	sub	r2,r3,r20
 1015960:	9885883a 	add	r2,r19,r2
 1015964:	10c00054 	ori	r3,r2,1
 1015968:	b8800017 	ldw	r2,0(r23)
 101596c:	a021883a 	mov	r16,r20
 1015970:	a0c00115 	stw	r3,4(r20)
 1015974:	9885883a 	add	r2,r19,r2
 1015978:	b8800015 	stw	r2,0(r23)
 101597c:	e5000215 	stw	r20,8(fp)
 1015980:	b7003626 	beq	r22,fp,1015a5c <_malloc_r+0x58c>
 1015984:	018003c4 	movi	r6,15
 1015988:	35404b36 	bltu	r6,r21,1015ab8 <_malloc_r+0x5e8>
 101598c:	00800044 	movi	r2,1
 1015990:	a0800115 	stw	r2,4(r20)
 1015994:	003fcd06 	br	10158cc <_malloc_r+0x3fc>
 1015998:	2808d27a 	srli	r4,r5,9
 101599c:	2000371e 	bne	r4,zero,1015a7c <_malloc_r+0x5ac>
 10159a0:	2808d0fa 	srli	r4,r5,3
 10159a4:	200690fa 	slli	r3,r4,3
 10159a8:	1ad1883a 	add	r8,r3,r11
 10159ac:	41800217 	ldw	r6,8(r8)
 10159b0:	41805b26 	beq	r8,r6,1015b20 <_malloc_r+0x650>
 10159b4:	30800117 	ldw	r2,4(r6)
 10159b8:	00ffff04 	movi	r3,-4
 10159bc:	10c4703a 	and	r2,r2,r3
 10159c0:	2880022e 	bgeu	r5,r2,10159cc <_malloc_r+0x4fc>
 10159c4:	31800217 	ldw	r6,8(r6)
 10159c8:	41bffa1e 	bne	r8,r6,10159b4 <_malloc_r+0x4e4>
 10159cc:	32000317 	ldw	r8,12(r6)
 10159d0:	39c00117 	ldw	r7,4(r7)
 10159d4:	82000315 	stw	r8,12(r16)
 10159d8:	81800215 	stw	r6,8(r16)
 10159dc:	070040f4 	movhi	fp,259
 10159e0:	e720c904 	addi	fp,fp,-31964
 10159e4:	34000315 	stw	r16,12(r6)
 10159e8:	44000215 	stw	r16,8(r8)
 10159ec:	003f3e06 	br	10156e8 <_malloc_r+0x218>
 10159f0:	63000044 	addi	r12,r12,1
 10159f4:	608000cc 	andi	r2,r12,3
 10159f8:	10005d26 	beq	r2,zero,1015b70 <_malloc_r+0x6a0>
 10159fc:	18c00204 	addi	r3,r3,8
 1015a00:	003f5106 	br	1015748 <_malloc_r+0x278>
 1015a04:	8089883a 	add	r4,r16,r2
 1015a08:	003f6d06 	br	10157c0 <_malloc_r+0x2f0>
 1015a0c:	00805504 	movi	r2,340
 1015a10:	10c02036 	bltu	r2,r3,1015a94 <_malloc_r+0x5c4>
 1015a14:	8804d3fa 	srli	r2,r17,15
 1015a18:	11801dc4 	addi	r6,r2,119
 1015a1c:	300490fa 	slli	r2,r6,3
 1015a20:	003ed806 	br	1015584 <_malloc_r+0xb4>
 1015a24:	48c000c4 	addi	r3,r9,3
 1015a28:	003f3106 	br	10156f0 <_malloc_r+0x220>
 1015a2c:	05c040f4 	movhi	r23,259
 1015a30:	bdedc204 	addi	r23,r23,-18680
 1015a34:	b8800017 	ldw	r2,0(r23)
 1015a38:	988d883a 	add	r6,r19,r2
 1015a3c:	b9800015 	stw	r6,0(r23)
 1015a40:	293fb21e 	bne	r5,r4,101590c <_malloc_r+0x43c>
 1015a44:	2083ffcc 	andi	r2,r4,4095
 1015a48:	103fb01e 	bne	r2,zero,101590c <_malloc_r+0x43c>
 1015a4c:	e4000217 	ldw	r16,8(fp)
 1015a50:	9d45883a 	add	r2,r19,r21
 1015a54:	10800054 	ori	r2,r2,1
 1015a58:	80800115 	stw	r2,4(r16)
 1015a5c:	b8c00017 	ldw	r3,0(r23)
 1015a60:	d0a70c17 	ldw	r2,-25552(gp)
 1015a64:	10c0012e 	bgeu	r2,r3,1015a6c <_malloc_r+0x59c>
 1015a68:	d0e70c15 	stw	r3,-25552(gp)
 1015a6c:	d0a70d17 	ldw	r2,-25548(gp)
 1015a70:	10ff962e 	bgeu	r2,r3,10158cc <_malloc_r+0x3fc>
 1015a74:	d0e70d15 	stw	r3,-25548(gp)
 1015a78:	003f9406 	br	10158cc <_malloc_r+0x3fc>
 1015a7c:	00800104 	movi	r2,4
 1015a80:	11001e36 	bltu	r2,r4,1015afc <_malloc_r+0x62c>
 1015a84:	2804d1ba 	srli	r2,r5,6
 1015a88:	11000e04 	addi	r4,r2,56
 1015a8c:	200690fa 	slli	r3,r4,3
 1015a90:	003fc506 	br	10159a8 <_malloc_r+0x4d8>
 1015a94:	00815504 	movi	r2,1364
 1015a98:	10c01d2e 	bgeu	r2,r3,1015b10 <_malloc_r+0x640>
 1015a9c:	01801f84 	movi	r6,126
 1015aa0:	0080fc04 	movi	r2,1008
 1015aa4:	003eb706 	br	1015584 <_malloc_r+0xb4>
 1015aa8:	00800204 	movi	r2,8
 1015aac:	10cbc83a 	sub	r5,r2,r3
 1015ab0:	2169883a 	add	r20,r4,r5
 1015ab4:	003f9e06 	br	1015930 <_malloc_r+0x460>
 1015ab8:	00bffe04 	movi	r2,-8
 1015abc:	a93ffd04 	addi	r4,r21,-12
 1015ac0:	2088703a 	and	r4,r4,r2
 1015ac4:	b10b883a 	add	r5,r22,r4
 1015ac8:	00c00144 	movi	r3,5
 1015acc:	28c00215 	stw	r3,8(r5)
 1015ad0:	28c00115 	stw	r3,4(r5)
 1015ad4:	b0800117 	ldw	r2,4(r22)
 1015ad8:	1080004c 	andi	r2,r2,1
 1015adc:	2084b03a 	or	r2,r4,r2
 1015ae0:	b0800115 	stw	r2,4(r22)
 1015ae4:	313fdd2e 	bgeu	r6,r4,1015a5c <_malloc_r+0x58c>
 1015ae8:	b1400204 	addi	r5,r22,8
 1015aec:	9009883a 	mov	r4,r18
 1015af0:	1013db40 	call	1013db4 <_free_r>
 1015af4:	e4000217 	ldw	r16,8(fp)
 1015af8:	003fd806 	br	1015a5c <_malloc_r+0x58c>
 1015afc:	00800504 	movi	r2,20
 1015b00:	11001536 	bltu	r2,r4,1015b58 <_malloc_r+0x688>
 1015b04:	210016c4 	addi	r4,r4,91
 1015b08:	200690fa 	slli	r3,r4,3
 1015b0c:	003fa606 	br	10159a8 <_malloc_r+0x4d8>
 1015b10:	8804d4ba 	srli	r2,r17,18
 1015b14:	11801f04 	addi	r6,r2,124
 1015b18:	300490fa 	slli	r2,r6,3
 1015b1c:	003e9906 	br	1015584 <_malloc_r+0xb4>
 1015b20:	2009d0ba 	srai	r4,r4,2
 1015b24:	014040f4 	movhi	r5,259
 1015b28:	2960c904 	addi	r5,r5,-31964
 1015b2c:	00c00044 	movi	r3,1
 1015b30:	28800117 	ldw	r2,4(r5)
 1015b34:	1906983a 	sll	r3,r3,r4
 1015b38:	10c4b03a 	or	r2,r2,r3
 1015b3c:	28800115 	stw	r2,4(r5)
 1015b40:	003fa306 	br	10159d0 <_malloc_r+0x500>
 1015b44:	0027883a 	mov	r19,zero
 1015b48:	00c00044 	movi	r3,1
 1015b4c:	003f8606 	br	1015968 <_malloc_r+0x498>
 1015b50:	d1200c15 	stw	r4,-32720(gp)
 1015b54:	003f7306 	br	1015924 <_malloc_r+0x454>
 1015b58:	00801504 	movi	r2,84
 1015b5c:	11001936 	bltu	r2,r4,1015bc4 <_malloc_r+0x6f4>
 1015b60:	2804d33a 	srli	r2,r5,12
 1015b64:	11001b84 	addi	r4,r2,110
 1015b68:	200690fa 	slli	r3,r4,3
 1015b6c:	003f8e06 	br	10159a8 <_malloc_r+0x4d8>
 1015b70:	480b883a 	mov	r5,r9
 1015b74:	6807883a 	mov	r3,r13
 1015b78:	288000cc 	andi	r2,r5,3
 1015b7c:	18fffe04 	addi	r3,r3,-8
 1015b80:	297fffc4 	addi	r5,r5,-1
 1015b84:	10001526 	beq	r2,zero,1015bdc <_malloc_r+0x70c>
 1015b88:	18800217 	ldw	r2,8(r3)
 1015b8c:	10fffa26 	beq	r2,r3,1015b78 <_malloc_r+0x6a8>
 1015b90:	2109883a 	add	r4,r4,r4
 1015b94:	393f1e36 	bltu	r7,r4,1015810 <_malloc_r+0x340>
 1015b98:	203f1d26 	beq	r4,zero,1015810 <_malloc_r+0x340>
 1015b9c:	21c4703a 	and	r2,r4,r7
 1015ba0:	10000226 	beq	r2,zero,1015bac <_malloc_r+0x6dc>
 1015ba4:	6013883a 	mov	r9,r12
 1015ba8:	003ee106 	br	1015730 <_malloc_r+0x260>
 1015bac:	2109883a 	add	r4,r4,r4
 1015bb0:	3904703a 	and	r2,r7,r4
 1015bb4:	63000104 	addi	r12,r12,4
 1015bb8:	103ffc26 	beq	r2,zero,1015bac <_malloc_r+0x6dc>
 1015bbc:	6013883a 	mov	r9,r12
 1015bc0:	003edb06 	br	1015730 <_malloc_r+0x260>
 1015bc4:	00805504 	movi	r2,340
 1015bc8:	11000836 	bltu	r2,r4,1015bec <_malloc_r+0x71c>
 1015bcc:	2804d3fa 	srli	r2,r5,15
 1015bd0:	11001dc4 	addi	r4,r2,119
 1015bd4:	200690fa 	slli	r3,r4,3
 1015bd8:	003f7306 	br	10159a8 <_malloc_r+0x4d8>
 1015bdc:	0104303a 	nor	r2,zero,r4
 1015be0:	388e703a 	and	r7,r7,r2
 1015be4:	e1c00115 	stw	r7,4(fp)
 1015be8:	003fe906 	br	1015b90 <_malloc_r+0x6c0>
 1015bec:	00815504 	movi	r2,1364
 1015bf0:	1100032e 	bgeu	r2,r4,1015c00 <_malloc_r+0x730>
 1015bf4:	01001f84 	movi	r4,126
 1015bf8:	00c0fc04 	movi	r3,1008
 1015bfc:	003f6a06 	br	10159a8 <_malloc_r+0x4d8>
 1015c00:	2804d4ba 	srli	r2,r5,18
 1015c04:	11001f04 	addi	r4,r2,124
 1015c08:	200690fa 	slli	r3,r4,3
 1015c0c:	003f6606 	br	10159a8 <_malloc_r+0x4d8>

01015c10 <memchr>:
 1015c10:	008000c4 	movi	r2,3
 1015c14:	29403fcc 	andi	r5,r5,255
 1015c18:	2007883a 	mov	r3,r4
 1015c1c:	1180022e 	bgeu	r2,r6,1015c28 <memchr+0x18>
 1015c20:	2084703a 	and	r2,r4,r2
 1015c24:	10000b26 	beq	r2,zero,1015c54 <memchr+0x44>
 1015c28:	313fffc4 	addi	r4,r6,-1
 1015c2c:	3000051e 	bne	r6,zero,1015c44 <memchr+0x34>
 1015c30:	00002c06 	br	1015ce4 <memchr+0xd4>
 1015c34:	213fffc4 	addi	r4,r4,-1
 1015c38:	00bfffc4 	movi	r2,-1
 1015c3c:	18c00044 	addi	r3,r3,1
 1015c40:	20802826 	beq	r4,r2,1015ce4 <memchr+0xd4>
 1015c44:	18800003 	ldbu	r2,0(r3)
 1015c48:	28bffa1e 	bne	r5,r2,1015c34 <memchr+0x24>
 1015c4c:	1805883a 	mov	r2,r3
 1015c50:	f800283a 	ret
 1015c54:	0011883a 	mov	r8,zero
 1015c58:	0007883a 	mov	r3,zero
 1015c5c:	01c00104 	movi	r7,4
 1015c60:	4004923a 	slli	r2,r8,8
 1015c64:	18c00044 	addi	r3,r3,1
 1015c68:	1151883a 	add	r8,r2,r5
 1015c6c:	19fffc1e 	bne	r3,r7,1015c60 <memchr+0x50>
 1015c70:	02bfbff4 	movhi	r10,65279
 1015c74:	52bfbfc4 	addi	r10,r10,-257
 1015c78:	02602074 	movhi	r9,32897
 1015c7c:	4a602004 	addi	r9,r9,-32640
 1015c80:	02c000c4 	movi	r11,3
 1015c84:	20800017 	ldw	r2,0(r4)
 1015c88:	31bfff04 	addi	r6,r6,-4
 1015c8c:	200f883a 	mov	r7,r4
 1015c90:	1204f03a 	xor	r2,r2,r8
 1015c94:	1287883a 	add	r3,r2,r10
 1015c98:	1a46703a 	and	r3,r3,r9
 1015c9c:	0084303a 	nor	r2,zero,r2
 1015ca0:	10c4703a 	and	r2,r2,r3
 1015ca4:	10000b26 	beq	r2,zero,1015cd4 <memchr+0xc4>
 1015ca8:	20800003 	ldbu	r2,0(r4)
 1015cac:	28800f26 	beq	r5,r2,1015cec <memchr+0xdc>
 1015cb0:	20800043 	ldbu	r2,1(r4)
 1015cb4:	21c00044 	addi	r7,r4,1
 1015cb8:	28800c26 	beq	r5,r2,1015cec <memchr+0xdc>
 1015cbc:	20800083 	ldbu	r2,2(r4)
 1015cc0:	21c00084 	addi	r7,r4,2
 1015cc4:	28800926 	beq	r5,r2,1015cec <memchr+0xdc>
 1015cc8:	208000c3 	ldbu	r2,3(r4)
 1015ccc:	21c000c4 	addi	r7,r4,3
 1015cd0:	28800626 	beq	r5,r2,1015cec <memchr+0xdc>
 1015cd4:	21000104 	addi	r4,r4,4
 1015cd8:	59bfea36 	bltu	r11,r6,1015c84 <memchr+0x74>
 1015cdc:	2007883a 	mov	r3,r4
 1015ce0:	003fd106 	br	1015c28 <memchr+0x18>
 1015ce4:	0005883a 	mov	r2,zero
 1015ce8:	f800283a 	ret
 1015cec:	3805883a 	mov	r2,r7
 1015cf0:	f800283a 	ret

01015cf4 <memmove>:
 1015cf4:	2807883a 	mov	r3,r5
 1015cf8:	2011883a 	mov	r8,r4
 1015cfc:	29000c2e 	bgeu	r5,r4,1015d30 <memmove+0x3c>
 1015d00:	298f883a 	add	r7,r5,r6
 1015d04:	21c00a2e 	bgeu	r4,r7,1015d30 <memmove+0x3c>
 1015d08:	30000726 	beq	r6,zero,1015d28 <memmove+0x34>
 1015d0c:	2187883a 	add	r3,r4,r6
 1015d10:	198dc83a 	sub	r6,r3,r6
 1015d14:	39ffffc4 	addi	r7,r7,-1
 1015d18:	38800003 	ldbu	r2,0(r7)
 1015d1c:	18ffffc4 	addi	r3,r3,-1
 1015d20:	18800005 	stb	r2,0(r3)
 1015d24:	19bffb1e 	bne	r3,r6,1015d14 <memmove+0x20>
 1015d28:	2005883a 	mov	r2,r4
 1015d2c:	f800283a 	ret
 1015d30:	01c003c4 	movi	r7,15
 1015d34:	39800a36 	bltu	r7,r6,1015d60 <memmove+0x6c>
 1015d38:	303ffb26 	beq	r6,zero,1015d28 <memmove+0x34>
 1015d3c:	400f883a 	mov	r7,r8
 1015d40:	320d883a 	add	r6,r6,r8
 1015d44:	28800003 	ldbu	r2,0(r5)
 1015d48:	29400044 	addi	r5,r5,1
 1015d4c:	38800005 	stb	r2,0(r7)
 1015d50:	39c00044 	addi	r7,r7,1
 1015d54:	39bffb1e 	bne	r7,r6,1015d44 <memmove+0x50>
 1015d58:	2005883a 	mov	r2,r4
 1015d5c:	f800283a 	ret
 1015d60:	1904b03a 	or	r2,r3,r4
 1015d64:	108000cc 	andi	r2,r2,3
 1015d68:	103ff31e 	bne	r2,zero,1015d38 <memmove+0x44>
 1015d6c:	3811883a 	mov	r8,r7
 1015d70:	180b883a 	mov	r5,r3
 1015d74:	200f883a 	mov	r7,r4
 1015d78:	28c00017 	ldw	r3,0(r5)
 1015d7c:	31bffc04 	addi	r6,r6,-16
 1015d80:	38c00015 	stw	r3,0(r7)
 1015d84:	28800117 	ldw	r2,4(r5)
 1015d88:	38800115 	stw	r2,4(r7)
 1015d8c:	28c00217 	ldw	r3,8(r5)
 1015d90:	38c00215 	stw	r3,8(r7)
 1015d94:	28800317 	ldw	r2,12(r5)
 1015d98:	29400404 	addi	r5,r5,16
 1015d9c:	38800315 	stw	r2,12(r7)
 1015da0:	39c00404 	addi	r7,r7,16
 1015da4:	41bff436 	bltu	r8,r6,1015d78 <memmove+0x84>
 1015da8:	008000c4 	movi	r2,3
 1015dac:	1180072e 	bgeu	r2,r6,1015dcc <memmove+0xd8>
 1015db0:	1007883a 	mov	r3,r2
 1015db4:	28800017 	ldw	r2,0(r5)
 1015db8:	31bfff04 	addi	r6,r6,-4
 1015dbc:	29400104 	addi	r5,r5,4
 1015dc0:	38800015 	stw	r2,0(r7)
 1015dc4:	39c00104 	addi	r7,r7,4
 1015dc8:	19bffa36 	bltu	r3,r6,1015db4 <memmove+0xc0>
 1015dcc:	3811883a 	mov	r8,r7
 1015dd0:	003fd906 	br	1015d38 <memmove+0x44>

01015dd4 <memset>:
 1015dd4:	008000c4 	movi	r2,3
 1015dd8:	29403fcc 	andi	r5,r5,255
 1015ddc:	2007883a 	mov	r3,r4
 1015de0:	1180022e 	bgeu	r2,r6,1015dec <memset+0x18>
 1015de4:	2084703a 	and	r2,r4,r2
 1015de8:	10000826 	beq	r2,zero,1015e0c <memset+0x38>
 1015dec:	30000526 	beq	r6,zero,1015e04 <memset+0x30>
 1015df0:	2805883a 	mov	r2,r5
 1015df4:	30cd883a 	add	r6,r6,r3
 1015df8:	18800005 	stb	r2,0(r3)
 1015dfc:	18c00044 	addi	r3,r3,1
 1015e00:	19bffd1e 	bne	r3,r6,1015df8 <memset+0x24>
 1015e04:	2005883a 	mov	r2,r4
 1015e08:	f800283a 	ret
 1015e0c:	2804923a 	slli	r2,r5,8
 1015e10:	020003c4 	movi	r8,15
 1015e14:	200f883a 	mov	r7,r4
 1015e18:	2884b03a 	or	r2,r5,r2
 1015e1c:	1006943a 	slli	r3,r2,16
 1015e20:	10c6b03a 	or	r3,r2,r3
 1015e24:	41800a2e 	bgeu	r8,r6,1015e50 <memset+0x7c>
 1015e28:	4005883a 	mov	r2,r8
 1015e2c:	31bffc04 	addi	r6,r6,-16
 1015e30:	38c00015 	stw	r3,0(r7)
 1015e34:	38c00115 	stw	r3,4(r7)
 1015e38:	38c00215 	stw	r3,8(r7)
 1015e3c:	38c00315 	stw	r3,12(r7)
 1015e40:	39c00404 	addi	r7,r7,16
 1015e44:	11bff936 	bltu	r2,r6,1015e2c <memset+0x58>
 1015e48:	008000c4 	movi	r2,3
 1015e4c:	1180052e 	bgeu	r2,r6,1015e64 <memset+0x90>
 1015e50:	31bfff04 	addi	r6,r6,-4
 1015e54:	008000c4 	movi	r2,3
 1015e58:	38c00015 	stw	r3,0(r7)
 1015e5c:	39c00104 	addi	r7,r7,4
 1015e60:	11bffb36 	bltu	r2,r6,1015e50 <memset+0x7c>
 1015e64:	3807883a 	mov	r3,r7
 1015e68:	003fe006 	br	1015dec <memset+0x18>

01015e6c <_Bfree>:
 1015e6c:	28000826 	beq	r5,zero,1015e90 <_Bfree+0x24>
 1015e70:	28800117 	ldw	r2,4(r5)
 1015e74:	21001317 	ldw	r4,76(r4)
 1015e78:	1085883a 	add	r2,r2,r2
 1015e7c:	1085883a 	add	r2,r2,r2
 1015e80:	1105883a 	add	r2,r2,r4
 1015e84:	10c00017 	ldw	r3,0(r2)
 1015e88:	28c00015 	stw	r3,0(r5)
 1015e8c:	11400015 	stw	r5,0(r2)
 1015e90:	f800283a 	ret

01015e94 <__hi0bits>:
 1015e94:	20bfffec 	andhi	r2,r4,65535
 1015e98:	10001426 	beq	r2,zero,1015eec <__hi0bits+0x58>
 1015e9c:	0007883a 	mov	r3,zero
 1015ea0:	20bfc02c 	andhi	r2,r4,65280
 1015ea4:	1000021e 	bne	r2,zero,1015eb0 <__hi0bits+0x1c>
 1015ea8:	2008923a 	slli	r4,r4,8
 1015eac:	18c00204 	addi	r3,r3,8
 1015eb0:	20bc002c 	andhi	r2,r4,61440
 1015eb4:	1000021e 	bne	r2,zero,1015ec0 <__hi0bits+0x2c>
 1015eb8:	2008913a 	slli	r4,r4,4
 1015ebc:	18c00104 	addi	r3,r3,4
 1015ec0:	20b0002c 	andhi	r2,r4,49152
 1015ec4:	1000031e 	bne	r2,zero,1015ed4 <__hi0bits+0x40>
 1015ec8:	2105883a 	add	r2,r4,r4
 1015ecc:	18c00084 	addi	r3,r3,2
 1015ed0:	1089883a 	add	r4,r2,r2
 1015ed4:	20000316 	blt	r4,zero,1015ee4 <__hi0bits+0x50>
 1015ed8:	2090002c 	andhi	r2,r4,16384
 1015edc:	10000626 	beq	r2,zero,1015ef8 <__hi0bits+0x64>
 1015ee0:	18c00044 	addi	r3,r3,1
 1015ee4:	1805883a 	mov	r2,r3
 1015ee8:	f800283a 	ret
 1015eec:	2008943a 	slli	r4,r4,16
 1015ef0:	00c00404 	movi	r3,16
 1015ef4:	003fea06 	br	1015ea0 <__hi0bits+0xc>
 1015ef8:	00c00804 	movi	r3,32
 1015efc:	1805883a 	mov	r2,r3
 1015f00:	f800283a 	ret

01015f04 <__lo0bits>:
 1015f04:	20c00017 	ldw	r3,0(r4)
 1015f08:	188001cc 	andi	r2,r3,7
 1015f0c:	10000a26 	beq	r2,zero,1015f38 <__lo0bits+0x34>
 1015f10:	1880004c 	andi	r2,r3,1
 1015f14:	1005003a 	cmpeq	r2,r2,zero
 1015f18:	10002126 	beq	r2,zero,1015fa0 <__lo0bits+0x9c>
 1015f1c:	1880008c 	andi	r2,r3,2
 1015f20:	1000251e 	bne	r2,zero,1015fb8 <__lo0bits+0xb4>
 1015f24:	1804d0ba 	srli	r2,r3,2
 1015f28:	01400084 	movi	r5,2
 1015f2c:	20800015 	stw	r2,0(r4)
 1015f30:	2805883a 	mov	r2,r5
 1015f34:	f800283a 	ret
 1015f38:	18bfffcc 	andi	r2,r3,65535
 1015f3c:	10001526 	beq	r2,zero,1015f94 <__lo0bits+0x90>
 1015f40:	000b883a 	mov	r5,zero
 1015f44:	18803fcc 	andi	r2,r3,255
 1015f48:	1000021e 	bne	r2,zero,1015f54 <__lo0bits+0x50>
 1015f4c:	1806d23a 	srli	r3,r3,8
 1015f50:	29400204 	addi	r5,r5,8
 1015f54:	188003cc 	andi	r2,r3,15
 1015f58:	1000021e 	bne	r2,zero,1015f64 <__lo0bits+0x60>
 1015f5c:	1806d13a 	srli	r3,r3,4
 1015f60:	29400104 	addi	r5,r5,4
 1015f64:	188000cc 	andi	r2,r3,3
 1015f68:	1000021e 	bne	r2,zero,1015f74 <__lo0bits+0x70>
 1015f6c:	1806d0ba 	srli	r3,r3,2
 1015f70:	29400084 	addi	r5,r5,2
 1015f74:	1880004c 	andi	r2,r3,1
 1015f78:	1000031e 	bne	r2,zero,1015f88 <__lo0bits+0x84>
 1015f7c:	1806d07a 	srli	r3,r3,1
 1015f80:	18000a26 	beq	r3,zero,1015fac <__lo0bits+0xa8>
 1015f84:	29400044 	addi	r5,r5,1
 1015f88:	2805883a 	mov	r2,r5
 1015f8c:	20c00015 	stw	r3,0(r4)
 1015f90:	f800283a 	ret
 1015f94:	1806d43a 	srli	r3,r3,16
 1015f98:	01400404 	movi	r5,16
 1015f9c:	003fe906 	br	1015f44 <__lo0bits+0x40>
 1015fa0:	000b883a 	mov	r5,zero
 1015fa4:	2805883a 	mov	r2,r5
 1015fa8:	f800283a 	ret
 1015fac:	01400804 	movi	r5,32
 1015fb0:	2805883a 	mov	r2,r5
 1015fb4:	f800283a 	ret
 1015fb8:	1804d07a 	srli	r2,r3,1
 1015fbc:	01400044 	movi	r5,1
 1015fc0:	20800015 	stw	r2,0(r4)
 1015fc4:	003fda06 	br	1015f30 <__lo0bits+0x2c>

01015fc8 <__mcmp>:
 1015fc8:	20800417 	ldw	r2,16(r4)
 1015fcc:	28c00417 	ldw	r3,16(r5)
 1015fd0:	10cfc83a 	sub	r7,r2,r3
 1015fd4:	38000c1e 	bne	r7,zero,1016008 <__mcmp+0x40>
 1015fd8:	18c5883a 	add	r2,r3,r3
 1015fdc:	1085883a 	add	r2,r2,r2
 1015fe0:	10c00504 	addi	r3,r2,20
 1015fe4:	21000504 	addi	r4,r4,20
 1015fe8:	28cb883a 	add	r5,r5,r3
 1015fec:	2085883a 	add	r2,r4,r2
 1015ff0:	10bfff04 	addi	r2,r2,-4
 1015ff4:	297fff04 	addi	r5,r5,-4
 1015ff8:	11800017 	ldw	r6,0(r2)
 1015ffc:	28c00017 	ldw	r3,0(r5)
 1016000:	30c0031e 	bne	r6,r3,1016010 <__mcmp+0x48>
 1016004:	20bffa36 	bltu	r4,r2,1015ff0 <__mcmp+0x28>
 1016008:	3805883a 	mov	r2,r7
 101600c:	f800283a 	ret
 1016010:	30c00336 	bltu	r6,r3,1016020 <__mcmp+0x58>
 1016014:	01c00044 	movi	r7,1
 1016018:	3805883a 	mov	r2,r7
 101601c:	f800283a 	ret
 1016020:	01ffffc4 	movi	r7,-1
 1016024:	003ff806 	br	1016008 <__mcmp+0x40>

01016028 <__ulp>:
 1016028:	295ffc2c 	andhi	r5,r5,32752
 101602c:	013f3034 	movhi	r4,64704
 1016030:	290b883a 	add	r5,r5,r4
 1016034:	0145c83a 	sub	r2,zero,r5
 1016038:	1007d53a 	srai	r3,r2,20
 101603c:	000d883a 	mov	r6,zero
 1016040:	0140040e 	bge	zero,r5,1016054 <__ulp+0x2c>
 1016044:	280f883a 	mov	r7,r5
 1016048:	3807883a 	mov	r3,r7
 101604c:	3005883a 	mov	r2,r6
 1016050:	f800283a 	ret
 1016054:	008004c4 	movi	r2,19
 1016058:	193ffb04 	addi	r4,r3,-20
 101605c:	10c00c0e 	bge	r2,r3,1016090 <__ulp+0x68>
 1016060:	008007c4 	movi	r2,31
 1016064:	1107c83a 	sub	r3,r2,r4
 1016068:	00800784 	movi	r2,30
 101606c:	01400044 	movi	r5,1
 1016070:	11000216 	blt	r2,r4,101607c <__ulp+0x54>
 1016074:	00800044 	movi	r2,1
 1016078:	10ca983a 	sll	r5,r2,r3
 101607c:	000f883a 	mov	r7,zero
 1016080:	280d883a 	mov	r6,r5
 1016084:	3807883a 	mov	r3,r7
 1016088:	3005883a 	mov	r2,r6
 101608c:	f800283a 	ret
 1016090:	00800234 	movhi	r2,8
 1016094:	10cfd83a 	sra	r7,r2,r3
 1016098:	000d883a 	mov	r6,zero
 101609c:	3005883a 	mov	r2,r6
 10160a0:	3807883a 	mov	r3,r7
 10160a4:	f800283a 	ret

010160a8 <__b2d>:
 10160a8:	20800417 	ldw	r2,16(r4)
 10160ac:	defff904 	addi	sp,sp,-28
 10160b0:	dd000415 	stw	r20,16(sp)
 10160b4:	1085883a 	add	r2,r2,r2
 10160b8:	25000504 	addi	r20,r4,20
 10160bc:	1085883a 	add	r2,r2,r2
 10160c0:	dc000015 	stw	r16,0(sp)
 10160c4:	a0a1883a 	add	r16,r20,r2
 10160c8:	dd400515 	stw	r21,20(sp)
 10160cc:	857fff17 	ldw	r21,-4(r16)
 10160d0:	dc400115 	stw	r17,4(sp)
 10160d4:	dfc00615 	stw	ra,24(sp)
 10160d8:	a809883a 	mov	r4,r21
 10160dc:	2823883a 	mov	r17,r5
 10160e0:	dcc00315 	stw	r19,12(sp)
 10160e4:	dc800215 	stw	r18,8(sp)
 10160e8:	1015e940 	call	1015e94 <__hi0bits>
 10160ec:	100b883a 	mov	r5,r2
 10160f0:	00800804 	movi	r2,32
 10160f4:	1145c83a 	sub	r2,r2,r5
 10160f8:	88800015 	stw	r2,0(r17)
 10160fc:	00800284 	movi	r2,10
 1016100:	80ffff04 	addi	r3,r16,-4
 1016104:	11401416 	blt	r2,r5,1016158 <__b2d+0xb0>
 1016108:	008002c4 	movi	r2,11
 101610c:	1149c83a 	sub	r4,r2,r5
 1016110:	a0c02736 	bltu	r20,r3,10161b0 <__b2d+0x108>
 1016114:	000d883a 	mov	r6,zero
 1016118:	28800544 	addi	r2,r5,21
 101611c:	a906d83a 	srl	r3,r21,r4
 1016120:	a884983a 	sll	r2,r21,r2
 1016124:	1ccffc34 	orhi	r19,r3,16368
 1016128:	11a4b03a 	or	r18,r2,r6
 101612c:	9005883a 	mov	r2,r18
 1016130:	9807883a 	mov	r3,r19
 1016134:	dfc00617 	ldw	ra,24(sp)
 1016138:	dd400517 	ldw	r21,20(sp)
 101613c:	dd000417 	ldw	r20,16(sp)
 1016140:	dcc00317 	ldw	r19,12(sp)
 1016144:	dc800217 	ldw	r18,8(sp)
 1016148:	dc400117 	ldw	r17,4(sp)
 101614c:	dc000017 	ldw	r16,0(sp)
 1016150:	dec00704 	addi	sp,sp,28
 1016154:	f800283a 	ret
 1016158:	a0c00e36 	bltu	r20,r3,1016194 <__b2d+0xec>
 101615c:	293ffd44 	addi	r4,r5,-11
 1016160:	000d883a 	mov	r6,zero
 1016164:	20000f26 	beq	r4,zero,10161a4 <__b2d+0xfc>
 1016168:	00800804 	movi	r2,32
 101616c:	110bc83a 	sub	r5,r2,r4
 1016170:	a0c01236 	bltu	r20,r3,10161bc <__b2d+0x114>
 1016174:	000f883a 	mov	r7,zero
 1016178:	a904983a 	sll	r2,r21,r4
 101617c:	3146d83a 	srl	r3,r6,r5
 1016180:	3108983a 	sll	r4,r6,r4
 1016184:	108ffc34 	orhi	r2,r2,16368
 1016188:	18a6b03a 	or	r19,r3,r2
 101618c:	3924b03a 	or	r18,r7,r4
 1016190:	003fe606 	br	101612c <__b2d+0x84>
 1016194:	293ffd44 	addi	r4,r5,-11
 1016198:	81bffe17 	ldw	r6,-8(r16)
 101619c:	80fffe04 	addi	r3,r16,-8
 10161a0:	203ff11e 	bne	r4,zero,1016168 <__b2d+0xc0>
 10161a4:	accffc34 	orhi	r19,r21,16368
 10161a8:	3025883a 	mov	r18,r6
 10161ac:	003fdf06 	br	101612c <__b2d+0x84>
 10161b0:	18bfff17 	ldw	r2,-4(r3)
 10161b4:	110cd83a 	srl	r6,r2,r4
 10161b8:	003fd706 	br	1016118 <__b2d+0x70>
 10161bc:	18bfff17 	ldw	r2,-4(r3)
 10161c0:	114ed83a 	srl	r7,r2,r5
 10161c4:	003fec06 	br	1016178 <__b2d+0xd0>

010161c8 <__ratio>:
 10161c8:	defff904 	addi	sp,sp,-28
 10161cc:	dc400215 	stw	r17,8(sp)
 10161d0:	2823883a 	mov	r17,r5
 10161d4:	d80b883a 	mov	r5,sp
 10161d8:	dfc00615 	stw	ra,24(sp)
 10161dc:	dd000515 	stw	r20,20(sp)
 10161e0:	dcc00415 	stw	r19,16(sp)
 10161e4:	dc800315 	stw	r18,12(sp)
 10161e8:	2025883a 	mov	r18,r4
 10161ec:	10160a80 	call	10160a8 <__b2d>
 10161f0:	8809883a 	mov	r4,r17
 10161f4:	d9400104 	addi	r5,sp,4
 10161f8:	1027883a 	mov	r19,r2
 10161fc:	1829883a 	mov	r20,r3
 1016200:	10160a80 	call	10160a8 <__b2d>
 1016204:	89000417 	ldw	r4,16(r17)
 1016208:	91c00417 	ldw	r7,16(r18)
 101620c:	d9800117 	ldw	r6,4(sp)
 1016210:	180b883a 	mov	r5,r3
 1016214:	390fc83a 	sub	r7,r7,r4
 1016218:	1009883a 	mov	r4,r2
 101621c:	d8800017 	ldw	r2,0(sp)
 1016220:	380e917a 	slli	r7,r7,5
 1016224:	2011883a 	mov	r8,r4
 1016228:	1185c83a 	sub	r2,r2,r6
 101622c:	11c5883a 	add	r2,r2,r7
 1016230:	1006953a 	slli	r3,r2,20
 1016234:	2813883a 	mov	r9,r5
 1016238:	00800d0e 	bge	zero,r2,1016270 <__ratio+0xa8>
 101623c:	1d29883a 	add	r20,r3,r20
 1016240:	a00b883a 	mov	r5,r20
 1016244:	480f883a 	mov	r7,r9
 1016248:	9809883a 	mov	r4,r19
 101624c:	400d883a 	mov	r6,r8
 1016250:	100c59c0 	call	100c59c <__divdf3>
 1016254:	dfc00617 	ldw	ra,24(sp)
 1016258:	dd000517 	ldw	r20,20(sp)
 101625c:	dcc00417 	ldw	r19,16(sp)
 1016260:	dc800317 	ldw	r18,12(sp)
 1016264:	dc400217 	ldw	r17,8(sp)
 1016268:	dec00704 	addi	sp,sp,28
 101626c:	f800283a 	ret
 1016270:	28d3c83a 	sub	r9,r5,r3
 1016274:	003ff206 	br	1016240 <__ratio+0x78>

01016278 <_mprec_log10>:
 1016278:	defffe04 	addi	sp,sp,-8
 101627c:	008005c4 	movi	r2,23
 1016280:	dc000015 	stw	r16,0(sp)
 1016284:	dfc00115 	stw	ra,4(sp)
 1016288:	2021883a 	mov	r16,r4
 101628c:	11000c16 	blt	r2,r4,10162c0 <_mprec_log10+0x48>
 1016290:	200490fa 	slli	r2,r4,3
 1016294:	00c040b4 	movhi	r3,258
 1016298:	18df1104 	addi	r3,r3,31812
 101629c:	10c5883a 	add	r2,r2,r3
 10162a0:	12400117 	ldw	r9,4(r2)
 10162a4:	12000017 	ldw	r8,0(r2)
 10162a8:	4807883a 	mov	r3,r9
 10162ac:	4005883a 	mov	r2,r8
 10162b0:	dfc00117 	ldw	ra,4(sp)
 10162b4:	dc000017 	ldw	r16,0(sp)
 10162b8:	dec00204 	addi	sp,sp,8
 10162bc:	f800283a 	ret
 10162c0:	0011883a 	mov	r8,zero
 10162c4:	024ffc34 	movhi	r9,16368
 10162c8:	0005883a 	mov	r2,zero
 10162cc:	00d00934 	movhi	r3,16420
 10162d0:	480b883a 	mov	r5,r9
 10162d4:	4009883a 	mov	r4,r8
 10162d8:	180f883a 	mov	r7,r3
 10162dc:	100d883a 	mov	r6,r2
 10162e0:	100c1d80 	call	100c1d8 <__muldf3>
 10162e4:	843fffc4 	addi	r16,r16,-1
 10162e8:	1011883a 	mov	r8,r2
 10162ec:	1813883a 	mov	r9,r3
 10162f0:	803ff51e 	bne	r16,zero,10162c8 <_mprec_log10+0x50>
 10162f4:	4005883a 	mov	r2,r8
 10162f8:	4807883a 	mov	r3,r9
 10162fc:	dfc00117 	ldw	ra,4(sp)
 1016300:	dc000017 	ldw	r16,0(sp)
 1016304:	dec00204 	addi	sp,sp,8
 1016308:	f800283a 	ret

0101630c <__copybits>:
 101630c:	297fffc4 	addi	r5,r5,-1
 1016310:	30800417 	ldw	r2,16(r6)
 1016314:	280bd17a 	srai	r5,r5,5
 1016318:	31800504 	addi	r6,r6,20
 101631c:	1085883a 	add	r2,r2,r2
 1016320:	294b883a 	add	r5,r5,r5
 1016324:	294b883a 	add	r5,r5,r5
 1016328:	1085883a 	add	r2,r2,r2
 101632c:	290b883a 	add	r5,r5,r4
 1016330:	3087883a 	add	r3,r6,r2
 1016334:	29400104 	addi	r5,r5,4
 1016338:	30c0052e 	bgeu	r6,r3,1016350 <__copybits+0x44>
 101633c:	30800017 	ldw	r2,0(r6)
 1016340:	31800104 	addi	r6,r6,4
 1016344:	20800015 	stw	r2,0(r4)
 1016348:	21000104 	addi	r4,r4,4
 101634c:	30fffb36 	bltu	r6,r3,101633c <__copybits+0x30>
 1016350:	2140032e 	bgeu	r4,r5,1016360 <__copybits+0x54>
 1016354:	20000015 	stw	zero,0(r4)
 1016358:	21000104 	addi	r4,r4,4
 101635c:	217ffd36 	bltu	r4,r5,1016354 <__copybits+0x48>
 1016360:	f800283a 	ret

01016364 <__any_on>:
 1016364:	20800417 	ldw	r2,16(r4)
 1016368:	2807d17a 	srai	r3,r5,5
 101636c:	21000504 	addi	r4,r4,20
 1016370:	10c00d0e 	bge	r2,r3,10163a8 <__any_on+0x44>
 1016374:	1085883a 	add	r2,r2,r2
 1016378:	1085883a 	add	r2,r2,r2
 101637c:	208d883a 	add	r6,r4,r2
 1016380:	2180182e 	bgeu	r4,r6,10163e4 <__any_on+0x80>
 1016384:	30bfff17 	ldw	r2,-4(r6)
 1016388:	30ffff04 	addi	r3,r6,-4
 101638c:	1000041e 	bne	r2,zero,10163a0 <__any_on+0x3c>
 1016390:	20c0142e 	bgeu	r4,r3,10163e4 <__any_on+0x80>
 1016394:	18ffff04 	addi	r3,r3,-4
 1016398:	18800017 	ldw	r2,0(r3)
 101639c:	103ffc26 	beq	r2,zero,1016390 <__any_on+0x2c>
 10163a0:	00800044 	movi	r2,1
 10163a4:	f800283a 	ret
 10163a8:	18800a0e 	bge	r3,r2,10163d4 <__any_on+0x70>
 10163ac:	294007cc 	andi	r5,r5,31
 10163b0:	28000826 	beq	r5,zero,10163d4 <__any_on+0x70>
 10163b4:	18c5883a 	add	r2,r3,r3
 10163b8:	1085883a 	add	r2,r2,r2
 10163bc:	208d883a 	add	r6,r4,r2
 10163c0:	30c00017 	ldw	r3,0(r6)
 10163c4:	1944d83a 	srl	r2,r3,r5
 10163c8:	1144983a 	sll	r2,r2,r5
 10163cc:	18bff41e 	bne	r3,r2,10163a0 <__any_on+0x3c>
 10163d0:	003feb06 	br	1016380 <__any_on+0x1c>
 10163d4:	18c5883a 	add	r2,r3,r3
 10163d8:	1085883a 	add	r2,r2,r2
 10163dc:	208d883a 	add	r6,r4,r2
 10163e0:	003fe706 	br	1016380 <__any_on+0x1c>
 10163e4:	0005883a 	mov	r2,zero
 10163e8:	f800283a 	ret

010163ec <_Balloc>:
 10163ec:	20c01317 	ldw	r3,76(r4)
 10163f0:	defffb04 	addi	sp,sp,-20
 10163f4:	dcc00315 	stw	r19,12(sp)
 10163f8:	dc800215 	stw	r18,8(sp)
 10163fc:	dfc00415 	stw	ra,16(sp)
 1016400:	2825883a 	mov	r18,r5
 1016404:	dc400115 	stw	r17,4(sp)
 1016408:	dc000015 	stw	r16,0(sp)
 101640c:	2027883a 	mov	r19,r4
 1016410:	01800404 	movi	r6,16
 1016414:	01400104 	movi	r5,4
 1016418:	18001726 	beq	r3,zero,1016478 <_Balloc+0x8c>
 101641c:	01400044 	movi	r5,1
 1016420:	9485883a 	add	r2,r18,r18
 1016424:	2ca2983a 	sll	r17,r5,r18
 1016428:	1085883a 	add	r2,r2,r2
 101642c:	10c7883a 	add	r3,r2,r3
 1016430:	1c000017 	ldw	r16,0(r3)
 1016434:	8c4d883a 	add	r6,r17,r17
 1016438:	318d883a 	add	r6,r6,r6
 101643c:	9809883a 	mov	r4,r19
 1016440:	31800504 	addi	r6,r6,20
 1016444:	80001226 	beq	r16,zero,1016490 <_Balloc+0xa4>
 1016448:	80800017 	ldw	r2,0(r16)
 101644c:	18800015 	stw	r2,0(r3)
 1016450:	80000415 	stw	zero,16(r16)
 1016454:	80000315 	stw	zero,12(r16)
 1016458:	8005883a 	mov	r2,r16
 101645c:	dfc00417 	ldw	ra,16(sp)
 1016460:	dcc00317 	ldw	r19,12(sp)
 1016464:	dc800217 	ldw	r18,8(sp)
 1016468:	dc400117 	ldw	r17,4(sp)
 101646c:	dc000017 	ldw	r16,0(sp)
 1016470:	dec00504 	addi	sp,sp,20
 1016474:	f800283a 	ret
 1016478:	1017a000 	call	1017a00 <_calloc_r>
 101647c:	1007883a 	mov	r3,r2
 1016480:	0021883a 	mov	r16,zero
 1016484:	98801315 	stw	r2,76(r19)
 1016488:	103fe41e 	bne	r2,zero,101641c <_Balloc+0x30>
 101648c:	003ff206 	br	1016458 <_Balloc+0x6c>
 1016490:	1017a000 	call	1017a00 <_calloc_r>
 1016494:	103ff026 	beq	r2,zero,1016458 <_Balloc+0x6c>
 1016498:	1021883a 	mov	r16,r2
 101649c:	14800115 	stw	r18,4(r2)
 10164a0:	14400215 	stw	r17,8(r2)
 10164a4:	003fea06 	br	1016450 <_Balloc+0x64>

010164a8 <__d2b>:
 10164a8:	defff504 	addi	sp,sp,-44
 10164ac:	dcc00515 	stw	r19,20(sp)
 10164b0:	04c00044 	movi	r19,1
 10164b4:	dc000215 	stw	r16,8(sp)
 10164b8:	2821883a 	mov	r16,r5
 10164bc:	980b883a 	mov	r5,r19
 10164c0:	ddc00915 	stw	r23,36(sp)
 10164c4:	dd800815 	stw	r22,32(sp)
 10164c8:	dd400715 	stw	r21,28(sp)
 10164cc:	dd000615 	stw	r20,24(sp)
 10164d0:	dc800415 	stw	r18,16(sp)
 10164d4:	dc400315 	stw	r17,12(sp)
 10164d8:	dfc00a15 	stw	ra,40(sp)
 10164dc:	3023883a 	mov	r17,r6
 10164e0:	382d883a 	mov	r22,r7
 10164e4:	ddc00b17 	ldw	r23,44(sp)
 10164e8:	10163ec0 	call	10163ec <_Balloc>
 10164ec:	1025883a 	mov	r18,r2
 10164f0:	00a00034 	movhi	r2,32768
 10164f4:	10bfffc4 	addi	r2,r2,-1
 10164f8:	8888703a 	and	r4,r17,r2
 10164fc:	202ad53a 	srli	r21,r4,20
 1016500:	00800434 	movhi	r2,16
 1016504:	10bfffc4 	addi	r2,r2,-1
 1016508:	8886703a 	and	r3,r17,r2
 101650c:	a829003a 	cmpeq	r20,r21,zero
 1016510:	800b883a 	mov	r5,r16
 1016514:	d8c00115 	stw	r3,4(sp)
 1016518:	94000504 	addi	r16,r18,20
 101651c:	a000021e 	bne	r20,zero,1016528 <__d2b+0x80>
 1016520:	18c00434 	orhi	r3,r3,16
 1016524:	d8c00115 	stw	r3,4(sp)
 1016528:	28002726 	beq	r5,zero,10165c8 <__d2b+0x120>
 101652c:	d809883a 	mov	r4,sp
 1016530:	d9400015 	stw	r5,0(sp)
 1016534:	1015f040 	call	1015f04 <__lo0bits>
 1016538:	100d883a 	mov	r6,r2
 101653c:	10003526 	beq	r2,zero,1016614 <__d2b+0x16c>
 1016540:	d8c00117 	ldw	r3,4(sp)
 1016544:	00800804 	movi	r2,32
 1016548:	1185c83a 	sub	r2,r2,r6
 101654c:	d9000017 	ldw	r4,0(sp)
 1016550:	1886983a 	sll	r3,r3,r2
 1016554:	1906b03a 	or	r3,r3,r4
 1016558:	90c00515 	stw	r3,20(r18)
 101655c:	d8c00117 	ldw	r3,4(sp)
 1016560:	1986d83a 	srl	r3,r3,r6
 1016564:	d8c00115 	stw	r3,4(sp)
 1016568:	180b003a 	cmpeq	r5,r3,zero
 101656c:	00800084 	movi	r2,2
 1016570:	114bc83a 	sub	r5,r2,r5
 1016574:	80c00115 	stw	r3,4(r16)
 1016578:	91400415 	stw	r5,16(r18)
 101657c:	a0001a1e 	bne	r20,zero,10165e8 <__d2b+0x140>
 1016580:	3545883a 	add	r2,r6,r21
 1016584:	10bef344 	addi	r2,r2,-1075
 1016588:	00c00d44 	movi	r3,53
 101658c:	b0800015 	stw	r2,0(r22)
 1016590:	1987c83a 	sub	r3,r3,r6
 1016594:	b8c00015 	stw	r3,0(r23)
 1016598:	9005883a 	mov	r2,r18
 101659c:	dfc00a17 	ldw	ra,40(sp)
 10165a0:	ddc00917 	ldw	r23,36(sp)
 10165a4:	dd800817 	ldw	r22,32(sp)
 10165a8:	dd400717 	ldw	r21,28(sp)
 10165ac:	dd000617 	ldw	r20,24(sp)
 10165b0:	dcc00517 	ldw	r19,20(sp)
 10165b4:	dc800417 	ldw	r18,16(sp)
 10165b8:	dc400317 	ldw	r17,12(sp)
 10165bc:	dc000217 	ldw	r16,8(sp)
 10165c0:	dec00b04 	addi	sp,sp,44
 10165c4:	f800283a 	ret
 10165c8:	d9000104 	addi	r4,sp,4
 10165cc:	1015f040 	call	1015f04 <__lo0bits>
 10165d0:	11800804 	addi	r6,r2,32
 10165d4:	d8800117 	ldw	r2,4(sp)
 10165d8:	94c00415 	stw	r19,16(r18)
 10165dc:	980b883a 	mov	r5,r19
 10165e0:	90800515 	stw	r2,20(r18)
 10165e4:	a03fe626 	beq	r20,zero,1016580 <__d2b+0xd8>
 10165e8:	2945883a 	add	r2,r5,r5
 10165ec:	1085883a 	add	r2,r2,r2
 10165f0:	1405883a 	add	r2,r2,r16
 10165f4:	113fff17 	ldw	r4,-4(r2)
 10165f8:	30fef384 	addi	r3,r6,-1074
 10165fc:	2820917a 	slli	r16,r5,5
 1016600:	b0c00015 	stw	r3,0(r22)
 1016604:	1015e940 	call	1015e94 <__hi0bits>
 1016608:	80a1c83a 	sub	r16,r16,r2
 101660c:	bc000015 	stw	r16,0(r23)
 1016610:	003fe106 	br	1016598 <__d2b+0xf0>
 1016614:	d8800017 	ldw	r2,0(sp)
 1016618:	90800515 	stw	r2,20(r18)
 101661c:	d8c00117 	ldw	r3,4(sp)
 1016620:	003fd106 	br	1016568 <__d2b+0xc0>

01016624 <__mdiff>:
 1016624:	defffb04 	addi	sp,sp,-20
 1016628:	dc000015 	stw	r16,0(sp)
 101662c:	2821883a 	mov	r16,r5
 1016630:	dc800215 	stw	r18,8(sp)
 1016634:	300b883a 	mov	r5,r6
 1016638:	2025883a 	mov	r18,r4
 101663c:	8009883a 	mov	r4,r16
 1016640:	dc400115 	stw	r17,4(sp)
 1016644:	dfc00415 	stw	ra,16(sp)
 1016648:	dcc00315 	stw	r19,12(sp)
 101664c:	3023883a 	mov	r17,r6
 1016650:	1015fc80 	call	1015fc8 <__mcmp>
 1016654:	10004226 	beq	r2,zero,1016760 <__mdiff+0x13c>
 1016658:	10005016 	blt	r2,zero,101679c <__mdiff+0x178>
 101665c:	0027883a 	mov	r19,zero
 1016660:	81400117 	ldw	r5,4(r16)
 1016664:	9009883a 	mov	r4,r18
 1016668:	10163ec0 	call	10163ec <_Balloc>
 101666c:	1019883a 	mov	r12,r2
 1016670:	82800417 	ldw	r10,16(r16)
 1016674:	88800417 	ldw	r2,16(r17)
 1016678:	81800504 	addi	r6,r16,20
 101667c:	5287883a 	add	r3,r10,r10
 1016680:	1085883a 	add	r2,r2,r2
 1016684:	18c7883a 	add	r3,r3,r3
 1016688:	1085883a 	add	r2,r2,r2
 101668c:	8a000504 	addi	r8,r17,20
 1016690:	64c00315 	stw	r19,12(r12)
 1016694:	30db883a 	add	r13,r6,r3
 1016698:	4097883a 	add	r11,r8,r2
 101669c:	61c00504 	addi	r7,r12,20
 10166a0:	0013883a 	mov	r9,zero
 10166a4:	31000017 	ldw	r4,0(r6)
 10166a8:	41400017 	ldw	r5,0(r8)
 10166ac:	42000104 	addi	r8,r8,4
 10166b0:	20bfffcc 	andi	r2,r4,65535
 10166b4:	28ffffcc 	andi	r3,r5,65535
 10166b8:	10c5c83a 	sub	r2,r2,r3
 10166bc:	1245883a 	add	r2,r2,r9
 10166c0:	2008d43a 	srli	r4,r4,16
 10166c4:	280ad43a 	srli	r5,r5,16
 10166c8:	1007d43a 	srai	r3,r2,16
 10166cc:	3880000d 	sth	r2,0(r7)
 10166d0:	2149c83a 	sub	r4,r4,r5
 10166d4:	20c9883a 	add	r4,r4,r3
 10166d8:	3900008d 	sth	r4,2(r7)
 10166dc:	31800104 	addi	r6,r6,4
 10166e0:	39c00104 	addi	r7,r7,4
 10166e4:	2013d43a 	srai	r9,r4,16
 10166e8:	42ffee36 	bltu	r8,r11,10166a4 <__mdiff+0x80>
 10166ec:	33400c2e 	bgeu	r6,r13,1016720 <__mdiff+0xfc>
 10166f0:	30800017 	ldw	r2,0(r6)
 10166f4:	31800104 	addi	r6,r6,4
 10166f8:	10ffffcc 	andi	r3,r2,65535
 10166fc:	1a47883a 	add	r3,r3,r9
 1016700:	1004d43a 	srli	r2,r2,16
 1016704:	1809d43a 	srai	r4,r3,16
 1016708:	38c0000d 	sth	r3,0(r7)
 101670c:	1105883a 	add	r2,r2,r4
 1016710:	3880008d 	sth	r2,2(r7)
 1016714:	1013d43a 	srai	r9,r2,16
 1016718:	39c00104 	addi	r7,r7,4
 101671c:	337ff436 	bltu	r6,r13,10166f0 <__mdiff+0xcc>
 1016720:	38bfff17 	ldw	r2,-4(r7)
 1016724:	38ffff04 	addi	r3,r7,-4
 1016728:	1000041e 	bne	r2,zero,101673c <__mdiff+0x118>
 101672c:	18ffff04 	addi	r3,r3,-4
 1016730:	18800017 	ldw	r2,0(r3)
 1016734:	52bfffc4 	addi	r10,r10,-1
 1016738:	103ffc26 	beq	r2,zero,101672c <__mdiff+0x108>
 101673c:	6005883a 	mov	r2,r12
 1016740:	62800415 	stw	r10,16(r12)
 1016744:	dfc00417 	ldw	ra,16(sp)
 1016748:	dcc00317 	ldw	r19,12(sp)
 101674c:	dc800217 	ldw	r18,8(sp)
 1016750:	dc400117 	ldw	r17,4(sp)
 1016754:	dc000017 	ldw	r16,0(sp)
 1016758:	dec00504 	addi	sp,sp,20
 101675c:	f800283a 	ret
 1016760:	9009883a 	mov	r4,r18
 1016764:	000b883a 	mov	r5,zero
 1016768:	10163ec0 	call	10163ec <_Balloc>
 101676c:	1019883a 	mov	r12,r2
 1016770:	00800044 	movi	r2,1
 1016774:	60800415 	stw	r2,16(r12)
 1016778:	6005883a 	mov	r2,r12
 101677c:	60000515 	stw	zero,20(r12)
 1016780:	dfc00417 	ldw	ra,16(sp)
 1016784:	dcc00317 	ldw	r19,12(sp)
 1016788:	dc800217 	ldw	r18,8(sp)
 101678c:	dc400117 	ldw	r17,4(sp)
 1016790:	dc000017 	ldw	r16,0(sp)
 1016794:	dec00504 	addi	sp,sp,20
 1016798:	f800283a 	ret
 101679c:	880d883a 	mov	r6,r17
 10167a0:	04c00044 	movi	r19,1
 10167a4:	8023883a 	mov	r17,r16
 10167a8:	3021883a 	mov	r16,r6
 10167ac:	003fac06 	br	1016660 <__mdiff+0x3c>

010167b0 <__lshift>:
 10167b0:	defff904 	addi	sp,sp,-28
 10167b4:	28800417 	ldw	r2,16(r5)
 10167b8:	dc000015 	stw	r16,0(sp)
 10167bc:	3021d17a 	srai	r16,r6,5
 10167c0:	28c00217 	ldw	r3,8(r5)
 10167c4:	10800044 	addi	r2,r2,1
 10167c8:	dc400115 	stw	r17,4(sp)
 10167cc:	80a3883a 	add	r17,r16,r2
 10167d0:	dd400515 	stw	r21,20(sp)
 10167d4:	dd000415 	stw	r20,16(sp)
 10167d8:	dc800215 	stw	r18,8(sp)
 10167dc:	dfc00615 	stw	ra,24(sp)
 10167e0:	2825883a 	mov	r18,r5
 10167e4:	dcc00315 	stw	r19,12(sp)
 10167e8:	3029883a 	mov	r20,r6
 10167ec:	202b883a 	mov	r21,r4
 10167f0:	29400117 	ldw	r5,4(r5)
 10167f4:	1c40030e 	bge	r3,r17,1016804 <__lshift+0x54>
 10167f8:	18c7883a 	add	r3,r3,r3
 10167fc:	29400044 	addi	r5,r5,1
 1016800:	1c7ffd16 	blt	r3,r17,10167f8 <__lshift+0x48>
 1016804:	a809883a 	mov	r4,r21
 1016808:	10163ec0 	call	10163ec <_Balloc>
 101680c:	1027883a 	mov	r19,r2
 1016810:	11400504 	addi	r5,r2,20
 1016814:	0400090e 	bge	zero,r16,101683c <__lshift+0x8c>
 1016818:	2805883a 	mov	r2,r5
 101681c:	0007883a 	mov	r3,zero
 1016820:	18c00044 	addi	r3,r3,1
 1016824:	10000015 	stw	zero,0(r2)
 1016828:	10800104 	addi	r2,r2,4
 101682c:	80fffc1e 	bne	r16,r3,1016820 <__lshift+0x70>
 1016830:	8405883a 	add	r2,r16,r16
 1016834:	1085883a 	add	r2,r2,r2
 1016838:	288b883a 	add	r5,r5,r2
 101683c:	90800417 	ldw	r2,16(r18)
 1016840:	91000504 	addi	r4,r18,20
 1016844:	a18007cc 	andi	r6,r20,31
 1016848:	1085883a 	add	r2,r2,r2
 101684c:	1085883a 	add	r2,r2,r2
 1016850:	208f883a 	add	r7,r4,r2
 1016854:	30001e26 	beq	r6,zero,10168d0 <__lshift+0x120>
 1016858:	00800804 	movi	r2,32
 101685c:	1191c83a 	sub	r8,r2,r6
 1016860:	0007883a 	mov	r3,zero
 1016864:	20800017 	ldw	r2,0(r4)
 1016868:	1184983a 	sll	r2,r2,r6
 101686c:	1884b03a 	or	r2,r3,r2
 1016870:	28800015 	stw	r2,0(r5)
 1016874:	20c00017 	ldw	r3,0(r4)
 1016878:	21000104 	addi	r4,r4,4
 101687c:	29400104 	addi	r5,r5,4
 1016880:	1a06d83a 	srl	r3,r3,r8
 1016884:	21fff736 	bltu	r4,r7,1016864 <__lshift+0xb4>
 1016888:	28c00015 	stw	r3,0(r5)
 101688c:	18000126 	beq	r3,zero,1016894 <__lshift+0xe4>
 1016890:	8c400044 	addi	r17,r17,1
 1016894:	88bfffc4 	addi	r2,r17,-1
 1016898:	98800415 	stw	r2,16(r19)
 101689c:	a809883a 	mov	r4,r21
 10168a0:	900b883a 	mov	r5,r18
 10168a4:	1015e6c0 	call	1015e6c <_Bfree>
 10168a8:	9805883a 	mov	r2,r19
 10168ac:	dfc00617 	ldw	ra,24(sp)
 10168b0:	dd400517 	ldw	r21,20(sp)
 10168b4:	dd000417 	ldw	r20,16(sp)
 10168b8:	dcc00317 	ldw	r19,12(sp)
 10168bc:	dc800217 	ldw	r18,8(sp)
 10168c0:	dc400117 	ldw	r17,4(sp)
 10168c4:	dc000017 	ldw	r16,0(sp)
 10168c8:	dec00704 	addi	sp,sp,28
 10168cc:	f800283a 	ret
 10168d0:	20800017 	ldw	r2,0(r4)
 10168d4:	21000104 	addi	r4,r4,4
 10168d8:	28800015 	stw	r2,0(r5)
 10168dc:	29400104 	addi	r5,r5,4
 10168e0:	21ffec2e 	bgeu	r4,r7,1016894 <__lshift+0xe4>
 10168e4:	20800017 	ldw	r2,0(r4)
 10168e8:	21000104 	addi	r4,r4,4
 10168ec:	28800015 	stw	r2,0(r5)
 10168f0:	29400104 	addi	r5,r5,4
 10168f4:	21fff636 	bltu	r4,r7,10168d0 <__lshift+0x120>
 10168f8:	003fe606 	br	1016894 <__lshift+0xe4>

010168fc <__multiply>:
 10168fc:	defff904 	addi	sp,sp,-28
 1016900:	dcc00315 	stw	r19,12(sp)
 1016904:	dc800215 	stw	r18,8(sp)
 1016908:	2cc00417 	ldw	r19,16(r5)
 101690c:	34800417 	ldw	r18,16(r6)
 1016910:	dd000415 	stw	r20,16(sp)
 1016914:	dc400115 	stw	r17,4(sp)
 1016918:	dfc00615 	stw	ra,24(sp)
 101691c:	dd400515 	stw	r21,20(sp)
 1016920:	dc000015 	stw	r16,0(sp)
 1016924:	2823883a 	mov	r17,r5
 1016928:	3029883a 	mov	r20,r6
 101692c:	9c80040e 	bge	r19,r18,1016940 <__multiply+0x44>
 1016930:	9027883a 	mov	r19,r18
 1016934:	2c800417 	ldw	r18,16(r5)
 1016938:	2829883a 	mov	r20,r5
 101693c:	3023883a 	mov	r17,r6
 1016940:	88800217 	ldw	r2,8(r17)
 1016944:	9ca1883a 	add	r16,r19,r18
 1016948:	89400117 	ldw	r5,4(r17)
 101694c:	1400010e 	bge	r2,r16,1016954 <__multiply+0x58>
 1016950:	29400044 	addi	r5,r5,1
 1016954:	10163ec0 	call	10163ec <_Balloc>
 1016958:	102b883a 	mov	r21,r2
 101695c:	8405883a 	add	r2,r16,r16
 1016960:	1085883a 	add	r2,r2,r2
 1016964:	a9000504 	addi	r4,r21,20
 1016968:	209d883a 	add	r14,r4,r2
 101696c:	2380042e 	bgeu	r4,r14,1016980 <__multiply+0x84>
 1016970:	2005883a 	mov	r2,r4
 1016974:	10000015 	stw	zero,0(r2)
 1016978:	10800104 	addi	r2,r2,4
 101697c:	13bffd36 	bltu	r2,r14,1016974 <__multiply+0x78>
 1016980:	9485883a 	add	r2,r18,r18
 1016984:	9cc7883a 	add	r3,r19,r19
 1016988:	a1800504 	addi	r6,r20,20
 101698c:	1085883a 	add	r2,r2,r2
 1016990:	8b400504 	addi	r13,r17,20
 1016994:	18c7883a 	add	r3,r3,r3
 1016998:	309f883a 	add	r15,r6,r2
 101699c:	68d7883a 	add	r11,r13,r3
 10169a0:	33c03b2e 	bgeu	r6,r15,1016a90 <__multiply+0x194>
 10169a4:	2019883a 	mov	r12,r4
 10169a8:	30800017 	ldw	r2,0(r6)
 10169ac:	127fffcc 	andi	r9,r2,65535
 10169b0:	48001826 	beq	r9,zero,1016a14 <__multiply+0x118>
 10169b4:	6811883a 	mov	r8,r13
 10169b8:	600f883a 	mov	r7,r12
 10169bc:	0015883a 	mov	r10,zero
 10169c0:	40c00017 	ldw	r3,0(r8)
 10169c4:	39400017 	ldw	r5,0(r7)
 10169c8:	42000104 	addi	r8,r8,4
 10169cc:	193fffcc 	andi	r4,r3,65535
 10169d0:	4909383a 	mul	r4,r9,r4
 10169d4:	1806d43a 	srli	r3,r3,16
 10169d8:	28bfffcc 	andi	r2,r5,65535
 10169dc:	5085883a 	add	r2,r10,r2
 10169e0:	2089883a 	add	r4,r4,r2
 10169e4:	48c7383a 	mul	r3,r9,r3
 10169e8:	280ad43a 	srli	r5,r5,16
 10169ec:	2004d43a 	srli	r2,r4,16
 10169f0:	3900000d 	sth	r4,0(r7)
 10169f4:	1947883a 	add	r3,r3,r5
 10169f8:	10c5883a 	add	r2,r2,r3
 10169fc:	3880008d 	sth	r2,2(r7)
 1016a00:	1014d43a 	srli	r10,r2,16
 1016a04:	39c00104 	addi	r7,r7,4
 1016a08:	42ffed36 	bltu	r8,r11,10169c0 <__multiply+0xc4>
 1016a0c:	3a800015 	stw	r10,0(r7)
 1016a10:	30800017 	ldw	r2,0(r6)
 1016a14:	1012d43a 	srli	r9,r2,16
 1016a18:	48001926 	beq	r9,zero,1016a80 <__multiply+0x184>
 1016a1c:	60800017 	ldw	r2,0(r12)
 1016a20:	6811883a 	mov	r8,r13
 1016a24:	600f883a 	mov	r7,r12
 1016a28:	0015883a 	mov	r10,zero
 1016a2c:	100b883a 	mov	r5,r2
 1016a30:	41000017 	ldw	r4,0(r8)
 1016a34:	2806d43a 	srli	r3,r5,16
 1016a38:	3880000d 	sth	r2,0(r7)
 1016a3c:	20bfffcc 	andi	r2,r4,65535
 1016a40:	4885383a 	mul	r2,r9,r2
 1016a44:	50c7883a 	add	r3,r10,r3
 1016a48:	2008d43a 	srli	r4,r4,16
 1016a4c:	10c5883a 	add	r2,r2,r3
 1016a50:	3880008d 	sth	r2,2(r7)
 1016a54:	39c00104 	addi	r7,r7,4
 1016a58:	39400017 	ldw	r5,0(r7)
 1016a5c:	4909383a 	mul	r4,r9,r4
 1016a60:	1004d43a 	srli	r2,r2,16
 1016a64:	28ffffcc 	andi	r3,r5,65535
 1016a68:	20c9883a 	add	r4,r4,r3
 1016a6c:	1105883a 	add	r2,r2,r4
 1016a70:	42000104 	addi	r8,r8,4
 1016a74:	1014d43a 	srli	r10,r2,16
 1016a78:	42ffed36 	bltu	r8,r11,1016a30 <__multiply+0x134>
 1016a7c:	38800015 	stw	r2,0(r7)
 1016a80:	31800104 	addi	r6,r6,4
 1016a84:	33c0022e 	bgeu	r6,r15,1016a90 <__multiply+0x194>
 1016a88:	63000104 	addi	r12,r12,4
 1016a8c:	003fc606 	br	10169a8 <__multiply+0xac>
 1016a90:	0400090e 	bge	zero,r16,1016ab8 <__multiply+0x1bc>
 1016a94:	70bfff17 	ldw	r2,-4(r14)
 1016a98:	70ffff04 	addi	r3,r14,-4
 1016a9c:	10000326 	beq	r2,zero,1016aac <__multiply+0x1b0>
 1016aa0:	00000506 	br	1016ab8 <__multiply+0x1bc>
 1016aa4:	18800017 	ldw	r2,0(r3)
 1016aa8:	1000031e 	bne	r2,zero,1016ab8 <__multiply+0x1bc>
 1016aac:	843fffc4 	addi	r16,r16,-1
 1016ab0:	18ffff04 	addi	r3,r3,-4
 1016ab4:	803ffb1e 	bne	r16,zero,1016aa4 <__multiply+0x1a8>
 1016ab8:	a805883a 	mov	r2,r21
 1016abc:	ac000415 	stw	r16,16(r21)
 1016ac0:	dfc00617 	ldw	ra,24(sp)
 1016ac4:	dd400517 	ldw	r21,20(sp)
 1016ac8:	dd000417 	ldw	r20,16(sp)
 1016acc:	dcc00317 	ldw	r19,12(sp)
 1016ad0:	dc800217 	ldw	r18,8(sp)
 1016ad4:	dc400117 	ldw	r17,4(sp)
 1016ad8:	dc000017 	ldw	r16,0(sp)
 1016adc:	dec00704 	addi	sp,sp,28
 1016ae0:	f800283a 	ret

01016ae4 <__i2b>:
 1016ae4:	defffd04 	addi	sp,sp,-12
 1016ae8:	dc000015 	stw	r16,0(sp)
 1016aec:	04000044 	movi	r16,1
 1016af0:	dc800115 	stw	r18,4(sp)
 1016af4:	2825883a 	mov	r18,r5
 1016af8:	800b883a 	mov	r5,r16
 1016afc:	dfc00215 	stw	ra,8(sp)
 1016b00:	10163ec0 	call	10163ec <_Balloc>
 1016b04:	14000415 	stw	r16,16(r2)
 1016b08:	14800515 	stw	r18,20(r2)
 1016b0c:	dfc00217 	ldw	ra,8(sp)
 1016b10:	dc800117 	ldw	r18,4(sp)
 1016b14:	dc000017 	ldw	r16,0(sp)
 1016b18:	dec00304 	addi	sp,sp,12
 1016b1c:	f800283a 	ret

01016b20 <__multadd>:
 1016b20:	defffa04 	addi	sp,sp,-24
 1016b24:	dc800215 	stw	r18,8(sp)
 1016b28:	2c800417 	ldw	r18,16(r5)
 1016b2c:	dd000415 	stw	r20,16(sp)
 1016b30:	dcc00315 	stw	r19,12(sp)
 1016b34:	dc000015 	stw	r16,0(sp)
 1016b38:	dfc00515 	stw	ra,20(sp)
 1016b3c:	3821883a 	mov	r16,r7
 1016b40:	dc400115 	stw	r17,4(sp)
 1016b44:	2827883a 	mov	r19,r5
 1016b48:	2029883a 	mov	r20,r4
 1016b4c:	2a000504 	addi	r8,r5,20
 1016b50:	000f883a 	mov	r7,zero
 1016b54:	40800017 	ldw	r2,0(r8)
 1016b58:	39c00044 	addi	r7,r7,1
 1016b5c:	10ffffcc 	andi	r3,r2,65535
 1016b60:	1987383a 	mul	r3,r3,r6
 1016b64:	1004d43a 	srli	r2,r2,16
 1016b68:	1c07883a 	add	r3,r3,r16
 1016b6c:	180ad43a 	srli	r5,r3,16
 1016b70:	1185383a 	mul	r2,r2,r6
 1016b74:	18ffffcc 	andi	r3,r3,65535
 1016b78:	1145883a 	add	r2,r2,r5
 1016b7c:	1008943a 	slli	r4,r2,16
 1016b80:	1020d43a 	srli	r16,r2,16
 1016b84:	20c9883a 	add	r4,r4,r3
 1016b88:	41000015 	stw	r4,0(r8)
 1016b8c:	42000104 	addi	r8,r8,4
 1016b90:	3cbff016 	blt	r7,r18,1016b54 <__multadd+0x34>
 1016b94:	80000826 	beq	r16,zero,1016bb8 <__multadd+0x98>
 1016b98:	98800217 	ldw	r2,8(r19)
 1016b9c:	90800f0e 	bge	r18,r2,1016bdc <__multadd+0xbc>
 1016ba0:	9485883a 	add	r2,r18,r18
 1016ba4:	1085883a 	add	r2,r2,r2
 1016ba8:	14c5883a 	add	r2,r2,r19
 1016bac:	90c00044 	addi	r3,r18,1
 1016bb0:	14000515 	stw	r16,20(r2)
 1016bb4:	98c00415 	stw	r3,16(r19)
 1016bb8:	9805883a 	mov	r2,r19
 1016bbc:	dfc00517 	ldw	ra,20(sp)
 1016bc0:	dd000417 	ldw	r20,16(sp)
 1016bc4:	dcc00317 	ldw	r19,12(sp)
 1016bc8:	dc800217 	ldw	r18,8(sp)
 1016bcc:	dc400117 	ldw	r17,4(sp)
 1016bd0:	dc000017 	ldw	r16,0(sp)
 1016bd4:	dec00604 	addi	sp,sp,24
 1016bd8:	f800283a 	ret
 1016bdc:	99400117 	ldw	r5,4(r19)
 1016be0:	a009883a 	mov	r4,r20
 1016be4:	29400044 	addi	r5,r5,1
 1016be8:	10163ec0 	call	10163ec <_Balloc>
 1016bec:	99800417 	ldw	r6,16(r19)
 1016bf0:	99400304 	addi	r5,r19,12
 1016bf4:	11000304 	addi	r4,r2,12
 1016bf8:	318d883a 	add	r6,r6,r6
 1016bfc:	318d883a 	add	r6,r6,r6
 1016c00:	31800204 	addi	r6,r6,8
 1016c04:	1023883a 	mov	r17,r2
 1016c08:	100d7500 	call	100d750 <memcpy>
 1016c0c:	980b883a 	mov	r5,r19
 1016c10:	a009883a 	mov	r4,r20
 1016c14:	1015e6c0 	call	1015e6c <_Bfree>
 1016c18:	8827883a 	mov	r19,r17
 1016c1c:	003fe006 	br	1016ba0 <__multadd+0x80>

01016c20 <__pow5mult>:
 1016c20:	defffa04 	addi	sp,sp,-24
 1016c24:	308000cc 	andi	r2,r6,3
 1016c28:	dd000415 	stw	r20,16(sp)
 1016c2c:	dcc00315 	stw	r19,12(sp)
 1016c30:	dc000015 	stw	r16,0(sp)
 1016c34:	dfc00515 	stw	ra,20(sp)
 1016c38:	dc800215 	stw	r18,8(sp)
 1016c3c:	dc400115 	stw	r17,4(sp)
 1016c40:	3021883a 	mov	r16,r6
 1016c44:	2027883a 	mov	r19,r4
 1016c48:	2829883a 	mov	r20,r5
 1016c4c:	10002b1e 	bne	r2,zero,1016cfc <__pow5mult+0xdc>
 1016c50:	8025d0ba 	srai	r18,r16,2
 1016c54:	90001b26 	beq	r18,zero,1016cc4 <__pow5mult+0xa4>
 1016c58:	9c001217 	ldw	r16,72(r19)
 1016c5c:	8000081e 	bne	r16,zero,1016c80 <__pow5mult+0x60>
 1016c60:	00003006 	br	1016d24 <__pow5mult+0x104>
 1016c64:	800b883a 	mov	r5,r16
 1016c68:	800d883a 	mov	r6,r16
 1016c6c:	9809883a 	mov	r4,r19
 1016c70:	90001426 	beq	r18,zero,1016cc4 <__pow5mult+0xa4>
 1016c74:	80800017 	ldw	r2,0(r16)
 1016c78:	10001b26 	beq	r2,zero,1016ce8 <__pow5mult+0xc8>
 1016c7c:	1021883a 	mov	r16,r2
 1016c80:	9080004c 	andi	r2,r18,1
 1016c84:	1005003a 	cmpeq	r2,r2,zero
 1016c88:	9025d07a 	srai	r18,r18,1
 1016c8c:	800d883a 	mov	r6,r16
 1016c90:	9809883a 	mov	r4,r19
 1016c94:	a00b883a 	mov	r5,r20
 1016c98:	103ff21e 	bne	r2,zero,1016c64 <__pow5mult+0x44>
 1016c9c:	10168fc0 	call	10168fc <__multiply>
 1016ca0:	a00b883a 	mov	r5,r20
 1016ca4:	9809883a 	mov	r4,r19
 1016ca8:	1023883a 	mov	r17,r2
 1016cac:	1015e6c0 	call	1015e6c <_Bfree>
 1016cb0:	8829883a 	mov	r20,r17
 1016cb4:	800b883a 	mov	r5,r16
 1016cb8:	800d883a 	mov	r6,r16
 1016cbc:	9809883a 	mov	r4,r19
 1016cc0:	903fec1e 	bne	r18,zero,1016c74 <__pow5mult+0x54>
 1016cc4:	a005883a 	mov	r2,r20
 1016cc8:	dfc00517 	ldw	ra,20(sp)
 1016ccc:	dd000417 	ldw	r20,16(sp)
 1016cd0:	dcc00317 	ldw	r19,12(sp)
 1016cd4:	dc800217 	ldw	r18,8(sp)
 1016cd8:	dc400117 	ldw	r17,4(sp)
 1016cdc:	dc000017 	ldw	r16,0(sp)
 1016ce0:	dec00604 	addi	sp,sp,24
 1016ce4:	f800283a 	ret
 1016ce8:	10168fc0 	call	10168fc <__multiply>
 1016cec:	80800015 	stw	r2,0(r16)
 1016cf0:	1021883a 	mov	r16,r2
 1016cf4:	10000015 	stw	zero,0(r2)
 1016cf8:	003fe106 	br	1016c80 <__pow5mult+0x60>
 1016cfc:	1085883a 	add	r2,r2,r2
 1016d00:	00c040b4 	movhi	r3,258
 1016d04:	18df5704 	addi	r3,r3,32092
 1016d08:	1085883a 	add	r2,r2,r2
 1016d0c:	10c5883a 	add	r2,r2,r3
 1016d10:	11bfff17 	ldw	r6,-4(r2)
 1016d14:	000f883a 	mov	r7,zero
 1016d18:	1016b200 	call	1016b20 <__multadd>
 1016d1c:	1029883a 	mov	r20,r2
 1016d20:	003fcb06 	br	1016c50 <__pow5mult+0x30>
 1016d24:	9809883a 	mov	r4,r19
 1016d28:	01409c44 	movi	r5,625
 1016d2c:	1016ae40 	call	1016ae4 <__i2b>
 1016d30:	98801215 	stw	r2,72(r19)
 1016d34:	1021883a 	mov	r16,r2
 1016d38:	10000015 	stw	zero,0(r2)
 1016d3c:	003fd006 	br	1016c80 <__pow5mult+0x60>

01016d40 <__s2b>:
 1016d40:	defff904 	addi	sp,sp,-28
 1016d44:	dcc00315 	stw	r19,12(sp)
 1016d48:	dc800215 	stw	r18,8(sp)
 1016d4c:	2827883a 	mov	r19,r5
 1016d50:	2025883a 	mov	r18,r4
 1016d54:	01400244 	movi	r5,9
 1016d58:	39000204 	addi	r4,r7,8
 1016d5c:	dd000415 	stw	r20,16(sp)
 1016d60:	dc400115 	stw	r17,4(sp)
 1016d64:	dfc00615 	stw	ra,24(sp)
 1016d68:	dd400515 	stw	r21,20(sp)
 1016d6c:	dc000015 	stw	r16,0(sp)
 1016d70:	3829883a 	mov	r20,r7
 1016d74:	3023883a 	mov	r17,r6
 1016d78:	100cd0c0 	call	100cd0c <__divsi3>
 1016d7c:	00c00044 	movi	r3,1
 1016d80:	1880350e 	bge	r3,r2,1016e58 <__s2b+0x118>
 1016d84:	000b883a 	mov	r5,zero
 1016d88:	18c7883a 	add	r3,r3,r3
 1016d8c:	29400044 	addi	r5,r5,1
 1016d90:	18bffd16 	blt	r3,r2,1016d88 <__s2b+0x48>
 1016d94:	9009883a 	mov	r4,r18
 1016d98:	10163ec0 	call	10163ec <_Balloc>
 1016d9c:	1011883a 	mov	r8,r2
 1016da0:	d8800717 	ldw	r2,28(sp)
 1016da4:	00c00044 	movi	r3,1
 1016da8:	01800244 	movi	r6,9
 1016dac:	40800515 	stw	r2,20(r8)
 1016db0:	40c00415 	stw	r3,16(r8)
 1016db4:	3440260e 	bge	r6,r17,1016e50 <__s2b+0x110>
 1016db8:	3021883a 	mov	r16,r6
 1016dbc:	99ab883a 	add	r21,r19,r6
 1016dc0:	9c05883a 	add	r2,r19,r16
 1016dc4:	11c00007 	ldb	r7,0(r2)
 1016dc8:	400b883a 	mov	r5,r8
 1016dcc:	9009883a 	mov	r4,r18
 1016dd0:	39fff404 	addi	r7,r7,-48
 1016dd4:	01800284 	movi	r6,10
 1016dd8:	1016b200 	call	1016b20 <__multadd>
 1016ddc:	84000044 	addi	r16,r16,1
 1016de0:	1011883a 	mov	r8,r2
 1016de4:	8c3ff61e 	bne	r17,r16,1016dc0 <__s2b+0x80>
 1016de8:	ac45883a 	add	r2,r21,r17
 1016dec:	117ffe04 	addi	r5,r2,-8
 1016df0:	880d883a 	mov	r6,r17
 1016df4:	35000c0e 	bge	r6,r20,1016e28 <__s2b+0xe8>
 1016df8:	a185c83a 	sub	r2,r20,r6
 1016dfc:	2821883a 	mov	r16,r5
 1016e00:	28a3883a 	add	r17,r5,r2
 1016e04:	81c00007 	ldb	r7,0(r16)
 1016e08:	400b883a 	mov	r5,r8
 1016e0c:	9009883a 	mov	r4,r18
 1016e10:	39fff404 	addi	r7,r7,-48
 1016e14:	01800284 	movi	r6,10
 1016e18:	1016b200 	call	1016b20 <__multadd>
 1016e1c:	84000044 	addi	r16,r16,1
 1016e20:	1011883a 	mov	r8,r2
 1016e24:	847ff71e 	bne	r16,r17,1016e04 <__s2b+0xc4>
 1016e28:	4005883a 	mov	r2,r8
 1016e2c:	dfc00617 	ldw	ra,24(sp)
 1016e30:	dd400517 	ldw	r21,20(sp)
 1016e34:	dd000417 	ldw	r20,16(sp)
 1016e38:	dcc00317 	ldw	r19,12(sp)
 1016e3c:	dc800217 	ldw	r18,8(sp)
 1016e40:	dc400117 	ldw	r17,4(sp)
 1016e44:	dc000017 	ldw	r16,0(sp)
 1016e48:	dec00704 	addi	sp,sp,28
 1016e4c:	f800283a 	ret
 1016e50:	99400284 	addi	r5,r19,10
 1016e54:	003fe706 	br	1016df4 <__s2b+0xb4>
 1016e58:	000b883a 	mov	r5,zero
 1016e5c:	003fcd06 	br	1016d94 <__s2b+0x54>

01016e60 <putc>:
 1016e60:	defffc04 	addi	sp,sp,-16
 1016e64:	dc800215 	stw	r18,8(sp)
 1016e68:	048040f4 	movhi	r18,259
 1016e6c:	94a67004 	addi	r18,r18,-26176
 1016e70:	90c00017 	ldw	r3,0(r18)
 1016e74:	dc400115 	stw	r17,4(sp)
 1016e78:	dc000015 	stw	r16,0(sp)
 1016e7c:	dfc00315 	stw	ra,12(sp)
 1016e80:	2023883a 	mov	r17,r4
 1016e84:	2821883a 	mov	r16,r5
 1016e88:	18000226 	beq	r3,zero,1016e94 <putc+0x34>
 1016e8c:	18800e17 	ldw	r2,56(r3)
 1016e90:	10001126 	beq	r2,zero,1016ed8 <putc+0x78>
 1016e94:	80800217 	ldw	r2,8(r16)
 1016e98:	10ffffc4 	addi	r3,r2,-1
 1016e9c:	80c00215 	stw	r3,8(r16)
 1016ea0:	18001316 	blt	r3,zero,1016ef0 <putc+0x90>
 1016ea4:	80800017 	ldw	r2,0(r16)
 1016ea8:	14400005 	stb	r17,0(r2)
 1016eac:	80c00017 	ldw	r3,0(r16)
 1016eb0:	18800044 	addi	r2,r3,1
 1016eb4:	18c00003 	ldbu	r3,0(r3)
 1016eb8:	80800015 	stw	r2,0(r16)
 1016ebc:	1805883a 	mov	r2,r3
 1016ec0:	dfc00317 	ldw	ra,12(sp)
 1016ec4:	dc800217 	ldw	r18,8(sp)
 1016ec8:	dc400117 	ldw	r17,4(sp)
 1016ecc:	dc000017 	ldw	r16,0(sp)
 1016ed0:	dec00404 	addi	sp,sp,16
 1016ed4:	f800283a 	ret
 1016ed8:	1809883a 	mov	r4,r3
 1016edc:	1013a300 	call	1013a30 <__sinit>
 1016ee0:	80800217 	ldw	r2,8(r16)
 1016ee4:	10ffffc4 	addi	r3,r2,-1
 1016ee8:	80c00215 	stw	r3,8(r16)
 1016eec:	183fed0e 	bge	r3,zero,1016ea4 <putc+0x44>
 1016ef0:	80800617 	ldw	r2,24(r16)
 1016ef4:	18800f16 	blt	r3,r2,1016f34 <putc+0xd4>
 1016ef8:	80800017 	ldw	r2,0(r16)
 1016efc:	14400005 	stb	r17,0(r2)
 1016f00:	81000017 	ldw	r4,0(r16)
 1016f04:	00800284 	movi	r2,10
 1016f08:	20c00003 	ldbu	r3,0(r4)
 1016f0c:	18801226 	beq	r3,r2,1016f58 <putc+0xf8>
 1016f10:	20800044 	addi	r2,r4,1
 1016f14:	80800015 	stw	r2,0(r16)
 1016f18:	1805883a 	mov	r2,r3
 1016f1c:	dfc00317 	ldw	ra,12(sp)
 1016f20:	dc800217 	ldw	r18,8(sp)
 1016f24:	dc400117 	ldw	r17,4(sp)
 1016f28:	dc000017 	ldw	r16,0(sp)
 1016f2c:	dec00404 	addi	sp,sp,16
 1016f30:	f800283a 	ret
 1016f34:	91000017 	ldw	r4,0(r18)
 1016f38:	880b883a 	mov	r5,r17
 1016f3c:	800d883a 	mov	r6,r16
 1016f40:	dfc00317 	ldw	ra,12(sp)
 1016f44:	dc800217 	ldw	r18,8(sp)
 1016f48:	dc400117 	ldw	r17,4(sp)
 1016f4c:	dc000017 	ldw	r16,0(sp)
 1016f50:	dec00404 	addi	sp,sp,16
 1016f54:	101783c1 	jmpi	101783c <__swbuf_r>
 1016f58:	91000017 	ldw	r4,0(r18)
 1016f5c:	180b883a 	mov	r5,r3
 1016f60:	003ff606 	br	1016f3c <putc+0xdc>

01016f64 <_putc_r>:
 1016f64:	defffc04 	addi	sp,sp,-16
 1016f68:	dc400215 	stw	r17,8(sp)
 1016f6c:	dc000115 	stw	r16,4(sp)
 1016f70:	dfc00315 	stw	ra,12(sp)
 1016f74:	2021883a 	mov	r16,r4
 1016f78:	2823883a 	mov	r17,r5
 1016f7c:	20000226 	beq	r4,zero,1016f88 <_putc_r+0x24>
 1016f80:	20800e17 	ldw	r2,56(r4)
 1016f84:	10001026 	beq	r2,zero,1016fc8 <_putc_r+0x64>
 1016f88:	30800217 	ldw	r2,8(r6)
 1016f8c:	10ffffc4 	addi	r3,r2,-1
 1016f90:	30c00215 	stw	r3,8(r6)
 1016f94:	18001316 	blt	r3,zero,1016fe4 <_putc_r+0x80>
 1016f98:	30800017 	ldw	r2,0(r6)
 1016f9c:	14400005 	stb	r17,0(r2)
 1016fa0:	30c00017 	ldw	r3,0(r6)
 1016fa4:	18800044 	addi	r2,r3,1
 1016fa8:	18c00003 	ldbu	r3,0(r3)
 1016fac:	30800015 	stw	r2,0(r6)
 1016fb0:	1805883a 	mov	r2,r3
 1016fb4:	dfc00317 	ldw	ra,12(sp)
 1016fb8:	dc400217 	ldw	r17,8(sp)
 1016fbc:	dc000117 	ldw	r16,4(sp)
 1016fc0:	dec00404 	addi	sp,sp,16
 1016fc4:	f800283a 	ret
 1016fc8:	d9800015 	stw	r6,0(sp)
 1016fcc:	1013a300 	call	1013a30 <__sinit>
 1016fd0:	d9800017 	ldw	r6,0(sp)
 1016fd4:	30800217 	ldw	r2,8(r6)
 1016fd8:	10ffffc4 	addi	r3,r2,-1
 1016fdc:	30c00215 	stw	r3,8(r6)
 1016fe0:	183fed0e 	bge	r3,zero,1016f98 <_putc_r+0x34>
 1016fe4:	30800617 	ldw	r2,24(r6)
 1016fe8:	18800e16 	blt	r3,r2,1017024 <_putc_r+0xc0>
 1016fec:	30800017 	ldw	r2,0(r6)
 1016ff0:	14400005 	stb	r17,0(r2)
 1016ff4:	31000017 	ldw	r4,0(r6)
 1016ff8:	00800284 	movi	r2,10
 1016ffc:	20c00003 	ldbu	r3,0(r4)
 1017000:	18800f26 	beq	r3,r2,1017040 <_putc_r+0xdc>
 1017004:	20800044 	addi	r2,r4,1
 1017008:	30800015 	stw	r2,0(r6)
 101700c:	1805883a 	mov	r2,r3
 1017010:	dfc00317 	ldw	ra,12(sp)
 1017014:	dc400217 	ldw	r17,8(sp)
 1017018:	dc000117 	ldw	r16,4(sp)
 101701c:	dec00404 	addi	sp,sp,16
 1017020:	f800283a 	ret
 1017024:	8009883a 	mov	r4,r16
 1017028:	880b883a 	mov	r5,r17
 101702c:	dfc00317 	ldw	ra,12(sp)
 1017030:	dc400217 	ldw	r17,8(sp)
 1017034:	dc000117 	ldw	r16,4(sp)
 1017038:	dec00404 	addi	sp,sp,16
 101703c:	101783c1 	jmpi	101783c <__swbuf_r>
 1017040:	8009883a 	mov	r4,r16
 1017044:	180b883a 	mov	r5,r3
 1017048:	003ff806 	br	101702c <_putc_r+0xc8>

0101704c <_realloc_r>:
 101704c:	defff404 	addi	sp,sp,-48
 1017050:	dd800815 	stw	r22,32(sp)
 1017054:	dc800415 	stw	r18,16(sp)
 1017058:	dc400315 	stw	r17,12(sp)
 101705c:	dfc00b15 	stw	ra,44(sp)
 1017060:	df000a15 	stw	fp,40(sp)
 1017064:	ddc00915 	stw	r23,36(sp)
 1017068:	dd400715 	stw	r21,28(sp)
 101706c:	dd000615 	stw	r20,24(sp)
 1017070:	dcc00515 	stw	r19,20(sp)
 1017074:	dc000215 	stw	r16,8(sp)
 1017078:	2825883a 	mov	r18,r5
 101707c:	3023883a 	mov	r17,r6
 1017080:	202d883a 	mov	r22,r4
 1017084:	2800c926 	beq	r5,zero,10173ac <_realloc_r+0x360>
 1017088:	10194640 	call	1019464 <__malloc_lock>
 101708c:	943ffe04 	addi	r16,r18,-8
 1017090:	88c002c4 	addi	r3,r17,11
 1017094:	00800584 	movi	r2,22
 1017098:	82000117 	ldw	r8,4(r16)
 101709c:	10c01b2e 	bgeu	r2,r3,101710c <_realloc_r+0xc0>
 10170a0:	00bffe04 	movi	r2,-8
 10170a4:	188e703a 	and	r7,r3,r2
 10170a8:	3839883a 	mov	fp,r7
 10170ac:	38001a16 	blt	r7,zero,1017118 <_realloc_r+0xcc>
 10170b0:	e4401936 	bltu	fp,r17,1017118 <_realloc_r+0xcc>
 10170b4:	013fff04 	movi	r4,-4
 10170b8:	4126703a 	and	r19,r8,r4
 10170bc:	99c02616 	blt	r19,r7,1017158 <_realloc_r+0x10c>
 10170c0:	802b883a 	mov	r21,r16
 10170c4:	9829883a 	mov	r20,r19
 10170c8:	84000204 	addi	r16,r16,8
 10170cc:	a80f883a 	mov	r7,r21
 10170d0:	a70dc83a 	sub	r6,r20,fp
 10170d4:	008003c4 	movi	r2,15
 10170d8:	1180c136 	bltu	r2,r6,10173e0 <_realloc_r+0x394>
 10170dc:	38800117 	ldw	r2,4(r7)
 10170e0:	a549883a 	add	r4,r20,r21
 10170e4:	1080004c 	andi	r2,r2,1
 10170e8:	a084b03a 	or	r2,r20,r2
 10170ec:	38800115 	stw	r2,4(r7)
 10170f0:	20c00117 	ldw	r3,4(r4)
 10170f4:	18c00054 	ori	r3,r3,1
 10170f8:	20c00115 	stw	r3,4(r4)
 10170fc:	b009883a 	mov	r4,r22
 1017100:	10194840 	call	1019484 <__malloc_unlock>
 1017104:	8023883a 	mov	r17,r16
 1017108:	00000606 	br	1017124 <_realloc_r+0xd8>
 101710c:	01c00404 	movi	r7,16
 1017110:	3839883a 	mov	fp,r7
 1017114:	e47fe72e 	bgeu	fp,r17,10170b4 <_realloc_r+0x68>
 1017118:	00800304 	movi	r2,12
 101711c:	0023883a 	mov	r17,zero
 1017120:	b0800015 	stw	r2,0(r22)
 1017124:	8805883a 	mov	r2,r17
 1017128:	dfc00b17 	ldw	ra,44(sp)
 101712c:	df000a17 	ldw	fp,40(sp)
 1017130:	ddc00917 	ldw	r23,36(sp)
 1017134:	dd800817 	ldw	r22,32(sp)
 1017138:	dd400717 	ldw	r21,28(sp)
 101713c:	dd000617 	ldw	r20,24(sp)
 1017140:	dcc00517 	ldw	r19,20(sp)
 1017144:	dc800417 	ldw	r18,16(sp)
 1017148:	dc400317 	ldw	r17,12(sp)
 101714c:	dc000217 	ldw	r16,8(sp)
 1017150:	dec00c04 	addi	sp,sp,48
 1017154:	f800283a 	ret
 1017158:	008040f4 	movhi	r2,259
 101715c:	10a0c904 	addi	r2,r2,-31964
 1017160:	12400217 	ldw	r9,8(r2)
 1017164:	84cd883a 	add	r6,r16,r19
 1017168:	802b883a 	mov	r21,r16
 101716c:	3240b926 	beq	r6,r9,1017454 <_realloc_r+0x408>
 1017170:	31400117 	ldw	r5,4(r6)
 1017174:	00bfff84 	movi	r2,-2
 1017178:	2884703a 	and	r2,r5,r2
 101717c:	1185883a 	add	r2,r2,r6
 1017180:	10c00117 	ldw	r3,4(r2)
 1017184:	18c0004c 	andi	r3,r3,1
 1017188:	1807003a 	cmpeq	r3,r3,zero
 101718c:	1800a326 	beq	r3,zero,101741c <_realloc_r+0x3d0>
 1017190:	2908703a 	and	r4,r5,r4
 1017194:	9929883a 	add	r20,r19,r4
 1017198:	a1c0a30e 	bge	r20,r7,1017428 <_realloc_r+0x3dc>
 101719c:	4080004c 	andi	r2,r8,1
 10171a0:	1000551e 	bne	r2,zero,10172f8 <_realloc_r+0x2ac>
 10171a4:	80800017 	ldw	r2,0(r16)
 10171a8:	80afc83a 	sub	r23,r16,r2
 10171ac:	b8c00117 	ldw	r3,4(r23)
 10171b0:	00bfff04 	movi	r2,-4
 10171b4:	1884703a 	and	r2,r3,r2
 10171b8:	30002e26 	beq	r6,zero,1017274 <_realloc_r+0x228>
 10171bc:	3240b926 	beq	r6,r9,10174a4 <_realloc_r+0x458>
 10171c0:	98a9883a 	add	r20,r19,r2
 10171c4:	2509883a 	add	r4,r4,r20
 10171c8:	d9000015 	stw	r4,0(sp)
 10171cc:	21c02a16 	blt	r4,r7,1017278 <_realloc_r+0x22c>
 10171d0:	30800317 	ldw	r2,12(r6)
 10171d4:	30c00217 	ldw	r3,8(r6)
 10171d8:	01400904 	movi	r5,36
 10171dc:	99bfff04 	addi	r6,r19,-4
 10171e0:	18800315 	stw	r2,12(r3)
 10171e4:	10c00215 	stw	r3,8(r2)
 10171e8:	b9000317 	ldw	r4,12(r23)
 10171ec:	b8800217 	ldw	r2,8(r23)
 10171f0:	b82b883a 	mov	r21,r23
 10171f4:	bc000204 	addi	r16,r23,8
 10171f8:	20800215 	stw	r2,8(r4)
 10171fc:	11000315 	stw	r4,12(r2)
 1017200:	2980e436 	bltu	r5,r6,1017594 <_realloc_r+0x548>
 1017204:	008004c4 	movi	r2,19
 1017208:	9009883a 	mov	r4,r18
 101720c:	8011883a 	mov	r8,r16
 1017210:	11800f2e 	bgeu	r2,r6,1017250 <_realloc_r+0x204>
 1017214:	90800017 	ldw	r2,0(r18)
 1017218:	ba000404 	addi	r8,r23,16
 101721c:	91000204 	addi	r4,r18,8
 1017220:	b8800215 	stw	r2,8(r23)
 1017224:	90c00117 	ldw	r3,4(r18)
 1017228:	008006c4 	movi	r2,27
 101722c:	b8c00315 	stw	r3,12(r23)
 1017230:	1180072e 	bgeu	r2,r6,1017250 <_realloc_r+0x204>
 1017234:	90c00217 	ldw	r3,8(r18)
 1017238:	ba000604 	addi	r8,r23,24
 101723c:	91000404 	addi	r4,r18,16
 1017240:	b8c00415 	stw	r3,16(r23)
 1017244:	90800317 	ldw	r2,12(r18)
 1017248:	b8800515 	stw	r2,20(r23)
 101724c:	3140e726 	beq	r6,r5,10175ec <_realloc_r+0x5a0>
 1017250:	20800017 	ldw	r2,0(r4)
 1017254:	dd000017 	ldw	r20,0(sp)
 1017258:	b80f883a 	mov	r7,r23
 101725c:	40800015 	stw	r2,0(r8)
 1017260:	20c00117 	ldw	r3,4(r4)
 1017264:	40c00115 	stw	r3,4(r8)
 1017268:	20800217 	ldw	r2,8(r4)
 101726c:	40800215 	stw	r2,8(r8)
 1017270:	003f9706 	br	10170d0 <_realloc_r+0x84>
 1017274:	98a9883a 	add	r20,r19,r2
 1017278:	a1c01f16 	blt	r20,r7,10172f8 <_realloc_r+0x2ac>
 101727c:	b8c00317 	ldw	r3,12(r23)
 1017280:	b8800217 	ldw	r2,8(r23)
 1017284:	99bfff04 	addi	r6,r19,-4
 1017288:	01400904 	movi	r5,36
 101728c:	b82b883a 	mov	r21,r23
 1017290:	18800215 	stw	r2,8(r3)
 1017294:	10c00315 	stw	r3,12(r2)
 1017298:	bc000204 	addi	r16,r23,8
 101729c:	2980c336 	bltu	r5,r6,10175ac <_realloc_r+0x560>
 10172a0:	008004c4 	movi	r2,19
 10172a4:	9009883a 	mov	r4,r18
 10172a8:	8011883a 	mov	r8,r16
 10172ac:	11800f2e 	bgeu	r2,r6,10172ec <_realloc_r+0x2a0>
 10172b0:	90800017 	ldw	r2,0(r18)
 10172b4:	ba000404 	addi	r8,r23,16
 10172b8:	91000204 	addi	r4,r18,8
 10172bc:	b8800215 	stw	r2,8(r23)
 10172c0:	90c00117 	ldw	r3,4(r18)
 10172c4:	008006c4 	movi	r2,27
 10172c8:	b8c00315 	stw	r3,12(r23)
 10172cc:	1180072e 	bgeu	r2,r6,10172ec <_realloc_r+0x2a0>
 10172d0:	90c00217 	ldw	r3,8(r18)
 10172d4:	ba000604 	addi	r8,r23,24
 10172d8:	91000404 	addi	r4,r18,16
 10172dc:	b8c00415 	stw	r3,16(r23)
 10172e0:	90800317 	ldw	r2,12(r18)
 10172e4:	b8800515 	stw	r2,20(r23)
 10172e8:	3140c726 	beq	r6,r5,1017608 <_realloc_r+0x5bc>
 10172ec:	20800017 	ldw	r2,0(r4)
 10172f0:	b80f883a 	mov	r7,r23
 10172f4:	003fd906 	br	101725c <_realloc_r+0x210>
 10172f8:	880b883a 	mov	r5,r17
 10172fc:	b009883a 	mov	r4,r22
 1017300:	10154d00 	call	10154d0 <_malloc_r>
 1017304:	1023883a 	mov	r17,r2
 1017308:	10002526 	beq	r2,zero,10173a0 <_realloc_r+0x354>
 101730c:	80800117 	ldw	r2,4(r16)
 1017310:	00ffff84 	movi	r3,-2
 1017314:	893ffe04 	addi	r4,r17,-8
 1017318:	10c4703a 	and	r2,r2,r3
 101731c:	8085883a 	add	r2,r16,r2
 1017320:	20809526 	beq	r4,r2,1017578 <_realloc_r+0x52c>
 1017324:	99bfff04 	addi	r6,r19,-4
 1017328:	01c00904 	movi	r7,36
 101732c:	39804536 	bltu	r7,r6,1017444 <_realloc_r+0x3f8>
 1017330:	008004c4 	movi	r2,19
 1017334:	9009883a 	mov	r4,r18
 1017338:	880b883a 	mov	r5,r17
 101733c:	11800f2e 	bgeu	r2,r6,101737c <_realloc_r+0x330>
 1017340:	90800017 	ldw	r2,0(r18)
 1017344:	89400204 	addi	r5,r17,8
 1017348:	91000204 	addi	r4,r18,8
 101734c:	88800015 	stw	r2,0(r17)
 1017350:	90c00117 	ldw	r3,4(r18)
 1017354:	008006c4 	movi	r2,27
 1017358:	88c00115 	stw	r3,4(r17)
 101735c:	1180072e 	bgeu	r2,r6,101737c <_realloc_r+0x330>
 1017360:	90c00217 	ldw	r3,8(r18)
 1017364:	89400404 	addi	r5,r17,16
 1017368:	91000404 	addi	r4,r18,16
 101736c:	88c00215 	stw	r3,8(r17)
 1017370:	90800317 	ldw	r2,12(r18)
 1017374:	88800315 	stw	r2,12(r17)
 1017378:	31c09126 	beq	r6,r7,10175c0 <_realloc_r+0x574>
 101737c:	20800017 	ldw	r2,0(r4)
 1017380:	28800015 	stw	r2,0(r5)
 1017384:	20c00117 	ldw	r3,4(r4)
 1017388:	28c00115 	stw	r3,4(r5)
 101738c:	20800217 	ldw	r2,8(r4)
 1017390:	28800215 	stw	r2,8(r5)
 1017394:	900b883a 	mov	r5,r18
 1017398:	b009883a 	mov	r4,r22
 101739c:	1013db40 	call	1013db4 <_free_r>
 10173a0:	b009883a 	mov	r4,r22
 10173a4:	10194840 	call	1019484 <__malloc_unlock>
 10173a8:	003f5e06 	br	1017124 <_realloc_r+0xd8>
 10173ac:	300b883a 	mov	r5,r6
 10173b0:	dfc00b17 	ldw	ra,44(sp)
 10173b4:	df000a17 	ldw	fp,40(sp)
 10173b8:	ddc00917 	ldw	r23,36(sp)
 10173bc:	dd800817 	ldw	r22,32(sp)
 10173c0:	dd400717 	ldw	r21,28(sp)
 10173c4:	dd000617 	ldw	r20,24(sp)
 10173c8:	dcc00517 	ldw	r19,20(sp)
 10173cc:	dc800417 	ldw	r18,16(sp)
 10173d0:	dc400317 	ldw	r17,12(sp)
 10173d4:	dc000217 	ldw	r16,8(sp)
 10173d8:	dec00c04 	addi	sp,sp,48
 10173dc:	10154d01 	jmpi	10154d0 <_malloc_r>
 10173e0:	38800117 	ldw	r2,4(r7)
 10173e4:	e54b883a 	add	r5,fp,r21
 10173e8:	31000054 	ori	r4,r6,1
 10173ec:	1080004c 	andi	r2,r2,1
 10173f0:	1704b03a 	or	r2,r2,fp
 10173f4:	38800115 	stw	r2,4(r7)
 10173f8:	29000115 	stw	r4,4(r5)
 10173fc:	2987883a 	add	r3,r5,r6
 1017400:	18800117 	ldw	r2,4(r3)
 1017404:	29400204 	addi	r5,r5,8
 1017408:	b009883a 	mov	r4,r22
 101740c:	10800054 	ori	r2,r2,1
 1017410:	18800115 	stw	r2,4(r3)
 1017414:	1013db40 	call	1013db4 <_free_r>
 1017418:	003f3806 	br	10170fc <_realloc_r+0xb0>
 101741c:	000d883a 	mov	r6,zero
 1017420:	0009883a 	mov	r4,zero
 1017424:	003f5d06 	br	101719c <_realloc_r+0x150>
 1017428:	30c00217 	ldw	r3,8(r6)
 101742c:	30800317 	ldw	r2,12(r6)
 1017430:	800f883a 	mov	r7,r16
 1017434:	84000204 	addi	r16,r16,8
 1017438:	10c00215 	stw	r3,8(r2)
 101743c:	18800315 	stw	r2,12(r3)
 1017440:	003f2306 	br	10170d0 <_realloc_r+0x84>
 1017444:	8809883a 	mov	r4,r17
 1017448:	900b883a 	mov	r5,r18
 101744c:	1015cf40 	call	1015cf4 <memmove>
 1017450:	003fd006 	br	1017394 <_realloc_r+0x348>
 1017454:	30800117 	ldw	r2,4(r6)
 1017458:	e0c00404 	addi	r3,fp,16
 101745c:	1108703a 	and	r4,r2,r4
 1017460:	9905883a 	add	r2,r19,r4
 1017464:	10ff4d16 	blt	r2,r3,101719c <_realloc_r+0x150>
 1017468:	1705c83a 	sub	r2,r2,fp
 101746c:	870b883a 	add	r5,r16,fp
 1017470:	10800054 	ori	r2,r2,1
 1017474:	28800115 	stw	r2,4(r5)
 1017478:	80c00117 	ldw	r3,4(r16)
 101747c:	008040f4 	movhi	r2,259
 1017480:	10a0c904 	addi	r2,r2,-31964
 1017484:	b009883a 	mov	r4,r22
 1017488:	18c0004c 	andi	r3,r3,1
 101748c:	e0c6b03a 	or	r3,fp,r3
 1017490:	11400215 	stw	r5,8(r2)
 1017494:	80c00115 	stw	r3,4(r16)
 1017498:	10194840 	call	1019484 <__malloc_unlock>
 101749c:	84400204 	addi	r17,r16,8
 10174a0:	003f2006 	br	1017124 <_realloc_r+0xd8>
 10174a4:	98a9883a 	add	r20,r19,r2
 10174a8:	2509883a 	add	r4,r4,r20
 10174ac:	e0800404 	addi	r2,fp,16
 10174b0:	d9000115 	stw	r4,4(sp)
 10174b4:	20bf7016 	blt	r4,r2,1017278 <_realloc_r+0x22c>
 10174b8:	b8c00317 	ldw	r3,12(r23)
 10174bc:	b8800217 	ldw	r2,8(r23)
 10174c0:	99bfff04 	addi	r6,r19,-4
 10174c4:	01400904 	movi	r5,36
 10174c8:	18800215 	stw	r2,8(r3)
 10174cc:	10c00315 	stw	r3,12(r2)
 10174d0:	bc400204 	addi	r17,r23,8
 10174d4:	29804136 	bltu	r5,r6,10175dc <_realloc_r+0x590>
 10174d8:	008004c4 	movi	r2,19
 10174dc:	9009883a 	mov	r4,r18
 10174e0:	880f883a 	mov	r7,r17
 10174e4:	11800f2e 	bgeu	r2,r6,1017524 <_realloc_r+0x4d8>
 10174e8:	90800017 	ldw	r2,0(r18)
 10174ec:	b9c00404 	addi	r7,r23,16
 10174f0:	91000204 	addi	r4,r18,8
 10174f4:	b8800215 	stw	r2,8(r23)
 10174f8:	90c00117 	ldw	r3,4(r18)
 10174fc:	008006c4 	movi	r2,27
 1017500:	b8c00315 	stw	r3,12(r23)
 1017504:	1180072e 	bgeu	r2,r6,1017524 <_realloc_r+0x4d8>
 1017508:	90c00217 	ldw	r3,8(r18)
 101750c:	b9c00604 	addi	r7,r23,24
 1017510:	91000404 	addi	r4,r18,16
 1017514:	b8c00415 	stw	r3,16(r23)
 1017518:	90800317 	ldw	r2,12(r18)
 101751c:	b8800515 	stw	r2,20(r23)
 1017520:	31404026 	beq	r6,r5,1017624 <_realloc_r+0x5d8>
 1017524:	20800017 	ldw	r2,0(r4)
 1017528:	38800015 	stw	r2,0(r7)
 101752c:	20c00117 	ldw	r3,4(r4)
 1017530:	38c00115 	stw	r3,4(r7)
 1017534:	20800217 	ldw	r2,8(r4)
 1017538:	38800215 	stw	r2,8(r7)
 101753c:	d8c00117 	ldw	r3,4(sp)
 1017540:	bf0b883a 	add	r5,r23,fp
 1017544:	b009883a 	mov	r4,r22
 1017548:	1f05c83a 	sub	r2,r3,fp
 101754c:	10800054 	ori	r2,r2,1
 1017550:	28800115 	stw	r2,4(r5)
 1017554:	b8c00117 	ldw	r3,4(r23)
 1017558:	008040f4 	movhi	r2,259
 101755c:	10a0c904 	addi	r2,r2,-31964
 1017560:	11400215 	stw	r5,8(r2)
 1017564:	18c0004c 	andi	r3,r3,1
 1017568:	e0c6b03a 	or	r3,fp,r3
 101756c:	b8c00115 	stw	r3,4(r23)
 1017570:	10194840 	call	1019484 <__malloc_unlock>
 1017574:	003eeb06 	br	1017124 <_realloc_r+0xd8>
 1017578:	20800117 	ldw	r2,4(r4)
 101757c:	00ffff04 	movi	r3,-4
 1017580:	800f883a 	mov	r7,r16
 1017584:	10c4703a 	and	r2,r2,r3
 1017588:	98a9883a 	add	r20,r19,r2
 101758c:	84000204 	addi	r16,r16,8
 1017590:	003ecf06 	br	10170d0 <_realloc_r+0x84>
 1017594:	900b883a 	mov	r5,r18
 1017598:	8009883a 	mov	r4,r16
 101759c:	1015cf40 	call	1015cf4 <memmove>
 10175a0:	dd000017 	ldw	r20,0(sp)
 10175a4:	b80f883a 	mov	r7,r23
 10175a8:	003ec906 	br	10170d0 <_realloc_r+0x84>
 10175ac:	900b883a 	mov	r5,r18
 10175b0:	8009883a 	mov	r4,r16
 10175b4:	1015cf40 	call	1015cf4 <memmove>
 10175b8:	b80f883a 	mov	r7,r23
 10175bc:	003ec406 	br	10170d0 <_realloc_r+0x84>
 10175c0:	90c00417 	ldw	r3,16(r18)
 10175c4:	89400604 	addi	r5,r17,24
 10175c8:	91000604 	addi	r4,r18,24
 10175cc:	88c00415 	stw	r3,16(r17)
 10175d0:	90800517 	ldw	r2,20(r18)
 10175d4:	88800515 	stw	r2,20(r17)
 10175d8:	003f6806 	br	101737c <_realloc_r+0x330>
 10175dc:	900b883a 	mov	r5,r18
 10175e0:	8809883a 	mov	r4,r17
 10175e4:	1015cf40 	call	1015cf4 <memmove>
 10175e8:	003fd406 	br	101753c <_realloc_r+0x4f0>
 10175ec:	90c00417 	ldw	r3,16(r18)
 10175f0:	91000604 	addi	r4,r18,24
 10175f4:	ba000804 	addi	r8,r23,32
 10175f8:	b8c00615 	stw	r3,24(r23)
 10175fc:	90800517 	ldw	r2,20(r18)
 1017600:	b8800715 	stw	r2,28(r23)
 1017604:	003f1206 	br	1017250 <_realloc_r+0x204>
 1017608:	90c00417 	ldw	r3,16(r18)
 101760c:	91000604 	addi	r4,r18,24
 1017610:	ba000804 	addi	r8,r23,32
 1017614:	b8c00615 	stw	r3,24(r23)
 1017618:	90800517 	ldw	r2,20(r18)
 101761c:	b8800715 	stw	r2,28(r23)
 1017620:	003f3206 	br	10172ec <_realloc_r+0x2a0>
 1017624:	90c00417 	ldw	r3,16(r18)
 1017628:	91000604 	addi	r4,r18,24
 101762c:	b9c00804 	addi	r7,r23,32
 1017630:	b8c00615 	stw	r3,24(r23)
 1017634:	90800517 	ldw	r2,20(r18)
 1017638:	b8800715 	stw	r2,28(r23)
 101763c:	003fb906 	br	1017524 <_realloc_r+0x4d8>

01017640 <__isinfd>:
 1017640:	200d883a 	mov	r6,r4
 1017644:	0109c83a 	sub	r4,zero,r4
 1017648:	2188b03a 	or	r4,r4,r6
 101764c:	2008d7fa 	srli	r4,r4,31
 1017650:	00a00034 	movhi	r2,32768
 1017654:	10bfffc4 	addi	r2,r2,-1
 1017658:	1144703a 	and	r2,r2,r5
 101765c:	2088b03a 	or	r4,r4,r2
 1017660:	009ffc34 	movhi	r2,32752
 1017664:	1105c83a 	sub	r2,r2,r4
 1017668:	0087c83a 	sub	r3,zero,r2
 101766c:	10c4b03a 	or	r2,r2,r3
 1017670:	1004d7fa 	srli	r2,r2,31
 1017674:	00c00044 	movi	r3,1
 1017678:	1885c83a 	sub	r2,r3,r2
 101767c:	f800283a 	ret

01017680 <_sbrk_r>:
 1017680:	defffd04 	addi	sp,sp,-12
 1017684:	dc000015 	stw	r16,0(sp)
 1017688:	040040f4 	movhi	r16,259
 101768c:	842d7c04 	addi	r16,r16,-18960
 1017690:	dc400115 	stw	r17,4(sp)
 1017694:	80000015 	stw	zero,0(r16)
 1017698:	2023883a 	mov	r17,r4
 101769c:	2809883a 	mov	r4,r5
 10176a0:	dfc00215 	stw	ra,8(sp)
 10176a4:	101991c0 	call	101991c <sbrk>
 10176a8:	1007883a 	mov	r3,r2
 10176ac:	00bfffc4 	movi	r2,-1
 10176b0:	18800626 	beq	r3,r2,10176cc <_sbrk_r+0x4c>
 10176b4:	1805883a 	mov	r2,r3
 10176b8:	dfc00217 	ldw	ra,8(sp)
 10176bc:	dc400117 	ldw	r17,4(sp)
 10176c0:	dc000017 	ldw	r16,0(sp)
 10176c4:	dec00304 	addi	sp,sp,12
 10176c8:	f800283a 	ret
 10176cc:	80800017 	ldw	r2,0(r16)
 10176d0:	103ff826 	beq	r2,zero,10176b4 <_sbrk_r+0x34>
 10176d4:	88800015 	stw	r2,0(r17)
 10176d8:	1805883a 	mov	r2,r3
 10176dc:	dfc00217 	ldw	ra,8(sp)
 10176e0:	dc400117 	ldw	r17,4(sp)
 10176e4:	dc000017 	ldw	r16,0(sp)
 10176e8:	dec00304 	addi	sp,sp,12
 10176ec:	f800283a 	ret

010176f0 <__sclose>:
 10176f0:	2940038f 	ldh	r5,14(r5)
 10176f4:	1017ab41 	jmpi	1017ab4 <_close_r>

010176f8 <__sseek>:
 10176f8:	defffe04 	addi	sp,sp,-8
 10176fc:	dc000015 	stw	r16,0(sp)
 1017700:	2821883a 	mov	r16,r5
 1017704:	2940038f 	ldh	r5,14(r5)
 1017708:	dfc00115 	stw	ra,4(sp)
 101770c:	1017d2c0 	call	1017d2c <_lseek_r>
 1017710:	1007883a 	mov	r3,r2
 1017714:	00bfffc4 	movi	r2,-1
 1017718:	18800926 	beq	r3,r2,1017740 <__sseek+0x48>
 101771c:	8080030b 	ldhu	r2,12(r16)
 1017720:	80c01415 	stw	r3,80(r16)
 1017724:	10840014 	ori	r2,r2,4096
 1017728:	8080030d 	sth	r2,12(r16)
 101772c:	1805883a 	mov	r2,r3
 1017730:	dfc00117 	ldw	ra,4(sp)
 1017734:	dc000017 	ldw	r16,0(sp)
 1017738:	dec00204 	addi	sp,sp,8
 101773c:	f800283a 	ret
 1017740:	8080030b 	ldhu	r2,12(r16)
 1017744:	10bbffcc 	andi	r2,r2,61439
 1017748:	8080030d 	sth	r2,12(r16)
 101774c:	1805883a 	mov	r2,r3
 1017750:	dfc00117 	ldw	ra,4(sp)
 1017754:	dc000017 	ldw	r16,0(sp)
 1017758:	dec00204 	addi	sp,sp,8
 101775c:	f800283a 	ret

01017760 <__swrite>:
 1017760:	2880030b 	ldhu	r2,12(r5)
 1017764:	defffb04 	addi	sp,sp,-20
 1017768:	dcc00315 	stw	r19,12(sp)
 101776c:	1080400c 	andi	r2,r2,256
 1017770:	dc800215 	stw	r18,8(sp)
 1017774:	dc400115 	stw	r17,4(sp)
 1017778:	dc000015 	stw	r16,0(sp)
 101777c:	3027883a 	mov	r19,r6
 1017780:	3825883a 	mov	r18,r7
 1017784:	dfc00415 	stw	ra,16(sp)
 1017788:	2821883a 	mov	r16,r5
 101778c:	000d883a 	mov	r6,zero
 1017790:	01c00084 	movi	r7,2
 1017794:	2023883a 	mov	r17,r4
 1017798:	10000226 	beq	r2,zero,10177a4 <__swrite+0x44>
 101779c:	2940038f 	ldh	r5,14(r5)
 10177a0:	1017d2c0 	call	1017d2c <_lseek_r>
 10177a4:	8080030b 	ldhu	r2,12(r16)
 10177a8:	8140038f 	ldh	r5,14(r16)
 10177ac:	8809883a 	mov	r4,r17
 10177b0:	10bbffcc 	andi	r2,r2,61439
 10177b4:	980d883a 	mov	r6,r19
 10177b8:	900f883a 	mov	r7,r18
 10177bc:	8080030d 	sth	r2,12(r16)
 10177c0:	dfc00417 	ldw	ra,16(sp)
 10177c4:	dcc00317 	ldw	r19,12(sp)
 10177c8:	dc800217 	ldw	r18,8(sp)
 10177cc:	dc400117 	ldw	r17,4(sp)
 10177d0:	dc000017 	ldw	r16,0(sp)
 10177d4:	dec00504 	addi	sp,sp,20
 10177d8:	10179881 	jmpi	1017988 <_write_r>

010177dc <__sread>:
 10177dc:	defffe04 	addi	sp,sp,-8
 10177e0:	dc000015 	stw	r16,0(sp)
 10177e4:	2821883a 	mov	r16,r5
 10177e8:	2940038f 	ldh	r5,14(r5)
 10177ec:	dfc00115 	stw	ra,4(sp)
 10177f0:	1017da40 	call	1017da4 <_read_r>
 10177f4:	1007883a 	mov	r3,r2
 10177f8:	10000816 	blt	r2,zero,101781c <__sread+0x40>
 10177fc:	80801417 	ldw	r2,80(r16)
 1017800:	10c5883a 	add	r2,r2,r3
 1017804:	80801415 	stw	r2,80(r16)
 1017808:	1805883a 	mov	r2,r3
 101780c:	dfc00117 	ldw	ra,4(sp)
 1017810:	dc000017 	ldw	r16,0(sp)
 1017814:	dec00204 	addi	sp,sp,8
 1017818:	f800283a 	ret
 101781c:	8080030b 	ldhu	r2,12(r16)
 1017820:	10bbffcc 	andi	r2,r2,61439
 1017824:	8080030d 	sth	r2,12(r16)
 1017828:	1805883a 	mov	r2,r3
 101782c:	dfc00117 	ldw	ra,4(sp)
 1017830:	dc000017 	ldw	r16,0(sp)
 1017834:	dec00204 	addi	sp,sp,8
 1017838:	f800283a 	ret

0101783c <__swbuf_r>:
 101783c:	defffc04 	addi	sp,sp,-16
 1017840:	dc400215 	stw	r17,8(sp)
 1017844:	dc000115 	stw	r16,4(sp)
 1017848:	dfc00315 	stw	ra,12(sp)
 101784c:	2023883a 	mov	r17,r4
 1017850:	2821883a 	mov	r16,r5
 1017854:	20000226 	beq	r4,zero,1017860 <__swbuf_r+0x24>
 1017858:	20800e17 	ldw	r2,56(r4)
 101785c:	10002f26 	beq	r2,zero,101791c <__swbuf_r+0xe0>
 1017860:	3080030b 	ldhu	r2,12(r6)
 1017864:	30c00617 	ldw	r3,24(r6)
 1017868:	1080020c 	andi	r2,r2,8
 101786c:	30c00215 	stw	r3,8(r6)
 1017870:	10002226 	beq	r2,zero,10178fc <__swbuf_r+0xc0>
 1017874:	30c00417 	ldw	r3,16(r6)
 1017878:	18002026 	beq	r3,zero,10178fc <__swbuf_r+0xc0>
 101787c:	31000017 	ldw	r4,0(r6)
 1017880:	30800517 	ldw	r2,20(r6)
 1017884:	20c7c83a 	sub	r3,r4,r3
 1017888:	18802f0e 	bge	r3,r2,1017948 <__swbuf_r+0x10c>
 101788c:	19400044 	addi	r5,r3,1
 1017890:	30800217 	ldw	r2,8(r6)
 1017894:	84003fcc 	andi	r16,r16,255
 1017898:	20c00044 	addi	r3,r4,1
 101789c:	10bfffc4 	addi	r2,r2,-1
 10178a0:	30800215 	stw	r2,8(r6)
 10178a4:	24000005 	stb	r16,0(r4)
 10178a8:	30800517 	ldw	r2,20(r6)
 10178ac:	30c00015 	stw	r3,0(r6)
 10178b0:	11400c26 	beq	r2,r5,10178e4 <__swbuf_r+0xa8>
 10178b4:	3080030b 	ldhu	r2,12(r6)
 10178b8:	1080004c 	andi	r2,r2,1
 10178bc:	1005003a 	cmpeq	r2,r2,zero
 10178c0:	10000626 	beq	r2,zero,10178dc <__swbuf_r+0xa0>
 10178c4:	8005883a 	mov	r2,r16
 10178c8:	dfc00317 	ldw	ra,12(sp)
 10178cc:	dc400217 	ldw	r17,8(sp)
 10178d0:	dc000117 	ldw	r16,4(sp)
 10178d4:	dec00404 	addi	sp,sp,16
 10178d8:	f800283a 	ret
 10178dc:	00800284 	movi	r2,10
 10178e0:	80bff81e 	bne	r16,r2,10178c4 <__swbuf_r+0x88>
 10178e4:	8809883a 	mov	r4,r17
 10178e8:	300b883a 	mov	r5,r6
 10178ec:	10137980 	call	1013798 <_fflush_r>
 10178f0:	103ff426 	beq	r2,zero,10178c4 <__swbuf_r+0x88>
 10178f4:	043fffc4 	movi	r16,-1
 10178f8:	003ff206 	br	10178c4 <__swbuf_r+0x88>
 10178fc:	300b883a 	mov	r5,r6
 1017900:	8809883a 	mov	r4,r17
 1017904:	d9800015 	stw	r6,0(sp)
 1017908:	1011e900 	call	1011e90 <__swsetup_r>
 101790c:	d9800017 	ldw	r6,0(sp)
 1017910:	1000061e 	bne	r2,zero,101792c <__swbuf_r+0xf0>
 1017914:	30c00417 	ldw	r3,16(r6)
 1017918:	003fd806 	br	101787c <__swbuf_r+0x40>
 101791c:	d9800015 	stw	r6,0(sp)
 1017920:	1013a300 	call	1013a30 <__sinit>
 1017924:	d9800017 	ldw	r6,0(sp)
 1017928:	003fcd06 	br	1017860 <__swbuf_r+0x24>
 101792c:	3080030b 	ldhu	r2,12(r6)
 1017930:	00c00244 	movi	r3,9
 1017934:	043fffc4 	movi	r16,-1
 1017938:	10801014 	ori	r2,r2,64
 101793c:	3080030d 	sth	r2,12(r6)
 1017940:	88c00015 	stw	r3,0(r17)
 1017944:	003fdf06 	br	10178c4 <__swbuf_r+0x88>
 1017948:	300b883a 	mov	r5,r6
 101794c:	8809883a 	mov	r4,r17
 1017950:	d9800015 	stw	r6,0(sp)
 1017954:	10137980 	call	1013798 <_fflush_r>
 1017958:	d9800017 	ldw	r6,0(sp)
 101795c:	103fe51e 	bne	r2,zero,10178f4 <__swbuf_r+0xb8>
 1017960:	31000017 	ldw	r4,0(r6)
 1017964:	01400044 	movi	r5,1
 1017968:	003fc906 	br	1017890 <__swbuf_r+0x54>

0101796c <__swbuf>:
 101796c:	018040f4 	movhi	r6,259
 1017970:	31a67004 	addi	r6,r6,-26176
 1017974:	2007883a 	mov	r3,r4
 1017978:	31000017 	ldw	r4,0(r6)
 101797c:	280d883a 	mov	r6,r5
 1017980:	180b883a 	mov	r5,r3
 1017984:	101783c1 	jmpi	101783c <__swbuf_r>

01017988 <_write_r>:
 1017988:	defffd04 	addi	sp,sp,-12
 101798c:	dc000015 	stw	r16,0(sp)
 1017990:	040040f4 	movhi	r16,259
 1017994:	842d7c04 	addi	r16,r16,-18960
 1017998:	dc400115 	stw	r17,4(sp)
 101799c:	80000015 	stw	zero,0(r16)
 10179a0:	2023883a 	mov	r17,r4
 10179a4:	2809883a 	mov	r4,r5
 10179a8:	300b883a 	mov	r5,r6
 10179ac:	380d883a 	mov	r6,r7
 10179b0:	dfc00215 	stw	ra,8(sp)
 10179b4:	10199d80 	call	10199d8 <write>
 10179b8:	1007883a 	mov	r3,r2
 10179bc:	00bfffc4 	movi	r2,-1
 10179c0:	18800626 	beq	r3,r2,10179dc <_write_r+0x54>
 10179c4:	1805883a 	mov	r2,r3
 10179c8:	dfc00217 	ldw	ra,8(sp)
 10179cc:	dc400117 	ldw	r17,4(sp)
 10179d0:	dc000017 	ldw	r16,0(sp)
 10179d4:	dec00304 	addi	sp,sp,12
 10179d8:	f800283a 	ret
 10179dc:	80800017 	ldw	r2,0(r16)
 10179e0:	103ff826 	beq	r2,zero,10179c4 <_write_r+0x3c>
 10179e4:	88800015 	stw	r2,0(r17)
 10179e8:	1805883a 	mov	r2,r3
 10179ec:	dfc00217 	ldw	ra,8(sp)
 10179f0:	dc400117 	ldw	r17,4(sp)
 10179f4:	dc000017 	ldw	r16,0(sp)
 10179f8:	dec00304 	addi	sp,sp,12
 10179fc:	f800283a 	ret

01017a00 <_calloc_r>:
 1017a00:	298b383a 	mul	r5,r5,r6
 1017a04:	defffe04 	addi	sp,sp,-8
 1017a08:	dc000015 	stw	r16,0(sp)
 1017a0c:	dfc00115 	stw	ra,4(sp)
 1017a10:	10154d00 	call	10154d0 <_malloc_r>
 1017a14:	1021883a 	mov	r16,r2
 1017a18:	01c00904 	movi	r7,36
 1017a1c:	10000d26 	beq	r2,zero,1017a54 <_calloc_r+0x54>
 1017a20:	10ffff17 	ldw	r3,-4(r2)
 1017a24:	1009883a 	mov	r4,r2
 1017a28:	00bfff04 	movi	r2,-4
 1017a2c:	1886703a 	and	r3,r3,r2
 1017a30:	1887883a 	add	r3,r3,r2
 1017a34:	180d883a 	mov	r6,r3
 1017a38:	000b883a 	mov	r5,zero
 1017a3c:	38c01736 	bltu	r7,r3,1017a9c <_calloc_r+0x9c>
 1017a40:	008004c4 	movi	r2,19
 1017a44:	10c00836 	bltu	r2,r3,1017a68 <_calloc_r+0x68>
 1017a48:	20000215 	stw	zero,8(r4)
 1017a4c:	20000015 	stw	zero,0(r4)
 1017a50:	20000115 	stw	zero,4(r4)
 1017a54:	8005883a 	mov	r2,r16
 1017a58:	dfc00117 	ldw	ra,4(sp)
 1017a5c:	dc000017 	ldw	r16,0(sp)
 1017a60:	dec00204 	addi	sp,sp,8
 1017a64:	f800283a 	ret
 1017a68:	008006c4 	movi	r2,27
 1017a6c:	80000015 	stw	zero,0(r16)
 1017a70:	80000115 	stw	zero,4(r16)
 1017a74:	81000204 	addi	r4,r16,8
 1017a78:	10fff32e 	bgeu	r2,r3,1017a48 <_calloc_r+0x48>
 1017a7c:	80000215 	stw	zero,8(r16)
 1017a80:	80000315 	stw	zero,12(r16)
 1017a84:	81000404 	addi	r4,r16,16
 1017a88:	19ffef1e 	bne	r3,r7,1017a48 <_calloc_r+0x48>
 1017a8c:	81000604 	addi	r4,r16,24
 1017a90:	80000415 	stw	zero,16(r16)
 1017a94:	80000515 	stw	zero,20(r16)
 1017a98:	003feb06 	br	1017a48 <_calloc_r+0x48>
 1017a9c:	1015dd40 	call	1015dd4 <memset>
 1017aa0:	8005883a 	mov	r2,r16
 1017aa4:	dfc00117 	ldw	ra,4(sp)
 1017aa8:	dc000017 	ldw	r16,0(sp)
 1017aac:	dec00204 	addi	sp,sp,8
 1017ab0:	f800283a 	ret

01017ab4 <_close_r>:
 1017ab4:	defffd04 	addi	sp,sp,-12
 1017ab8:	dc000015 	stw	r16,0(sp)
 1017abc:	040040f4 	movhi	r16,259
 1017ac0:	842d7c04 	addi	r16,r16,-18960
 1017ac4:	dc400115 	stw	r17,4(sp)
 1017ac8:	80000015 	stw	zero,0(r16)
 1017acc:	2023883a 	mov	r17,r4
 1017ad0:	2809883a 	mov	r4,r5
 1017ad4:	dfc00215 	stw	ra,8(sp)
 1017ad8:	1018de00 	call	1018de0 <close>
 1017adc:	1007883a 	mov	r3,r2
 1017ae0:	00bfffc4 	movi	r2,-1
 1017ae4:	18800626 	beq	r3,r2,1017b00 <_close_r+0x4c>
 1017ae8:	1805883a 	mov	r2,r3
 1017aec:	dfc00217 	ldw	ra,8(sp)
 1017af0:	dc400117 	ldw	r17,4(sp)
 1017af4:	dc000017 	ldw	r16,0(sp)
 1017af8:	dec00304 	addi	sp,sp,12
 1017afc:	f800283a 	ret
 1017b00:	80800017 	ldw	r2,0(r16)
 1017b04:	103ff826 	beq	r2,zero,1017ae8 <_close_r+0x34>
 1017b08:	88800015 	stw	r2,0(r17)
 1017b0c:	1805883a 	mov	r2,r3
 1017b10:	dfc00217 	ldw	ra,8(sp)
 1017b14:	dc400117 	ldw	r17,4(sp)
 1017b18:	dc000017 	ldw	r16,0(sp)
 1017b1c:	dec00304 	addi	sp,sp,12
 1017b20:	f800283a 	ret

01017b24 <_fclose_r>:
 1017b24:	defffc04 	addi	sp,sp,-16
 1017b28:	dc400115 	stw	r17,4(sp)
 1017b2c:	dc000015 	stw	r16,0(sp)
 1017b30:	dfc00315 	stw	ra,12(sp)
 1017b34:	dc800215 	stw	r18,8(sp)
 1017b38:	2821883a 	mov	r16,r5
 1017b3c:	2023883a 	mov	r17,r4
 1017b40:	28002926 	beq	r5,zero,1017be8 <_fclose_r+0xc4>
 1017b44:	1013a200 	call	1013a20 <__sfp_lock_acquire>
 1017b48:	88000226 	beq	r17,zero,1017b54 <_fclose_r+0x30>
 1017b4c:	88800e17 	ldw	r2,56(r17)
 1017b50:	10002d26 	beq	r2,zero,1017c08 <_fclose_r+0xe4>
 1017b54:	8080030f 	ldh	r2,12(r16)
 1017b58:	10002226 	beq	r2,zero,1017be4 <_fclose_r+0xc0>
 1017b5c:	8809883a 	mov	r4,r17
 1017b60:	800b883a 	mov	r5,r16
 1017b64:	10137980 	call	1013798 <_fflush_r>
 1017b68:	1025883a 	mov	r18,r2
 1017b6c:	80800b17 	ldw	r2,44(r16)
 1017b70:	10000426 	beq	r2,zero,1017b84 <_fclose_r+0x60>
 1017b74:	81400717 	ldw	r5,28(r16)
 1017b78:	8809883a 	mov	r4,r17
 1017b7c:	103ee83a 	callr	r2
 1017b80:	10002a16 	blt	r2,zero,1017c2c <_fclose_r+0x108>
 1017b84:	8080030b 	ldhu	r2,12(r16)
 1017b88:	1080200c 	andi	r2,r2,128
 1017b8c:	1000231e 	bne	r2,zero,1017c1c <_fclose_r+0xf8>
 1017b90:	81400c17 	ldw	r5,48(r16)
 1017b94:	28000526 	beq	r5,zero,1017bac <_fclose_r+0x88>
 1017b98:	80801004 	addi	r2,r16,64
 1017b9c:	28800226 	beq	r5,r2,1017ba8 <_fclose_r+0x84>
 1017ba0:	8809883a 	mov	r4,r17
 1017ba4:	1013db40 	call	1013db4 <_free_r>
 1017ba8:	80000c15 	stw	zero,48(r16)
 1017bac:	81401117 	ldw	r5,68(r16)
 1017bb0:	28000326 	beq	r5,zero,1017bc0 <_fclose_r+0x9c>
 1017bb4:	8809883a 	mov	r4,r17
 1017bb8:	1013db40 	call	1013db4 <_free_r>
 1017bbc:	80001115 	stw	zero,68(r16)
 1017bc0:	8000030d 	sth	zero,12(r16)
 1017bc4:	1013a240 	call	1013a24 <__sfp_lock_release>
 1017bc8:	9005883a 	mov	r2,r18
 1017bcc:	dfc00317 	ldw	ra,12(sp)
 1017bd0:	dc800217 	ldw	r18,8(sp)
 1017bd4:	dc400117 	ldw	r17,4(sp)
 1017bd8:	dc000017 	ldw	r16,0(sp)
 1017bdc:	dec00404 	addi	sp,sp,16
 1017be0:	f800283a 	ret
 1017be4:	1013a240 	call	1013a24 <__sfp_lock_release>
 1017be8:	0025883a 	mov	r18,zero
 1017bec:	9005883a 	mov	r2,r18
 1017bf0:	dfc00317 	ldw	ra,12(sp)
 1017bf4:	dc800217 	ldw	r18,8(sp)
 1017bf8:	dc400117 	ldw	r17,4(sp)
 1017bfc:	dc000017 	ldw	r16,0(sp)
 1017c00:	dec00404 	addi	sp,sp,16
 1017c04:	f800283a 	ret
 1017c08:	8809883a 	mov	r4,r17
 1017c0c:	1013a300 	call	1013a30 <__sinit>
 1017c10:	8080030f 	ldh	r2,12(r16)
 1017c14:	103fd11e 	bne	r2,zero,1017b5c <_fclose_r+0x38>
 1017c18:	003ff206 	br	1017be4 <_fclose_r+0xc0>
 1017c1c:	81400417 	ldw	r5,16(r16)
 1017c20:	8809883a 	mov	r4,r17
 1017c24:	1013db40 	call	1013db4 <_free_r>
 1017c28:	003fd906 	br	1017b90 <_fclose_r+0x6c>
 1017c2c:	04bfffc4 	movi	r18,-1
 1017c30:	003fd406 	br	1017b84 <_fclose_r+0x60>

01017c34 <fclose>:
 1017c34:	008040f4 	movhi	r2,259
 1017c38:	10a67004 	addi	r2,r2,-26176
 1017c3c:	200b883a 	mov	r5,r4
 1017c40:	11000017 	ldw	r4,0(r2)
 1017c44:	1017b241 	jmpi	1017b24 <_fclose_r>

01017c48 <_fstat_r>:
 1017c48:	defffd04 	addi	sp,sp,-12
 1017c4c:	dc000015 	stw	r16,0(sp)
 1017c50:	040040f4 	movhi	r16,259
 1017c54:	842d7c04 	addi	r16,r16,-18960
 1017c58:	dc400115 	stw	r17,4(sp)
 1017c5c:	80000015 	stw	zero,0(r16)
 1017c60:	2023883a 	mov	r17,r4
 1017c64:	2809883a 	mov	r4,r5
 1017c68:	300b883a 	mov	r5,r6
 1017c6c:	dfc00215 	stw	ra,8(sp)
 1017c70:	1018f680 	call	1018f68 <fstat>
 1017c74:	1007883a 	mov	r3,r2
 1017c78:	00bfffc4 	movi	r2,-1
 1017c7c:	18800626 	beq	r3,r2,1017c98 <_fstat_r+0x50>
 1017c80:	1805883a 	mov	r2,r3
 1017c84:	dfc00217 	ldw	ra,8(sp)
 1017c88:	dc400117 	ldw	r17,4(sp)
 1017c8c:	dc000017 	ldw	r16,0(sp)
 1017c90:	dec00304 	addi	sp,sp,12
 1017c94:	f800283a 	ret
 1017c98:	80800017 	ldw	r2,0(r16)
 1017c9c:	103ff826 	beq	r2,zero,1017c80 <_fstat_r+0x38>
 1017ca0:	88800015 	stw	r2,0(r17)
 1017ca4:	1805883a 	mov	r2,r3
 1017ca8:	dfc00217 	ldw	ra,8(sp)
 1017cac:	dc400117 	ldw	r17,4(sp)
 1017cb0:	dc000017 	ldw	r16,0(sp)
 1017cb4:	dec00304 	addi	sp,sp,12
 1017cb8:	f800283a 	ret

01017cbc <_isatty_r>:
 1017cbc:	defffd04 	addi	sp,sp,-12
 1017cc0:	dc000015 	stw	r16,0(sp)
 1017cc4:	040040f4 	movhi	r16,259
 1017cc8:	842d7c04 	addi	r16,r16,-18960
 1017ccc:	dc400115 	stw	r17,4(sp)
 1017cd0:	80000015 	stw	zero,0(r16)
 1017cd4:	2023883a 	mov	r17,r4
 1017cd8:	2809883a 	mov	r4,r5
 1017cdc:	dfc00215 	stw	ra,8(sp)
 1017ce0:	101909c0 	call	101909c <isatty>
 1017ce4:	1007883a 	mov	r3,r2
 1017ce8:	00bfffc4 	movi	r2,-1
 1017cec:	18800626 	beq	r3,r2,1017d08 <_isatty_r+0x4c>
 1017cf0:	1805883a 	mov	r2,r3
 1017cf4:	dfc00217 	ldw	ra,8(sp)
 1017cf8:	dc400117 	ldw	r17,4(sp)
 1017cfc:	dc000017 	ldw	r16,0(sp)
 1017d00:	dec00304 	addi	sp,sp,12
 1017d04:	f800283a 	ret
 1017d08:	80800017 	ldw	r2,0(r16)
 1017d0c:	103ff826 	beq	r2,zero,1017cf0 <_isatty_r+0x34>
 1017d10:	88800015 	stw	r2,0(r17)
 1017d14:	1805883a 	mov	r2,r3
 1017d18:	dfc00217 	ldw	ra,8(sp)
 1017d1c:	dc400117 	ldw	r17,4(sp)
 1017d20:	dc000017 	ldw	r16,0(sp)
 1017d24:	dec00304 	addi	sp,sp,12
 1017d28:	f800283a 	ret

01017d2c <_lseek_r>:
 1017d2c:	defffd04 	addi	sp,sp,-12
 1017d30:	dc000015 	stw	r16,0(sp)
 1017d34:	040040f4 	movhi	r16,259
 1017d38:	842d7c04 	addi	r16,r16,-18960
 1017d3c:	dc400115 	stw	r17,4(sp)
 1017d40:	80000015 	stw	zero,0(r16)
 1017d44:	2023883a 	mov	r17,r4
 1017d48:	2809883a 	mov	r4,r5
 1017d4c:	300b883a 	mov	r5,r6
 1017d50:	380d883a 	mov	r6,r7
 1017d54:	dfc00215 	stw	ra,8(sp)
 1017d58:	10192a80 	call	10192a8 <lseek>
 1017d5c:	1007883a 	mov	r3,r2
 1017d60:	00bfffc4 	movi	r2,-1
 1017d64:	18800626 	beq	r3,r2,1017d80 <_lseek_r+0x54>
 1017d68:	1805883a 	mov	r2,r3
 1017d6c:	dfc00217 	ldw	ra,8(sp)
 1017d70:	dc400117 	ldw	r17,4(sp)
 1017d74:	dc000017 	ldw	r16,0(sp)
 1017d78:	dec00304 	addi	sp,sp,12
 1017d7c:	f800283a 	ret
 1017d80:	80800017 	ldw	r2,0(r16)
 1017d84:	103ff826 	beq	r2,zero,1017d68 <_lseek_r+0x3c>
 1017d88:	88800015 	stw	r2,0(r17)
 1017d8c:	1805883a 	mov	r2,r3
 1017d90:	dfc00217 	ldw	ra,8(sp)
 1017d94:	dc400117 	ldw	r17,4(sp)
 1017d98:	dc000017 	ldw	r16,0(sp)
 1017d9c:	dec00304 	addi	sp,sp,12
 1017da0:	f800283a 	ret

01017da4 <_read_r>:
 1017da4:	defffd04 	addi	sp,sp,-12
 1017da8:	dc000015 	stw	r16,0(sp)
 1017dac:	040040f4 	movhi	r16,259
 1017db0:	842d7c04 	addi	r16,r16,-18960
 1017db4:	dc400115 	stw	r17,4(sp)
 1017db8:	80000015 	stw	zero,0(r16)
 1017dbc:	2023883a 	mov	r17,r4
 1017dc0:	2809883a 	mov	r4,r5
 1017dc4:	300b883a 	mov	r5,r6
 1017dc8:	380d883a 	mov	r6,r7
 1017dcc:	dfc00215 	stw	ra,8(sp)
 1017dd0:	101973c0 	call	101973c <read>
 1017dd4:	1007883a 	mov	r3,r2
 1017dd8:	00bfffc4 	movi	r2,-1
 1017ddc:	18800626 	beq	r3,r2,1017df8 <_read_r+0x54>
 1017de0:	1805883a 	mov	r2,r3
 1017de4:	dfc00217 	ldw	ra,8(sp)
 1017de8:	dc400117 	ldw	r17,4(sp)
 1017dec:	dc000017 	ldw	r16,0(sp)
 1017df0:	dec00304 	addi	sp,sp,12
 1017df4:	f800283a 	ret
 1017df8:	80800017 	ldw	r2,0(r16)
 1017dfc:	103ff826 	beq	r2,zero,1017de0 <_read_r+0x3c>
 1017e00:	88800015 	stw	r2,0(r17)
 1017e04:	1805883a 	mov	r2,r3
 1017e08:	dfc00217 	ldw	ra,8(sp)
 1017e0c:	dc400117 	ldw	r17,4(sp)
 1017e10:	dc000017 	ldw	r16,0(sp)
 1017e14:	dec00304 	addi	sp,sp,12
 1017e18:	f800283a 	ret

01017e1c <__fixunsdfsi>:
 1017e1c:	defffb04 	addi	sp,sp,-20
 1017e20:	dc400115 	stw	r17,4(sp)
 1017e24:	dc000015 	stw	r16,0(sp)
 1017e28:	04507834 	movhi	r17,16864
 1017e2c:	0021883a 	mov	r16,zero
 1017e30:	800d883a 	mov	r6,r16
 1017e34:	880f883a 	mov	r7,r17
 1017e38:	dcc00315 	stw	r19,12(sp)
 1017e3c:	dc800215 	stw	r18,8(sp)
 1017e40:	2827883a 	mov	r19,r5
 1017e44:	2025883a 	mov	r18,r4
 1017e48:	dfc00415 	stw	ra,16(sp)
 1017e4c:	100c9040 	call	100c904 <__gedf2>
 1017e50:	000d883a 	mov	r6,zero
 1017e54:	880f883a 	mov	r7,r17
 1017e58:	980b883a 	mov	r5,r19
 1017e5c:	9009883a 	mov	r4,r18
 1017e60:	10000d16 	blt	r2,zero,1017e98 <__fixunsdfsi+0x7c>
 1017e64:	100c0e40 	call	100c0e4 <__subdf3>
 1017e68:	180b883a 	mov	r5,r3
 1017e6c:	1009883a 	mov	r4,r2
 1017e70:	100cb0c0 	call	100cb0c <__fixdfsi>
 1017e74:	00e00034 	movhi	r3,32768
 1017e78:	10c5883a 	add	r2,r2,r3
 1017e7c:	dfc00417 	ldw	ra,16(sp)
 1017e80:	dcc00317 	ldw	r19,12(sp)
 1017e84:	dc800217 	ldw	r18,8(sp)
 1017e88:	dc400117 	ldw	r17,4(sp)
 1017e8c:	dc000017 	ldw	r16,0(sp)
 1017e90:	dec00504 	addi	sp,sp,20
 1017e94:	f800283a 	ret
 1017e98:	980b883a 	mov	r5,r19
 1017e9c:	9009883a 	mov	r4,r18
 1017ea0:	100cb0c0 	call	100cb0c <__fixdfsi>
 1017ea4:	dfc00417 	ldw	ra,16(sp)
 1017ea8:	dcc00317 	ldw	r19,12(sp)
 1017eac:	dc800217 	ldw	r18,8(sp)
 1017eb0:	dc400117 	ldw	r17,4(sp)
 1017eb4:	dc000017 	ldw	r16,0(sp)
 1017eb8:	dec00504 	addi	sp,sp,20
 1017ebc:	f800283a 	ret

01017ec0 <__udivdi3>:
 1017ec0:	defff004 	addi	sp,sp,-64
 1017ec4:	2005883a 	mov	r2,r4
 1017ec8:	3011883a 	mov	r8,r6
 1017ecc:	df000e15 	stw	fp,56(sp)
 1017ed0:	dd000a15 	stw	r20,40(sp)
 1017ed4:	dc000615 	stw	r16,24(sp)
 1017ed8:	dfc00f15 	stw	ra,60(sp)
 1017edc:	ddc00d15 	stw	r23,52(sp)
 1017ee0:	dd800c15 	stw	r22,48(sp)
 1017ee4:	dd400b15 	stw	r21,44(sp)
 1017ee8:	dcc00915 	stw	r19,36(sp)
 1017eec:	dc800815 	stw	r18,32(sp)
 1017ef0:	dc400715 	stw	r17,28(sp)
 1017ef4:	4021883a 	mov	r16,r8
 1017ef8:	1039883a 	mov	fp,r2
 1017efc:	2829883a 	mov	r20,r5
 1017f00:	38003b1e 	bne	r7,zero,1017ff0 <__udivdi3+0x130>
 1017f04:	2a005c36 	bltu	r5,r8,1018078 <__udivdi3+0x1b8>
 1017f08:	4000a626 	beq	r8,zero,10181a4 <__udivdi3+0x2e4>
 1017f0c:	00bfffd4 	movui	r2,65535
 1017f10:	14009e36 	bltu	r2,r16,101818c <__udivdi3+0x2cc>
 1017f14:	00803fc4 	movi	r2,255
 1017f18:	14013d36 	bltu	r2,r16,1018410 <__udivdi3+0x550>
 1017f1c:	000b883a 	mov	r5,zero
 1017f20:	0005883a 	mov	r2,zero
 1017f24:	8084d83a 	srl	r2,r16,r2
 1017f28:	010040b4 	movhi	r4,258
 1017f2c:	211dcd04 	addi	r4,r4,30516
 1017f30:	01800804 	movi	r6,32
 1017f34:	1105883a 	add	r2,r2,r4
 1017f38:	10c00003 	ldbu	r3,0(r2)
 1017f3c:	28c7883a 	add	r3,r5,r3
 1017f40:	30edc83a 	sub	r22,r6,r3
 1017f44:	b000ee1e 	bne	r22,zero,1018300 <__udivdi3+0x440>
 1017f48:	802ad43a 	srli	r21,r16,16
 1017f4c:	00800044 	movi	r2,1
 1017f50:	a423c83a 	sub	r17,r20,r16
 1017f54:	85ffffcc 	andi	r23,r16,65535
 1017f58:	d8800315 	stw	r2,12(sp)
 1017f5c:	8809883a 	mov	r4,r17
 1017f60:	a80b883a 	mov	r5,r21
 1017f64:	100cdcc0 	call	100cdcc <__udivsi3>
 1017f68:	8809883a 	mov	r4,r17
 1017f6c:	a80b883a 	mov	r5,r21
 1017f70:	102d883a 	mov	r22,r2
 1017f74:	100cdd40 	call	100cdd4 <__umodsi3>
 1017f78:	1004943a 	slli	r2,r2,16
 1017f7c:	e006d43a 	srli	r3,fp,16
 1017f80:	bda3383a 	mul	r17,r23,r22
 1017f84:	10c4b03a 	or	r2,r2,r3
 1017f88:	1440042e 	bgeu	r2,r17,1017f9c <__udivdi3+0xdc>
 1017f8c:	1405883a 	add	r2,r2,r16
 1017f90:	b5bfffc4 	addi	r22,r22,-1
 1017f94:	14000136 	bltu	r2,r16,1017f9c <__udivdi3+0xdc>
 1017f98:	14413d36 	bltu	r2,r17,1018490 <__udivdi3+0x5d0>
 1017f9c:	1463c83a 	sub	r17,r2,r17
 1017fa0:	8809883a 	mov	r4,r17
 1017fa4:	a80b883a 	mov	r5,r21
 1017fa8:	100cdcc0 	call	100cdcc <__udivsi3>
 1017fac:	8809883a 	mov	r4,r17
 1017fb0:	a80b883a 	mov	r5,r21
 1017fb4:	1029883a 	mov	r20,r2
 1017fb8:	100cdd40 	call	100cdd4 <__umodsi3>
 1017fbc:	1004943a 	slli	r2,r2,16
 1017fc0:	bd09383a 	mul	r4,r23,r20
 1017fc4:	e0ffffcc 	andi	r3,fp,65535
 1017fc8:	10c4b03a 	or	r2,r2,r3
 1017fcc:	1100042e 	bgeu	r2,r4,1017fe0 <__udivdi3+0x120>
 1017fd0:	8085883a 	add	r2,r16,r2
 1017fd4:	a53fffc4 	addi	r20,r20,-1
 1017fd8:	14000136 	bltu	r2,r16,1017fe0 <__udivdi3+0x120>
 1017fdc:	11012036 	bltu	r2,r4,1018460 <__udivdi3+0x5a0>
 1017fe0:	b004943a 	slli	r2,r22,16
 1017fe4:	d9000317 	ldw	r4,12(sp)
 1017fe8:	a084b03a 	or	r2,r20,r2
 1017fec:	00001506 	br	1018044 <__udivdi3+0x184>
 1017ff0:	380d883a 	mov	r6,r7
 1017ff4:	29c06236 	bltu	r5,r7,1018180 <__udivdi3+0x2c0>
 1017ff8:	00bfffd4 	movui	r2,65535
 1017ffc:	11c05a36 	bltu	r2,r7,1018168 <__udivdi3+0x2a8>
 1018000:	00803fc4 	movi	r2,255
 1018004:	11c0fc36 	bltu	r2,r7,10183f8 <__udivdi3+0x538>
 1018008:	000b883a 	mov	r5,zero
 101800c:	0005883a 	mov	r2,zero
 1018010:	3084d83a 	srl	r2,r6,r2
 1018014:	010040b4 	movhi	r4,258
 1018018:	211dcd04 	addi	r4,r4,30516
 101801c:	01c00804 	movi	r7,32
 1018020:	1105883a 	add	r2,r2,r4
 1018024:	10c00003 	ldbu	r3,0(r2)
 1018028:	28c7883a 	add	r3,r5,r3
 101802c:	38efc83a 	sub	r23,r7,r3
 1018030:	b800691e 	bne	r23,zero,10181d8 <__udivdi3+0x318>
 1018034:	35000136 	bltu	r6,r20,101803c <__udivdi3+0x17c>
 1018038:	e4005136 	bltu	fp,r16,1018180 <__udivdi3+0x2c0>
 101803c:	00800044 	movi	r2,1
 1018040:	0009883a 	mov	r4,zero
 1018044:	2007883a 	mov	r3,r4
 1018048:	dfc00f17 	ldw	ra,60(sp)
 101804c:	df000e17 	ldw	fp,56(sp)
 1018050:	ddc00d17 	ldw	r23,52(sp)
 1018054:	dd800c17 	ldw	r22,48(sp)
 1018058:	dd400b17 	ldw	r21,44(sp)
 101805c:	dd000a17 	ldw	r20,40(sp)
 1018060:	dcc00917 	ldw	r19,36(sp)
 1018064:	dc800817 	ldw	r18,32(sp)
 1018068:	dc400717 	ldw	r17,28(sp)
 101806c:	dc000617 	ldw	r16,24(sp)
 1018070:	dec01004 	addi	sp,sp,64
 1018074:	f800283a 	ret
 1018078:	00bfffd4 	movui	r2,65535
 101807c:	12005036 	bltu	r2,r8,10181c0 <__udivdi3+0x300>
 1018080:	00803fc4 	movi	r2,255
 1018084:	1200e836 	bltu	r2,r8,1018428 <__udivdi3+0x568>
 1018088:	000b883a 	mov	r5,zero
 101808c:	0005883a 	mov	r2,zero
 1018090:	8084d83a 	srl	r2,r16,r2
 1018094:	010040b4 	movhi	r4,258
 1018098:	211dcd04 	addi	r4,r4,30516
 101809c:	01800804 	movi	r6,32
 10180a0:	1105883a 	add	r2,r2,r4
 10180a4:	10c00003 	ldbu	r3,0(r2)
 10180a8:	28c7883a 	add	r3,r5,r3
 10180ac:	30cbc83a 	sub	r5,r6,r3
 10180b0:	28000626 	beq	r5,zero,10180cc <__udivdi3+0x20c>
 10180b4:	3145c83a 	sub	r2,r6,r5
 10180b8:	e084d83a 	srl	r2,fp,r2
 10180bc:	a146983a 	sll	r3,r20,r5
 10180c0:	e178983a 	sll	fp,fp,r5
 10180c4:	8160983a 	sll	r16,r16,r5
 10180c8:	18a8b03a 	or	r20,r3,r2
 10180cc:	802ad43a 	srli	r21,r16,16
 10180d0:	a009883a 	mov	r4,r20
 10180d4:	85ffffcc 	andi	r23,r16,65535
 10180d8:	a80b883a 	mov	r5,r21
 10180dc:	100cdcc0 	call	100cdcc <__udivsi3>
 10180e0:	a009883a 	mov	r4,r20
 10180e4:	a80b883a 	mov	r5,r21
 10180e8:	102d883a 	mov	r22,r2
 10180ec:	100cdd40 	call	100cdd4 <__umodsi3>
 10180f0:	1004943a 	slli	r2,r2,16
 10180f4:	e006d43a 	srli	r3,fp,16
 10180f8:	bda3383a 	mul	r17,r23,r22
 10180fc:	10c4b03a 	or	r2,r2,r3
 1018100:	1440042e 	bgeu	r2,r17,1018114 <__udivdi3+0x254>
 1018104:	1405883a 	add	r2,r2,r16
 1018108:	b5bfffc4 	addi	r22,r22,-1
 101810c:	14000136 	bltu	r2,r16,1018114 <__udivdi3+0x254>
 1018110:	1440d536 	bltu	r2,r17,1018468 <__udivdi3+0x5a8>
 1018114:	1463c83a 	sub	r17,r2,r17
 1018118:	8809883a 	mov	r4,r17
 101811c:	a80b883a 	mov	r5,r21
 1018120:	100cdcc0 	call	100cdcc <__udivsi3>
 1018124:	8809883a 	mov	r4,r17
 1018128:	a80b883a 	mov	r5,r21
 101812c:	1029883a 	mov	r20,r2
 1018130:	100cdd40 	call	100cdd4 <__umodsi3>
 1018134:	1004943a 	slli	r2,r2,16
 1018138:	bd09383a 	mul	r4,r23,r20
 101813c:	e0ffffcc 	andi	r3,fp,65535
 1018140:	10c4b03a 	or	r2,r2,r3
 1018144:	1100042e 	bgeu	r2,r4,1018158 <__udivdi3+0x298>
 1018148:	8085883a 	add	r2,r16,r2
 101814c:	a53fffc4 	addi	r20,r20,-1
 1018150:	14000136 	bltu	r2,r16,1018158 <__udivdi3+0x298>
 1018154:	1100c736 	bltu	r2,r4,1018474 <__udivdi3+0x5b4>
 1018158:	b004943a 	slli	r2,r22,16
 101815c:	0009883a 	mov	r4,zero
 1018160:	a084b03a 	or	r2,r20,r2
 1018164:	003fb706 	br	1018044 <__udivdi3+0x184>
 1018168:	00804034 	movhi	r2,256
 101816c:	10bfffc4 	addi	r2,r2,-1
 1018170:	11c0a436 	bltu	r2,r7,1018404 <__udivdi3+0x544>
 1018174:	01400404 	movi	r5,16
 1018178:	2805883a 	mov	r2,r5
 101817c:	003fa406 	br	1018010 <__udivdi3+0x150>
 1018180:	0005883a 	mov	r2,zero
 1018184:	0009883a 	mov	r4,zero
 1018188:	003fae06 	br	1018044 <__udivdi3+0x184>
 101818c:	00804034 	movhi	r2,256
 1018190:	10bfffc4 	addi	r2,r2,-1
 1018194:	1400a136 	bltu	r2,r16,101841c <__udivdi3+0x55c>
 1018198:	01400404 	movi	r5,16
 101819c:	2805883a 	mov	r2,r5
 10181a0:	003f6006 	br	1017f24 <__udivdi3+0x64>
 10181a4:	01000044 	movi	r4,1
 10181a8:	000b883a 	mov	r5,zero
 10181ac:	100cdcc0 	call	100cdcc <__udivsi3>
 10181b0:	1021883a 	mov	r16,r2
 10181b4:	00bfffd4 	movui	r2,65535
 10181b8:	143ff436 	bltu	r2,r16,101818c <__udivdi3+0x2cc>
 10181bc:	003f5506 	br	1017f14 <__udivdi3+0x54>
 10181c0:	00804034 	movhi	r2,256
 10181c4:	10bfffc4 	addi	r2,r2,-1
 10181c8:	12009a36 	bltu	r2,r8,1018434 <__udivdi3+0x574>
 10181cc:	01400404 	movi	r5,16
 10181d0:	2805883a 	mov	r2,r5
 10181d4:	003fae06 	br	1018090 <__udivdi3+0x1d0>
 10181d8:	3dc5c83a 	sub	r2,r7,r23
 10181dc:	35c8983a 	sll	r4,r6,r23
 10181e0:	8086d83a 	srl	r3,r16,r2
 10181e4:	a0a2d83a 	srl	r17,r20,r2
 10181e8:	e084d83a 	srl	r2,fp,r2
 10181ec:	20eab03a 	or	r21,r4,r3
 10181f0:	a82cd43a 	srli	r22,r21,16
 10181f4:	a5c6983a 	sll	r3,r20,r23
 10181f8:	8809883a 	mov	r4,r17
 10181fc:	b00b883a 	mov	r5,r22
 1018200:	1886b03a 	or	r3,r3,r2
 1018204:	d8c00215 	stw	r3,8(sp)
 1018208:	100cdcc0 	call	100cdcc <__udivsi3>
 101820c:	8809883a 	mov	r4,r17
 1018210:	b00b883a 	mov	r5,r22
 1018214:	1029883a 	mov	r20,r2
 1018218:	100cdd40 	call	100cdd4 <__umodsi3>
 101821c:	a8ffffcc 	andi	r3,r21,65535
 1018220:	d8c00515 	stw	r3,20(sp)
 1018224:	d9000217 	ldw	r4,8(sp)
 1018228:	d9400517 	ldw	r5,20(sp)
 101822c:	1004943a 	slli	r2,r2,16
 1018230:	2006d43a 	srli	r3,r4,16
 1018234:	85e0983a 	sll	r16,r16,r23
 1018238:	2d23383a 	mul	r17,r5,r20
 101823c:	10c4b03a 	or	r2,r2,r3
 1018240:	dc000015 	stw	r16,0(sp)
 1018244:	1440032e 	bgeu	r2,r17,1018254 <__udivdi3+0x394>
 1018248:	1545883a 	add	r2,r2,r21
 101824c:	a53fffc4 	addi	r20,r20,-1
 1018250:	15407f2e 	bgeu	r2,r21,1018450 <__udivdi3+0x590>
 1018254:	1463c83a 	sub	r17,r2,r17
 1018258:	8809883a 	mov	r4,r17
 101825c:	b00b883a 	mov	r5,r22
 1018260:	100cdcc0 	call	100cdcc <__udivsi3>
 1018264:	8809883a 	mov	r4,r17
 1018268:	b00b883a 	mov	r5,r22
 101826c:	1021883a 	mov	r16,r2
 1018270:	100cdd40 	call	100cdd4 <__umodsi3>
 1018274:	d8c00517 	ldw	r3,20(sp)
 1018278:	d9000217 	ldw	r4,8(sp)
 101827c:	1004943a 	slli	r2,r2,16
 1018280:	1c0f383a 	mul	r7,r3,r16
 1018284:	20ffffcc 	andi	r3,r4,65535
 1018288:	10e2b03a 	or	r17,r2,r3
 101828c:	89c0032e 	bgeu	r17,r7,101829c <__udivdi3+0x3dc>
 1018290:	8d63883a 	add	r17,r17,r21
 1018294:	843fffc4 	addi	r16,r16,-1
 1018298:	8d40692e 	bgeu	r17,r21,1018440 <__udivdi3+0x580>
 101829c:	a008943a 	slli	r4,r20,16
 10182a0:	d9400017 	ldw	r5,0(sp)
 10182a4:	89e3c83a 	sub	r17,r17,r7
 10182a8:	8110b03a 	or	r8,r16,r4
 10182ac:	280cd43a 	srli	r6,r5,16
 10182b0:	28ffffcc 	andi	r3,r5,65535
 10182b4:	40bfffcc 	andi	r2,r8,65535
 10182b8:	400ad43a 	srli	r5,r8,16
 10182bc:	10d3383a 	mul	r9,r2,r3
 10182c0:	1185383a 	mul	r2,r2,r6
 10182c4:	28c7383a 	mul	r3,r5,r3
 10182c8:	4808d43a 	srli	r4,r9,16
 10182cc:	298b383a 	mul	r5,r5,r6
 10182d0:	10c5883a 	add	r2,r2,r3
 10182d4:	2089883a 	add	r4,r4,r2
 10182d8:	20c0022e 	bgeu	r4,r3,10182e4 <__udivdi3+0x424>
 10182dc:	00800074 	movhi	r2,1
 10182e0:	288b883a 	add	r5,r5,r2
 10182e4:	2004d43a 	srli	r2,r4,16
 10182e8:	288b883a 	add	r5,r5,r2
 10182ec:	89403f36 	bltu	r17,r5,10183ec <__udivdi3+0x52c>
 10182f0:	89403926 	beq	r17,r5,10183d8 <__udivdi3+0x518>
 10182f4:	4005883a 	mov	r2,r8
 10182f8:	0009883a 	mov	r4,zero
 10182fc:	003f5106 	br	1018044 <__udivdi3+0x184>
 1018300:	85a0983a 	sll	r16,r16,r22
 1018304:	3585c83a 	sub	r2,r6,r22
 1018308:	a0a2d83a 	srl	r17,r20,r2
 101830c:	802ad43a 	srli	r21,r16,16
 1018310:	e084d83a 	srl	r2,fp,r2
 1018314:	a586983a 	sll	r3,r20,r22
 1018318:	8809883a 	mov	r4,r17
 101831c:	a80b883a 	mov	r5,r21
 1018320:	1886b03a 	or	r3,r3,r2
 1018324:	d8c00115 	stw	r3,4(sp)
 1018328:	100cdcc0 	call	100cdcc <__udivsi3>
 101832c:	8809883a 	mov	r4,r17
 1018330:	a80b883a 	mov	r5,r21
 1018334:	d8800415 	stw	r2,16(sp)
 1018338:	100cdd40 	call	100cdd4 <__umodsi3>
 101833c:	d9000117 	ldw	r4,4(sp)
 1018340:	d9400417 	ldw	r5,16(sp)
 1018344:	1004943a 	slli	r2,r2,16
 1018348:	85ffffcc 	andi	r23,r16,65535
 101834c:	2006d43a 	srli	r3,r4,16
 1018350:	b963383a 	mul	r17,r23,r5
 1018354:	10c4b03a 	or	r2,r2,r3
 1018358:	1440042e 	bgeu	r2,r17,101836c <__udivdi3+0x4ac>
 101835c:	297fffc4 	addi	r5,r5,-1
 1018360:	1405883a 	add	r2,r2,r16
 1018364:	d9400415 	stw	r5,16(sp)
 1018368:	1400442e 	bgeu	r2,r16,101847c <__udivdi3+0x5bc>
 101836c:	1463c83a 	sub	r17,r2,r17
 1018370:	8809883a 	mov	r4,r17
 1018374:	a80b883a 	mov	r5,r21
 1018378:	100cdcc0 	call	100cdcc <__udivsi3>
 101837c:	8809883a 	mov	r4,r17
 1018380:	a80b883a 	mov	r5,r21
 1018384:	1029883a 	mov	r20,r2
 1018388:	100cdd40 	call	100cdd4 <__umodsi3>
 101838c:	d9400117 	ldw	r5,4(sp)
 1018390:	1004943a 	slli	r2,r2,16
 1018394:	bd09383a 	mul	r4,r23,r20
 1018398:	28ffffcc 	andi	r3,r5,65535
 101839c:	10c6b03a 	or	r3,r2,r3
 10183a0:	1900062e 	bgeu	r3,r4,10183bc <__udivdi3+0x4fc>
 10183a4:	1c07883a 	add	r3,r3,r16
 10183a8:	a53fffc4 	addi	r20,r20,-1
 10183ac:	1c000336 	bltu	r3,r16,10183bc <__udivdi3+0x4fc>
 10183b0:	1900022e 	bgeu	r3,r4,10183bc <__udivdi3+0x4fc>
 10183b4:	a53fffc4 	addi	r20,r20,-1
 10183b8:	1c07883a 	add	r3,r3,r16
 10183bc:	d9400417 	ldw	r5,16(sp)
 10183c0:	e5b8983a 	sll	fp,fp,r22
 10183c4:	1923c83a 	sub	r17,r3,r4
 10183c8:	2804943a 	slli	r2,r5,16
 10183cc:	a0a8b03a 	or	r20,r20,r2
 10183d0:	dd000315 	stw	r20,12(sp)
 10183d4:	003ee106 	br	1017f5c <__udivdi3+0x9c>
 10183d8:	2004943a 	slli	r2,r4,16
 10183dc:	e5c8983a 	sll	r4,fp,r23
 10183e0:	48ffffcc 	andi	r3,r9,65535
 10183e4:	10c5883a 	add	r2,r2,r3
 10183e8:	20bfc22e 	bgeu	r4,r2,10182f4 <__udivdi3+0x434>
 10183ec:	40bfffc4 	addi	r2,r8,-1
 10183f0:	0009883a 	mov	r4,zero
 10183f4:	003f1306 	br	1018044 <__udivdi3+0x184>
 10183f8:	01400204 	movi	r5,8
 10183fc:	2805883a 	mov	r2,r5
 1018400:	003f0306 	br	1018010 <__udivdi3+0x150>
 1018404:	01400604 	movi	r5,24
 1018408:	2805883a 	mov	r2,r5
 101840c:	003f0006 	br	1018010 <__udivdi3+0x150>
 1018410:	01400204 	movi	r5,8
 1018414:	2805883a 	mov	r2,r5
 1018418:	003ec206 	br	1017f24 <__udivdi3+0x64>
 101841c:	01400604 	movi	r5,24
 1018420:	2805883a 	mov	r2,r5
 1018424:	003ebf06 	br	1017f24 <__udivdi3+0x64>
 1018428:	01400204 	movi	r5,8
 101842c:	2805883a 	mov	r2,r5
 1018430:	003f1706 	br	1018090 <__udivdi3+0x1d0>
 1018434:	01400604 	movi	r5,24
 1018438:	2805883a 	mov	r2,r5
 101843c:	003f1406 	br	1018090 <__udivdi3+0x1d0>
 1018440:	89ff962e 	bgeu	r17,r7,101829c <__udivdi3+0x3dc>
 1018444:	8d63883a 	add	r17,r17,r21
 1018448:	843fffc4 	addi	r16,r16,-1
 101844c:	003f9306 	br	101829c <__udivdi3+0x3dc>
 1018450:	147f802e 	bgeu	r2,r17,1018254 <__udivdi3+0x394>
 1018454:	a53fffc4 	addi	r20,r20,-1
 1018458:	1545883a 	add	r2,r2,r21
 101845c:	003f7d06 	br	1018254 <__udivdi3+0x394>
 1018460:	a53fffc4 	addi	r20,r20,-1
 1018464:	003ede06 	br	1017fe0 <__udivdi3+0x120>
 1018468:	b5bfffc4 	addi	r22,r22,-1
 101846c:	1405883a 	add	r2,r2,r16
 1018470:	003f2806 	br	1018114 <__udivdi3+0x254>
 1018474:	a53fffc4 	addi	r20,r20,-1
 1018478:	003f3706 	br	1018158 <__udivdi3+0x298>
 101847c:	147fbb2e 	bgeu	r2,r17,101836c <__udivdi3+0x4ac>
 1018480:	297fffc4 	addi	r5,r5,-1
 1018484:	1405883a 	add	r2,r2,r16
 1018488:	d9400415 	stw	r5,16(sp)
 101848c:	003fb706 	br	101836c <__udivdi3+0x4ac>
 1018490:	b5bfffc4 	addi	r22,r22,-1
 1018494:	1405883a 	add	r2,r2,r16
 1018498:	003ec006 	br	1017f9c <__udivdi3+0xdc>

0101849c <__umoddi3>:
 101849c:	defff104 	addi	sp,sp,-60
 10184a0:	dd800b15 	stw	r22,44(sp)
 10184a4:	dd000915 	stw	r20,36(sp)
 10184a8:	dc000515 	stw	r16,20(sp)
 10184ac:	dfc00e15 	stw	ra,56(sp)
 10184b0:	df000d15 	stw	fp,52(sp)
 10184b4:	ddc00c15 	stw	r23,48(sp)
 10184b8:	dd400a15 	stw	r21,40(sp)
 10184bc:	dcc00815 	stw	r19,32(sp)
 10184c0:	dc800715 	stw	r18,28(sp)
 10184c4:	dc400615 	stw	r17,24(sp)
 10184c8:	3021883a 	mov	r16,r6
 10184cc:	202d883a 	mov	r22,r4
 10184d0:	2829883a 	mov	r20,r5
 10184d4:	38002b1e 	bne	r7,zero,1018584 <__umoddi3+0xe8>
 10184d8:	29805036 	bltu	r5,r6,101861c <__umoddi3+0x180>
 10184dc:	30008a26 	beq	r6,zero,1018708 <__umoddi3+0x26c>
 10184e0:	00bfffd4 	movui	r2,65535
 10184e4:	14008236 	bltu	r2,r16,10186f0 <__umoddi3+0x254>
 10184e8:	00803fc4 	movi	r2,255
 10184ec:	14013636 	bltu	r2,r16,10189c8 <__umoddi3+0x52c>
 10184f0:	000b883a 	mov	r5,zero
 10184f4:	0005883a 	mov	r2,zero
 10184f8:	8084d83a 	srl	r2,r16,r2
 10184fc:	010040b4 	movhi	r4,258
 1018500:	211dcd04 	addi	r4,r4,30516
 1018504:	01800804 	movi	r6,32
 1018508:	1105883a 	add	r2,r2,r4
 101850c:	10c00003 	ldbu	r3,0(r2)
 1018510:	28c7883a 	add	r3,r5,r3
 1018514:	30efc83a 	sub	r23,r6,r3
 1018518:	b800941e 	bne	r23,zero,101876c <__umoddi3+0x2d0>
 101851c:	802ad43a 	srli	r21,r16,16
 1018520:	a423c83a 	sub	r17,r20,r16
 1018524:	0039883a 	mov	fp,zero
 1018528:	853fffcc 	andi	r20,r16,65535
 101852c:	8809883a 	mov	r4,r17
 1018530:	a80b883a 	mov	r5,r21
 1018534:	100cdcc0 	call	100cdcc <__udivsi3>
 1018538:	8809883a 	mov	r4,r17
 101853c:	a80b883a 	mov	r5,r21
 1018540:	a0a3383a 	mul	r17,r20,r2
 1018544:	100cdd40 	call	100cdd4 <__umodsi3>
 1018548:	1004943a 	slli	r2,r2,16
 101854c:	b006d43a 	srli	r3,r22,16
 1018550:	10c4b03a 	or	r2,r2,r3
 1018554:	1440032e 	bgeu	r2,r17,1018564 <__umoddi3+0xc8>
 1018558:	1405883a 	add	r2,r2,r16
 101855c:	14000136 	bltu	r2,r16,1018564 <__umoddi3+0xc8>
 1018560:	14413536 	bltu	r2,r17,1018a38 <__umoddi3+0x59c>
 1018564:	1463c83a 	sub	r17,r2,r17
 1018568:	8809883a 	mov	r4,r17
 101856c:	a80b883a 	mov	r5,r21
 1018570:	100cdcc0 	call	100cdcc <__udivsi3>
 1018574:	8809883a 	mov	r4,r17
 1018578:	a0a3383a 	mul	r17,r20,r2
 101857c:	a80b883a 	mov	r5,r21
 1018580:	00004d06 	br	10186b8 <__umoddi3+0x21c>
 1018584:	380d883a 	mov	r6,r7
 1018588:	29c0102e 	bgeu	r5,r7,10185cc <__umoddi3+0x130>
 101858c:	2011883a 	mov	r8,r4
 1018590:	2813883a 	mov	r9,r5
 1018594:	4005883a 	mov	r2,r8
 1018598:	4807883a 	mov	r3,r9
 101859c:	dfc00e17 	ldw	ra,56(sp)
 10185a0:	df000d17 	ldw	fp,52(sp)
 10185a4:	ddc00c17 	ldw	r23,48(sp)
 10185a8:	dd800b17 	ldw	r22,44(sp)
 10185ac:	dd400a17 	ldw	r21,40(sp)
 10185b0:	dd000917 	ldw	r20,36(sp)
 10185b4:	dcc00817 	ldw	r19,32(sp)
 10185b8:	dc800717 	ldw	r18,28(sp)
 10185bc:	dc400617 	ldw	r17,24(sp)
 10185c0:	dc000517 	ldw	r16,20(sp)
 10185c4:	dec00f04 	addi	sp,sp,60
 10185c8:	f800283a 	ret
 10185cc:	00bfffd4 	movui	r2,65535
 10185d0:	11c05a36 	bltu	r2,r7,101873c <__umoddi3+0x2a0>
 10185d4:	00803fc4 	movi	r2,255
 10185d8:	11c0fe36 	bltu	r2,r7,10189d4 <__umoddi3+0x538>
 10185dc:	000b883a 	mov	r5,zero
 10185e0:	0005883a 	mov	r2,zero
 10185e4:	3084d83a 	srl	r2,r6,r2
 10185e8:	010040b4 	movhi	r4,258
 10185ec:	211dcd04 	addi	r4,r4,30516
 10185f0:	01c00804 	movi	r7,32
 10185f4:	1105883a 	add	r2,r2,r4
 10185f8:	10c00003 	ldbu	r3,0(r2)
 10185fc:	28c7883a 	add	r3,r5,r3
 1018600:	38ebc83a 	sub	r21,r7,r3
 1018604:	a800851e 	bne	r21,zero,101881c <__umoddi3+0x380>
 1018608:	35005236 	bltu	r6,r20,1018754 <__umoddi3+0x2b8>
 101860c:	b400512e 	bgeu	r22,r16,1018754 <__umoddi3+0x2b8>
 1018610:	b011883a 	mov	r8,r22
 1018614:	a013883a 	mov	r9,r20
 1018618:	003fde06 	br	1018594 <__umoddi3+0xf8>
 101861c:	00bfffd4 	movui	r2,65535
 1018620:	11804036 	bltu	r2,r6,1018724 <__umoddi3+0x288>
 1018624:	00803fc4 	movi	r2,255
 1018628:	1180ed36 	bltu	r2,r6,10189e0 <__umoddi3+0x544>
 101862c:	000b883a 	mov	r5,zero
 1018630:	0005883a 	mov	r2,zero
 1018634:	8084d83a 	srl	r2,r16,r2
 1018638:	010040b4 	movhi	r4,258
 101863c:	211dcd04 	addi	r4,r4,30516
 1018640:	01800804 	movi	r6,32
 1018644:	1105883a 	add	r2,r2,r4
 1018648:	10c00003 	ldbu	r3,0(r2)
 101864c:	28c7883a 	add	r3,r5,r3
 1018650:	30c7c83a 	sub	r3,r6,r3
 1018654:	1800bf1e 	bne	r3,zero,1018954 <__umoddi3+0x4b8>
 1018658:	0039883a 	mov	fp,zero
 101865c:	802ad43a 	srli	r21,r16,16
 1018660:	a009883a 	mov	r4,r20
 1018664:	85ffffcc 	andi	r23,r16,65535
 1018668:	a80b883a 	mov	r5,r21
 101866c:	100cdcc0 	call	100cdcc <__udivsi3>
 1018670:	a009883a 	mov	r4,r20
 1018674:	a80b883a 	mov	r5,r21
 1018678:	b8a3383a 	mul	r17,r23,r2
 101867c:	100cdd40 	call	100cdd4 <__umodsi3>
 1018680:	1004943a 	slli	r2,r2,16
 1018684:	b006d43a 	srli	r3,r22,16
 1018688:	10c4b03a 	or	r2,r2,r3
 101868c:	1440032e 	bgeu	r2,r17,101869c <__umoddi3+0x200>
 1018690:	1405883a 	add	r2,r2,r16
 1018694:	14000136 	bltu	r2,r16,101869c <__umoddi3+0x200>
 1018698:	1440e536 	bltu	r2,r17,1018a30 <__umoddi3+0x594>
 101869c:	1463c83a 	sub	r17,r2,r17
 10186a0:	8809883a 	mov	r4,r17
 10186a4:	a80b883a 	mov	r5,r21
 10186a8:	100cdcc0 	call	100cdcc <__udivsi3>
 10186ac:	8809883a 	mov	r4,r17
 10186b0:	b8a3383a 	mul	r17,r23,r2
 10186b4:	a80b883a 	mov	r5,r21
 10186b8:	100cdd40 	call	100cdd4 <__umodsi3>
 10186bc:	1004943a 	slli	r2,r2,16
 10186c0:	b0ffffcc 	andi	r3,r22,65535
 10186c4:	10c4b03a 	or	r2,r2,r3
 10186c8:	1440042e 	bgeu	r2,r17,10186dc <__umoddi3+0x240>
 10186cc:	1405883a 	add	r2,r2,r16
 10186d0:	14000236 	bltu	r2,r16,10186dc <__umoddi3+0x240>
 10186d4:	1440012e 	bgeu	r2,r17,10186dc <__umoddi3+0x240>
 10186d8:	1405883a 	add	r2,r2,r16
 10186dc:	1445c83a 	sub	r2,r2,r17
 10186e0:	1724d83a 	srl	r18,r2,fp
 10186e4:	0013883a 	mov	r9,zero
 10186e8:	9011883a 	mov	r8,r18
 10186ec:	003fa906 	br	1018594 <__umoddi3+0xf8>
 10186f0:	00804034 	movhi	r2,256
 10186f4:	10bfffc4 	addi	r2,r2,-1
 10186f8:	1400b036 	bltu	r2,r16,10189bc <__umoddi3+0x520>
 10186fc:	01400404 	movi	r5,16
 1018700:	2805883a 	mov	r2,r5
 1018704:	003f7c06 	br	10184f8 <__umoddi3+0x5c>
 1018708:	01000044 	movi	r4,1
 101870c:	000b883a 	mov	r5,zero
 1018710:	100cdcc0 	call	100cdcc <__udivsi3>
 1018714:	1021883a 	mov	r16,r2
 1018718:	00bfffd4 	movui	r2,65535
 101871c:	143ff436 	bltu	r2,r16,10186f0 <__umoddi3+0x254>
 1018720:	003f7106 	br	10184e8 <__umoddi3+0x4c>
 1018724:	00804034 	movhi	r2,256
 1018728:	10bfffc4 	addi	r2,r2,-1
 101872c:	1180af36 	bltu	r2,r6,10189ec <__umoddi3+0x550>
 1018730:	01400404 	movi	r5,16
 1018734:	2805883a 	mov	r2,r5
 1018738:	003fbe06 	br	1018634 <__umoddi3+0x198>
 101873c:	00804034 	movhi	r2,256
 1018740:	10bfffc4 	addi	r2,r2,-1
 1018744:	11c0ac36 	bltu	r2,r7,10189f8 <__umoddi3+0x55c>
 1018748:	01400404 	movi	r5,16
 101874c:	2805883a 	mov	r2,r5
 1018750:	003fa406 	br	10185e4 <__umoddi3+0x148>
 1018754:	b409c83a 	sub	r4,r22,r16
 1018758:	b105803a 	cmpltu	r2,r22,r4
 101875c:	a187c83a 	sub	r3,r20,r6
 1018760:	18a9c83a 	sub	r20,r3,r2
 1018764:	202d883a 	mov	r22,r4
 1018768:	003fa906 	br	1018610 <__umoddi3+0x174>
 101876c:	85e0983a 	sll	r16,r16,r23
 1018770:	35c5c83a 	sub	r2,r6,r23
 1018774:	a0a2d83a 	srl	r17,r20,r2
 1018778:	802ad43a 	srli	r21,r16,16
 101877c:	b084d83a 	srl	r2,r22,r2
 1018780:	a5c6983a 	sll	r3,r20,r23
 1018784:	8809883a 	mov	r4,r17
 1018788:	a80b883a 	mov	r5,r21
 101878c:	1886b03a 	or	r3,r3,r2
 1018790:	d8c00115 	stw	r3,4(sp)
 1018794:	853fffcc 	andi	r20,r16,65535
 1018798:	100cdcc0 	call	100cdcc <__udivsi3>
 101879c:	8809883a 	mov	r4,r17
 10187a0:	a80b883a 	mov	r5,r21
 10187a4:	a0a3383a 	mul	r17,r20,r2
 10187a8:	100cdd40 	call	100cdd4 <__umodsi3>
 10187ac:	d9000117 	ldw	r4,4(sp)
 10187b0:	1004943a 	slli	r2,r2,16
 10187b4:	b839883a 	mov	fp,r23
 10187b8:	2006d43a 	srli	r3,r4,16
 10187bc:	10c4b03a 	or	r2,r2,r3
 10187c0:	1440022e 	bgeu	r2,r17,10187cc <__umoddi3+0x330>
 10187c4:	1405883a 	add	r2,r2,r16
 10187c8:	1400962e 	bgeu	r2,r16,1018a24 <__umoddi3+0x588>
 10187cc:	1463c83a 	sub	r17,r2,r17
 10187d0:	8809883a 	mov	r4,r17
 10187d4:	a80b883a 	mov	r5,r21
 10187d8:	100cdcc0 	call	100cdcc <__udivsi3>
 10187dc:	8809883a 	mov	r4,r17
 10187e0:	a80b883a 	mov	r5,r21
 10187e4:	a0a3383a 	mul	r17,r20,r2
 10187e8:	100cdd40 	call	100cdd4 <__umodsi3>
 10187ec:	d9400117 	ldw	r5,4(sp)
 10187f0:	1004943a 	slli	r2,r2,16
 10187f4:	28ffffcc 	andi	r3,r5,65535
 10187f8:	10c4b03a 	or	r2,r2,r3
 10187fc:	1440042e 	bgeu	r2,r17,1018810 <__umoddi3+0x374>
 1018800:	1405883a 	add	r2,r2,r16
 1018804:	14000236 	bltu	r2,r16,1018810 <__umoddi3+0x374>
 1018808:	1440012e 	bgeu	r2,r17,1018810 <__umoddi3+0x374>
 101880c:	1405883a 	add	r2,r2,r16
 1018810:	b5ec983a 	sll	r22,r22,r23
 1018814:	1463c83a 	sub	r17,r2,r17
 1018818:	003f4406 	br	101852c <__umoddi3+0x90>
 101881c:	3d4fc83a 	sub	r7,r7,r21
 1018820:	3546983a 	sll	r3,r6,r21
 1018824:	81c4d83a 	srl	r2,r16,r7
 1018828:	a1e2d83a 	srl	r17,r20,r7
 101882c:	a54c983a 	sll	r6,r20,r21
 1018830:	18aeb03a 	or	r23,r3,r2
 1018834:	b828d43a 	srli	r20,r23,16
 1018838:	b1c4d83a 	srl	r2,r22,r7
 101883c:	8809883a 	mov	r4,r17
 1018840:	a00b883a 	mov	r5,r20
 1018844:	308cb03a 	or	r6,r6,r2
 1018848:	d9c00315 	stw	r7,12(sp)
 101884c:	d9800215 	stw	r6,8(sp)
 1018850:	100cdcc0 	call	100cdcc <__udivsi3>
 1018854:	8809883a 	mov	r4,r17
 1018858:	a00b883a 	mov	r5,r20
 101885c:	1039883a 	mov	fp,r2
 1018860:	100cdd40 	call	100cdd4 <__umodsi3>
 1018864:	b8ffffcc 	andi	r3,r23,65535
 1018868:	d8c00415 	stw	r3,16(sp)
 101886c:	d9000217 	ldw	r4,8(sp)
 1018870:	d9400417 	ldw	r5,16(sp)
 1018874:	1004943a 	slli	r2,r2,16
 1018878:	2006d43a 	srli	r3,r4,16
 101887c:	8560983a 	sll	r16,r16,r21
 1018880:	2f23383a 	mul	r17,r5,fp
 1018884:	10c4b03a 	or	r2,r2,r3
 1018888:	dc000015 	stw	r16,0(sp)
 101888c:	b56c983a 	sll	r22,r22,r21
 1018890:	1440032e 	bgeu	r2,r17,10188a0 <__umoddi3+0x404>
 1018894:	15c5883a 	add	r2,r2,r23
 1018898:	e73fffc4 	addi	fp,fp,-1
 101889c:	15c05d2e 	bgeu	r2,r23,1018a14 <__umoddi3+0x578>
 10188a0:	1463c83a 	sub	r17,r2,r17
 10188a4:	8809883a 	mov	r4,r17
 10188a8:	a00b883a 	mov	r5,r20
 10188ac:	100cdcc0 	call	100cdcc <__udivsi3>
 10188b0:	8809883a 	mov	r4,r17
 10188b4:	a00b883a 	mov	r5,r20
 10188b8:	1021883a 	mov	r16,r2
 10188bc:	100cdd40 	call	100cdd4 <__umodsi3>
 10188c0:	d8c00417 	ldw	r3,16(sp)
 10188c4:	d9000217 	ldw	r4,8(sp)
 10188c8:	1004943a 	slli	r2,r2,16
 10188cc:	1c23383a 	mul	r17,r3,r16
 10188d0:	20ffffcc 	andi	r3,r4,65535
 10188d4:	10ceb03a 	or	r7,r2,r3
 10188d8:	3c40032e 	bgeu	r7,r17,10188e8 <__umoddi3+0x44c>
 10188dc:	3dcf883a 	add	r7,r7,r23
 10188e0:	843fffc4 	addi	r16,r16,-1
 10188e4:	3dc0472e 	bgeu	r7,r23,1018a04 <__umoddi3+0x568>
 10188e8:	e004943a 	slli	r2,fp,16
 10188ec:	d9400017 	ldw	r5,0(sp)
 10188f0:	3c4fc83a 	sub	r7,r7,r17
 10188f4:	8084b03a 	or	r2,r16,r2
 10188f8:	28ffffcc 	andi	r3,r5,65535
 10188fc:	280cd43a 	srli	r6,r5,16
 1018900:	100ad43a 	srli	r5,r2,16
 1018904:	10bfffcc 	andi	r2,r2,65535
 1018908:	10d1383a 	mul	r8,r2,r3
 101890c:	28c7383a 	mul	r3,r5,r3
 1018910:	1185383a 	mul	r2,r2,r6
 1018914:	4008d43a 	srli	r4,r8,16
 1018918:	298b383a 	mul	r5,r5,r6
 101891c:	10c5883a 	add	r2,r2,r3
 1018920:	2089883a 	add	r4,r4,r2
 1018924:	20c0022e 	bgeu	r4,r3,1018930 <__umoddi3+0x494>
 1018928:	00800074 	movhi	r2,1
 101892c:	288b883a 	add	r5,r5,r2
 1018930:	2004d43a 	srli	r2,r4,16
 1018934:	2008943a 	slli	r4,r4,16
 1018938:	40ffffcc 	andi	r3,r8,65535
 101893c:	288b883a 	add	r5,r5,r2
 1018940:	20c9883a 	add	r4,r4,r3
 1018944:	39400b36 	bltu	r7,r5,1018974 <__umoddi3+0x4d8>
 1018948:	39403d26 	beq	r7,r5,1018a40 <__umoddi3+0x5a4>
 101894c:	394bc83a 	sub	r5,r7,r5
 1018950:	00000f06 	br	1018990 <__umoddi3+0x4f4>
 1018954:	30c5c83a 	sub	r2,r6,r3
 1018958:	1839883a 	mov	fp,r3
 101895c:	b084d83a 	srl	r2,r22,r2
 1018960:	a0c6983a 	sll	r3,r20,r3
 1018964:	8720983a 	sll	r16,r16,fp
 1018968:	b72c983a 	sll	r22,r22,fp
 101896c:	18a8b03a 	or	r20,r3,r2
 1018970:	003f3a06 	br	101865c <__umoddi3+0x1c0>
 1018974:	d8c00017 	ldw	r3,0(sp)
 1018978:	20c5c83a 	sub	r2,r4,r3
 101897c:	2089803a 	cmpltu	r4,r4,r2
 1018980:	2dc7c83a 	sub	r3,r5,r23
 1018984:	1907c83a 	sub	r3,r3,r4
 1018988:	38cbc83a 	sub	r5,r7,r3
 101898c:	1009883a 	mov	r4,r2
 1018990:	b105c83a 	sub	r2,r22,r4
 1018994:	b087803a 	cmpltu	r3,r22,r2
 1018998:	28c7c83a 	sub	r3,r5,r3
 101899c:	d9400317 	ldw	r5,12(sp)
 10189a0:	1544d83a 	srl	r2,r2,r21
 10189a4:	1948983a 	sll	r4,r3,r5
 10189a8:	1d46d83a 	srl	r3,r3,r21
 10189ac:	20a4b03a 	or	r18,r4,r2
 10189b0:	9011883a 	mov	r8,r18
 10189b4:	1813883a 	mov	r9,r3
 10189b8:	003ef606 	br	1018594 <__umoddi3+0xf8>
 10189bc:	01400604 	movi	r5,24
 10189c0:	2805883a 	mov	r2,r5
 10189c4:	003ecc06 	br	10184f8 <__umoddi3+0x5c>
 10189c8:	01400204 	movi	r5,8
 10189cc:	2805883a 	mov	r2,r5
 10189d0:	003ec906 	br	10184f8 <__umoddi3+0x5c>
 10189d4:	01400204 	movi	r5,8
 10189d8:	2805883a 	mov	r2,r5
 10189dc:	003f0106 	br	10185e4 <__umoddi3+0x148>
 10189e0:	01400204 	movi	r5,8
 10189e4:	2805883a 	mov	r2,r5
 10189e8:	003f1206 	br	1018634 <__umoddi3+0x198>
 10189ec:	01400604 	movi	r5,24
 10189f0:	2805883a 	mov	r2,r5
 10189f4:	003f0f06 	br	1018634 <__umoddi3+0x198>
 10189f8:	01400604 	movi	r5,24
 10189fc:	2805883a 	mov	r2,r5
 1018a00:	003ef806 	br	10185e4 <__umoddi3+0x148>
 1018a04:	3c7fb82e 	bgeu	r7,r17,10188e8 <__umoddi3+0x44c>
 1018a08:	843fffc4 	addi	r16,r16,-1
 1018a0c:	3dcf883a 	add	r7,r7,r23
 1018a10:	003fb506 	br	10188e8 <__umoddi3+0x44c>
 1018a14:	147fa22e 	bgeu	r2,r17,10188a0 <__umoddi3+0x404>
 1018a18:	e73fffc4 	addi	fp,fp,-1
 1018a1c:	15c5883a 	add	r2,r2,r23
 1018a20:	003f9f06 	br	10188a0 <__umoddi3+0x404>
 1018a24:	147f692e 	bgeu	r2,r17,10187cc <__umoddi3+0x330>
 1018a28:	1405883a 	add	r2,r2,r16
 1018a2c:	003f6706 	br	10187cc <__umoddi3+0x330>
 1018a30:	1405883a 	add	r2,r2,r16
 1018a34:	003f1906 	br	101869c <__umoddi3+0x200>
 1018a38:	1405883a 	add	r2,r2,r16
 1018a3c:	003ec906 	br	1018564 <__umoddi3+0xc8>
 1018a40:	b13fcc36 	bltu	r22,r4,1018974 <__umoddi3+0x4d8>
 1018a44:	000b883a 	mov	r5,zero
 1018a48:	003fd106 	br	1018990 <__umoddi3+0x4f4>

01018a4c <__nesf2>:
 1018a4c:	defff304 	addi	sp,sp,-52
 1018a50:	dc400b15 	stw	r17,44(sp)
 1018a54:	dc400204 	addi	r17,sp,8
 1018a58:	dc000a15 	stw	r16,40(sp)
 1018a5c:	d9000015 	stw	r4,0(sp)
 1018a60:	d9400115 	stw	r5,4(sp)
 1018a64:	d809883a 	mov	r4,sp
 1018a68:	880b883a 	mov	r5,r17
 1018a6c:	dc000604 	addi	r16,sp,24
 1018a70:	dfc00c15 	stw	ra,48(sp)
 1018a74:	100d0540 	call	100d054 <__unpack_f>
 1018a78:	d9000104 	addi	r4,sp,4
 1018a7c:	800b883a 	mov	r5,r16
 1018a80:	100d0540 	call	100d054 <__unpack_f>
 1018a84:	d8800217 	ldw	r2,8(sp)
 1018a88:	00c00044 	movi	r3,1
 1018a8c:	180d883a 	mov	r6,r3
 1018a90:	1880062e 	bgeu	r3,r2,1018aac <__nesf2+0x60>
 1018a94:	d8800617 	ldw	r2,24(sp)
 1018a98:	8809883a 	mov	r4,r17
 1018a9c:	800b883a 	mov	r5,r16
 1018aa0:	1880022e 	bgeu	r3,r2,1018aac <__nesf2+0x60>
 1018aa4:	100d11c0 	call	100d11c <__fpcmp_parts_f>
 1018aa8:	100d883a 	mov	r6,r2
 1018aac:	3005883a 	mov	r2,r6
 1018ab0:	dfc00c17 	ldw	ra,48(sp)
 1018ab4:	dc400b17 	ldw	r17,44(sp)
 1018ab8:	dc000a17 	ldw	r16,40(sp)
 1018abc:	dec00d04 	addi	sp,sp,52
 1018ac0:	f800283a 	ret

01018ac4 <__gtsf2>:
 1018ac4:	defff304 	addi	sp,sp,-52
 1018ac8:	dc400b15 	stw	r17,44(sp)
 1018acc:	dc400204 	addi	r17,sp,8
 1018ad0:	dc000a15 	stw	r16,40(sp)
 1018ad4:	d9000015 	stw	r4,0(sp)
 1018ad8:	d9400115 	stw	r5,4(sp)
 1018adc:	d809883a 	mov	r4,sp
 1018ae0:	880b883a 	mov	r5,r17
 1018ae4:	dc000604 	addi	r16,sp,24
 1018ae8:	dfc00c15 	stw	ra,48(sp)
 1018aec:	100d0540 	call	100d054 <__unpack_f>
 1018af0:	d9000104 	addi	r4,sp,4
 1018af4:	800b883a 	mov	r5,r16
 1018af8:	100d0540 	call	100d054 <__unpack_f>
 1018afc:	d8800217 	ldw	r2,8(sp)
 1018b00:	00c00044 	movi	r3,1
 1018b04:	01bfffc4 	movi	r6,-1
 1018b08:	1880062e 	bgeu	r3,r2,1018b24 <__gtsf2+0x60>
 1018b0c:	d8800617 	ldw	r2,24(sp)
 1018b10:	8809883a 	mov	r4,r17
 1018b14:	800b883a 	mov	r5,r16
 1018b18:	1880022e 	bgeu	r3,r2,1018b24 <__gtsf2+0x60>
 1018b1c:	100d11c0 	call	100d11c <__fpcmp_parts_f>
 1018b20:	100d883a 	mov	r6,r2
 1018b24:	3005883a 	mov	r2,r6
 1018b28:	dfc00c17 	ldw	ra,48(sp)
 1018b2c:	dc400b17 	ldw	r17,44(sp)
 1018b30:	dc000a17 	ldw	r16,40(sp)
 1018b34:	dec00d04 	addi	sp,sp,52
 1018b38:	f800283a 	ret

01018b3c <__nedf2>:
 1018b3c:	deffef04 	addi	sp,sp,-68
 1018b40:	dc400f15 	stw	r17,60(sp)
 1018b44:	dc400404 	addi	r17,sp,16
 1018b48:	2005883a 	mov	r2,r4
 1018b4c:	2807883a 	mov	r3,r5
 1018b50:	dc000e15 	stw	r16,56(sp)
 1018b54:	d809883a 	mov	r4,sp
 1018b58:	880b883a 	mov	r5,r17
 1018b5c:	dc000904 	addi	r16,sp,36
 1018b60:	d8c00115 	stw	r3,4(sp)
 1018b64:	d8800015 	stw	r2,0(sp)
 1018b68:	d9800215 	stw	r6,8(sp)
 1018b6c:	dfc01015 	stw	ra,64(sp)
 1018b70:	d9c00315 	stw	r7,12(sp)
 1018b74:	100d5040 	call	100d504 <__unpack_d>
 1018b78:	d9000204 	addi	r4,sp,8
 1018b7c:	800b883a 	mov	r5,r16
 1018b80:	100d5040 	call	100d504 <__unpack_d>
 1018b84:	d8800417 	ldw	r2,16(sp)
 1018b88:	00c00044 	movi	r3,1
 1018b8c:	180d883a 	mov	r6,r3
 1018b90:	1880062e 	bgeu	r3,r2,1018bac <__nedf2+0x70>
 1018b94:	d8800917 	ldw	r2,36(sp)
 1018b98:	8809883a 	mov	r4,r17
 1018b9c:	800b883a 	mov	r5,r16
 1018ba0:	1880022e 	bgeu	r3,r2,1018bac <__nedf2+0x70>
 1018ba4:	100d63c0 	call	100d63c <__fpcmp_parts_d>
 1018ba8:	100d883a 	mov	r6,r2
 1018bac:	3005883a 	mov	r2,r6
 1018bb0:	dfc01017 	ldw	ra,64(sp)
 1018bb4:	dc400f17 	ldw	r17,60(sp)
 1018bb8:	dc000e17 	ldw	r16,56(sp)
 1018bbc:	dec01104 	addi	sp,sp,68
 1018bc0:	f800283a 	ret

01018bc4 <__ledf2>:
 1018bc4:	deffef04 	addi	sp,sp,-68
 1018bc8:	dc400f15 	stw	r17,60(sp)
 1018bcc:	dc400404 	addi	r17,sp,16
 1018bd0:	2005883a 	mov	r2,r4
 1018bd4:	2807883a 	mov	r3,r5
 1018bd8:	dc000e15 	stw	r16,56(sp)
 1018bdc:	d809883a 	mov	r4,sp
 1018be0:	880b883a 	mov	r5,r17
 1018be4:	dc000904 	addi	r16,sp,36
 1018be8:	d8c00115 	stw	r3,4(sp)
 1018bec:	d8800015 	stw	r2,0(sp)
 1018bf0:	d9800215 	stw	r6,8(sp)
 1018bf4:	dfc01015 	stw	ra,64(sp)
 1018bf8:	d9c00315 	stw	r7,12(sp)
 1018bfc:	100d5040 	call	100d504 <__unpack_d>
 1018c00:	d9000204 	addi	r4,sp,8
 1018c04:	800b883a 	mov	r5,r16
 1018c08:	100d5040 	call	100d504 <__unpack_d>
 1018c0c:	d8800417 	ldw	r2,16(sp)
 1018c10:	00c00044 	movi	r3,1
 1018c14:	180d883a 	mov	r6,r3
 1018c18:	1880062e 	bgeu	r3,r2,1018c34 <__ledf2+0x70>
 1018c1c:	d8800917 	ldw	r2,36(sp)
 1018c20:	8809883a 	mov	r4,r17
 1018c24:	800b883a 	mov	r5,r16
 1018c28:	1880022e 	bgeu	r3,r2,1018c34 <__ledf2+0x70>
 1018c2c:	100d63c0 	call	100d63c <__fpcmp_parts_d>
 1018c30:	100d883a 	mov	r6,r2
 1018c34:	3005883a 	mov	r2,r6
 1018c38:	dfc01017 	ldw	ra,64(sp)
 1018c3c:	dc400f17 	ldw	r17,60(sp)
 1018c40:	dc000e17 	ldw	r16,56(sp)
 1018c44:	dec01104 	addi	sp,sp,68
 1018c48:	f800283a 	ret

01018c4c <__floatunsidf>:
 1018c4c:	defff204 	addi	sp,sp,-56
 1018c50:	dfc00d15 	stw	ra,52(sp)
 1018c54:	ddc00c15 	stw	r23,48(sp)
 1018c58:	dd800b15 	stw	r22,44(sp)
 1018c5c:	dd400a15 	stw	r21,40(sp)
 1018c60:	dd000915 	stw	r20,36(sp)
 1018c64:	dcc00815 	stw	r19,32(sp)
 1018c68:	dc800715 	stw	r18,28(sp)
 1018c6c:	dc400615 	stw	r17,24(sp)
 1018c70:	dc000515 	stw	r16,20(sp)
 1018c74:	d8000115 	stw	zero,4(sp)
 1018c78:	20000f1e 	bne	r4,zero,1018cb8 <__floatunsidf+0x6c>
 1018c7c:	00800084 	movi	r2,2
 1018c80:	d8800015 	stw	r2,0(sp)
 1018c84:	d809883a 	mov	r4,sp
 1018c88:	100d1f00 	call	100d1f0 <__pack_d>
 1018c8c:	dfc00d17 	ldw	ra,52(sp)
 1018c90:	ddc00c17 	ldw	r23,48(sp)
 1018c94:	dd800b17 	ldw	r22,44(sp)
 1018c98:	dd400a17 	ldw	r21,40(sp)
 1018c9c:	dd000917 	ldw	r20,36(sp)
 1018ca0:	dcc00817 	ldw	r19,32(sp)
 1018ca4:	dc800717 	ldw	r18,28(sp)
 1018ca8:	dc400617 	ldw	r17,24(sp)
 1018cac:	dc000517 	ldw	r16,20(sp)
 1018cb0:	dec00e04 	addi	sp,sp,56
 1018cb4:	f800283a 	ret
 1018cb8:	008000c4 	movi	r2,3
 1018cbc:	00c00f04 	movi	r3,60
 1018cc0:	002f883a 	mov	r23,zero
 1018cc4:	202d883a 	mov	r22,r4
 1018cc8:	d8800015 	stw	r2,0(sp)
 1018ccc:	d8c00215 	stw	r3,8(sp)
 1018cd0:	d9000315 	stw	r4,12(sp)
 1018cd4:	ddc00415 	stw	r23,16(sp)
 1018cd8:	100ce740 	call	100ce74 <__clzsi2>
 1018cdc:	12400744 	addi	r9,r2,29
 1018ce0:	48000b16 	blt	r9,zero,1018d10 <__floatunsidf+0xc4>
 1018ce4:	483fe726 	beq	r9,zero,1018c84 <__floatunsidf+0x38>
 1018ce8:	10bfff44 	addi	r2,r2,-3
 1018cec:	10002e16 	blt	r2,zero,1018da8 <__floatunsidf+0x15c>
 1018cf0:	b0a2983a 	sll	r17,r22,r2
 1018cf4:	0021883a 	mov	r16,zero
 1018cf8:	d8800217 	ldw	r2,8(sp)
 1018cfc:	dc400415 	stw	r17,16(sp)
 1018d00:	dc000315 	stw	r16,12(sp)
 1018d04:	1245c83a 	sub	r2,r2,r9
 1018d08:	d8800215 	stw	r2,8(sp)
 1018d0c:	003fdd06 	br	1018c84 <__floatunsidf+0x38>
 1018d10:	0255c83a 	sub	r10,zero,r9
 1018d14:	51bff804 	addi	r6,r10,-32
 1018d18:	30001b16 	blt	r6,zero,1018d88 <__floatunsidf+0x13c>
 1018d1c:	b9a8d83a 	srl	r20,r23,r6
 1018d20:	002b883a 	mov	r21,zero
 1018d24:	000f883a 	mov	r7,zero
 1018d28:	01000044 	movi	r4,1
 1018d2c:	0011883a 	mov	r8,zero
 1018d30:	30002516 	blt	r6,zero,1018dc8 <__floatunsidf+0x17c>
 1018d34:	21a6983a 	sll	r19,r4,r6
 1018d38:	0025883a 	mov	r18,zero
 1018d3c:	00bfffc4 	movi	r2,-1
 1018d40:	9089883a 	add	r4,r18,r2
 1018d44:	988b883a 	add	r5,r19,r2
 1018d48:	248d803a 	cmpltu	r6,r4,r18
 1018d4c:	314b883a 	add	r5,r6,r5
 1018d50:	b104703a 	and	r2,r22,r4
 1018d54:	b946703a 	and	r3,r23,r5
 1018d58:	10c4b03a 	or	r2,r2,r3
 1018d5c:	10000226 	beq	r2,zero,1018d68 <__floatunsidf+0x11c>
 1018d60:	01c00044 	movi	r7,1
 1018d64:	0011883a 	mov	r8,zero
 1018d68:	d9000217 	ldw	r4,8(sp)
 1018d6c:	a1c4b03a 	or	r2,r20,r7
 1018d70:	aa06b03a 	or	r3,r21,r8
 1018d74:	2249c83a 	sub	r4,r4,r9
 1018d78:	d8c00415 	stw	r3,16(sp)
 1018d7c:	d9000215 	stw	r4,8(sp)
 1018d80:	d8800315 	stw	r2,12(sp)
 1018d84:	003fbf06 	br	1018c84 <__floatunsidf+0x38>
 1018d88:	bdc7883a 	add	r3,r23,r23
 1018d8c:	008007c4 	movi	r2,31
 1018d90:	1285c83a 	sub	r2,r2,r10
 1018d94:	1886983a 	sll	r3,r3,r2
 1018d98:	b2a8d83a 	srl	r20,r22,r10
 1018d9c:	baaad83a 	srl	r21,r23,r10
 1018da0:	1d28b03a 	or	r20,r3,r20
 1018da4:	003fdf06 	br	1018d24 <__floatunsidf+0xd8>
 1018da8:	b006d07a 	srli	r3,r22,1
 1018dac:	008007c4 	movi	r2,31
 1018db0:	1245c83a 	sub	r2,r2,r9
 1018db4:	1886d83a 	srl	r3,r3,r2
 1018db8:	ba62983a 	sll	r17,r23,r9
 1018dbc:	b260983a 	sll	r16,r22,r9
 1018dc0:	1c62b03a 	or	r17,r3,r17
 1018dc4:	003fcc06 	br	1018cf8 <__floatunsidf+0xac>
 1018dc8:	2006d07a 	srli	r3,r4,1
 1018dcc:	008007c4 	movi	r2,31
 1018dd0:	1285c83a 	sub	r2,r2,r10
 1018dd4:	18a6d83a 	srl	r19,r3,r2
 1018dd8:	22a4983a 	sll	r18,r4,r10
 1018ddc:	003fd706 	br	1018d3c <__floatunsidf+0xf0>

01018de0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 1018de0:	defff804 	addi	sp,sp,-32
 1018de4:	dfc00715 	stw	ra,28(sp)
 1018de8:	df000615 	stw	fp,24(sp)
 1018dec:	df000604 	addi	fp,sp,24
 1018df0:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 1018df4:	e0bffc17 	ldw	r2,-16(fp)
 1018df8:	1004803a 	cmplt	r2,r2,zero
 1018dfc:	1000081e 	bne	r2,zero,1018e20 <close+0x40>
 1018e00:	e0bffc17 	ldw	r2,-16(fp)
 1018e04:	10800324 	muli	r2,r2,12
 1018e08:	1007883a 	mov	r3,r2
 1018e0c:	008040f4 	movhi	r2,259
 1018e10:	10a1d504 	addi	r2,r2,-30892
 1018e14:	1887883a 	add	r3,r3,r2
 1018e18:	e0ffff15 	stw	r3,-4(fp)
 1018e1c:	00000106 	br	1018e24 <close+0x44>
 1018e20:	e03fff15 	stw	zero,-4(fp)
 1018e24:	e0bfff17 	ldw	r2,-4(fp)
 1018e28:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 1018e2c:	e0bffb17 	ldw	r2,-20(fp)
 1018e30:	1005003a 	cmpeq	r2,r2,zero
 1018e34:	10001d1e 	bne	r2,zero,1018eac <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 1018e38:	e0bffb17 	ldw	r2,-20(fp)
 1018e3c:	10800017 	ldw	r2,0(r2)
 1018e40:	10800417 	ldw	r2,16(r2)
 1018e44:	1005003a 	cmpeq	r2,r2,zero
 1018e48:	1000071e 	bne	r2,zero,1018e68 <close+0x88>
 1018e4c:	e0bffb17 	ldw	r2,-20(fp)
 1018e50:	10800017 	ldw	r2,0(r2)
 1018e54:	10800417 	ldw	r2,16(r2)
 1018e58:	e13ffb17 	ldw	r4,-20(fp)
 1018e5c:	103ee83a 	callr	r2
 1018e60:	e0bffe15 	stw	r2,-8(fp)
 1018e64:	00000106 	br	1018e6c <close+0x8c>
 1018e68:	e03ffe15 	stw	zero,-8(fp)
 1018e6c:	e0bffe17 	ldw	r2,-8(fp)
 1018e70:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 1018e74:	e13ffc17 	ldw	r4,-16(fp)
 1018e78:	10198bc0 	call	10198bc <alt_release_fd>
    if (rval < 0)
 1018e7c:	e0bffa17 	ldw	r2,-24(fp)
 1018e80:	1004403a 	cmpge	r2,r2,zero
 1018e84:	1000071e 	bne	r2,zero,1018ea4 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 1018e88:	1018edc0 	call	1018edc <alt_get_errno>
 1018e8c:	e0fffa17 	ldw	r3,-24(fp)
 1018e90:	00c7c83a 	sub	r3,zero,r3
 1018e94:	10c00015 	stw	r3,0(r2)
      return -1;
 1018e98:	00bfffc4 	movi	r2,-1
 1018e9c:	e0bffd15 	stw	r2,-12(fp)
 1018ea0:	00000806 	br	1018ec4 <close+0xe4>
    }
    return 0;
 1018ea4:	e03ffd15 	stw	zero,-12(fp)
 1018ea8:	00000606 	br	1018ec4 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1018eac:	1018edc0 	call	1018edc <alt_get_errno>
 1018eb0:	1007883a 	mov	r3,r2
 1018eb4:	00801444 	movi	r2,81
 1018eb8:	18800015 	stw	r2,0(r3)
    return -1;
 1018ebc:	00bfffc4 	movi	r2,-1
 1018ec0:	e0bffd15 	stw	r2,-12(fp)
 1018ec4:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 1018ec8:	e037883a 	mov	sp,fp
 1018ecc:	dfc00117 	ldw	ra,4(sp)
 1018ed0:	df000017 	ldw	fp,0(sp)
 1018ed4:	dec00204 	addi	sp,sp,8
 1018ed8:	f800283a 	ret

01018edc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1018edc:	defffd04 	addi	sp,sp,-12
 1018ee0:	dfc00215 	stw	ra,8(sp)
 1018ee4:	df000115 	stw	fp,4(sp)
 1018ee8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1018eec:	008040f4 	movhi	r2,259
 1018ef0:	10a68004 	addi	r2,r2,-26112
 1018ef4:	10800017 	ldw	r2,0(r2)
 1018ef8:	1005003a 	cmpeq	r2,r2,zero
 1018efc:	1000061e 	bne	r2,zero,1018f18 <alt_get_errno+0x3c>
 1018f00:	008040f4 	movhi	r2,259
 1018f04:	10a68004 	addi	r2,r2,-26112
 1018f08:	10800017 	ldw	r2,0(r2)
 1018f0c:	103ee83a 	callr	r2
 1018f10:	e0bfff15 	stw	r2,-4(fp)
 1018f14:	00000306 	br	1018f24 <alt_get_errno+0x48>
 1018f18:	008040f4 	movhi	r2,259
 1018f1c:	10ad7c04 	addi	r2,r2,-18960
 1018f20:	e0bfff15 	stw	r2,-4(fp)
 1018f24:	e0bfff17 	ldw	r2,-4(fp)
}
 1018f28:	e037883a 	mov	sp,fp
 1018f2c:	dfc00117 	ldw	ra,4(sp)
 1018f30:	df000017 	ldw	fp,0(sp)
 1018f34:	dec00204 	addi	sp,sp,8
 1018f38:	f800283a 	ret

01018f3c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 1018f3c:	defffc04 	addi	sp,sp,-16
 1018f40:	df000315 	stw	fp,12(sp)
 1018f44:	df000304 	addi	fp,sp,12
 1018f48:	e13ffd15 	stw	r4,-12(fp)
 1018f4c:	e17ffe15 	stw	r5,-8(fp)
 1018f50:	e1bfff15 	stw	r6,-4(fp)
  return len;
 1018f54:	e0bfff17 	ldw	r2,-4(fp)
}
 1018f58:	e037883a 	mov	sp,fp
 1018f5c:	df000017 	ldw	fp,0(sp)
 1018f60:	dec00104 	addi	sp,sp,4
 1018f64:	f800283a 	ret

01018f68 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 1018f68:	defff904 	addi	sp,sp,-28
 1018f6c:	dfc00615 	stw	ra,24(sp)
 1018f70:	df000515 	stw	fp,20(sp)
 1018f74:	df000504 	addi	fp,sp,20
 1018f78:	e13ffc15 	stw	r4,-16(fp)
 1018f7c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1018f80:	e0bffc17 	ldw	r2,-16(fp)
 1018f84:	1004803a 	cmplt	r2,r2,zero
 1018f88:	1000081e 	bne	r2,zero,1018fac <fstat+0x44>
 1018f8c:	e0bffc17 	ldw	r2,-16(fp)
 1018f90:	10800324 	muli	r2,r2,12
 1018f94:	1007883a 	mov	r3,r2
 1018f98:	008040f4 	movhi	r2,259
 1018f9c:	10a1d504 	addi	r2,r2,-30892
 1018fa0:	1887883a 	add	r3,r3,r2
 1018fa4:	e0ffff15 	stw	r3,-4(fp)
 1018fa8:	00000106 	br	1018fb0 <fstat+0x48>
 1018fac:	e03fff15 	stw	zero,-4(fp)
 1018fb0:	e0bfff17 	ldw	r2,-4(fp)
 1018fb4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1018fb8:	e0bffb17 	ldw	r2,-20(fp)
 1018fbc:	1005003a 	cmpeq	r2,r2,zero
 1018fc0:	1000121e 	bne	r2,zero,101900c <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 1018fc4:	e0bffb17 	ldw	r2,-20(fp)
 1018fc8:	10800017 	ldw	r2,0(r2)
 1018fcc:	10800817 	ldw	r2,32(r2)
 1018fd0:	1005003a 	cmpeq	r2,r2,zero
 1018fd4:	1000081e 	bne	r2,zero,1018ff8 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 1018fd8:	e0bffb17 	ldw	r2,-20(fp)
 1018fdc:	10800017 	ldw	r2,0(r2)
 1018fe0:	10800817 	ldw	r2,32(r2)
 1018fe4:	e13ffb17 	ldw	r4,-20(fp)
 1018fe8:	e17ffd17 	ldw	r5,-12(fp)
 1018fec:	103ee83a 	callr	r2
 1018ff0:	e0bffe15 	stw	r2,-8(fp)
 1018ff4:	00000b06 	br	1019024 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 1018ff8:	e0fffd17 	ldw	r3,-12(fp)
 1018ffc:	00880004 	movi	r2,8192
 1019000:	18800115 	stw	r2,4(r3)
      return 0;
 1019004:	e03ffe15 	stw	zero,-8(fp)
 1019008:	00000606 	br	1019024 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 101900c:	101903c0 	call	101903c <alt_get_errno>
 1019010:	1007883a 	mov	r3,r2
 1019014:	00801444 	movi	r2,81
 1019018:	18800015 	stw	r2,0(r3)
    return -1;
 101901c:	00bfffc4 	movi	r2,-1
 1019020:	e0bffe15 	stw	r2,-8(fp)
 1019024:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 1019028:	e037883a 	mov	sp,fp
 101902c:	dfc00117 	ldw	ra,4(sp)
 1019030:	df000017 	ldw	fp,0(sp)
 1019034:	dec00204 	addi	sp,sp,8
 1019038:	f800283a 	ret

0101903c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 101903c:	defffd04 	addi	sp,sp,-12
 1019040:	dfc00215 	stw	ra,8(sp)
 1019044:	df000115 	stw	fp,4(sp)
 1019048:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 101904c:	008040f4 	movhi	r2,259
 1019050:	10a68004 	addi	r2,r2,-26112
 1019054:	10800017 	ldw	r2,0(r2)
 1019058:	1005003a 	cmpeq	r2,r2,zero
 101905c:	1000061e 	bne	r2,zero,1019078 <alt_get_errno+0x3c>
 1019060:	008040f4 	movhi	r2,259
 1019064:	10a68004 	addi	r2,r2,-26112
 1019068:	10800017 	ldw	r2,0(r2)
 101906c:	103ee83a 	callr	r2
 1019070:	e0bfff15 	stw	r2,-4(fp)
 1019074:	00000306 	br	1019084 <alt_get_errno+0x48>
 1019078:	008040f4 	movhi	r2,259
 101907c:	10ad7c04 	addi	r2,r2,-18960
 1019080:	e0bfff15 	stw	r2,-4(fp)
 1019084:	e0bfff17 	ldw	r2,-4(fp)
}
 1019088:	e037883a 	mov	sp,fp
 101908c:	dfc00117 	ldw	ra,4(sp)
 1019090:	df000017 	ldw	fp,0(sp)
 1019094:	dec00204 	addi	sp,sp,8
 1019098:	f800283a 	ret

0101909c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 101909c:	deffeb04 	addi	sp,sp,-84
 10190a0:	dfc01415 	stw	ra,80(sp)
 10190a4:	df001315 	stw	fp,76(sp)
 10190a8:	df001304 	addi	fp,sp,76
 10190ac:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10190b0:	e0bffd17 	ldw	r2,-12(fp)
 10190b4:	1004803a 	cmplt	r2,r2,zero
 10190b8:	1000081e 	bne	r2,zero,10190dc <isatty+0x40>
 10190bc:	e0bffd17 	ldw	r2,-12(fp)
 10190c0:	10800324 	muli	r2,r2,12
 10190c4:	1007883a 	mov	r3,r2
 10190c8:	008040f4 	movhi	r2,259
 10190cc:	10a1d504 	addi	r2,r2,-30892
 10190d0:	1887883a 	add	r3,r3,r2
 10190d4:	e0ffff15 	stw	r3,-4(fp)
 10190d8:	00000106 	br	10190e0 <isatty+0x44>
 10190dc:	e03fff15 	stw	zero,-4(fp)
 10190e0:	e0bfff17 	ldw	r2,-4(fp)
 10190e4:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 10190e8:	e0bfed17 	ldw	r2,-76(fp)
 10190ec:	1005003a 	cmpeq	r2,r2,zero
 10190f0:	10000f1e 	bne	r2,zero,1019130 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 10190f4:	e0bfed17 	ldw	r2,-76(fp)
 10190f8:	10800017 	ldw	r2,0(r2)
 10190fc:	10800817 	ldw	r2,32(r2)
 1019100:	1004c03a 	cmpne	r2,r2,zero
 1019104:	1000031e 	bne	r2,zero,1019114 <isatty+0x78>
    {
      return 1;
 1019108:	00800044 	movi	r2,1
 101910c:	e0bffe15 	stw	r2,-8(fp)
 1019110:	00000c06 	br	1019144 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 1019114:	e17fee04 	addi	r5,fp,-72
 1019118:	e13ffd17 	ldw	r4,-12(fp)
 101911c:	1018f680 	call	1018f68 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 1019120:	e0bfef17 	ldw	r2,-68(fp)
 1019124:	10880020 	cmpeqi	r2,r2,8192
 1019128:	e0bffe15 	stw	r2,-8(fp)
 101912c:	00000506 	br	1019144 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1019130:	101915c0 	call	101915c <alt_get_errno>
 1019134:	1007883a 	mov	r3,r2
 1019138:	00801444 	movi	r2,81
 101913c:	18800015 	stw	r2,0(r3)
    return 0;
 1019140:	e03ffe15 	stw	zero,-8(fp)
 1019144:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 1019148:	e037883a 	mov	sp,fp
 101914c:	dfc00117 	ldw	ra,4(sp)
 1019150:	df000017 	ldw	fp,0(sp)
 1019154:	dec00204 	addi	sp,sp,8
 1019158:	f800283a 	ret

0101915c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 101915c:	defffd04 	addi	sp,sp,-12
 1019160:	dfc00215 	stw	ra,8(sp)
 1019164:	df000115 	stw	fp,4(sp)
 1019168:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 101916c:	008040f4 	movhi	r2,259
 1019170:	10a68004 	addi	r2,r2,-26112
 1019174:	10800017 	ldw	r2,0(r2)
 1019178:	1005003a 	cmpeq	r2,r2,zero
 101917c:	1000061e 	bne	r2,zero,1019198 <alt_get_errno+0x3c>
 1019180:	008040f4 	movhi	r2,259
 1019184:	10a68004 	addi	r2,r2,-26112
 1019188:	10800017 	ldw	r2,0(r2)
 101918c:	103ee83a 	callr	r2
 1019190:	e0bfff15 	stw	r2,-4(fp)
 1019194:	00000306 	br	10191a4 <alt_get_errno+0x48>
 1019198:	008040f4 	movhi	r2,259
 101919c:	10ad7c04 	addi	r2,r2,-18960
 10191a0:	e0bfff15 	stw	r2,-4(fp)
 10191a4:	e0bfff17 	ldw	r2,-4(fp)
}
 10191a8:	e037883a 	mov	sp,fp
 10191ac:	dfc00117 	ldw	ra,4(sp)
 10191b0:	df000017 	ldw	fp,0(sp)
 10191b4:	dec00204 	addi	sp,sp,8
 10191b8:	f800283a 	ret

010191bc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 10191bc:	defffe04 	addi	sp,sp,-8
 10191c0:	dfc00115 	stw	ra,4(sp)
 10191c4:	df000015 	stw	fp,0(sp)
 10191c8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 10191cc:	010040f4 	movhi	r4,259
 10191d0:	21268504 	addi	r4,r4,-26092
 10191d4:	014040b4 	movhi	r5,258
 10191d8:	295fac04 	addi	r5,r5,32432
 10191dc:	018040f4 	movhi	r6,259
 10191e0:	31a68504 	addi	r6,r6,-26092
 10191e4:	101923c0 	call	101923c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 10191e8:	01004034 	movhi	r4,256
 10191ec:	21000804 	addi	r4,r4,32
 10191f0:	01404034 	movhi	r5,256
 10191f4:	29400804 	addi	r5,r5,32
 10191f8:	01804034 	movhi	r6,256
 10191fc:	31806e04 	addi	r6,r6,440
 1019200:	101923c0 	call	101923c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 1019204:	010040b4 	movhi	r4,258
 1019208:	21080b04 	addi	r4,r4,8236
 101920c:	014040b4 	movhi	r5,258
 1019210:	29480b04 	addi	r5,r5,8236
 1019214:	018040b4 	movhi	r6,258
 1019218:	319fac04 	addi	r6,r6,32432
 101921c:	101923c0 	call	101923c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 1019220:	101f8080 	call	101f808 <alt_dcache_flush_all>
  alt_icache_flush_all();
 1019224:	101fabc0 	call	101fabc <alt_icache_flush_all>
}
 1019228:	e037883a 	mov	sp,fp
 101922c:	dfc00117 	ldw	ra,4(sp)
 1019230:	df000017 	ldw	fp,0(sp)
 1019234:	dec00204 	addi	sp,sp,8
 1019238:	f800283a 	ret

0101923c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 101923c:	defffc04 	addi	sp,sp,-16
 1019240:	df000315 	stw	fp,12(sp)
 1019244:	df000304 	addi	fp,sp,12
 1019248:	e13ffd15 	stw	r4,-12(fp)
 101924c:	e17ffe15 	stw	r5,-8(fp)
 1019250:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 1019254:	e0fffe17 	ldw	r3,-8(fp)
 1019258:	e0bffd17 	ldw	r2,-12(fp)
 101925c:	18800e26 	beq	r3,r2,1019298 <alt_load_section+0x5c>
  {
    while( to != end )
 1019260:	00000a06 	br	101928c <alt_load_section+0x50>
    {
      *to++ = *from++;
 1019264:	e0bffd17 	ldw	r2,-12(fp)
 1019268:	10c00017 	ldw	r3,0(r2)
 101926c:	e0bffe17 	ldw	r2,-8(fp)
 1019270:	10c00015 	stw	r3,0(r2)
 1019274:	e0bffe17 	ldw	r2,-8(fp)
 1019278:	10800104 	addi	r2,r2,4
 101927c:	e0bffe15 	stw	r2,-8(fp)
 1019280:	e0bffd17 	ldw	r2,-12(fp)
 1019284:	10800104 	addi	r2,r2,4
 1019288:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 101928c:	e0fffe17 	ldw	r3,-8(fp)
 1019290:	e0bfff17 	ldw	r2,-4(fp)
 1019294:	18bff31e 	bne	r3,r2,1019264 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 1019298:	e037883a 	mov	sp,fp
 101929c:	df000017 	ldw	fp,0(sp)
 10192a0:	dec00104 	addi	sp,sp,4
 10192a4:	f800283a 	ret

010192a8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 10192a8:	defff804 	addi	sp,sp,-32
 10192ac:	dfc00715 	stw	ra,28(sp)
 10192b0:	df000615 	stw	fp,24(sp)
 10192b4:	df000604 	addi	fp,sp,24
 10192b8:	e13ffc15 	stw	r4,-16(fp)
 10192bc:	e17ffd15 	stw	r5,-12(fp)
 10192c0:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 10192c4:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10192c8:	e0bffc17 	ldw	r2,-16(fp)
 10192cc:	1004803a 	cmplt	r2,r2,zero
 10192d0:	1000081e 	bne	r2,zero,10192f4 <lseek+0x4c>
 10192d4:	e0bffc17 	ldw	r2,-16(fp)
 10192d8:	10800324 	muli	r2,r2,12
 10192dc:	1007883a 	mov	r3,r2
 10192e0:	008040f4 	movhi	r2,259
 10192e4:	10a1d504 	addi	r2,r2,-30892
 10192e8:	1887883a 	add	r3,r3,r2
 10192ec:	e0ffff15 	stw	r3,-4(fp)
 10192f0:	00000106 	br	10192f8 <lseek+0x50>
 10192f4:	e03fff15 	stw	zero,-4(fp)
 10192f8:	e0bfff17 	ldw	r2,-4(fp)
 10192fc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 1019300:	e0bffb17 	ldw	r2,-20(fp)
 1019304:	1005003a 	cmpeq	r2,r2,zero
 1019308:	1000111e 	bne	r2,zero,1019350 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 101930c:	e0bffb17 	ldw	r2,-20(fp)
 1019310:	10800017 	ldw	r2,0(r2)
 1019314:	10800717 	ldw	r2,28(r2)
 1019318:	1005003a 	cmpeq	r2,r2,zero
 101931c:	1000091e 	bne	r2,zero,1019344 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 1019320:	e0bffb17 	ldw	r2,-20(fp)
 1019324:	10800017 	ldw	r2,0(r2)
 1019328:	10800717 	ldw	r2,28(r2)
 101932c:	e13ffb17 	ldw	r4,-20(fp)
 1019330:	e17ffd17 	ldw	r5,-12(fp)
 1019334:	e1bffe17 	ldw	r6,-8(fp)
 1019338:	103ee83a 	callr	r2
 101933c:	e0bffa15 	stw	r2,-24(fp)
 1019340:	00000506 	br	1019358 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 1019344:	00bfde84 	movi	r2,-134
 1019348:	e0bffa15 	stw	r2,-24(fp)
 101934c:	00000206 	br	1019358 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 1019350:	00bfebc4 	movi	r2,-81
 1019354:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 1019358:	e0bffa17 	ldw	r2,-24(fp)
 101935c:	1004403a 	cmpge	r2,r2,zero
 1019360:	1000071e 	bne	r2,zero,1019380 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 1019364:	10193980 	call	1019398 <alt_get_errno>
 1019368:	1007883a 	mov	r3,r2
 101936c:	e0bffa17 	ldw	r2,-24(fp)
 1019370:	0085c83a 	sub	r2,zero,r2
 1019374:	18800015 	stw	r2,0(r3)
    rc = -1;
 1019378:	00bfffc4 	movi	r2,-1
 101937c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 1019380:	e0bffa17 	ldw	r2,-24(fp)
}
 1019384:	e037883a 	mov	sp,fp
 1019388:	dfc00117 	ldw	ra,4(sp)
 101938c:	df000017 	ldw	fp,0(sp)
 1019390:	dec00204 	addi	sp,sp,8
 1019394:	f800283a 	ret

01019398 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1019398:	defffd04 	addi	sp,sp,-12
 101939c:	dfc00215 	stw	ra,8(sp)
 10193a0:	df000115 	stw	fp,4(sp)
 10193a4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10193a8:	008040f4 	movhi	r2,259
 10193ac:	10a68004 	addi	r2,r2,-26112
 10193b0:	10800017 	ldw	r2,0(r2)
 10193b4:	1005003a 	cmpeq	r2,r2,zero
 10193b8:	1000061e 	bne	r2,zero,10193d4 <alt_get_errno+0x3c>
 10193bc:	008040f4 	movhi	r2,259
 10193c0:	10a68004 	addi	r2,r2,-26112
 10193c4:	10800017 	ldw	r2,0(r2)
 10193c8:	103ee83a 	callr	r2
 10193cc:	e0bfff15 	stw	r2,-4(fp)
 10193d0:	00000306 	br	10193e0 <alt_get_errno+0x48>
 10193d4:	008040f4 	movhi	r2,259
 10193d8:	10ad7c04 	addi	r2,r2,-18960
 10193dc:	e0bfff15 	stw	r2,-4(fp)
 10193e0:	e0bfff17 	ldw	r2,-4(fp)
}
 10193e4:	e037883a 	mov	sp,fp
 10193e8:	dfc00117 	ldw	ra,4(sp)
 10193ec:	df000017 	ldw	fp,0(sp)
 10193f0:	dec00204 	addi	sp,sp,8
 10193f4:	f800283a 	ret

010193f8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 10193f8:	defffd04 	addi	sp,sp,-12
 10193fc:	dfc00215 	stw	ra,8(sp)
 1019400:	df000115 	stw	fp,4(sp)
 1019404:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1019408:	0009883a 	mov	r4,zero
 101940c:	1019b580 	call	1019b58 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 1019410:	1019b8c0 	call	1019b8c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 1019414:	010040b4 	movhi	r4,258
 1019418:	211f5d04 	addi	r4,r4,32116
 101941c:	014040b4 	movhi	r5,258
 1019420:	295f5d04 	addi	r5,r5,32116
 1019424:	018040b4 	movhi	r6,258
 1019428:	319f5d04 	addi	r6,r6,32116
 101942c:	101fbb00 	call	101fbb0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 1019430:	101f9600 	call	101f960 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 1019434:	010040b4 	movhi	r4,258
 1019438:	213e7104 	addi	r4,r4,-1596
 101943c:	10205500 	call	1020550 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 1019440:	d1270f17 	ldw	r4,-25540(gp)
 1019444:	d1671017 	ldw	r5,-25536(gp)
 1019448:	d1a71117 	ldw	r6,-25532(gp)
 101944c:	1000b9c0 	call	1000b9c <main>
 1019450:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 1019454:	01000044 	movi	r4,1
 1019458:	1018de00 	call	1018de0 <close>
  exit (result);
 101945c:	e13fff17 	ldw	r4,-4(fp)
 1019460:	10205640 	call	1020564 <exit>

01019464 <__malloc_lock>:
 1019464:	defffe04 	addi	sp,sp,-8
 1019468:	df000115 	stw	fp,4(sp)
 101946c:	df000104 	addi	fp,sp,4
 1019470:	e13fff15 	stw	r4,-4(fp)
 1019474:	e037883a 	mov	sp,fp
 1019478:	df000017 	ldw	fp,0(sp)
 101947c:	dec00104 	addi	sp,sp,4
 1019480:	f800283a 	ret

01019484 <__malloc_unlock>:
 1019484:	defffe04 	addi	sp,sp,-8
 1019488:	df000115 	stw	fp,4(sp)
 101948c:	df000104 	addi	fp,sp,4
 1019490:	e13fff15 	stw	r4,-4(fp)
 1019494:	e037883a 	mov	sp,fp
 1019498:	df000017 	ldw	fp,0(sp)
 101949c:	dec00104 	addi	sp,sp,4
 10194a0:	f800283a 	ret

010194a4 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 10194a4:	defff204 	addi	sp,sp,-56
 10194a8:	dfc00a15 	stw	ra,40(sp)
 10194ac:	df000915 	stw	fp,36(sp)
 10194b0:	df000904 	addi	fp,sp,36
 10194b4:	e1400215 	stw	r5,8(fp)
 10194b8:	e1800315 	stw	r6,12(fp)
 10194bc:	e1c00415 	stw	r7,16(fp)
 10194c0:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
 10194c4:	e0800204 	addi	r2,fp,8
 10194c8:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 10194cc:	e0bfff17 	ldw	r2,-4(fp)
 10194d0:	e0bffd15 	stw	r2,-12(fp)
    while ((c = *w++) != 0)
 10194d4:	00007806 	br	10196b8 <alt_printf+0x214>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 10194d8:	e0bffc07 	ldb	r2,-16(fp)
 10194dc:	10800960 	cmpeqi	r2,r2,37
 10194e0:	1000031e 	bne	r2,zero,10194f0 <alt_printf+0x4c>
        {
            alt_putchar(c);
 10194e4:	e13ffc07 	ldb	r4,-16(fp)
 10194e8:	10196fc0 	call	10196fc <alt_putchar>
 10194ec:	00007206 	br	10196b8 <alt_printf+0x214>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 10194f0:	e0bffd17 	ldw	r2,-12(fp)
 10194f4:	10800003 	ldbu	r2,0(r2)
 10194f8:	e0bffc05 	stb	r2,-16(fp)
 10194fc:	e0bffc07 	ldb	r2,-16(fp)
 1019500:	1004c03a 	cmpne	r2,r2,zero
 1019504:	1007883a 	mov	r3,r2
 1019508:	e0bffd17 	ldw	r2,-12(fp)
 101950c:	10800044 	addi	r2,r2,1
 1019510:	e0bffd15 	stw	r2,-12(fp)
 1019514:	18803fcc 	andi	r2,r3,255
 1019518:	1005003a 	cmpeq	r2,r2,zero
 101951c:	1000721e 	bne	r2,zero,10196e8 <alt_printf+0x244>
            {
                if (c == '%')
 1019520:	e0bffc07 	ldb	r2,-16(fp)
 1019524:	10800958 	cmpnei	r2,r2,37
 1019528:	1000031e 	bne	r2,zero,1019538 <alt_printf+0x94>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 101952c:	e13ffc07 	ldb	r4,-16(fp)
 1019530:	10196fc0 	call	10196fc <alt_putchar>
 1019534:	00006006 	br	10196b8 <alt_printf+0x214>
                } 
                else if (c == 'c')
 1019538:	e0bffc07 	ldb	r2,-16(fp)
 101953c:	108018d8 	cmpnei	r2,r2,99
 1019540:	1000091e 	bne	r2,zero,1019568 <alt_printf+0xc4>
                {
                    int v = va_arg(args, int);
 1019544:	e0fffe17 	ldw	r3,-8(fp)
 1019548:	18800104 	addi	r2,r3,4
 101954c:	e0bffe15 	stw	r2,-8(fp)
 1019550:	1805883a 	mov	r2,r3
 1019554:	10800017 	ldw	r2,0(r2)
 1019558:	e0bffb15 	stw	r2,-20(fp)
                    alt_putchar(v);
 101955c:	e13ffb17 	ldw	r4,-20(fp)
 1019560:	10196fc0 	call	10196fc <alt_putchar>
 1019564:	00005406 	br	10196b8 <alt_printf+0x214>
                }
                else if (c == 'x')
 1019568:	e0bffc07 	ldb	r2,-16(fp)
 101956c:	10801e18 	cmpnei	r2,r2,120
 1019570:	1000371e 	bne	r2,zero,1019650 <alt_printf+0x1ac>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 1019574:	e0fffe17 	ldw	r3,-8(fp)
 1019578:	18800104 	addi	r2,r3,4
 101957c:	e0bffe15 	stw	r2,-8(fp)
 1019580:	1805883a 	mov	r2,r3
 1019584:	10800017 	ldw	r2,0(r2)
 1019588:	e0bffa15 	stw	r2,-24(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 101958c:	e0bffa17 	ldw	r2,-24(fp)
 1019590:	1004c03a 	cmpne	r2,r2,zero
 1019594:	1000031e 	bne	r2,zero,10195a4 <alt_printf+0x100>
                    {
                        alt_putchar('0');
 1019598:	01000c04 	movi	r4,48
 101959c:	10196fc0 	call	10196fc <alt_putchar>
                        continue;
 10195a0:	00004506 	br	10196b8 <alt_printf+0x214>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 10195a4:	00800704 	movi	r2,28
 10195a8:	e0bff815 	stw	r2,-32(fp)
                    while (!(v & (0xF << digit_shift)))
 10195ac:	00000306 	br	10195bc <alt_printf+0x118>
                        digit_shift -= 4;
 10195b0:	e0bff817 	ldw	r2,-32(fp)
 10195b4:	10bfff04 	addi	r2,r2,-4
 10195b8:	e0bff815 	stw	r2,-32(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 10195bc:	00c003c4 	movi	r3,15
 10195c0:	e0bff817 	ldw	r2,-32(fp)
 10195c4:	1884983a 	sll	r2,r3,r2
 10195c8:	1007883a 	mov	r3,r2
 10195cc:	e0bffa17 	ldw	r2,-24(fp)
 10195d0:	1884703a 	and	r2,r3,r2
 10195d4:	1005003a 	cmpeq	r2,r2,zero
 10195d8:	103ff51e 	bne	r2,zero,10195b0 <alt_printf+0x10c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 10195dc:	00001806 	br	1019640 <alt_printf+0x19c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 10195e0:	00c003c4 	movi	r3,15
 10195e4:	e0bff817 	ldw	r2,-32(fp)
 10195e8:	1884983a 	sll	r2,r3,r2
 10195ec:	1007883a 	mov	r3,r2
 10195f0:	e0bffa17 	ldw	r2,-24(fp)
 10195f4:	1886703a 	and	r3,r3,r2
 10195f8:	e0bff817 	ldw	r2,-32(fp)
 10195fc:	1884d83a 	srl	r2,r3,r2
 1019600:	e0bff915 	stw	r2,-28(fp)
                        if (digit <= 9)
 1019604:	e0bff917 	ldw	r2,-28(fp)
 1019608:	108002a8 	cmpgeui	r2,r2,10
 101960c:	1000041e 	bne	r2,zero,1019620 <alt_printf+0x17c>
                            c = '0' + digit;
 1019610:	e0bff917 	ldw	r2,-28(fp)
 1019614:	10800c04 	addi	r2,r2,48
 1019618:	e0bffc05 	stb	r2,-16(fp)
 101961c:	00000306 	br	101962c <alt_printf+0x188>
                        else
                            c = 'a' + digit - 10;
 1019620:	e0bff917 	ldw	r2,-28(fp)
 1019624:	108015c4 	addi	r2,r2,87
 1019628:	e0bffc05 	stb	r2,-16(fp)
                        alt_putchar(c);
 101962c:	e13ffc07 	ldb	r4,-16(fp)
 1019630:	10196fc0 	call	10196fc <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 1019634:	e0bff817 	ldw	r2,-32(fp)
 1019638:	10bfff04 	addi	r2,r2,-4
 101963c:	e0bff815 	stw	r2,-32(fp)
 1019640:	e0bff817 	ldw	r2,-32(fp)
 1019644:	1004403a 	cmpge	r2,r2,zero
 1019648:	103fe51e 	bne	r2,zero,10195e0 <alt_printf+0x13c>
 101964c:	00001a06 	br	10196b8 <alt_printf+0x214>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 1019650:	e0bffc07 	ldb	r2,-16(fp)
 1019654:	10801cd8 	cmpnei	r2,r2,115
 1019658:	1000171e 	bne	r2,zero,10196b8 <alt_printf+0x214>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 101965c:	e0fffe17 	ldw	r3,-8(fp)
 1019660:	18800104 	addi	r2,r3,4
 1019664:	e0bffe15 	stw	r2,-8(fp)
 1019668:	1805883a 	mov	r2,r3
 101966c:	10800017 	ldw	r2,0(r2)
 1019670:	e0bff715 	stw	r2,-36(fp)

                    while(*s)
 1019674:	00000906 	br	101969c <alt_printf+0x1f8>
                      alt_putchar(*s++);
 1019678:	e0bff717 	ldw	r2,-36(fp)
 101967c:	10800003 	ldbu	r2,0(r2)
 1019680:	11003fcc 	andi	r4,r2,255
 1019684:	2100201c 	xori	r4,r4,128
 1019688:	213fe004 	addi	r4,r4,-128
 101968c:	e0bff717 	ldw	r2,-36(fp)
 1019690:	10800044 	addi	r2,r2,1
 1019694:	e0bff715 	stw	r2,-36(fp)
 1019698:	10196fc0 	call	10196fc <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 101969c:	e0bff717 	ldw	r2,-36(fp)
 10196a0:	10800003 	ldbu	r2,0(r2)
 10196a4:	10803fcc 	andi	r2,r2,255
 10196a8:	1080201c 	xori	r2,r2,128
 10196ac:	10bfe004 	addi	r2,r2,-128
 10196b0:	1004c03a 	cmpne	r2,r2,zero
 10196b4:	103ff01e 	bne	r2,zero,1019678 <alt_printf+0x1d4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 10196b8:	e0bffd17 	ldw	r2,-12(fp)
 10196bc:	10800003 	ldbu	r2,0(r2)
 10196c0:	e0bffc05 	stb	r2,-16(fp)
 10196c4:	e0bffc07 	ldb	r2,-16(fp)
 10196c8:	1004c03a 	cmpne	r2,r2,zero
 10196cc:	1007883a 	mov	r3,r2
 10196d0:	e0bffd17 	ldw	r2,-12(fp)
 10196d4:	10800044 	addi	r2,r2,1
 10196d8:	e0bffd15 	stw	r2,-12(fp)
 10196dc:	18803fcc 	andi	r2,r3,255
 10196e0:	1004c03a 	cmpne	r2,r2,zero
 10196e4:	103f7c1e 	bne	r2,zero,10194d8 <alt_printf+0x34>
            {
                break;
            }
        }
    }
}
 10196e8:	e037883a 	mov	sp,fp
 10196ec:	dfc00117 	ldw	ra,4(sp)
 10196f0:	df000017 	ldw	fp,0(sp)
 10196f4:	dec00504 	addi	sp,sp,20
 10196f8:	f800283a 	ret

010196fc <alt_putchar>:
 10196fc:	defffd04 	addi	sp,sp,-12
 1019700:	dfc00215 	stw	ra,8(sp)
 1019704:	df000115 	stw	fp,4(sp)
 1019708:	df000104 	addi	fp,sp,4
 101970c:	e13fff15 	stw	r4,-4(fp)
 1019710:	008040f4 	movhi	r2,259
 1019714:	10a67004 	addi	r2,r2,-26176
 1019718:	10800017 	ldw	r2,0(r2)
 101971c:	11400217 	ldw	r5,8(r2)
 1019720:	e13fff17 	ldw	r4,-4(fp)
 1019724:	1016e600 	call	1016e60 <putc>
 1019728:	e037883a 	mov	sp,fp
 101972c:	dfc00117 	ldw	ra,4(sp)
 1019730:	df000017 	ldw	fp,0(sp)
 1019734:	dec00204 	addi	sp,sp,8
 1019738:	f800283a 	ret

0101973c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 101973c:	defff704 	addi	sp,sp,-36
 1019740:	dfc00815 	stw	ra,32(sp)
 1019744:	df000715 	stw	fp,28(sp)
 1019748:	df000704 	addi	fp,sp,28
 101974c:	e13ffb15 	stw	r4,-20(fp)
 1019750:	e17ffc15 	stw	r5,-16(fp)
 1019754:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1019758:	e0bffb17 	ldw	r2,-20(fp)
 101975c:	1004803a 	cmplt	r2,r2,zero
 1019760:	1000081e 	bne	r2,zero,1019784 <read+0x48>
 1019764:	e0bffb17 	ldw	r2,-20(fp)
 1019768:	10800324 	muli	r2,r2,12
 101976c:	1007883a 	mov	r3,r2
 1019770:	008040f4 	movhi	r2,259
 1019774:	10a1d504 	addi	r2,r2,-30892
 1019778:	1887883a 	add	r3,r3,r2
 101977c:	e0ffff15 	stw	r3,-4(fp)
 1019780:	00000106 	br	1019788 <read+0x4c>
 1019784:	e03fff15 	stw	zero,-4(fp)
 1019788:	e0bfff17 	ldw	r2,-4(fp)
 101978c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 1019790:	e0bffa17 	ldw	r2,-24(fp)
 1019794:	1005003a 	cmpeq	r2,r2,zero
 1019798:	1000241e 	bne	r2,zero,101982c <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 101979c:	e0bffa17 	ldw	r2,-24(fp)
 10197a0:	10800217 	ldw	r2,8(r2)
 10197a4:	108000cc 	andi	r2,r2,3
 10197a8:	10800060 	cmpeqi	r2,r2,1
 10197ac:	10001a1e 	bne	r2,zero,1019818 <read+0xdc>
 10197b0:	e0bffa17 	ldw	r2,-24(fp)
 10197b4:	10800017 	ldw	r2,0(r2)
 10197b8:	10800517 	ldw	r2,20(r2)
 10197bc:	1005003a 	cmpeq	r2,r2,zero
 10197c0:	1000151e 	bne	r2,zero,1019818 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 10197c4:	e0bffa17 	ldw	r2,-24(fp)
 10197c8:	10800017 	ldw	r2,0(r2)
 10197cc:	10800517 	ldw	r2,20(r2)
 10197d0:	e17ffc17 	ldw	r5,-16(fp)
 10197d4:	e1bffd17 	ldw	r6,-12(fp)
 10197d8:	e13ffa17 	ldw	r4,-24(fp)
 10197dc:	103ee83a 	callr	r2
 10197e0:	e0bff915 	stw	r2,-28(fp)
 10197e4:	e0bff917 	ldw	r2,-28(fp)
 10197e8:	1004403a 	cmpge	r2,r2,zero
 10197ec:	1000071e 	bne	r2,zero,101980c <read+0xd0>
        {
          ALT_ERRNO = -rval;
 10197f0:	101985c0 	call	101985c <alt_get_errno>
 10197f4:	e0fff917 	ldw	r3,-28(fp)
 10197f8:	00c7c83a 	sub	r3,zero,r3
 10197fc:	10c00015 	stw	r3,0(r2)
          return -1;
 1019800:	00bfffc4 	movi	r2,-1
 1019804:	e0bffe15 	stw	r2,-8(fp)
 1019808:	00000e06 	br	1019844 <read+0x108>
        }
        return rval;
 101980c:	e0bff917 	ldw	r2,-28(fp)
 1019810:	e0bffe15 	stw	r2,-8(fp)
 1019814:	00000b06 	br	1019844 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 1019818:	101985c0 	call	101985c <alt_get_errno>
 101981c:	1007883a 	mov	r3,r2
 1019820:	00800344 	movi	r2,13
 1019824:	18800015 	stw	r2,0(r3)
 1019828:	00000406 	br	101983c <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 101982c:	101985c0 	call	101985c <alt_get_errno>
 1019830:	1007883a 	mov	r3,r2
 1019834:	00801444 	movi	r2,81
 1019838:	18800015 	stw	r2,0(r3)
  }
  return -1;
 101983c:	00bfffc4 	movi	r2,-1
 1019840:	e0bffe15 	stw	r2,-8(fp)
 1019844:	e0bffe17 	ldw	r2,-8(fp)
}
 1019848:	e037883a 	mov	sp,fp
 101984c:	dfc00117 	ldw	ra,4(sp)
 1019850:	df000017 	ldw	fp,0(sp)
 1019854:	dec00204 	addi	sp,sp,8
 1019858:	f800283a 	ret

0101985c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 101985c:	defffd04 	addi	sp,sp,-12
 1019860:	dfc00215 	stw	ra,8(sp)
 1019864:	df000115 	stw	fp,4(sp)
 1019868:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 101986c:	008040f4 	movhi	r2,259
 1019870:	10a68004 	addi	r2,r2,-26112
 1019874:	10800017 	ldw	r2,0(r2)
 1019878:	1005003a 	cmpeq	r2,r2,zero
 101987c:	1000061e 	bne	r2,zero,1019898 <alt_get_errno+0x3c>
 1019880:	008040f4 	movhi	r2,259
 1019884:	10a68004 	addi	r2,r2,-26112
 1019888:	10800017 	ldw	r2,0(r2)
 101988c:	103ee83a 	callr	r2
 1019890:	e0bfff15 	stw	r2,-4(fp)
 1019894:	00000306 	br	10198a4 <alt_get_errno+0x48>
 1019898:	008040f4 	movhi	r2,259
 101989c:	10ad7c04 	addi	r2,r2,-18960
 10198a0:	e0bfff15 	stw	r2,-4(fp)
 10198a4:	e0bfff17 	ldw	r2,-4(fp)
}
 10198a8:	e037883a 	mov	sp,fp
 10198ac:	dfc00117 	ldw	ra,4(sp)
 10198b0:	df000017 	ldw	fp,0(sp)
 10198b4:	dec00204 	addi	sp,sp,8
 10198b8:	f800283a 	ret

010198bc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 10198bc:	defffe04 	addi	sp,sp,-8
 10198c0:	df000115 	stw	fp,4(sp)
 10198c4:	df000104 	addi	fp,sp,4
 10198c8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 10198cc:	e0bfff17 	ldw	r2,-4(fp)
 10198d0:	108000d0 	cmplti	r2,r2,3
 10198d4:	10000d1e 	bne	r2,zero,101990c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 10198d8:	e0bfff17 	ldw	r2,-4(fp)
 10198dc:	00c040f4 	movhi	r3,259
 10198e0:	18e1d504 	addi	r3,r3,-30892
 10198e4:	10800324 	muli	r2,r2,12
 10198e8:	10c5883a 	add	r2,r2,r3
 10198ec:	10800204 	addi	r2,r2,8
 10198f0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 10198f4:	e0bfff17 	ldw	r2,-4(fp)
 10198f8:	00c040f4 	movhi	r3,259
 10198fc:	18e1d504 	addi	r3,r3,-30892
 1019900:	10800324 	muli	r2,r2,12
 1019904:	10c5883a 	add	r2,r2,r3
 1019908:	10000015 	stw	zero,0(r2)
  }
}
 101990c:	e037883a 	mov	sp,fp
 1019910:	df000017 	ldw	fp,0(sp)
 1019914:	dec00104 	addi	sp,sp,4
 1019918:	f800283a 	ret

0101991c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 101991c:	defff804 	addi	sp,sp,-32
 1019920:	df000715 	stw	fp,28(sp)
 1019924:	df000704 	addi	fp,sp,28
 1019928:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101992c:	0005303a 	rdctl	r2,status
 1019930:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1019934:	e0fffb17 	ldw	r3,-20(fp)
 1019938:	00bfff84 	movi	r2,-2
 101993c:	1884703a 	and	r2,r3,r2
 1019940:	1001703a 	wrctl	status,r2
  
  return context;
 1019944:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 1019948:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 101994c:	d0a01317 	ldw	r2,-32692(gp)
 1019950:	10c000c4 	addi	r3,r2,3
 1019954:	00bfff04 	movi	r2,-4
 1019958:	1884703a 	and	r2,r3,r2
 101995c:	d0a01315 	stw	r2,-32692(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 1019960:	d0e01317 	ldw	r3,-32692(gp)
 1019964:	e0bffe17 	ldw	r2,-8(fp)
 1019968:	1887883a 	add	r3,r3,r2
 101996c:	00806034 	movhi	r2,384
 1019970:	10800004 	addi	r2,r2,0
 1019974:	10c0072e 	bgeu	r2,r3,1019994 <sbrk+0x78>
 1019978:	e0bffd17 	ldw	r2,-12(fp)
 101997c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1019980:	e0bffa17 	ldw	r2,-24(fp)
 1019984:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 1019988:	00bfffc4 	movi	r2,-1
 101998c:	e0bfff15 	stw	r2,-4(fp)
 1019990:	00000c06 	br	10199c4 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 1019994:	d0a01317 	ldw	r2,-32692(gp)
 1019998:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 101999c:	d0e01317 	ldw	r3,-32692(gp)
 10199a0:	e0bffe17 	ldw	r2,-8(fp)
 10199a4:	1885883a 	add	r2,r3,r2
 10199a8:	d0a01315 	stw	r2,-32692(gp)
 10199ac:	e0bffd17 	ldw	r2,-12(fp)
 10199b0:	e0bff915 	stw	r2,-28(fp)
 10199b4:	e0bff917 	ldw	r2,-28(fp)
 10199b8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 10199bc:	e0bffc17 	ldw	r2,-16(fp)
 10199c0:	e0bfff15 	stw	r2,-4(fp)
 10199c4:	e0bfff17 	ldw	r2,-4(fp)
} 
 10199c8:	e037883a 	mov	sp,fp
 10199cc:	df000017 	ldw	fp,0(sp)
 10199d0:	dec00104 	addi	sp,sp,4
 10199d4:	f800283a 	ret

010199d8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 10199d8:	defff704 	addi	sp,sp,-36
 10199dc:	dfc00815 	stw	ra,32(sp)
 10199e0:	df000715 	stw	fp,28(sp)
 10199e4:	df000704 	addi	fp,sp,28
 10199e8:	e13ffb15 	stw	r4,-20(fp)
 10199ec:	e17ffc15 	stw	r5,-16(fp)
 10199f0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10199f4:	e0bffb17 	ldw	r2,-20(fp)
 10199f8:	1004803a 	cmplt	r2,r2,zero
 10199fc:	1000081e 	bne	r2,zero,1019a20 <write+0x48>
 1019a00:	e0bffb17 	ldw	r2,-20(fp)
 1019a04:	10800324 	muli	r2,r2,12
 1019a08:	1007883a 	mov	r3,r2
 1019a0c:	008040f4 	movhi	r2,259
 1019a10:	10a1d504 	addi	r2,r2,-30892
 1019a14:	1887883a 	add	r3,r3,r2
 1019a18:	e0ffff15 	stw	r3,-4(fp)
 1019a1c:	00000106 	br	1019a24 <write+0x4c>
 1019a20:	e03fff15 	stw	zero,-4(fp)
 1019a24:	e0bfff17 	ldw	r2,-4(fp)
 1019a28:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 1019a2c:	e0bffa17 	ldw	r2,-24(fp)
 1019a30:	1005003a 	cmpeq	r2,r2,zero
 1019a34:	1000241e 	bne	r2,zero,1019ac8 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 1019a38:	e0bffa17 	ldw	r2,-24(fp)
 1019a3c:	10800217 	ldw	r2,8(r2)
 1019a40:	108000cc 	andi	r2,r2,3
 1019a44:	1005003a 	cmpeq	r2,r2,zero
 1019a48:	10001a1e 	bne	r2,zero,1019ab4 <write+0xdc>
 1019a4c:	e0bffa17 	ldw	r2,-24(fp)
 1019a50:	10800017 	ldw	r2,0(r2)
 1019a54:	10800617 	ldw	r2,24(r2)
 1019a58:	1005003a 	cmpeq	r2,r2,zero
 1019a5c:	1000151e 	bne	r2,zero,1019ab4 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 1019a60:	e0bffa17 	ldw	r2,-24(fp)
 1019a64:	10800017 	ldw	r2,0(r2)
 1019a68:	10800617 	ldw	r2,24(r2)
 1019a6c:	e17ffc17 	ldw	r5,-16(fp)
 1019a70:	e1bffd17 	ldw	r6,-12(fp)
 1019a74:	e13ffa17 	ldw	r4,-24(fp)
 1019a78:	103ee83a 	callr	r2
 1019a7c:	e0bff915 	stw	r2,-28(fp)
 1019a80:	e0bff917 	ldw	r2,-28(fp)
 1019a84:	1004403a 	cmpge	r2,r2,zero
 1019a88:	1000071e 	bne	r2,zero,1019aa8 <write+0xd0>
      {
        ALT_ERRNO = -rval;
 1019a8c:	1019af80 	call	1019af8 <alt_get_errno>
 1019a90:	e0fff917 	ldw	r3,-28(fp)
 1019a94:	00c7c83a 	sub	r3,zero,r3
 1019a98:	10c00015 	stw	r3,0(r2)
        return -1;
 1019a9c:	00bfffc4 	movi	r2,-1
 1019aa0:	e0bffe15 	stw	r2,-8(fp)
 1019aa4:	00000e06 	br	1019ae0 <write+0x108>
      }
      return rval;
 1019aa8:	e0bff917 	ldw	r2,-28(fp)
 1019aac:	e0bffe15 	stw	r2,-8(fp)
 1019ab0:	00000b06 	br	1019ae0 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 1019ab4:	1019af80 	call	1019af8 <alt_get_errno>
 1019ab8:	1007883a 	mov	r3,r2
 1019abc:	00800344 	movi	r2,13
 1019ac0:	18800015 	stw	r2,0(r3)
 1019ac4:	00000406 	br	1019ad8 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 1019ac8:	1019af80 	call	1019af8 <alt_get_errno>
 1019acc:	1007883a 	mov	r3,r2
 1019ad0:	00801444 	movi	r2,81
 1019ad4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1019ad8:	00bfffc4 	movi	r2,-1
 1019adc:	e0bffe15 	stw	r2,-8(fp)
 1019ae0:	e0bffe17 	ldw	r2,-8(fp)
}
 1019ae4:	e037883a 	mov	sp,fp
 1019ae8:	dfc00117 	ldw	ra,4(sp)
 1019aec:	df000017 	ldw	fp,0(sp)
 1019af0:	dec00204 	addi	sp,sp,8
 1019af4:	f800283a 	ret

01019af8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1019af8:	defffd04 	addi	sp,sp,-12
 1019afc:	dfc00215 	stw	ra,8(sp)
 1019b00:	df000115 	stw	fp,4(sp)
 1019b04:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1019b08:	008040f4 	movhi	r2,259
 1019b0c:	10a68004 	addi	r2,r2,-26112
 1019b10:	10800017 	ldw	r2,0(r2)
 1019b14:	1005003a 	cmpeq	r2,r2,zero
 1019b18:	1000061e 	bne	r2,zero,1019b34 <alt_get_errno+0x3c>
 1019b1c:	008040f4 	movhi	r2,259
 1019b20:	10a68004 	addi	r2,r2,-26112
 1019b24:	10800017 	ldw	r2,0(r2)
 1019b28:	103ee83a 	callr	r2
 1019b2c:	e0bfff15 	stw	r2,-4(fp)
 1019b30:	00000306 	br	1019b40 <alt_get_errno+0x48>
 1019b34:	008040f4 	movhi	r2,259
 1019b38:	10ad7c04 	addi	r2,r2,-18960
 1019b3c:	e0bfff15 	stw	r2,-4(fp)
 1019b40:	e0bfff17 	ldw	r2,-4(fp)
}
 1019b44:	e037883a 	mov	sp,fp
 1019b48:	dfc00117 	ldw	ra,4(sp)
 1019b4c:	df000017 	ldw	fp,0(sp)
 1019b50:	dec00204 	addi	sp,sp,8
 1019b54:	f800283a 	ret

01019b58 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1019b58:	defffd04 	addi	sp,sp,-12
 1019b5c:	dfc00215 	stw	ra,8(sp)
 1019b60:	df000115 	stw	fp,4(sp)
 1019b64:	df000104 	addi	fp,sp,4
 1019b68:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 1019b6c:	10202500 	call	1020250 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1019b70:	00800044 	movi	r2,1
 1019b74:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1019b78:	e037883a 	mov	sp,fp
 1019b7c:	dfc00117 	ldw	ra,4(sp)
 1019b80:	df000017 	ldw	fp,0(sp)
 1019b84:	dec00204 	addi	sp,sp,8
 1019b88:	f800283a 	ret

01019b8c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 1019b8c:	defffe04 	addi	sp,sp,-8
 1019b90:	dfc00115 	stw	ra,4(sp)
 1019b94:	df000015 	stw	fp,0(sp)
 1019b98:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 1019b9c:	01043804 	movi	r4,4320
 1019ba0:	000b883a 	mov	r5,zero
 1019ba4:	018000c4 	movi	r6,3
 1019ba8:	01c0fa04 	movi	r7,1000
 1019bac:	101ed640 	call	101ed64 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 1019bb0:	010040f4 	movhi	r4,259
 1019bb4:	21223f04 	addi	r4,r4,-30468
 1019bb8:	000b883a 	mov	r5,zero
 1019bbc:	000d883a 	mov	r6,zero
 1019bc0:	101e3900 	call	101e390 <altera_avalon_jtag_uart_init>
 1019bc4:	010040f4 	movhi	r4,259
 1019bc8:	21223504 	addi	r4,r4,-30508
 1019bcc:	1019c140 	call	1019c14 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 1019bd0:	010040f4 	movhi	r4,259
 1019bd4:	21264d04 	addi	r4,r4,-26316
 1019bd8:	101ee9c0 	call	101ee9c <alt_up_character_lcd_init>
 1019bdc:	010040f4 	movhi	r4,259
 1019be0:	21264d04 	addi	r4,r4,-26316
 1019be4:	1019c140 	call	1019c14 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( RS232_0, rs232_0);
 1019be8:	010040f4 	movhi	r4,259
 1019bec:	21265804 	addi	r4,r4,-26272
 1019bf0:	1019c140 	call	1019c14 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
 1019bf4:	010040f4 	movhi	r4,259
 1019bf8:	21266304 	addi	r4,r4,-26228
 1019bfc:	1019c140 	call	1019c14 <alt_dev_reg>
}
 1019c00:	e037883a 	mov	sp,fp
 1019c04:	dfc00117 	ldw	ra,4(sp)
 1019c08:	df000017 	ldw	fp,0(sp)
 1019c0c:	dec00204 	addi	sp,sp,8
 1019c10:	f800283a 	ret

01019c14 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 1019c14:	defffd04 	addi	sp,sp,-12
 1019c18:	dfc00215 	stw	ra,8(sp)
 1019c1c:	df000115 	stw	fp,4(sp)
 1019c20:	df000104 	addi	fp,sp,4
 1019c24:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 1019c28:	e13fff17 	ldw	r4,-4(fp)
 1019c2c:	014040f4 	movhi	r5,259
 1019c30:	29667d04 	addi	r5,r5,-26124
 1019c34:	101f84c0 	call	101f84c <alt_dev_llist_insert>
}
 1019c38:	e037883a 	mov	sp,fp
 1019c3c:	dfc00117 	ldw	ra,4(sp)
 1019c40:	df000017 	ldw	fp,0(sp)
 1019c44:	dec00204 	addi	sp,sp,8
 1019c48:	f800283a 	ret

01019c4c <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset);

bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
 1019c4c:	defffa04 	addi	sp,sp,-24
 1019c50:	dfc00515 	stw	ra,20(sp)
 1019c54:	df000415 	stw	fp,16(sp)
 1019c58:	df000404 	addi	fp,sp,16
 1019c5c:	e13ffe15 	stw	r4,-8(fp)
 1019c60:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
 1019c64:	e03ffd15 	stw	zero,-12(fp)

	if (alt_up_sd_card_is_Present()) {
 1019c68:	101ca700 	call	101ca70 <alt_up_sd_card_is_Present>
 1019c6c:	1005003a 	cmpeq	r2,r2,zero
 1019c70:	1000221e 	bne	r2,zero,1019cfc <Write_Sector_Data+0xb0>
		short int reg_state = 0xff;
 1019c74:	00803fc4 	movi	r2,255
 1019c78:	e0bffc0d 	sth	r2,-16(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		* the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0,
 1019c7c:	d0a71817 	ldw	r2,-25504(gp)
 1019c80:	1009883a 	mov	r4,r2
 1019c84:	e0fffe17 	ldw	r3,-8(fp)
 1019c88:	e0bfff17 	ldw	r2,-4(fp)
 1019c8c:	1885883a 	add	r2,r3,r2
 1019c90:	1006927a 	slli	r3,r2,9
 1019c94:	2005883a 	mov	r2,r4
 1019c98:	10c00035 	stwio	r3,0(r2)
			(sector_index + partition_offset) * 512);
		IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
 1019c9c:	d0a71717 	ldw	r2,-25508(gp)
 1019ca0:	1007883a 	mov	r3,r2
 1019ca4:	00800604 	movi	r2,24
 1019ca8:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int)IORD_16DIRECT(aux_status_register, 0);
 1019cac:	d0a71417 	ldw	r2,-25520(gp)
 1019cb0:	1080002b 	ldhuio	r2,0(r2)
 1019cb4:	e0bffc0d 	sth	r2,-16(fp)
		} while ((reg_state & 0x04) != 0);
 1019cb8:	e0bffc0b 	ldhu	r2,-16(fp)
 1019cbc:	10bfffcc 	andi	r2,r2,65535
 1019cc0:	1080010c 	andi	r2,r2,4
 1019cc4:	1004c03a 	cmpne	r2,r2,zero
 1019cc8:	103ff81e 	bne	r2,zero,1019cac <Write_Sector_Data+0x60>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
 1019ccc:	e0bffc0b 	ldhu	r2,-16(fp)
 1019cd0:	10bfffcc 	andi	r2,r2,65535
 1019cd4:	1080040c 	andi	r2,r2,16
 1019cd8:	1004c03a 	cmpne	r2,r2,zero
 1019cdc:	1000071e 	bne	r2,zero,1019cfc <Write_Sector_Data+0xb0>
			result = true;
 1019ce0:	00800044 	movi	r2,1
 1019ce4:	e0bffd15 	stw	r2,-12(fp)
			current_sector_modified = false;
 1019ce8:	d0271d15 	stw	zero,-25484(gp)
			current_sector_index = sector_index + partition_offset;
 1019cec:	e0fffe17 	ldw	r3,-8(fp)
 1019cf0:	e0bfff17 	ldw	r2,-4(fp)
 1019cf4:	1885883a 	add	r2,r3,r2
 1019cf8:	d0a71e15 	stw	r2,-25480(gp)
		}
	}
	return result;
 1019cfc:	e0bffd17 	ldw	r2,-12(fp)
}
 1019d00:	e037883a 	mov	sp,fp
 1019d04:	dfc00117 	ldw	ra,4(sp)
 1019d08:	df000017 	ldw	fp,0(sp)
 1019d0c:	dec00204 	addi	sp,sp,8
 1019d10:	f800283a 	ret

01019d14 <Save_Modified_Sector>:

bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
 1019d14:	defffd04 	addi	sp,sp,-12
 1019d18:	dfc00215 	stw	ra,8(sp)
 1019d1c:	df000115 	stw	fp,4(sp)
 1019d20:	df000104 	addi	fp,sp,4
	bool result = true;
 1019d24:	00800044 	movi	r2,1
 1019d28:	e0bfff15 	stw	r2,-4(fp)
	if (current_sector_modified) {
 1019d2c:	d0a71d17 	ldw	r2,-25484(gp)
 1019d30:	1005003a 	cmpeq	r2,r2,zero
 1019d34:	1000051e 	bne	r2,zero,1019d4c <Save_Modified_Sector+0x38>
		result = Write_Sector_Data(current_sector_index, 0);
 1019d38:	d0a71e17 	ldw	r2,-25480(gp)
 1019d3c:	1009883a 	mov	r4,r2
 1019d40:	000b883a 	mov	r5,zero
 1019d44:	1019c4c0 	call	1019c4c <Write_Sector_Data>
 1019d48:	e0bfff15 	stw	r2,-4(fp)
	}
	return result;
 1019d4c:	e0bfff17 	ldw	r2,-4(fp)
}
 1019d50:	e037883a 	mov	sp,fp
 1019d54:	dfc00117 	ldw	ra,4(sp)
 1019d58:	df000017 	ldw	fp,0(sp)
 1019d5c:	dec00204 	addi	sp,sp,8
 1019d60:	f800283a 	ret

01019d64 <Read_Sector_Data>:

bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
 1019d64:	defff904 	addi	sp,sp,-28
 1019d68:	dfc00615 	stw	ra,24(sp)
 1019d6c:	df000515 	stw	fp,20(sp)
 1019d70:	df000504 	addi	fp,sp,20
 1019d74:	e13ffd15 	stw	r4,-12(fp)
 1019d78:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
 1019d7c:	e03ffc15 	stw	zero,-16(fp)

	if (alt_up_sd_card_is_Present()) {
 1019d80:	101ca700 	call	101ca70 <alt_up_sd_card_is_Present>
 1019d84:	1005003a 	cmpeq	r2,r2,zero
 1019d88:	10002d1e 	bne	r2,zero,1019e40 <Read_Sector_Data+0xdc>
		short int reg_state = 0xff;
 1019d8c:	00803fc4 	movi	r2,255
 1019d90:	e0bffb0d 	sth	r2,-20(fp)

		/* Write data to the SD card if the current buffer is out of date. */
		if (current_sector_modified) {
 1019d94:	d0a71d17 	ldw	r2,-25484(gp)
 1019d98:	1005003a 	cmpeq	r2,r2,zero
 1019d9c:	1000081e 	bne	r2,zero,1019dc0 <Read_Sector_Data+0x5c>
			if (Write_Sector_Data(current_sector_index, 0) == false) {
 1019da0:	d0a71e17 	ldw	r2,-25480(gp)
 1019da4:	1009883a 	mov	r4,r2
 1019da8:	000b883a 	mov	r5,zero
 1019dac:	1019c4c0 	call	1019c4c <Write_Sector_Data>
 1019db0:	1004c03a 	cmpne	r2,r2,zero
 1019db4:	1000021e 	bne	r2,zero,1019dc0 <Read_Sector_Data+0x5c>
				return false;
 1019db8:	e03fff15 	stw	zero,-4(fp)
 1019dbc:	00002206 	br	1019e48 <Read_Sector_Data+0xe4>
			}
		}
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		* the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0,
 1019dc0:	d0a71817 	ldw	r2,-25504(gp)
 1019dc4:	1009883a 	mov	r4,r2
 1019dc8:	e0fffd17 	ldw	r3,-12(fp)
 1019dcc:	e0bffe17 	ldw	r2,-8(fp)
 1019dd0:	1885883a 	add	r2,r3,r2
 1019dd4:	1006927a 	slli	r3,r2,9
 1019dd8:	2005883a 	mov	r2,r4
 1019ddc:	10c00035 	stwio	r3,0(r2)
			(sector_index + partition_offset) * 512);
		IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
 1019de0:	d0a71717 	ldw	r2,-25508(gp)
 1019de4:	1007883a 	mov	r3,r2
 1019de8:	00800444 	movi	r2,17
 1019dec:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int)IORD_16DIRECT(aux_status_register, 0);
 1019df0:	d0a71417 	ldw	r2,-25520(gp)
 1019df4:	1080002b 	ldhuio	r2,0(r2)
 1019df8:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04) != 0);
 1019dfc:	e0bffb0b 	ldhu	r2,-20(fp)
 1019e00:	10bfffcc 	andi	r2,r2,65535
 1019e04:	1080010c 	andi	r2,r2,4
 1019e08:	1004c03a 	cmpne	r2,r2,zero
 1019e0c:	103ff81e 	bne	r2,zero,1019df0 <Read_Sector_Data+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
 1019e10:	e0bffb0b 	ldhu	r2,-20(fp)
 1019e14:	10bfffcc 	andi	r2,r2,65535
 1019e18:	1080040c 	andi	r2,r2,16
 1019e1c:	1004c03a 	cmpne	r2,r2,zero
 1019e20:	1000071e 	bne	r2,zero,1019e40 <Read_Sector_Data+0xdc>
			result = true;
 1019e24:	00800044 	movi	r2,1
 1019e28:	e0bffc15 	stw	r2,-16(fp)
			current_sector_modified = false;
 1019e2c:	d0271d15 	stw	zero,-25484(gp)
			current_sector_index = sector_index + partition_offset;
 1019e30:	e0fffd17 	ldw	r3,-12(fp)
 1019e34:	e0bffe17 	ldw	r2,-8(fp)
 1019e38:	1885883a 	add	r2,r3,r2
 1019e3c:	d0a71e15 	stw	r2,-25480(gp)
		}
	}
	return result;
 1019e40:	e0bffc17 	ldw	r2,-16(fp)
 1019e44:	e0bfff15 	stw	r2,-4(fp)
 1019e48:	e0bfff17 	ldw	r2,-4(fp)
}
 1019e4c:	e037883a 	mov	sp,fp
 1019e50:	dfc00117 	ldw	ra,4(sp)
 1019e54:	df000017 	ldw	fp,0(sp)
 1019e58:	dec00204 	addi	sp,sp,8
 1019e5c:	f800283a 	ret

01019e60 <get_cluster_flag>:

bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
 1019e60:	defffa04 	addi	sp,sp,-24
 1019e64:	dfc00515 	stw	ra,20(sp)
 1019e68:	df000415 	stw	fp,16(sp)
 1019e6c:	df000404 	addi	fp,sp,16
 1019e70:	e13ffd15 	stw	r4,-12(fp)
 1019e74:	e17ffe15 	stw	r5,-8(fp)
	unsigned int sector_index = (cluster_index / 256)
		+ fat_partition_offset_in_512_byte_sectors;
 1019e78:	e0bffd17 	ldw	r2,-12(fp)
 1019e7c:	1006d23a 	srli	r3,r2,8
 1019e80:	d0a71a17 	ldw	r2,-25496(gp)
 1019e84:	1885883a 	add	r2,r3,r2
 1019e88:	e0bffc15 	stw	r2,-16(fp)

	sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
 1019e8c:	00804234 	movhi	r2,264
 1019e90:	10ac2604 	addi	r2,r2,-20328
 1019e94:	10c01117 	ldw	r3,68(r2)
 1019e98:	e0bffc17 	ldw	r2,-16(fp)
 1019e9c:	10c5883a 	add	r2,r2,r3
 1019ea0:	e0bffc15 	stw	r2,-16(fp)

	if (sector_index != current_sector_index) {
 1019ea4:	d0e71e17 	ldw	r3,-25480(gp)
 1019ea8:	e0bffc17 	ldw	r2,-16(fp)
 1019eac:	10c00726 	beq	r2,r3,1019ecc <get_cluster_flag+0x6c>
		if (Read_Sector_Data(sector_index, 0) == false) {
 1019eb0:	e13ffc17 	ldw	r4,-16(fp)
 1019eb4:	000b883a 	mov	r5,zero
 1019eb8:	1019d640 	call	1019d64 <Read_Sector_Data>
 1019ebc:	1004c03a 	cmpne	r2,r2,zero
 1019ec0:	1000021e 	bne	r2,zero,1019ecc <get_cluster_flag+0x6c>
			return false;
 1019ec4:	e03fff15 	stw	zero,-4(fp)
 1019ec8:	00000d06 	br	1019f00 <get_cluster_flag+0xa0>
		}
	}
	*flag =
 1019ecc:	d0a71c17 	ldw	r2,-25488(gp)
 1019ed0:	10800a17 	ldw	r2,40(r2)
 1019ed4:	1007883a 	mov	r3,r2
 1019ed8:	e0bffd17 	ldw	r2,-12(fp)
 1019edc:	10803fcc 	andi	r2,r2,255
 1019ee0:	1085883a 	add	r2,r2,r2
 1019ee4:	1885883a 	add	r2,r3,r2
 1019ee8:	1080002b 	ldhuio	r2,0(r2)
 1019eec:	1007883a 	mov	r3,r2
 1019ef0:	e0bffe17 	ldw	r2,-8(fp)
 1019ef4:	10c0000d 	sth	r3,0(r2)
		(unsigned short int) IORD_16DIRECT(device_pointer->base, 2 * (cluster_index % 256));
	return true;
 1019ef8:	00800044 	movi	r2,1
 1019efc:	e0bfff15 	stw	r2,-4(fp)
 1019f00:	e0bfff17 	ldw	r2,-4(fp)
}
 1019f04:	e037883a 	mov	sp,fp
 1019f08:	dfc00117 	ldw	ra,4(sp)
 1019f0c:	df000017 	ldw	fp,0(sp)
 1019f10:	dec00204 	addi	sp,sp,8
 1019f14:	f800283a 	ret

01019f18 <mark_cluster>:

bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
 1019f18:	defff904 	addi	sp,sp,-28
 1019f1c:	dfc00615 	stw	ra,24(sp)
 1019f20:	df000515 	stw	fp,20(sp)
 1019f24:	df000504 	addi	fp,sp,20
 1019f28:	e13ffc15 	stw	r4,-16(fp)
 1019f2c:	e1bffe15 	stw	r6,-8(fp)
 1019f30:	e17ffd0d 	sth	r5,-12(fp)
	unsigned int sector_index = (cluster_index / 256)
		+ fat_partition_offset_in_512_byte_sectors;
 1019f34:	e0bffc17 	ldw	r2,-16(fp)
 1019f38:	1006d23a 	srli	r3,r2,8
 1019f3c:	d0a71a17 	ldw	r2,-25496(gp)
 1019f40:	1885883a 	add	r2,r3,r2
 1019f44:	e0bffb15 	stw	r2,-20(fp)

	if (first_fat) {
 1019f48:	e0bffe17 	ldw	r2,-8(fp)
 1019f4c:	1005003a 	cmpeq	r2,r2,zero
 1019f50:	1000071e 	bne	r2,zero,1019f70 <mark_cluster+0x58>
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
 1019f54:	00804234 	movhi	r2,264
 1019f58:	10ac2604 	addi	r2,r2,-20328
 1019f5c:	10c01117 	ldw	r3,68(r2)
 1019f60:	e0bffb17 	ldw	r2,-20(fp)
 1019f64:	10c5883a 	add	r2,r2,r3
 1019f68:	e0bffb15 	stw	r2,-20(fp)
 1019f6c:	00000606 	br	1019f88 <mark_cluster+0x70>
	}
	else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
 1019f70:	00804234 	movhi	r2,264
 1019f74:	10ac2604 	addi	r2,r2,-20328
 1019f78:	10c01217 	ldw	r3,72(r2)
 1019f7c:	e0bffb17 	ldw	r2,-20(fp)
 1019f80:	10c5883a 	add	r2,r2,r3
 1019f84:	e0bffb15 	stw	r2,-20(fp)
	}

	if (sector_index != current_sector_index) {
 1019f88:	d0e71e17 	ldw	r3,-25480(gp)
 1019f8c:	e0bffb17 	ldw	r2,-20(fp)
 1019f90:	10c00726 	beq	r2,r3,1019fb0 <mark_cluster+0x98>
		if (Read_Sector_Data(sector_index, 0) == false) {
 1019f94:	e13ffb17 	ldw	r4,-20(fp)
 1019f98:	000b883a 	mov	r5,zero
 1019f9c:	1019d640 	call	1019d64 <Read_Sector_Data>
 1019fa0:	1004c03a 	cmpne	r2,r2,zero
 1019fa4:	1000021e 	bne	r2,zero,1019fb0 <mark_cluster+0x98>
			return false;
 1019fa8:	e03fff15 	stw	zero,-4(fp)
 1019fac:	00000d06 	br	1019fe4 <mark_cluster+0xcc>
		}
	}
	IOWR_16DIRECT(device_pointer->base, 2 * (cluster_index % 256), flag);
 1019fb0:	d0a71c17 	ldw	r2,-25488(gp)
 1019fb4:	10800a17 	ldw	r2,40(r2)
 1019fb8:	1007883a 	mov	r3,r2
 1019fbc:	e0bffc17 	ldw	r2,-16(fp)
 1019fc0:	10803fcc 	andi	r2,r2,255
 1019fc4:	1085883a 	add	r2,r2,r2
 1019fc8:	1885883a 	add	r2,r3,r2
 1019fcc:	e0fffd0f 	ldh	r3,-12(fp)
 1019fd0:	10c0002d 	sthio	r3,0(r2)
	current_sector_modified = true;
 1019fd4:	00800044 	movi	r2,1
 1019fd8:	d0a71d15 	stw	r2,-25484(gp)
	return true;
 1019fdc:	00800044 	movi	r2,1
 1019fe0:	e0bfff15 	stw	r2,-4(fp)
 1019fe4:	e0bfff17 	ldw	r2,-4(fp)
}
 1019fe8:	e037883a 	mov	sp,fp
 1019fec:	dfc00117 	ldw	ra,4(sp)
 1019ff0:	df000017 	ldw	fp,0(sp)
 1019ff4:	dec00204 	addi	sp,sp,8
 1019ff8:	f800283a 	ret

01019ffc <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
 1019ffc:	defff704 	addi	sp,sp,-36
 101a000:	dfc00815 	stw	ra,32(sp)
 101a004:	df000715 	stw	fp,28(sp)
 101a008:	df000704 	addi	fp,sp,28
	bool result = false;
 101a00c:	e03fff15 	stw	zero,-4(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data_Attempt_CRC(0, 0)) {
 101a010:	0009883a 	mov	r4,zero
 101a014:	000b883a 	mov	r5,zero
 101a018:	101e1b80 	call	101e1b8 <Read_Sector_Data_Attempt_CRC>
 101a01c:	1005003a 	cmpeq	r2,r2,zero
 101a020:	10005c1e 	bne	r2,zero,101a194 <Check_for_Master_Boot_Record+0x198>
		end = (short int)IORD_16DIRECT(device_pointer->base, 0x1fe);
 101a024:	d0a71c17 	ldw	r2,-25488(gp)
 101a028:	10800a17 	ldw	r2,40(r2)
 101a02c:	10807f84 	addi	r2,r2,510
 101a030:	1080002b 	ldhuio	r2,0(r2)
 101a034:	10bfffcc 	andi	r2,r2,65535
 101a038:	10a0001c 	xori	r2,r2,32768
 101a03c:	10a00004 	addi	r2,r2,-32768
 101a040:	e0bffd15 	stw	r2,-12(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55) {
 101a044:	e0bffd17 	ldw	r2,-12(fp)
 101a048:	10ffffcc 	andi	r3,r2,65535
 101a04c:	00aa9554 	movui	r2,43605
 101a050:	1880501e 	bne	r3,r2,101a194 <Check_for_Master_Boot_Record+0x198>
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++) {
 101a054:	e03ffe15 	stw	zero,-8(fp)
 101a058:	00004b06 	br	101a188 <Check_for_Master_Boot_Record+0x18c>
				int partition_data_offset = (index * 16) + 0x01be;
 101a05c:	e0bffe17 	ldw	r2,-8(fp)
 101a060:	1004913a 	slli	r2,r2,4
 101a064:	10806f84 	addi	r2,r2,446
 101a068:	e0bffa15 	stw	r2,-24(fp)
				char type;

				// Read Partition type
				type =
 101a06c:	d0a71c17 	ldw	r2,-25488(gp)
 101a070:	10800a17 	ldw	r2,40(r2)
 101a074:	1007883a 	mov	r3,r2
 101a078:	e0bffa17 	ldw	r2,-24(fp)
 101a07c:	1885883a 	add	r2,r3,r2
 101a080:	10800104 	addi	r2,r2,4
 101a084:	10800023 	ldbuio	r2,0(r2)
 101a088:	e0bff905 	stb	r2,-28(fp)
					(unsigned char)IORD_8DIRECT(device_pointer->base, partition_data_offset + 0x04);

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14)) {
 101a08c:	e0bff907 	ldb	r2,-28(fp)
 101a090:	10800060 	cmpeqi	r2,r2,1
 101a094:	1000091e 	bne	r2,zero,101a0bc <Check_for_Master_Boot_Record+0xc0>
 101a098:	e0bff907 	ldb	r2,-28(fp)
 101a09c:	10800120 	cmpeqi	r2,r2,4
 101a0a0:	1000061e 	bne	r2,zero,101a0bc <Check_for_Master_Boot_Record+0xc0>
 101a0a4:	e0bff907 	ldb	r2,-28(fp)
 101a0a8:	108001a0 	cmpeqi	r2,r2,6
 101a0ac:	1000031e 	bne	r2,zero,101a0bc <Check_for_Master_Boot_Record+0xc0>
 101a0b0:	e0bff907 	ldb	r2,-28(fp)
 101a0b4:	10800398 	cmpnei	r2,r2,14
 101a0b8:	1000301e 	bne	r2,zero,101a17c <Check_for_Master_Boot_Record+0x180>
					// Get partition offset and size.
					offset =
 101a0bc:	d0a71c17 	ldw	r2,-25488(gp)
 101a0c0:	10800a17 	ldw	r2,40(r2)
 101a0c4:	1007883a 	mov	r3,r2
 101a0c8:	e0bffa17 	ldw	r2,-24(fp)
 101a0cc:	1885883a 	add	r2,r3,r2
 101a0d0:	10800284 	addi	r2,r2,10
 101a0d4:	1080002b 	ldhuio	r2,0(r2)
 101a0d8:	10bfffcc 	andi	r2,r2,65535
 101a0dc:	1008943a 	slli	r4,r2,16
 101a0e0:	d0a71c17 	ldw	r2,-25488(gp)
 101a0e4:	10800a17 	ldw	r2,40(r2)
 101a0e8:	1007883a 	mov	r3,r2
 101a0ec:	e0bffa17 	ldw	r2,-24(fp)
 101a0f0:	1885883a 	add	r2,r3,r2
 101a0f4:	10800204 	addi	r2,r2,8
 101a0f8:	1080002b 	ldhuio	r2,0(r2)
 101a0fc:	10bfffcc 	andi	r2,r2,65535
 101a100:	2084b03a 	or	r2,r4,r2
 101a104:	e0bffc15 	stw	r2,-16(fp)
						(((unsigned short int) IORD_16DIRECT(device_pointer->base, partition_data_offset + 0x0A))
						<< 16)
						| ((unsigned short int) IORD_16DIRECT(device_pointer->base, partition_data_offset + 0x08));
					partition_size =
 101a108:	d0a71c17 	ldw	r2,-25488(gp)
 101a10c:	10800a17 	ldw	r2,40(r2)
 101a110:	1007883a 	mov	r3,r2
 101a114:	e0bffa17 	ldw	r2,-24(fp)
 101a118:	1885883a 	add	r2,r3,r2
 101a11c:	10800384 	addi	r2,r2,14
 101a120:	1080002b 	ldhuio	r2,0(r2)
 101a124:	10bfffcc 	andi	r2,r2,65535
 101a128:	1008943a 	slli	r4,r2,16
 101a12c:	d0a71c17 	ldw	r2,-25488(gp)
 101a130:	10800a17 	ldw	r2,40(r2)
 101a134:	1007883a 	mov	r3,r2
 101a138:	e0bffa17 	ldw	r2,-24(fp)
 101a13c:	1885883a 	add	r2,r3,r2
 101a140:	10800304 	addi	r2,r2,12
 101a144:	1080002b 	ldhuio	r2,0(r2)
 101a148:	10bfffcc 	andi	r2,r2,65535
 101a14c:	2084b03a 	or	r2,r4,r2
 101a150:	e0bffb15 	stw	r2,-20(fp)
						(((unsigned short int) IORD_16DIRECT(device_pointer->base, partition_data_offset + 0x0E))
						<< 16)
						| ((unsigned short int) IORD_16DIRECT(device_pointer->base, partition_data_offset + 0x0C));

					// Check if the partition is valid
					if (partition_size > 0) {
 101a154:	e0bffb17 	ldw	r2,-20(fp)
 101a158:	10800050 	cmplti	r2,r2,1
 101a15c:	1000071e 	bne	r2,zero,101a17c <Check_for_Master_Boot_Record+0x180>
						result = true;
 101a160:	00800044 	movi	r2,1
 101a164:	e0bfff15 	stw	r2,-4(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
 101a168:	e0bffb17 	ldw	r2,-20(fp)
 101a16c:	d0a71b15 	stw	r2,-25492(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
 101a170:	e0bffc17 	ldw	r2,-16(fp)
 101a174:	d0a71a15 	stw	r2,-25496(gp)
						break;
 101a178:	00000606 	br	101a194 <Check_for_Master_Boot_Record+0x198>
		end = (short int)IORD_16DIRECT(device_pointer->base, 0x1fe);

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55) {
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++) {
 101a17c:	e0bffe17 	ldw	r2,-8(fp)
 101a180:	10800044 	addi	r2,r2,1
 101a184:	e0bffe15 	stw	r2,-8(fp)
 101a188:	e0bffe17 	ldw	r2,-8(fp)
 101a18c:	10800110 	cmplti	r2,r2,4
 101a190:	103fb21e 	bne	r2,zero,101a05c <Check_for_Master_Boot_Record+0x60>
				}
			}
		}
	}

	return result;
 101a194:	e0bfff17 	ldw	r2,-4(fp)
}
 101a198:	e037883a 	mov	sp,fp
 101a19c:	dfc00117 	ldw	ra,4(sp)
 101a1a0:	df000017 	ldw	fp,0(sp)
 101a1a4:	dec00204 	addi	sp,sp,8
 101a1a8:	f800283a 	ret

0101a1ac <Read_File_Record_At_Offset>:

bool Read_File_Record_At_Offset(int offset, t_file_record *record,
	unsigned int cluster_index, unsigned int sector_in_cluster)
	// This function reads a file record
{
 101a1ac:	defff804 	addi	sp,sp,-32
 101a1b0:	dfc00715 	stw	ra,28(sp)
 101a1b4:	df000615 	stw	fp,24(sp)
 101a1b8:	df000604 	addi	fp,sp,24
 101a1bc:	e13ffc15 	stw	r4,-16(fp)
 101a1c0:	e17ffd15 	stw	r5,-12(fp)
 101a1c4:	e1bffe15 	stw	r6,-8(fp)
 101a1c8:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
 101a1cc:	e03ffb15 	stw	zero,-20(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
 101a1d0:	e0bffc17 	ldw	r2,-16(fp)
 101a1d4:	108007cc 	andi	r2,r2,31
 101a1d8:	1004c03a 	cmpne	r2,r2,zero
 101a1dc:	10008e1e 	bne	r2,zero,101a418 <Read_File_Record_At_Offset+0x26c>
 101a1e0:	101ca700 	call	101ca70 <alt_up_sd_card_is_Present>
 101a1e4:	1005003a 	cmpeq	r2,r2,zero
 101a1e8:	10008b1e 	bne	r2,zero,101a418 <Read_File_Record_At_Offset+0x26c>
 101a1ec:	d0a71317 	ldw	r2,-25524(gp)
 101a1f0:	1005003a 	cmpeq	r2,r2,zero
 101a1f4:	1000881e 	bne	r2,zero,101a418 <Read_File_Record_At_Offset+0x26c>
		&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter++) {
 101a1f8:	e03ffa15 	stw	zero,-24(fp)
 101a1fc:	00001006 	br	101a240 <Read_File_Record_At_Offset+0x94>
			record->name[counter] =
 101a200:	e17ffa17 	ldw	r5,-24(fp)
 101a204:	d0a71c17 	ldw	r2,-25488(gp)
 101a208:	10800a17 	ldw	r2,40(r2)
 101a20c:	1009883a 	mov	r4,r2
 101a210:	e0fffc17 	ldw	r3,-16(fp)
 101a214:	e0bffa17 	ldw	r2,-24(fp)
 101a218:	1885883a 	add	r2,r3,r2
 101a21c:	2085883a 	add	r2,r4,r2
 101a220:	10800023 	ldbuio	r2,0(r2)
 101a224:	1007883a 	mov	r3,r2
 101a228:	e0bffd17 	ldw	r2,-12(fp)
 101a22c:	1145883a 	add	r2,r2,r5
 101a230:	10c00005 	stb	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
		&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter++) {
 101a234:	e0bffa17 	ldw	r2,-24(fp)
 101a238:	10800044 	addi	r2,r2,1
 101a23c:	e0bffa15 	stw	r2,-24(fp)
 101a240:	e0bffa17 	ldw	r2,-24(fp)
 101a244:	10800210 	cmplti	r2,r2,8
 101a248:	103fed1e 	bne	r2,zero,101a200 <Read_File_Record_At_Offset+0x54>
			record->name[counter] =
				(char)IORD_8DIRECT(device_pointer->base, offset + counter);
		}
		for (counter = 0; counter < 3; counter++) {
 101a24c:	e03ffa15 	stw	zero,-24(fp)
 101a250:	00001206 	br	101a29c <Read_File_Record_At_Offset+0xf0>
			record->extension[counter] =
 101a254:	e17ffa17 	ldw	r5,-24(fp)
 101a258:	d0a71c17 	ldw	r2,-25488(gp)
 101a25c:	10800a17 	ldw	r2,40(r2)
 101a260:	1009883a 	mov	r4,r2
 101a264:	e0fffc17 	ldw	r3,-16(fp)
 101a268:	e0bffa17 	ldw	r2,-24(fp)
 101a26c:	1885883a 	add	r2,r3,r2
 101a270:	2085883a 	add	r2,r4,r2
 101a274:	10800204 	addi	r2,r2,8
 101a278:	10800023 	ldbuio	r2,0(r2)
 101a27c:	1007883a 	mov	r3,r2
 101a280:	e0bffd17 	ldw	r2,-12(fp)
 101a284:	2885883a 	add	r2,r5,r2
 101a288:	10800204 	addi	r2,r2,8
 101a28c:	10c00005 	stb	r3,0(r2)

		for (counter = 0; counter < 8; counter++) {
			record->name[counter] =
				(char)IORD_8DIRECT(device_pointer->base, offset + counter);
		}
		for (counter = 0; counter < 3; counter++) {
 101a290:	e0bffa17 	ldw	r2,-24(fp)
 101a294:	10800044 	addi	r2,r2,1
 101a298:	e0bffa15 	stw	r2,-24(fp)
 101a29c:	e0bffa17 	ldw	r2,-24(fp)
 101a2a0:	108000d0 	cmplti	r2,r2,3
 101a2a4:	103feb1e 	bne	r2,zero,101a254 <Read_File_Record_At_Offset+0xa8>
			record->extension[counter] =
				(char)IORD_8DIRECT(device_pointer->base, offset + counter + 8);
		}
		record->attributes =
 101a2a8:	d0a71c17 	ldw	r2,-25488(gp)
 101a2ac:	10800a17 	ldw	r2,40(r2)
 101a2b0:	1007883a 	mov	r3,r2
 101a2b4:	e0bffc17 	ldw	r2,-16(fp)
 101a2b8:	1885883a 	add	r2,r3,r2
 101a2bc:	108002c4 	addi	r2,r2,11
 101a2c0:	10800023 	ldbuio	r2,0(r2)
 101a2c4:	1007883a 	mov	r3,r2
 101a2c8:	e0bffd17 	ldw	r2,-12(fp)
 101a2cc:	10c002c5 	stb	r3,11(r2)
			(char)IORD_8DIRECT(device_pointer->base, offset + 11);
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time =
 101a2d0:	d0a71c17 	ldw	r2,-25488(gp)
 101a2d4:	10800a17 	ldw	r2,40(r2)
 101a2d8:	1007883a 	mov	r3,r2
 101a2dc:	e0bffc17 	ldw	r2,-16(fp)
 101a2e0:	1885883a 	add	r2,r3,r2
 101a2e4:	10800384 	addi	r2,r2,14
 101a2e8:	1080002b 	ldhuio	r2,0(r2)
 101a2ec:	1007883a 	mov	r3,r2
 101a2f0:	e0bffd17 	ldw	r2,-12(fp)
 101a2f4:	10c0030d 	sth	r3,12(r2)
			(unsigned short int) IORD_16DIRECT(device_pointer->base, offset + 14);
		record->create_date =
 101a2f8:	d0a71c17 	ldw	r2,-25488(gp)
 101a2fc:	10800a17 	ldw	r2,40(r2)
 101a300:	1007883a 	mov	r3,r2
 101a304:	e0bffc17 	ldw	r2,-16(fp)
 101a308:	1885883a 	add	r2,r3,r2
 101a30c:	10800404 	addi	r2,r2,16
 101a310:	1080002b 	ldhuio	r2,0(r2)
 101a314:	1007883a 	mov	r3,r2
 101a318:	e0bffd17 	ldw	r2,-12(fp)
 101a31c:	10c0038d 	sth	r3,14(r2)
			(unsigned short int) IORD_16DIRECT(device_pointer->base, offset + 16);
		record->last_access_date =
 101a320:	d0a71c17 	ldw	r2,-25488(gp)
 101a324:	10800a17 	ldw	r2,40(r2)
 101a328:	1007883a 	mov	r3,r2
 101a32c:	e0bffc17 	ldw	r2,-16(fp)
 101a330:	1885883a 	add	r2,r3,r2
 101a334:	10800484 	addi	r2,r2,18
 101a338:	1080002b 	ldhuio	r2,0(r2)
 101a33c:	1007883a 	mov	r3,r2
 101a340:	e0bffd17 	ldw	r2,-12(fp)
 101a344:	10c0040d 	sth	r3,16(r2)
			(unsigned short int) IORD_16DIRECT(device_pointer->base, offset + 18);
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time =
 101a348:	d0a71c17 	ldw	r2,-25488(gp)
 101a34c:	10800a17 	ldw	r2,40(r2)
 101a350:	1007883a 	mov	r3,r2
 101a354:	e0bffc17 	ldw	r2,-16(fp)
 101a358:	1885883a 	add	r2,r3,r2
 101a35c:	10800584 	addi	r2,r2,22
 101a360:	1080002b 	ldhuio	r2,0(r2)
 101a364:	1007883a 	mov	r3,r2
 101a368:	e0bffd17 	ldw	r2,-12(fp)
 101a36c:	10c0048d 	sth	r3,18(r2)
			(unsigned short int) IORD_16DIRECT(device_pointer->base, offset + 22);
		record->last_modified_date =
 101a370:	d0a71c17 	ldw	r2,-25488(gp)
 101a374:	10800a17 	ldw	r2,40(r2)
 101a378:	1007883a 	mov	r3,r2
 101a37c:	e0bffc17 	ldw	r2,-16(fp)
 101a380:	1885883a 	add	r2,r3,r2
 101a384:	10800604 	addi	r2,r2,24
 101a388:	1080002b 	ldhuio	r2,0(r2)
 101a38c:	1007883a 	mov	r3,r2
 101a390:	e0bffd17 	ldw	r2,-12(fp)
 101a394:	10c0050d 	sth	r3,20(r2)
			(unsigned short int) IORD_16DIRECT(device_pointer->base, offset + 24);
		record->start_cluster_index =
 101a398:	d0a71c17 	ldw	r2,-25488(gp)
 101a39c:	10800a17 	ldw	r2,40(r2)
 101a3a0:	1007883a 	mov	r3,r2
 101a3a4:	e0bffc17 	ldw	r2,-16(fp)
 101a3a8:	1885883a 	add	r2,r3,r2
 101a3ac:	10800684 	addi	r2,r2,26
 101a3b0:	1080002b 	ldhuio	r2,0(r2)
 101a3b4:	1007883a 	mov	r3,r2
 101a3b8:	e0bffd17 	ldw	r2,-12(fp)
 101a3bc:	10c0058d 	sth	r3,22(r2)
			(unsigned short int) IORD_16DIRECT(device_pointer->base, offset + 26);
		record->file_size_in_bytes =
 101a3c0:	d0a71c17 	ldw	r2,-25488(gp)
 101a3c4:	10800a17 	ldw	r2,40(r2)
 101a3c8:	1007883a 	mov	r3,r2
 101a3cc:	e0bffc17 	ldw	r2,-16(fp)
 101a3d0:	1885883a 	add	r2,r3,r2
 101a3d4:	10800704 	addi	r2,r2,28
 101a3d8:	10800037 	ldwio	r2,0(r2)
 101a3dc:	1007883a 	mov	r3,r2
 101a3e0:	e0bffd17 	ldw	r2,-12(fp)
 101a3e4:	10c00615 	stw	r3,24(r2)
			(unsigned int)IORD_32DIRECT(device_pointer->base, offset + 28);
		record->file_record_cluster = cluster_index;
 101a3e8:	e0fffd17 	ldw	r3,-12(fp)
 101a3ec:	e0bffe17 	ldw	r2,-8(fp)
 101a3f0:	18800a15 	stw	r2,40(r3)
		record->file_record_sector_in_cluster = sector_in_cluster;
 101a3f4:	e0fffd17 	ldw	r3,-12(fp)
 101a3f8:	e0bfff17 	ldw	r2,-4(fp)
 101a3fc:	18800b15 	stw	r2,44(r3)
		record->file_record_offset = offset;
 101a400:	e0bffc17 	ldw	r2,-16(fp)
 101a404:	1007883a 	mov	r3,r2
 101a408:	e0bffd17 	ldw	r2,-12(fp)
 101a40c:	10c00c0d 	sth	r3,48(r2)
		result = true;
 101a410:	00800044 	movi	r2,1
 101a414:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
 101a418:	e0bffb17 	ldw	r2,-20(fp)
}
 101a41c:	e037883a 	mov	sp,fp
 101a420:	dfc00117 	ldw	ra,4(sp)
 101a424:	df000017 	ldw	fp,0(sp)
 101a428:	dec00204 	addi	sp,sp,8
 101a42c:	f800283a 	ret

0101a430 <Write_File_Record_At_Offset>:

bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
 101a430:	defff904 	addi	sp,sp,-28
 101a434:	dfc00615 	stw	ra,24(sp)
 101a438:	df000515 	stw	fp,20(sp)
 101a43c:	df000504 	addi	fp,sp,20
 101a440:	e13ffe15 	stw	r4,-8(fp)
 101a444:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
 101a448:	e03ffd15 	stw	zero,-12(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
 101a44c:	e0bffe17 	ldw	r2,-8(fp)
 101a450:	108007cc 	andi	r2,r2,31
 101a454:	1004c03a 	cmpne	r2,r2,zero
 101a458:	10009d1e 	bne	r2,zero,101a6d0 <Write_File_Record_At_Offset+0x2a0>
 101a45c:	101ca700 	call	101ca70 <alt_up_sd_card_is_Present>
 101a460:	1005003a 	cmpeq	r2,r2,zero
 101a464:	10009a1e 	bne	r2,zero,101a6d0 <Write_File_Record_At_Offset+0x2a0>
 101a468:	d0a71317 	ldw	r2,-25524(gp)
 101a46c:	1005003a 	cmpeq	r2,r2,zero
 101a470:	1000971e 	bne	r2,zero,101a6d0 <Write_File_Record_At_Offset+0x2a0>
		&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
 101a474:	e03ffc15 	stw	zero,-16(fp)
 101a478:	00001e06 	br	101a4f4 <Write_File_Record_At_Offset+0xc4>
			short int two_chars = (short int)record->name[counter + 1];
 101a47c:	e0bffc17 	ldw	r2,-16(fp)
 101a480:	10c00044 	addi	r3,r2,1
 101a484:	e0bfff17 	ldw	r2,-4(fp)
 101a488:	10c5883a 	add	r2,r2,r3
 101a48c:	10800003 	ldbu	r2,0(r2)
 101a490:	10803fcc 	andi	r2,r2,255
 101a494:	e0bffb0d 	sth	r2,-20(fp)
			two_chars = two_chars << 8;
 101a498:	e0bffb0f 	ldh	r2,-20(fp)
 101a49c:	1004923a 	slli	r2,r2,8
 101a4a0:	e0bffb0d 	sth	r2,-20(fp)
			two_chars = two_chars | record->name[counter];
 101a4a4:	e0fffc17 	ldw	r3,-16(fp)
 101a4a8:	e0bfff17 	ldw	r2,-4(fp)
 101a4ac:	10c5883a 	add	r2,r2,r3
 101a4b0:	10800003 	ldbu	r2,0(r2)
 101a4b4:	10c03fcc 	andi	r3,r2,255
 101a4b8:	e0bffb0b 	ldhu	r2,-20(fp)
 101a4bc:	10c4b03a 	or	r2,r2,r3
 101a4c0:	e0bffb0d 	sth	r2,-20(fp)
			IOWR_16DIRECT(device_pointer->base, offset + counter, two_chars);
 101a4c4:	d0a71c17 	ldw	r2,-25488(gp)
 101a4c8:	10800a17 	ldw	r2,40(r2)
 101a4cc:	1009883a 	mov	r4,r2
 101a4d0:	e0fffe17 	ldw	r3,-8(fp)
 101a4d4:	e0bffc17 	ldw	r2,-16(fp)
 101a4d8:	1885883a 	add	r2,r3,r2
 101a4dc:	2085883a 	add	r2,r4,r2
 101a4e0:	e0fffb0f 	ldh	r3,-20(fp)
 101a4e4:	10c0002d 	sthio	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
		&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
 101a4e8:	e0bffc17 	ldw	r2,-16(fp)
 101a4ec:	10800084 	addi	r2,r2,2
 101a4f0:	e0bffc15 	stw	r2,-16(fp)
 101a4f4:	e0bffc17 	ldw	r2,-16(fp)
 101a4f8:	10800210 	cmplti	r2,r2,8
 101a4fc:	103fdf1e 	bne	r2,zero,101a47c <Write_File_Record_At_Offset+0x4c>
			short int two_chars = (short int)record->name[counter + 1];
			two_chars = two_chars << 8;
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset + counter, two_chars);
		}
		for (counter = 0; counter < 3; counter++) {
 101a500:	e03ffc15 	stw	zero,-16(fp)
 101a504:	00001306 	br	101a554 <Write_File_Record_At_Offset+0x124>
			IOWR_8DIRECT(device_pointer->base, offset + counter + 8,
 101a508:	d0a71c17 	ldw	r2,-25488(gp)
 101a50c:	10800a17 	ldw	r2,40(r2)
 101a510:	1009883a 	mov	r4,r2
 101a514:	e0fffe17 	ldw	r3,-8(fp)
 101a518:	e0bffc17 	ldw	r2,-16(fp)
 101a51c:	1885883a 	add	r2,r3,r2
 101a520:	2085883a 	add	r2,r4,r2
 101a524:	11000204 	addi	r4,r2,8
 101a528:	e0fffc17 	ldw	r3,-16(fp)
 101a52c:	e0bfff17 	ldw	r2,-4(fp)
 101a530:	1885883a 	add	r2,r3,r2
 101a534:	10800204 	addi	r2,r2,8
 101a538:	10800003 	ldbu	r2,0(r2)
 101a53c:	10c03fcc 	andi	r3,r2,255
 101a540:	2005883a 	mov	r2,r4
 101a544:	10c00025 	stbio	r3,0(r2)
			short int two_chars = (short int)record->name[counter + 1];
			two_chars = two_chars << 8;
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset + counter, two_chars);
		}
		for (counter = 0; counter < 3; counter++) {
 101a548:	e0bffc17 	ldw	r2,-16(fp)
 101a54c:	10800044 	addi	r2,r2,1
 101a550:	e0bffc15 	stw	r2,-16(fp)
 101a554:	e0bffc17 	ldw	r2,-16(fp)
 101a558:	108000d0 	cmplti	r2,r2,3
 101a55c:	103fea1e 	bne	r2,zero,101a508 <Write_File_Record_At_Offset+0xd8>
			IOWR_8DIRECT(device_pointer->base, offset + counter + 8,
				record->extension[counter]);
		}
		IOWR_8DIRECT(device_pointer->base, offset + 11, record->attributes);
 101a560:	d0a71c17 	ldw	r2,-25488(gp)
 101a564:	10800a17 	ldw	r2,40(r2)
 101a568:	1007883a 	mov	r3,r2
 101a56c:	e0bffe17 	ldw	r2,-8(fp)
 101a570:	1885883a 	add	r2,r3,r2
 101a574:	110002c4 	addi	r4,r2,11
 101a578:	e0bfff17 	ldw	r2,-4(fp)
 101a57c:	108002c3 	ldbu	r2,11(r2)
 101a580:	10c03fcc 	andi	r3,r2,255
 101a584:	2005883a 	mov	r2,r4
 101a588:	10c00025 	stbio	r3,0(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		IOWR_16DIRECT(device_pointer->base, offset + 14, record->create_time);
 101a58c:	d0a71c17 	ldw	r2,-25488(gp)
 101a590:	10800a17 	ldw	r2,40(r2)
 101a594:	1007883a 	mov	r3,r2
 101a598:	e0bffe17 	ldw	r2,-8(fp)
 101a59c:	1885883a 	add	r2,r3,r2
 101a5a0:	11000384 	addi	r4,r2,14
 101a5a4:	e0bfff17 	ldw	r2,-4(fp)
 101a5a8:	1080030b 	ldhu	r2,12(r2)
 101a5ac:	10ffffcc 	andi	r3,r2,65535
 101a5b0:	2005883a 	mov	r2,r4
 101a5b4:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset + 16, record->create_date);
 101a5b8:	d0a71c17 	ldw	r2,-25488(gp)
 101a5bc:	10800a17 	ldw	r2,40(r2)
 101a5c0:	1007883a 	mov	r3,r2
 101a5c4:	e0bffe17 	ldw	r2,-8(fp)
 101a5c8:	1885883a 	add	r2,r3,r2
 101a5cc:	11000404 	addi	r4,r2,16
 101a5d0:	e0bfff17 	ldw	r2,-4(fp)
 101a5d4:	1080038b 	ldhu	r2,14(r2)
 101a5d8:	10ffffcc 	andi	r3,r2,65535
 101a5dc:	2005883a 	mov	r2,r4
 101a5e0:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset + 18,
 101a5e4:	d0a71c17 	ldw	r2,-25488(gp)
 101a5e8:	10800a17 	ldw	r2,40(r2)
 101a5ec:	1007883a 	mov	r3,r2
 101a5f0:	e0bffe17 	ldw	r2,-8(fp)
 101a5f4:	1885883a 	add	r2,r3,r2
 101a5f8:	11000484 	addi	r4,r2,18
 101a5fc:	e0bfff17 	ldw	r2,-4(fp)
 101a600:	1080040b 	ldhu	r2,16(r2)
 101a604:	10ffffcc 	andi	r3,r2,65535
 101a608:	2005883a 	mov	r2,r4
 101a60c:	10c0002d 	sthio	r3,0(r2)
			record->last_access_date);
		/* Ignore reserved bytes at locations 20 and 21. */
		IOWR_16DIRECT(device_pointer->base, offset + 22,
 101a610:	d0a71c17 	ldw	r2,-25488(gp)
 101a614:	10800a17 	ldw	r2,40(r2)
 101a618:	1007883a 	mov	r3,r2
 101a61c:	e0bffe17 	ldw	r2,-8(fp)
 101a620:	1885883a 	add	r2,r3,r2
 101a624:	11000584 	addi	r4,r2,22
 101a628:	e0bfff17 	ldw	r2,-4(fp)
 101a62c:	1080048b 	ldhu	r2,18(r2)
 101a630:	10ffffcc 	andi	r3,r2,65535
 101a634:	2005883a 	mov	r2,r4
 101a638:	10c0002d 	sthio	r3,0(r2)
			record->last_modified_time);
		IOWR_16DIRECT(device_pointer->base, offset + 24,
 101a63c:	d0a71c17 	ldw	r2,-25488(gp)
 101a640:	10800a17 	ldw	r2,40(r2)
 101a644:	1007883a 	mov	r3,r2
 101a648:	e0bffe17 	ldw	r2,-8(fp)
 101a64c:	1885883a 	add	r2,r3,r2
 101a650:	11000604 	addi	r4,r2,24
 101a654:	e0bfff17 	ldw	r2,-4(fp)
 101a658:	1080050b 	ldhu	r2,20(r2)
 101a65c:	10ffffcc 	andi	r3,r2,65535
 101a660:	2005883a 	mov	r2,r4
 101a664:	10c0002d 	sthio	r3,0(r2)
			record->last_modified_date);
		IOWR_16DIRECT(device_pointer->base, offset + 26,
 101a668:	d0a71c17 	ldw	r2,-25488(gp)
 101a66c:	10800a17 	ldw	r2,40(r2)
 101a670:	1007883a 	mov	r3,r2
 101a674:	e0bffe17 	ldw	r2,-8(fp)
 101a678:	1885883a 	add	r2,r3,r2
 101a67c:	11000684 	addi	r4,r2,26
 101a680:	e0bfff17 	ldw	r2,-4(fp)
 101a684:	1080058b 	ldhu	r2,22(r2)
 101a688:	10ffffcc 	andi	r3,r2,65535
 101a68c:	2005883a 	mov	r2,r4
 101a690:	10c0002d 	sthio	r3,0(r2)
			record->start_cluster_index);
		IOWR_32DIRECT(device_pointer->base, offset + 28,
 101a694:	d0a71c17 	ldw	r2,-25488(gp)
 101a698:	10800a17 	ldw	r2,40(r2)
 101a69c:	1007883a 	mov	r3,r2
 101a6a0:	e0bffe17 	ldw	r2,-8(fp)
 101a6a4:	1885883a 	add	r2,r3,r2
 101a6a8:	11000704 	addi	r4,r2,28
 101a6ac:	e0bfff17 	ldw	r2,-4(fp)
 101a6b0:	10800617 	ldw	r2,24(r2)
 101a6b4:	1007883a 	mov	r3,r2
 101a6b8:	2005883a 	mov	r2,r4
 101a6bc:	10c00035 	stwio	r3,0(r2)
			record->file_size_in_bytes);
		current_sector_modified = true;
 101a6c0:	00800044 	movi	r2,1
 101a6c4:	d0a71d15 	stw	r2,-25484(gp)
		result = true;
 101a6c8:	00800044 	movi	r2,1
 101a6cc:	e0bffd15 	stw	r2,-12(fp)
	}
	return result;
 101a6d0:	e0bffd17 	ldw	r2,-12(fp)
}
 101a6d4:	e037883a 	mov	sp,fp
 101a6d8:	dfc00117 	ldw	ra,4(sp)
 101a6dc:	df000017 	ldw	fp,0(sp)
 101a6e0:	dec00204 	addi	sp,sp,8
 101a6e4:	f800283a 	ret

0101a6e8 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
 101a6e8:	defff904 	addi	sp,sp,-28
 101a6ec:	dfc00615 	stw	ra,24(sp)
 101a6f0:	df000515 	stw	fp,20(sp)
 101a6f4:	df000504 	addi	fp,sp,20
 101a6f8:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
 101a6fc:	e03ffe15 	stw	zero,-8(fp)
	int counter = 0;
 101a700:	e03ffd15 	stw	zero,-12(fp)
	short int end;

	result = Read_Sector_Data_Attempt_CRC(0, FAT_partition_start_sector);
 101a704:	0009883a 	mov	r4,zero
 101a708:	e17fff17 	ldw	r5,-4(fp)
 101a70c:	101e1b80 	call	101e1b8 <Read_Sector_Data_Attempt_CRC>
 101a710:	e0bffe15 	stw	r2,-8(fp)
	end = (short int)IORD_16DIRECT(device_pointer->base, 0x1fe);
 101a714:	d0a71c17 	ldw	r2,-25488(gp)
 101a718:	10800a17 	ldw	r2,40(r2)
 101a71c:	10807f84 	addi	r2,r2,510
 101a720:	1080002b 	ldhuio	r2,0(r2)
 101a724:	e0bffc0d 	sth	r2,-16(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result)) {
 101a728:	e0bffc0f 	ldh	r2,-16(fp)
 101a72c:	10ffffcc 	andi	r3,r2,65535
 101a730:	00aa9554 	movui	r2,43605
 101a734:	1881751e 	bne	r3,r2,101ad0c <Check_for_DOS_FAT+0x624>
 101a738:	e0bffe17 	ldw	r2,-8(fp)
 101a73c:	1005003a 	cmpeq	r2,r2,zero
 101a740:	1001721e 	bne	r2,zero,101ad0c <Check_for_DOS_FAT+0x624>
		int num_clusters = 0;
 101a744:	e03ffb15 	stw	zero,-20(fp)

		boot_sector_data.jump_instruction[0] =
 101a748:	d0a71c17 	ldw	r2,-25488(gp)
 101a74c:	10800a17 	ldw	r2,40(r2)
 101a750:	10800023 	ldbuio	r2,0(r2)
 101a754:	1007883a 	mov	r3,r2
 101a758:	00804234 	movhi	r2,264
 101a75c:	10ac2604 	addi	r2,r2,-20328
 101a760:	10c00005 	stb	r3,0(r2)
			(char)IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] =
 101a764:	d0a71c17 	ldw	r2,-25488(gp)
 101a768:	10800a17 	ldw	r2,40(r2)
 101a76c:	10800044 	addi	r2,r2,1
 101a770:	10800023 	ldbuio	r2,0(r2)
 101a774:	1007883a 	mov	r3,r2
 101a778:	00804234 	movhi	r2,264
 101a77c:	10ac2604 	addi	r2,r2,-20328
 101a780:	10c00045 	stb	r3,1(r2)
			(char)IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] =
 101a784:	d0a71c17 	ldw	r2,-25488(gp)
 101a788:	10800a17 	ldw	r2,40(r2)
 101a78c:	10800084 	addi	r2,r2,2
 101a790:	10800023 	ldbuio	r2,0(r2)
 101a794:	1007883a 	mov	r3,r2
 101a798:	00804234 	movhi	r2,264
 101a79c:	10ac2604 	addi	r2,r2,-20328
 101a7a0:	10c00085 	stb	r3,2(r2)
			(char)IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++) {
 101a7a4:	e03ffd15 	stw	zero,-12(fp)
 101a7a8:	00001006 	br	101a7ec <Check_for_DOS_FAT+0x104>
			boot_sector_data.OEM_name[counter] =
 101a7ac:	e13ffd17 	ldw	r4,-12(fp)
 101a7b0:	d0a71c17 	ldw	r2,-25488(gp)
 101a7b4:	10800a17 	ldw	r2,40(r2)
 101a7b8:	1007883a 	mov	r3,r2
 101a7bc:	e0bffd17 	ldw	r2,-12(fp)
 101a7c0:	1885883a 	add	r2,r3,r2
 101a7c4:	108000c4 	addi	r2,r2,3
 101a7c8:	10800023 	ldbuio	r2,0(r2)
 101a7cc:	1007883a 	mov	r3,r2
 101a7d0:	00804234 	movhi	r2,264
 101a7d4:	10ac2604 	addi	r2,r2,-20328
 101a7d8:	1105883a 	add	r2,r2,r4
 101a7dc:	10c000c5 	stb	r3,3(r2)
			(char)IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] =
			(char)IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] =
			(char)IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++) {
 101a7e0:	e0bffd17 	ldw	r2,-12(fp)
 101a7e4:	10800044 	addi	r2,r2,1
 101a7e8:	e0bffd15 	stw	r2,-12(fp)
 101a7ec:	e0bffd17 	ldw	r2,-12(fp)
 101a7f0:	10800210 	cmplti	r2,r2,8
 101a7f4:	103fed1e 	bne	r2,zero,101a7ac <Check_for_DOS_FAT+0xc4>
			boot_sector_data.OEM_name[counter] =
				(char)IORD_8DIRECT(device_pointer->base, 3 + counter);
		}
		boot_sector_data.sector_size_in_bytes =
 101a7f8:	d0a71c17 	ldw	r2,-25488(gp)
 101a7fc:	10800a17 	ldw	r2,40(r2)
 101a800:	10800304 	addi	r2,r2,12
 101a804:	10800023 	ldbuio	r2,0(r2)
 101a808:	10803fcc 	andi	r2,r2,255
 101a80c:	1004923a 	slli	r2,r2,8
 101a810:	1007883a 	mov	r3,r2
 101a814:	d0a71c17 	ldw	r2,-25488(gp)
 101a818:	10800a17 	ldw	r2,40(r2)
 101a81c:	108002c4 	addi	r2,r2,11
 101a820:	10800023 	ldbuio	r2,0(r2)
 101a824:	10803fcc 	andi	r2,r2,255
 101a828:	1080201c 	xori	r2,r2,128
 101a82c:	10bfe004 	addi	r2,r2,-128
 101a830:	1884b03a 	or	r2,r3,r2
 101a834:	1007883a 	mov	r3,r2
 101a838:	00804234 	movhi	r2,264
 101a83c:	10ac2604 	addi	r2,r2,-20328
 101a840:	10c0030d 	sth	r3,12(r2)
			(((unsigned char)IORD_8DIRECT(device_pointer->base, 12)) << 8)
			| ((char)IORD_8DIRECT(device_pointer->base, 11));
		boot_sector_data.sectors_per_cluster =
 101a844:	d0a71c17 	ldw	r2,-25488(gp)
 101a848:	10800a17 	ldw	r2,40(r2)
 101a84c:	10800344 	addi	r2,r2,13
 101a850:	10800023 	ldbuio	r2,0(r2)
 101a854:	1007883a 	mov	r3,r2
 101a858:	00804234 	movhi	r2,264
 101a85c:	10ac2604 	addi	r2,r2,-20328
 101a860:	10c00385 	stb	r3,14(r2)
			((unsigned char)IORD_8DIRECT(device_pointer->base, 13));
		boot_sector_data.reserved_sectors =
 101a864:	d0a71c17 	ldw	r2,-25488(gp)
 101a868:	10800a17 	ldw	r2,40(r2)
 101a86c:	10800384 	addi	r2,r2,14
 101a870:	1080002b 	ldhuio	r2,0(r2)
 101a874:	1007883a 	mov	r3,r2
 101a878:	00804234 	movhi	r2,264
 101a87c:	10ac2604 	addi	r2,r2,-20328
 101a880:	10c0040d 	sth	r3,16(r2)
			((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
		boot_sector_data.number_of_FATs =
 101a884:	d0a71c17 	ldw	r2,-25488(gp)
 101a888:	10800a17 	ldw	r2,40(r2)
 101a88c:	10800404 	addi	r2,r2,16
 101a890:	10800023 	ldbuio	r2,0(r2)
 101a894:	1007883a 	mov	r3,r2
 101a898:	00804234 	movhi	r2,264
 101a89c:	10ac2604 	addi	r2,r2,-20328
 101a8a0:	10c00485 	stb	r3,18(r2)
			((unsigned char)IORD_8DIRECT(device_pointer->base, 16));
		boot_sector_data.max_number_of_dir_entires =
 101a8a4:	d0a71c17 	ldw	r2,-25488(gp)
 101a8a8:	10800a17 	ldw	r2,40(r2)
 101a8ac:	10800484 	addi	r2,r2,18
 101a8b0:	10800023 	ldbuio	r2,0(r2)
 101a8b4:	10803fcc 	andi	r2,r2,255
 101a8b8:	1004923a 	slli	r2,r2,8
 101a8bc:	1007883a 	mov	r3,r2
 101a8c0:	d0a71c17 	ldw	r2,-25488(gp)
 101a8c4:	10800a17 	ldw	r2,40(r2)
 101a8c8:	10800444 	addi	r2,r2,17
 101a8cc:	10800023 	ldbuio	r2,0(r2)
 101a8d0:	10803fcc 	andi	r2,r2,255
 101a8d4:	1884b03a 	or	r2,r3,r2
 101a8d8:	1007883a 	mov	r3,r2
 101a8dc:	00804234 	movhi	r2,264
 101a8e0:	10ac2604 	addi	r2,r2,-20328
 101a8e4:	10c0050d 	sth	r3,20(r2)
			(((unsigned short int) (((unsigned char)IORD_8DIRECT(device_pointer->base, 18))))
			<< 8)
			| ((unsigned char)IORD_8DIRECT(device_pointer->base, 17));
		boot_sector_data.number_of_sectors_in_partition =
 101a8e8:	d0a71c17 	ldw	r2,-25488(gp)
 101a8ec:	10800a17 	ldw	r2,40(r2)
 101a8f0:	10800504 	addi	r2,r2,20
 101a8f4:	10800023 	ldbuio	r2,0(r2)
 101a8f8:	10803fcc 	andi	r2,r2,255
 101a8fc:	1004923a 	slli	r2,r2,8
 101a900:	1007883a 	mov	r3,r2
 101a904:	d0a71c17 	ldw	r2,-25488(gp)
 101a908:	10800a17 	ldw	r2,40(r2)
 101a90c:	108004c4 	addi	r2,r2,19
 101a910:	10800023 	ldbuio	r2,0(r2)
 101a914:	10803fcc 	andi	r2,r2,255
 101a918:	1884b03a 	or	r2,r3,r2
 101a91c:	1007883a 	mov	r3,r2
 101a920:	00804234 	movhi	r2,264
 101a924:	10ac2604 	addi	r2,r2,-20328
 101a928:	10c0058d 	sth	r3,22(r2)
			(((unsigned short int) (((unsigned char)IORD_8DIRECT(device_pointer->base, 20))))
			<< 8)
			| ((unsigned char)IORD_8DIRECT(device_pointer->base, 19));
		boot_sector_data.media_descriptor =
 101a92c:	d0a71c17 	ldw	r2,-25488(gp)
 101a930:	10800a17 	ldw	r2,40(r2)
 101a934:	10800544 	addi	r2,r2,21
 101a938:	10800023 	ldbuio	r2,0(r2)
 101a93c:	1007883a 	mov	r3,r2
 101a940:	00804234 	movhi	r2,264
 101a944:	10ac2604 	addi	r2,r2,-20328
 101a948:	10c00605 	stb	r3,24(r2)
			((unsigned char)IORD_8DIRECT(device_pointer->base, 21));
		boot_sector_data.number_of_sectors_per_table =
 101a94c:	d0a71c17 	ldw	r2,-25488(gp)
 101a950:	10800a17 	ldw	r2,40(r2)
 101a954:	10800584 	addi	r2,r2,22
 101a958:	1080002b 	ldhuio	r2,0(r2)
 101a95c:	1007883a 	mov	r3,r2
 101a960:	00804234 	movhi	r2,264
 101a964:	10ac2604 	addi	r2,r2,-20328
 101a968:	10c0068d 	sth	r3,26(r2)
			((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
		boot_sector_data.number_of_sectors_per_track =
 101a96c:	d0a71c17 	ldw	r2,-25488(gp)
 101a970:	10800a17 	ldw	r2,40(r2)
 101a974:	10800604 	addi	r2,r2,24
 101a978:	1080002b 	ldhuio	r2,0(r2)
 101a97c:	1007883a 	mov	r3,r2
 101a980:	00804234 	movhi	r2,264
 101a984:	10ac2604 	addi	r2,r2,-20328
 101a988:	10c0070d 	sth	r3,28(r2)
			((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
		boot_sector_data.number_of_heads =
 101a98c:	d0a71c17 	ldw	r2,-25488(gp)
 101a990:	10800a17 	ldw	r2,40(r2)
 101a994:	10800684 	addi	r2,r2,26
 101a998:	1080002b 	ldhuio	r2,0(r2)
 101a99c:	1007883a 	mov	r3,r2
 101a9a0:	00804234 	movhi	r2,264
 101a9a4:	10ac2604 	addi	r2,r2,-20328
 101a9a8:	10c0078d 	sth	r3,30(r2)
			((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
		boot_sector_data.number_of_hidden_sectors =
 101a9ac:	d0a71c17 	ldw	r2,-25488(gp)
 101a9b0:	10800a17 	ldw	r2,40(r2)
 101a9b4:	10800704 	addi	r2,r2,28
 101a9b8:	10800037 	ldwio	r2,0(r2)
 101a9bc:	1007883a 	mov	r3,r2
 101a9c0:	00804234 	movhi	r2,264
 101a9c4:	10ac2604 	addi	r2,r2,-20328
 101a9c8:	10c00815 	stw	r3,32(r2)
			((unsigned int)IORD_32DIRECT(device_pointer->base, 28));
		boot_sector_data.total_sector_count_if_above_32MB =
 101a9cc:	d0a71c17 	ldw	r2,-25488(gp)
 101a9d0:	10800a17 	ldw	r2,40(r2)
 101a9d4:	10800804 	addi	r2,r2,32
 101a9d8:	10800037 	ldwio	r2,0(r2)
 101a9dc:	1007883a 	mov	r3,r2
 101a9e0:	00804234 	movhi	r2,264
 101a9e4:	10ac2604 	addi	r2,r2,-20328
 101a9e8:	10c00915 	stw	r3,36(r2)
			((unsigned int)IORD_32DIRECT(device_pointer->base, 32));
		boot_sector_data.drive_number =
 101a9ec:	d0a71c17 	ldw	r2,-25488(gp)
 101a9f0:	10800a17 	ldw	r2,40(r2)
 101a9f4:	10800904 	addi	r2,r2,36
 101a9f8:	10800023 	ldbuio	r2,0(r2)
 101a9fc:	1007883a 	mov	r3,r2
 101aa00:	00804234 	movhi	r2,264
 101aa04:	10ac2604 	addi	r2,r2,-20328
 101aa08:	10c00a05 	stb	r3,40(r2)
			((unsigned char)IORD_8DIRECT(device_pointer->base, 36));
		boot_sector_data.current_head =
 101aa0c:	d0a71c17 	ldw	r2,-25488(gp)
 101aa10:	10800a17 	ldw	r2,40(r2)
 101aa14:	10800944 	addi	r2,r2,37
 101aa18:	10800023 	ldbuio	r2,0(r2)
 101aa1c:	1007883a 	mov	r3,r2
 101aa20:	00804234 	movhi	r2,264
 101aa24:	10ac2604 	addi	r2,r2,-20328
 101aa28:	10c00a45 	stb	r3,41(r2)
			((unsigned char)IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature =
 101aa2c:	d0a71c17 	ldw	r2,-25488(gp)
 101aa30:	10800a17 	ldw	r2,40(r2)
 101aa34:	10800984 	addi	r2,r2,38
 101aa38:	10800023 	ldbuio	r2,0(r2)
 101aa3c:	1007883a 	mov	r3,r2
 101aa40:	00804234 	movhi	r2,264
 101aa44:	10ac2604 	addi	r2,r2,-20328
 101aa48:	10c00a85 	stb	r3,42(r2)
			((unsigned char)IORD_8DIRECT(device_pointer->base, 38));
		boot_sector_data.first_fat_sector_offset =
 101aa4c:	00804234 	movhi	r2,264
 101aa50:	10ac2604 	addi	r2,r2,-20328
 101aa54:	1080040b 	ldhu	r2,16(r2)
 101aa58:	10ffffcc 	andi	r3,r2,65535
 101aa5c:	00804234 	movhi	r2,264
 101aa60:	10ac2604 	addi	r2,r2,-20328
 101aa64:	10c01115 	stw	r3,68(r2)
			boot_sector_data.reserved_sectors;
		boot_sector_data.second_fat_sector_offset =
 101aa68:	00804234 	movhi	r2,264
 101aa6c:	10ac2604 	addi	r2,r2,-20328
 101aa70:	10c01117 	ldw	r3,68(r2)
 101aa74:	00804234 	movhi	r2,264
 101aa78:	10ac2604 	addi	r2,r2,-20328
 101aa7c:	1080068b 	ldhu	r2,26(r2)
 101aa80:	10bfffcc 	andi	r2,r2,65535
 101aa84:	1887883a 	add	r3,r3,r2
 101aa88:	00804234 	movhi	r2,264
 101aa8c:	10ac2604 	addi	r2,r2,-20328
 101aa90:	10c01215 	stw	r3,72(r2)
			boot_sector_data.first_fat_sector_offset
			+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.root_directory_sector_offset =
 101aa94:	00804234 	movhi	r2,264
 101aa98:	10ac2604 	addi	r2,r2,-20328
 101aa9c:	10c01217 	ldw	r3,72(r2)
 101aaa0:	00804234 	movhi	r2,264
 101aaa4:	10ac2604 	addi	r2,r2,-20328
 101aaa8:	1080068b 	ldhu	r2,26(r2)
 101aaac:	10bfffcc 	andi	r2,r2,65535
 101aab0:	1887883a 	add	r3,r3,r2
 101aab4:	00804234 	movhi	r2,264
 101aab8:	10ac2604 	addi	r2,r2,-20328
 101aabc:	10c01315 	stw	r3,76(r2)
			boot_sector_data.second_fat_sector_offset
			+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.data_sector_offset =
 101aac0:	00804234 	movhi	r2,264
 101aac4:	10ac2604 	addi	r2,r2,-20328
 101aac8:	11001317 	ldw	r4,76(r2)
 101aacc:	00804234 	movhi	r2,264
 101aad0:	10ac2604 	addi	r2,r2,-20328
 101aad4:	1080050b 	ldhu	r2,20(r2)
 101aad8:	10bfffcc 	andi	r2,r2,65535
 101aadc:	1006917a 	slli	r3,r2,5
 101aae0:	00804234 	movhi	r2,264
 101aae4:	10ac2604 	addi	r2,r2,-20328
 101aae8:	1080030b 	ldhu	r2,12(r2)
 101aaec:	10bfffcc 	andi	r2,r2,65535
 101aaf0:	1885283a 	div	r2,r3,r2
 101aaf4:	2087883a 	add	r3,r4,r2
 101aaf8:	00804234 	movhi	r2,264
 101aafc:	10ac2604 	addi	r2,r2,-20328
 101ab00:	10c01415 	stw	r3,80(r2)
			boot_sector_data.root_directory_sector_offset
			+ (32 * boot_sector_data.max_number_of_dir_entires
			/ boot_sector_data.sector_size_in_bytes);

		if (boot_sector_data.number_of_sectors_in_partition > 0) {
 101ab04:	00804234 	movhi	r2,264
 101ab08:	10ac2604 	addi	r2,r2,-20328
 101ab0c:	1080058b 	ldhu	r2,22(r2)
 101ab10:	10bfffcc 	andi	r2,r2,65535
 101ab14:	1005003a 	cmpeq	r2,r2,zero
 101ab18:	10000b1e 	bne	r2,zero,101ab48 <Check_for_DOS_FAT+0x460>
			num_clusters = (boot_sector_data.number_of_sectors_in_partition
 101ab1c:	00804234 	movhi	r2,264
 101ab20:	10ac2604 	addi	r2,r2,-20328
 101ab24:	1080058b 	ldhu	r2,22(r2)
 101ab28:	10ffffcc 	andi	r3,r2,65535
 101ab2c:	00804234 	movhi	r2,264
 101ab30:	10ac2604 	addi	r2,r2,-20328
 101ab34:	10800383 	ldbu	r2,14(r2)
 101ab38:	10803fcc 	andi	r2,r2,255
 101ab3c:	1885283a 	div	r2,r3,r2
 101ab40:	e0bffb15 	stw	r2,-20(fp)
 101ab44:	00000906 	br	101ab6c <Check_for_DOS_FAT+0x484>
				/ boot_sector_data.sectors_per_cluster);
		}
		else {
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB
 101ab48:	00804234 	movhi	r2,264
 101ab4c:	10ac2604 	addi	r2,r2,-20328
 101ab50:	10c00917 	ldw	r3,36(r2)
 101ab54:	00804234 	movhi	r2,264
 101ab58:	10ac2604 	addi	r2,r2,-20328
 101ab5c:	10800383 	ldbu	r2,14(r2)
 101ab60:	10803fcc 	andi	r2,r2,255
 101ab64:	1885203a 	divu	r2,r3,r2
 101ab68:	e0bffb15 	stw	r2,-20(fp)
				/ boot_sector_data.sectors_per_cluster);
		}
		if (num_clusters < 4087) {
 101ab6c:	e0bffb17 	ldw	r2,-20(fp)
 101ab70:	1083fdc8 	cmpgei	r2,r2,4087
 101ab74:	1000051e 	bne	r2,zero,101ab8c <Check_for_DOS_FAT+0x4a4>
			boot_sector_data.bits_for_cluster_index = 12;
 101ab78:	00c04234 	movhi	r3,264
 101ab7c:	18ec2604 	addi	r3,r3,-20328
 101ab80:	00800304 	movi	r2,12
 101ab84:	18801085 	stb	r2,66(r3)
 101ab88:	00000c06 	br	101abbc <Check_for_DOS_FAT+0x4d4>
		}
		else if (num_clusters <= 65517) {
 101ab8c:	e0fffb17 	ldw	r3,-20(fp)
 101ab90:	00bffb54 	movui	r2,65517
 101ab94:	10c00516 	blt	r2,r3,101abac <Check_for_DOS_FAT+0x4c4>
			boot_sector_data.bits_for_cluster_index = 16;
 101ab98:	00c04234 	movhi	r3,264
 101ab9c:	18ec2604 	addi	r3,r3,-20328
 101aba0:	00800404 	movi	r2,16
 101aba4:	18801085 	stb	r2,66(r3)
 101aba8:	00000406 	br	101abbc <Check_for_DOS_FAT+0x4d4>
		}
		else {
			boot_sector_data.bits_for_cluster_index = 32;
 101abac:	00c04234 	movhi	r3,264
 101abb0:	18ec2604 	addi	r3,r3,-20328
 101abb4:	00800804 	movi	r2,32
 101abb8:	18801085 	stb	r2,66(r3)
		}

		for (counter = 0; counter < 4; counter++) {
 101abbc:	e03ffd15 	stw	zero,-12(fp)
 101abc0:	00001106 	br	101ac08 <Check_for_DOS_FAT+0x520>
			boot_sector_data.volume_id[counter] =
 101abc4:	e13ffd17 	ldw	r4,-12(fp)
 101abc8:	d0a71c17 	ldw	r2,-25488(gp)
 101abcc:	10800a17 	ldw	r2,40(r2)
 101abd0:	1007883a 	mov	r3,r2
 101abd4:	e0bffd17 	ldw	r2,-12(fp)
 101abd8:	1885883a 	add	r2,r3,r2
 101abdc:	108009c4 	addi	r2,r2,39
 101abe0:	10800023 	ldbuio	r2,0(r2)
 101abe4:	1007883a 	mov	r3,r2
 101abe8:	00804234 	movhi	r2,264
 101abec:	10ac2604 	addi	r2,r2,-20328
 101abf0:	2085883a 	add	r2,r4,r2
 101abf4:	10800a04 	addi	r2,r2,40
 101abf8:	10c000c5 	stb	r3,3(r2)
		}
		else {
			boot_sector_data.bits_for_cluster_index = 32;
		}

		for (counter = 0; counter < 4; counter++) {
 101abfc:	e0bffd17 	ldw	r2,-12(fp)
 101ac00:	10800044 	addi	r2,r2,1
 101ac04:	e0bffd15 	stw	r2,-12(fp)
 101ac08:	e0bffd17 	ldw	r2,-12(fp)
 101ac0c:	10800110 	cmplti	r2,r2,4
 101ac10:	103fec1e 	bne	r2,zero,101abc4 <Check_for_DOS_FAT+0x4dc>
			boot_sector_data.volume_id[counter] =
				((char)IORD_8DIRECT(device_pointer->base, 39 + counter));
		}
		for (counter = 0; counter < 11; counter++) {
 101ac14:	e03ffd15 	stw	zero,-12(fp)
 101ac18:	00001106 	br	101ac60 <Check_for_DOS_FAT+0x578>
			boot_sector_data.volume_label[counter] =
 101ac1c:	e13ffd17 	ldw	r4,-12(fp)
 101ac20:	d0a71c17 	ldw	r2,-25488(gp)
 101ac24:	10800a17 	ldw	r2,40(r2)
 101ac28:	1007883a 	mov	r3,r2
 101ac2c:	e0bffd17 	ldw	r2,-12(fp)
 101ac30:	1885883a 	add	r2,r3,r2
 101ac34:	10800ac4 	addi	r2,r2,43
 101ac38:	10800023 	ldbuio	r2,0(r2)
 101ac3c:	1007883a 	mov	r3,r2
 101ac40:	00804234 	movhi	r2,264
 101ac44:	10ac2604 	addi	r2,r2,-20328
 101ac48:	2085883a 	add	r2,r4,r2
 101ac4c:	10800b04 	addi	r2,r2,44
 101ac50:	10c000c5 	stb	r3,3(r2)

		for (counter = 0; counter < 4; counter++) {
			boot_sector_data.volume_id[counter] =
				((char)IORD_8DIRECT(device_pointer->base, 39 + counter));
		}
		for (counter = 0; counter < 11; counter++) {
 101ac54:	e0bffd17 	ldw	r2,-12(fp)
 101ac58:	10800044 	addi	r2,r2,1
 101ac5c:	e0bffd15 	stw	r2,-12(fp)
 101ac60:	e0bffd17 	ldw	r2,-12(fp)
 101ac64:	108002d0 	cmplti	r2,r2,11
 101ac68:	103fec1e 	bne	r2,zero,101ac1c <Check_for_DOS_FAT+0x534>
			boot_sector_data.volume_label[counter] =
				((char)IORD_8DIRECT(device_pointer->base, 43 + counter));
		}
		for (counter = 0; counter < 8; counter++) {
 101ac6c:	e03ffd15 	stw	zero,-12(fp)
 101ac70:	00001106 	br	101acb8 <Check_for_DOS_FAT+0x5d0>
			boot_sector_data.file_system_type[counter] =
 101ac74:	e13ffd17 	ldw	r4,-12(fp)
 101ac78:	d0a71c17 	ldw	r2,-25488(gp)
 101ac7c:	10800a17 	ldw	r2,40(r2)
 101ac80:	1007883a 	mov	r3,r2
 101ac84:	e0bffd17 	ldw	r2,-12(fp)
 101ac88:	1885883a 	add	r2,r3,r2
 101ac8c:	10800d84 	addi	r2,r2,54
 101ac90:	10800023 	ldbuio	r2,0(r2)
 101ac94:	1007883a 	mov	r3,r2
 101ac98:	00804234 	movhi	r2,264
 101ac9c:	10ac2604 	addi	r2,r2,-20328
 101aca0:	2085883a 	add	r2,r4,r2
 101aca4:	10800e04 	addi	r2,r2,56
 101aca8:	10c00085 	stb	r3,2(r2)
		}
		for (counter = 0; counter < 11; counter++) {
			boot_sector_data.volume_label[counter] =
				((char)IORD_8DIRECT(device_pointer->base, 43 + counter));
		}
		for (counter = 0; counter < 8; counter++) {
 101acac:	e0bffd17 	ldw	r2,-12(fp)
 101acb0:	10800044 	addi	r2,r2,1
 101acb4:	e0bffd15 	stw	r2,-12(fp)
 101acb8:	e0bffd17 	ldw	r2,-12(fp)
 101acbc:	10800210 	cmplti	r2,r2,8
 101acc0:	103fec1e 	bne	r2,zero,101ac74 <Check_for_DOS_FAT+0x58c>
			boot_sector_data.file_system_type[counter] =
				((char)IORD_8DIRECT(device_pointer->base, 54 + counter));
		}
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
 101acc4:	e03ffd15 	stw	zero,-12(fp)
 101acc8:	00000a06 	br	101acf4 <Check_for_DOS_FAT+0x60c>
			active_files[counter].in_use = false;
 101accc:	e0bffd17 	ldw	r2,-12(fp)
 101acd0:	00c04234 	movhi	r3,264
 101acd4:	18ec3b04 	addi	r3,r3,-20244
 101acd8:	100491ba 	slli	r2,r2,6
 101acdc:	10c5883a 	add	r2,r2,r3
 101ace0:	10800f04 	addi	r2,r2,60
 101ace4:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++) {
			boot_sector_data.file_system_type[counter] =
				((char)IORD_8DIRECT(device_pointer->base, 54 + counter));
		}
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
 101ace8:	e0bffd17 	ldw	r2,-12(fp)
 101acec:	10800044 	addi	r2,r2,1
 101acf0:	e0bffd15 	stw	r2,-12(fp)
 101acf4:	e0bffd17 	ldw	r2,-12(fp)
 101acf8:	10800510 	cmplti	r2,r2,20
 101acfc:	103ff31e 	bne	r2,zero,101accc <Check_for_DOS_FAT+0x5e4>
			active_files[counter].in_use = false;
		}
		result = true;
 101ad00:	00800044 	movi	r2,1
 101ad04:	e0bffe15 	stw	r2,-8(fp)
	int counter = 0;
	short int end;

	result = Read_Sector_Data_Attempt_CRC(0, FAT_partition_start_sector);
	end = (short int)IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result)) {
 101ad08:	00000106 	br	101ad10 <Check_for_DOS_FAT+0x628>
			active_files[counter].in_use = false;
		}
		result = true;
	}
	else {
		result = false;
 101ad0c:	e03ffe15 	stw	zero,-8(fp)
	}
	return result;
 101ad10:	e0bffe17 	ldw	r2,-8(fp)
}
 101ad14:	e037883a 	mov	sp,fp
 101ad18:	dfc00117 	ldw	ra,4(sp)
 101ad1c:	df000017 	ldw	fp,0(sp)
 101ad20:	dec00204 	addi	sp,sp,8
 101ad24:	f800283a 	ret

0101ad28 <Look_for_FAT16>:

bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
 101ad28:	defffc04 	addi	sp,sp,-16
 101ad2c:	dfc00315 	stw	ra,12(sp)
 101ad30:	df000215 	stw	fp,8(sp)
 101ad34:	df000204 	addi	fp,sp,8
	bool result = false;
 101ad38:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present()) {
 101ad3c:	101ca700 	call	101ca70 <alt_up_sd_card_is_Present>
 101ad40:	1005003a 	cmpeq	r2,r2,zero
 101ad44:	1000331e 	bne	r2,zero,101ae14 <Look_for_FAT16+0xec>
		Read_Sector_Data_Attempt_CRC(0, 0);
 101ad48:	0009883a 	mov	r4,zero
 101ad4c:	000b883a 	mov	r5,zero
 101ad50:	101e1b80 	call	101e1b8 <Read_Sector_Data_Attempt_CRC>

		short int csd_file_format = *CSD_register_w0;
 101ad54:	d0a71617 	ldw	r2,-25512(gp)
 101ad58:	1080000b 	ldhu	r2,0(r2)
 101ad5c:	e0bffe0d 	sth	r2,-8(fp)

		fat_partition_offset_in_512_byte_sectors = 0;
 101ad60:	d0271a15 	stw	zero,-25496(gp)
		fat_partition_size_in_512_byte_sectors = 0;
 101ad64:	d0271b15 	stw	zero,-25492(gp)

		if (((csd_file_format & 0x8000) == 0)
 101ad68:	e0bffe0f 	ldh	r2,-8(fp)
 101ad6c:	1004803a 	cmplt	r2,r2,zero
 101ad70:	1000281e 	bne	r2,zero,101ae14 <Look_for_FAT16+0xec>
 101ad74:	e0bffe0b 	ldhu	r2,-8(fp)
 101ad78:	10bfffcc 	andi	r2,r2,65535
 101ad7c:	1083000c 	andi	r2,r2,3072
 101ad80:	10830020 	cmpeqi	r2,r2,3072
 101ad84:	1000231e 	bne	r2,zero,101ae14 <Look_for_FAT16+0xec>
			&& ((csd_file_format & 0x0c00) != 0x0c00)) {
			if ((csd_file_format & 0x0c00) == 0x0400) {
 101ad88:	e0bffe0b 	ldhu	r2,-8(fp)
 101ad8c:	10bfffcc 	andi	r2,r2,65535
 101ad90:	1083000c 	andi	r2,r2,3072
 101ad94:	10810018 	cmpnei	r2,r2,1024
 101ad98:	1000031e 	bne	r2,zero,101ada8 <Look_for_FAT16+0x80>
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
 101ad9c:	0009883a 	mov	r4,zero
 101ada0:	101a6e80 	call	101a6e8 <Check_for_DOS_FAT>
 101ada4:	e0bfff15 	stw	r2,-4(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000) {
 101ada8:	e0bffe0b 	ldhu	r2,-8(fp)
 101adac:	10bfffcc 	andi	r2,r2,65535
 101adb0:	1083000c 	andi	r2,r2,3072
 101adb4:	1004c03a 	cmpne	r2,r2,zero
 101adb8:	1000061e 	bne	r2,zero,101add4 <Look_for_FAT16+0xac>
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record()) {
 101adbc:	1019ffc0 	call	1019ffc <Check_for_Master_Boot_Record>
 101adc0:	1005003a 	cmpeq	r2,r2,zero
 101adc4:	1000031e 	bne	r2,zero,101add4 <Look_for_FAT16+0xac>
					result = Check_for_DOS_FAT(
 101adc8:	d1271a17 	ldw	r4,-25496(gp)
 101adcc:	101a6e80 	call	101a6e8 <Check_for_DOS_FAT>
 101add0:	e0bfff15 	stw	r2,-4(fp)
						fat_partition_offset_in_512_byte_sectors);
				}
			}
			if (result == true) {
 101add4:	e0bfff17 	ldw	r2,-4(fp)
 101add8:	10800058 	cmpnei	r2,r2,1
 101addc:	10000d1e 	bne	r2,zero,101ae14 <Look_for_FAT16+0xec>
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16) {
 101ade0:	00804234 	movhi	r2,264
 101ade4:	10ac2604 	addi	r2,r2,-20328
 101ade8:	10801083 	ldbu	r2,66(r2)
 101adec:	10803fcc 	andi	r2,r2,255
 101adf0:	10800420 	cmpeqi	r2,r2,16
 101adf4:	1000021e 	bne	r2,zero,101ae00 <Look_for_FAT16+0xd8>
					result = false;
 101adf8:	e03fff15 	stw	zero,-4(fp)
 101adfc:	00000506 	br	101ae14 <Look_for_FAT16+0xec>
				}
				else {
					fat_partition_size_in_512_byte_sectors =
 101ae00:	00804234 	movhi	r2,264
 101ae04:	10ac2604 	addi	r2,r2,-20328
 101ae08:	1080058b 	ldhu	r2,22(r2)
 101ae0c:	10bfffcc 	andi	r2,r2,65535
 101ae10:	d0a71b15 	stw	r2,-25492(gp)
						boot_sector_data.number_of_sectors_in_partition;
				}
			}
		}
	}
	return result;
 101ae14:	e0bfff17 	ldw	r2,-4(fp)
}
 101ae18:	e037883a 	mov	sp,fp
 101ae1c:	dfc00117 	ldw	ra,4(sp)
 101ae20:	df000017 	ldw	fp,0(sp)
 101ae24:	dec00204 	addi	sp,sp,8
 101ae28:	f800283a 	ret

0101ae2c <filename_to_upper_case>:

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
 101ae2c:	defffb04 	addi	sp,sp,-20
 101ae30:	dfc00415 	stw	ra,16(sp)
 101ae34:	df000315 	stw	fp,12(sp)
 101ae38:	df000304 	addi	fp,sp,12
 101ae3c:	e13fff15 	stw	r4,-4(fp)
	int index;
	int length = strlen(file_name);
 101ae40:	e13fff17 	ldw	r4,-4(fp)
 101ae44:	100e3080 	call	100e308 <strlen>
 101ae48:	e0bffd15 	stw	r2,-12(fp)

	for (index = 0; index < length; index++) {
 101ae4c:	e03ffe15 	stw	zero,-8(fp)
 101ae50:	00002206 	br	101aedc <filename_to_upper_case+0xb0>
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
 101ae54:	e0bffe17 	ldw	r2,-8(fp)
 101ae58:	1007883a 	mov	r3,r2
 101ae5c:	e0bfff17 	ldw	r2,-4(fp)
 101ae60:	1885883a 	add	r2,r3,r2
 101ae64:	10800003 	ldbu	r2,0(r2)
 101ae68:	10803fcc 	andi	r2,r2,255
 101ae6c:	1080201c 	xori	r2,r2,128
 101ae70:	10bfe004 	addi	r2,r2,-128
 101ae74:	10801850 	cmplti	r2,r2,97
 101ae78:	1000151e 	bne	r2,zero,101aed0 <filename_to_upper_case+0xa4>
 101ae7c:	e0bffe17 	ldw	r2,-8(fp)
 101ae80:	1007883a 	mov	r3,r2
 101ae84:	e0bfff17 	ldw	r2,-4(fp)
 101ae88:	1885883a 	add	r2,r3,r2
 101ae8c:	10800003 	ldbu	r2,0(r2)
 101ae90:	10803fcc 	andi	r2,r2,255
 101ae94:	1080201c 	xori	r2,r2,128
 101ae98:	10bfe004 	addi	r2,r2,-128
 101ae9c:	10801ec8 	cmpgei	r2,r2,123
 101aea0:	10000b1e 	bne	r2,zero,101aed0 <filename_to_upper_case+0xa4>
			file_name[index] = (file_name[index] - 'a') + 'A';
 101aea4:	e0bffe17 	ldw	r2,-8(fp)
 101aea8:	1007883a 	mov	r3,r2
 101aeac:	e0bfff17 	ldw	r2,-4(fp)
 101aeb0:	1889883a 	add	r4,r3,r2
 101aeb4:	e0bffe17 	ldw	r2,-8(fp)
 101aeb8:	1007883a 	mov	r3,r2
 101aebc:	e0bfff17 	ldw	r2,-4(fp)
 101aec0:	1885883a 	add	r2,r3,r2
 101aec4:	10800003 	ldbu	r2,0(r2)
 101aec8:	10bff804 	addi	r2,r2,-32
 101aecc:	20800005 	stb	r2,0(r4)
// Change file name to upper case.
{
	int index;
	int length = strlen(file_name);

	for (index = 0; index < length; index++) {
 101aed0:	e0bffe17 	ldw	r2,-8(fp)
 101aed4:	10800044 	addi	r2,r2,1
 101aed8:	e0bffe15 	stw	r2,-8(fp)
 101aedc:	e0fffe17 	ldw	r3,-8(fp)
 101aee0:	e0bffd17 	ldw	r2,-12(fp)
 101aee4:	18bfdb16 	blt	r3,r2,101ae54 <filename_to_upper_case+0x28>
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
			file_name[index] = (file_name[index] - 'a') + 'A';
		}
	}
}
 101aee8:	e037883a 	mov	sp,fp
 101aeec:	dfc00117 	ldw	ra,4(sp)
 101aef0:	df000017 	ldw	fp,0(sp)
 101aef4:	dec00204 	addi	sp,sp,8
 101aef8:	f800283a 	ret

0101aefc <check_file_name_for_FAT16_compliance>:

bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
 101aefc:	defff804 	addi	sp,sp,-32
 101af00:	dfc00715 	stw	ra,28(sp)
 101af04:	df000615 	stw	fp,24(sp)
 101af08:	df000604 	addi	fp,sp,24
 101af0c:	e13fff15 	stw	r4,-4(fp)
	int length = strlen(file_name);
 101af10:	e13fff17 	ldw	r4,-4(fp)
 101af14:	100e3080 	call	100e308 <strlen>
 101af18:	e0bffe15 	stw	r2,-8(fp)
	int index;
	int last_dir_break_position = -1;
 101af1c:	00bfffc4 	movi	r2,-1
 101af20:	e0bffc15 	stw	r2,-16(fp)
	int last_period = -1;
 101af24:	00bfffc4 	movi	r2,-1
 101af28:	e0bffb15 	stw	r2,-20(fp)
	bool result = true;
 101af2c:	00800044 	movi	r2,1
 101af30:	e0bffa15 	stw	r2,-24(fp)

	for (index = 0; index < length; index++) {
 101af34:	e03ffd15 	stw	zero,-12(fp)
 101af38:	00007606 	br	101b114 <check_file_name_for_FAT16_compliance+0x218>
		if ((file_name[index] == ' ')
 101af3c:	e0bffd17 	ldw	r2,-12(fp)
 101af40:	1007883a 	mov	r3,r2
 101af44:	e0bfff17 	ldw	r2,-4(fp)
 101af48:	1885883a 	add	r2,r3,r2
 101af4c:	10800003 	ldbu	r2,0(r2)
 101af50:	10803fcc 	andi	r2,r2,255
 101af54:	1080201c 	xori	r2,r2,128
 101af58:	10bfe004 	addi	r2,r2,-128
 101af5c:	10800820 	cmpeqi	r2,r2,32
 101af60:	1000431e 	bne	r2,zero,101b070 <check_file_name_for_FAT16_compliance+0x174>
 101af64:	e0bffd17 	ldw	r2,-12(fp)
 101af68:	10ffffc4 	addi	r3,r2,-1
 101af6c:	e0bffc17 	ldw	r2,-16(fp)
 101af70:	1880141e 	bne	r3,r2,101afc4 <check_file_name_for_FAT16_compliance+0xc8>
 101af74:	e0bffd17 	ldw	r2,-12(fp)
 101af78:	1007883a 	mov	r3,r2
 101af7c:	e0bfff17 	ldw	r2,-4(fp)
 101af80:	1885883a 	add	r2,r3,r2
 101af84:	10800003 	ldbu	r2,0(r2)
 101af88:	10803fcc 	andi	r2,r2,255
 101af8c:	1080201c 	xori	r2,r2,128
 101af90:	10bfe004 	addi	r2,r2,-128
 101af94:	10801720 	cmpeqi	r2,r2,92
 101af98:	1000351e 	bne	r2,zero,101b070 <check_file_name_for_FAT16_compliance+0x174>
 101af9c:	e0bffd17 	ldw	r2,-12(fp)
 101afa0:	1007883a 	mov	r3,r2
 101afa4:	e0bfff17 	ldw	r2,-4(fp)
 101afa8:	1885883a 	add	r2,r3,r2
 101afac:	10800003 	ldbu	r2,0(r2)
 101afb0:	10803fcc 	andi	r2,r2,255
 101afb4:	1080201c 	xori	r2,r2,128
 101afb8:	10bfe004 	addi	r2,r2,-128
 101afbc:	10800be0 	cmpeqi	r2,r2,47
 101afc0:	10002b1e 	bne	r2,zero,101b070 <check_file_name_for_FAT16_compliance+0x174>
 101afc4:	e0fffd17 	ldw	r3,-12(fp)
 101afc8:	e0bffb17 	ldw	r2,-20(fp)
 101afcc:	1885c83a 	sub	r2,r3,r2
 101afd0:	10800258 	cmpnei	r2,r2,9
 101afd4:	10000a1e 	bne	r2,zero,101b000 <check_file_name_for_FAT16_compliance+0x104>
 101afd8:	e0bffd17 	ldw	r2,-12(fp)
 101afdc:	1007883a 	mov	r3,r2
 101afe0:	e0bfff17 	ldw	r2,-4(fp)
 101afe4:	1885883a 	add	r2,r3,r2
 101afe8:	10800003 	ldbu	r2,0(r2)
 101afec:	10803fcc 	andi	r2,r2,255
 101aff0:	1080201c 	xori	r2,r2,128
 101aff4:	10bfe004 	addi	r2,r2,-128
 101aff8:	10800b98 	cmpnei	r2,r2,46
 101affc:	10001c1e 	bne	r2,zero,101b070 <check_file_name_for_FAT16_compliance+0x174>
 101b000:	e0fffc17 	ldw	r3,-16(fp)
 101b004:	e0bffb17 	ldw	r2,-20(fp)
 101b008:	18801b26 	beq	r3,r2,101b078 <check_file_name_for_FAT16_compliance+0x17c>
 101b00c:	e0fffd17 	ldw	r3,-12(fp)
 101b010:	e0bffb17 	ldw	r2,-20(fp)
 101b014:	1885c83a 	sub	r2,r3,r2
 101b018:	10800110 	cmplti	r2,r2,4
 101b01c:	1000161e 	bne	r2,zero,101b078 <check_file_name_for_FAT16_compliance+0x17c>
 101b020:	e0bffd17 	ldw	r2,-12(fp)
 101b024:	1007883a 	mov	r3,r2
 101b028:	e0bfff17 	ldw	r2,-4(fp)
 101b02c:	1885883a 	add	r2,r3,r2
 101b030:	10800003 	ldbu	r2,0(r2)
 101b034:	10803fcc 	andi	r2,r2,255
 101b038:	1080201c 	xori	r2,r2,128
 101b03c:	10bfe004 	addi	r2,r2,-128
 101b040:	10801720 	cmpeqi	r2,r2,92
 101b044:	10000c1e 	bne	r2,zero,101b078 <check_file_name_for_FAT16_compliance+0x17c>
 101b048:	e0bffd17 	ldw	r2,-12(fp)
 101b04c:	1007883a 	mov	r3,r2
 101b050:	e0bfff17 	ldw	r2,-4(fp)
 101b054:	1885883a 	add	r2,r3,r2
 101b058:	10800003 	ldbu	r2,0(r2)
 101b05c:	10803fcc 	andi	r2,r2,255
 101b060:	1080201c 	xori	r2,r2,128
 101b064:	10bfe004 	addi	r2,r2,-128
 101b068:	10800be0 	cmpeqi	r2,r2,47
 101b06c:	1000021e 	bne	r2,zero,101b078 <check_file_name_for_FAT16_compliance+0x17c>
			|| ((index - last_period == 9) && (file_name[index] != '.'))
			|| ((last_dir_break_position != last_period)
			&& (index - last_period > 3)
			&& (file_name[index] != '\\')
			&& (file_name[index] != '/'))) {
			result = false;
 101b070:	e03ffa15 	stw	zero,-24(fp)
			break;
 101b074:	00002a06 	br	101b120 <check_file_name_for_FAT16_compliance+0x224>
		}
		if ((file_name[index] == '\\') || (file_name[index] == '/')) {
 101b078:	e0bffd17 	ldw	r2,-12(fp)
 101b07c:	1007883a 	mov	r3,r2
 101b080:	e0bfff17 	ldw	r2,-4(fp)
 101b084:	1885883a 	add	r2,r3,r2
 101b088:	10800003 	ldbu	r2,0(r2)
 101b08c:	10803fcc 	andi	r2,r2,255
 101b090:	1080201c 	xori	r2,r2,128
 101b094:	10bfe004 	addi	r2,r2,-128
 101b098:	10801720 	cmpeqi	r2,r2,92
 101b09c:	10000a1e 	bne	r2,zero,101b0c8 <check_file_name_for_FAT16_compliance+0x1cc>
 101b0a0:	e0bffd17 	ldw	r2,-12(fp)
 101b0a4:	1007883a 	mov	r3,r2
 101b0a8:	e0bfff17 	ldw	r2,-4(fp)
 101b0ac:	1885883a 	add	r2,r3,r2
 101b0b0:	10800003 	ldbu	r2,0(r2)
 101b0b4:	10803fcc 	andi	r2,r2,255
 101b0b8:	1080201c 	xori	r2,r2,128
 101b0bc:	10bfe004 	addi	r2,r2,-128
 101b0c0:	10800bd8 	cmpnei	r2,r2,47
 101b0c4:	1000041e 	bne	r2,zero,101b0d8 <check_file_name_for_FAT16_compliance+0x1dc>
			last_period = index;
 101b0c8:	e0bffd17 	ldw	r2,-12(fp)
 101b0cc:	e0bffb15 	stw	r2,-20(fp)
			last_dir_break_position = index;
 101b0d0:	e0bffd17 	ldw	r2,-12(fp)
 101b0d4:	e0bffc15 	stw	r2,-16(fp)
		}
		if (file_name[index] == '.') {
 101b0d8:	e0bffd17 	ldw	r2,-12(fp)
 101b0dc:	1007883a 	mov	r3,r2
 101b0e0:	e0bfff17 	ldw	r2,-4(fp)
 101b0e4:	1885883a 	add	r2,r3,r2
 101b0e8:	10800003 	ldbu	r2,0(r2)
 101b0ec:	10803fcc 	andi	r2,r2,255
 101b0f0:	1080201c 	xori	r2,r2,128
 101b0f4:	10bfe004 	addi	r2,r2,-128
 101b0f8:	10800b98 	cmpnei	r2,r2,46
 101b0fc:	1000021e 	bne	r2,zero,101b108 <check_file_name_for_FAT16_compliance+0x20c>
			last_period = index;
 101b100:	e0bffd17 	ldw	r2,-12(fp)
 101b104:	e0bffb15 	stw	r2,-20(fp)
	int index;
	int last_dir_break_position = -1;
	int last_period = -1;
	bool result = true;

	for (index = 0; index < length; index++) {
 101b108:	e0bffd17 	ldw	r2,-12(fp)
 101b10c:	10800044 	addi	r2,r2,1
 101b110:	e0bffd15 	stw	r2,-12(fp)
 101b114:	e0fffd17 	ldw	r3,-12(fp)
 101b118:	e0bffe17 	ldw	r2,-8(fp)
 101b11c:	18bf8716 	blt	r3,r2,101af3c <check_file_name_for_FAT16_compliance+0x40>
		}
		if (file_name[index] == '.') {
			last_period = index;
		}
	}
	if ((file_name[length - 1] == '\\') || (file_name[length - 1] == '/')) {
 101b120:	e0fffe17 	ldw	r3,-8(fp)
 101b124:	e0bfff17 	ldw	r2,-4(fp)
 101b128:	1885883a 	add	r2,r3,r2
 101b12c:	10bfffc4 	addi	r2,r2,-1
 101b130:	10800003 	ldbu	r2,0(r2)
 101b134:	10803fcc 	andi	r2,r2,255
 101b138:	1080201c 	xori	r2,r2,128
 101b13c:	10bfe004 	addi	r2,r2,-128
 101b140:	10801720 	cmpeqi	r2,r2,92
 101b144:	10000a1e 	bne	r2,zero,101b170 <check_file_name_for_FAT16_compliance+0x274>
 101b148:	e0fffe17 	ldw	r3,-8(fp)
 101b14c:	e0bfff17 	ldw	r2,-4(fp)
 101b150:	1885883a 	add	r2,r3,r2
 101b154:	10bfffc4 	addi	r2,r2,-1
 101b158:	10800003 	ldbu	r2,0(r2)
 101b15c:	10803fcc 	andi	r2,r2,255
 101b160:	1080201c 	xori	r2,r2,128
 101b164:	10bfe004 	addi	r2,r2,-128
 101b168:	10800bd8 	cmpnei	r2,r2,47
 101b16c:	1000011e 	bne	r2,zero,101b174 <check_file_name_for_FAT16_compliance+0x278>
		result = false;
 101b170:	e03ffa15 	stw	zero,-24(fp)
	}
	return result;
 101b174:	e0bffa17 	ldw	r2,-24(fp)
}
 101b178:	e037883a 	mov	sp,fp
 101b17c:	dfc00117 	ldw	ra,4(sp)
 101b180:	df000017 	ldw	fp,0(sp)
 101b184:	dec00204 	addi	sp,sp,8
 101b188:	f800283a 	ret

0101b18c <get_dir_divider_location>:

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
 101b18c:	defffb04 	addi	sp,sp,-20
 101b190:	dfc00415 	stw	ra,16(sp)
 101b194:	df000315 	stw	fp,12(sp)
 101b198:	df000304 	addi	fp,sp,12
 101b19c:	e13fff15 	stw	r4,-4(fp)
	int index = 0;
 101b1a0:	e03ffe15 	stw	zero,-8(fp)
	int length = strlen(name);
 101b1a4:	e13fff17 	ldw	r4,-4(fp)
 101b1a8:	100e3080 	call	100e308 <strlen>
 101b1ac:	e0bffd15 	stw	r2,-12(fp)

	for (index = 0; index < length; index++) {
 101b1b0:	e03ffe15 	stw	zero,-8(fp)
 101b1b4:	00001706 	br	101b214 <get_dir_divider_location+0x88>
		if ((name[index] == '\\') || (name[index] == '/')) {
 101b1b8:	e0bffe17 	ldw	r2,-8(fp)
 101b1bc:	1007883a 	mov	r3,r2
 101b1c0:	e0bfff17 	ldw	r2,-4(fp)
 101b1c4:	1885883a 	add	r2,r3,r2
 101b1c8:	10800003 	ldbu	r2,0(r2)
 101b1cc:	10803fcc 	andi	r2,r2,255
 101b1d0:	1080201c 	xori	r2,r2,128
 101b1d4:	10bfe004 	addi	r2,r2,-128
 101b1d8:	10801720 	cmpeqi	r2,r2,92
 101b1dc:	1000101e 	bne	r2,zero,101b220 <get_dir_divider_location+0x94>
 101b1e0:	e0bffe17 	ldw	r2,-8(fp)
 101b1e4:	1007883a 	mov	r3,r2
 101b1e8:	e0bfff17 	ldw	r2,-4(fp)
 101b1ec:	1885883a 	add	r2,r3,r2
 101b1f0:	10800003 	ldbu	r2,0(r2)
 101b1f4:	10803fcc 	andi	r2,r2,255
 101b1f8:	1080201c 	xori	r2,r2,128
 101b1fc:	10bfe004 	addi	r2,r2,-128
 101b200:	10800be0 	cmpeqi	r2,r2,47
 101b204:	1000061e 	bne	r2,zero,101b220 <get_dir_divider_location+0x94>
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);

	for (index = 0; index < length; index++) {
 101b208:	e0bffe17 	ldw	r2,-8(fp)
 101b20c:	10800044 	addi	r2,r2,1
 101b210:	e0bffe15 	stw	r2,-8(fp)
 101b214:	e0fffe17 	ldw	r3,-8(fp)
 101b218:	e0bffd17 	ldw	r2,-12(fp)
 101b21c:	18bfe616 	blt	r3,r2,101b1b8 <get_dir_divider_location+0x2c>
		if ((name[index] == '\\') || (name[index] == '/')) {
			break;
		}
	}

	if (index == length) {
 101b220:	e0fffe17 	ldw	r3,-8(fp)
 101b224:	e0bffd17 	ldw	r2,-12(fp)
 101b228:	1880021e 	bne	r3,r2,101b234 <get_dir_divider_location+0xa8>
		index = -1;
 101b22c:	00bfffc4 	movi	r2,-1
 101b230:	e0bffe15 	stw	r2,-8(fp)
	}

	return index;
 101b234:	e0bffe17 	ldw	r2,-8(fp)
}
 101b238:	e037883a 	mov	sp,fp
 101b23c:	dfc00117 	ldw	ra,4(sp)
 101b240:	df000017 	ldw	fp,0(sp)
 101b244:	dec00204 	addi	sp,sp,8
 101b248:	f800283a 	ret

0101b24c <match_file_record_to_name_ext>:

bool match_file_record_to_name_ext(t_file_record *file_record, char *name,
	char *extension)
	/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
 101b24c:	defff604 	addi	sp,sp,-40
 101b250:	df000915 	stw	fp,36(sp)
 101b254:	df000904 	addi	fp,sp,36
 101b258:	e13ff915 	stw	r4,-28(fp)
 101b25c:	e17ffa15 	stw	r5,-24(fp)
 101b260:	e1bffb15 	stw	r6,-20(fp)
	bool match = true;
 101b264:	00800044 	movi	r2,1
 101b268:	e0bff815 	stw	r2,-32(fp)
	int index;

	for (index = 0; index < 8; index++) {
 101b26c:	e03ff715 	stw	zero,-36(fp)
 101b270:	00005006 	br	101b3b4 <match_file_record_to_name_ext+0x168>
		if (CHAR_TO_UPPER(file_record->name[index])
 101b274:	e0fff717 	ldw	r3,-36(fp)
 101b278:	e0bff917 	ldw	r2,-28(fp)
 101b27c:	10c5883a 	add	r2,r2,r3
 101b280:	10800003 	ldbu	r2,0(r2)
 101b284:	10803fcc 	andi	r2,r2,255
 101b288:	10801870 	cmpltui	r2,r2,97
 101b28c:	1000111e 	bne	r2,zero,101b2d4 <match_file_record_to_name_ext+0x88>
 101b290:	e0fff717 	ldw	r3,-36(fp)
 101b294:	e0bff917 	ldw	r2,-28(fp)
 101b298:	10c5883a 	add	r2,r2,r3
 101b29c:	10800003 	ldbu	r2,0(r2)
 101b2a0:	10803fcc 	andi	r2,r2,255
 101b2a4:	10801ee8 	cmpgeui	r2,r2,123
 101b2a8:	10000a1e 	bne	r2,zero,101b2d4 <match_file_record_to_name_ext+0x88>
 101b2ac:	e0fff717 	ldw	r3,-36(fp)
 101b2b0:	e0bff917 	ldw	r2,-28(fp)
 101b2b4:	10c5883a 	add	r2,r2,r3
 101b2b8:	10800003 	ldbu	r2,0(r2)
 101b2bc:	10bff804 	addi	r2,r2,-32
 101b2c0:	10803fcc 	andi	r2,r2,255
 101b2c4:	1080201c 	xori	r2,r2,128
 101b2c8:	10bfe004 	addi	r2,r2,-128
 101b2cc:	e0bfff15 	stw	r2,-4(fp)
 101b2d0:	00000806 	br	101b2f4 <match_file_record_to_name_ext+0xa8>
 101b2d4:	e0fff717 	ldw	r3,-36(fp)
 101b2d8:	e0bff917 	ldw	r2,-28(fp)
 101b2dc:	10c5883a 	add	r2,r2,r3
 101b2e0:	10800003 	ldbu	r2,0(r2)
 101b2e4:	10803fcc 	andi	r2,r2,255
 101b2e8:	1080201c 	xori	r2,r2,128
 101b2ec:	10bfe004 	addi	r2,r2,-128
 101b2f0:	e0bfff15 	stw	r2,-4(fp)
 101b2f4:	e0bff717 	ldw	r2,-36(fp)
 101b2f8:	1007883a 	mov	r3,r2
 101b2fc:	e0bffa17 	ldw	r2,-24(fp)
 101b300:	1885883a 	add	r2,r3,r2
 101b304:	10800003 	ldbu	r2,0(r2)
 101b308:	10803fcc 	andi	r2,r2,255
 101b30c:	1080201c 	xori	r2,r2,128
 101b310:	10bfe004 	addi	r2,r2,-128
 101b314:	10801850 	cmplti	r2,r2,97
 101b318:	1000151e 	bne	r2,zero,101b370 <match_file_record_to_name_ext+0x124>
 101b31c:	e0bff717 	ldw	r2,-36(fp)
 101b320:	1007883a 	mov	r3,r2
 101b324:	e0bffa17 	ldw	r2,-24(fp)
 101b328:	1885883a 	add	r2,r3,r2
 101b32c:	10800003 	ldbu	r2,0(r2)
 101b330:	10803fcc 	andi	r2,r2,255
 101b334:	1080201c 	xori	r2,r2,128
 101b338:	10bfe004 	addi	r2,r2,-128
 101b33c:	10801ec8 	cmpgei	r2,r2,123
 101b340:	10000b1e 	bne	r2,zero,101b370 <match_file_record_to_name_ext+0x124>
 101b344:	e0bff717 	ldw	r2,-36(fp)
 101b348:	1007883a 	mov	r3,r2
 101b34c:	e0bffa17 	ldw	r2,-24(fp)
 101b350:	1885883a 	add	r2,r3,r2
 101b354:	10800003 	ldbu	r2,0(r2)
 101b358:	10bff804 	addi	r2,r2,-32
 101b35c:	10803fcc 	andi	r2,r2,255
 101b360:	1080201c 	xori	r2,r2,128
 101b364:	10bfe004 	addi	r2,r2,-128
 101b368:	e0bffe15 	stw	r2,-8(fp)
 101b36c:	00000906 	br	101b394 <match_file_record_to_name_ext+0x148>
 101b370:	e0bff717 	ldw	r2,-36(fp)
 101b374:	1007883a 	mov	r3,r2
 101b378:	e0bffa17 	ldw	r2,-24(fp)
 101b37c:	1885883a 	add	r2,r3,r2
 101b380:	10800003 	ldbu	r2,0(r2)
 101b384:	10803fcc 	andi	r2,r2,255
 101b388:	1080201c 	xori	r2,r2,128
 101b38c:	10bfe004 	addi	r2,r2,-128
 101b390:	e0bffe15 	stw	r2,-8(fp)
 101b394:	e0bfff17 	ldw	r2,-4(fp)
 101b398:	e0fffe17 	ldw	r3,-8(fp)
 101b39c:	10c00226 	beq	r2,r3,101b3a8 <match_file_record_to_name_ext+0x15c>
			!= CHAR_TO_UPPER(name[index])) {
			match = false;
 101b3a0:	e03ff815 	stw	zero,-32(fp)
			break;
 101b3a4:	00000606 	br	101b3c0 <match_file_record_to_name_ext+0x174>
	/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
 101b3a8:	e0bff717 	ldw	r2,-36(fp)
 101b3ac:	10800044 	addi	r2,r2,1
 101b3b0:	e0bff715 	stw	r2,-36(fp)
 101b3b4:	e0bff717 	ldw	r2,-36(fp)
 101b3b8:	10800210 	cmplti	r2,r2,8
 101b3bc:	103fad1e 	bne	r2,zero,101b274 <match_file_record_to_name_ext+0x28>
			!= CHAR_TO_UPPER(name[index])) {
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
 101b3c0:	e03ff715 	stw	zero,-36(fp)
 101b3c4:	00005406 	br	101b518 <match_file_record_to_name_ext+0x2cc>
		if (CHAR_TO_UPPER(file_record->extension[index])
 101b3c8:	e0fff717 	ldw	r3,-36(fp)
 101b3cc:	e0bff917 	ldw	r2,-28(fp)
 101b3d0:	1885883a 	add	r2,r3,r2
 101b3d4:	10800204 	addi	r2,r2,8
 101b3d8:	10800003 	ldbu	r2,0(r2)
 101b3dc:	10803fcc 	andi	r2,r2,255
 101b3e0:	10801870 	cmpltui	r2,r2,97
 101b3e4:	1000131e 	bne	r2,zero,101b434 <match_file_record_to_name_ext+0x1e8>
 101b3e8:	e0fff717 	ldw	r3,-36(fp)
 101b3ec:	e0bff917 	ldw	r2,-28(fp)
 101b3f0:	1885883a 	add	r2,r3,r2
 101b3f4:	10800204 	addi	r2,r2,8
 101b3f8:	10800003 	ldbu	r2,0(r2)
 101b3fc:	10803fcc 	andi	r2,r2,255
 101b400:	10801ee8 	cmpgeui	r2,r2,123
 101b404:	10000b1e 	bne	r2,zero,101b434 <match_file_record_to_name_ext+0x1e8>
 101b408:	e0fff717 	ldw	r3,-36(fp)
 101b40c:	e0bff917 	ldw	r2,-28(fp)
 101b410:	1885883a 	add	r2,r3,r2
 101b414:	10800204 	addi	r2,r2,8
 101b418:	10800003 	ldbu	r2,0(r2)
 101b41c:	10bff804 	addi	r2,r2,-32
 101b420:	10803fcc 	andi	r2,r2,255
 101b424:	1080201c 	xori	r2,r2,128
 101b428:	10bfe004 	addi	r2,r2,-128
 101b42c:	e0bffd15 	stw	r2,-12(fp)
 101b430:	00000906 	br	101b458 <match_file_record_to_name_ext+0x20c>
 101b434:	e0fff717 	ldw	r3,-36(fp)
 101b438:	e0bff917 	ldw	r2,-28(fp)
 101b43c:	1885883a 	add	r2,r3,r2
 101b440:	10800204 	addi	r2,r2,8
 101b444:	10800003 	ldbu	r2,0(r2)
 101b448:	10803fcc 	andi	r2,r2,255
 101b44c:	1080201c 	xori	r2,r2,128
 101b450:	10bfe004 	addi	r2,r2,-128
 101b454:	e0bffd15 	stw	r2,-12(fp)
 101b458:	e0bff717 	ldw	r2,-36(fp)
 101b45c:	1007883a 	mov	r3,r2
 101b460:	e0bffb17 	ldw	r2,-20(fp)
 101b464:	1885883a 	add	r2,r3,r2
 101b468:	10800003 	ldbu	r2,0(r2)
 101b46c:	10803fcc 	andi	r2,r2,255
 101b470:	1080201c 	xori	r2,r2,128
 101b474:	10bfe004 	addi	r2,r2,-128
 101b478:	10801850 	cmplti	r2,r2,97
 101b47c:	1000151e 	bne	r2,zero,101b4d4 <match_file_record_to_name_ext+0x288>
 101b480:	e0bff717 	ldw	r2,-36(fp)
 101b484:	1007883a 	mov	r3,r2
 101b488:	e0bffb17 	ldw	r2,-20(fp)
 101b48c:	1885883a 	add	r2,r3,r2
 101b490:	10800003 	ldbu	r2,0(r2)
 101b494:	10803fcc 	andi	r2,r2,255
 101b498:	1080201c 	xori	r2,r2,128
 101b49c:	10bfe004 	addi	r2,r2,-128
 101b4a0:	10801ec8 	cmpgei	r2,r2,123
 101b4a4:	10000b1e 	bne	r2,zero,101b4d4 <match_file_record_to_name_ext+0x288>
 101b4a8:	e0bff717 	ldw	r2,-36(fp)
 101b4ac:	1007883a 	mov	r3,r2
 101b4b0:	e0bffb17 	ldw	r2,-20(fp)
 101b4b4:	1885883a 	add	r2,r3,r2
 101b4b8:	10800003 	ldbu	r2,0(r2)
 101b4bc:	10bff804 	addi	r2,r2,-32
 101b4c0:	10803fcc 	andi	r2,r2,255
 101b4c4:	1080201c 	xori	r2,r2,128
 101b4c8:	10bfe004 	addi	r2,r2,-128
 101b4cc:	e0bffc15 	stw	r2,-16(fp)
 101b4d0:	00000906 	br	101b4f8 <match_file_record_to_name_ext+0x2ac>
 101b4d4:	e0bff717 	ldw	r2,-36(fp)
 101b4d8:	1007883a 	mov	r3,r2
 101b4dc:	e0bffb17 	ldw	r2,-20(fp)
 101b4e0:	1885883a 	add	r2,r3,r2
 101b4e4:	10800003 	ldbu	r2,0(r2)
 101b4e8:	10803fcc 	andi	r2,r2,255
 101b4ec:	1080201c 	xori	r2,r2,128
 101b4f0:	10bfe004 	addi	r2,r2,-128
 101b4f4:	e0bffc15 	stw	r2,-16(fp)
 101b4f8:	e0bffd17 	ldw	r2,-12(fp)
 101b4fc:	e0fffc17 	ldw	r3,-16(fp)
 101b500:	10c00226 	beq	r2,r3,101b50c <match_file_record_to_name_ext+0x2c0>
			!= CHAR_TO_UPPER(extension[index])) {
			match = false;
 101b504:	e03ff815 	stw	zero,-32(fp)
			break;
 101b508:	00000606 	br	101b524 <match_file_record_to_name_ext+0x2d8>
			!= CHAR_TO_UPPER(name[index])) {
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
 101b50c:	e0bff717 	ldw	r2,-36(fp)
 101b510:	10800044 	addi	r2,r2,1
 101b514:	e0bff715 	stw	r2,-36(fp)
 101b518:	e0bff717 	ldw	r2,-36(fp)
 101b51c:	108000d0 	cmplti	r2,r2,3
 101b520:	103fa91e 	bne	r2,zero,101b3c8 <match_file_record_to_name_ext+0x17c>
			!= CHAR_TO_UPPER(extension[index])) {
			match = false;
			break;
		}
	}
	return match;
 101b524:	e0bff817 	ldw	r2,-32(fp)
}
 101b528:	e037883a 	mov	sp,fp
 101b52c:	df000017 	ldw	fp,0(sp)
 101b530:	dec00104 	addi	sp,sp,4
 101b534:	f800283a 	ret

0101b538 <get_home_directory_cluster_for_file>:

bool get_home_directory_cluster_for_file(char *file_name,
	int *home_directory_cluster, t_file_record *file_record)
	// Scan the directories in given in the file name and find the root directory for the file.
{
 101b538:	deffe604 	addi	sp,sp,-104
 101b53c:	dfc01915 	stw	ra,100(sp)
 101b540:	df001815 	stw	fp,96(sp)
 101b544:	df001804 	addi	fp,sp,96
 101b548:	e13ffc15 	stw	r4,-16(fp)
 101b54c:	e17ffd15 	stw	r5,-12(fp)
 101b550:	e1bffe15 	stw	r6,-8(fp)
	bool result = false;
 101b554:	e03ff715 	stw	zero,-36(fp)
	int home_dir_cluster = 0;
 101b558:	e03ff615 	stw	zero,-40(fp)
	int location, index;
	int start_location = 0;
 101b55c:	e03ff315 	stw	zero,-52(fp)

	/* Get Next Directory. */
	location = get_dir_divider_location(file_name);
 101b560:	e13ffc17 	ldw	r4,-16(fp)
 101b564:	101b18c0 	call	101b18c <get_dir_divider_location>
 101b568:	e0bff515 	stw	r2,-44(fp)
	while (location > 0) {
 101b56c:	00012206 	br	101b9f8 <get_home_directory_cluster_for_file+0x4c0>
		char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
 101b570:	00800804 	movi	r2,32
 101b574:	e0bff805 	stb	r2,-32(fp)
 101b578:	00800804 	movi	r2,32
 101b57c:	e0bff845 	stb	r2,-31(fp)
 101b580:	00800804 	movi	r2,32
 101b584:	e0bff885 	stb	r2,-30(fp)
 101b588:	00800804 	movi	r2,32
 101b58c:	e0bff8c5 	stb	r2,-29(fp)
 101b590:	00800804 	movi	r2,32
 101b594:	e0bff905 	stb	r2,-28(fp)
 101b598:	00800804 	movi	r2,32
 101b59c:	e0bff945 	stb	r2,-27(fp)
 101b5a0:	00800804 	movi	r2,32
 101b5a4:	e0bff985 	stb	r2,-26(fp)
 101b5a8:	00800804 	movi	r2,32
 101b5ac:	e0bff9c5 	stb	r2,-25(fp)
		char extension[3] = { ' ', ' ', ' ' };
 101b5b0:	00800804 	movi	r2,32
 101b5b4:	e0bffa05 	stb	r2,-24(fp)
 101b5b8:	00800804 	movi	r2,32
 101b5bc:	e0bffa45 	stb	r2,-23(fp)
 101b5c0:	00800804 	movi	r2,32
 101b5c4:	e0bffa85 	stb	r2,-22(fp)
		int ext_index = -1;
 101b5c8:	00bfffc4 	movi	r2,-1
 101b5cc:	e0bff215 	stw	r2,-56(fp)
		int new_cluster = home_dir_cluster;
 101b5d0:	e0bff617 	ldw	r2,-40(fp)
 101b5d4:	e0bff115 	stw	r2,-60(fp)

		// Get the name of the directory in name/extension format.
		for (index = 0; index < location; index++) {
 101b5d8:	e03ff415 	stw	zero,-48(fp)
 101b5dc:	00002e06 	br	101b698 <get_home_directory_cluster_for_file+0x160>
			if (file_name[index + start_location] == '.') {
 101b5e0:	e0fff417 	ldw	r3,-48(fp)
 101b5e4:	e0bff317 	ldw	r2,-52(fp)
 101b5e8:	1885883a 	add	r2,r3,r2
 101b5ec:	1007883a 	mov	r3,r2
 101b5f0:	e0bffc17 	ldw	r2,-16(fp)
 101b5f4:	1885883a 	add	r2,r3,r2
 101b5f8:	10800003 	ldbu	r2,0(r2)
 101b5fc:	10803fcc 	andi	r2,r2,255
 101b600:	1080201c 	xori	r2,r2,128
 101b604:	10bfe004 	addi	r2,r2,-128
 101b608:	10800b98 	cmpnei	r2,r2,46
 101b60c:	1000031e 	bne	r2,zero,101b61c <get_home_directory_cluster_for_file+0xe4>
				ext_index = index;
 101b610:	e0bff417 	ldw	r2,-48(fp)
 101b614:	e0bff215 	stw	r2,-56(fp)
 101b618:	00001c06 	br	101b68c <get_home_directory_cluster_for_file+0x154>
			}
			else if (ext_index < 0) {
 101b61c:	e0bff217 	ldw	r2,-56(fp)
 101b620:	1004403a 	cmpge	r2,r2,zero
 101b624:	10000c1e 	bne	r2,zero,101b658 <get_home_directory_cluster_for_file+0x120>
				name[index] = file_name[index + start_location];
 101b628:	e13ff417 	ldw	r4,-48(fp)
 101b62c:	e0fff417 	ldw	r3,-48(fp)
 101b630:	e0bff317 	ldw	r2,-52(fp)
 101b634:	1885883a 	add	r2,r3,r2
 101b638:	1007883a 	mov	r3,r2
 101b63c:	e0bffc17 	ldw	r2,-16(fp)
 101b640:	1885883a 	add	r2,r3,r2
 101b644:	10c00003 	ldbu	r3,0(r2)
 101b648:	e0bff804 	addi	r2,fp,-32
 101b64c:	1105883a 	add	r2,r2,r4
 101b650:	10c00005 	stb	r3,0(r2)
 101b654:	00000d06 	br	101b68c <get_home_directory_cluster_for_file+0x154>
			}
			else {
				extension[index - ext_index] =
 101b658:	e0fff417 	ldw	r3,-48(fp)
 101b65c:	e0bff217 	ldw	r2,-56(fp)
 101b660:	1889c83a 	sub	r4,r3,r2
 101b664:	e0fff417 	ldw	r3,-48(fp)
 101b668:	e0bff317 	ldw	r2,-52(fp)
 101b66c:	1885883a 	add	r2,r3,r2
 101b670:	1007883a 	mov	r3,r2
 101b674:	e0bffc17 	ldw	r2,-16(fp)
 101b678:	1885883a 	add	r2,r3,r2
 101b67c:	10c00003 	ldbu	r3,0(r2)
 101b680:	e0bffa04 	addi	r2,fp,-24
 101b684:	1105883a 	add	r2,r2,r4
 101b688:	10c00005 	stb	r3,0(r2)
		char extension[3] = { ' ', ' ', ' ' };
		int ext_index = -1;
		int new_cluster = home_dir_cluster;

		// Get the name of the directory in name/extension format.
		for (index = 0; index < location; index++) {
 101b68c:	e0bff417 	ldw	r2,-48(fp)
 101b690:	10800044 	addi	r2,r2,1
 101b694:	e0bff415 	stw	r2,-48(fp)
 101b698:	e0fff417 	ldw	r3,-48(fp)
 101b69c:	e0bff517 	ldw	r2,-44(fp)
 101b6a0:	18bfcf16 	blt	r3,r2,101b5e0 <get_home_directory_cluster_for_file+0xa8>
				extension[index - ext_index] =
					file_name[index + start_location];
			}
		}

		if (home_dir_cluster == 0) {
 101b6a4:	e0bff617 	ldw	r2,-40(fp)
 101b6a8:	1004c03a 	cmpne	r2,r2,zero
 101b6ac:	1000551e 	bne	r2,zero,101b804 <get_home_directory_cluster_for_file+0x2cc>
			/* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
			int max_root_dir_sectors = ((32
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
 101b6b0:	00804234 	movhi	r2,264
 101b6b4:	10ac2604 	addi	r2,r2,-20328
 101b6b8:	1080050b 	ldhu	r2,20(r2)
 101b6bc:	10bfffcc 	andi	r2,r2,65535
 101b6c0:	1006917a 	slli	r3,r2,5
 101b6c4:	00804234 	movhi	r2,264
 101b6c8:	10ac2604 	addi	r2,r2,-20328
 101b6cc:	1080030b 	ldhu	r2,12(r2)
 101b6d0:	10bfffcc 	andi	r2,r2,65535
 101b6d4:	1885283a 	div	r2,r3,r2
 101b6d8:	e0bff015 	stw	r2,-64(fp)
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors;
 101b6dc:	e03fef15 	stw	zero,-68(fp)
 101b6e0:	00003806 	br	101b7c4 <get_home_directory_cluster_for_file+0x28c>
				sector_index++) {
				if (Read_Sector_Data(
 101b6e4:	00804234 	movhi	r2,264
 101b6e8:	10ac2604 	addi	r2,r2,-20328
 101b6ec:	10c01317 	ldw	r3,76(r2)
 101b6f0:	e0bfef17 	ldw	r2,-68(fp)
 101b6f4:	1885883a 	add	r2,r3,r2
 101b6f8:	1009883a 	mov	r4,r2
 101b6fc:	d1671a17 	ldw	r5,-25496(gp)
 101b700:	1019d640 	call	1019d64 <Read_Sector_Data>
 101b704:	1005003a 	cmpeq	r2,r2,zero
 101b708:	1000311e 	bne	r2,zero,101b7d0 <get_home_directory_cluster_for_file+0x298>
					sector_index
					+ boot_sector_data.root_directory_sector_offset,
					fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
 101b70c:	e03fee15 	stw	zero,-72(fp)
 101b710:	00002306 	br	101b7a0 <get_home_directory_cluster_for_file+0x268>

						// Read file record.
						Read_File_Record_At_Offset(file_counter * 32,
 101b714:	e0bfee17 	ldw	r2,-72(fp)
 101b718:	1008917a 	slli	r4,r2,5
 101b71c:	e1ffef17 	ldw	r7,-68(fp)
 101b720:	e17ffe17 	ldw	r5,-8(fp)
 101b724:	000d883a 	mov	r6,zero
 101b728:	101a1ac0 	call	101a1ac <Read_File_Record_At_Offset>
							file_record, 0, sector_index);
						if ((file_record->name[0] != 0xe5)
 101b72c:	e0bffe17 	ldw	r2,-8(fp)
 101b730:	10800003 	ldbu	r2,0(r2)
 101b734:	10803fcc 	andi	r2,r2,255
 101b738:	10803960 	cmpeqi	r2,r2,229
 101b73c:	1000151e 	bne	r2,zero,101b794 <get_home_directory_cluster_for_file+0x25c>
 101b740:	e0bffe17 	ldw	r2,-8(fp)
 101b744:	10800003 	ldbu	r2,0(r2)
 101b748:	10803fcc 	andi	r2,r2,255
 101b74c:	1005003a 	cmpeq	r2,r2,zero
 101b750:	1000101e 	bne	r2,zero,101b794 <get_home_directory_cluster_for_file+0x25c>
							&& (file_record->name[0] != 0x00)) {
							bool match = match_file_record_to_name_ext(
								file_record, name, extension);
 101b754:	e17ff804 	addi	r5,fp,-32
 101b758:	e1bffa04 	addi	r6,fp,-24
 101b75c:	e13ffe17 	ldw	r4,-8(fp)
 101b760:	101b24c0 	call	101b24c <match_file_record_to_name_ext>
 101b764:	e0bfed15 	stw	r2,-76(fp)
							if (match) {
 101b768:	e0bfed17 	ldw	r2,-76(fp)
 101b76c:	1005003a 	cmpeq	r2,r2,zero
 101b770:	1000081e 	bne	r2,zero,101b794 <get_home_directory_cluster_for_file+0x25c>
								new_cluster = file_record->start_cluster_index;
 101b774:	e0bffe17 	ldw	r2,-8(fp)
 101b778:	1080058b 	ldhu	r2,22(r2)
 101b77c:	10bfffcc 	andi	r2,r2,65535
 101b780:	e0bff115 	stw	r2,-60(fp)
								file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
 101b784:	e0fffe17 	ldw	r3,-8(fp)
 101b788:	00800044 	movi	r2,1
 101b78c:	18800a15 	stw	r2,40(r3)
								break;
 101b790:	00000606 	br	101b7ac <get_home_directory_cluster_for_file+0x274>
					sector_index
					+ boot_sector_data.root_directory_sector_offset,
					fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
 101b794:	e0bfee17 	ldw	r2,-72(fp)
 101b798:	10800044 	addi	r2,r2,1
 101b79c:	e0bfee15 	stw	r2,-72(fp)
 101b7a0:	e0bfee17 	ldw	r2,-72(fp)
 101b7a4:	10800410 	cmplti	r2,r2,16
 101b7a8:	103fda1e 	bne	r2,zero,101b714 <get_home_directory_cluster_for_file+0x1dc>
					}
				}
				else {
					break;
				}
				if (new_cluster != home_dir_cluster) {
 101b7ac:	e0fff117 	ldw	r3,-60(fp)
 101b7b0:	e0bff617 	ldw	r2,-40(fp)
 101b7b4:	1880061e 	bne	r3,r2,101b7d0 <get_home_directory_cluster_for_file+0x298>
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors;
				sector_index++) {
 101b7b8:	e0bfef17 	ldw	r2,-68(fp)
 101b7bc:	10800044 	addi	r2,r2,1
 101b7c0:	e0bfef15 	stw	r2,-68(fp)
			int max_root_dir_sectors = ((32
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors;
 101b7c4:	e0ffef17 	ldw	r3,-68(fp)
 101b7c8:	e0bff017 	ldw	r2,-64(fp)
 101b7cc:	18bfc516 	blt	r3,r2,101b6e4 <get_home_directory_cluster_for_file+0x1ac>
				}
				if (new_cluster != home_dir_cluster) {
					break;
				}
			}
			if (new_cluster != home_dir_cluster) {
 101b7d0:	e0fff117 	ldw	r3,-60(fp)
 101b7d4:	e0bff617 	ldw	r2,-40(fp)
 101b7d8:	18800826 	beq	r3,r2,101b7fc <get_home_directory_cluster_for_file+0x2c4>
				// A valid directory is found, so go to it.
				home_dir_cluster = new_cluster;
 101b7dc:	e0bff117 	ldw	r2,-60(fp)
 101b7e0:	e0bff615 	stw	r2,-40(fp)
				start_location = start_location + location + 1;
 101b7e4:	e0fff317 	ldw	r3,-52(fp)
 101b7e8:	e0bff517 	ldw	r2,-44(fp)
 101b7ec:	1885883a 	add	r2,r3,r2
 101b7f0:	10800044 	addi	r2,r2,1
 101b7f4:	e0bff315 	stw	r2,-52(fp)
 101b7f8:	00007406 	br	101b9cc <get_home_directory_cluster_for_file+0x494>
			}
			else {
				// Directory path is invalid.
				return false;
 101b7fc:	e03fff15 	stw	zero,-4(fp)
 101b800:	00008c06 	br	101ba34 <get_home_directory_cluster_for_file+0x4fc>
			}
		}
		else {
			// This is a subdirectory that can have any number of elements. So scan through it as though it was a file
			// and see if you can find the directory of interest.
			int cluster = home_dir_cluster;
 101b804:	e0bff617 	ldw	r2,-40(fp)
 101b808:	e0bfec15 	stw	r2,-80(fp)

			do {
				int start_sector = (cluster - 2)
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
 101b80c:	e0bfec17 	ldw	r2,-80(fp)
 101b810:	10ffff84 	addi	r3,r2,-2
 101b814:	00804234 	movhi	r2,264
 101b818:	10ac2604 	addi	r2,r2,-20328
 101b81c:	10800383 	ldbu	r2,14(r2)
 101b820:	10803fcc 	andi	r2,r2,255
 101b824:	1885383a 	mul	r2,r3,r2
 101b828:	1007883a 	mov	r3,r2
 101b82c:	00804234 	movhi	r2,264
 101b830:	10ac2604 	addi	r2,r2,-20328
 101b834:	10801417 	ldw	r2,80(r2)
 101b838:	1885883a 	add	r2,r3,r2
 101b83c:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index;

				for (sector_index = 0;
 101b840:	e03fea15 	stw	zero,-88(fp)
					sector_index < boot_sector_data.sectors_per_cluster;
 101b844:	00003206 	br	101b910 <get_home_directory_cluster_for_file+0x3d8>
					sector_index++) {
					if (Read_Sector_Data(sector_index + start_sector,
 101b848:	e0ffea17 	ldw	r3,-88(fp)
 101b84c:	e0bfeb17 	ldw	r2,-84(fp)
 101b850:	1889883a 	add	r4,r3,r2
 101b854:	d1671a17 	ldw	r5,-25496(gp)
 101b858:	1019d640 	call	1019d64 <Read_Sector_Data>
 101b85c:	1005003a 	cmpeq	r2,r2,zero
 101b860:	1000311e 	bne	r2,zero,101b928 <get_home_directory_cluster_for_file+0x3f0>
						fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16;
 101b864:	e03fe915 	stw	zero,-92(fp)
 101b868:	00002006 	br	101b8ec <get_home_directory_cluster_for_file+0x3b4>
							file_counter++) {
							// Read file record.
							Read_File_Record_At_Offset(file_counter * 32,
 101b86c:	e0bfe917 	ldw	r2,-92(fp)
 101b870:	1008917a 	slli	r4,r2,5
 101b874:	e1bfec17 	ldw	r6,-80(fp)
 101b878:	e1ffea17 	ldw	r7,-88(fp)
 101b87c:	e17ffe17 	ldw	r5,-8(fp)
 101b880:	101a1ac0 	call	101a1ac <Read_File_Record_At_Offset>
								file_record, cluster, sector_index);
							if ((file_record->name[0] != 0xe5)
 101b884:	e0bffe17 	ldw	r2,-8(fp)
 101b888:	10800003 	ldbu	r2,0(r2)
 101b88c:	10803fcc 	andi	r2,r2,255
 101b890:	10803960 	cmpeqi	r2,r2,229
 101b894:	1000121e 	bne	r2,zero,101b8e0 <get_home_directory_cluster_for_file+0x3a8>
 101b898:	e0bffe17 	ldw	r2,-8(fp)
 101b89c:	10800003 	ldbu	r2,0(r2)
 101b8a0:	10803fcc 	andi	r2,r2,255
 101b8a4:	1005003a 	cmpeq	r2,r2,zero
 101b8a8:	10000d1e 	bne	r2,zero,101b8e0 <get_home_directory_cluster_for_file+0x3a8>
								&& (file_record->name[0] != 0x00)) {
								bool match = match_file_record_to_name_ext(
									file_record, name, extension);
 101b8ac:	e17ff804 	addi	r5,fp,-32
 101b8b0:	e1bffa04 	addi	r6,fp,-24
 101b8b4:	e13ffe17 	ldw	r4,-8(fp)
 101b8b8:	101b24c0 	call	101b24c <match_file_record_to_name_ext>
 101b8bc:	e0bfe815 	stw	r2,-96(fp)
								if (match) {
 101b8c0:	e0bfe817 	ldw	r2,-96(fp)
 101b8c4:	1005003a 	cmpeq	r2,r2,zero
 101b8c8:	1000051e 	bne	r2,zero,101b8e0 <get_home_directory_cluster_for_file+0x3a8>
									new_cluster =
 101b8cc:	e0bffe17 	ldw	r2,-8(fp)
 101b8d0:	1080058b 	ldhu	r2,22(r2)
 101b8d4:	10bfffcc 	andi	r2,r2,65535
 101b8d8:	e0bff115 	stw	r2,-60(fp)
										file_record->start_cluster_index;
									break;
 101b8dc:	00000606 	br	101b8f8 <get_home_directory_cluster_for_file+0x3c0>
					if (Read_Sector_Data(sector_index + start_sector,
						fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16;
							file_counter++) {
 101b8e0:	e0bfe917 	ldw	r2,-92(fp)
 101b8e4:	10800044 	addi	r2,r2,1
 101b8e8:	e0bfe915 	stw	r2,-92(fp)
					sector_index++) {
					if (Read_Sector_Data(sector_index + start_sector,
						fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16;
 101b8ec:	e0bfe917 	ldw	r2,-92(fp)
 101b8f0:	10800410 	cmplti	r2,r2,16
 101b8f4:	103fdd1e 	bne	r2,zero,101b86c <get_home_directory_cluster_for_file+0x334>
						}
					}
					else {
						break;
					}
					if (new_cluster != home_dir_cluster) {
 101b8f8:	e0fff117 	ldw	r3,-60(fp)
 101b8fc:	e0bff617 	ldw	r2,-40(fp)
 101b900:	1880091e 	bne	r3,r2,101b928 <get_home_directory_cluster_for_file+0x3f0>
					+ boot_sector_data.data_sector_offset;
				int sector_index;

				for (sector_index = 0;
					sector_index < boot_sector_data.sectors_per_cluster;
					sector_index++) {
 101b904:	e0bfea17 	ldw	r2,-88(fp)
 101b908:	10800044 	addi	r2,r2,1
 101b90c:	e0bfea15 	stw	r2,-88(fp)
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
				int sector_index;

				for (sector_index = 0;
					sector_index < boot_sector_data.sectors_per_cluster;
 101b910:	00804234 	movhi	r2,264
 101b914:	10ac2604 	addi	r2,r2,-20328
 101b918:	10800383 	ldbu	r2,14(r2)
 101b91c:	10c03fcc 	andi	r3,r2,255
 101b920:	e0bfea17 	ldw	r2,-88(fp)
 101b924:	10ffc816 	blt	r2,r3,101b848 <get_home_directory_cluster_for_file+0x310>
						break;
					}
				}
				// If this is the end of the cluster and the directory has not been found, then see if there is another cluster
				// that holds data for the current directory.
				if (new_cluster == home_dir_cluster) {
 101b928:	e0fff117 	ldw	r3,-60(fp)
 101b92c:	e0bff617 	ldw	r2,-40(fp)
 101b930:	1880131e 	bne	r3,r2,101b980 <get_home_directory_cluster_for_file+0x448>
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster)) {
 101b934:	e13ff117 	ldw	r4,-60(fp)
 101b938:	e17ffb04 	addi	r5,fp,-20
 101b93c:	1019e600 	call	1019e60 <get_cluster_flag>
 101b940:	1005003a 	cmpeq	r2,r2,zero
 101b944:	10000c1e 	bne	r2,zero,101b978 <get_home_directory_cluster_for_file+0x440>
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8) {
 101b948:	e0bffb0b 	ldhu	r2,-20(fp)
 101b94c:	10bfffcc 	andi	r2,r2,65535
 101b950:	10fffe0c 	andi	r3,r2,65528
 101b954:	00bffe14 	movui	r2,65528
 101b958:	1880021e 	bne	r3,r2,101b964 <get_home_directory_cluster_for_file+0x42c>
							return false;
 101b95c:	e03fff15 	stw	zero,-4(fp)
 101b960:	00003406 	br	101ba34 <get_home_directory_cluster_for_file+0x4fc>
						}
						new_cluster = (next_cluster & 0x0000fff8);
 101b964:	e0bffb0b 	ldhu	r2,-20(fp)
 101b968:	10bfffcc 	andi	r2,r2,65535
 101b96c:	10bffe0c 	andi	r2,r2,65528
 101b970:	e0bff115 	stw	r2,-60(fp)
 101b974:	00000206 	br	101b980 <get_home_directory_cluster_for_file+0x448>
					}
					else {
						// Directory path is invalid.                 
						return false;
 101b978:	e03fff15 	stw	zero,-4(fp)
 101b97c:	00002d06 	br	101ba34 <get_home_directory_cluster_for_file+0x4fc>
					}
				}
			} while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
 101b980:	e0ffec17 	ldw	r3,-80(fp)
 101b984:	00bffdd4 	movui	r2,65527
 101b988:	10c00316 	blt	r2,r3,101b998 <get_home_directory_cluster_for_file+0x460>
 101b98c:	e0fff117 	ldw	r3,-60(fp)
 101b990:	e0bff617 	ldw	r2,-40(fp)
 101b994:	18bf9d26 	beq	r3,r2,101b80c <get_home_directory_cluster_for_file+0x2d4>
			if (new_cluster != home_dir_cluster) {
 101b998:	e0fff117 	ldw	r3,-60(fp)
 101b99c:	e0bff617 	ldw	r2,-40(fp)
 101b9a0:	18800826 	beq	r3,r2,101b9c4 <get_home_directory_cluster_for_file+0x48c>
				// A valid directory is found, so go to it.
				home_dir_cluster = new_cluster;
 101b9a4:	e0bff117 	ldw	r2,-60(fp)
 101b9a8:	e0bff615 	stw	r2,-40(fp)
				start_location = start_location + location + 1;
 101b9ac:	e0fff317 	ldw	r3,-52(fp)
 101b9b0:	e0bff517 	ldw	r2,-44(fp)
 101b9b4:	1885883a 	add	r2,r3,r2
 101b9b8:	10800044 	addi	r2,r2,1
 101b9bc:	e0bff315 	stw	r2,-52(fp)
 101b9c0:	00000206 	br	101b9cc <get_home_directory_cluster_for_file+0x494>
			}
			else {
				// Directory path is invalid.
				return false;
 101b9c4:	e03fff15 	stw	zero,-4(fp)
 101b9c8:	00001a06 	br	101ba34 <get_home_directory_cluster_for_file+0x4fc>
			}
		}
		location = get_dir_divider_location(&(file_name[start_location]));
 101b9cc:	e0bff317 	ldw	r2,-52(fp)
 101b9d0:	1007883a 	mov	r3,r2
 101b9d4:	e0bffc17 	ldw	r2,-16(fp)
 101b9d8:	1889883a 	add	r4,r3,r2
 101b9dc:	101b18c0 	call	101b18c <get_dir_divider_location>
 101b9e0:	e0bff515 	stw	r2,-44(fp)
		if (location < 0) {
 101b9e4:	e0bff517 	ldw	r2,-44(fp)
 101b9e8:	1004403a 	cmpge	r2,r2,zero
 101b9ec:	1000021e 	bne	r2,zero,101b9f8 <get_home_directory_cluster_for_file+0x4c0>
			// Directory has been located.
			result = true;
 101b9f0:	00800044 	movi	r2,1
 101b9f4:	e0bff715 	stw	r2,-36(fp)
	int location, index;
	int start_location = 0;

	/* Get Next Directory. */
	location = get_dir_divider_location(file_name);
	while (location > 0) {
 101b9f8:	e0bff517 	ldw	r2,-44(fp)
 101b9fc:	10800048 	cmpgei	r2,r2,1
 101ba00:	103edb1e 	bne	r2,zero,101b570 <get_home_directory_cluster_for_file+0x38>
			// Directory has been located.
			result = true;
		}
	}

	*home_directory_cluster = home_dir_cluster;
 101ba04:	e0fffd17 	ldw	r3,-12(fp)
 101ba08:	e0bff617 	ldw	r2,-40(fp)
 101ba0c:	18800015 	stw	r2,0(r3)
	if (home_dir_cluster == 0) {
 101ba10:	e0bff617 	ldw	r2,-40(fp)
 101ba14:	1004c03a 	cmpne	r2,r2,zero
 101ba18:	1000041e 	bne	r2,zero,101ba2c <get_home_directory_cluster_for_file+0x4f4>
		file_record->file_record_cluster = 0; // Home directory is the root directory.
 101ba1c:	e0bffe17 	ldw	r2,-8(fp)
 101ba20:	10000a15 	stw	zero,40(r2)
		result = true;
 101ba24:	00800044 	movi	r2,1
 101ba28:	e0bff715 	stw	r2,-36(fp)
	}
	return result;
 101ba2c:	e0bff717 	ldw	r2,-36(fp)
 101ba30:	e0bfff15 	stw	r2,-4(fp)
 101ba34:	e0bfff17 	ldw	r2,-4(fp)
}
 101ba38:	e037883a 	mov	sp,fp
 101ba3c:	dfc00117 	ldw	ra,4(sp)
 101ba40:	df000017 	ldw	fp,0(sp)
 101ba44:	dec00204 	addi	sp,sp,8
 101ba48:	f800283a 	ret

0101ba4c <find_file_in_directory>:

bool find_file_in_directory(int directory_start_cluster, char *file_name,
	t_file_record *file_record)
	// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
 101ba4c:	deffe704 	addi	sp,sp,-100
 101ba50:	dfc01815 	stw	ra,96(sp)
 101ba54:	df001715 	stw	fp,92(sp)
 101ba58:	df001704 	addi	fp,sp,92
 101ba5c:	e13ffc15 	stw	r4,-16(fp)
 101ba60:	e17ffd15 	stw	r5,-12(fp)
 101ba64:	e1bffe15 	stw	r6,-8(fp)
	int location = get_dir_divider_location(file_name);
 101ba68:	e13ffd17 	ldw	r4,-12(fp)
 101ba6c:	101b18c0 	call	101b18c <get_dir_divider_location>
 101ba70:	e0bff715 	stw	r2,-36(fp)
	int last_dir_separator = 0;
 101ba74:	e03ff615 	stw	zero,-40(fp)
	char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
 101ba78:	00800804 	movi	r2,32
 101ba7c:	e0bff805 	stb	r2,-32(fp)
 101ba80:	00800804 	movi	r2,32
 101ba84:	e0bff845 	stb	r2,-31(fp)
 101ba88:	00800804 	movi	r2,32
 101ba8c:	e0bff885 	stb	r2,-30(fp)
 101ba90:	00800804 	movi	r2,32
 101ba94:	e0bff8c5 	stb	r2,-29(fp)
 101ba98:	00800804 	movi	r2,32
 101ba9c:	e0bff905 	stb	r2,-28(fp)
 101baa0:	00800804 	movi	r2,32
 101baa4:	e0bff945 	stb	r2,-27(fp)
 101baa8:	00800804 	movi	r2,32
 101baac:	e0bff985 	stb	r2,-26(fp)
 101bab0:	00800804 	movi	r2,32
 101bab4:	e0bff9c5 	stb	r2,-25(fp)
	char extension[3] = { ' ', ' ', ' ' };
 101bab8:	00800804 	movi	r2,32
 101babc:	e0bffa05 	stb	r2,-24(fp)
 101bac0:	00800804 	movi	r2,32
 101bac4:	e0bffa45 	stb	r2,-23(fp)
 101bac8:	00800804 	movi	r2,32
 101bacc:	e0bffa85 	stb	r2,-22(fp)
	int ext_index = -1;
 101bad0:	00bfffc4 	movi	r2,-1
 101bad4:	e0bff515 	stw	r2,-44(fp)
	int cluster = directory_start_cluster;
 101bad8:	e0bffc17 	ldw	r2,-16(fp)
 101badc:	e0bff415 	stw	r2,-48(fp)
	int index;
	int length = strlen(file_name);
 101bae0:	e13ffd17 	ldw	r4,-12(fp)
 101bae4:	100e3080 	call	100e308 <strlen>
 101bae8:	e0bff215 	stw	r2,-56(fp)
	bool result = false;
 101baec:	e03ff115 	stw	zero,-60(fp)

	// Skip through all directory separators.
	while (location > 0) {
 101baf0:	00000b06 	br	101bb20 <find_file_in_directory+0xd4>
		last_dir_separator = last_dir_separator + location + 1;
 101baf4:	e0fff617 	ldw	r3,-40(fp)
 101baf8:	e0bff717 	ldw	r2,-36(fp)
 101bafc:	1885883a 	add	r2,r3,r2
 101bb00:	10800044 	addi	r2,r2,1
 101bb04:	e0bff615 	stw	r2,-40(fp)
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
 101bb08:	e0bff617 	ldw	r2,-40(fp)
 101bb0c:	1007883a 	mov	r3,r2
 101bb10:	e0bffd17 	ldw	r2,-12(fp)
 101bb14:	1889883a 	add	r4,r3,r2
 101bb18:	101b18c0 	call	101b18c <get_dir_divider_location>
 101bb1c:	e0bff715 	stw	r2,-36(fp)
	int index;
	int length = strlen(file_name);
	bool result = false;

	// Skip through all directory separators.
	while (location > 0) {
 101bb20:	e0bff717 	ldw	r2,-36(fp)
 101bb24:	10800048 	cmpgei	r2,r2,1
 101bb28:	103ff21e 	bne	r2,zero,101baf4 <find_file_in_directory+0xa8>
		last_dir_separator = last_dir_separator + location + 1;
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
	}

	// Get the name of the file in name/extension format.
	for (index = last_dir_separator; index < length; index++) {
 101bb2c:	e0bff617 	ldw	r2,-40(fp)
 101bb30:	e0bff315 	stw	r2,-52(fp)
 101bb34:	00002b06 	br	101bbe4 <find_file_in_directory+0x198>
		if (file_name[index] == '.') {
 101bb38:	e0bff317 	ldw	r2,-52(fp)
 101bb3c:	1007883a 	mov	r3,r2
 101bb40:	e0bffd17 	ldw	r2,-12(fp)
 101bb44:	1885883a 	add	r2,r3,r2
 101bb48:	10800003 	ldbu	r2,0(r2)
 101bb4c:	10803fcc 	andi	r2,r2,255
 101bb50:	1080201c 	xori	r2,r2,128
 101bb54:	10bfe004 	addi	r2,r2,-128
 101bb58:	10800b98 	cmpnei	r2,r2,46
 101bb5c:	1000031e 	bne	r2,zero,101bb6c <find_file_in_directory+0x120>
			ext_index = index;
 101bb60:	e0bff317 	ldw	r2,-52(fp)
 101bb64:	e0bff515 	stw	r2,-44(fp)
 101bb68:	00001b06 	br	101bbd8 <find_file_in_directory+0x18c>
		}
		else if (ext_index < 0) {
 101bb6c:	e0bff517 	ldw	r2,-44(fp)
 101bb70:	1004403a 	cmpge	r2,r2,zero
 101bb74:	10000c1e 	bne	r2,zero,101bba8 <find_file_in_directory+0x15c>
			name[index - last_dir_separator] = file_name[index];
 101bb78:	e0fff317 	ldw	r3,-52(fp)
 101bb7c:	e0bff617 	ldw	r2,-40(fp)
 101bb80:	1889c83a 	sub	r4,r3,r2
 101bb84:	e0bff317 	ldw	r2,-52(fp)
 101bb88:	1007883a 	mov	r3,r2
 101bb8c:	e0bffd17 	ldw	r2,-12(fp)
 101bb90:	1885883a 	add	r2,r3,r2
 101bb94:	10c00003 	ldbu	r3,0(r2)
 101bb98:	e0bff804 	addi	r2,fp,-32
 101bb9c:	1105883a 	add	r2,r2,r4
 101bba0:	10c00005 	stb	r3,0(r2)
 101bba4:	00000c06 	br	101bbd8 <find_file_in_directory+0x18c>
		}
		else {
			extension[index - ext_index - 1] = file_name[index];
 101bba8:	e0fff317 	ldw	r3,-52(fp)
 101bbac:	e0bff517 	ldw	r2,-44(fp)
 101bbb0:	1885c83a 	sub	r2,r3,r2
 101bbb4:	113fffc4 	addi	r4,r2,-1
 101bbb8:	e0bff317 	ldw	r2,-52(fp)
 101bbbc:	1007883a 	mov	r3,r2
 101bbc0:	e0bffd17 	ldw	r2,-12(fp)
 101bbc4:	1885883a 	add	r2,r3,r2
 101bbc8:	10c00003 	ldbu	r3,0(r2)
 101bbcc:	e0bffa04 	addi	r2,fp,-24
 101bbd0:	1105883a 	add	r2,r2,r4
 101bbd4:	10c00005 	stb	r3,0(r2)
		last_dir_separator = last_dir_separator + location + 1;
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
	}

	// Get the name of the file in name/extension format.
	for (index = last_dir_separator; index < length; index++) {
 101bbd8:	e0bff317 	ldw	r2,-52(fp)
 101bbdc:	10800044 	addi	r2,r2,1
 101bbe0:	e0bff315 	stw	r2,-52(fp)
 101bbe4:	e0fff317 	ldw	r3,-52(fp)
 101bbe8:	e0bff217 	ldw	r2,-56(fp)
 101bbec:	18bfd216 	blt	r3,r2,101bb38 <find_file_in_directory+0xec>
			extension[index - ext_index - 1] = file_name[index];
		}
	}

	// Look for the file.
	if (directory_start_cluster == 0) {
 101bbf0:	e0bffc17 	ldw	r2,-16(fp)
 101bbf4:	1004c03a 	cmpne	r2,r2,zero
 101bbf8:	1000441e 	bne	r2,zero,101bd0c <find_file_in_directory+0x2c0>
		/* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
		int max_root_dir_sectors = ((32
			* boot_sector_data.max_number_of_dir_entires)
			/ boot_sector_data.sector_size_in_bytes);
 101bbfc:	00804234 	movhi	r2,264
 101bc00:	10ac2604 	addi	r2,r2,-20328
 101bc04:	1080050b 	ldhu	r2,20(r2)
 101bc08:	10bfffcc 	andi	r2,r2,65535
 101bc0c:	1006917a 	slli	r3,r2,5
 101bc10:	00804234 	movhi	r2,264
 101bc14:	10ac2604 	addi	r2,r2,-20328
 101bc18:	1080030b 	ldhu	r2,12(r2)
 101bc1c:	10bfffcc 	andi	r2,r2,65535
 101bc20:	1885283a 	div	r2,r3,r2
 101bc24:	e0bff015 	stw	r2,-64(fp)
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors;
 101bc28:	e03fef15 	stw	zero,-68(fp)
 101bc2c:	00003306 	br	101bcfc <find_file_in_directory+0x2b0>
			sector_index++) {
			if (Read_Sector_Data(
 101bc30:	00804234 	movhi	r2,264
 101bc34:	10ac2604 	addi	r2,r2,-20328
 101bc38:	10c01317 	ldw	r3,76(r2)
 101bc3c:	e0bfef17 	ldw	r2,-68(fp)
 101bc40:	1885883a 	add	r2,r3,r2
 101bc44:	1009883a 	mov	r4,r2
 101bc48:	d1671a17 	ldw	r5,-25496(gp)
 101bc4c:	1019d640 	call	1019d64 <Read_Sector_Data>
 101bc50:	1005003a 	cmpeq	r2,r2,zero
 101bc54:	10008e1e 	bne	r2,zero,101be90 <find_file_in_directory+0x444>
				sector_index
				+ boot_sector_data.root_directory_sector_offset,
				fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
 101bc58:	e03fee15 	stw	zero,-72(fp)
 101bc5c:	00001e06 	br	101bcd8 <find_file_in_directory+0x28c>
					// Read file record.
					Read_File_Record_At_Offset(file_counter * 32, file_record,
 101bc60:	e0bfee17 	ldw	r2,-72(fp)
 101bc64:	1008917a 	slli	r4,r2,5
 101bc68:	e1ffef17 	ldw	r7,-68(fp)
 101bc6c:	e17ffe17 	ldw	r5,-8(fp)
 101bc70:	000d883a 	mov	r6,zero
 101bc74:	101a1ac0 	call	101a1ac <Read_File_Record_At_Offset>
						0, sector_index);
					if ((file_record->name[0] != 0xe5)
 101bc78:	e0bffe17 	ldw	r2,-8(fp)
 101bc7c:	10800003 	ldbu	r2,0(r2)
 101bc80:	10803fcc 	andi	r2,r2,255
 101bc84:	10803960 	cmpeqi	r2,r2,229
 101bc88:	1000101e 	bne	r2,zero,101bccc <find_file_in_directory+0x280>
 101bc8c:	e0bffe17 	ldw	r2,-8(fp)
 101bc90:	10800003 	ldbu	r2,0(r2)
 101bc94:	10803fcc 	andi	r2,r2,255
 101bc98:	1005003a 	cmpeq	r2,r2,zero
 101bc9c:	10000b1e 	bne	r2,zero,101bccc <find_file_in_directory+0x280>
						&& (file_record->name[0] != 0x00)) {
						bool match = match_file_record_to_name_ext(file_record,
							name, extension);
 101bca0:	e17ff804 	addi	r5,fp,-32
 101bca4:	e1bffa04 	addi	r6,fp,-24
 101bca8:	e13ffe17 	ldw	r4,-8(fp)
 101bcac:	101b24c0 	call	101b24c <match_file_record_to_name_ext>
 101bcb0:	e0bfed15 	stw	r2,-76(fp)

						if (match) {
 101bcb4:	e0bfed17 	ldw	r2,-76(fp)
 101bcb8:	1005003a 	cmpeq	r2,r2,zero
 101bcbc:	1000031e 	bne	r2,zero,101bccc <find_file_in_directory+0x280>
							result = true;
 101bcc0:	00800044 	movi	r2,1
 101bcc4:	e0bff115 	stw	r2,-60(fp)
							break;
 101bcc8:	00000606 	br	101bce4 <find_file_in_directory+0x298>
				sector_index
				+ boot_sector_data.root_directory_sector_offset,
				fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
 101bccc:	e0bfee17 	ldw	r2,-72(fp)
 101bcd0:	10800044 	addi	r2,r2,1
 101bcd4:	e0bfee15 	stw	r2,-72(fp)
 101bcd8:	e0bfee17 	ldw	r2,-72(fp)
 101bcdc:	10800410 	cmplti	r2,r2,16
 101bce0:	103fdf1e 	bne	r2,zero,101bc60 <find_file_in_directory+0x214>
				}
			}
			else {
				break;
			}
			if (result) {
 101bce4:	e0bff117 	ldw	r2,-60(fp)
 101bce8:	1004c03a 	cmpne	r2,r2,zero
 101bcec:	1000681e 	bne	r2,zero,101be90 <find_file_in_directory+0x444>
			* boot_sector_data.max_number_of_dir_entires)
			/ boot_sector_data.sector_size_in_bytes);
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors;
			sector_index++) {
 101bcf0:	e0bfef17 	ldw	r2,-68(fp)
 101bcf4:	10800044 	addi	r2,r2,1
 101bcf8:	e0bfef15 	stw	r2,-68(fp)
		int max_root_dir_sectors = ((32
			* boot_sector_data.max_number_of_dir_entires)
			/ boot_sector_data.sector_size_in_bytes);
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors;
 101bcfc:	e0ffef17 	ldw	r3,-68(fp)
 101bd00:	e0bff017 	ldw	r2,-64(fp)
 101bd04:	18bfca16 	blt	r3,r2,101bc30 <find_file_in_directory+0x1e4>
 101bd08:	00006106 	br	101be90 <find_file_in_directory+0x444>
	}
	else {
		do {
			int start_sector = (cluster - 2)
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
 101bd0c:	e0bff417 	ldw	r2,-48(fp)
 101bd10:	10ffff84 	addi	r3,r2,-2
 101bd14:	00804234 	movhi	r2,264
 101bd18:	10ac2604 	addi	r2,r2,-20328
 101bd1c:	10800383 	ldbu	r2,14(r2)
 101bd20:	10803fcc 	andi	r2,r2,255
 101bd24:	1885383a 	mul	r2,r3,r2
 101bd28:	1007883a 	mov	r3,r2
 101bd2c:	00804234 	movhi	r2,264
 101bd30:	10ac2604 	addi	r2,r2,-20328
 101bd34:	10801417 	ldw	r2,80(r2)
 101bd38:	1885883a 	add	r2,r3,r2
 101bd3c:	e0bfec15 	stw	r2,-80(fp)
			int sector_index;

			for (sector_index = 0;
 101bd40:	e03feb15 	stw	zero,-84(fp)
				sector_index < boot_sector_data.sectors_per_cluster;
 101bd44:	00003006 	br	101be08 <find_file_in_directory+0x3bc>
				sector_index++) {
				if (Read_Sector_Data(sector_index + start_sector,
 101bd48:	e0ffeb17 	ldw	r3,-84(fp)
 101bd4c:	e0bfec17 	ldw	r2,-80(fp)
 101bd50:	1889883a 	add	r4,r3,r2
 101bd54:	d1671a17 	ldw	r5,-25496(gp)
 101bd58:	1019d640 	call	1019d64 <Read_Sector_Data>
 101bd5c:	1005003a 	cmpeq	r2,r2,zero
 101bd60:	10002f1e 	bne	r2,zero,101be20 <find_file_in_directory+0x3d4>
					fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
 101bd64:	e03fea15 	stw	zero,-88(fp)
 101bd68:	00001e06 	br	101bde4 <find_file_in_directory+0x398>
						// Read file record.
						Read_File_Record_At_Offset(file_counter * 32,
 101bd6c:	e0bfea17 	ldw	r2,-88(fp)
 101bd70:	1008917a 	slli	r4,r2,5
 101bd74:	e1bff417 	ldw	r6,-48(fp)
 101bd78:	e1ffeb17 	ldw	r7,-84(fp)
 101bd7c:	e17ffe17 	ldw	r5,-8(fp)
 101bd80:	101a1ac0 	call	101a1ac <Read_File_Record_At_Offset>
							file_record, cluster, sector_index);
						if ((file_record->name[0] != 0xe5)
 101bd84:	e0bffe17 	ldw	r2,-8(fp)
 101bd88:	10800003 	ldbu	r2,0(r2)
 101bd8c:	10803fcc 	andi	r2,r2,255
 101bd90:	10803960 	cmpeqi	r2,r2,229
 101bd94:	1000101e 	bne	r2,zero,101bdd8 <find_file_in_directory+0x38c>
 101bd98:	e0bffe17 	ldw	r2,-8(fp)
 101bd9c:	10800003 	ldbu	r2,0(r2)
 101bda0:	10803fcc 	andi	r2,r2,255
 101bda4:	1005003a 	cmpeq	r2,r2,zero
 101bda8:	10000b1e 	bne	r2,zero,101bdd8 <find_file_in_directory+0x38c>
							&& (file_record->name[0] != 0x00)) {
							bool match = match_file_record_to_name_ext(
								file_record, name, extension);
 101bdac:	e17ff804 	addi	r5,fp,-32
 101bdb0:	e1bffa04 	addi	r6,fp,-24
 101bdb4:	e13ffe17 	ldw	r4,-8(fp)
 101bdb8:	101b24c0 	call	101b24c <match_file_record_to_name_ext>
 101bdbc:	e0bfe915 	stw	r2,-92(fp)

							if (match) {
 101bdc0:	e0bfe917 	ldw	r2,-92(fp)
 101bdc4:	1005003a 	cmpeq	r2,r2,zero
 101bdc8:	1000031e 	bne	r2,zero,101bdd8 <find_file_in_directory+0x38c>
								result = true;
 101bdcc:	00800044 	movi	r2,1
 101bdd0:	e0bff115 	stw	r2,-60(fp)
								break;
 101bdd4:	00000606 	br	101bdf0 <find_file_in_directory+0x3a4>
				sector_index++) {
				if (Read_Sector_Data(sector_index + start_sector,
					fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
 101bdd8:	e0bfea17 	ldw	r2,-88(fp)
 101bddc:	10800044 	addi	r2,r2,1
 101bde0:	e0bfea15 	stw	r2,-88(fp)
 101bde4:	e0bfea17 	ldw	r2,-88(fp)
 101bde8:	10800410 	cmplti	r2,r2,16
 101bdec:	103fdf1e 	bne	r2,zero,101bd6c <find_file_in_directory+0x320>
					}
				}
				else {
					break;
				}
				if (result) {
 101bdf0:	e0bff117 	ldw	r2,-60(fp)
 101bdf4:	1004c03a 	cmpne	r2,r2,zero
 101bdf8:	1000091e 	bne	r2,zero,101be20 <find_file_in_directory+0x3d4>
				+ boot_sector_data.data_sector_offset;
			int sector_index;

			for (sector_index = 0;
				sector_index < boot_sector_data.sectors_per_cluster;
				sector_index++) {
 101bdfc:	e0bfeb17 	ldw	r2,-84(fp)
 101be00:	10800044 	addi	r2,r2,1
 101be04:	e0bfeb15 	stw	r2,-84(fp)
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
			int sector_index;

			for (sector_index = 0;
				sector_index < boot_sector_data.sectors_per_cluster;
 101be08:	00804234 	movhi	r2,264
 101be0c:	10ac2604 	addi	r2,r2,-20328
 101be10:	10800383 	ldbu	r2,14(r2)
 101be14:	10c03fcc 	andi	r3,r2,255
 101be18:	e0bfeb17 	ldw	r2,-84(fp)
 101be1c:	10ffca16 	blt	r2,r3,101bd48 <find_file_in_directory+0x2fc>
					break;
				}
			}
			// If this is the end of the cluster and the file has not been found, then see if there is another cluster
			// that holds data for the current directory.
			if (result == false) {
 101be20:	e0bff117 	ldw	r2,-60(fp)
 101be24:	1004c03a 	cmpne	r2,r2,zero
 101be28:	1000131e 	bne	r2,zero,101be78 <find_file_in_directory+0x42c>
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster)) {
 101be2c:	e13ff417 	ldw	r4,-48(fp)
 101be30:	e17ffb04 	addi	r5,fp,-20
 101be34:	1019e600 	call	1019e60 <get_cluster_flag>
 101be38:	1005003a 	cmpeq	r2,r2,zero
 101be3c:	10000c1e 	bne	r2,zero,101be70 <find_file_in_directory+0x424>
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
 101be40:	e0bffb0b 	ldhu	r2,-20(fp)
 101be44:	10bfffcc 	andi	r2,r2,65535
 101be48:	10fffe0c 	andi	r3,r2,65528
 101be4c:	00bffe14 	movui	r2,65528
 101be50:	1880021e 	bne	r3,r2,101be5c <find_file_in_directory+0x410>
						return false;
 101be54:	e03fff15 	stw	zero,-4(fp)
 101be58:	00000f06 	br	101be98 <find_file_in_directory+0x44c>
					}
					cluster = (new_cluster & 0x0000fff8);
 101be5c:	e0bffb0b 	ldhu	r2,-20(fp)
 101be60:	10bfffcc 	andi	r2,r2,65535
 101be64:	10bffe0c 	andi	r2,r2,65528
 101be68:	e0bff415 	stw	r2,-48(fp)
 101be6c:	00000206 	br	101be78 <find_file_in_directory+0x42c>
				}
				else {
					// Directory path is invalid.
					return false;
 101be70:	e03fff15 	stw	zero,-4(fp)
 101be74:	00000806 	br	101be98 <find_file_in_directory+0x44c>
				}
			}
		} while ((cluster < 0x0000fff8) && (result == false));
 101be78:	e0fff417 	ldw	r3,-48(fp)
 101be7c:	00bffdd4 	movui	r2,65527
 101be80:	10c00316 	blt	r2,r3,101be90 <find_file_in_directory+0x444>
 101be84:	e0bff117 	ldw	r2,-60(fp)
 101be88:	1005003a 	cmpeq	r2,r2,zero
 101be8c:	103f9f1e 	bne	r2,zero,101bd0c <find_file_in_directory+0x2c0>
	}

	return result;
 101be90:	e0bff117 	ldw	r2,-60(fp)
 101be94:	e0bfff15 	stw	r2,-4(fp)
 101be98:	e0bfff17 	ldw	r2,-4(fp)
}
 101be9c:	e037883a 	mov	sp,fp
 101bea0:	dfc00117 	ldw	ra,4(sp)
 101bea4:	df000017 	ldw	fp,0(sp)
 101bea8:	dec00204 	addi	sp,sp,8
 101beac:	f800283a 	ret

0101beb0 <find_first_empty_cluster>:

bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
 101beb0:	defff504 	addi	sp,sp,-44
 101beb4:	dfc00a15 	stw	ra,40(sp)
 101beb8:	df000915 	stw	fp,36(sp)
 101bebc:	df000904 	addi	fp,sp,36
 101bec0:	e13fff15 	stw	r4,-4(fp)
	unsigned int sector = boot_sector_data.first_fat_sector_offset;
 101bec4:	00804234 	movhi	r2,264
 101bec8:	10ac2604 	addi	r2,r2,-20328
 101becc:	10801117 	ldw	r2,68(r2)
 101bed0:	e0bffe15 	stw	r2,-8(fp)
	unsigned int cluster_index = 2;
 101bed4:	00800084 	movi	r2,2
 101bed8:	e0bffd15 	stw	r2,-12(fp)
	short int cluster = -1;
 101bedc:	00bfffc4 	movi	r2,-1
 101bee0:	e0bffc0d 	sth	r2,-16(fp)
	bool result = false;
 101bee4:	e03ffb15 	stw	zero,-20(fp)
	unsigned max_cluster_index = 0;
 101bee8:	e03ffa15 	stw	zero,-24(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
 101beec:	00804234 	movhi	r2,264
 101bef0:	10ac2604 	addi	r2,r2,-20328
 101bef4:	10801417 	ldw	r2,80(r2)
 101bef8:	e0bff915 	stw	r2,-28(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
 101befc:	00804234 	movhi	r2,264
 101bf00:	10ac2604 	addi	r2,r2,-20328
 101bf04:	1080058b 	ldhu	r2,22(r2)
 101bf08:	10bfffcc 	andi	r2,r2,65535
 101bf0c:	e0bff815 	stw	r2,-32(fp)
	unsigned int greater_than_32 =
		boot_sector_data.total_sector_count_if_above_32MB;
 101bf10:	00804234 	movhi	r2,264
 101bf14:	10ac2604 	addi	r2,r2,-20328
 101bf18:	10800917 	ldw	r2,36(r2)
 101bf1c:	e0bff715 	stw	r2,-36(fp)

	if (less_than_32 > greater_than_32) {
 101bf20:	e0fff817 	ldw	r3,-32(fp)
 101bf24:	e0bff717 	ldw	r2,-36(fp)
 101bf28:	10c00b2e 	bgeu	r2,r3,101bf58 <find_first_empty_cluster+0xa8>
		max_cluster_index = ((less_than_32 - non_data_sectors)
 101bf2c:	e0fff817 	ldw	r3,-32(fp)
 101bf30:	e0bff917 	ldw	r2,-28(fp)
 101bf34:	1887c83a 	sub	r3,r3,r2
 101bf38:	00804234 	movhi	r2,264
 101bf3c:	10ac2604 	addi	r2,r2,-20328
 101bf40:	10800383 	ldbu	r2,14(r2)
 101bf44:	10803fcc 	andi	r2,r2,255
 101bf48:	1885203a 	divu	r2,r3,r2
 101bf4c:	10800044 	addi	r2,r2,1
 101bf50:	e0bffa15 	stw	r2,-24(fp)
 101bf54:	00002906 	br	101bffc <find_first_empty_cluster+0x14c>
			/ boot_sector_data.sectors_per_cluster) + 1;
	}
	else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
 101bf58:	e0fff717 	ldw	r3,-36(fp)
 101bf5c:	e0bff917 	ldw	r2,-28(fp)
 101bf60:	1887c83a 	sub	r3,r3,r2
 101bf64:	00804234 	movhi	r2,264
 101bf68:	10ac2604 	addi	r2,r2,-20328
 101bf6c:	10800383 	ldbu	r2,14(r2)
 101bf70:	10803fcc 	andi	r2,r2,255
 101bf74:	1885203a 	divu	r2,r3,r2
 101bf78:	10800044 	addi	r2,r2,1
 101bf7c:	e0bffa15 	stw	r2,-24(fp)
			/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
 101bf80:	00001e06 	br	101bffc <find_first_empty_cluster+0x14c>
		if (Read_Sector_Data(sector,
 101bf84:	e13ffe17 	ldw	r4,-8(fp)
 101bf88:	d1671a17 	ldw	r5,-25496(gp)
 101bf8c:	1019d640 	call	1019d64 <Read_Sector_Data>
 101bf90:	1005003a 	cmpeq	r2,r2,zero
 101bf94:	1000131e 	bne	r2,zero,101bfe4 <find_first_empty_cluster+0x134>
			fat_partition_offset_in_512_byte_sectors)) {
			do {
				cluster =
 101bf98:	d0a71c17 	ldw	r2,-25488(gp)
 101bf9c:	10800a17 	ldw	r2,40(r2)
 101bfa0:	1007883a 	mov	r3,r2
 101bfa4:	e0bffd17 	ldw	r2,-12(fp)
 101bfa8:	10803fcc 	andi	r2,r2,255
 101bfac:	1085883a 	add	r2,r2,r2
 101bfb0:	1885883a 	add	r2,r3,r2
 101bfb4:	1080002b 	ldhuio	r2,0(r2)
 101bfb8:	e0bffc0d 	sth	r2,-16(fp)
					((unsigned short int) IORD_16DIRECT(device_pointer->base, 2 * (cluster_index % 256)));
				if (cluster == 0) {
 101bfbc:	e0bffc0f 	ldh	r2,-16(fp)
 101bfc0:	1005003a 	cmpeq	r2,r2,zero
 101bfc4:	1000071e 	bne	r2,zero,101bfe4 <find_first_empty_cluster+0x134>
					// Free cluster found.
					break;
				}
				else {
					cluster_index++;
 101bfc8:	e0bffd17 	ldw	r2,-12(fp)
 101bfcc:	10800044 	addi	r2,r2,1
 101bfd0:	e0bffd15 	stw	r2,-12(fp)
				}
			} while ((cluster_index % 256) != 0);
 101bfd4:	e0bffd17 	ldw	r2,-12(fp)
 101bfd8:	10803fcc 	andi	r2,r2,255
 101bfdc:	1004c03a 	cmpne	r2,r2,zero
 101bfe0:	103fed1e 	bne	r2,zero,101bf98 <find_first_empty_cluster+0xe8>
		}
		if (cluster == 0) {
 101bfe4:	e0bffc0f 	ldh	r2,-16(fp)
 101bfe8:	1005003a 	cmpeq	r2,r2,zero
 101bfec:	1000081e 	bne	r2,zero,101c010 <find_first_empty_cluster+0x160>
			break;
		}
		sector++;
 101bff0:	e0bffe17 	ldw	r2,-8(fp)
 101bff4:	10800044 	addi	r2,r2,1
 101bff8:	e0bffe15 	stw	r2,-8(fp)
	else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
			/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
 101bffc:	00804234 	movhi	r2,264
 101c000:	10ac2604 	addi	r2,r2,-20328
 101c004:	10c01217 	ldw	r3,72(r2)
 101c008:	e0bffe17 	ldw	r2,-8(fp)
 101c00c:	18bfdd1e 	bne	r3,r2,101bf84 <find_first_empty_cluster+0xd4>
		if (cluster == 0) {
			break;
		}
		sector++;
	}
	if ((cluster == 0) && (cluster <= max_cluster_index)) {
 101c010:	e0bffc0f 	ldh	r2,-16(fp)
 101c014:	1004c03a 	cmpne	r2,r2,zero
 101c018:	1000081e 	bne	r2,zero,101c03c <find_first_empty_cluster+0x18c>
 101c01c:	e0fffc0f 	ldh	r3,-16(fp)
 101c020:	e0bffa17 	ldw	r2,-24(fp)
 101c024:	10c00536 	bltu	r2,r3,101c03c <find_first_empty_cluster+0x18c>
		*cluster_number = cluster_index;
 101c028:	e0bfff17 	ldw	r2,-4(fp)
 101c02c:	e0fffd17 	ldw	r3,-12(fp)
 101c030:	10c00015 	stw	r3,0(r2)
		result = true;
 101c034:	00800044 	movi	r2,1
 101c038:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
 101c03c:	e0bffb17 	ldw	r2,-20(fp)
}
 101c040:	e037883a 	mov	sp,fp
 101c044:	dfc00117 	ldw	ra,4(sp)
 101c048:	df000017 	ldw	fp,0(sp)
 101c04c:	dec00204 	addi	sp,sp,8
 101c050:	f800283a 	ret

0101c054 <find_first_empty_record_in_a_subdirectory>:

int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
 101c054:	defff404 	addi	sp,sp,-48
 101c058:	dfc00b15 	stw	ra,44(sp)
 101c05c:	df000a15 	stw	fp,40(sp)
 101c060:	df000a04 	addi	fp,sp,40
 101c064:	e13ffe15 	stw	r4,-8(fp)
	int result = -1;
 101c068:	00bfffc4 	movi	r2,-1
 101c06c:	e0bffb15 	stw	r2,-20(fp)
	int cluster = start_cluster_index;
 101c070:	e0bffe17 	ldw	r2,-8(fp)
 101c074:	e0bffa15 	stw	r2,-24(fp)
	do {
		int start_sector = (cluster - 2)
			* (boot_sector_data.sectors_per_cluster)
			+ boot_sector_data.data_sector_offset;
 101c078:	e0bffa17 	ldw	r2,-24(fp)
 101c07c:	10ffff84 	addi	r3,r2,-2
 101c080:	00804234 	movhi	r2,264
 101c084:	10ac2604 	addi	r2,r2,-20328
 101c088:	10800383 	ldbu	r2,14(r2)
 101c08c:	10803fcc 	andi	r2,r2,255
 101c090:	1885383a 	mul	r2,r3,r2
 101c094:	1007883a 	mov	r3,r2
 101c098:	00804234 	movhi	r2,264
 101c09c:	10ac2604 	addi	r2,r2,-20328
 101c0a0:	10801417 	ldw	r2,80(r2)
 101c0a4:	1885883a 	add	r2,r3,r2
 101c0a8:	e0bff915 	stw	r2,-28(fp)
		int sector_index;

		for (sector_index = 0;
 101c0ac:	e03ff815 	stw	zero,-32(fp)
			sector_index < boot_sector_data.sectors_per_cluster;
 101c0b0:	00002c06 	br	101c164 <find_first_empty_record_in_a_subdirectory+0x110>
			sector_index++) {
			if (Read_Sector_Data(sector_index + start_sector,
 101c0b4:	e0fff817 	ldw	r3,-32(fp)
 101c0b8:	e0bff917 	ldw	r2,-28(fp)
 101c0bc:	1889883a 	add	r4,r3,r2
 101c0c0:	d1671a17 	ldw	r5,-25496(gp)
 101c0c4:	1019d640 	call	1019d64 <Read_Sector_Data>
 101c0c8:	1005003a 	cmpeq	r2,r2,zero
 101c0cc:	10002b1e 	bne	r2,zero,101c17c <find_first_empty_record_in_a_subdirectory+0x128>
				fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
 101c0d0:	e03ff715 	stw	zero,-36(fp)
 101c0d4:	00001d06 	br	101c14c <find_first_empty_record_in_a_subdirectory+0xf8>
					unsigned short int leading_char;

					// Read file record.
					leading_char =
 101c0d8:	d0a71c17 	ldw	r2,-25488(gp)
 101c0dc:	10800a17 	ldw	r2,40(r2)
 101c0e0:	1007883a 	mov	r3,r2
 101c0e4:	e0bff717 	ldw	r2,-36(fp)
 101c0e8:	1004917a 	slli	r2,r2,5
 101c0ec:	1885883a 	add	r2,r3,r2
 101c0f0:	10800023 	ldbuio	r2,0(r2)
 101c0f4:	10803fcc 	andi	r2,r2,255
 101c0f8:	e0bff60d 	sth	r2,-40(fp)
						((unsigned char)IORD_8DIRECT(device_pointer->base, file_counter * 32));
					if ((leading_char == 0x00e5) || (leading_char == 0)) {
 101c0fc:	e0bff60b 	ldhu	r2,-40(fp)
 101c100:	10803960 	cmpeqi	r2,r2,229
 101c104:	1000031e 	bne	r2,zero,101c114 <find_first_empty_record_in_a_subdirectory+0xc0>
 101c108:	e0bff60b 	ldhu	r2,-40(fp)
 101c10c:	1004c03a 	cmpne	r2,r2,zero
 101c110:	10000b1e 	bne	r2,zero,101c140 <find_first_empty_record_in_a_subdirectory+0xec>
						result = (cluster)
 101c114:	e0bff817 	ldw	r2,-32(fp)
 101c118:	1006913a 	slli	r3,r2,4
 101c11c:	e0bff717 	ldw	r2,-36(fp)
 101c120:	1885883a 	add	r2,r3,r2
 101c124:	1006943a 	slli	r3,r2,16
 101c128:	e0bffa17 	ldw	r2,-24(fp)
 101c12c:	1884b03a 	or	r2,r3,r2
 101c130:	e0bffb15 	stw	r2,-20(fp)
							| ((sector_index * 16 + file_counter) << 16);
						return result;
 101c134:	e0bffb17 	ldw	r2,-20(fp)
 101c138:	e0bfff15 	stw	r2,-4(fp)
 101c13c:	00005206 	br	101c288 <find_first_empty_record_in_a_subdirectory+0x234>
			sector_index++) {
			if (Read_Sector_Data(sector_index + start_sector,
				fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
 101c140:	e0bff717 	ldw	r2,-36(fp)
 101c144:	10800044 	addi	r2,r2,1
 101c148:	e0bff715 	stw	r2,-36(fp)
 101c14c:	e0bff717 	ldw	r2,-36(fp)
 101c150:	10800410 	cmplti	r2,r2,16
 101c154:	103fe01e 	bne	r2,zero,101c0d8 <find_first_empty_record_in_a_subdirectory+0x84>
			+ boot_sector_data.data_sector_offset;
		int sector_index;

		for (sector_index = 0;
			sector_index < boot_sector_data.sectors_per_cluster;
			sector_index++) {
 101c158:	e0bff817 	ldw	r2,-32(fp)
 101c15c:	10800044 	addi	r2,r2,1
 101c160:	e0bff815 	stw	r2,-32(fp)
			* (boot_sector_data.sectors_per_cluster)
			+ boot_sector_data.data_sector_offset;
		int sector_index;

		for (sector_index = 0;
			sector_index < boot_sector_data.sectors_per_cluster;
 101c164:	00804234 	movhi	r2,264
 101c168:	10ac2604 	addi	r2,r2,-20328
 101c16c:	10800383 	ldbu	r2,14(r2)
 101c170:	10c03fcc 	andi	r3,r2,255
 101c174:	e0bff817 	ldw	r2,-32(fp)
 101c178:	10ffce16 	blt	r2,r3,101c0b4 <find_first_empty_record_in_a_subdirectory+0x60>
				break;
			}
		}
		// If this is the end of the cluster and the file has not been found, then see if there is another cluster
		// that holds data for the current directory.
		if (result < 0) {
 101c17c:	e0bffb17 	ldw	r2,-20(fp)
 101c180:	1004403a 	cmpge	r2,r2,zero
 101c184:	1000381e 	bne	r2,zero,101c268 <find_first_empty_record_in_a_subdirectory+0x214>
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster)) {
 101c188:	e13ffa17 	ldw	r4,-24(fp)
 101c18c:	e17ffc04 	addi	r5,fp,-16
 101c190:	1019e600 	call	1019e60 <get_cluster_flag>
 101c194:	1005003a 	cmpeq	r2,r2,zero
 101c198:	1000311e 	bne	r2,zero,101c260 <find_first_empty_record_in_a_subdirectory+0x20c>
				// The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
 101c19c:	e0bffc0b 	ldhu	r2,-16(fp)
 101c1a0:	10bfffcc 	andi	r2,r2,65535
 101c1a4:	10fffe0c 	andi	r3,r2,65528
 101c1a8:	00bffe14 	movui	r2,65528
 101c1ac:	18802e1e 	bne	r3,r2,101c268 <find_first_empty_record_in_a_subdirectory+0x214>
					int new_dir_cluster;
					if (find_first_empty_cluster(&new_dir_cluster)) {
 101c1b0:	e13ffd04 	addi	r4,fp,-12
 101c1b4:	101beb00 	call	101beb0 <find_first_empty_cluster>
 101c1b8:	1005003a 	cmpeq	r2,r2,zero
 101c1bc:	1000231e 	bne	r2,zero,101c24c <find_first_empty_record_in_a_subdirectory+0x1f8>
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster,
 101c1c0:	e13ffa17 	ldw	r4,-24(fp)
 101c1c4:	e0bffd17 	ldw	r2,-12(fp)
 101c1c8:	117fffcc 	andi	r5,r2,65535
 101c1cc:	2960001c 	xori	r5,r5,32768
 101c1d0:	29600004 	addi	r5,r5,-32768
 101c1d4:	01800044 	movi	r6,1
 101c1d8:	1019f180 	call	1019f18 <mark_cluster>
 101c1dc:	1005003a 	cmpeq	r2,r2,zero
 101c1e0:	10001a1e 	bne	r2,zero,101c24c <find_first_empty_record_in_a_subdirectory+0x1f8>
 101c1e4:	e0bffd17 	ldw	r2,-12(fp)
 101c1e8:	1009883a 	mov	r4,r2
 101c1ec:	017fffc4 	movi	r5,-1
 101c1f0:	01800044 	movi	r6,1
 101c1f4:	1019f180 	call	1019f18 <mark_cluster>
 101c1f8:	1005003a 	cmpeq	r2,r2,zero
 101c1fc:	1000131e 	bne	r2,zero,101c24c <find_first_empty_record_in_a_subdirectory+0x1f8>
 101c200:	e13ffa17 	ldw	r4,-24(fp)
 101c204:	e0bffd17 	ldw	r2,-12(fp)
 101c208:	117fffcc 	andi	r5,r2,65535
 101c20c:	2960001c 	xori	r5,r5,32768
 101c210:	29600004 	addi	r5,r5,-32768
 101c214:	000d883a 	mov	r6,zero
 101c218:	1019f180 	call	1019f18 <mark_cluster>
 101c21c:	1005003a 	cmpeq	r2,r2,zero
 101c220:	10000a1e 	bne	r2,zero,101c24c <find_first_empty_record_in_a_subdirectory+0x1f8>
 101c224:	e0bffd17 	ldw	r2,-12(fp)
 101c228:	1009883a 	mov	r4,r2
 101c22c:	017fffc4 	movi	r5,-1
 101c230:	000d883a 	mov	r6,zero
 101c234:	1019f180 	call	1019f18 <mark_cluster>
 101c238:	1005003a 	cmpeq	r2,r2,zero
 101c23c:	1000031e 	bne	r2,zero,101c24c <find_first_empty_record_in_a_subdirectory+0x1f8>
							((short int)(0xffff)), true)
							&& mark_cluster(cluster,
							((short int)(new_dir_cluster)), false)
							&& mark_cluster(new_dir_cluster,
							((short int)(0xffff)), false)) {
							Save_Modified_Sector();
 101c240:	1019d140 	call	1019d14 <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;
 101c244:	e0bffd17 	ldw	r2,-12(fp)
 101c248:	e0bffb15 	stw	r2,-20(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
 101c24c:	e0bffc0b 	ldhu	r2,-16(fp)
 101c250:	10bfffcc 	andi	r2,r2,65535
 101c254:	10bffe0c 	andi	r2,r2,65528
 101c258:	e0bffa15 	stw	r2,-24(fp)
 101c25c:	00000206 	br	101c268 <find_first_empty_record_in_a_subdirectory+0x214>
				}
			}
			else {
				// Error encountered.                 
				result = -1;
 101c260:	00bfffc4 	movi	r2,-1
 101c264:	e0bffb15 	stw	r2,-20(fp)
			}
		}
	} while ((cluster < 0x0000fff8) && (result == -1));
 101c268:	e0fffa17 	ldw	r3,-24(fp)
 101c26c:	00bffdd4 	movui	r2,65527
 101c270:	10c00316 	blt	r2,r3,101c280 <find_first_empty_record_in_a_subdirectory+0x22c>
 101c274:	e0bffb17 	ldw	r2,-20(fp)
 101c278:	10bfffe0 	cmpeqi	r2,r2,-1
 101c27c:	103f7e1e 	bne	r2,zero,101c078 <find_first_empty_record_in_a_subdirectory+0x24>
	return result;
 101c280:	e0bffb17 	ldw	r2,-20(fp)
 101c284:	e0bfff15 	stw	r2,-4(fp)
 101c288:	e0bfff17 	ldw	r2,-4(fp)
}
 101c28c:	e037883a 	mov	sp,fp
 101c290:	dfc00117 	ldw	ra,4(sp)
 101c294:	df000017 	ldw	fp,0(sp)
 101c298:	dec00204 	addi	sp,sp,8
 101c29c:	f800283a 	ret

0101c2a0 <find_first_empty_record_in_root_directory>:

int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
 101c2a0:	defff804 	addi	sp,sp,-32
 101c2a4:	dfc00715 	stw	ra,28(sp)
 101c2a8:	df000615 	stw	fp,24(sp)
 101c2ac:	df000604 	addi	fp,sp,24
	int max_root_dir_sectors =
		((32 * boot_sector_data.max_number_of_dir_entires)
		/ boot_sector_data.sector_size_in_bytes);
 101c2b0:	00804234 	movhi	r2,264
 101c2b4:	10ac2604 	addi	r2,r2,-20328
 101c2b8:	1080050b 	ldhu	r2,20(r2)
 101c2bc:	10bfffcc 	andi	r2,r2,65535
 101c2c0:	1006917a 	slli	r3,r2,5
 101c2c4:	00804234 	movhi	r2,264
 101c2c8:	10ac2604 	addi	r2,r2,-20328
 101c2cc:	1080030b 	ldhu	r2,12(r2)
 101c2d0:	10bfffcc 	andi	r2,r2,65535
 101c2d4:	1885283a 	div	r2,r3,r2
 101c2d8:	e0bffe15 	stw	r2,-8(fp)
	int sector_index;
	int result = -1;
 101c2dc:	00bfffc4 	movi	r2,-1
 101c2e0:	e0bffc15 	stw	r2,-16(fp)

	for (sector_index = 0; sector_index < max_root_dir_sectors;
 101c2e4:	e03ffd15 	stw	zero,-12(fp)
 101c2e8:	00002d06 	br	101c3a0 <find_first_empty_record_in_root_directory+0x100>
		sector_index++) {
		if (Read_Sector_Data(
 101c2ec:	00804234 	movhi	r2,264
 101c2f0:	10ac2604 	addi	r2,r2,-20328
 101c2f4:	10c01317 	ldw	r3,76(r2)
 101c2f8:	e0bffd17 	ldw	r2,-12(fp)
 101c2fc:	1885883a 	add	r2,r3,r2
 101c300:	1009883a 	mov	r4,r2
 101c304:	d1671a17 	ldw	r5,-25496(gp)
 101c308:	1019d640 	call	1019d64 <Read_Sector_Data>
 101c30c:	1005003a 	cmpeq	r2,r2,zero
 101c310:	1000261e 	bne	r2,zero,101c3ac <find_first_empty_record_in_root_directory+0x10c>
			sector_index + boot_sector_data.root_directory_sector_offset,
			fat_partition_offset_in_512_byte_sectors)) {
			int file_counter;

			for (file_counter = 0; file_counter < 16; file_counter++) {
 101c314:	e03ffb15 	stw	zero,-20(fp)
 101c318:	00001b06 	br	101c388 <find_first_empty_record_in_root_directory+0xe8>
				unsigned short int leading_char;

				// Read first character of the file record.
				leading_char =
 101c31c:	d0a71c17 	ldw	r2,-25488(gp)
 101c320:	10800a17 	ldw	r2,40(r2)
 101c324:	1007883a 	mov	r3,r2
 101c328:	e0bffb17 	ldw	r2,-20(fp)
 101c32c:	1004917a 	slli	r2,r2,5
 101c330:	1885883a 	add	r2,r3,r2
 101c334:	10800023 	ldbuio	r2,0(r2)
 101c338:	10803fcc 	andi	r2,r2,255
 101c33c:	e0bffa0d 	sth	r2,-24(fp)
					((unsigned char)IORD_8DIRECT(device_pointer->base, file_counter * 32));
				if ((leading_char == 0x00e5) || (leading_char == 0)) {
 101c340:	e0bffa0b 	ldhu	r2,-24(fp)
 101c344:	10803960 	cmpeqi	r2,r2,229
 101c348:	1000031e 	bne	r2,zero,101c358 <find_first_empty_record_in_root_directory+0xb8>
 101c34c:	e0bffa0b 	ldhu	r2,-24(fp)
 101c350:	1004c03a 	cmpne	r2,r2,zero
 101c354:	1000091e 	bne	r2,zero,101c37c <find_first_empty_record_in_root_directory+0xdc>
					result = (sector_index * 16 + file_counter) << 16;
 101c358:	e0bffd17 	ldw	r2,-12(fp)
 101c35c:	1006913a 	slli	r3,r2,4
 101c360:	e0bffb17 	ldw	r2,-20(fp)
 101c364:	1885883a 	add	r2,r3,r2
 101c368:	1004943a 	slli	r2,r2,16
 101c36c:	e0bffc15 	stw	r2,-16(fp)
					return result;
 101c370:	e0bffc17 	ldw	r2,-16(fp)
 101c374:	e0bfff15 	stw	r2,-4(fp)
 101c378:	00000e06 	br	101c3b4 <find_first_empty_record_in_root_directory+0x114>
		if (Read_Sector_Data(
			sector_index + boot_sector_data.root_directory_sector_offset,
			fat_partition_offset_in_512_byte_sectors)) {
			int file_counter;

			for (file_counter = 0; file_counter < 16; file_counter++) {
 101c37c:	e0bffb17 	ldw	r2,-20(fp)
 101c380:	10800044 	addi	r2,r2,1
 101c384:	e0bffb15 	stw	r2,-20(fp)
 101c388:	e0bffb17 	ldw	r2,-20(fp)
 101c38c:	10800410 	cmplti	r2,r2,16
 101c390:	103fe21e 	bne	r2,zero,101c31c <find_first_empty_record_in_root_directory+0x7c>
		/ boot_sector_data.sector_size_in_bytes);
	int sector_index;
	int result = -1;

	for (sector_index = 0; sector_index < max_root_dir_sectors;
		sector_index++) {
 101c394:	e0bffd17 	ldw	r2,-12(fp)
 101c398:	10800044 	addi	r2,r2,1
 101c39c:	e0bffd15 	stw	r2,-12(fp)
		((32 * boot_sector_data.max_number_of_dir_entires)
		/ boot_sector_data.sector_size_in_bytes);
	int sector_index;
	int result = -1;

	for (sector_index = 0; sector_index < max_root_dir_sectors;
 101c3a0:	e0fffd17 	ldw	r3,-12(fp)
 101c3a4:	e0bffe17 	ldw	r2,-8(fp)
 101c3a8:	18bfd016 	blt	r3,r2,101c2ec <find_first_empty_record_in_root_directory+0x4c>
		}
		else {
			break;
		}
	}
	return result;
 101c3ac:	e0bffc17 	ldw	r2,-16(fp)
 101c3b0:	e0bfff15 	stw	r2,-4(fp)
 101c3b4:	e0bfff17 	ldw	r2,-4(fp)
}
 101c3b8:	e037883a 	mov	sp,fp
 101c3bc:	dfc00117 	ldw	ra,4(sp)
 101c3c0:	df000017 	ldw	fp,0(sp)
 101c3c4:	dec00204 	addi	sp,sp,8
 101c3c8:	f800283a 	ret

0101c3cc <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name,
	char *extension)
	// This function converts the file name into a name . extension format.
{
 101c3cc:	defffa04 	addi	sp,sp,-24
 101c3d0:	df000515 	stw	fp,20(sp)
 101c3d4:	df000504 	addi	fp,sp,20
 101c3d8:	e13ffd15 	stw	r4,-12(fp)
 101c3dc:	e17ffe15 	stw	r5,-8(fp)
 101c3e0:	e1bfff15 	stw	r6,-4(fp)
	int counter;
	int local = 0;
 101c3e4:	e03ffb15 	stw	zero,-20(fp)

	for (counter = 0; counter < 8; counter++) {
 101c3e8:	e03ffc15 	stw	zero,-16(fp)
 101c3ec:	00002b06 	br	101c49c <convert_filename_to_name_extension+0xd0>
		if (filename[local] != '.') {
 101c3f0:	e0bffb17 	ldw	r2,-20(fp)
 101c3f4:	1007883a 	mov	r3,r2
 101c3f8:	e0bffd17 	ldw	r2,-12(fp)
 101c3fc:	1885883a 	add	r2,r3,r2
 101c400:	10800003 	ldbu	r2,0(r2)
 101c404:	10803fcc 	andi	r2,r2,255
 101c408:	1080201c 	xori	r2,r2,128
 101c40c:	10bfe004 	addi	r2,r2,-128
 101c410:	10800ba0 	cmpeqi	r2,r2,46
 101c414:	1000181e 	bne	r2,zero,101c478 <convert_filename_to_name_extension+0xac>
			name[counter] = filename[local];
 101c418:	e0bffc17 	ldw	r2,-16(fp)
 101c41c:	1007883a 	mov	r3,r2
 101c420:	e0bffe17 	ldw	r2,-8(fp)
 101c424:	1889883a 	add	r4,r3,r2
 101c428:	e0bffb17 	ldw	r2,-20(fp)
 101c42c:	1007883a 	mov	r3,r2
 101c430:	e0bffd17 	ldw	r2,-12(fp)
 101c434:	1885883a 	add	r2,r3,r2
 101c438:	10800003 	ldbu	r2,0(r2)
 101c43c:	20800005 	stb	r2,0(r4)
			if (filename[local] != 0)
 101c440:	e0bffb17 	ldw	r2,-20(fp)
 101c444:	1007883a 	mov	r3,r2
 101c448:	e0bffd17 	ldw	r2,-12(fp)
 101c44c:	1885883a 	add	r2,r3,r2
 101c450:	10800003 	ldbu	r2,0(r2)
 101c454:	10803fcc 	andi	r2,r2,255
 101c458:	1080201c 	xori	r2,r2,128
 101c45c:	10bfe004 	addi	r2,r2,-128
 101c460:	1005003a 	cmpeq	r2,r2,zero
 101c464:	10000a1e 	bne	r2,zero,101c490 <convert_filename_to_name_extension+0xc4>
				local++;
 101c468:	e0bffb17 	ldw	r2,-20(fp)
 101c46c:	10800044 	addi	r2,r2,1
 101c470:	e0bffb15 	stw	r2,-20(fp)
 101c474:	00000606 	br	101c490 <convert_filename_to_name_extension+0xc4>
		}
		else {
			name[counter] = ' ';
 101c478:	e0bffc17 	ldw	r2,-16(fp)
 101c47c:	1007883a 	mov	r3,r2
 101c480:	e0bffe17 	ldw	r2,-8(fp)
 101c484:	1887883a 	add	r3,r3,r2
 101c488:	00800804 	movi	r2,32
 101c48c:	18800005 	stb	r2,0(r3)
	// This function converts the file name into a name . extension format.
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
 101c490:	e0bffc17 	ldw	r2,-16(fp)
 101c494:	10800044 	addi	r2,r2,1
 101c498:	e0bffc15 	stw	r2,-16(fp)
 101c49c:	e0bffc17 	ldw	r2,-16(fp)
 101c4a0:	10800210 	cmplti	r2,r2,8
 101c4a4:	103fd21e 	bne	r2,zero,101c3f0 <convert_filename_to_name_extension+0x24>
		}
		else {
			name[counter] = ' ';
		}
	}
	if (filename[local] == '.')
 101c4a8:	e0bffb17 	ldw	r2,-20(fp)
 101c4ac:	1007883a 	mov	r3,r2
 101c4b0:	e0bffd17 	ldw	r2,-12(fp)
 101c4b4:	1885883a 	add	r2,r3,r2
 101c4b8:	10800003 	ldbu	r2,0(r2)
 101c4bc:	10803fcc 	andi	r2,r2,255
 101c4c0:	1080201c 	xori	r2,r2,128
 101c4c4:	10bfe004 	addi	r2,r2,-128
 101c4c8:	10800b98 	cmpnei	r2,r2,46
 101c4cc:	1000031e 	bne	r2,zero,101c4dc <convert_filename_to_name_extension+0x110>
		local++;
 101c4d0:	e0bffb17 	ldw	r2,-20(fp)
 101c4d4:	10800044 	addi	r2,r2,1
 101c4d8:	e0bffb15 	stw	r2,-20(fp)
	for (counter = 0; counter < 3; counter++) {
 101c4dc:	e03ffc15 	stw	zero,-16(fp)
 101c4e0:	00002106 	br	101c568 <convert_filename_to_name_extension+0x19c>
		if (filename[local] != 0) {
 101c4e4:	e0bffb17 	ldw	r2,-20(fp)
 101c4e8:	1007883a 	mov	r3,r2
 101c4ec:	e0bffd17 	ldw	r2,-12(fp)
 101c4f0:	1885883a 	add	r2,r3,r2
 101c4f4:	10800003 	ldbu	r2,0(r2)
 101c4f8:	10803fcc 	andi	r2,r2,255
 101c4fc:	1080201c 	xori	r2,r2,128
 101c500:	10bfe004 	addi	r2,r2,-128
 101c504:	1005003a 	cmpeq	r2,r2,zero
 101c508:	10000e1e 	bne	r2,zero,101c544 <convert_filename_to_name_extension+0x178>
			extension[counter] = filename[local];
 101c50c:	e0bffc17 	ldw	r2,-16(fp)
 101c510:	1007883a 	mov	r3,r2
 101c514:	e0bfff17 	ldw	r2,-4(fp)
 101c518:	1889883a 	add	r4,r3,r2
 101c51c:	e0bffb17 	ldw	r2,-20(fp)
 101c520:	1007883a 	mov	r3,r2
 101c524:	e0bffd17 	ldw	r2,-12(fp)
 101c528:	1885883a 	add	r2,r3,r2
 101c52c:	10800003 	ldbu	r2,0(r2)
 101c530:	20800005 	stb	r2,0(r4)
			local++;
 101c534:	e0bffb17 	ldw	r2,-20(fp)
 101c538:	10800044 	addi	r2,r2,1
 101c53c:	e0bffb15 	stw	r2,-20(fp)
 101c540:	00000606 	br	101c55c <convert_filename_to_name_extension+0x190>
		}
		else {
			extension[counter] = ' ';
 101c544:	e0bffc17 	ldw	r2,-16(fp)
 101c548:	1007883a 	mov	r3,r2
 101c54c:	e0bfff17 	ldw	r2,-4(fp)
 101c550:	1887883a 	add	r3,r3,r2
 101c554:	00800804 	movi	r2,32
 101c558:	18800005 	stb	r2,0(r3)
			name[counter] = ' ';
		}
	}
	if (filename[local] == '.')
		local++;
	for (counter = 0; counter < 3; counter++) {
 101c55c:	e0bffc17 	ldw	r2,-16(fp)
 101c560:	10800044 	addi	r2,r2,1
 101c564:	e0bffc15 	stw	r2,-16(fp)
 101c568:	e0bffc17 	ldw	r2,-16(fp)
 101c56c:	108000d0 	cmplti	r2,r2,3
 101c570:	103fdc1e 	bne	r2,zero,101c4e4 <convert_filename_to_name_extension+0x118>
		else {
			extension[counter] = ' ';
		}
	}

}
 101c574:	e037883a 	mov	sp,fp
 101c578:	df000017 	ldw	fp,0(sp)
 101c57c:	dec00104 	addi	sp,sp,4
 101c580:	f800283a 	ret

0101c584 <create_file>:

bool create_file(char *name, t_file_record *file_record,
	t_file_record *home_dir)
	// Create a file in a given directory. Expand the directory if needed.
{
 101c584:	defff304 	addi	sp,sp,-52
 101c588:	dfc00c15 	stw	ra,48(sp)
 101c58c:	df000b15 	stw	fp,44(sp)
 101c590:	df000b04 	addi	fp,sp,44
 101c594:	e13ffb15 	stw	r4,-20(fp)
 101c598:	e17ffc15 	stw	r5,-16(fp)
 101c59c:	e1bffd15 	stw	r6,-12(fp)
	unsigned int cluster_number;
	bool result = false;
 101c5a0:	e03ff915 	stw	zero,-28(fp)

	if (find_first_empty_cluster(&cluster_number)) {
 101c5a4:	e13ffa04 	addi	r4,fp,-24
 101c5a8:	101beb00 	call	101beb0 <find_first_empty_cluster>
 101c5ac:	1005003a 	cmpeq	r2,r2,zero
 101c5b0:	1000a31e 	bne	r2,zero,101c840 <create_file+0x2bc>
		int record_index;

		if (home_dir->file_record_cluster == 0) {
 101c5b4:	e0bffd17 	ldw	r2,-12(fp)
 101c5b8:	10800a17 	ldw	r2,40(r2)
 101c5bc:	1004c03a 	cmpne	r2,r2,zero
 101c5c0:	1000031e 	bne	r2,zero,101c5d0 <create_file+0x4c>
			// Put a file in the root directory.
			record_index = find_first_empty_record_in_root_directory();
 101c5c4:	101c2a00 	call	101c2a0 <find_first_empty_record_in_root_directory>
 101c5c8:	e0bff815 	stw	r2,-32(fp)
 101c5cc:	00000506 	br	101c5e4 <create_file+0x60>
		}
		else {
			// Put a file in a subdirectory.
			record_index = find_first_empty_record_in_a_subdirectory(
 101c5d0:	e0bffd17 	ldw	r2,-12(fp)
 101c5d4:	1080058b 	ldhu	r2,22(r2)
 101c5d8:	113fffcc 	andi	r4,r2,65535
 101c5dc:	101c0540 	call	101c054 <find_first_empty_record_in_a_subdirectory>
 101c5e0:	e0bff815 	stw	r2,-32(fp)
				home_dir->start_cluster_index);
		}
		if (record_index >= 0) {
 101c5e4:	e0bff817 	ldw	r2,-32(fp)
 101c5e8:	1004803a 	cmplt	r2,r2,zero
 101c5ec:	1000941e 	bne	r2,zero,101c840 <create_file+0x2bc>
			unsigned int file_record_sector;
			int location = get_dir_divider_location(name);
 101c5f0:	e13ffb17 	ldw	r4,-20(fp)
 101c5f4:	101b18c0 	call	101b18c <get_dir_divider_location>
 101c5f8:	e0bff615 	stw	r2,-40(fp)
			int last_dir_separator = 0;
 101c5fc:	e03ff515 	stw	zero,-44(fp)

			// Skip through all directory separators.
			while (location > 0) {
 101c600:	00000b06 	br	101c630 <create_file+0xac>
				last_dir_separator = last_dir_separator + location + 1;
 101c604:	e0fff517 	ldw	r3,-44(fp)
 101c608:	e0bff617 	ldw	r2,-40(fp)
 101c60c:	1885883a 	add	r2,r3,r2
 101c610:	10800044 	addi	r2,r2,1
 101c614:	e0bff515 	stw	r2,-44(fp)
				location = get_dir_divider_location(
 101c618:	e0bff517 	ldw	r2,-44(fp)
 101c61c:	1007883a 	mov	r3,r2
 101c620:	e0bffb17 	ldw	r2,-20(fp)
 101c624:	1889883a 	add	r4,r3,r2
 101c628:	101b18c0 	call	101b18c <get_dir_divider_location>
 101c62c:	e0bff615 	stw	r2,-40(fp)
			unsigned int file_record_sector;
			int location = get_dir_divider_location(name);
			int last_dir_separator = 0;

			// Skip through all directory separators.
			while (location > 0) {
 101c630:	e0bff617 	ldw	r2,-40(fp)
 101c634:	10800048 	cmpgei	r2,r2,1
 101c638:	103ff21e 	bne	r2,zero,101c604 <create_file+0x80>
				last_dir_separator = last_dir_separator + location + 1;
				location = get_dir_divider_location(
					&(name[last_dir_separator]));
			}

			convert_filename_to_name_extension(&(name[last_dir_separator]),
 101c63c:	e0bff517 	ldw	r2,-44(fp)
 101c640:	1007883a 	mov	r3,r2
 101c644:	e0bffb17 	ldw	r2,-20(fp)
 101c648:	1889883a 	add	r4,r3,r2
 101c64c:	e0bffc17 	ldw	r2,-16(fp)
 101c650:	100b883a 	mov	r5,r2
 101c654:	e0bffc17 	ldw	r2,-16(fp)
 101c658:	10800204 	addi	r2,r2,8
 101c65c:	100d883a 	mov	r6,r2
 101c660:	101c3cc0 	call	101c3cc <convert_filename_to_name_extension>
				file_record->name, file_record->extension);

			file_record->attributes = 0;
 101c664:	e0bffc17 	ldw	r2,-16(fp)
 101c668:	100002c5 	stb	zero,11(r2)
			file_record->create_time = 0;
 101c66c:	e0bffc17 	ldw	r2,-16(fp)
 101c670:	1000030d 	sth	zero,12(r2)
			file_record->create_date = 0;
 101c674:	e0bffc17 	ldw	r2,-16(fp)
 101c678:	1000038d 	sth	zero,14(r2)
			file_record->last_access_date = 0;
 101c67c:	e0bffc17 	ldw	r2,-16(fp)
 101c680:	1000040d 	sth	zero,16(r2)
			file_record->last_modified_time = 0;
 101c684:	e0bffc17 	ldw	r2,-16(fp)
 101c688:	1000048d 	sth	zero,18(r2)
			file_record->last_modified_date = 0;
 101c68c:	e0bffc17 	ldw	r2,-16(fp)
 101c690:	1000050d 	sth	zero,20(r2)
			file_record->start_cluster_index = cluster_number;
 101c694:	e0bffa17 	ldw	r2,-24(fp)
 101c698:	1007883a 	mov	r3,r2
 101c69c:	e0bffc17 	ldw	r2,-16(fp)
 101c6a0:	10c0058d 	sth	r3,22(r2)
			file_record->file_size_in_bytes = 0;
 101c6a4:	e0bffc17 	ldw	r2,-16(fp)
 101c6a8:	10000615 	stw	zero,24(r2)
			file_record->current_cluster_index = cluster_number;
 101c6ac:	e0fffa17 	ldw	r3,-24(fp)
 101c6b0:	e0bffc17 	ldw	r2,-16(fp)
 101c6b4:	10c00715 	stw	r3,28(r2)
			file_record->current_sector_in_cluster = 0;
 101c6b8:	e0bffc17 	ldw	r2,-16(fp)
 101c6bc:	10000815 	stw	zero,32(r2)
			file_record->current_byte_position = 0;
 101c6c0:	e0bffc17 	ldw	r2,-16(fp)
 101c6c4:	10000915 	stw	zero,36(r2)
			file_record->file_record_cluster = record_index & 0x0000ffff;
 101c6c8:	e0bff817 	ldw	r2,-32(fp)
 101c6cc:	10ffffcc 	andi	r3,r2,65535
 101c6d0:	e0bffc17 	ldw	r2,-16(fp)
 101c6d4:	10c00a15 	stw	r3,40(r2)
			file_record->file_record_sector_in_cluster = ((record_index >> 16)
 101c6d8:	e0bff817 	ldw	r2,-32(fp)
 101c6dc:	1005d43a 	srai	r2,r2,16
 101c6e0:	10bfffcc 	andi	r2,r2,65535
 101c6e4:	e0bfff15 	stw	r2,-4(fp)
 101c6e8:	e0ffff17 	ldw	r3,-4(fp)
 101c6ec:	1804403a 	cmpge	r2,r3,zero
 101c6f0:	1000031e 	bne	r2,zero,101c700 <create_file+0x17c>
 101c6f4:	e0bfff17 	ldw	r2,-4(fp)
 101c6f8:	108003c4 	addi	r2,r2,15
 101c6fc:	e0bfff15 	stw	r2,-4(fp)
 101c700:	e0ffff17 	ldw	r3,-4(fp)
 101c704:	1805d13a 	srai	r2,r3,4
 101c708:	1007883a 	mov	r3,r2
 101c70c:	e0bffc17 	ldw	r2,-16(fp)
 101c710:	10c00b15 	stw	r3,44(r2)
				& 0x0000ffff) / 16;
			file_record->file_record_offset = (((record_index >> 16)
 101c714:	e0bff817 	ldw	r2,-32(fp)
 101c718:	1005d43a 	srai	r2,r2,16
 101c71c:	108003cc 	andi	r2,r2,15
 101c720:	1004917a 	slli	r2,r2,5
 101c724:	1007883a 	mov	r3,r2
 101c728:	e0bffc17 	ldw	r2,-16(fp)
 101c72c:	10c00c0d 	sth	r3,48(r2)
				& 0x0000ffff) % 16) * 32;
			file_record->home_directory_cluster = home_dir->start_cluster_index;
 101c730:	e0bffd17 	ldw	r2,-12(fp)
 101c734:	1080058b 	ldhu	r2,22(r2)
 101c738:	10ffffcc 	andi	r3,r2,65535
 101c73c:	e0bffc17 	ldw	r2,-16(fp)
 101c740:	10c00d15 	stw	r3,52(r2)
			file_record->in_use = true;
 101c744:	e0fffc17 	ldw	r3,-16(fp)
 101c748:	00800044 	movi	r2,1
 101c74c:	18800f15 	stw	r2,60(r3)
			file_record->modified = true;
 101c750:	e0fffc17 	ldw	r3,-16(fp)
 101c754:	00800044 	movi	r2,1
 101c758:	18800e15 	stw	r2,56(r3)
			// Now write the record at the specified location.
			file_record_sector =
 101c75c:	e0bffc17 	ldw	r2,-16(fp)
 101c760:	10800a17 	ldw	r2,40(r2)
 101c764:	1004c03a 	cmpne	r2,r2,zero
 101c768:	1000081e 	bne	r2,zero,101c78c <create_file+0x208>
 101c76c:	00804234 	movhi	r2,264
 101c770:	10ac2604 	addi	r2,r2,-20328
 101c774:	10c01317 	ldw	r3,76(r2)
 101c778:	e0bffc17 	ldw	r2,-16(fp)
 101c77c:	10800b17 	ldw	r2,44(r2)
 101c780:	1887883a 	add	r3,r3,r2
 101c784:	e0fffe15 	stw	r3,-8(fp)
 101c788:	00001006 	br	101c7cc <create_file+0x248>
 101c78c:	00804234 	movhi	r2,264
 101c790:	10ac2604 	addi	r2,r2,-20328
 101c794:	11001417 	ldw	r4,80(r2)
 101c798:	e0bffc17 	ldw	r2,-16(fp)
 101c79c:	10800a17 	ldw	r2,40(r2)
 101c7a0:	10ffff84 	addi	r3,r2,-2
 101c7a4:	00804234 	movhi	r2,264
 101c7a8:	10ac2604 	addi	r2,r2,-20328
 101c7ac:	10800383 	ldbu	r2,14(r2)
 101c7b0:	10803fcc 	andi	r2,r2,255
 101c7b4:	1885383a 	mul	r2,r3,r2
 101c7b8:	2087883a 	add	r3,r4,r2
 101c7bc:	e0bffc17 	ldw	r2,-16(fp)
 101c7c0:	10800b17 	ldw	r2,44(r2)
 101c7c4:	1887883a 	add	r3,r3,r2
 101c7c8:	e0fffe15 	stw	r3,-8(fp)
 101c7cc:	e0bffe17 	ldw	r2,-8(fp)
 101c7d0:	e0bff715 	stw	r2,-36(fp)
				(boot_sector_data.data_sector_offset
				+ (file_record->file_record_cluster - 2)
				* boot_sector_data.sectors_per_cluster
				+ file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector,
 101c7d4:	e13ff717 	ldw	r4,-36(fp)
 101c7d8:	d1671a17 	ldw	r5,-25496(gp)
 101c7dc:	1019d640 	call	1019d64 <Read_Sector_Data>
 101c7e0:	1005003a 	cmpeq	r2,r2,zero
 101c7e4:	1000161e 	bne	r2,zero,101c840 <create_file+0x2bc>
				fat_partition_offset_in_512_byte_sectors)) {
				if (Write_File_Record_At_Offset(file_record->file_record_offset,
 101c7e8:	e0bffc17 	ldw	r2,-16(fp)
 101c7ec:	10800c0b 	ldhu	r2,48(r2)
 101c7f0:	113fffcc 	andi	r4,r2,65535
 101c7f4:	2120001c 	xori	r4,r4,32768
 101c7f8:	21200004 	addi	r4,r4,-32768
 101c7fc:	e17ffc17 	ldw	r5,-16(fp)
 101c800:	101a4300 	call	101a430 <Write_File_Record_At_Offset>
 101c804:	1005003a 	cmpeq	r2,r2,zero
 101c808:	10000d1e 	bne	r2,zero,101c840 <create_file+0x2bc>
					file_record)) {
					Save_Modified_Sector();
 101c80c:	1019d140 	call	1019d14 <Save_Modified_Sector>
					// Mark the first cluster of the file as the last cluster at first.
					mark_cluster(cluster_number, ((short int)(0xffff)), true);
 101c810:	e13ffa17 	ldw	r4,-24(fp)
 101c814:	017fffc4 	movi	r5,-1
 101c818:	01800044 	movi	r6,1
 101c81c:	1019f180 	call	1019f18 <mark_cluster>
					if (mark_cluster(cluster_number, ((short int)(0xffff)),
 101c820:	e13ffa17 	ldw	r4,-24(fp)
 101c824:	017fffc4 	movi	r5,-1
 101c828:	000d883a 	mov	r6,zero
 101c82c:	1019f180 	call	1019f18 <mark_cluster>
 101c830:	1005003a 	cmpeq	r2,r2,zero
 101c834:	1000021e 	bne	r2,zero,101c840 <create_file+0x2bc>
						false)) {
						result = true;
 101c838:	00800044 	movi	r2,1
 101c83c:	e0bff915 	stw	r2,-28(fp)
				}
			}
		}

	}
	return result;
 101c840:	e0bff917 	ldw	r2,-28(fp)
}
 101c844:	e037883a 	mov	sp,fp
 101c848:	dfc00117 	ldw	ra,4(sp)
 101c84c:	df000017 	ldw	fp,0(sp)
 101c850:	dec00204 	addi	sp,sp,8
 101c854:	f800283a 	ret

0101c858 <copy_file_record_name_to_string>:

void copy_file_record_name_to_string(t_file_record *file_record,
	char *file_name)
	/* Copy a file name from the file record to a given string */
{
 101c858:	defffb04 	addi	sp,sp,-20
 101c85c:	df000415 	stw	fp,16(sp)
 101c860:	df000404 	addi	fp,sp,16
 101c864:	e13ffe15 	stw	r4,-8(fp)
 101c868:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
 101c86c:	e03ffc15 	stw	zero,-16(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
 101c870:	e03ffd15 	stw	zero,-12(fp)
 101c874:	00001606 	br	101c8d0 <copy_file_record_name_to_string+0x78>
		if (file_record->name[index] != ' ') {
 101c878:	e0fffd17 	ldw	r3,-12(fp)
 101c87c:	e0bffe17 	ldw	r2,-8(fp)
 101c880:	10c5883a 	add	r2,r2,r3
 101c884:	10800003 	ldbu	r2,0(r2)
 101c888:	10803fcc 	andi	r2,r2,255
 101c88c:	10800820 	cmpeqi	r2,r2,32
 101c890:	10000c1e 	bne	r2,zero,101c8c4 <copy_file_record_name_to_string+0x6c>
			file_name[flength] = file_record->name[index];
 101c894:	e0bffc17 	ldw	r2,-16(fp)
 101c898:	1007883a 	mov	r3,r2
 101c89c:	e0bfff17 	ldw	r2,-4(fp)
 101c8a0:	1889883a 	add	r4,r3,r2
 101c8a4:	e0fffd17 	ldw	r3,-12(fp)
 101c8a8:	e0bffe17 	ldw	r2,-8(fp)
 101c8ac:	10c5883a 	add	r2,r2,r3
 101c8b0:	10800003 	ldbu	r2,0(r2)
 101c8b4:	20800005 	stb	r2,0(r4)
			flength = flength + 1;
 101c8b8:	e0bffc17 	ldw	r2,-16(fp)
 101c8bc:	10800044 	addi	r2,r2,1
 101c8c0:	e0bffc15 	stw	r2,-16(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
 101c8c4:	e0bffd17 	ldw	r2,-12(fp)
 101c8c8:	10800044 	addi	r2,r2,1
 101c8cc:	e0bffd15 	stw	r2,-12(fp)
 101c8d0:	e0bffd17 	ldw	r2,-12(fp)
 101c8d4:	10800210 	cmplti	r2,r2,8
 101c8d8:	103fe71e 	bne	r2,zero,101c878 <copy_file_record_name_to_string+0x20>
		if (file_record->name[index] != ' ') {
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ') {
 101c8dc:	e0bffe17 	ldw	r2,-8(fp)
 101c8e0:	10800203 	ldbu	r2,8(r2)
 101c8e4:	10803fcc 	andi	r2,r2,255
 101c8e8:	10800820 	cmpeqi	r2,r2,32
 101c8ec:	1000261e 	bne	r2,zero,101c988 <copy_file_record_name_to_string+0x130>
		file_name[flength] = '.';
 101c8f0:	e0bffc17 	ldw	r2,-16(fp)
 101c8f4:	1007883a 	mov	r3,r2
 101c8f8:	e0bfff17 	ldw	r2,-4(fp)
 101c8fc:	1887883a 	add	r3,r3,r2
 101c900:	00800b84 	movi	r2,46
 101c904:	18800005 	stb	r2,0(r3)
		flength = flength + 1;
 101c908:	e0bffc17 	ldw	r2,-16(fp)
 101c90c:	10800044 	addi	r2,r2,1
 101c910:	e0bffc15 	stw	r2,-16(fp)
		for (index = 0; index < 3; index++) {
 101c914:	e03ffd15 	stw	zero,-12(fp)
 101c918:	00001806 	br	101c97c <copy_file_record_name_to_string+0x124>
			if (file_record->extension[index] != ' ') {
 101c91c:	e0fffd17 	ldw	r3,-12(fp)
 101c920:	e0bffe17 	ldw	r2,-8(fp)
 101c924:	1885883a 	add	r2,r3,r2
 101c928:	10800204 	addi	r2,r2,8
 101c92c:	10800003 	ldbu	r2,0(r2)
 101c930:	10803fcc 	andi	r2,r2,255
 101c934:	10800820 	cmpeqi	r2,r2,32
 101c938:	10000d1e 	bne	r2,zero,101c970 <copy_file_record_name_to_string+0x118>
				file_name[flength] = file_record->extension[index];
 101c93c:	e0bffc17 	ldw	r2,-16(fp)
 101c940:	1007883a 	mov	r3,r2
 101c944:	e0bfff17 	ldw	r2,-4(fp)
 101c948:	1889883a 	add	r4,r3,r2
 101c94c:	e0fffd17 	ldw	r3,-12(fp)
 101c950:	e0bffe17 	ldw	r2,-8(fp)
 101c954:	1885883a 	add	r2,r3,r2
 101c958:	10800204 	addi	r2,r2,8
 101c95c:	10800003 	ldbu	r2,0(r2)
 101c960:	20800005 	stb	r2,0(r4)
				flength = flength + 1;
 101c964:	e0bffc17 	ldw	r2,-16(fp)
 101c968:	10800044 	addi	r2,r2,1
 101c96c:	e0bffc15 	stw	r2,-16(fp)
		}
	}
	if (file_record->extension[0] != ' ') {
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++) {
 101c970:	e0bffd17 	ldw	r2,-12(fp)
 101c974:	10800044 	addi	r2,r2,1
 101c978:	e0bffd15 	stw	r2,-12(fp)
 101c97c:	e0bffd17 	ldw	r2,-12(fp)
 101c980:	108000d0 	cmplti	r2,r2,3
 101c984:	103fe51e 	bne	r2,zero,101c91c <copy_file_record_name_to_string+0xc4>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
 101c988:	e0bffc17 	ldw	r2,-16(fp)
 101c98c:	1007883a 	mov	r3,r2
 101c990:	e0bfff17 	ldw	r2,-4(fp)
 101c994:	1885883a 	add	r2,r3,r2
 101c998:	10000005 	stb	zero,0(r2)
}
 101c99c:	e037883a 	mov	sp,fp
 101c9a0:	df000017 	ldw	fp,0(sp)
 101c9a4:	dec00104 	addi	sp,sp,4
 101c9a8:	f800283a 	ret

0101c9ac <alt_up_sd_card_open_dev>:

///////////////////////////////////////////////////////////////////////////
// Direct functions
///////////////////////////////////////////////////////////////////////////

alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name) {
 101c9ac:	defffc04 	addi	sp,sp,-16
 101c9b0:	dfc00315 	stw	ra,12(sp)
 101c9b4:	df000215 	stw	fp,8(sp)
 101c9b8:	df000204 	addi	fp,sp,8
 101c9bc:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *)alt_find_dev(name,
		&alt_dev_list);
 101c9c0:	e13fff17 	ldw	r4,-4(fp)
 101c9c4:	014040f4 	movhi	r5,259
 101c9c8:	29667d04 	addi	r5,r5,-26124
 101c9cc:	101fa280 	call	101fa28 <alt_find_dev>
 101c9d0:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL) {
 101c9d4:	e0bffe17 	ldw	r2,-8(fp)
 101c9d8:	1005003a 	cmpeq	r2,r2,zero
 101c9dc:	10001e1e 	bne	r2,zero,101ca58 <alt_up_sd_card_open_dev+0xac>
		aux_status_register = ((short int *)SD_CARD_AUX_STATUS(dev->base));
 101c9e0:	e0bffe17 	ldw	r2,-8(fp)
 101c9e4:	10800a17 	ldw	r2,40(r2)
 101c9e8:	10808d04 	addi	r2,r2,564
 101c9ec:	d0a71415 	stw	r2,-25520(gp)
		status_register = ((int *)SD_CARD_STATUS(dev->base));
 101c9f0:	e0bffe17 	ldw	r2,-8(fp)
 101c9f4:	10800a17 	ldw	r2,40(r2)
 101c9f8:	10808904 	addi	r2,r2,548
 101c9fc:	d0a71515 	stw	r2,-25516(gp)
		CSD_register_w0 = ((short int *)SD_CARD_CSD(dev->base, 0));
 101ca00:	e0bffe17 	ldw	r2,-8(fp)
 101ca04:	10800a17 	ldw	r2,40(r2)
 101ca08:	10808404 	addi	r2,r2,528
 101ca0c:	d0a71615 	stw	r2,-25512(gp)
		command_register = ((short int *)SD_CARD_COMMAND(dev->base));
 101ca10:	e0bffe17 	ldw	r2,-8(fp)
 101ca14:	10800a17 	ldw	r2,40(r2)
 101ca18:	10808c04 	addi	r2,r2,560
 101ca1c:	d0a71715 	stw	r2,-25508(gp)
		command_argument_register = ((int *)SD_CARD_ARGUMENT(dev->base));
 101ca20:	e0bffe17 	ldw	r2,-8(fp)
 101ca24:	10800a17 	ldw	r2,40(r2)
 101ca28:	10808b04 	addi	r2,r2,556
 101ca2c:	d0a71815 	stw	r2,-25504(gp)
		buffer_memory = (char *)SD_CARD_BUFFER(dev->base, 0);
 101ca30:	e0bffe17 	ldw	r2,-8(fp)
 101ca34:	10800a17 	ldw	r2,40(r2)
 101ca38:	d0a71915 	stw	r2,-25500(gp)
		device_pointer = dev;
 101ca3c:	e0bffe17 	ldw	r2,-8(fp)
 101ca40:	d0a71c15 	stw	r2,-25488(gp)
		initialized = false;
 101ca44:	d0271215 	stw	zero,-25528(gp)
		is_sd_card_formated_as_FAT16 = false;
 101ca48:	d0271315 	stw	zero,-25524(gp)
		search_data.valid = false;
 101ca4c:	00804234 	movhi	r2,264
 101ca50:	10ac2104 	addi	r2,r2,-20348
 101ca54:	10000415 	stw	zero,16(r2)
	}
	return dev;
 101ca58:	e0bffe17 	ldw	r2,-8(fp)
}
 101ca5c:	e037883a 	mov	sp,fp
 101ca60:	dfc00117 	ldw	ra,4(sp)
 101ca64:	df000017 	ldw	fp,0(sp)
 101ca68:	dec00204 	addi	sp,sp,8
 101ca6c:	f800283a 	ret

0101ca70 <alt_up_sd_card_is_Present>:

bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
 101ca70:	defffd04 	addi	sp,sp,-12
 101ca74:	df000215 	stw	fp,8(sp)
 101ca78:	df000204 	addi	fp,sp,8
	bool result = false;
 101ca7c:	e03fff15 	stw	zero,-4(fp)

	if ((device_pointer != NULL)
 101ca80:	d0a71c17 	ldw	r2,-25488(gp)
 101ca84:	1005003a 	cmpeq	r2,r2,zero
 101ca88:	1000081e 	bne	r2,zero,101caac <alt_up_sd_card_is_Present+0x3c>
 101ca8c:	d0a71417 	ldw	r2,-25520(gp)
 101ca90:	1080002b 	ldhuio	r2,0(r2)
 101ca94:	1080008c 	andi	r2,r2,2
 101ca98:	1005003a 	cmpeq	r2,r2,zero
 101ca9c:	1000031e 	bne	r2,zero,101caac <alt_up_sd_card_is_Present+0x3c>
		&& ((IORD_16DIRECT(aux_status_register, 0) & 0x02) != 0)) {
		result = true;
 101caa0:	00800044 	movi	r2,1
 101caa4:	e0bfff15 	stw	r2,-4(fp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
	bool result = false;

	if ((device_pointer != NULL)
 101caa8:	00001e06 	br	101cb24 <alt_up_sd_card_is_Present+0xb4>
		&& ((IORD_16DIRECT(aux_status_register, 0) & 0x02) != 0)) {
		result = true;
	}
	else if (initialized == true) {
 101caac:	d0a71217 	ldw	r2,-25528(gp)
 101cab0:	10800058 	cmpnei	r2,r2,1
 101cab4:	10001b1e 	bne	r2,zero,101cb24 <alt_up_sd_card_is_Present+0xb4>
		int index;

		initialized = false;
 101cab8:	d0271215 	stw	zero,-25528(gp)
		search_data.valid = false;
 101cabc:	00804234 	movhi	r2,264
 101cac0:	10ac2104 	addi	r2,r2,-20348
 101cac4:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
 101cac8:	d0271315 	stw	zero,-25524(gp)

		for (index = 0; index < MAX_FILES_OPENED; index++) {
 101cacc:	e03ffe15 	stw	zero,-8(fp)
 101cad0:	00001106 	br	101cb18 <alt_up_sd_card_is_Present+0xa8>
			active_files[index].in_use = false;
 101cad4:	e0bffe17 	ldw	r2,-8(fp)
 101cad8:	00c04234 	movhi	r3,264
 101cadc:	18ec3b04 	addi	r3,r3,-20244
 101cae0:	100491ba 	slli	r2,r2,6
 101cae4:	10c5883a 	add	r2,r2,r3
 101cae8:	10800f04 	addi	r2,r2,60
 101caec:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
 101caf0:	e0bffe17 	ldw	r2,-8(fp)
 101caf4:	00c04234 	movhi	r3,264
 101caf8:	18ec3b04 	addi	r3,r3,-20244
 101cafc:	100491ba 	slli	r2,r2,6
 101cb00:	10c5883a 	add	r2,r2,r3
 101cb04:	10800e04 	addi	r2,r2,56
 101cb08:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for (index = 0; index < MAX_FILES_OPENED; index++) {
 101cb0c:	e0bffe17 	ldw	r2,-8(fp)
 101cb10:	10800044 	addi	r2,r2,1
 101cb14:	e0bffe15 	stw	r2,-8(fp)
 101cb18:	e0bffe17 	ldw	r2,-8(fp)
 101cb1c:	10800510 	cmplti	r2,r2,20
 101cb20:	103fec1e 	bne	r2,zero,101cad4 <alt_up_sd_card_is_Present+0x64>
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
	return result;
 101cb24:	e0bfff17 	ldw	r2,-4(fp)
}
 101cb28:	e037883a 	mov	sp,fp
 101cb2c:	df000017 	ldw	fp,0(sp)
 101cb30:	dec00104 	addi	sp,sp,4
 101cb34:	f800283a 	ret

0101cb38 <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
* volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
* If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
* to the SD card as though it was a hard drive.
*/
{
 101cb38:	defffd04 	addi	sp,sp,-12
 101cb3c:	dfc00215 	stw	ra,8(sp)
 101cb40:	df000115 	stw	fp,4(sp)
 101cb44:	df000104 	addi	fp,sp,4
	bool result = false;
 101cb48:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present()) {
 101cb4c:	101ca700 	call	101ca70 <alt_up_sd_card_is_Present>
 101cb50:	1005003a 	cmpeq	r2,r2,zero
 101cb54:	10000d1e 	bne	r2,zero,101cb8c <alt_up_sd_card_is_FAT16+0x54>
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false) {
 101cb58:	d0a71217 	ldw	r2,-25528(gp)
 101cb5c:	1004c03a 	cmpne	r2,r2,zero
 101cb60:	1000071e 	bne	r2,zero,101cb80 <alt_up_sd_card_is_FAT16+0x48>
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
 101cb64:	101ad280 	call	101ad28 <Look_for_FAT16>
 101cb68:	d0a71315 	stw	r2,-25524(gp)
			initialized = is_sd_card_formated_as_FAT16;
 101cb6c:	d0a71317 	ldw	r2,-25524(gp)
 101cb70:	d0a71215 	stw	r2,-25528(gp)
			search_data.valid = false;
 101cb74:	00804234 	movhi	r2,264
 101cb78:	10ac2104 	addi	r2,r2,-20348
 101cb7c:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
 101cb80:	d0a71317 	ldw	r2,-25524(gp)
 101cb84:	e0bfff15 	stw	r2,-4(fp)
 101cb88:	00000206 	br	101cb94 <alt_up_sd_card_is_FAT16+0x5c>
	}
	else {
		// If not then you may as well not open the device.
		initialized = false;
 101cb8c:	d0271215 	stw	zero,-25528(gp)
		is_sd_card_formated_as_FAT16 = false;
 101cb90:	d0271315 	stw	zero,-25524(gp)
	}

	return result;
 101cb94:	e0bfff17 	ldw	r2,-4(fp)
}
 101cb98:	e037883a 	mov	sp,fp
 101cb9c:	dfc00117 	ldw	ra,4(sp)
 101cba0:	df000017 	ldw	fp,0(sp)
 101cba4:	dec00204 	addi	sp,sp,8
 101cba8:	f800283a 	ret

0101cbac <alt_up_sd_card_find_first>:
	* "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
	* Invalid examples include:
	* "/.", "/////." - this is not the root directory.
	* "/first/." - the first character may not be a '/'.
	*/
{
 101cbac:	deffea04 	addi	sp,sp,-88
 101cbb0:	dfc01515 	stw	ra,84(sp)
 101cbb4:	df001415 	stw	fp,80(sp)
 101cbb8:	df001404 	addi	fp,sp,80
 101cbbc:	e13ffe15 	stw	r4,-8(fp)
 101cbc0:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
 101cbc4:	00800084 	movi	r2,2
 101cbc8:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
 101cbcc:	101ca700 	call	101ca70 <alt_up_sd_card_is_Present>
 101cbd0:	1005003a 	cmpeq	r2,r2,zero
 101cbd4:	1000241e 	bne	r2,zero,101cc68 <alt_up_sd_card_find_first+0xbc>
 101cbd8:	d0a71317 	ldw	r2,-25524(gp)
 101cbdc:	1005003a 	cmpeq	r2,r2,zero
 101cbe0:	1000211e 	bne	r2,zero,101cc68 <alt_up_sd_card_find_first+0xbc>
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through,
 101cbe4:	e17fed04 	addi	r5,fp,-76
 101cbe8:	e1bfee04 	addi	r6,fp,-72
 101cbec:	e13ffe17 	ldw	r4,-8(fp)
 101cbf0:	101b5380 	call	101b538 <get_home_directory_cluster_for_file>
 101cbf4:	1005003a 	cmpeq	r2,r2,zero
 101cbf8:	1000191e 	bne	r2,zero,101cc60 <alt_up_sd_card_find_first+0xb4>
			&home_directory_cluster, &file_record)) {
			search_data.directory_root_cluster = home_directory_cluster;
 101cbfc:	e0bfed17 	ldw	r2,-76(fp)
 101cc00:	1007883a 	mov	r3,r2
 101cc04:	00804234 	movhi	r2,264
 101cc08:	10ac2104 	addi	r2,r2,-20348
 101cc0c:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
 101cc10:	e0bfed17 	ldw	r2,-76(fp)
 101cc14:	1007883a 	mov	r3,r2
 101cc18:	00804234 	movhi	r2,264
 101cc1c:	10ac2104 	addi	r2,r2,-20348
 101cc20:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
 101cc24:	00804234 	movhi	r2,264
 101cc28:	10ac2104 	addi	r2,r2,-20348
 101cc2c:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
 101cc30:	00c04234 	movhi	r3,264
 101cc34:	18ec2104 	addi	r3,r3,-20348
 101cc38:	00bfffc4 	movi	r2,-1
 101cc3c:	1880030d 	sth	r2,12(r3)
			search_data.valid = true;
 101cc40:	00c04234 	movhi	r3,264
 101cc44:	18ec2104 	addi	r3,r3,-20348
 101cc48:	00800044 	movi	r2,1
 101cc4c:	18800415 	stw	r2,16(r3)
			result = alt_up_sd_card_find_next(file_name);
 101cc50:	e13fff17 	ldw	r4,-4(fp)
 101cc54:	101cc800 	call	101cc80 <alt_up_sd_card_find_next>
 101cc58:	e0bfec0d 	sth	r2,-80(fp)
 101cc5c:	00000206 	br	101cc68 <alt_up_sd_card_find_first+0xbc>
		}
		else {
			result = 1;
 101cc60:	00800044 	movi	r2,1
 101cc64:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
 101cc68:	e0bfec0f 	ldh	r2,-80(fp)
}
 101cc6c:	e037883a 	mov	sp,fp
 101cc70:	dfc00117 	ldw	ra,4(sp)
 101cc74:	df000017 	ldw	fp,0(sp)
 101cc78:	dec00204 	addi	sp,sp,8
 101cc7c:	f800283a 	ret

0101cc80 <alt_up_sd_card_find_next>:
*		-1 - end of directory.
*		0 - success
*		2 - No card or incorrect card format.
*		3 - find_first has not been called successfully.
*/
{
 101cc80:	deffe404 	addi	sp,sp,-112
 101cc84:	dfc01b15 	stw	ra,108(sp)
 101cc88:	df001a15 	stw	fp,104(sp)
 101cc8c:	df001a04 	addi	fp,sp,104
 101cc90:	e13ffe15 	stw	r4,-8(fp)
	short int result = 2;
 101cc94:	00800084 	movi	r2,2
 101cc98:	e0bfed0d 	sth	r2,-76(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
 101cc9c:	101ca700 	call	101ca70 <alt_up_sd_card_is_Present>
 101cca0:	1005003a 	cmpeq	r2,r2,zero
 101cca4:	1000da1e 	bne	r2,zero,101d010 <alt_up_sd_card_find_next+0x390>
 101cca8:	d0a71317 	ldw	r2,-25524(gp)
 101ccac:	1005003a 	cmpeq	r2,r2,zero
 101ccb0:	1000d71e 	bne	r2,zero,101d010 <alt_up_sd_card_find_next+0x390>
		if (search_data.valid) {
 101ccb4:	00804234 	movhi	r2,264
 101ccb8:	10ac2104 	addi	r2,r2,-20348
 101ccbc:	10800417 	ldw	r2,16(r2)
 101ccc0:	1005003a 	cmpeq	r2,r2,zero
 101ccc4:	1000d01e 	bne	r2,zero,101d008 <alt_up_sd_card_find_next+0x388>
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
 101ccc8:	00804234 	movhi	r2,264
 101cccc:	10ac2104 	addi	r2,r2,-20348
 101ccd0:	10800117 	ldw	r2,4(r2)
 101ccd4:	e0bfec15 	stw	r2,-80(fp)

			if (cluster == 0) {
 101ccd8:	e0bfec17 	ldw	r2,-80(fp)
 101ccdc:	1004c03a 	cmpne	r2,r2,zero
 101cce0:	1000511e 	bne	r2,zero,101ce28 <alt_up_sd_card_find_next+0x1a8>
				// Searching through the root directory
				int max_root_dir_sectors = ((32
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
 101cce4:	00804234 	movhi	r2,264
 101cce8:	10ac2604 	addi	r2,r2,-20328
 101ccec:	1080050b 	ldhu	r2,20(r2)
 101ccf0:	10bfffcc 	andi	r2,r2,65535
 101ccf4:	1006917a 	slli	r3,r2,5
 101ccf8:	00804234 	movhi	r2,264
 101ccfc:	10ac2604 	addi	r2,r2,-20328
 101cd00:	1080030b 	ldhu	r2,12(r2)
 101cd04:	10bfffcc 	andi	r2,r2,65535
 101cd08:	1885283a 	div	r2,r3,r2
 101cd0c:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index = search_data.current_sector_in_cluster;
 101cd10:	00804234 	movhi	r2,264
 101cd14:	10ac2104 	addi	r2,r2,-20348
 101cd18:	10800217 	ldw	r2,8(r2)
 101cd1c:	e0bfea15 	stw	r2,-88(fp)
				int file_counter = search_data.file_index_in_sector + 1;
 101cd20:	00804234 	movhi	r2,264
 101cd24:	10ac2104 	addi	r2,r2,-20348
 101cd28:	1080030b 	ldhu	r2,12(r2)
 101cd2c:	10bfffcc 	andi	r2,r2,65535
 101cd30:	10a0001c 	xori	r2,r2,32768
 101cd34:	10a00004 	addi	r2,r2,-32768
 101cd38:	10800044 	addi	r2,r2,1
 101cd3c:	e0bfe915 	stw	r2,-92(fp)

				for (; sector_index < max_root_dir_sectors; sector_index++) {
 101cd40:	00003306 	br	101ce10 <alt_up_sd_card_find_next+0x190>
					if (Read_Sector_Data(
 101cd44:	00804234 	movhi	r2,264
 101cd48:	10ac2604 	addi	r2,r2,-20328
 101cd4c:	10c01317 	ldw	r3,76(r2)
 101cd50:	e0bfea17 	ldw	r2,-88(fp)
 101cd54:	1885883a 	add	r2,r3,r2
 101cd58:	1009883a 	mov	r4,r2
 101cd5c:	d1671a17 	ldw	r5,-25496(gp)
 101cd60:	1019d640 	call	1019d64 <Read_Sector_Data>
 101cd64:	1005003a 	cmpeq	r2,r2,zero
 101cd68:	10002c1e 	bne	r2,zero,101ce1c <alt_up_sd_card_find_next+0x19c>
						sector_index
						+ boot_sector_data.root_directory_sector_offset,
						fat_partition_offset_in_512_byte_sectors)) {
						for (; file_counter < 16; file_counter++) {
 101cd6c:	00002106 	br	101cdf4 <alt_up_sd_card_find_next+0x174>
							if (Read_File_Record_At_Offset(file_counter * 32,
 101cd70:	e0bfe917 	ldw	r2,-92(fp)
 101cd74:	1008917a 	slli	r4,r2,5
 101cd78:	e1ffea17 	ldw	r7,-88(fp)
 101cd7c:	e17fee04 	addi	r5,fp,-72
 101cd80:	000d883a 	mov	r6,zero
 101cd84:	101a1ac0 	call	101a1ac <Read_File_Record_At_Offset>
 101cd88:	1005003a 	cmpeq	r2,r2,zero
 101cd8c:	1000161e 	bne	r2,zero,101cde8 <alt_up_sd_card_find_next+0x168>
								&file_record, 0, sector_index)) {
								if ((file_record.name[0] != 0)
 101cd90:	e0bfee03 	ldbu	r2,-72(fp)
 101cd94:	10803fcc 	andi	r2,r2,255
 101cd98:	1005003a 	cmpeq	r2,r2,zero
 101cd9c:	1000121e 	bne	r2,zero,101cde8 <alt_up_sd_card_find_next+0x168>
 101cda0:	e0bfee03 	ldbu	r2,-72(fp)
 101cda4:	10803fcc 	andi	r2,r2,255
 101cda8:	10803960 	cmpeqi	r2,r2,229
 101cdac:	10000e1e 	bne	r2,zero,101cde8 <alt_up_sd_card_find_next+0x168>
									&& (file_record.name[0] != 0xe5)) {
									/* Update search structure. */
									search_data.file_index_in_sector =
 101cdb0:	e0bfe917 	ldw	r2,-92(fp)
 101cdb4:	1007883a 	mov	r3,r2
 101cdb8:	00804234 	movhi	r2,264
 101cdbc:	10ac2104 	addi	r2,r2,-20348
 101cdc0:	10c0030d 	sth	r3,12(r2)
										file_counter;
									search_data.current_sector_in_cluster =
 101cdc4:	e0ffea17 	ldw	r3,-88(fp)
 101cdc8:	00804234 	movhi	r2,264
 101cdcc:	10ac2104 	addi	r2,r2,-20348
 101cdd0:	10c00215 	stw	r3,8(r2)
										sector_index;

									/* Copy file name.*/
									copy_file_record_name_to_string(
 101cdd4:	e13fee04 	addi	r4,fp,-72
 101cdd8:	e17ffe17 	ldw	r5,-8(fp)
 101cddc:	101c8580 	call	101c858 <copy_file_record_name_to_string>
										&file_record, file_name);
									return 0;
 101cde0:	e03fff15 	stw	zero,-4(fp)
 101cde4:	00008c06 	br	101d018 <alt_up_sd_card_find_next+0x398>
				for (; sector_index < max_root_dir_sectors; sector_index++) {
					if (Read_Sector_Data(
						sector_index
						+ boot_sector_data.root_directory_sector_offset,
						fat_partition_offset_in_512_byte_sectors)) {
						for (; file_counter < 16; file_counter++) {
 101cde8:	e0bfe917 	ldw	r2,-92(fp)
 101cdec:	10800044 	addi	r2,r2,1
 101cdf0:	e0bfe915 	stw	r2,-92(fp)
 101cdf4:	e0bfe917 	ldw	r2,-92(fp)
 101cdf8:	10800410 	cmplti	r2,r2,16
 101cdfc:	103fdc1e 	bne	r2,zero,101cd70 <alt_up_sd_card_find_next+0xf0>
										&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
 101ce00:	e03fe915 	stw	zero,-92(fp)
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector + 1;

				for (; sector_index < max_root_dir_sectors; sector_index++) {
 101ce04:	e0bfea17 	ldw	r2,-88(fp)
 101ce08:	10800044 	addi	r2,r2,1
 101ce0c:	e0bfea15 	stw	r2,-88(fp)
 101ce10:	e0ffea17 	ldw	r3,-88(fp)
 101ce14:	e0bfeb17 	ldw	r2,-84(fp)
 101ce18:	18bfca16 	blt	r3,r2,101cd44 <alt_up_sd_card_find_next+0xc4>
					}
					else {
						break;
					}
				}
				result = -1;
 101ce1c:	00bfffc4 	movi	r2,-1
 101ce20:	e0bfed0d 	sth	r2,-76(fp)
 101ce24:	00007a06 	br	101d010 <alt_up_sd_card_find_next+0x390>
			}
			else {
				int file_counter = search_data.file_index_in_sector + 1;
 101ce28:	00804234 	movhi	r2,264
 101ce2c:	10ac2104 	addi	r2,r2,-20348
 101ce30:	1080030b 	ldhu	r2,12(r2)
 101ce34:	10bfffcc 	andi	r2,r2,65535
 101ce38:	10a0001c 	xori	r2,r2,32768
 101ce3c:	10a00004 	addi	r2,r2,-32768
 101ce40:	10800044 	addi	r2,r2,1
 101ce44:	e0bfe815 	stw	r2,-96(fp)
				do {
					int start_sector = (cluster - 2)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
 101ce48:	e0bfec17 	ldw	r2,-80(fp)
 101ce4c:	10ffff84 	addi	r3,r2,-2
 101ce50:	00804234 	movhi	r2,264
 101ce54:	10ac2604 	addi	r2,r2,-20328
 101ce58:	10800383 	ldbu	r2,14(r2)
 101ce5c:	10803fcc 	andi	r2,r2,255
 101ce60:	1885383a 	mul	r2,r3,r2
 101ce64:	1007883a 	mov	r3,r2
 101ce68:	00804234 	movhi	r2,264
 101ce6c:	10ac2604 	addi	r2,r2,-20328
 101ce70:	10801417 	ldw	r2,80(r2)
 101ce74:	1885883a 	add	r2,r3,r2
 101ce78:	e0bfe715 	stw	r2,-100(fp)
					int sector_index = search_data.current_sector_in_cluster;
 101ce7c:	00804234 	movhi	r2,264
 101ce80:	10ac2104 	addi	r2,r2,-20348
 101ce84:	10800217 	ldw	r2,8(r2)
 101ce88:	e0bfe615 	stw	r2,-104(fp)

					for (; sector_index < boot_sector_data.sectors_per_cluster;
 101ce8c:	00003406 	br	101cf60 <alt_up_sd_card_find_next+0x2e0>
						sector_index++) {
						if (Read_Sector_Data(sector_index + start_sector,
 101ce90:	e0ffe617 	ldw	r3,-104(fp)
 101ce94:	e0bfe717 	ldw	r2,-100(fp)
 101ce98:	1889883a 	add	r4,r3,r2
 101ce9c:	d1671a17 	ldw	r5,-25496(gp)
 101cea0:	1019d640 	call	1019d64 <Read_Sector_Data>
 101cea4:	1005003a 	cmpeq	r2,r2,zero
 101cea8:	1000331e 	bne	r2,zero,101cf78 <alt_up_sd_card_find_next+0x2f8>
							fat_partition_offset_in_512_byte_sectors)) {
							for (; file_counter < 16; file_counter++) {
 101ceac:	00002506 	br	101cf44 <alt_up_sd_card_find_next+0x2c4>
								if (Read_File_Record_At_Offset(
 101ceb0:	e0bfe817 	ldw	r2,-96(fp)
 101ceb4:	1008917a 	slli	r4,r2,5
 101ceb8:	e1bfec17 	ldw	r6,-80(fp)
 101cebc:	e1ffe617 	ldw	r7,-104(fp)
 101cec0:	e17fee04 	addi	r5,fp,-72
 101cec4:	101a1ac0 	call	101a1ac <Read_File_Record_At_Offset>
 101cec8:	1005003a 	cmpeq	r2,r2,zero
 101cecc:	10001a1e 	bne	r2,zero,101cf38 <alt_up_sd_card_find_next+0x2b8>
									file_counter * 32, &file_record,
									cluster, sector_index)) {
									if ((file_record.name[0] != 0)
 101ced0:	e0bfee03 	ldbu	r2,-72(fp)
 101ced4:	10803fcc 	andi	r2,r2,255
 101ced8:	1005003a 	cmpeq	r2,r2,zero
 101cedc:	1000161e 	bne	r2,zero,101cf38 <alt_up_sd_card_find_next+0x2b8>
 101cee0:	e0bfee03 	ldbu	r2,-72(fp)
 101cee4:	10803fcc 	andi	r2,r2,255
 101cee8:	10803960 	cmpeqi	r2,r2,229
 101ceec:	1000121e 	bne	r2,zero,101cf38 <alt_up_sd_card_find_next+0x2b8>
										&& (file_record.name[0] != 0xe5)) {
										/* Update search structure. */
										search_data.current_cluster_index =
 101cef0:	e0ffec17 	ldw	r3,-80(fp)
 101cef4:	00804234 	movhi	r2,264
 101cef8:	10ac2104 	addi	r2,r2,-20348
 101cefc:	10c00115 	stw	r3,4(r2)
											cluster;
										search_data.file_index_in_sector =
 101cf00:	e0bfe817 	ldw	r2,-96(fp)
 101cf04:	1007883a 	mov	r3,r2
 101cf08:	00804234 	movhi	r2,264
 101cf0c:	10ac2104 	addi	r2,r2,-20348
 101cf10:	10c0030d 	sth	r3,12(r2)
											file_counter;
										search_data.current_sector_in_cluster =
 101cf14:	e0ffe617 	ldw	r3,-104(fp)
 101cf18:	00804234 	movhi	r2,264
 101cf1c:	10ac2104 	addi	r2,r2,-20348
 101cf20:	10c00215 	stw	r3,8(r2)
											sector_index;

										/* Copy file name.*/
										copy_file_record_name_to_string(
 101cf24:	e13fee04 	addi	r4,fp,-72
 101cf28:	e17ffe17 	ldw	r5,-8(fp)
 101cf2c:	101c8580 	call	101c858 <copy_file_record_name_to_string>
											&file_record, file_name);
										return 0;
 101cf30:	e03fff15 	stw	zero,-4(fp)
 101cf34:	00003806 	br	101d018 <alt_up_sd_card_find_next+0x398>

					for (; sector_index < boot_sector_data.sectors_per_cluster;
						sector_index++) {
						if (Read_Sector_Data(sector_index + start_sector,
							fat_partition_offset_in_512_byte_sectors)) {
							for (; file_counter < 16; file_counter++) {
 101cf38:	e0bfe817 	ldw	r2,-96(fp)
 101cf3c:	10800044 	addi	r2,r2,1
 101cf40:	e0bfe815 	stw	r2,-96(fp)
 101cf44:	e0bfe817 	ldw	r2,-96(fp)
 101cf48:	10800410 	cmplti	r2,r2,16
 101cf4c:	103fd81e 	bne	r2,zero,101ceb0 <alt_up_sd_card_find_next+0x230>
											&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
 101cf50:	e03fe815 	stw	zero,-96(fp)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;

					for (; sector_index < boot_sector_data.sectors_per_cluster;
						sector_index++) {
 101cf54:	e0bfe617 	ldw	r2,-104(fp)
 101cf58:	10800044 	addi	r2,r2,1
 101cf5c:	e0bfe615 	stw	r2,-104(fp)
					int start_sector = (cluster - 2)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;

					for (; sector_index < boot_sector_data.sectors_per_cluster;
 101cf60:	00804234 	movhi	r2,264
 101cf64:	10ac2604 	addi	r2,r2,-20328
 101cf68:	10800383 	ldbu	r2,14(r2)
 101cf6c:	10c03fcc 	andi	r3,r2,255
 101cf70:	e0bfe617 	ldw	r2,-104(fp)
 101cf74:	10ffc616 	blt	r2,r3,101ce90 <alt_up_sd_card_find_next+0x210>
							break;
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster) {
 101cf78:	00804234 	movhi	r2,264
 101cf7c:	10ac2604 	addi	r2,r2,-20328
 101cf80:	10800383 	ldbu	r2,14(r2)
 101cf84:	10c03fcc 	andi	r3,r2,255
 101cf88:	e0bfe617 	ldw	r2,-104(fp)
 101cf8c:	10c01a16 	blt	r2,r3,101cff8 <alt_up_sd_card_find_next+0x378>
						short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster)) {
 101cf90:	e13fec17 	ldw	r4,-80(fp)
 101cf94:	e17fed84 	addi	r5,fp,-74
 101cf98:	1019e600 	call	1019e60 <get_cluster_flag>
 101cf9c:	1005003a 	cmpeq	r2,r2,zero
 101cfa0:	1000131e 	bne	r2,zero,101cff0 <alt_up_sd_card_find_next+0x370>
							if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
 101cfa4:	e0bfed8b 	ldhu	r2,-74(fp)
 101cfa8:	10bfffcc 	andi	r2,r2,65535
 101cfac:	10a0001c 	xori	r2,r2,32768
 101cfb0:	10a00004 	addi	r2,r2,-32768
 101cfb4:	10fffe0c 	andi	r3,r2,65528
 101cfb8:	00bffe14 	movui	r2,65528
 101cfbc:	1880051e 	bne	r3,r2,101cfd4 <alt_up_sd_card_find_next+0x354>
								result = -1;
 101cfc0:	00bfffc4 	movi	r2,-1
 101cfc4:	e0bfed0d 	sth	r2,-76(fp)
								search_data.valid = false;
 101cfc8:	00804234 	movhi	r2,264
 101cfcc:	10ac2104 	addi	r2,r2,-20348
 101cfd0:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster)& 0x0000fff8);
 101cfd4:	e0bfed8b 	ldhu	r2,-74(fp)
 101cfd8:	10bfffcc 	andi	r2,r2,65535
 101cfdc:	10a0001c 	xori	r2,r2,32768
 101cfe0:	10a00004 	addi	r2,r2,-32768
 101cfe4:	10bffe0c 	andi	r2,r2,65528
 101cfe8:	e0bfec15 	stw	r2,-80(fp)
 101cfec:	00000206 	br	101cff8 <alt_up_sd_card_find_next+0x378>
						}
						else {
							// Error encountered.                 
							result = -1;
 101cff0:	00bfffc4 	movi	r2,-1
 101cff4:	e0bfed0d 	sth	r2,-76(fp)
						}
					}
				} while (cluster < 0x0000fff8);
 101cff8:	e0ffec17 	ldw	r3,-80(fp)
 101cffc:	00bffdd4 	movui	r2,65527
 101d000:	10ff910e 	bge	r2,r3,101ce48 <alt_up_sd_card_find_next+0x1c8>
 101d004:	00000206 	br	101d010 <alt_up_sd_card_find_next+0x390>
			}
		}
		else {
			// Call Find_First first.
			result = 3;
 101d008:	008000c4 	movi	r2,3
 101d00c:	e0bfed0d 	sth	r2,-76(fp)
		}
	}
	return result;
 101d010:	e0bfed0f 	ldh	r2,-76(fp)
 101d014:	e0bfff15 	stw	r2,-4(fp)
 101d018:	e0bfff17 	ldw	r2,-4(fp)
}
 101d01c:	e037883a 	mov	sp,fp
 101d020:	dfc00117 	ldw	ra,4(sp)
 101d024:	df000017 	ldw	fp,0(sp)
 101d028:	dec00204 	addi	sp,sp,8
 101d02c:	f800283a 	ret

0101d030 <alt_up_sd_card_fopen>:
*      create - a flag set to true to create a file if it does not already exist
* Output:
*      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
*		Return -2 if the specified file has already been opened previously.
*/
{
 101d030:	deffe804 	addi	sp,sp,-96
 101d034:	dfc01715 	stw	ra,92(sp)
 101d038:	df001615 	stw	fp,88(sp)
 101d03c:	df001604 	addi	fp,sp,88
 101d040:	e13ffd15 	stw	r4,-12(fp)
 101d044:	e17ffe15 	stw	r5,-8(fp)
	short int file_record_index = -1;
 101d048:	00bfffc4 	movi	r2,-1
 101d04c:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
 101d050:	101ca700 	call	101ca70 <alt_up_sd_card_is_Present>
 101d054:	1005003a 	cmpeq	r2,r2,zero
 101d058:	1000d71e 	bne	r2,zero,101d3b8 <alt_up_sd_card_fopen+0x388>
 101d05c:	d0a71317 	ldw	r2,-25524(gp)
 101d060:	1005003a 	cmpeq	r2,r2,zero
 101d064:	1000d41e 	bne	r2,zero,101d3b8 <alt_up_sd_card_fopen+0x388>
		unsigned int home_directory_cluster = 0;
 101d068:	e03fec15 	stw	zero,-80(fp)
		* Rules:
		*  - no spaces
		*  - at most 12 chatacters per name, with a period in 9th position.
		*  - a / or a \ every at most 12 characters.
		*/
		filename_to_upper_case(name);
 101d06c:	e13ffd17 	ldw	r4,-12(fp)
 101d070:	101ae2c0 	call	101ae2c <filename_to_upper_case>
		if (check_file_name_for_FAT16_compliance(name)) {
 101d074:	e13ffd17 	ldw	r4,-12(fp)
 101d078:	101aefc0 	call	101aefc <check_file_name_for_FAT16_compliance>
 101d07c:	1005003a 	cmpeq	r2,r2,zero
 101d080:	1000cd1e 	bne	r2,zero,101d3b8 <alt_up_sd_card_fopen+0x388>
			int index;

			/* Get home directory cluster location for the specified file. 0 means root directory. */
			if (!get_home_directory_cluster_for_file(name,
 101d084:	e17fec04 	addi	r5,fp,-80
 101d088:	e1bfed04 	addi	r6,fp,-76
 101d08c:	e13ffd17 	ldw	r4,-12(fp)
 101d090:	101b5380 	call	101b538 <get_home_directory_cluster_for_file>
 101d094:	1004c03a 	cmpne	r2,r2,zero
 101d098:	1000031e 	bne	r2,zero,101d0a8 <alt_up_sd_card_fopen+0x78>
				&home_directory_cluster, &home_dir)) {
				return file_record_index;
 101d09c:	e0bfeb0f 	ldh	r2,-84(fp)
 101d0a0:	e0bfff15 	stw	r2,-4(fp)
 101d0a4:	0000c606 	br	101d3c0 <alt_up_sd_card_fopen+0x390>
			}

			/* Find a free file slot to store file specs in. */
			for (index = 0; index < MAX_FILES_OPENED; index++) {
 101d0a8:	e03fea15 	stw	zero,-88(fp)
 101d0ac:	00000f06 	br	101d0ec <alt_up_sd_card_fopen+0xbc>
				if (active_files[index].in_use == false) {
 101d0b0:	e0bfea17 	ldw	r2,-88(fp)
 101d0b4:	00c04234 	movhi	r3,264
 101d0b8:	18ec3b04 	addi	r3,r3,-20244
 101d0bc:	100491ba 	slli	r2,r2,6
 101d0c0:	10c5883a 	add	r2,r2,r3
 101d0c4:	10800f04 	addi	r2,r2,60
 101d0c8:	10800017 	ldw	r2,0(r2)
 101d0cc:	1004c03a 	cmpne	r2,r2,zero
 101d0d0:	1000031e 	bne	r2,zero,101d0e0 <alt_up_sd_card_fopen+0xb0>
					file_record_index = index;
 101d0d4:	e0bfea17 	ldw	r2,-88(fp)
 101d0d8:	e0bfeb0d 	sth	r2,-84(fp)
					break;
 101d0dc:	00000606 	br	101d0f8 <alt_up_sd_card_fopen+0xc8>
				&home_directory_cluster, &home_dir)) {
				return file_record_index;
			}

			/* Find a free file slot to store file specs in. */
			for (index = 0; index < MAX_FILES_OPENED; index++) {
 101d0e0:	e0bfea17 	ldw	r2,-88(fp)
 101d0e4:	10800044 	addi	r2,r2,1
 101d0e8:	e0bfea15 	stw	r2,-88(fp)
 101d0ec:	e0bfea17 	ldw	r2,-88(fp)
 101d0f0:	10800510 	cmplti	r2,r2,20
 101d0f4:	103fee1e 	bne	r2,zero,101d0b0 <alt_up_sd_card_fopen+0x80>
				if (active_files[index].in_use == false) {
					file_record_index = index;
					break;
				}
			}
			if (file_record_index >= 0) {
 101d0f8:	e0bfeb0f 	ldh	r2,-84(fp)
 101d0fc:	1004803a 	cmplt	r2,r2,zero
 101d100:	1000ad1e 	bne	r2,zero,101d3b8 <alt_up_sd_card_fopen+0x388>
				/* If file record is found, then look for the specified file. If the create flag is set to true
				* and the file is not found, then it should be created in the current directory.
				*/

				if (find_file_in_directory(home_directory_cluster, name,
 101d104:	e0bfec17 	ldw	r2,-80(fp)
 101d108:	1009883a 	mov	r4,r2
 101d10c:	e0bfeb0f 	ldh	r2,-84(fp)
 101d110:	100491ba 	slli	r2,r2,6
 101d114:	1007883a 	mov	r3,r2
 101d118:	00804234 	movhi	r2,264
 101d11c:	10ac3b04 	addi	r2,r2,-20244
 101d120:	188d883a 	add	r6,r3,r2
 101d124:	e17ffd17 	ldw	r5,-12(fp)
 101d128:	101ba4c0 	call	101ba4c <find_file_in_directory>
 101d12c:	1005003a 	cmpeq	r2,r2,zero
 101d130:	10007d1e 	bne	r2,zero,101d328 <alt_up_sd_card_fopen+0x2f8>
					&(active_files[file_record_index]))) {
					if (create) {
 101d134:	e0bffe17 	ldw	r2,-8(fp)
 101d138:	1005003a 	cmpeq	r2,r2,zero
 101d13c:	1000031e 	bne	r2,zero,101d14c <alt_up_sd_card_fopen+0x11c>
						/* Do not allow overwriting existing files for now. */
						return -1;
 101d140:	00bfffc4 	movi	r2,-1
 101d144:	e0bfff15 	stw	r2,-4(fp)
 101d148:	00009d06 	br	101d3c0 <alt_up_sd_card_fopen+0x390>
					}
					active_files[file_record_index].current_cluster_index =
 101d14c:	e17feb0f 	ldh	r5,-84(fp)
 101d150:	e0bfeb0f 	ldh	r2,-84(fp)
 101d154:	00c04234 	movhi	r3,264
 101d158:	18ec3b04 	addi	r3,r3,-20244
 101d15c:	100491ba 	slli	r2,r2,6
 101d160:	10c5883a 	add	r2,r2,r3
 101d164:	10800504 	addi	r2,r2,20
 101d168:	1080008b 	ldhu	r2,2(r2)
 101d16c:	113fffcc 	andi	r4,r2,65535
 101d170:	00c04234 	movhi	r3,264
 101d174:	18ec3b04 	addi	r3,r3,-20244
 101d178:	280491ba 	slli	r2,r5,6
 101d17c:	10c5883a 	add	r2,r2,r3
 101d180:	10800704 	addi	r2,r2,28
 101d184:	11000015 	stw	r4,0(r2)
						active_files[file_record_index].start_cluster_index;
					active_files[file_record_index].current_sector_in_cluster =
 101d188:	e0bfeb0f 	ldh	r2,-84(fp)
 101d18c:	00c04234 	movhi	r3,264
 101d190:	18ec3b04 	addi	r3,r3,-20244
 101d194:	100491ba 	slli	r2,r2,6
 101d198:	10c5883a 	add	r2,r2,r3
 101d19c:	10800804 	addi	r2,r2,32
 101d1a0:	10000015 	stw	zero,0(r2)
						0;
					active_files[file_record_index].current_byte_position = 0;
 101d1a4:	e0bfeb0f 	ldh	r2,-84(fp)
 101d1a8:	00c04234 	movhi	r3,264
 101d1ac:	18ec3b04 	addi	r3,r3,-20244
 101d1b0:	100491ba 	slli	r2,r2,6
 101d1b4:	10c5883a 	add	r2,r2,r3
 101d1b8:	10800904 	addi	r2,r2,36
 101d1bc:	10000015 	stw	zero,0(r2)
					active_files[file_record_index].in_use = true;
 101d1c0:	e0bfeb0f 	ldh	r2,-84(fp)
 101d1c4:	00c04234 	movhi	r3,264
 101d1c8:	18ec3b04 	addi	r3,r3,-20244
 101d1cc:	100491ba 	slli	r2,r2,6
 101d1d0:	10c5883a 	add	r2,r2,r3
 101d1d4:	10c00f04 	addi	r3,r2,60
 101d1d8:	00800044 	movi	r2,1
 101d1dc:	18800015 	stw	r2,0(r3)
					active_files[file_record_index].modified = false;
 101d1e0:	e0bfeb0f 	ldh	r2,-84(fp)
 101d1e4:	00c04234 	movhi	r3,264
 101d1e8:	18ec3b04 	addi	r3,r3,-20244
 101d1ec:	100491ba 	slli	r2,r2,6
 101d1f0:	10c5883a 	add	r2,r2,r3
 101d1f4:	10800e04 	addi	r2,r2,56
 101d1f8:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++) {
 101d1fc:	e03fea15 	stw	zero,-88(fp)
 101d200:	00004506 	br	101d318 <alt_up_sd_card_fopen+0x2e8>
						if ((file_record_index != index)
 101d204:	e0ffeb0f 	ldh	r3,-84(fp)
 101d208:	e0bfea17 	ldw	r2,-88(fp)
 101d20c:	18803f26 	beq	r3,r2,101d30c <alt_up_sd_card_fopen+0x2dc>
 101d210:	e0bfea17 	ldw	r2,-88(fp)
 101d214:	00c04234 	movhi	r3,264
 101d218:	18ec3b04 	addi	r3,r3,-20244
 101d21c:	100491ba 	slli	r2,r2,6
 101d220:	10c5883a 	add	r2,r2,r3
 101d224:	10800f04 	addi	r2,r2,60
 101d228:	10800017 	ldw	r2,0(r2)
 101d22c:	10800058 	cmpnei	r2,r2,1
 101d230:	1000361e 	bne	r2,zero,101d30c <alt_up_sd_card_fopen+0x2dc>
							&& (active_files[index].in_use == true)) {
							if ((active_files[file_record_index].file_record_cluster
 101d234:	e0bfeb0f 	ldh	r2,-84(fp)
 101d238:	00c04234 	movhi	r3,264
 101d23c:	18ec3b04 	addi	r3,r3,-20244
 101d240:	100491ba 	slli	r2,r2,6
 101d244:	10c5883a 	add	r2,r2,r3
 101d248:	10800a04 	addi	r2,r2,40
 101d24c:	11000017 	ldw	r4,0(r2)
 101d250:	e0bfea17 	ldw	r2,-88(fp)
 101d254:	00c04234 	movhi	r3,264
 101d258:	18ec3b04 	addi	r3,r3,-20244
 101d25c:	100491ba 	slli	r2,r2,6
 101d260:	10c5883a 	add	r2,r2,r3
 101d264:	10800a04 	addi	r2,r2,40
 101d268:	10800017 	ldw	r2,0(r2)
 101d26c:	2080271e 	bne	r4,r2,101d30c <alt_up_sd_card_fopen+0x2dc>
 101d270:	e0bfeb0f 	ldh	r2,-84(fp)
 101d274:	00c04234 	movhi	r3,264
 101d278:	18ec3b04 	addi	r3,r3,-20244
 101d27c:	100491ba 	slli	r2,r2,6
 101d280:	10c5883a 	add	r2,r2,r3
 101d284:	10800b04 	addi	r2,r2,44
 101d288:	11000017 	ldw	r4,0(r2)
 101d28c:	e0bfea17 	ldw	r2,-88(fp)
 101d290:	00c04234 	movhi	r3,264
 101d294:	18ec3b04 	addi	r3,r3,-20244
 101d298:	100491ba 	slli	r2,r2,6
 101d29c:	10c5883a 	add	r2,r2,r3
 101d2a0:	10800b04 	addi	r2,r2,44
 101d2a4:	10800017 	ldw	r2,0(r2)
 101d2a8:	2080181e 	bne	r4,r2,101d30c <alt_up_sd_card_fopen+0x2dc>
 101d2ac:	e0bfeb0f 	ldh	r2,-84(fp)
 101d2b0:	00c04234 	movhi	r3,264
 101d2b4:	18ec3b04 	addi	r3,r3,-20244
 101d2b8:	100491ba 	slli	r2,r2,6
 101d2bc:	10c5883a 	add	r2,r2,r3
 101d2c0:	10800c04 	addi	r2,r2,48
 101d2c4:	1100000b 	ldhu	r4,0(r2)
 101d2c8:	e0bfea17 	ldw	r2,-88(fp)
 101d2cc:	00c04234 	movhi	r3,264
 101d2d0:	18ec3b04 	addi	r3,r3,-20244
 101d2d4:	100491ba 	slli	r2,r2,6
 101d2d8:	10c5883a 	add	r2,r2,r3
 101d2dc:	10800c04 	addi	r2,r2,48
 101d2e0:	1080000b 	ldhu	r2,0(r2)
 101d2e4:	20ffffcc 	andi	r3,r4,65535
 101d2e8:	18e0001c 	xori	r3,r3,32768
 101d2ec:	18e00004 	addi	r3,r3,-32768
 101d2f0:	10bfffcc 	andi	r2,r2,65535
 101d2f4:	10a0001c 	xori	r2,r2,32768
 101d2f8:	10a00004 	addi	r2,r2,-32768
 101d2fc:	1880031e 	bne	r3,r2,101d30c <alt_up_sd_card_fopen+0x2dc>
								&& (active_files[file_record_index].file_record_sector_in_cluster
								== active_files[index].file_record_sector_in_cluster)
								&& (active_files[file_record_index].file_record_offset
								== active_files[index].file_record_offset)) {
								// file already in use.
								file_record_index = -2;
 101d300:	00bfff84 	movi	r2,-2
 101d304:	e0bfeb0d 	sth	r2,-84(fp)
								break;
 101d308:	00002b06 	br	101d3b8 <alt_up_sd_card_fopen+0x388>
					active_files[file_record_index].current_byte_position = 0;
					active_files[file_record_index].in_use = true;
					active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++) {
 101d30c:	e0bfea17 	ldw	r2,-88(fp)
 101d310:	10800044 	addi	r2,r2,1
 101d314:	e0bfea15 	stw	r2,-88(fp)
 101d318:	e0bfea17 	ldw	r2,-88(fp)
 101d31c:	10800510 	cmplti	r2,r2,20
 101d320:	103fb81e 	bne	r2,zero,101d204 <alt_up_sd_card_fopen+0x1d4>
 101d324:	00002406 	br	101d3b8 <alt_up_sd_card_fopen+0x388>
							}
						}
					}

				}
				else if (create) {
 101d328:	e0bffe17 	ldw	r2,-8(fp)
 101d32c:	1005003a 	cmpeq	r2,r2,zero
 101d330:	10001f1e 	bne	r2,zero,101d3b0 <alt_up_sd_card_fopen+0x380>
					/* Create file if needed. */
					if (create_file(name, &(active_files[file_record_index]),
 101d334:	e0bfeb0f 	ldh	r2,-84(fp)
 101d338:	100491ba 	slli	r2,r2,6
 101d33c:	1007883a 	mov	r3,r2
 101d340:	00804234 	movhi	r2,264
 101d344:	10ac3b04 	addi	r2,r2,-20244
 101d348:	188b883a 	add	r5,r3,r2
 101d34c:	e1bfed04 	addi	r6,fp,-76
 101d350:	e13ffd17 	ldw	r4,-12(fp)
 101d354:	101c5840 	call	101c584 <create_file>
 101d358:	1005003a 	cmpeq	r2,r2,zero
 101d35c:	1000111e 	bne	r2,zero,101d3a4 <alt_up_sd_card_fopen+0x374>
						&home_dir)) {
						active_files[file_record_index].in_use = true;
 101d360:	e0bfeb0f 	ldh	r2,-84(fp)
 101d364:	00c04234 	movhi	r3,264
 101d368:	18ec3b04 	addi	r3,r3,-20244
 101d36c:	100491ba 	slli	r2,r2,6
 101d370:	10c5883a 	add	r2,r2,r3
 101d374:	10c00f04 	addi	r3,r2,60
 101d378:	00800044 	movi	r2,1
 101d37c:	18800015 	stw	r2,0(r3)
						active_files[file_record_index].modified = true;
 101d380:	e0bfeb0f 	ldh	r2,-84(fp)
 101d384:	00c04234 	movhi	r3,264
 101d388:	18ec3b04 	addi	r3,r3,-20244
 101d38c:	100491ba 	slli	r2,r2,6
 101d390:	10c5883a 	add	r2,r2,r3
 101d394:	10c00e04 	addi	r3,r2,56
 101d398:	00800044 	movi	r2,1
 101d39c:	18800015 	stw	r2,0(r3)
 101d3a0:	00000506 	br	101d3b8 <alt_up_sd_card_fopen+0x388>
					}
					else {
						/* If file creation fails then return an invalid file handle. */
						file_record_index = -1;
 101d3a4:	00bfffc4 	movi	r2,-1
 101d3a8:	e0bfeb0d 	sth	r2,-84(fp)
 101d3ac:	00000206 	br	101d3b8 <alt_up_sd_card_fopen+0x388>
					}
				}
				else {
					/* Otherwise the file could not be opened.*/
					file_record_index = -1;
 101d3b0:	00bfffc4 	movi	r2,-1
 101d3b4:	e0bfeb0d 	sth	r2,-84(fp)
				}
			}
		}
	}

	return file_record_index;
 101d3b8:	e0bfeb0f 	ldh	r2,-84(fp)
 101d3bc:	e0bfff15 	stw	r2,-4(fp)
 101d3c0:	e0bfff17 	ldw	r2,-4(fp)
}
 101d3c4:	e037883a 	mov	sp,fp
 101d3c8:	dfc00117 	ldw	ra,4(sp)
 101d3cc:	df000017 	ldw	fp,0(sp)
 101d3d0:	dec00204 	addi	sp,sp,8
 101d3d4:	f800283a 	ret

0101d3d8 <alt_up_sd_card_set_attributes>:

void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
*/
{
 101d3d8:	defffd04 	addi	sp,sp,-12
 101d3dc:	df000215 	stw	fp,8(sp)
 101d3e0:	df000204 	addi	fp,sp,8
 101d3e4:	e13ffe0d 	sth	r4,-8(fp)
 101d3e8:	e17fff0d 	sth	r5,-4(fp)
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
 101d3ec:	e0bffe0f 	ldh	r2,-8(fp)
 101d3f0:	1004803a 	cmplt	r2,r2,zero
 101d3f4:	1000181e 	bne	r2,zero,101d458 <alt_up_sd_card_set_attributes+0x80>
 101d3f8:	e0bffe0f 	ldh	r2,-8(fp)
 101d3fc:	10800508 	cmpgei	r2,r2,20
 101d400:	1000151e 	bne	r2,zero,101d458 <alt_up_sd_card_set_attributes+0x80>
		if (active_files[file_handle].in_use) {
 101d404:	e0bffe0f 	ldh	r2,-8(fp)
 101d408:	00c04234 	movhi	r3,264
 101d40c:	18ec3b04 	addi	r3,r3,-20244
 101d410:	100491ba 	slli	r2,r2,6
 101d414:	10c5883a 	add	r2,r2,r3
 101d418:	10800f04 	addi	r2,r2,60
 101d41c:	10800017 	ldw	r2,0(r2)
 101d420:	1005003a 	cmpeq	r2,r2,zero
 101d424:	10000c1e 	bne	r2,zero,101d458 <alt_up_sd_card_set_attributes+0x80>
			active_files[file_handle].attributes =
 101d428:	e17ffe0f 	ldh	r5,-8(fp)
 101d42c:	e0bfff0b 	ldhu	r2,-4(fp)
 101d430:	1007883a 	mov	r3,r2
 101d434:	00bfffc4 	movi	r2,-1
 101d438:	1884703a 	and	r2,r3,r2
 101d43c:	1009883a 	mov	r4,r2
 101d440:	00c04234 	movhi	r3,264
 101d444:	18ec3b04 	addi	r3,r3,-20244
 101d448:	280491ba 	slli	r2,r5,6
 101d44c:	10c5883a 	add	r2,r2,r3
 101d450:	10800204 	addi	r2,r2,8
 101d454:	110000c5 	stb	r4,3(r2)
				((char)(attributes & 0x00ff));
		}
	}
}
 101d458:	e037883a 	mov	sp,fp
 101d45c:	df000017 	ldw	fp,0(sp)
 101d460:	dec00104 	addi	sp,sp,4
 101d464:	f800283a 	ret

0101d468 <alt_up_sd_card_get_attributes>:

short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
*/
{
 101d468:	defffd04 	addi	sp,sp,-12
 101d46c:	df000215 	stw	fp,8(sp)
 101d470:	df000204 	addi	fp,sp,8
 101d474:	e13fff0d 	sth	r4,-4(fp)
	short int result = -1;
 101d478:	00bfffc4 	movi	r2,-1
 101d47c:	e0bffe0d 	sth	r2,-8(fp)
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
 101d480:	e0bfff0f 	ldh	r2,-4(fp)
 101d484:	1004803a 	cmplt	r2,r2,zero
 101d488:	1000151e 	bne	r2,zero,101d4e0 <alt_up_sd_card_get_attributes+0x78>
 101d48c:	e0bfff0f 	ldh	r2,-4(fp)
 101d490:	10800508 	cmpgei	r2,r2,20
 101d494:	1000121e 	bne	r2,zero,101d4e0 <alt_up_sd_card_get_attributes+0x78>
		if (active_files[file_handle].in_use) {
 101d498:	e0bfff0f 	ldh	r2,-4(fp)
 101d49c:	00c04234 	movhi	r3,264
 101d4a0:	18ec3b04 	addi	r3,r3,-20244
 101d4a4:	100491ba 	slli	r2,r2,6
 101d4a8:	10c5883a 	add	r2,r2,r3
 101d4ac:	10800f04 	addi	r2,r2,60
 101d4b0:	10800017 	ldw	r2,0(r2)
 101d4b4:	1005003a 	cmpeq	r2,r2,zero
 101d4b8:	1000091e 	bne	r2,zero,101d4e0 <alt_up_sd_card_get_attributes+0x78>
			result = ((active_files[file_handle].attributes) & 0x00ff);
 101d4bc:	e0bfff0f 	ldh	r2,-4(fp)
 101d4c0:	00c04234 	movhi	r3,264
 101d4c4:	18ec3b04 	addi	r3,r3,-20244
 101d4c8:	100491ba 	slli	r2,r2,6
 101d4cc:	10c5883a 	add	r2,r2,r3
 101d4d0:	10800204 	addi	r2,r2,8
 101d4d4:	108000c3 	ldbu	r2,3(r2)
 101d4d8:	10803fcc 	andi	r2,r2,255
 101d4dc:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
 101d4e0:	e0bffe0f 	ldh	r2,-8(fp)
}
 101d4e4:	e037883a 	mov	sp,fp
 101d4e8:	df000017 	ldw	fp,0(sp)
 101d4ec:	dec00104 	addi	sp,sp,4
 101d4f0:	f800283a 	ret

0101d4f4 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
* means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
 101d4f4:	defffa04 	addi	sp,sp,-24
 101d4f8:	dfc00515 	stw	ra,20(sp)
 101d4fc:	df000415 	stw	fp,16(sp)
 101d500:	df000404 	addi	fp,sp,16
 101d504:	e13ffe0d 	sth	r4,-8(fp)
	short int ch = -1;
 101d508:	00bfffc4 	movi	r2,-1
 101d50c:	e0bffd0d 	sth	r2,-12(fp)

	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
 101d510:	e0bffe0f 	ldh	r2,-8(fp)
 101d514:	1004803a 	cmplt	r2,r2,zero
 101d518:	1000d31e 	bne	r2,zero,101d868 <alt_up_sd_card_read+0x374>
 101d51c:	e0bffe0f 	ldh	r2,-8(fp)
 101d520:	10800508 	cmpgei	r2,r2,20
 101d524:	1000d01e 	bne	r2,zero,101d868 <alt_up_sd_card_read+0x374>
		if (active_files[file_handle].in_use) {
 101d528:	e0bffe0f 	ldh	r2,-8(fp)
 101d52c:	00c04234 	movhi	r3,264
 101d530:	18ec3b04 	addi	r3,r3,-20244
 101d534:	100491ba 	slli	r2,r2,6
 101d538:	10c5883a 	add	r2,r2,r3
 101d53c:	10800f04 	addi	r2,r2,60
 101d540:	10800017 	ldw	r2,0(r2)
 101d544:	1005003a 	cmpeq	r2,r2,zero
 101d548:	1000c71e 	bne	r2,zero,101d868 <alt_up_sd_card_read+0x374>
			if (active_files[file_handle].current_byte_position
 101d54c:	e0bffe0f 	ldh	r2,-8(fp)
 101d550:	00c04234 	movhi	r3,264
 101d554:	18ec3b04 	addi	r3,r3,-20244
 101d558:	100491ba 	slli	r2,r2,6
 101d55c:	10c5883a 	add	r2,r2,r3
 101d560:	10800904 	addi	r2,r2,36
 101d564:	11000017 	ldw	r4,0(r2)
 101d568:	e0bffe0f 	ldh	r2,-8(fp)
 101d56c:	00c04234 	movhi	r3,264
 101d570:	18ec3b04 	addi	r3,r3,-20244
 101d574:	100491ba 	slli	r2,r2,6
 101d578:	10c5883a 	add	r2,r2,r3
 101d57c:	10800604 	addi	r2,r2,24
 101d580:	10800017 	ldw	r2,0(r2)
 101d584:	2080b82e 	bgeu	r4,r2,101d868 <alt_up_sd_card_read+0x374>
				< active_files[file_handle].file_size_in_bytes) {
				int data_sector = boot_sector_data.data_sector_offset
					+ (active_files[file_handle].current_cluster_index - 2)
					* boot_sector_data.sectors_per_cluster
					+ active_files[file_handle].current_sector_in_cluster;
 101d588:	00804234 	movhi	r2,264
 101d58c:	10ac2604 	addi	r2,r2,-20328
 101d590:	11001417 	ldw	r4,80(r2)
 101d594:	e0bffe0f 	ldh	r2,-8(fp)
 101d598:	00c04234 	movhi	r3,264
 101d59c:	18ec3b04 	addi	r3,r3,-20244
 101d5a0:	100491ba 	slli	r2,r2,6
 101d5a4:	10c5883a 	add	r2,r2,r3
 101d5a8:	10800704 	addi	r2,r2,28
 101d5ac:	10800017 	ldw	r2,0(r2)
 101d5b0:	10ffff84 	addi	r3,r2,-2
 101d5b4:	00804234 	movhi	r2,264
 101d5b8:	10ac2604 	addi	r2,r2,-20328
 101d5bc:	10800383 	ldbu	r2,14(r2)
 101d5c0:	10803fcc 	andi	r2,r2,255
 101d5c4:	1885383a 	mul	r2,r3,r2
 101d5c8:	2089883a 	add	r4,r4,r2
 101d5cc:	e0bffe0f 	ldh	r2,-8(fp)
 101d5d0:	00c04234 	movhi	r3,264
 101d5d4:	18ec3b04 	addi	r3,r3,-20244
 101d5d8:	100491ba 	slli	r2,r2,6
 101d5dc:	10c5883a 	add	r2,r2,r3
 101d5e0:	10800804 	addi	r2,r2,32
 101d5e4:	10800017 	ldw	r2,0(r2)
 101d5e8:	2085883a 	add	r2,r4,r2
 101d5ec:	e0bffc15 	stw	r2,-16(fp)

				if ((active_files[file_handle].current_byte_position > 0)
 101d5f0:	e0bffe0f 	ldh	r2,-8(fp)
 101d5f4:	00c04234 	movhi	r3,264
 101d5f8:	18ec3b04 	addi	r3,r3,-20244
 101d5fc:	100491ba 	slli	r2,r2,6
 101d600:	10c5883a 	add	r2,r2,r3
 101d604:	10800904 	addi	r2,r2,36
 101d608:	10800017 	ldw	r2,0(r2)
 101d60c:	1005003a 	cmpeq	r2,r2,zero
 101d610:	10006a1e 	bne	r2,zero,101d7bc <alt_up_sd_card_read+0x2c8>
 101d614:	e0bffe0f 	ldh	r2,-8(fp)
 101d618:	00c04234 	movhi	r3,264
 101d61c:	18ec3b04 	addi	r3,r3,-20244
 101d620:	100491ba 	slli	r2,r2,6
 101d624:	10c5883a 	add	r2,r2,r3
 101d628:	10800904 	addi	r2,r2,36
 101d62c:	10800017 	ldw	r2,0(r2)
 101d630:	10807fcc 	andi	r2,r2,511
 101d634:	1004c03a 	cmpne	r2,r2,zero
 101d638:	1000601e 	bne	r2,zero,101d7bc <alt_up_sd_card_read+0x2c8>
					&& ((active_files[file_handle].current_byte_position
					% 512) == 0)) {
					// Read in a new sector of data.
					if (active_files[file_handle].current_sector_in_cluster
 101d63c:	e0bffe0f 	ldh	r2,-8(fp)
 101d640:	00c04234 	movhi	r3,264
 101d644:	18ec3b04 	addi	r3,r3,-20244
 101d648:	100491ba 	slli	r2,r2,6
 101d64c:	10c5883a 	add	r2,r2,r3
 101d650:	10800804 	addi	r2,r2,32
 101d654:	10c00017 	ldw	r3,0(r2)
 101d658:	00804234 	movhi	r2,264
 101d65c:	10ac2604 	addi	r2,r2,-20328
 101d660:	10800383 	ldbu	r2,14(r2)
 101d664:	10803fcc 	andi	r2,r2,255
 101d668:	10bfffc4 	addi	r2,r2,-1
 101d66c:	1880411e 	bne	r3,r2,101d774 <alt_up_sd_card_read+0x280>
						== boot_sector_data.sectors_per_cluster - 1) {
						// Go to the next cluster.
						unsigned short int next_cluster;
						if (get_cluster_flag(
 101d670:	e0bffe0f 	ldh	r2,-8(fp)
 101d674:	00c04234 	movhi	r3,264
 101d678:	18ec3b04 	addi	r3,r3,-20244
 101d67c:	100491ba 	slli	r2,r2,6
 101d680:	10c5883a 	add	r2,r2,r3
 101d684:	10800704 	addi	r2,r2,28
 101d688:	11000017 	ldw	r4,0(r2)
 101d68c:	e17ffd84 	addi	r5,fp,-10
 101d690:	1019e600 	call	1019e60 <get_cluster_flag>
 101d694:	1005003a 	cmpeq	r2,r2,zero
 101d698:	1000331e 	bne	r2,zero,101d768 <alt_up_sd_card_read+0x274>
							active_files[file_handle].current_cluster_index,
							&next_cluster)) {
							if ((next_cluster & 0x0000fff8) == 0x0000fff8) {
 101d69c:	e0bffd8b 	ldhu	r2,-10(fp)
 101d6a0:	10bfffcc 	andi	r2,r2,65535
 101d6a4:	10fffe0c 	andi	r3,r2,65528
 101d6a8:	00bffe14 	movui	r2,65528
 101d6ac:	1880031e 	bne	r3,r2,101d6bc <alt_up_sd_card_read+0x1c8>
								/* End of file */
								return -1;
 101d6b0:	00bfffc4 	movi	r2,-1
 101d6b4:	e0bfff15 	stw	r2,-4(fp)
 101d6b8:	00006d06 	br	101d870 <alt_up_sd_card_read+0x37c>
							}
							else {
								active_files[file_handle].current_cluster_index =
 101d6bc:	e13ffe0f 	ldh	r4,-8(fp)
 101d6c0:	e0bffd8b 	ldhu	r2,-10(fp)
 101d6c4:	117fffcc 	andi	r5,r2,65535
 101d6c8:	00c04234 	movhi	r3,264
 101d6cc:	18ec3b04 	addi	r3,r3,-20244
 101d6d0:	200491ba 	slli	r2,r4,6
 101d6d4:	10c5883a 	add	r2,r2,r3
 101d6d8:	10800704 	addi	r2,r2,28
 101d6dc:	11400015 	stw	r5,0(r2)
									next_cluster;
								active_files[file_handle].current_sector_in_cluster =
 101d6e0:	e0bffe0f 	ldh	r2,-8(fp)
 101d6e4:	00c04234 	movhi	r3,264
 101d6e8:	18ec3b04 	addi	r3,r3,-20244
 101d6ec:	100491ba 	slli	r2,r2,6
 101d6f0:	10c5883a 	add	r2,r2,r3
 101d6f4:	10800804 	addi	r2,r2,32
 101d6f8:	10000015 	stw	zero,0(r2)
									0;
								data_sector =
 101d6fc:	00804234 	movhi	r2,264
 101d700:	10ac2604 	addi	r2,r2,-20328
 101d704:	11001417 	ldw	r4,80(r2)
 101d708:	e0bffe0f 	ldh	r2,-8(fp)
 101d70c:	00c04234 	movhi	r3,264
 101d710:	18ec3b04 	addi	r3,r3,-20244
 101d714:	100491ba 	slli	r2,r2,6
 101d718:	10c5883a 	add	r2,r2,r3
 101d71c:	10800704 	addi	r2,r2,28
 101d720:	10800017 	ldw	r2,0(r2)
 101d724:	10ffff84 	addi	r3,r2,-2
 101d728:	00804234 	movhi	r2,264
 101d72c:	10ac2604 	addi	r2,r2,-20328
 101d730:	10800383 	ldbu	r2,14(r2)
 101d734:	10803fcc 	andi	r2,r2,255
 101d738:	1885383a 	mul	r2,r3,r2
 101d73c:	2089883a 	add	r4,r4,r2
 101d740:	e0bffe0f 	ldh	r2,-8(fp)
 101d744:	00c04234 	movhi	r3,264
 101d748:	18ec3b04 	addi	r3,r3,-20244
 101d74c:	100491ba 	slli	r2,r2,6
 101d750:	10c5883a 	add	r2,r2,r3
 101d754:	10800804 	addi	r2,r2,32
 101d758:	10800017 	ldw	r2,0(r2)
 101d75c:	2085883a 	add	r2,r4,r2
 101d760:	e0bffc15 	stw	r2,-16(fp)
 101d764:	00001506 	br	101d7bc <alt_up_sd_card_read+0x2c8>
									* boot_sector_data.sectors_per_cluster
									+ active_files[file_handle].current_sector_in_cluster;
							}
						}
						else {
							return -2;
 101d768:	00bfff84 	movi	r2,-2
 101d76c:	e0bfff15 	stw	r2,-4(fp)
 101d770:	00003f06 	br	101d870 <alt_up_sd_card_read+0x37c>
						}
					}
					else {
						active_files[file_handle].current_sector_in_cluster =
 101d774:	e17ffe0f 	ldh	r5,-8(fp)
 101d778:	e0bffe0f 	ldh	r2,-8(fp)
 101d77c:	00c04234 	movhi	r3,264
 101d780:	18ec3b04 	addi	r3,r3,-20244
 101d784:	100491ba 	slli	r2,r2,6
 101d788:	10c5883a 	add	r2,r2,r3
 101d78c:	10800804 	addi	r2,r2,32
 101d790:	10800017 	ldw	r2,0(r2)
 101d794:	11000044 	addi	r4,r2,1
 101d798:	00c04234 	movhi	r3,264
 101d79c:	18ec3b04 	addi	r3,r3,-20244
 101d7a0:	280491ba 	slli	r2,r5,6
 101d7a4:	10c5883a 	add	r2,r2,r3
 101d7a8:	10800804 	addi	r2,r2,32
 101d7ac:	11000015 	stw	r4,0(r2)
							active_files[file_handle].current_sector_in_cluster
							+ 1;
						data_sector = data_sector + 1;
 101d7b0:	e0bffc17 	ldw	r2,-16(fp)
 101d7b4:	10800044 	addi	r2,r2,1
 101d7b8:	e0bffc15 	stw	r2,-16(fp)
					}
				}
				// Reading te first byte of the file.
				if (current_sector_index
 101d7bc:	d0e71a17 	ldw	r3,-25496(gp)
 101d7c0:	e0bffc17 	ldw	r2,-16(fp)
 101d7c4:	1885883a 	add	r2,r3,r2
 101d7c8:	1007883a 	mov	r3,r2
 101d7cc:	d0a71e17 	ldw	r2,-25480(gp)
 101d7d0:	18800826 	beq	r3,r2,101d7f4 <alt_up_sd_card_read+0x300>
					!= (data_sector
					+ fat_partition_offset_in_512_byte_sectors)) {
					if (!Read_Sector_Data(data_sector,
 101d7d4:	d1671a17 	ldw	r5,-25496(gp)
 101d7d8:	e13ffc17 	ldw	r4,-16(fp)
 101d7dc:	1019d640 	call	1019d64 <Read_Sector_Data>
 101d7e0:	1004c03a 	cmpne	r2,r2,zero
 101d7e4:	1000031e 	bne	r2,zero,101d7f4 <alt_up_sd_card_read+0x300>
						fat_partition_offset_in_512_byte_sectors)) {
						return -2;
 101d7e8:	00bfff84 	movi	r2,-2
 101d7ec:	e0bfff15 	stw	r2,-4(fp)
 101d7f0:	00001f06 	br	101d870 <alt_up_sd_card_read+0x37c>
					}
				}

				ch =
 101d7f4:	e0bffe0f 	ldh	r2,-8(fp)
 101d7f8:	00c04234 	movhi	r3,264
 101d7fc:	18ec3b04 	addi	r3,r3,-20244
 101d800:	100491ba 	slli	r2,r2,6
 101d804:	10c5883a 	add	r2,r2,r3
 101d808:	10800904 	addi	r2,r2,36
 101d80c:	10800017 	ldw	r2,0(r2)
 101d810:	10807fcc 	andi	r2,r2,511
 101d814:	1007883a 	mov	r3,r2
 101d818:	d0a71917 	ldw	r2,-25500(gp)
 101d81c:	1885883a 	add	r2,r3,r2
 101d820:	10800023 	ldbuio	r2,0(r2)
 101d824:	10803fcc 	andi	r2,r2,255
 101d828:	e0bffd0d 	sth	r2,-12(fp)
					(unsigned char)IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
				active_files[file_handle].current_byte_position =
 101d82c:	e17ffe0f 	ldh	r5,-8(fp)
 101d830:	e0bffe0f 	ldh	r2,-8(fp)
 101d834:	00c04234 	movhi	r3,264
 101d838:	18ec3b04 	addi	r3,r3,-20244
 101d83c:	100491ba 	slli	r2,r2,6
 101d840:	10c5883a 	add	r2,r2,r3
 101d844:	10800904 	addi	r2,r2,36
 101d848:	10800017 	ldw	r2,0(r2)
 101d84c:	11000044 	addi	r4,r2,1
 101d850:	00c04234 	movhi	r3,264
 101d854:	18ec3b04 	addi	r3,r3,-20244
 101d858:	280491ba 	slli	r2,r5,6
 101d85c:	10c5883a 	add	r2,r2,r3
 101d860:	10800904 	addi	r2,r2,36
 101d864:	11000015 	stw	r4,0(r2)
					active_files[file_handle].current_byte_position + 1;
			}
		}
	}

	return ch;
 101d868:	e0bffd0f 	ldh	r2,-12(fp)
 101d86c:	e0bfff15 	stw	r2,-4(fp)
 101d870:	e0bfff17 	ldw	r2,-4(fp)
}
 101d874:	e037883a 	mov	sp,fp
 101d878:	dfc00117 	ldw	ra,4(sp)
 101d87c:	df000017 	ldw	fp,0(sp)
 101d880:	dec00204 	addi	sp,sp,8
 101d884:	f800283a 	ret

0101d888 <alt_up_sd_card_write>:

bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
 101d888:	defff604 	addi	sp,sp,-40
 101d88c:	dfc00915 	stw	ra,36(sp)
 101d890:	df000815 	stw	fp,32(sp)
 101d894:	df000804 	addi	fp,sp,32
 101d898:	e13ffd0d 	sth	r4,-12(fp)
 101d89c:	e17ffe05 	stb	r5,-8(fp)
	bool result = false;
 101d8a0:	e03ffa15 	stw	zero,-24(fp)

	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
 101d8a4:	e0bffd0f 	ldh	r2,-12(fp)
 101d8a8:	1004803a 	cmplt	r2,r2,zero
 101d8ac:	10017d1e 	bne	r2,zero,101dea4 <alt_up_sd_card_write+0x61c>
 101d8b0:	e0bffd0f 	ldh	r2,-12(fp)
 101d8b4:	10800508 	cmpgei	r2,r2,20
 101d8b8:	10017a1e 	bne	r2,zero,101dea4 <alt_up_sd_card_write+0x61c>
		if (active_files[file_handle].in_use) {
 101d8bc:	e0bffd0f 	ldh	r2,-12(fp)
 101d8c0:	00c04234 	movhi	r3,264
 101d8c4:	18ec3b04 	addi	r3,r3,-20244
 101d8c8:	100491ba 	slli	r2,r2,6
 101d8cc:	10c5883a 	add	r2,r2,r3
 101d8d0:	10800f04 	addi	r2,r2,60
 101d8d4:	10800017 	ldw	r2,0(r2)
 101d8d8:	1005003a 	cmpeq	r2,r2,zero
 101d8dc:	1001711e 	bne	r2,zero,101dea4 <alt_up_sd_card_write+0x61c>
			int data_sector = boot_sector_data.data_sector_offset
				+ (active_files[file_handle].current_cluster_index - 2)
				* boot_sector_data.sectors_per_cluster
				+ active_files[file_handle].current_sector_in_cluster;
 101d8e0:	00804234 	movhi	r2,264
 101d8e4:	10ac2604 	addi	r2,r2,-20328
 101d8e8:	11001417 	ldw	r4,80(r2)
 101d8ec:	e0bffd0f 	ldh	r2,-12(fp)
 101d8f0:	00c04234 	movhi	r3,264
 101d8f4:	18ec3b04 	addi	r3,r3,-20244
 101d8f8:	100491ba 	slli	r2,r2,6
 101d8fc:	10c5883a 	add	r2,r2,r3
 101d900:	10800704 	addi	r2,r2,28
 101d904:	10800017 	ldw	r2,0(r2)
 101d908:	10ffff84 	addi	r3,r2,-2
 101d90c:	00804234 	movhi	r2,264
 101d910:	10ac2604 	addi	r2,r2,-20328
 101d914:	10800383 	ldbu	r2,14(r2)
 101d918:	10803fcc 	andi	r2,r2,255
 101d91c:	1885383a 	mul	r2,r3,r2
 101d920:	2089883a 	add	r4,r4,r2
 101d924:	e0bffd0f 	ldh	r2,-12(fp)
 101d928:	00c04234 	movhi	r3,264
 101d92c:	18ec3b04 	addi	r3,r3,-20244
 101d930:	100491ba 	slli	r2,r2,6
 101d934:	10c5883a 	add	r2,r2,r3
 101d938:	10800804 	addi	r2,r2,32
 101d93c:	10800017 	ldw	r2,0(r2)
 101d940:	2085883a 	add	r2,r4,r2
 101d944:	e0bff915 	stw	r2,-28(fp)
			short int buffer_offset =
				active_files[file_handle].current_byte_position
				% boot_sector_data.sector_size_in_bytes;
 101d948:	e0bffd0f 	ldh	r2,-12(fp)
 101d94c:	00c04234 	movhi	r3,264
 101d950:	18ec3b04 	addi	r3,r3,-20244
 101d954:	100491ba 	slli	r2,r2,6
 101d958:	10c5883a 	add	r2,r2,r3
 101d95c:	10800904 	addi	r2,r2,36
 101d960:	11000017 	ldw	r4,0(r2)
 101d964:	00804234 	movhi	r2,264
 101d968:	10ac2604 	addi	r2,r2,-20328
 101d96c:	1080030b 	ldhu	r2,12(r2)
 101d970:	10ffffcc 	andi	r3,r2,65535
 101d974:	20c5203a 	divu	r2,r4,r3
 101d978:	10c5383a 	mul	r2,r2,r3
 101d97c:	2085c83a 	sub	r2,r4,r2
 101d980:	e0bff80d 	sth	r2,-32(fp)

			if (active_files[file_handle].current_byte_position
 101d984:	e0bffd0f 	ldh	r2,-12(fp)
 101d988:	00c04234 	movhi	r3,264
 101d98c:	18ec3b04 	addi	r3,r3,-20244
 101d990:	100491ba 	slli	r2,r2,6
 101d994:	10c5883a 	add	r2,r2,r3
 101d998:	10800904 	addi	r2,r2,36
 101d99c:	11000017 	ldw	r4,0(r2)
 101d9a0:	e0bffd0f 	ldh	r2,-12(fp)
 101d9a4:	00c04234 	movhi	r3,264
 101d9a8:	18ec3b04 	addi	r3,r3,-20244
 101d9ac:	100491ba 	slli	r2,r2,6
 101d9b0:	10c5883a 	add	r2,r2,r3
 101d9b4:	10800604 	addi	r2,r2,24
 101d9b8:	10800017 	ldw	r2,0(r2)
 101d9bc:	2080682e 	bgeu	r4,r2,101db60 <alt_up_sd_card_write+0x2d8>
				< active_files[file_handle].file_size_in_bytes) {
				if ((active_files[file_handle].current_byte_position > 0)
 101d9c0:	e0bffd0f 	ldh	r2,-12(fp)
 101d9c4:	00c04234 	movhi	r3,264
 101d9c8:	18ec3b04 	addi	r3,r3,-20244
 101d9cc:	100491ba 	slli	r2,r2,6
 101d9d0:	10c5883a 	add	r2,r2,r3
 101d9d4:	10800904 	addi	r2,r2,36
 101d9d8:	10800017 	ldw	r2,0(r2)
 101d9dc:	1005003a 	cmpeq	r2,r2,zero
 101d9e0:	1000e41e 	bne	r2,zero,101dd74 <alt_up_sd_card_write+0x4ec>
 101d9e4:	e0bff80f 	ldh	r2,-32(fp)
 101d9e8:	1004c03a 	cmpne	r2,r2,zero
 101d9ec:	1000e11e 	bne	r2,zero,101dd74 <alt_up_sd_card_write+0x4ec>
					&& (buffer_offset == 0)) {
					// Read in a new sector of data.
					if (active_files[file_handle].current_sector_in_cluster
 101d9f0:	e0bffd0f 	ldh	r2,-12(fp)
 101d9f4:	00c04234 	movhi	r3,264
 101d9f8:	18ec3b04 	addi	r3,r3,-20244
 101d9fc:	100491ba 	slli	r2,r2,6
 101da00:	10c5883a 	add	r2,r2,r3
 101da04:	10800804 	addi	r2,r2,32
 101da08:	10c00017 	ldw	r3,0(r2)
 101da0c:	00804234 	movhi	r2,264
 101da10:	10ac2604 	addi	r2,r2,-20328
 101da14:	10800383 	ldbu	r2,14(r2)
 101da18:	10803fcc 	andi	r2,r2,255
 101da1c:	10bfffc4 	addi	r2,r2,-1
 101da20:	18803c1e 	bne	r3,r2,101db14 <alt_up_sd_card_write+0x28c>
						== boot_sector_data.sectors_per_cluster - 1) {
						// Go to the next cluster.
						unsigned short int next_cluster;
						if (get_cluster_flag(
 101da24:	e0bffd0f 	ldh	r2,-12(fp)
 101da28:	00c04234 	movhi	r3,264
 101da2c:	18ec3b04 	addi	r3,r3,-20244
 101da30:	100491ba 	slli	r2,r2,6
 101da34:	10c5883a 	add	r2,r2,r3
 101da38:	10800704 	addi	r2,r2,28
 101da3c:	11000017 	ldw	r4,0(r2)
 101da40:	e17ffb04 	addi	r5,fp,-20
 101da44:	1019e600 	call	1019e60 <get_cluster_flag>
 101da48:	1005003a 	cmpeq	r2,r2,zero
 101da4c:	10002f1e 	bne	r2,zero,101db0c <alt_up_sd_card_write+0x284>
							active_files[file_handle].current_cluster_index,
							&next_cluster)) {
							if (next_cluster < 0x0000fff8) {
 101da50:	e0bffb0b 	ldhu	r2,-20(fp)
 101da54:	10ffffcc 	andi	r3,r2,65535
 101da58:	00bffdd4 	movui	r2,65527
 101da5c:	10c0c536 	bltu	r2,r3,101dd74 <alt_up_sd_card_write+0x4ec>
								active_files[file_handle].current_cluster_index =
 101da60:	e13ffd0f 	ldh	r4,-12(fp)
 101da64:	e0bffb0b 	ldhu	r2,-20(fp)
 101da68:	117fffcc 	andi	r5,r2,65535
 101da6c:	00c04234 	movhi	r3,264
 101da70:	18ec3b04 	addi	r3,r3,-20244
 101da74:	200491ba 	slli	r2,r4,6
 101da78:	10c5883a 	add	r2,r2,r3
 101da7c:	10800704 	addi	r2,r2,28
 101da80:	11400015 	stw	r5,0(r2)
									next_cluster;
								active_files[file_handle].current_sector_in_cluster =
 101da84:	e0bffd0f 	ldh	r2,-12(fp)
 101da88:	00c04234 	movhi	r3,264
 101da8c:	18ec3b04 	addi	r3,r3,-20244
 101da90:	100491ba 	slli	r2,r2,6
 101da94:	10c5883a 	add	r2,r2,r3
 101da98:	10800804 	addi	r2,r2,32
 101da9c:	10000015 	stw	zero,0(r2)
									0;
								data_sector =
 101daa0:	00804234 	movhi	r2,264
 101daa4:	10ac2604 	addi	r2,r2,-20328
 101daa8:	11001417 	ldw	r4,80(r2)
 101daac:	e0bffd0f 	ldh	r2,-12(fp)
 101dab0:	00c04234 	movhi	r3,264
 101dab4:	18ec3b04 	addi	r3,r3,-20244
 101dab8:	100491ba 	slli	r2,r2,6
 101dabc:	10c5883a 	add	r2,r2,r3
 101dac0:	10800704 	addi	r2,r2,28
 101dac4:	10800017 	ldw	r2,0(r2)
 101dac8:	10ffff84 	addi	r3,r2,-2
 101dacc:	00804234 	movhi	r2,264
 101dad0:	10ac2604 	addi	r2,r2,-20328
 101dad4:	10800383 	ldbu	r2,14(r2)
 101dad8:	10803fcc 	andi	r2,r2,255
 101dadc:	1885383a 	mul	r2,r3,r2
 101dae0:	2089883a 	add	r4,r4,r2
 101dae4:	e0bffd0f 	ldh	r2,-12(fp)
 101dae8:	00c04234 	movhi	r3,264
 101daec:	18ec3b04 	addi	r3,r3,-20244
 101daf0:	100491ba 	slli	r2,r2,6
 101daf4:	10c5883a 	add	r2,r2,r3
 101daf8:	10800804 	addi	r2,r2,32
 101dafc:	10800017 	ldw	r2,0(r2)
 101db00:	2085883a 	add	r2,r4,r2
 101db04:	e0bff915 	stw	r2,-28(fp)
 101db08:	00009a06 	br	101dd74 <alt_up_sd_card_write+0x4ec>
									* boot_sector_data.sectors_per_cluster
									+ active_files[file_handle].current_sector_in_cluster;
							}
						}
						else {
							return false;
 101db0c:	e03fff15 	stw	zero,-4(fp)
 101db10:	0000e606 	br	101deac <alt_up_sd_card_write+0x624>
						}
					}
					else {
						active_files[file_handle].current_sector_in_cluster
 101db14:	e17ffd0f 	ldh	r5,-12(fp)
 101db18:	e0bffd0f 	ldh	r2,-12(fp)
 101db1c:	00c04234 	movhi	r3,264
 101db20:	18ec3b04 	addi	r3,r3,-20244
 101db24:	100491ba 	slli	r2,r2,6
 101db28:	10c5883a 	add	r2,r2,r3
 101db2c:	10800804 	addi	r2,r2,32
 101db30:	10800017 	ldw	r2,0(r2)
 101db34:	11000044 	addi	r4,r2,1
 101db38:	00c04234 	movhi	r3,264
 101db3c:	18ec3b04 	addi	r3,r3,-20244
 101db40:	280491ba 	slli	r2,r5,6
 101db44:	10c5883a 	add	r2,r2,r3
 101db48:	10800804 	addi	r2,r2,32
 101db4c:	11000015 	stw	r4,0(r2)
							+ 1;
						//						active_files[file_handle].current_sector_in_cluster =
						//								(active_files[file_handle].current_byte_position
						//										/ boot_sector_data.sector_size_in_bytes)
						//										% boot_sector_data.sectors_per_cluster;
						data_sector = data_sector + 1;
 101db50:	e0bff917 	ldw	r2,-28(fp)
 101db54:	10800044 	addi	r2,r2,1
 101db58:	e0bff915 	stw	r2,-28(fp)
 101db5c:	00008506 	br	101dd74 <alt_up_sd_card_write+0x4ec>
					}
				}
			}
			else {
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0)
 101db60:	e0bffd0f 	ldh	r2,-12(fp)
 101db64:	00c04234 	movhi	r3,264
 101db68:	18ec3b04 	addi	r3,r3,-20244
 101db6c:	100491ba 	slli	r2,r2,6
 101db70:	10c5883a 	add	r2,r2,r3
 101db74:	10800904 	addi	r2,r2,36
 101db78:	10800017 	ldw	r2,0(r2)
 101db7c:	1005003a 	cmpeq	r2,r2,zero
 101db80:	10007c1e 	bne	r2,zero,101dd74 <alt_up_sd_card_write+0x4ec>
 101db84:	e0bff80f 	ldh	r2,-32(fp)
 101db88:	1004c03a 	cmpne	r2,r2,zero
 101db8c:	1000791e 	bne	r2,zero,101dd74 <alt_up_sd_card_write+0x4ec>
					&& (buffer_offset == 0)) {
					if (active_files[file_handle].current_sector_in_cluster
 101db90:	e0bffd0f 	ldh	r2,-12(fp)
 101db94:	00c04234 	movhi	r3,264
 101db98:	18ec3b04 	addi	r3,r3,-20244
 101db9c:	100491ba 	slli	r2,r2,6
 101dba0:	10c5883a 	add	r2,r2,r3
 101dba4:	10800804 	addi	r2,r2,32
 101dba8:	10c00017 	ldw	r3,0(r2)
 101dbac:	00804234 	movhi	r2,264
 101dbb0:	10ac2604 	addi	r2,r2,-20328
 101dbb4:	10800383 	ldbu	r2,14(r2)
 101dbb8:	10803fcc 	andi	r2,r2,255
 101dbbc:	10bfffc4 	addi	r2,r2,-1
 101dbc0:	1880381e 	bne	r3,r2,101dca4 <alt_up_sd_card_write+0x41c>
						== boot_sector_data.sectors_per_cluster - 1) {
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number)) {
 101dbc4:	e13ffc04 	addi	r4,fp,-16
 101dbc8:	101beb00 	call	101beb0 <find_first_empty_cluster>
 101dbcc:	1005003a 	cmpeq	r2,r2,zero
 101dbd0:	1000321e 	bne	r2,zero,101dc9c <alt_up_sd_card_write+0x414>
							// mark clusters in both File Allocation Tables.
							mark_cluster(
 101dbd4:	e0bffd0f 	ldh	r2,-12(fp)
 101dbd8:	00c04234 	movhi	r3,264
 101dbdc:	18ec3b04 	addi	r3,r3,-20244
 101dbe0:	100491ba 	slli	r2,r2,6
 101dbe4:	10c5883a 	add	r2,r2,r3
 101dbe8:	10800704 	addi	r2,r2,28
 101dbec:	11000017 	ldw	r4,0(r2)
 101dbf0:	e0bffc17 	ldw	r2,-16(fp)
 101dbf4:	117fffcc 	andi	r5,r2,65535
 101dbf8:	2960001c 	xori	r5,r5,32768
 101dbfc:	29600004 	addi	r5,r5,-32768
 101dc00:	01800044 	movi	r6,1
 101dc04:	1019f180 	call	1019f18 <mark_cluster>
								active_files[file_handle].current_cluster_index,
								((unsigned short int) (cluster_number
								& 0x0000ffff)), true);
							mark_cluster(cluster_number, 0xffff, true);
 101dc08:	e13ffc17 	ldw	r4,-16(fp)
 101dc0c:	017fffc4 	movi	r5,-1
 101dc10:	01800044 	movi	r6,1
 101dc14:	1019f180 	call	1019f18 <mark_cluster>
							mark_cluster(
 101dc18:	e0bffd0f 	ldh	r2,-12(fp)
 101dc1c:	00c04234 	movhi	r3,264
 101dc20:	18ec3b04 	addi	r3,r3,-20244
 101dc24:	100491ba 	slli	r2,r2,6
 101dc28:	10c5883a 	add	r2,r2,r3
 101dc2c:	10800704 	addi	r2,r2,28
 101dc30:	11000017 	ldw	r4,0(r2)
 101dc34:	e0bffc17 	ldw	r2,-16(fp)
 101dc38:	117fffcc 	andi	r5,r2,65535
 101dc3c:	2960001c 	xori	r5,r5,32768
 101dc40:	29600004 	addi	r5,r5,-32768
 101dc44:	000d883a 	mov	r6,zero
 101dc48:	1019f180 	call	1019f18 <mark_cluster>
								active_files[file_handle].current_cluster_index,
								((unsigned short int) (cluster_number
								& 0x0000ffff)), false);
							mark_cluster(cluster_number, 0xffff, false);
 101dc4c:	e13ffc17 	ldw	r4,-16(fp)
 101dc50:	017fffc4 	movi	r5,-1
 101dc54:	000d883a 	mov	r6,zero
 101dc58:	1019f180 	call	1019f18 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index =
 101dc5c:	e0bffd0f 	ldh	r2,-12(fp)
 101dc60:	e13ffc17 	ldw	r4,-16(fp)
 101dc64:	00c04234 	movhi	r3,264
 101dc68:	18ec3b04 	addi	r3,r3,-20244
 101dc6c:	100491ba 	slli	r2,r2,6
 101dc70:	10c5883a 	add	r2,r2,r3
 101dc74:	10800704 	addi	r2,r2,28
 101dc78:	11000015 	stw	r4,0(r2)
								cluster_number;
							active_files[file_handle].current_sector_in_cluster =
 101dc7c:	e0bffd0f 	ldh	r2,-12(fp)
 101dc80:	00c04234 	movhi	r3,264
 101dc84:	18ec3b04 	addi	r3,r3,-20244
 101dc88:	100491ba 	slli	r2,r2,6
 101dc8c:	10c5883a 	add	r2,r2,r3
 101dc90:	10800804 	addi	r2,r2,32
 101dc94:	10000015 	stw	zero,0(r2)
 101dc98:	00001c06 	br	101dd0c <alt_up_sd_card_write+0x484>
								0;
						}
						else {
							return false;
 101dc9c:	e03fff15 	stw	zero,-4(fp)
 101dca0:	00008206 	br	101deac <alt_up_sd_card_write+0x624>
						}
					}
					else {
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster =
 101dca4:	e17ffd0f 	ldh	r5,-12(fp)
 101dca8:	e0bffd0f 	ldh	r2,-12(fp)
 101dcac:	00c04234 	movhi	r3,264
 101dcb0:	18ec3b04 	addi	r3,r3,-20244
 101dcb4:	100491ba 	slli	r2,r2,6
 101dcb8:	10c5883a 	add	r2,r2,r3
 101dcbc:	10800904 	addi	r2,r2,36
 101dcc0:	10c00017 	ldw	r3,0(r2)
 101dcc4:	00804234 	movhi	r2,264
 101dcc8:	10ac2604 	addi	r2,r2,-20328
 101dccc:	1080030b 	ldhu	r2,12(r2)
 101dcd0:	10bfffcc 	andi	r2,r2,65535
 101dcd4:	1889203a 	divu	r4,r3,r2
 101dcd8:	00804234 	movhi	r2,264
 101dcdc:	10ac2604 	addi	r2,r2,-20328
 101dce0:	10800383 	ldbu	r2,14(r2)
 101dce4:	10c03fcc 	andi	r3,r2,255
 101dce8:	20c5203a 	divu	r2,r4,r3
 101dcec:	10c5383a 	mul	r2,r2,r3
 101dcf0:	2089c83a 	sub	r4,r4,r2
 101dcf4:	00c04234 	movhi	r3,264
 101dcf8:	18ec3b04 	addi	r3,r3,-20244
 101dcfc:	280491ba 	slli	r2,r5,6
 101dd00:	10c5883a 	add	r2,r2,r3
 101dd04:	10800804 	addi	r2,r2,32
 101dd08:	11000015 	stw	r4,0(r2)
							(active_files[file_handle].current_byte_position
							/ boot_sector_data.sector_size_in_bytes) % boot_sector_data.sectors_per_cluster;
					}
					data_sector =
 101dd0c:	00804234 	movhi	r2,264
 101dd10:	10ac2604 	addi	r2,r2,-20328
 101dd14:	11001417 	ldw	r4,80(r2)
 101dd18:	e0bffd0f 	ldh	r2,-12(fp)
 101dd1c:	00c04234 	movhi	r3,264
 101dd20:	18ec3b04 	addi	r3,r3,-20244
 101dd24:	100491ba 	slli	r2,r2,6
 101dd28:	10c5883a 	add	r2,r2,r3
 101dd2c:	10800704 	addi	r2,r2,28
 101dd30:	10800017 	ldw	r2,0(r2)
 101dd34:	10ffff84 	addi	r3,r2,-2
 101dd38:	00804234 	movhi	r2,264
 101dd3c:	10ac2604 	addi	r2,r2,-20328
 101dd40:	10800383 	ldbu	r2,14(r2)
 101dd44:	10803fcc 	andi	r2,r2,255
 101dd48:	1885383a 	mul	r2,r3,r2
 101dd4c:	2089883a 	add	r4,r4,r2
 101dd50:	e0bffd0f 	ldh	r2,-12(fp)
 101dd54:	00c04234 	movhi	r3,264
 101dd58:	18ec3b04 	addi	r3,r3,-20244
 101dd5c:	100491ba 	slli	r2,r2,6
 101dd60:	10c5883a 	add	r2,r2,r3
 101dd64:	10800804 	addi	r2,r2,32
 101dd68:	10800017 	ldw	r2,0(r2)
 101dd6c:	2085883a 	add	r2,r4,r2
 101dd70:	e0bff915 	stw	r2,-28(fp)
						+ active_files[file_handle].current_sector_in_cluster;
				}
			}
			// Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
			if (current_sector_index
 101dd74:	d0e71a17 	ldw	r3,-25496(gp)
 101dd78:	e0bff917 	ldw	r2,-28(fp)
 101dd7c:	1885883a 	add	r2,r3,r2
 101dd80:	1007883a 	mov	r3,r2
 101dd84:	d0a71e17 	ldw	r2,-25480(gp)
 101dd88:	18800726 	beq	r3,r2,101dda8 <alt_up_sd_card_write+0x520>
				!= data_sector + fat_partition_offset_in_512_byte_sectors) {
				if (!Read_Sector_Data_Attempt_CRC(data_sector,
 101dd8c:	d1671a17 	ldw	r5,-25496(gp)
 101dd90:	e13ff917 	ldw	r4,-28(fp)
 101dd94:	101e1b80 	call	101e1b8 <Read_Sector_Data_Attempt_CRC>
 101dd98:	1004c03a 	cmpne	r2,r2,zero
 101dd9c:	1000021e 	bne	r2,zero,101dda8 <alt_up_sd_card_write+0x520>
					fat_partition_offset_in_512_byte_sectors)) {
					return false;
 101dda0:	e03fff15 	stw	zero,-4(fp)
 101dda4:	00004106 	br	101deac <alt_up_sd_card_write+0x624>
				}
			}
			// Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
 101dda8:	e0bff80f 	ldh	r2,-32(fp)
 101ddac:	1007883a 	mov	r3,r2
 101ddb0:	d0a71917 	ldw	r2,-25500(gp)
 101ddb4:	1885883a 	add	r2,r3,r2
 101ddb8:	e0fffe07 	ldb	r3,-8(fp)
 101ddbc:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position =
 101ddc0:	e17ffd0f 	ldh	r5,-12(fp)
 101ddc4:	e0bffd0f 	ldh	r2,-12(fp)
 101ddc8:	00c04234 	movhi	r3,264
 101ddcc:	18ec3b04 	addi	r3,r3,-20244
 101ddd0:	100491ba 	slli	r2,r2,6
 101ddd4:	10c5883a 	add	r2,r2,r3
 101ddd8:	10800904 	addi	r2,r2,36
 101dddc:	10800017 	ldw	r2,0(r2)
 101dde0:	11000044 	addi	r4,r2,1
 101dde4:	00c04234 	movhi	r3,264
 101dde8:	18ec3b04 	addi	r3,r3,-20244
 101ddec:	280491ba 	slli	r2,r5,6
 101ddf0:	10c5883a 	add	r2,r2,r3
 101ddf4:	10800904 	addi	r2,r2,36
 101ddf8:	11000015 	stw	r4,0(r2)
				active_files[file_handle].current_byte_position + 1;

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position
 101ddfc:	e0bffd0f 	ldh	r2,-12(fp)
 101de00:	00c04234 	movhi	r3,264
 101de04:	18ec3b04 	addi	r3,r3,-20244
 101de08:	100491ba 	slli	r2,r2,6
 101de0c:	10c5883a 	add	r2,r2,r3
 101de10:	10800904 	addi	r2,r2,36
 101de14:	11000017 	ldw	r4,0(r2)
 101de18:	e0bffd0f 	ldh	r2,-12(fp)
 101de1c:	00c04234 	movhi	r3,264
 101de20:	18ec3b04 	addi	r3,r3,-20244
 101de24:	100491ba 	slli	r2,r2,6
 101de28:	10c5883a 	add	r2,r2,r3
 101de2c:	10800604 	addi	r2,r2,24
 101de30:	10800017 	ldw	r2,0(r2)
 101de34:	1100172e 	bgeu	r2,r4,101de94 <alt_up_sd_card_write+0x60c>
	> active_files[file_handle].file_size_in_bytes) {
				active_files[file_handle].file_size_in_bytes =
 101de38:	e17ffd0f 	ldh	r5,-12(fp)
 101de3c:	e0bffd0f 	ldh	r2,-12(fp)
 101de40:	00c04234 	movhi	r3,264
 101de44:	18ec3b04 	addi	r3,r3,-20244
 101de48:	100491ba 	slli	r2,r2,6
 101de4c:	10c5883a 	add	r2,r2,r3
 101de50:	10800604 	addi	r2,r2,24
 101de54:	10800017 	ldw	r2,0(r2)
 101de58:	11000044 	addi	r4,r2,1
 101de5c:	00c04234 	movhi	r3,264
 101de60:	18ec3b04 	addi	r3,r3,-20244
 101de64:	280491ba 	slli	r2,r5,6
 101de68:	10c5883a 	add	r2,r2,r3
 101de6c:	10800604 	addi	r2,r2,24
 101de70:	11000015 	stw	r4,0(r2)
					active_files[file_handle].file_size_in_bytes + 1;
				active_files[file_handle].modified = true;
 101de74:	e0bffd0f 	ldh	r2,-12(fp)
 101de78:	00c04234 	movhi	r3,264
 101de7c:	18ec3b04 	addi	r3,r3,-20244
 101de80:	100491ba 	slli	r2,r2,6
 101de84:	10c5883a 	add	r2,r2,r3
 101de88:	10c00e04 	addi	r3,r2,56
 101de8c:	00800044 	movi	r2,1
 101de90:	18800015 	stw	r2,0(r3)
			}
			// Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
			current_sector_modified = true;
 101de94:	00800044 	movi	r2,1
 101de98:	d0a71d15 	stw	r2,-25484(gp)
			result = true;
 101de9c:	00800044 	movi	r2,1
 101dea0:	e0bffa15 	stw	r2,-24(fp)
		}
	}

	return result;
 101dea4:	e0bffa17 	ldw	r2,-24(fp)
 101dea8:	e0bfff15 	stw	r2,-4(fp)
 101deac:	e0bfff17 	ldw	r2,-4(fp)
}
 101deb0:	e037883a 	mov	sp,fp
 101deb4:	dfc00117 	ldw	ra,4(sp)
 101deb8:	df000017 	ldw	fp,0(sp)
 101debc:	dec00204 	addi	sp,sp,8
 101dec0:	f800283a 	ret

0101dec4 <alt_up_sd_card_fclose>:

bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
 101dec4:	defffb04 	addi	sp,sp,-20
 101dec8:	dfc00415 	stw	ra,16(sp)
 101decc:	df000315 	stw	fp,12(sp)
 101ded0:	df000304 	addi	fp,sp,12
 101ded4:	e13fff0d 	sth	r4,-4(fp)
	assert(file_handle >= 0);
 101ded8:	e0bfff0f 	ldh	r2,-4(fp)
 101dedc:	1004403a 	cmpge	r2,r2,zero
 101dee0:	1000081e 	bne	r2,zero,101df04 <alt_up_sd_card_fclose+0x40>
 101dee4:	010040b4 	movhi	r4,258
 101dee8:	211f8204 	addi	r4,r4,32264
 101deec:	0141cac4 	movi	r5,1835
 101def0:	018040b4 	movhi	r6,258
 101def4:	319f7c04 	addi	r6,r6,32240
 101def8:	01c040b4 	movhi	r7,258
 101defc:	39df8f04 	addi	r7,r7,32316
 101df00:	10204d80 	call	10204d8 <__assert_func>

	bool result = false;
 101df04:	e03ffe15 	stw	zero,-8(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
 101df08:	101ca700 	call	101ca70 <alt_up_sd_card_is_Present>
 101df0c:	1005003a 	cmpeq	r2,r2,zero
 101df10:	1000641e 	bne	r2,zero,101e0a4 <alt_up_sd_card_fclose+0x1e0>
 101df14:	d0a71317 	ldw	r2,-25524(gp)
 101df18:	1005003a 	cmpeq	r2,r2,zero
 101df1c:	1000611e 	bne	r2,zero,101e0a4 <alt_up_sd_card_fclose+0x1e0>
		if (active_files[file_handle].in_use) {
 101df20:	e0bfff0f 	ldh	r2,-4(fp)
 101df24:	00c04234 	movhi	r3,264
 101df28:	18ec3b04 	addi	r3,r3,-20244
 101df2c:	100491ba 	slli	r2,r2,6
 101df30:	10c5883a 	add	r2,r2,r3
 101df34:	10800f04 	addi	r2,r2,60
 101df38:	10800017 	ldw	r2,0(r2)
 101df3c:	1005003a 	cmpeq	r2,r2,zero
 101df40:	1000581e 	bne	r2,zero,101e0a4 <alt_up_sd_card_fclose+0x1e0>
			if (active_files[file_handle].modified) {
 101df44:	e0bfff0f 	ldh	r2,-4(fp)
 101df48:	00c04234 	movhi	r3,264
 101df4c:	18ec3b04 	addi	r3,r3,-20244
 101df50:	100491ba 	slli	r2,r2,6
 101df54:	10c5883a 	add	r2,r2,r3
 101df58:	10800e04 	addi	r2,r2,56
 101df5c:	10800017 	ldw	r2,0(r2)
 101df60:	1005003a 	cmpeq	r2,r2,zero
 101df64:	1000461e 	bne	r2,zero,101e080 <alt_up_sd_card_fclose+0x1bc>
				unsigned int record_sector =
					active_files[file_handle].file_record_sector_in_cluster;
 101df68:	e0bfff0f 	ldh	r2,-4(fp)
 101df6c:	00c04234 	movhi	r3,264
 101df70:	18ec3b04 	addi	r3,r3,-20244
 101df74:	100491ba 	slli	r2,r2,6
 101df78:	10c5883a 	add	r2,r2,r3
 101df7c:	10800b04 	addi	r2,r2,44
 101df80:	10800017 	ldw	r2,0(r2)
 101df84:	e0bffd15 	stw	r2,-12(fp)
				if (active_files[file_handle].file_record_cluster == 0) {
 101df88:	e0bfff0f 	ldh	r2,-4(fp)
 101df8c:	00c04234 	movhi	r3,264
 101df90:	18ec3b04 	addi	r3,r3,-20244
 101df94:	100491ba 	slli	r2,r2,6
 101df98:	10c5883a 	add	r2,r2,r3
 101df9c:	10800a04 	addi	r2,r2,40
 101dfa0:	10800017 	ldw	r2,0(r2)
 101dfa4:	1004c03a 	cmpne	r2,r2,zero
 101dfa8:	1000071e 	bne	r2,zero,101dfc8 <alt_up_sd_card_fclose+0x104>
					record_sector = record_sector
 101dfac:	00804234 	movhi	r2,264
 101dfb0:	10ac2604 	addi	r2,r2,-20328
 101dfb4:	10c01317 	ldw	r3,76(r2)
 101dfb8:	e0bffd17 	ldw	r2,-12(fp)
 101dfbc:	10c5883a 	add	r2,r2,r3
 101dfc0:	e0bffd15 	stw	r2,-12(fp)
 101dfc4:	00001406 	br	101e018 <alt_up_sd_card_fclose+0x154>
						+ boot_sector_data.root_directory_sector_offset;
				}
				else {
					record_sector =
 101dfc8:	00804234 	movhi	r2,264
 101dfcc:	10ac2604 	addi	r2,r2,-20328
 101dfd0:	10c01417 	ldw	r3,80(r2)
 101dfd4:	e0bffd17 	ldw	r2,-12(fp)
 101dfd8:	1889883a 	add	r4,r3,r2
 101dfdc:	e0bfff0f 	ldh	r2,-4(fp)
 101dfe0:	00c04234 	movhi	r3,264
 101dfe4:	18ec3b04 	addi	r3,r3,-20244
 101dfe8:	100491ba 	slli	r2,r2,6
 101dfec:	10c5883a 	add	r2,r2,r3
 101dff0:	10800a04 	addi	r2,r2,40
 101dff4:	10800017 	ldw	r2,0(r2)
 101dff8:	10ffff84 	addi	r3,r2,-2
 101dffc:	00804234 	movhi	r2,264
 101e000:	10ac2604 	addi	r2,r2,-20328
 101e004:	10800383 	ldbu	r2,14(r2)
 101e008:	10803fcc 	andi	r2,r2,255
 101e00c:	1885383a 	mul	r2,r3,r2
 101e010:	2085883a 	add	r2,r4,r2
 101e014:	e0bffd15 	stw	r2,-12(fp)
						record_sector + boot_sector_data.data_sector_offset
						+ (active_files[file_handle].file_record_cluster
						- 2)
						* boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector,
 101e018:	e13ffd17 	ldw	r4,-12(fp)
 101e01c:	d1671a17 	ldw	r5,-25496(gp)
 101e020:	1019d640 	call	1019d64 <Read_Sector_Data>
 101e024:	1005003a 	cmpeq	r2,r2,zero
 101e028:	1000151e 	bne	r2,zero,101e080 <alt_up_sd_card_fclose+0x1bc>
					fat_partition_offset_in_512_byte_sectors)) {
					if (Write_File_Record_At_Offset(
 101e02c:	e0bfff0f 	ldh	r2,-4(fp)
 101e030:	00c04234 	movhi	r3,264
 101e034:	18ec3b04 	addi	r3,r3,-20244
 101e038:	100491ba 	slli	r2,r2,6
 101e03c:	10c5883a 	add	r2,r2,r3
 101e040:	10800c04 	addi	r2,r2,48
 101e044:	1080000b 	ldhu	r2,0(r2)
 101e048:	113fffcc 	andi	r4,r2,65535
 101e04c:	2120001c 	xori	r4,r4,32768
 101e050:	21200004 	addi	r4,r4,-32768
 101e054:	e0bfff0f 	ldh	r2,-4(fp)
 101e058:	100491ba 	slli	r2,r2,6
 101e05c:	1007883a 	mov	r3,r2
 101e060:	00804234 	movhi	r2,264
 101e064:	10ac3b04 	addi	r2,r2,-20244
 101e068:	188b883a 	add	r5,r3,r2
 101e06c:	101a4300 	call	101a430 <Write_File_Record_At_Offset>
 101e070:	1005003a 	cmpeq	r2,r2,zero
 101e074:	1000021e 	bne	r2,zero,101e080 <alt_up_sd_card_fclose+0x1bc>
						active_files[file_handle].file_record_offset,
						&(active_files[file_handle]))) {
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
 101e078:	1019d140 	call	1019d14 <Save_Modified_Sector>
 101e07c:	e0bffe15 	stw	r2,-8(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
 101e080:	e0bfff0f 	ldh	r2,-4(fp)
 101e084:	00c04234 	movhi	r3,264
 101e088:	18ec3b04 	addi	r3,r3,-20244
 101e08c:	100491ba 	slli	r2,r2,6
 101e090:	10c5883a 	add	r2,r2,r3
 101e094:	10800f04 	addi	r2,r2,60
 101e098:	10000015 	stw	zero,0(r2)
			result = true;
 101e09c:	00800044 	movi	r2,1
 101e0a0:	e0bffe15 	stw	r2,-8(fp)
		}
	}

	return result;
 101e0a4:	e0bffe17 	ldw	r2,-8(fp)
}
 101e0a8:	e037883a 	mov	sp,fp
 101e0ac:	dfc00117 	ldw	ra,4(sp)
 101e0b0:	df000017 	ldw	fp,0(sp)
 101e0b4:	dec00204 	addi	sp,sp,8
 101e0b8:	f800283a 	ret

0101e0bc <Read_Sector_Data_CRC>:

bool Read_Sector_Data_CRC(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
 101e0bc:	defff904 	addi	sp,sp,-28
 101e0c0:	dfc00615 	stw	ra,24(sp)
 101e0c4:	df000515 	stw	fp,20(sp)
 101e0c8:	df000504 	addi	fp,sp,20
 101e0cc:	e13ffd15 	stw	r4,-12(fp)
 101e0d0:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
 101e0d4:	e03ffc15 	stw	zero,-16(fp)

	if (alt_up_sd_card_is_Present()) {
 101e0d8:	101ca700 	call	101ca70 <alt_up_sd_card_is_Present>
 101e0dc:	1005003a 	cmpeq	r2,r2,zero
 101e0e0:	10002d1e 	bne	r2,zero,101e198 <Read_Sector_Data_CRC+0xdc>
		short int reg_state = 0xff;
 101e0e4:	00803fc4 	movi	r2,255
 101e0e8:	e0bffb0d 	sth	r2,-20(fp)

		/* Write data to the SD card if the current buffer is out of date. */
		if (current_sector_modified) {
 101e0ec:	d0a71d17 	ldw	r2,-25484(gp)
 101e0f0:	1005003a 	cmpeq	r2,r2,zero
 101e0f4:	1000081e 	bne	r2,zero,101e118 <Read_Sector_Data_CRC+0x5c>
			if (Write_Sector_Data(current_sector_index, 0) == false) {
 101e0f8:	d0a71e17 	ldw	r2,-25480(gp)
 101e0fc:	1009883a 	mov	r4,r2
 101e100:	000b883a 	mov	r5,zero
 101e104:	1019c4c0 	call	1019c4c <Write_Sector_Data>
 101e108:	1004c03a 	cmpne	r2,r2,zero
 101e10c:	1000021e 	bne	r2,zero,101e118 <Read_Sector_Data_CRC+0x5c>
				return false;
 101e110:	e03fff15 	stw	zero,-4(fp)
 101e114:	00002206 	br	101e1a0 <Read_Sector_Data_CRC+0xe4>
			}
		}
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		* the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0,
 101e118:	d0a71817 	ldw	r2,-25504(gp)
 101e11c:	1009883a 	mov	r4,r2
 101e120:	e0fffd17 	ldw	r3,-12(fp)
 101e124:	e0bffe17 	ldw	r2,-8(fp)
 101e128:	1885883a 	add	r2,r3,r2
 101e12c:	1006927a 	slli	r3,r2,9
 101e130:	2005883a 	mov	r2,r4
 101e134:	10c00035 	stwio	r3,0(r2)
			(sector_index + partition_offset) * 512);
		IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
 101e138:	d0a71717 	ldw	r2,-25508(gp)
 101e13c:	1007883a 	mov	r3,r2
 101e140:	00800444 	movi	r2,17
 101e144:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int)IORD_16DIRECT(aux_status_register, 0);
 101e148:	d0a71417 	ldw	r2,-25520(gp)
 101e14c:	1080002b 	ldhuio	r2,0(r2)
 101e150:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04) != 0);
 101e154:	e0bffb0b 	ldhu	r2,-20(fp)
 101e158:	10bfffcc 	andi	r2,r2,65535
 101e15c:	1080010c 	andi	r2,r2,4
 101e160:	1004c03a 	cmpne	r2,r2,zero
 101e164:	103ff81e 	bne	r2,zero,101e148 <Read_Sector_Data_CRC+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x30) == 0) {
 101e168:	e0bffb0b 	ldhu	r2,-20(fp)
 101e16c:	10bfffcc 	andi	r2,r2,65535
 101e170:	10800c0c 	andi	r2,r2,48
 101e174:	1004c03a 	cmpne	r2,r2,zero
 101e178:	1000071e 	bne	r2,zero,101e198 <Read_Sector_Data_CRC+0xdc>
			result = true;
 101e17c:	00800044 	movi	r2,1
 101e180:	e0bffc15 	stw	r2,-16(fp)
			current_sector_modified = false;
 101e184:	d0271d15 	stw	zero,-25484(gp)
			current_sector_index = sector_index + partition_offset;
 101e188:	e0fffd17 	ldw	r3,-12(fp)
 101e18c:	e0bffe17 	ldw	r2,-8(fp)
 101e190:	1885883a 	add	r2,r3,r2
 101e194:	d0a71e15 	stw	r2,-25480(gp)
		}
	}
	return result;
 101e198:	e0bffc17 	ldw	r2,-16(fp)
 101e19c:	e0bfff15 	stw	r2,-4(fp)
 101e1a0:	e0bfff17 	ldw	r2,-4(fp)
}
 101e1a4:	e037883a 	mov	sp,fp
 101e1a8:	dfc00117 	ldw	ra,4(sp)
 101e1ac:	df000017 	ldw	fp,0(sp)
 101e1b0:	dec00204 	addi	sp,sp,8
 101e1b4:	f800283a 	ret

0101e1b8 <Read_Sector_Data_Attempt_CRC>:

bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
 101e1b8:	defff804 	addi	sp,sp,-32
 101e1bc:	dfc00715 	stw	ra,28(sp)
 101e1c0:	df000615 	stw	fp,24(sp)
 101e1c4:	df000604 	addi	fp,sp,24
 101e1c8:	e13ffd15 	stw	r4,-12(fp)
 101e1cc:	e17ffe15 	stw	r5,-8(fp)
	int i;
	bool correct;
	const int attempts = 100;
 101e1d0:	00801904 	movi	r2,100
 101e1d4:	e0bffa15 	stw	r2,-24(fp)

	for (i = 0; i < attempts; i++) {
 101e1d8:	e03ffc15 	stw	zero,-16(fp)
 101e1dc:	00000d06 	br	101e214 <Read_Sector_Data_Attempt_CRC+0x5c>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
 101e1e0:	e13ffd17 	ldw	r4,-12(fp)
 101e1e4:	e17ffe17 	ldw	r5,-8(fp)
 101e1e8:	101e0bc0 	call	101e0bc <Read_Sector_Data_CRC>
 101e1ec:	e0bffb15 	stw	r2,-20(fp)
		if (correct) {
 101e1f0:	e0bffb17 	ldw	r2,-20(fp)
 101e1f4:	1005003a 	cmpeq	r2,r2,zero
 101e1f8:	1000031e 	bne	r2,zero,101e208 <Read_Sector_Data_Attempt_CRC+0x50>
			return true;
 101e1fc:	00800044 	movi	r2,1
 101e200:	e0bfff15 	stw	r2,-4(fp)
 101e204:	00000a06 	br	101e230 <Read_Sector_Data_Attempt_CRC+0x78>
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
	int i;
	bool correct;
	const int attempts = 100;

	for (i = 0; i < attempts; i++) {
 101e208:	e0bffc17 	ldw	r2,-16(fp)
 101e20c:	10800044 	addi	r2,r2,1
 101e210:	e0bffc15 	stw	r2,-16(fp)
 101e214:	e0fffc17 	ldw	r3,-16(fp)
 101e218:	e0bffa17 	ldw	r2,-24(fp)
 101e21c:	18bff016 	blt	r3,r2,101e1e0 <Read_Sector_Data_Attempt_CRC+0x28>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
		if (correct) {
			return true;
		}
	}
	return Read_Sector_Data(sector_index, partition_offset);
 101e220:	e13ffd17 	ldw	r4,-12(fp)
 101e224:	e17ffe17 	ldw	r5,-8(fp)
 101e228:	1019d640 	call	1019d64 <Read_Sector_Data>
 101e22c:	e0bfff15 	stw	r2,-4(fp)
 101e230:	e0bfff17 	ldw	r2,-4(fp)
 101e234:	e037883a 	mov	sp,fp
 101e238:	dfc00117 	ldw	ra,4(sp)
 101e23c:	df000017 	ldw	fp,0(sp)
 101e240:	dec00204 	addi	sp,sp,8
 101e244:	f800283a 	ret

0101e248 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 101e248:	defffa04 	addi	sp,sp,-24
 101e24c:	dfc00515 	stw	ra,20(sp)
 101e250:	df000415 	stw	fp,16(sp)
 101e254:	df000404 	addi	fp,sp,16
 101e258:	e13ffd15 	stw	r4,-12(fp)
 101e25c:	e17ffe15 	stw	r5,-8(fp)
 101e260:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 101e264:	e0bffd17 	ldw	r2,-12(fp)
 101e268:	10800017 	ldw	r2,0(r2)
 101e26c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 101e270:	e0bffc17 	ldw	r2,-16(fp)
 101e274:	11000a04 	addi	r4,r2,40
 101e278:	e0bffd17 	ldw	r2,-12(fp)
 101e27c:	11c00217 	ldw	r7,8(r2)
 101e280:	e17ffe17 	ldw	r5,-8(fp)
 101e284:	e1bfff17 	ldw	r6,-4(fp)
 101e288:	101e88c0 	call	101e88c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 101e28c:	e037883a 	mov	sp,fp
 101e290:	dfc00117 	ldw	ra,4(sp)
 101e294:	df000017 	ldw	fp,0(sp)
 101e298:	dec00204 	addi	sp,sp,8
 101e29c:	f800283a 	ret

0101e2a0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 101e2a0:	defffa04 	addi	sp,sp,-24
 101e2a4:	dfc00515 	stw	ra,20(sp)
 101e2a8:	df000415 	stw	fp,16(sp)
 101e2ac:	df000404 	addi	fp,sp,16
 101e2b0:	e13ffd15 	stw	r4,-12(fp)
 101e2b4:	e17ffe15 	stw	r5,-8(fp)
 101e2b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 101e2bc:	e0bffd17 	ldw	r2,-12(fp)
 101e2c0:	10800017 	ldw	r2,0(r2)
 101e2c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 101e2c8:	e0bffc17 	ldw	r2,-16(fp)
 101e2cc:	11000a04 	addi	r4,r2,40
 101e2d0:	e0bffd17 	ldw	r2,-12(fp)
 101e2d4:	11c00217 	ldw	r7,8(r2)
 101e2d8:	e17ffe17 	ldw	r5,-8(fp)
 101e2dc:	e1bfff17 	ldw	r6,-4(fp)
 101e2e0:	101eab00 	call	101eab0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 101e2e4:	e037883a 	mov	sp,fp
 101e2e8:	dfc00117 	ldw	ra,4(sp)
 101e2ec:	df000017 	ldw	fp,0(sp)
 101e2f0:	dec00204 	addi	sp,sp,8
 101e2f4:	f800283a 	ret

0101e2f8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 101e2f8:	defffc04 	addi	sp,sp,-16
 101e2fc:	dfc00315 	stw	ra,12(sp)
 101e300:	df000215 	stw	fp,8(sp)
 101e304:	df000204 	addi	fp,sp,8
 101e308:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 101e30c:	e0bfff17 	ldw	r2,-4(fp)
 101e310:	10800017 	ldw	r2,0(r2)
 101e314:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 101e318:	e0bffe17 	ldw	r2,-8(fp)
 101e31c:	11000a04 	addi	r4,r2,40
 101e320:	e0bfff17 	ldw	r2,-4(fp)
 101e324:	11400217 	ldw	r5,8(r2)
 101e328:	101e7240 	call	101e724 <altera_avalon_jtag_uart_close>
}
 101e32c:	e037883a 	mov	sp,fp
 101e330:	dfc00117 	ldw	ra,4(sp)
 101e334:	df000017 	ldw	fp,0(sp)
 101e338:	dec00204 	addi	sp,sp,8
 101e33c:	f800283a 	ret

0101e340 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 101e340:	defffa04 	addi	sp,sp,-24
 101e344:	dfc00515 	stw	ra,20(sp)
 101e348:	df000415 	stw	fp,16(sp)
 101e34c:	df000404 	addi	fp,sp,16
 101e350:	e13ffd15 	stw	r4,-12(fp)
 101e354:	e17ffe15 	stw	r5,-8(fp)
 101e358:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 101e35c:	e0bffd17 	ldw	r2,-12(fp)
 101e360:	10800017 	ldw	r2,0(r2)
 101e364:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 101e368:	e0bffc17 	ldw	r2,-16(fp)
 101e36c:	11000a04 	addi	r4,r2,40
 101e370:	e17ffe17 	ldw	r5,-8(fp)
 101e374:	e1bfff17 	ldw	r6,-4(fp)
 101e378:	101e7980 	call	101e798 <altera_avalon_jtag_uart_ioctl>
}
 101e37c:	e037883a 	mov	sp,fp
 101e380:	dfc00117 	ldw	ra,4(sp)
 101e384:	df000017 	ldw	fp,0(sp)
 101e388:	dec00204 	addi	sp,sp,8
 101e38c:	f800283a 	ret

0101e390 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 101e390:	defffb04 	addi	sp,sp,-20
 101e394:	dfc00415 	stw	ra,16(sp)
 101e398:	df000315 	stw	fp,12(sp)
 101e39c:	df000304 	addi	fp,sp,12
 101e3a0:	e13ffd15 	stw	r4,-12(fp)
 101e3a4:	e17ffe15 	stw	r5,-8(fp)
 101e3a8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 101e3ac:	e0fffd17 	ldw	r3,-12(fp)
 101e3b0:	00800044 	movi	r2,1
 101e3b4:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 101e3b8:	e0bffd17 	ldw	r2,-12(fp)
 101e3bc:	10800017 	ldw	r2,0(r2)
 101e3c0:	11000104 	addi	r4,r2,4
 101e3c4:	e0bffd17 	ldw	r2,-12(fp)
 101e3c8:	10800817 	ldw	r2,32(r2)
 101e3cc:	1007883a 	mov	r3,r2
 101e3d0:	2005883a 	mov	r2,r4
 101e3d4:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 101e3d8:	e13fff17 	ldw	r4,-4(fp)
 101e3dc:	e17ffd17 	ldw	r5,-12(fp)
 101e3e0:	018040b4 	movhi	r6,258
 101e3e4:	31b91204 	addi	r6,r6,-7096
 101e3e8:	101fc280 	call	101fc28 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 101e3ec:	e0bffd17 	ldw	r2,-12(fp)
 101e3f0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 101e3f4:	e0bffd17 	ldw	r2,-12(fp)
 101e3f8:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 101e3fc:	008040f4 	movhi	r2,259
 101e400:	10ad8e04 	addi	r2,r2,-18888
 101e404:	10800017 	ldw	r2,0(r2)
 101e408:	100b883a 	mov	r5,r2
 101e40c:	018040b4 	movhi	r6,258
 101e410:	31b99d04 	addi	r6,r6,-6540
 101e414:	e1fffd17 	ldw	r7,-12(fp)
 101e418:	101f6b40 	call	101f6b4 <alt_alarm_start>
 101e41c:	1004403a 	cmpge	r2,r2,zero
 101e420:	1000041e 	bne	r2,zero,101e434 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 101e424:	e0fffd17 	ldw	r3,-12(fp)
 101e428:	00a00034 	movhi	r2,32768
 101e42c:	10bfffc4 	addi	r2,r2,-1
 101e430:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 101e434:	e037883a 	mov	sp,fp
 101e438:	dfc00117 	ldw	ra,4(sp)
 101e43c:	df000017 	ldw	fp,0(sp)
 101e440:	dec00204 	addi	sp,sp,8
 101e444:	f800283a 	ret

0101e448 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 101e448:	defff704 	addi	sp,sp,-36
 101e44c:	df000815 	stw	fp,32(sp)
 101e450:	df000804 	addi	fp,sp,32
 101e454:	e13ffe15 	stw	r4,-8(fp)
 101e458:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 101e45c:	e0bffe17 	ldw	r2,-8(fp)
 101e460:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 101e464:	e0bffd17 	ldw	r2,-12(fp)
 101e468:	10800017 	ldw	r2,0(r2)
 101e46c:	e0bffc15 	stw	r2,-16(fp)
 101e470:	00000006 	br	101e474 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 101e474:	e0bffc17 	ldw	r2,-16(fp)
 101e478:	10800104 	addi	r2,r2,4
 101e47c:	10800037 	ldwio	r2,0(r2)
 101e480:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 101e484:	e0bffb17 	ldw	r2,-20(fp)
 101e488:	1080c00c 	andi	r2,r2,768
 101e48c:	1005003a 	cmpeq	r2,r2,zero
 101e490:	1000741e 	bne	r2,zero,101e664 <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 101e494:	e0bffb17 	ldw	r2,-20(fp)
 101e498:	1080400c 	andi	r2,r2,256
 101e49c:	1005003a 	cmpeq	r2,r2,zero
 101e4a0:	1000351e 	bne	r2,zero,101e578 <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 101e4a4:	00800074 	movhi	r2,1
 101e4a8:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 101e4ac:	e0bffd17 	ldw	r2,-12(fp)
 101e4b0:	10800a17 	ldw	r2,40(r2)
 101e4b4:	10800044 	addi	r2,r2,1
 101e4b8:	1081ffcc 	andi	r2,r2,2047
 101e4bc:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 101e4c0:	e0bffd17 	ldw	r2,-12(fp)
 101e4c4:	10c00b17 	ldw	r3,44(r2)
 101e4c8:	e0bff917 	ldw	r2,-28(fp)
 101e4cc:	18801626 	beq	r3,r2,101e528 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 101e4d0:	e0bffc17 	ldw	r2,-16(fp)
 101e4d4:	10800037 	ldwio	r2,0(r2)
 101e4d8:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 101e4dc:	e0bffa17 	ldw	r2,-24(fp)
 101e4e0:	10a0000c 	andi	r2,r2,32768
 101e4e4:	1005003a 	cmpeq	r2,r2,zero
 101e4e8:	10000f1e 	bne	r2,zero,101e528 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 101e4ec:	e0bffd17 	ldw	r2,-12(fp)
 101e4f0:	10c00a17 	ldw	r3,40(r2)
 101e4f4:	e0bffa17 	ldw	r2,-24(fp)
 101e4f8:	1009883a 	mov	r4,r2
 101e4fc:	e0bffd17 	ldw	r2,-12(fp)
 101e500:	1885883a 	add	r2,r3,r2
 101e504:	10800e04 	addi	r2,r2,56
 101e508:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 101e50c:	e0bffd17 	ldw	r2,-12(fp)
 101e510:	10800a17 	ldw	r2,40(r2)
 101e514:	10800044 	addi	r2,r2,1
 101e518:	10c1ffcc 	andi	r3,r2,2047
 101e51c:	e0bffd17 	ldw	r2,-12(fp)
 101e520:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 101e524:	003fe106 	br	101e4ac <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 101e528:	e0bffa17 	ldw	r2,-24(fp)
 101e52c:	10bfffec 	andhi	r2,r2,65535
 101e530:	1005003a 	cmpeq	r2,r2,zero
 101e534:	1000101e 	bne	r2,zero,101e578 <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 101e538:	e0bffd17 	ldw	r2,-12(fp)
 101e53c:	10c00817 	ldw	r3,32(r2)
 101e540:	00bfff84 	movi	r2,-2
 101e544:	1886703a 	and	r3,r3,r2
 101e548:	e0bffd17 	ldw	r2,-12(fp)
 101e54c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 101e550:	e0bffc17 	ldw	r2,-16(fp)
 101e554:	11000104 	addi	r4,r2,4
 101e558:	e0bffd17 	ldw	r2,-12(fp)
 101e55c:	10800817 	ldw	r2,32(r2)
 101e560:	1007883a 	mov	r3,r2
 101e564:	2005883a 	mov	r2,r4
 101e568:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 101e56c:	e0bffc17 	ldw	r2,-16(fp)
 101e570:	10800104 	addi	r2,r2,4
 101e574:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 101e578:	e0bffb17 	ldw	r2,-20(fp)
 101e57c:	1080800c 	andi	r2,r2,512
 101e580:	1005003a 	cmpeq	r2,r2,zero
 101e584:	103fbb1e 	bne	r2,zero,101e474 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 101e588:	e0bffb17 	ldw	r2,-20(fp)
 101e58c:	10bfffec 	andhi	r2,r2,65535
 101e590:	1004d43a 	srli	r2,r2,16
 101e594:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 101e598:	00001506 	br	101e5f0 <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 101e59c:	e13ffc17 	ldw	r4,-16(fp)
 101e5a0:	e0bffd17 	ldw	r2,-12(fp)
 101e5a4:	10c00d17 	ldw	r3,52(r2)
 101e5a8:	e0bffd17 	ldw	r2,-12(fp)
 101e5ac:	1885883a 	add	r2,r3,r2
 101e5b0:	10820e04 	addi	r2,r2,2104
 101e5b4:	10800003 	ldbu	r2,0(r2)
 101e5b8:	10c03fcc 	andi	r3,r2,255
 101e5bc:	18c0201c 	xori	r3,r3,128
 101e5c0:	18ffe004 	addi	r3,r3,-128
 101e5c4:	2005883a 	mov	r2,r4
 101e5c8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 101e5cc:	e0bffd17 	ldw	r2,-12(fp)
 101e5d0:	10800d17 	ldw	r2,52(r2)
 101e5d4:	10800044 	addi	r2,r2,1
 101e5d8:	10c1ffcc 	andi	r3,r2,2047
 101e5dc:	e0bffd17 	ldw	r2,-12(fp)
 101e5e0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 101e5e4:	e0bff817 	ldw	r2,-32(fp)
 101e5e8:	10bfffc4 	addi	r2,r2,-1
 101e5ec:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 101e5f0:	e0bff817 	ldw	r2,-32(fp)
 101e5f4:	1005003a 	cmpeq	r2,r2,zero
 101e5f8:	1000051e 	bne	r2,zero,101e610 <altera_avalon_jtag_uart_irq+0x1c8>
 101e5fc:	e0bffd17 	ldw	r2,-12(fp)
 101e600:	10c00d17 	ldw	r3,52(r2)
 101e604:	e0bffd17 	ldw	r2,-12(fp)
 101e608:	10800c17 	ldw	r2,48(r2)
 101e60c:	18bfe31e 	bne	r3,r2,101e59c <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 101e610:	e0bff817 	ldw	r2,-32(fp)
 101e614:	1005003a 	cmpeq	r2,r2,zero
 101e618:	103f961e 	bne	r2,zero,101e474 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 101e61c:	e0bffd17 	ldw	r2,-12(fp)
 101e620:	10c00817 	ldw	r3,32(r2)
 101e624:	00bfff44 	movi	r2,-3
 101e628:	1886703a 	and	r3,r3,r2
 101e62c:	e0bffd17 	ldw	r2,-12(fp)
 101e630:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 101e634:	e0bffd17 	ldw	r2,-12(fp)
 101e638:	10800017 	ldw	r2,0(r2)
 101e63c:	11000104 	addi	r4,r2,4
 101e640:	e0bffd17 	ldw	r2,-12(fp)
 101e644:	10800817 	ldw	r2,32(r2)
 101e648:	1007883a 	mov	r3,r2
 101e64c:	2005883a 	mov	r2,r4
 101e650:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 101e654:	e0bffc17 	ldw	r2,-16(fp)
 101e658:	10800104 	addi	r2,r2,4
 101e65c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 101e660:	003f8406 	br	101e474 <altera_avalon_jtag_uart_irq+0x2c>
}
 101e664:	e037883a 	mov	sp,fp
 101e668:	df000017 	ldw	fp,0(sp)
 101e66c:	dec00104 	addi	sp,sp,4
 101e670:	f800283a 	ret

0101e674 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 101e674:	defffc04 	addi	sp,sp,-16
 101e678:	df000315 	stw	fp,12(sp)
 101e67c:	df000304 	addi	fp,sp,12
 101e680:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 101e684:	e0bfff17 	ldw	r2,-4(fp)
 101e688:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 101e68c:	e0bffe17 	ldw	r2,-8(fp)
 101e690:	10800017 	ldw	r2,0(r2)
 101e694:	10800104 	addi	r2,r2,4
 101e698:	10800037 	ldwio	r2,0(r2)
 101e69c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 101e6a0:	e0bffd17 	ldw	r2,-12(fp)
 101e6a4:	1081000c 	andi	r2,r2,1024
 101e6a8:	1005003a 	cmpeq	r2,r2,zero
 101e6ac:	10000c1e 	bne	r2,zero,101e6e0 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 101e6b0:	e0bffe17 	ldw	r2,-8(fp)
 101e6b4:	10800017 	ldw	r2,0(r2)
 101e6b8:	11000104 	addi	r4,r2,4
 101e6bc:	e0bffe17 	ldw	r2,-8(fp)
 101e6c0:	10800817 	ldw	r2,32(r2)
 101e6c4:	10810014 	ori	r2,r2,1024
 101e6c8:	1007883a 	mov	r3,r2
 101e6cc:	2005883a 	mov	r2,r4
 101e6d0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 101e6d4:	e0bffe17 	ldw	r2,-8(fp)
 101e6d8:	10000915 	stw	zero,36(r2)
 101e6dc:	00000a06 	br	101e708 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 101e6e0:	e0bffe17 	ldw	r2,-8(fp)
 101e6e4:	10c00917 	ldw	r3,36(r2)
 101e6e8:	00a00034 	movhi	r2,32768
 101e6ec:	10bfff04 	addi	r2,r2,-4
 101e6f0:	10c00536 	bltu	r2,r3,101e708 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 101e6f4:	e0bffe17 	ldw	r2,-8(fp)
 101e6f8:	10800917 	ldw	r2,36(r2)
 101e6fc:	10c00044 	addi	r3,r2,1
 101e700:	e0bffe17 	ldw	r2,-8(fp)
 101e704:	10c00915 	stw	r3,36(r2)
 101e708:	008040f4 	movhi	r2,259
 101e70c:	10ad8e04 	addi	r2,r2,-18888
 101e710:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 101e714:	e037883a 	mov	sp,fp
 101e718:	df000017 	ldw	fp,0(sp)
 101e71c:	dec00104 	addi	sp,sp,4
 101e720:	f800283a 	ret

0101e724 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 101e724:	defffc04 	addi	sp,sp,-16
 101e728:	df000315 	stw	fp,12(sp)
 101e72c:	df000304 	addi	fp,sp,12
 101e730:	e13ffd15 	stw	r4,-12(fp)
 101e734:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 101e738:	00000706 	br	101e758 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 101e73c:	e0bffe17 	ldw	r2,-8(fp)
 101e740:	1090000c 	andi	r2,r2,16384
 101e744:	1005003a 	cmpeq	r2,r2,zero
 101e748:	1000031e 	bne	r2,zero,101e758 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 101e74c:	00bffd44 	movi	r2,-11
 101e750:	e0bfff15 	stw	r2,-4(fp)
 101e754:	00000b06 	br	101e784 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 101e758:	e0bffd17 	ldw	r2,-12(fp)
 101e75c:	10c00d17 	ldw	r3,52(r2)
 101e760:	e0bffd17 	ldw	r2,-12(fp)
 101e764:	10800c17 	ldw	r2,48(r2)
 101e768:	18800526 	beq	r3,r2,101e780 <altera_avalon_jtag_uart_close+0x5c>
 101e76c:	e0bffd17 	ldw	r2,-12(fp)
 101e770:	10c00917 	ldw	r3,36(r2)
 101e774:	e0bffd17 	ldw	r2,-12(fp)
 101e778:	10800117 	ldw	r2,4(r2)
 101e77c:	18bfef36 	bltu	r3,r2,101e73c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 101e780:	e03fff15 	stw	zero,-4(fp)
 101e784:	e0bfff17 	ldw	r2,-4(fp)
}
 101e788:	e037883a 	mov	sp,fp
 101e78c:	df000017 	ldw	fp,0(sp)
 101e790:	dec00104 	addi	sp,sp,4
 101e794:	f800283a 	ret

0101e798 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 101e798:	defff804 	addi	sp,sp,-32
 101e79c:	df000715 	stw	fp,28(sp)
 101e7a0:	df000704 	addi	fp,sp,28
 101e7a4:	e13ffb15 	stw	r4,-20(fp)
 101e7a8:	e17ffc15 	stw	r5,-16(fp)
 101e7ac:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 101e7b0:	00bff9c4 	movi	r2,-25
 101e7b4:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 101e7b8:	e0bffc17 	ldw	r2,-16(fp)
 101e7bc:	e0bfff15 	stw	r2,-4(fp)
 101e7c0:	e0ffff17 	ldw	r3,-4(fp)
 101e7c4:	189a8060 	cmpeqi	r2,r3,27137
 101e7c8:	1000041e 	bne	r2,zero,101e7dc <altera_avalon_jtag_uart_ioctl+0x44>
 101e7cc:	e0ffff17 	ldw	r3,-4(fp)
 101e7d0:	189a80a0 	cmpeqi	r2,r3,27138
 101e7d4:	10001b1e 	bne	r2,zero,101e844 <altera_avalon_jtag_uart_ioctl+0xac>
 101e7d8:	00002706 	br	101e878 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 101e7dc:	e0bffb17 	ldw	r2,-20(fp)
 101e7e0:	10c00117 	ldw	r3,4(r2)
 101e7e4:	00a00034 	movhi	r2,32768
 101e7e8:	10bfffc4 	addi	r2,r2,-1
 101e7ec:	18802226 	beq	r3,r2,101e878 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 101e7f0:	e0bffd17 	ldw	r2,-12(fp)
 101e7f4:	10800017 	ldw	r2,0(r2)
 101e7f8:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 101e7fc:	e0bff917 	ldw	r2,-28(fp)
 101e800:	10800090 	cmplti	r2,r2,2
 101e804:	1000071e 	bne	r2,zero,101e824 <altera_avalon_jtag_uart_ioctl+0x8c>
 101e808:	e0fff917 	ldw	r3,-28(fp)
 101e80c:	00a00034 	movhi	r2,32768
 101e810:	10bfffc4 	addi	r2,r2,-1
 101e814:	18800326 	beq	r3,r2,101e824 <altera_avalon_jtag_uart_ioctl+0x8c>
 101e818:	e0bff917 	ldw	r2,-28(fp)
 101e81c:	e0bffe15 	stw	r2,-8(fp)
 101e820:	00000306 	br	101e830 <altera_avalon_jtag_uart_ioctl+0x98>
 101e824:	00e00034 	movhi	r3,32768
 101e828:	18ffff84 	addi	r3,r3,-2
 101e82c:	e0fffe15 	stw	r3,-8(fp)
 101e830:	e0bffb17 	ldw	r2,-20(fp)
 101e834:	e0fffe17 	ldw	r3,-8(fp)
 101e838:	10c00115 	stw	r3,4(r2)
      rc = 0;
 101e83c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 101e840:	00000d06 	br	101e878 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 101e844:	e0bffb17 	ldw	r2,-20(fp)
 101e848:	10c00117 	ldw	r3,4(r2)
 101e84c:	00a00034 	movhi	r2,32768
 101e850:	10bfffc4 	addi	r2,r2,-1
 101e854:	18800826 	beq	r3,r2,101e878 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 101e858:	e13ffd17 	ldw	r4,-12(fp)
 101e85c:	e0bffb17 	ldw	r2,-20(fp)
 101e860:	10c00917 	ldw	r3,36(r2)
 101e864:	e0bffb17 	ldw	r2,-20(fp)
 101e868:	10800117 	ldw	r2,4(r2)
 101e86c:	1885803a 	cmpltu	r2,r3,r2
 101e870:	20800015 	stw	r2,0(r4)
      rc = 0;
 101e874:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 101e878:	e0bffa17 	ldw	r2,-24(fp)
}
 101e87c:	e037883a 	mov	sp,fp
 101e880:	df000017 	ldw	fp,0(sp)
 101e884:	dec00104 	addi	sp,sp,4
 101e888:	f800283a 	ret

0101e88c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 101e88c:	defff204 	addi	sp,sp,-56
 101e890:	dfc00d15 	stw	ra,52(sp)
 101e894:	df000c15 	stw	fp,48(sp)
 101e898:	df000c04 	addi	fp,sp,48
 101e89c:	e13ffb15 	stw	r4,-20(fp)
 101e8a0:	e17ffc15 	stw	r5,-16(fp)
 101e8a4:	e1bffd15 	stw	r6,-12(fp)
 101e8a8:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 101e8ac:	e0bffc17 	ldw	r2,-16(fp)
 101e8b0:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 101e8b4:	00004806 	br	101e9d8 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 101e8b8:	e0bffb17 	ldw	r2,-20(fp)
 101e8bc:	10800a17 	ldw	r2,40(r2)
 101e8c0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 101e8c4:	e0bffb17 	ldw	r2,-20(fp)
 101e8c8:	10800b17 	ldw	r2,44(r2)
 101e8cc:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 101e8d0:	e0fff717 	ldw	r3,-36(fp)
 101e8d4:	e0bff617 	ldw	r2,-40(fp)
 101e8d8:	18800536 	bltu	r3,r2,101e8f0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 101e8dc:	e0bff717 	ldw	r2,-36(fp)
 101e8e0:	e0fff617 	ldw	r3,-40(fp)
 101e8e4:	10c5c83a 	sub	r2,r2,r3
 101e8e8:	e0bff815 	stw	r2,-32(fp)
 101e8ec:	00000406 	br	101e900 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 101e8f0:	00820004 	movi	r2,2048
 101e8f4:	e0fff617 	ldw	r3,-40(fp)
 101e8f8:	10c5c83a 	sub	r2,r2,r3
 101e8fc:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 101e900:	e0bff817 	ldw	r2,-32(fp)
 101e904:	1005003a 	cmpeq	r2,r2,zero
 101e908:	10001f1e 	bne	r2,zero,101e988 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 101e90c:	e0fffd17 	ldw	r3,-12(fp)
 101e910:	e0bff817 	ldw	r2,-32(fp)
 101e914:	1880022e 	bgeu	r3,r2,101e920 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 101e918:	e0bffd17 	ldw	r2,-12(fp)
 101e91c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 101e920:	e0bffb17 	ldw	r2,-20(fp)
 101e924:	10c00e04 	addi	r3,r2,56
 101e928:	e0bff617 	ldw	r2,-40(fp)
 101e92c:	1887883a 	add	r3,r3,r2
 101e930:	e0bffa17 	ldw	r2,-24(fp)
 101e934:	1009883a 	mov	r4,r2
 101e938:	180b883a 	mov	r5,r3
 101e93c:	e1bff817 	ldw	r6,-32(fp)
 101e940:	100d7500 	call	100d750 <memcpy>
      ptr   += n;
 101e944:	e0fff817 	ldw	r3,-32(fp)
 101e948:	e0bffa17 	ldw	r2,-24(fp)
 101e94c:	10c5883a 	add	r2,r2,r3
 101e950:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 101e954:	e0fffd17 	ldw	r3,-12(fp)
 101e958:	e0bff817 	ldw	r2,-32(fp)
 101e95c:	1885c83a 	sub	r2,r3,r2
 101e960:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 101e964:	e0fff617 	ldw	r3,-40(fp)
 101e968:	e0bff817 	ldw	r2,-32(fp)
 101e96c:	1885883a 	add	r2,r3,r2
 101e970:	10c1ffcc 	andi	r3,r2,2047
 101e974:	e0bffb17 	ldw	r2,-20(fp)
 101e978:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 101e97c:	e0bffd17 	ldw	r2,-12(fp)
 101e980:	10800048 	cmpgei	r2,r2,1
 101e984:	103fcc1e 	bne	r2,zero,101e8b8 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 101e988:	e0fffa17 	ldw	r3,-24(fp)
 101e98c:	e0bffc17 	ldw	r2,-16(fp)
 101e990:	1880141e 	bne	r3,r2,101e9e4 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 101e994:	e0bffe17 	ldw	r2,-8(fp)
 101e998:	1090000c 	andi	r2,r2,16384
 101e99c:	1004c03a 	cmpne	r2,r2,zero
 101e9a0:	1000101e 	bne	r2,zero,101e9e4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 101e9a4:	e0bffb17 	ldw	r2,-20(fp)
 101e9a8:	10c00a17 	ldw	r3,40(r2)
 101e9ac:	e0bff717 	ldw	r2,-36(fp)
 101e9b0:	1880051e 	bne	r3,r2,101e9c8 <altera_avalon_jtag_uart_read+0x13c>
 101e9b4:	e0bffb17 	ldw	r2,-20(fp)
 101e9b8:	10c00917 	ldw	r3,36(r2)
 101e9bc:	e0bffb17 	ldw	r2,-20(fp)
 101e9c0:	10800117 	ldw	r2,4(r2)
 101e9c4:	18bff736 	bltu	r3,r2,101e9a4 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 101e9c8:	e0bffb17 	ldw	r2,-20(fp)
 101e9cc:	10c00a17 	ldw	r3,40(r2)
 101e9d0:	e0bff717 	ldw	r2,-36(fp)
 101e9d4:	18800326 	beq	r3,r2,101e9e4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 101e9d8:	e0bffd17 	ldw	r2,-12(fp)
 101e9dc:	10800048 	cmpgei	r2,r2,1
 101e9e0:	103fb51e 	bne	r2,zero,101e8b8 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 101e9e4:	e0fffa17 	ldw	r3,-24(fp)
 101e9e8:	e0bffc17 	ldw	r2,-16(fp)
 101e9ec:	18801926 	beq	r3,r2,101ea54 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101e9f0:	0005303a 	rdctl	r2,status
 101e9f4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101e9f8:	e0fff517 	ldw	r3,-44(fp)
 101e9fc:	00bfff84 	movi	r2,-2
 101ea00:	1884703a 	and	r2,r3,r2
 101ea04:	1001703a 	wrctl	status,r2
  
  return context;
 101ea08:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 101ea0c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 101ea10:	e0bffb17 	ldw	r2,-20(fp)
 101ea14:	10800817 	ldw	r2,32(r2)
 101ea18:	10c00054 	ori	r3,r2,1
 101ea1c:	e0bffb17 	ldw	r2,-20(fp)
 101ea20:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 101ea24:	e0bffb17 	ldw	r2,-20(fp)
 101ea28:	10800017 	ldw	r2,0(r2)
 101ea2c:	11000104 	addi	r4,r2,4
 101ea30:	e0bffb17 	ldw	r2,-20(fp)
 101ea34:	10800817 	ldw	r2,32(r2)
 101ea38:	1007883a 	mov	r3,r2
 101ea3c:	2005883a 	mov	r2,r4
 101ea40:	10c00035 	stwio	r3,0(r2)
 101ea44:	e0bff917 	ldw	r2,-28(fp)
 101ea48:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101ea4c:	e0bff417 	ldw	r2,-48(fp)
 101ea50:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 101ea54:	e0fffa17 	ldw	r3,-24(fp)
 101ea58:	e0bffc17 	ldw	r2,-16(fp)
 101ea5c:	18800526 	beq	r3,r2,101ea74 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 101ea60:	e0fffa17 	ldw	r3,-24(fp)
 101ea64:	e0bffc17 	ldw	r2,-16(fp)
 101ea68:	1887c83a 	sub	r3,r3,r2
 101ea6c:	e0ffff15 	stw	r3,-4(fp)
 101ea70:	00000906 	br	101ea98 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 101ea74:	e0bffe17 	ldw	r2,-8(fp)
 101ea78:	1090000c 	andi	r2,r2,16384
 101ea7c:	1005003a 	cmpeq	r2,r2,zero
 101ea80:	1000031e 	bne	r2,zero,101ea90 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 101ea84:	00bffd44 	movi	r2,-11
 101ea88:	e0bfff15 	stw	r2,-4(fp)
 101ea8c:	00000206 	br	101ea98 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 101ea90:	00bffec4 	movi	r2,-5
 101ea94:	e0bfff15 	stw	r2,-4(fp)
 101ea98:	e0bfff17 	ldw	r2,-4(fp)
}
 101ea9c:	e037883a 	mov	sp,fp
 101eaa0:	dfc00117 	ldw	ra,4(sp)
 101eaa4:	df000017 	ldw	fp,0(sp)
 101eaa8:	dec00204 	addi	sp,sp,8
 101eaac:	f800283a 	ret

0101eab0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 101eab0:	defff204 	addi	sp,sp,-56
 101eab4:	dfc00d15 	stw	ra,52(sp)
 101eab8:	df000c15 	stw	fp,48(sp)
 101eabc:	df000c04 	addi	fp,sp,48
 101eac0:	e13ffb15 	stw	r4,-20(fp)
 101eac4:	e17ffc15 	stw	r5,-16(fp)
 101eac8:	e1bffd15 	stw	r6,-12(fp)
 101eacc:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 101ead0:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 101ead4:	e0bffc17 	ldw	r2,-16(fp)
 101ead8:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 101eadc:	00003a06 	br	101ebc8 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 101eae0:	e0bffb17 	ldw	r2,-20(fp)
 101eae4:	10800c17 	ldw	r2,48(r2)
 101eae8:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 101eaec:	e0bffb17 	ldw	r2,-20(fp)
 101eaf0:	10800d17 	ldw	r2,52(r2)
 101eaf4:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 101eaf8:	e0fffa17 	ldw	r3,-24(fp)
 101eafc:	e0bff917 	ldw	r2,-28(fp)
 101eb00:	1880062e 	bgeu	r3,r2,101eb1c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 101eb04:	e0fff917 	ldw	r3,-28(fp)
 101eb08:	e0bffa17 	ldw	r2,-24(fp)
 101eb0c:	1885c83a 	sub	r2,r3,r2
 101eb10:	10bfffc4 	addi	r2,r2,-1
 101eb14:	e0bff815 	stw	r2,-32(fp)
 101eb18:	00000c06 	br	101eb4c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 101eb1c:	e0bff917 	ldw	r2,-28(fp)
 101eb20:	1005003a 	cmpeq	r2,r2,zero
 101eb24:	1000051e 	bne	r2,zero,101eb3c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 101eb28:	00820004 	movi	r2,2048
 101eb2c:	e0fffa17 	ldw	r3,-24(fp)
 101eb30:	10c5c83a 	sub	r2,r2,r3
 101eb34:	e0bff815 	stw	r2,-32(fp)
 101eb38:	00000406 	br	101eb4c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 101eb3c:	0081ffc4 	movi	r2,2047
 101eb40:	e0fffa17 	ldw	r3,-24(fp)
 101eb44:	10c5c83a 	sub	r2,r2,r3
 101eb48:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 101eb4c:	e0bff817 	ldw	r2,-32(fp)
 101eb50:	1005003a 	cmpeq	r2,r2,zero
 101eb54:	10001f1e 	bne	r2,zero,101ebd4 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 101eb58:	e0fffd17 	ldw	r3,-12(fp)
 101eb5c:	e0bff817 	ldw	r2,-32(fp)
 101eb60:	1880022e 	bgeu	r3,r2,101eb6c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 101eb64:	e0bffd17 	ldw	r2,-12(fp)
 101eb68:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 101eb6c:	e0bffb17 	ldw	r2,-20(fp)
 101eb70:	10c20e04 	addi	r3,r2,2104
 101eb74:	e0bffa17 	ldw	r2,-24(fp)
 101eb78:	1885883a 	add	r2,r3,r2
 101eb7c:	e0fffc17 	ldw	r3,-16(fp)
 101eb80:	1009883a 	mov	r4,r2
 101eb84:	180b883a 	mov	r5,r3
 101eb88:	e1bff817 	ldw	r6,-32(fp)
 101eb8c:	100d7500 	call	100d750 <memcpy>
      ptr   += n;
 101eb90:	e0fff817 	ldw	r3,-32(fp)
 101eb94:	e0bffc17 	ldw	r2,-16(fp)
 101eb98:	10c5883a 	add	r2,r2,r3
 101eb9c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 101eba0:	e0fffd17 	ldw	r3,-12(fp)
 101eba4:	e0bff817 	ldw	r2,-32(fp)
 101eba8:	1885c83a 	sub	r2,r3,r2
 101ebac:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 101ebb0:	e0fffa17 	ldw	r3,-24(fp)
 101ebb4:	e0bff817 	ldw	r2,-32(fp)
 101ebb8:	1885883a 	add	r2,r3,r2
 101ebbc:	10c1ffcc 	andi	r3,r2,2047
 101ebc0:	e0bffb17 	ldw	r2,-20(fp)
 101ebc4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 101ebc8:	e0bffd17 	ldw	r2,-12(fp)
 101ebcc:	10800048 	cmpgei	r2,r2,1
 101ebd0:	103fc31e 	bne	r2,zero,101eae0 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101ebd4:	0005303a 	rdctl	r2,status
 101ebd8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101ebdc:	e0fff517 	ldw	r3,-44(fp)
 101ebe0:	00bfff84 	movi	r2,-2
 101ebe4:	1884703a 	and	r2,r3,r2
 101ebe8:	1001703a 	wrctl	status,r2
  
  return context;
 101ebec:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 101ebf0:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 101ebf4:	e0bffb17 	ldw	r2,-20(fp)
 101ebf8:	10800817 	ldw	r2,32(r2)
 101ebfc:	10c00094 	ori	r3,r2,2
 101ec00:	e0bffb17 	ldw	r2,-20(fp)
 101ec04:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 101ec08:	e0bffb17 	ldw	r2,-20(fp)
 101ec0c:	10800017 	ldw	r2,0(r2)
 101ec10:	11000104 	addi	r4,r2,4
 101ec14:	e0bffb17 	ldw	r2,-20(fp)
 101ec18:	10800817 	ldw	r2,32(r2)
 101ec1c:	1007883a 	mov	r3,r2
 101ec20:	2005883a 	mov	r2,r4
 101ec24:	10c00035 	stwio	r3,0(r2)
 101ec28:	e0bff717 	ldw	r2,-36(fp)
 101ec2c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101ec30:	e0bff417 	ldw	r2,-48(fp)
 101ec34:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 101ec38:	e0bffd17 	ldw	r2,-12(fp)
 101ec3c:	10800050 	cmplti	r2,r2,1
 101ec40:	1000111e 	bne	r2,zero,101ec88 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 101ec44:	e0bffe17 	ldw	r2,-8(fp)
 101ec48:	1090000c 	andi	r2,r2,16384
 101ec4c:	1004c03a 	cmpne	r2,r2,zero
 101ec50:	1000101e 	bne	r2,zero,101ec94 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 101ec54:	e0bffb17 	ldw	r2,-20(fp)
 101ec58:	10c00d17 	ldw	r3,52(r2)
 101ec5c:	e0bff917 	ldw	r2,-28(fp)
 101ec60:	1880051e 	bne	r3,r2,101ec78 <altera_avalon_jtag_uart_write+0x1c8>
 101ec64:	e0bffb17 	ldw	r2,-20(fp)
 101ec68:	10c00917 	ldw	r3,36(r2)
 101ec6c:	e0bffb17 	ldw	r2,-20(fp)
 101ec70:	10800117 	ldw	r2,4(r2)
 101ec74:	18bff736 	bltu	r3,r2,101ec54 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 101ec78:	e0bffb17 	ldw	r2,-20(fp)
 101ec7c:	10c00d17 	ldw	r3,52(r2)
 101ec80:	e0bff917 	ldw	r2,-28(fp)
 101ec84:	18800326 	beq	r3,r2,101ec94 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 101ec88:	e0bffd17 	ldw	r2,-12(fp)
 101ec8c:	10800048 	cmpgei	r2,r2,1
 101ec90:	103fcd1e 	bne	r2,zero,101ebc8 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 101ec94:	e0fffc17 	ldw	r3,-16(fp)
 101ec98:	e0bff617 	ldw	r2,-40(fp)
 101ec9c:	18800526 	beq	r3,r2,101ecb4 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 101eca0:	e0fffc17 	ldw	r3,-16(fp)
 101eca4:	e0bff617 	ldw	r2,-40(fp)
 101eca8:	1887c83a 	sub	r3,r3,r2
 101ecac:	e0ffff15 	stw	r3,-4(fp)
 101ecb0:	00000906 	br	101ecd8 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 101ecb4:	e0bffe17 	ldw	r2,-8(fp)
 101ecb8:	1090000c 	andi	r2,r2,16384
 101ecbc:	1005003a 	cmpeq	r2,r2,zero
 101ecc0:	1000031e 	bne	r2,zero,101ecd0 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 101ecc4:	00bffd44 	movi	r2,-11
 101ecc8:	e0bfff15 	stw	r2,-4(fp)
 101eccc:	00000206 	br	101ecd8 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 101ecd0:	00bffec4 	movi	r2,-5
 101ecd4:	e0bfff15 	stw	r2,-4(fp)
 101ecd8:	e0bfff17 	ldw	r2,-4(fp)
}
 101ecdc:	e037883a 	mov	sp,fp
 101ece0:	dfc00117 	ldw	ra,4(sp)
 101ece4:	df000017 	ldw	fp,0(sp)
 101ece8:	dec00204 	addi	sp,sp,8
 101ecec:	f800283a 	ret

0101ecf0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 101ecf0:	defff904 	addi	sp,sp,-28
 101ecf4:	dfc00615 	stw	ra,24(sp)
 101ecf8:	df000515 	stw	fp,20(sp)
 101ecfc:	df000504 	addi	fp,sp,20
 101ed00:	e13ffe15 	stw	r4,-8(fp)
 101ed04:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 101ed08:	e0bffe17 	ldw	r2,-8(fp)
 101ed0c:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 101ed10:	e0bffe17 	ldw	r2,-8(fp)
 101ed14:	10800104 	addi	r2,r2,4
 101ed18:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101ed1c:	0005303a 	rdctl	r2,status
 101ed20:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101ed24:	e0fffc17 	ldw	r3,-16(fp)
 101ed28:	00bfff84 	movi	r2,-2
 101ed2c:	1884703a 	and	r2,r3,r2
 101ed30:	1001703a 	wrctl	status,r2
  
  return context;
 101ed34:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 101ed38:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
 101ed3c:	10201440 	call	1020144 <alt_tick>
 101ed40:	e0bffd17 	ldw	r2,-12(fp)
 101ed44:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101ed48:	e0bffb17 	ldw	r2,-20(fp)
 101ed4c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 101ed50:	e037883a 	mov	sp,fp
 101ed54:	dfc00117 	ldw	ra,4(sp)
 101ed58:	df000017 	ldw	fp,0(sp)
 101ed5c:	dec00204 	addi	sp,sp,8
 101ed60:	f800283a 	ret

0101ed64 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 101ed64:	defff904 	addi	sp,sp,-28
 101ed68:	dfc00615 	stw	ra,24(sp)
 101ed6c:	df000515 	stw	fp,20(sp)
 101ed70:	df000504 	addi	fp,sp,20
 101ed74:	e13ffc15 	stw	r4,-16(fp)
 101ed78:	e17ffd15 	stw	r5,-12(fp)
 101ed7c:	e1bffe15 	stw	r6,-8(fp)
 101ed80:	e1ffff15 	stw	r7,-4(fp)
 101ed84:	e0bfff17 	ldw	r2,-4(fp)
 101ed88:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 101ed8c:	008040f4 	movhi	r2,259
 101ed90:	10ad8e04 	addi	r2,r2,-18888
 101ed94:	10800017 	ldw	r2,0(r2)
 101ed98:	1004c03a 	cmpne	r2,r2,zero
 101ed9c:	1000041e 	bne	r2,zero,101edb0 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 101eda0:	00c040f4 	movhi	r3,259
 101eda4:	18ed8e04 	addi	r3,r3,-18888
 101eda8:	e0bffb17 	ldw	r2,-20(fp)
 101edac:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 101edb0:	e0bffc17 	ldw	r2,-16(fp)
 101edb4:	10800104 	addi	r2,r2,4
 101edb8:	1007883a 	mov	r3,r2
 101edbc:	008001c4 	movi	r2,7
 101edc0:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 101edc4:	e13ffe17 	ldw	r4,-8(fp)
 101edc8:	e17ffc17 	ldw	r5,-16(fp)
 101edcc:	018040b4 	movhi	r6,258
 101edd0:	31bb3c04 	addi	r6,r6,-4880
 101edd4:	101fc280 	call	101fc28 <alt_irq_register>
#endif  
}
 101edd8:	e037883a 	mov	sp,fp
 101eddc:	dfc00117 	ldw	ra,4(sp)
 101ede0:	df000017 	ldw	fp,0(sp)
 101ede4:	dec00204 	addi	sp,sp,8
 101ede8:	f800283a 	ret

0101edec <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 101edec:	defffc04 	addi	sp,sp,-16
 101edf0:	df000315 	stw	fp,12(sp)
 101edf4:	df000304 	addi	fp,sp,12
 101edf8:	e13ffe15 	stw	r4,-8(fp)
 101edfc:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 101ee00:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 101ee04:	e0bfff17 	ldw	r2,-4(fp)
 101ee08:	1004c03a 	cmpne	r2,r2,zero
 101ee0c:	1000061e 	bne	r2,zero,101ee28 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
 101ee10:	e0bffe17 	ldw	r2,-8(fp)
 101ee14:	1007883a 	mov	r3,r2
 101ee18:	e0bffd03 	ldbu	r2,-12(fp)
 101ee1c:	10c4b03a 	or	r2,r2,r3
 101ee20:	e0bffd05 	stb	r2,-12(fp)
 101ee24:	00000806 	br	101ee48 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
 101ee28:	e0bffe17 	ldw	r2,-8(fp)
 101ee2c:	1007883a 	mov	r3,r2
 101ee30:	e0bffd03 	ldbu	r2,-12(fp)
 101ee34:	10c4b03a 	or	r2,r2,r3
 101ee38:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 101ee3c:	e0bffd03 	ldbu	r2,-12(fp)
 101ee40:	10801014 	ori	r2,r2,64
 101ee44:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 101ee48:	e0fffd03 	ldbu	r3,-12(fp)
 101ee4c:	00bfe004 	movi	r2,-128
 101ee50:	1884b03a 	or	r2,r3,r2
 101ee54:	10803fcc 	andi	r2,r2,255
}
 101ee58:	e037883a 	mov	sp,fp
 101ee5c:	df000017 	ldw	fp,0(sp)
 101ee60:	dec00104 	addi	sp,sp,4
 101ee64:	f800283a 	ret

0101ee68 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 101ee68:	defffd04 	addi	sp,sp,-12
 101ee6c:	df000215 	stw	fp,8(sp)
 101ee70:	df000204 	addi	fp,sp,8
 101ee74:	e13ffe15 	stw	r4,-8(fp)
 101ee78:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 101ee7c:	e0bffe17 	ldw	r2,-8(fp)
 101ee80:	10800a17 	ldw	r2,40(r2)
 101ee84:	e0ffff03 	ldbu	r3,-4(fp)
 101ee88:	10c00025 	stbio	r3,0(r2)
}
 101ee8c:	e037883a 	mov	sp,fp
 101ee90:	df000017 	ldw	fp,0(sp)
 101ee94:	dec00104 	addi	sp,sp,4
 101ee98:	f800283a 	ret

0101ee9c <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 101ee9c:	defffe04 	addi	sp,sp,-8
 101eea0:	df000115 	stw	fp,4(sp)
 101eea4:	df000104 	addi	fp,sp,4
 101eea8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 101eeac:	e0bfff17 	ldw	r2,-4(fp)
 101eeb0:	10800a17 	ldw	r2,40(r2)
 101eeb4:	1007883a 	mov	r3,r2
 101eeb8:	00800044 	movi	r2,1
 101eebc:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 101eec0:	e037883a 	mov	sp,fp
 101eec4:	df000017 	ldw	fp,0(sp)
 101eec8:	dec00104 	addi	sp,sp,4
 101eecc:	f800283a 	ret

0101eed0 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 101eed0:	defffc04 	addi	sp,sp,-16
 101eed4:	dfc00315 	stw	ra,12(sp)
 101eed8:	df000215 	stw	fp,8(sp)
 101eedc:	df000204 	addi	fp,sp,8
 101eee0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 101eee4:	e13fff17 	ldw	r4,-4(fp)
 101eee8:	014040f4 	movhi	r5,259
 101eeec:	29667d04 	addi	r5,r5,-26124
 101eef0:	101fa280 	call	101fa28 <alt_find_dev>
 101eef4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 101eef8:	e0bffe17 	ldw	r2,-8(fp)
}
 101eefc:	e037883a 	mov	sp,fp
 101ef00:	dfc00117 	ldw	ra,4(sp)
 101ef04:	df000017 	ldw	fp,0(sp)
 101ef08:	dec00204 	addi	sp,sp,8
 101ef0c:	f800283a 	ret

0101ef10 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 101ef10:	defffb04 	addi	sp,sp,-20
 101ef14:	df000415 	stw	fp,16(sp)
 101ef18:	df000404 	addi	fp,sp,16
 101ef1c:	e13ffd15 	stw	r4,-12(fp)
 101ef20:	e17ffe15 	stw	r5,-8(fp)
 101ef24:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 101ef28:	e03ffc15 	stw	zero,-16(fp)
 101ef2c:	00000f06 	br	101ef6c <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 101ef30:	e0bffd17 	ldw	r2,-12(fp)
 101ef34:	10800a17 	ldw	r2,40(r2)
 101ef38:	11000044 	addi	r4,r2,1
 101ef3c:	e0fffc17 	ldw	r3,-16(fp)
 101ef40:	e0bffe17 	ldw	r2,-8(fp)
 101ef44:	1885883a 	add	r2,r3,r2
 101ef48:	10800003 	ldbu	r2,0(r2)
 101ef4c:	10c03fcc 	andi	r3,r2,255
 101ef50:	18c0201c 	xori	r3,r3,128
 101ef54:	18ffe004 	addi	r3,r3,-128
 101ef58:	2005883a 	mov	r2,r4
 101ef5c:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 101ef60:	e0bffc17 	ldw	r2,-16(fp)
 101ef64:	10800044 	addi	r2,r2,1
 101ef68:	e0bffc15 	stw	r2,-16(fp)
 101ef6c:	e0fffc17 	ldw	r3,-16(fp)
 101ef70:	e0bfff17 	ldw	r2,-4(fp)
 101ef74:	18bfee36 	bltu	r3,r2,101ef30 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 101ef78:	e037883a 	mov	sp,fp
 101ef7c:	df000017 	ldw	fp,0(sp)
 101ef80:	dec00104 	addi	sp,sp,4
 101ef84:	f800283a 	ret

0101ef88 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 101ef88:	defffd04 	addi	sp,sp,-12
 101ef8c:	df000215 	stw	fp,8(sp)
 101ef90:	df000204 	addi	fp,sp,8
 101ef94:	e13ffe15 	stw	r4,-8(fp)
 101ef98:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 101ef9c:	00000d06 	br	101efd4 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 101efa0:	e0bffe17 	ldw	r2,-8(fp)
 101efa4:	10800a17 	ldw	r2,40(r2)
 101efa8:	11000044 	addi	r4,r2,1
 101efac:	e0bfff17 	ldw	r2,-4(fp)
 101efb0:	10800003 	ldbu	r2,0(r2)
 101efb4:	10c03fcc 	andi	r3,r2,255
 101efb8:	18c0201c 	xori	r3,r3,128
 101efbc:	18ffe004 	addi	r3,r3,-128
 101efc0:	2005883a 	mov	r2,r4
 101efc4:	10c00025 	stbio	r3,0(r2)
		++ptr;
 101efc8:	e0bfff17 	ldw	r2,-4(fp)
 101efcc:	10800044 	addi	r2,r2,1
 101efd0:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 101efd4:	e0bfff17 	ldw	r2,-4(fp)
 101efd8:	10800003 	ldbu	r2,0(r2)
 101efdc:	10803fcc 	andi	r2,r2,255
 101efe0:	1080201c 	xori	r2,r2,128
 101efe4:	10bfe004 	addi	r2,r2,-128
 101efe8:	1004c03a 	cmpne	r2,r2,zero
 101efec:	103fec1e 	bne	r2,zero,101efa0 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 101eff0:	e037883a 	mov	sp,fp
 101eff4:	df000017 	ldw	fp,0(sp)
 101eff8:	dec00104 	addi	sp,sp,4
 101effc:	f800283a 	ret

0101f000 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 101f000:	defffb04 	addi	sp,sp,-20
 101f004:	dfc00415 	stw	ra,16(sp)
 101f008:	df000315 	stw	fp,12(sp)
 101f00c:	df000304 	addi	fp,sp,12
 101f010:	e13ffd15 	stw	r4,-12(fp)
 101f014:	e17ffe15 	stw	r5,-8(fp)
 101f018:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 101f01c:	e0bffd17 	ldw	r2,-12(fp)
 101f020:	10800017 	ldw	r2,0(r2)
 101f024:	1009883a 	mov	r4,r2
 101f028:	e1bfff17 	ldw	r6,-4(fp)
 101f02c:	e17ffe17 	ldw	r5,-8(fp)
 101f030:	101ef100 	call	101ef10 <alt_up_character_lcd_write>
	return 0;
 101f034:	0005883a 	mov	r2,zero
}
 101f038:	e037883a 	mov	sp,fp
 101f03c:	dfc00117 	ldw	ra,4(sp)
 101f040:	df000017 	ldw	fp,0(sp)
 101f044:	dec00204 	addi	sp,sp,8
 101f048:	f800283a 	ret

0101f04c <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 101f04c:	defff904 	addi	sp,sp,-28
 101f050:	dfc00615 	stw	ra,24(sp)
 101f054:	df000515 	stw	fp,20(sp)
 101f058:	df000504 	addi	fp,sp,20
 101f05c:	e13ffc15 	stw	r4,-16(fp)
 101f060:	e17ffd15 	stw	r5,-12(fp)
 101f064:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 101f068:	e0bffd17 	ldw	r2,-12(fp)
 101f06c:	10800a28 	cmpgeui	r2,r2,40
 101f070:	1000031e 	bne	r2,zero,101f080 <alt_up_character_lcd_set_cursor_pos+0x34>
 101f074:	e0bffe17 	ldw	r2,-8(fp)
 101f078:	108000b0 	cmpltui	r2,r2,2
 101f07c:	1000031e 	bne	r2,zero,101f08c <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
 101f080:	00bfffc4 	movi	r2,-1
 101f084:	e0bfff15 	stw	r2,-4(fp)
 101f088:	00000806 	br	101f0ac <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 101f08c:	e13ffd17 	ldw	r4,-12(fp)
 101f090:	e17ffe17 	ldw	r5,-8(fp)
 101f094:	101edec0 	call	101edec <get_DDRAM_addr>
 101f098:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 101f09c:	e17ffb03 	ldbu	r5,-20(fp)
 101f0a0:	e13ffc17 	ldw	r4,-16(fp)
 101f0a4:	101ee680 	call	101ee68 <alt_up_character_lcd_send_cmd>
	return 0;
 101f0a8:	e03fff15 	stw	zero,-4(fp)
 101f0ac:	e0bfff17 	ldw	r2,-4(fp)
}
 101f0b0:	e037883a 	mov	sp,fp
 101f0b4:	dfc00117 	ldw	ra,4(sp)
 101f0b8:	df000017 	ldw	fp,0(sp)
 101f0bc:	dec00204 	addi	sp,sp,8
 101f0c0:	f800283a 	ret

0101f0c4 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 101f0c4:	defff904 	addi	sp,sp,-28
 101f0c8:	dfc00615 	stw	ra,24(sp)
 101f0cc:	df000515 	stw	fp,20(sp)
 101f0d0:	df000504 	addi	fp,sp,20
 101f0d4:	e13ffc15 	stw	r4,-16(fp)
 101f0d8:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 101f0dc:	e0bffd17 	ldw	r2,-12(fp)
 101f0e0:	1005003a 	cmpeq	r2,r2,zero
 101f0e4:	10001e1e 	bne	r2,zero,101f160 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
 101f0e8:	e0bffd17 	ldw	r2,-12(fp)
 101f0ec:	10800050 	cmplti	r2,r2,1
 101f0f0:	1000031e 	bne	r2,zero,101f100 <alt_up_character_lcd_shift_cursor+0x3c>
 101f0f4:	00800504 	movi	r2,20
 101f0f8:	e0bfff05 	stb	r2,-4(fp)
 101f0fc:	00000206 	br	101f108 <alt_up_character_lcd_shift_cursor+0x44>
 101f100:	00c00404 	movi	r3,16
 101f104:	e0ffff05 	stb	r3,-4(fp)
 101f108:	e0bfff03 	ldbu	r2,-4(fp)
 101f10c:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 101f110:	e0fffd17 	ldw	r3,-12(fp)
 101f114:	e0fffe15 	stw	r3,-8(fp)
 101f118:	e0fffe17 	ldw	r3,-8(fp)
 101f11c:	1804403a 	cmpge	r2,r3,zero
 101f120:	1000031e 	bne	r2,zero,101f130 <alt_up_character_lcd_shift_cursor+0x6c>
 101f124:	e0bffe17 	ldw	r2,-8(fp)
 101f128:	0085c83a 	sub	r2,zero,r2
 101f12c:	e0bffe15 	stw	r2,-8(fp)
 101f130:	e0fffe17 	ldw	r3,-8(fp)
 101f134:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 101f138:	00000306 	br	101f148 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 101f13c:	e17ffb43 	ldbu	r5,-19(fp)
 101f140:	e13ffc17 	ldw	r4,-16(fp)
 101f144:	101ee680 	call	101ee68 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 101f148:	e0bffb03 	ldbu	r2,-20(fp)
 101f14c:	10bfffc4 	addi	r2,r2,-1
 101f150:	e0bffb05 	stb	r2,-20(fp)
 101f154:	e0bffb03 	ldbu	r2,-20(fp)
 101f158:	10803fd8 	cmpnei	r2,r2,255
 101f15c:	103ff71e 	bne	r2,zero,101f13c <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 101f160:	e037883a 	mov	sp,fp
 101f164:	dfc00117 	ldw	ra,4(sp)
 101f168:	df000017 	ldw	fp,0(sp)
 101f16c:	dec00204 	addi	sp,sp,8
 101f170:	f800283a 	ret

0101f174 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 101f174:	defff904 	addi	sp,sp,-28
 101f178:	dfc00615 	stw	ra,24(sp)
 101f17c:	df000515 	stw	fp,20(sp)
 101f180:	df000504 	addi	fp,sp,20
 101f184:	e13ffc15 	stw	r4,-16(fp)
 101f188:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 101f18c:	e0bffd17 	ldw	r2,-12(fp)
 101f190:	1005003a 	cmpeq	r2,r2,zero
 101f194:	10001e1e 	bne	r2,zero,101f210 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
 101f198:	e0bffd17 	ldw	r2,-12(fp)
 101f19c:	10800050 	cmplti	r2,r2,1
 101f1a0:	1000031e 	bne	r2,zero,101f1b0 <alt_up_character_lcd_shift_display+0x3c>
 101f1a4:	00800704 	movi	r2,28
 101f1a8:	e0bfff05 	stb	r2,-4(fp)
 101f1ac:	00000206 	br	101f1b8 <alt_up_character_lcd_shift_display+0x44>
 101f1b0:	00c00604 	movi	r3,24
 101f1b4:	e0ffff05 	stb	r3,-4(fp)
 101f1b8:	e0bfff03 	ldbu	r2,-4(fp)
 101f1bc:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 101f1c0:	e0fffd17 	ldw	r3,-12(fp)
 101f1c4:	e0fffe15 	stw	r3,-8(fp)
 101f1c8:	e0fffe17 	ldw	r3,-8(fp)
 101f1cc:	1804403a 	cmpge	r2,r3,zero
 101f1d0:	1000031e 	bne	r2,zero,101f1e0 <alt_up_character_lcd_shift_display+0x6c>
 101f1d4:	e0bffe17 	ldw	r2,-8(fp)
 101f1d8:	0085c83a 	sub	r2,zero,r2
 101f1dc:	e0bffe15 	stw	r2,-8(fp)
 101f1e0:	e0fffe17 	ldw	r3,-8(fp)
 101f1e4:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 101f1e8:	00000306 	br	101f1f8 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 101f1ec:	e17ffb43 	ldbu	r5,-19(fp)
 101f1f0:	e13ffc17 	ldw	r4,-16(fp)
 101f1f4:	101ee680 	call	101ee68 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 101f1f8:	e0bffb03 	ldbu	r2,-20(fp)
 101f1fc:	10bfffc4 	addi	r2,r2,-1
 101f200:	e0bffb05 	stb	r2,-20(fp)
 101f204:	e0bffb03 	ldbu	r2,-20(fp)
 101f208:	10803fd8 	cmpnei	r2,r2,255
 101f20c:	103ff71e 	bne	r2,zero,101f1ec <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 101f210:	e037883a 	mov	sp,fp
 101f214:	dfc00117 	ldw	ra,4(sp)
 101f218:	df000017 	ldw	fp,0(sp)
 101f21c:	dec00204 	addi	sp,sp,8
 101f220:	f800283a 	ret

0101f224 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 101f224:	defff904 	addi	sp,sp,-28
 101f228:	dfc00615 	stw	ra,24(sp)
 101f22c:	df000515 	stw	fp,20(sp)
 101f230:	df000504 	addi	fp,sp,20
 101f234:	e13ffc15 	stw	r4,-16(fp)
 101f238:	e17ffd15 	stw	r5,-12(fp)
 101f23c:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 101f240:	e0bffd17 	ldw	r2,-12(fp)
 101f244:	10800a28 	cmpgeui	r2,r2,40
 101f248:	1000031e 	bne	r2,zero,101f258 <alt_up_character_lcd_erase_pos+0x34>
 101f24c:	e0bffe17 	ldw	r2,-8(fp)
 101f250:	108000b0 	cmpltui	r2,r2,2
 101f254:	1000031e 	bne	r2,zero,101f264 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
 101f258:	00bfffc4 	movi	r2,-1
 101f25c:	e0bfff15 	stw	r2,-4(fp)
 101f260:	00000e06 	br	101f29c <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 101f264:	e13ffd17 	ldw	r4,-12(fp)
 101f268:	e17ffe17 	ldw	r5,-8(fp)
 101f26c:	101edec0 	call	101edec <get_DDRAM_addr>
 101f270:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 101f274:	e17ffb03 	ldbu	r5,-20(fp)
 101f278:	e13ffc17 	ldw	r4,-16(fp)
 101f27c:	101ee680 	call	101ee68 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 101f280:	e0bffc17 	ldw	r2,-16(fp)
 101f284:	10800a17 	ldw	r2,40(r2)
 101f288:	10800044 	addi	r2,r2,1
 101f28c:	1007883a 	mov	r3,r2
 101f290:	00800084 	movi	r2,2
 101f294:	18800025 	stbio	r2,0(r3)
	return 0;
 101f298:	e03fff15 	stw	zero,-4(fp)
 101f29c:	e0bfff17 	ldw	r2,-4(fp)
}
 101f2a0:	e037883a 	mov	sp,fp
 101f2a4:	dfc00117 	ldw	ra,4(sp)
 101f2a8:	df000017 	ldw	fp,0(sp)
 101f2ac:	dec00204 	addi	sp,sp,8
 101f2b0:	f800283a 	ret

0101f2b4 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 101f2b4:	defffd04 	addi	sp,sp,-12
 101f2b8:	dfc00215 	stw	ra,8(sp)
 101f2bc:	df000115 	stw	fp,4(sp)
 101f2c0:	df000104 	addi	fp,sp,4
 101f2c4:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 101f2c8:	e13fff17 	ldw	r4,-4(fp)
 101f2cc:	01400304 	movi	r5,12
 101f2d0:	101ee680 	call	101ee68 <alt_up_character_lcd_send_cmd>
}
 101f2d4:	e037883a 	mov	sp,fp
 101f2d8:	dfc00117 	ldw	ra,4(sp)
 101f2dc:	df000017 	ldw	fp,0(sp)
 101f2e0:	dec00204 	addi	sp,sp,8
 101f2e4:	f800283a 	ret

0101f2e8 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 101f2e8:	defffd04 	addi	sp,sp,-12
 101f2ec:	dfc00215 	stw	ra,8(sp)
 101f2f0:	df000115 	stw	fp,4(sp)
 101f2f4:	df000104 	addi	fp,sp,4
 101f2f8:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 101f2fc:	e13fff17 	ldw	r4,-4(fp)
 101f300:	014003c4 	movi	r5,15
 101f304:	101ee680 	call	101ee68 <alt_up_character_lcd_send_cmd>
}
 101f308:	e037883a 	mov	sp,fp
 101f30c:	dfc00117 	ldw	ra,4(sp)
 101f310:	df000017 	ldw	fp,0(sp)
 101f314:	dec00204 	addi	sp,sp,8
 101f318:	f800283a 	ret

0101f31c <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
 101f31c:	defffd04 	addi	sp,sp,-12
 101f320:	df000215 	stw	fp,8(sp)
 101f324:	df000204 	addi	fp,sp,8
 101f328:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 101f32c:	e0bfff17 	ldw	r2,-4(fp)
 101f330:	10800a17 	ldw	r2,40(r2)
 101f334:	10800104 	addi	r2,r2,4
 101f338:	10800037 	ldwio	r2,0(r2)
 101f33c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
 101f340:	e0bffe17 	ldw	r2,-8(fp)
 101f344:	10800054 	ori	r2,r2,1
 101f348:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 101f34c:	e0bfff17 	ldw	r2,-4(fp)
 101f350:	10800a17 	ldw	r2,40(r2)
 101f354:	10800104 	addi	r2,r2,4
 101f358:	e0fffe17 	ldw	r3,-8(fp)
 101f35c:	10c00035 	stwio	r3,0(r2)
}
 101f360:	e037883a 	mov	sp,fp
 101f364:	df000017 	ldw	fp,0(sp)
 101f368:	dec00104 	addi	sp,sp,4
 101f36c:	f800283a 	ret

0101f370 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
 101f370:	defffd04 	addi	sp,sp,-12
 101f374:	df000215 	stw	fp,8(sp)
 101f378:	df000204 	addi	fp,sp,8
 101f37c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 101f380:	e0bfff17 	ldw	r2,-4(fp)
 101f384:	10800a17 	ldw	r2,40(r2)
 101f388:	10800104 	addi	r2,r2,4
 101f38c:	10800037 	ldwio	r2,0(r2)
 101f390:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
 101f394:	e0fffe17 	ldw	r3,-8(fp)
 101f398:	00bfff84 	movi	r2,-2
 101f39c:	1884703a 	and	r2,r3,r2
 101f3a0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 101f3a4:	e0bfff17 	ldw	r2,-4(fp)
 101f3a8:	10800a17 	ldw	r2,40(r2)
 101f3ac:	10800104 	addi	r2,r2,4
 101f3b0:	e0fffe17 	ldw	r3,-8(fp)
 101f3b4:	10c00035 	stwio	r3,0(r2)
}
 101f3b8:	e037883a 	mov	sp,fp
 101f3bc:	df000017 	ldw	fp,0(sp)
 101f3c0:	dec00104 	addi	sp,sp,4
 101f3c4:	f800283a 	ret

0101f3c8 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
 101f3c8:	defffd04 	addi	sp,sp,-12
 101f3cc:	df000215 	stw	fp,8(sp)
 101f3d0:	df000204 	addi	fp,sp,8
 101f3d4:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
 101f3d8:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
 101f3dc:	e0bfff17 	ldw	r2,-4(fp)
 101f3e0:	10800a17 	ldw	r2,40(r2)
 101f3e4:	10800084 	addi	r2,r2,2
 101f3e8:	1080002b 	ldhuio	r2,0(r2)
 101f3ec:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
 101f3f0:	e0bffe0b 	ldhu	r2,-8(fp)
}
 101f3f4:	e037883a 	mov	sp,fp
 101f3f8:	df000017 	ldw	fp,0(sp)
 101f3fc:	dec00104 	addi	sp,sp,4
 101f400:	f800283a 	ret

0101f404 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
 101f404:	defffd04 	addi	sp,sp,-12
 101f408:	df000215 	stw	fp,8(sp)
 101f40c:	df000204 	addi	fp,sp,8
 101f410:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 101f414:	e0bfff17 	ldw	r2,-4(fp)
 101f418:	10800a17 	ldw	r2,40(r2)
 101f41c:	10800104 	addi	r2,r2,4
 101f420:	10800037 	ldwio	r2,0(r2)
 101f424:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
 101f428:	e0bffe17 	ldw	r2,-8(fp)
 101f42c:	10bfffec 	andhi	r2,r2,65535
 101f430:	1004d43a 	srli	r2,r2,16
}
 101f434:	e037883a 	mov	sp,fp
 101f438:	df000017 	ldw	fp,0(sp)
 101f43c:	dec00104 	addi	sp,sp,4
 101f440:	f800283a 	ret

0101f444 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
 101f444:	defffc04 	addi	sp,sp,-16
 101f448:	df000315 	stw	fp,12(sp)
 101f44c:	df000304 	addi	fp,sp,12
 101f450:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
 101f454:	e0bffe17 	ldw	r2,-8(fp)
 101f458:	1080800c 	andi	r2,r2,512
 101f45c:	1004d27a 	srli	r2,r2,9
 101f460:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
 101f464:	e0bffd17 	ldw	r2,-12(fp)
 101f468:	1005003a 	cmpeq	r2,r2,zero
 101f46c:	1000031e 	bne	r2,zero,101f47c <alt_up_rs232_check_parity+0x38>
 101f470:	00bfffc4 	movi	r2,-1
 101f474:	e0bfff15 	stw	r2,-4(fp)
 101f478:	00000106 	br	101f480 <alt_up_rs232_check_parity+0x3c>
 101f47c:	e03fff15 	stw	zero,-4(fp)
 101f480:	e0bfff17 	ldw	r2,-4(fp)
}
 101f484:	e037883a 	mov	sp,fp
 101f488:	df000017 	ldw	fp,0(sp)
 101f48c:	dec00104 	addi	sp,sp,4
 101f490:	f800283a 	ret

0101f494 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
 101f494:	defffc04 	addi	sp,sp,-16
 101f498:	df000315 	stw	fp,12(sp)
 101f49c:	df000304 	addi	fp,sp,12
 101f4a0:	e13ffe15 	stw	r4,-8(fp)
 101f4a4:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 101f4a8:	e0bffe17 	ldw	r2,-8(fp)
 101f4ac:	10800a17 	ldw	r2,40(r2)
 101f4b0:	10800037 	ldwio	r2,0(r2)
 101f4b4:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
 101f4b8:	e0bffe17 	ldw	r2,-8(fp)
 101f4bc:	10800a17 	ldw	r2,40(r2)
 101f4c0:	e0ffff03 	ldbu	r3,-4(fp)
 101f4c4:	10c00035 	stwio	r3,0(r2)
	return 0;
 101f4c8:	0005883a 	mov	r2,zero
}
 101f4cc:	e037883a 	mov	sp,fp
 101f4d0:	df000017 	ldw	fp,0(sp)
 101f4d4:	dec00104 	addi	sp,sp,4
 101f4d8:	f800283a 	ret

0101f4dc <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
 101f4dc:	defffa04 	addi	sp,sp,-24
 101f4e0:	dfc00515 	stw	ra,20(sp)
 101f4e4:	df000415 	stw	fp,16(sp)
 101f4e8:	df000404 	addi	fp,sp,16
 101f4ec:	e13ffd15 	stw	r4,-12(fp)
 101f4f0:	e17ffe15 	stw	r5,-8(fp)
 101f4f4:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 101f4f8:	e0bffd17 	ldw	r2,-12(fp)
 101f4fc:	10800a17 	ldw	r2,40(r2)
 101f500:	10800037 	ldwio	r2,0(r2)
 101f504:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
 101f508:	e0bffc17 	ldw	r2,-16(fp)
 101f50c:	1007883a 	mov	r3,r2
 101f510:	e0bffe17 	ldw	r2,-8(fp)
 101f514:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
 101f518:	e13ffc17 	ldw	r4,-16(fp)
 101f51c:	101f4440 	call	101f444 <alt_up_rs232_check_parity>
 101f520:	1007883a 	mov	r3,r2
 101f524:	e0bfff17 	ldw	r2,-4(fp)
 101f528:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
 101f52c:	e0bffc17 	ldw	r2,-16(fp)
 101f530:	10a0000c 	andi	r2,r2,32768
 101f534:	1004d3fa 	srli	r2,r2,15
 101f538:	10bfffc4 	addi	r2,r2,-1
}
 101f53c:	e037883a 	mov	sp,fp
 101f540:	dfc00117 	ldw	ra,4(sp)
 101f544:	df000017 	ldw	fp,0(sp)
 101f548:	dec00204 	addi	sp,sp,8
 101f54c:	f800283a 	ret

0101f550 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
 101f550:	defff804 	addi	sp,sp,-32
 101f554:	dfc00715 	stw	ra,28(sp)
 101f558:	df000615 	stw	fp,24(sp)
 101f55c:	df000604 	addi	fp,sp,24
 101f560:	e13ffd15 	stw	r4,-12(fp)
 101f564:	e17ffe15 	stw	r5,-8(fp)
 101f568:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 101f56c:	e0bffd17 	ldw	r2,-12(fp)
 101f570:	10800017 	ldw	r2,0(r2)
 101f574:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
 101f578:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
 101f57c:	00000c06 	br	101f5b0 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
 101f580:	e17ffe17 	ldw	r5,-8(fp)
 101f584:	e0bffe17 	ldw	r2,-8(fp)
 101f588:	10800044 	addi	r2,r2,1
 101f58c:	e0bffe15 	stw	r2,-8(fp)
 101f590:	e1bffc04 	addi	r6,fp,-16
 101f594:	e13ffb17 	ldw	r4,-20(fp)
 101f598:	101f4dc0 	call	101f4dc <alt_up_rs232_read_data>
 101f59c:	1004c03a 	cmpne	r2,r2,zero
 101f5a0:	1000091e 	bne	r2,zero,101f5c8 <alt_up_rs232_read_fd+0x78>
			count++;
 101f5a4:	e0bffa17 	ldw	r2,-24(fp)
 101f5a8:	10800044 	addi	r2,r2,1
 101f5ac:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
 101f5b0:	e0bfff17 	ldw	r2,-4(fp)
 101f5b4:	10bfffc4 	addi	r2,r2,-1
 101f5b8:	e0bfff15 	stw	r2,-4(fp)
 101f5bc:	e0bfff17 	ldw	r2,-4(fp)
 101f5c0:	10bfffd8 	cmpnei	r2,r2,-1
 101f5c4:	103fee1e 	bne	r2,zero,101f580 <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
 101f5c8:	e0bffa17 	ldw	r2,-24(fp)
}
 101f5cc:	e037883a 	mov	sp,fp
 101f5d0:	dfc00117 	ldw	ra,4(sp)
 101f5d4:	df000017 	ldw	fp,0(sp)
 101f5d8:	dec00204 	addi	sp,sp,8
 101f5dc:	f800283a 	ret

0101f5e0 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
 101f5e0:	defff904 	addi	sp,sp,-28
 101f5e4:	dfc00615 	stw	ra,24(sp)
 101f5e8:	df000515 	stw	fp,20(sp)
 101f5ec:	df000504 	addi	fp,sp,20
 101f5f0:	e13ffd15 	stw	r4,-12(fp)
 101f5f4:	e17ffe15 	stw	r5,-8(fp)
 101f5f8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 101f5fc:	e0bffd17 	ldw	r2,-12(fp)
 101f600:	10800017 	ldw	r2,0(r2)
 101f604:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
 101f608:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
 101f60c:	00000d06 	br	101f644 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
 101f610:	e0bffe17 	ldw	r2,-8(fp)
 101f614:	10800003 	ldbu	r2,0(r2)
 101f618:	11403fcc 	andi	r5,r2,255
 101f61c:	e13ffc17 	ldw	r4,-16(fp)
 101f620:	101f4940 	call	101f494 <alt_up_rs232_write_data>
 101f624:	1004c03a 	cmpne	r2,r2,zero
 101f628:	10000c1e 	bne	r2,zero,101f65c <alt_up_rs232_write_fd+0x7c>
		{
			count++;
 101f62c:	e0bffb17 	ldw	r2,-20(fp)
 101f630:	10800044 	addi	r2,r2,1
 101f634:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
 101f638:	e0bffe17 	ldw	r2,-8(fp)
 101f63c:	10800044 	addi	r2,r2,1
 101f640:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
 101f644:	e0bfff17 	ldw	r2,-4(fp)
 101f648:	10bfffc4 	addi	r2,r2,-1
 101f64c:	e0bfff15 	stw	r2,-4(fp)
 101f650:	e0bfff17 	ldw	r2,-4(fp)
 101f654:	10bfffd8 	cmpnei	r2,r2,-1
 101f658:	103fed1e 	bne	r2,zero,101f610 <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
 101f65c:	e0bffb17 	ldw	r2,-20(fp)
}
 101f660:	e037883a 	mov	sp,fp
 101f664:	dfc00117 	ldw	ra,4(sp)
 101f668:	df000017 	ldw	fp,0(sp)
 101f66c:	dec00204 	addi	sp,sp,8
 101f670:	f800283a 	ret

0101f674 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
 101f674:	defffc04 	addi	sp,sp,-16
 101f678:	dfc00315 	stw	ra,12(sp)
 101f67c:	df000215 	stw	fp,8(sp)
 101f680:	df000204 	addi	fp,sp,8
 101f684:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
 101f688:	e13fff17 	ldw	r4,-4(fp)
 101f68c:	014040f4 	movhi	r5,259
 101f690:	29667d04 	addi	r5,r5,-26124
 101f694:	101fa280 	call	101fa28 <alt_find_dev>
 101f698:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 101f69c:	e0bffe17 	ldw	r2,-8(fp)
}
 101f6a0:	e037883a 	mov	sp,fp
 101f6a4:	dfc00117 	ldw	ra,4(sp)
 101f6a8:	df000017 	ldw	fp,0(sp)
 101f6ac:	dec00204 	addi	sp,sp,8
 101f6b0:	f800283a 	ret

0101f6b4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 101f6b4:	defff404 	addi	sp,sp,-48
 101f6b8:	df000b15 	stw	fp,44(sp)
 101f6bc:	df000b04 	addi	fp,sp,44
 101f6c0:	e13ffb15 	stw	r4,-20(fp)
 101f6c4:	e17ffc15 	stw	r5,-16(fp)
 101f6c8:	e1bffd15 	stw	r6,-12(fp)
 101f6cc:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 101f6d0:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 101f6d4:	008040f4 	movhi	r2,259
 101f6d8:	10ad8e04 	addi	r2,r2,-18888
 101f6dc:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 101f6e0:	1005003a 	cmpeq	r2,r2,zero
 101f6e4:	1000411e 	bne	r2,zero,101f7ec <alt_alarm_start+0x138>
  {
    if (alarm)
 101f6e8:	e0bffb17 	ldw	r2,-20(fp)
 101f6ec:	1005003a 	cmpeq	r2,r2,zero
 101f6f0:	10003b1e 	bne	r2,zero,101f7e0 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 101f6f4:	e0fffb17 	ldw	r3,-20(fp)
 101f6f8:	e0bffd17 	ldw	r2,-12(fp)
 101f6fc:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 101f700:	e0fffb17 	ldw	r3,-20(fp)
 101f704:	e0bffe17 	ldw	r2,-8(fp)
 101f708:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101f70c:	0005303a 	rdctl	r2,status
 101f710:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101f714:	e0fff817 	ldw	r3,-32(fp)
 101f718:	00bfff84 	movi	r2,-2
 101f71c:	1884703a 	and	r2,r3,r2
 101f720:	1001703a 	wrctl	status,r2
  
  return context;
 101f724:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 101f728:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 101f72c:	008040f4 	movhi	r2,259
 101f730:	10ad8f04 	addi	r2,r2,-18884
 101f734:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 101f738:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 101f73c:	e0fffc17 	ldw	r3,-16(fp)
 101f740:	e0bff917 	ldw	r2,-28(fp)
 101f744:	1885883a 	add	r2,r3,r2
 101f748:	10c00044 	addi	r3,r2,1
 101f74c:	e0bffb17 	ldw	r2,-20(fp)
 101f750:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 101f754:	e0bffb17 	ldw	r2,-20(fp)
 101f758:	10c00217 	ldw	r3,8(r2)
 101f75c:	e0bff917 	ldw	r2,-28(fp)
 101f760:	1880042e 	bgeu	r3,r2,101f774 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 101f764:	e0fffb17 	ldw	r3,-20(fp)
 101f768:	00800044 	movi	r2,1
 101f76c:	18800405 	stb	r2,16(r3)
 101f770:	00000206 	br	101f77c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 101f774:	e0bffb17 	ldw	r2,-20(fp)
 101f778:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 101f77c:	e0fffb17 	ldw	r3,-20(fp)
 101f780:	008040f4 	movhi	r2,259
 101f784:	10a68304 	addi	r2,r2,-26100
 101f788:	e0bff615 	stw	r2,-40(fp)
 101f78c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 101f790:	e0fff717 	ldw	r3,-36(fp)
 101f794:	e0bff617 	ldw	r2,-40(fp)
 101f798:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 101f79c:	e0bff617 	ldw	r2,-40(fp)
 101f7a0:	10c00017 	ldw	r3,0(r2)
 101f7a4:	e0bff717 	ldw	r2,-36(fp)
 101f7a8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 101f7ac:	e0bff617 	ldw	r2,-40(fp)
 101f7b0:	10c00017 	ldw	r3,0(r2)
 101f7b4:	e0bff717 	ldw	r2,-36(fp)
 101f7b8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 101f7bc:	e0fff617 	ldw	r3,-40(fp)
 101f7c0:	e0bff717 	ldw	r2,-36(fp)
 101f7c4:	18800015 	stw	r2,0(r3)
 101f7c8:	e0bffa17 	ldw	r2,-24(fp)
 101f7cc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101f7d0:	e0bff517 	ldw	r2,-44(fp)
 101f7d4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 101f7d8:	e03fff15 	stw	zero,-4(fp)
 101f7dc:	00000506 	br	101f7f4 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 101f7e0:	00bffa84 	movi	r2,-22
 101f7e4:	e0bfff15 	stw	r2,-4(fp)
 101f7e8:	00000206 	br	101f7f4 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 101f7ec:	00bfde84 	movi	r2,-134
 101f7f0:	e0bfff15 	stw	r2,-4(fp)
 101f7f4:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 101f7f8:	e037883a 	mov	sp,fp
 101f7fc:	df000017 	ldw	fp,0(sp)
 101f800:	dec00104 	addi	sp,sp,4
 101f804:	f800283a 	ret

0101f808 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 101f808:	defffe04 	addi	sp,sp,-8
 101f80c:	df000115 	stw	fp,4(sp)
 101f810:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 101f814:	e03fff15 	stw	zero,-4(fp)
 101f818:	00000506 	br	101f830 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 101f81c:	e0bfff17 	ldw	r2,-4(fp)
 101f820:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 101f824:	e0bfff17 	ldw	r2,-4(fp)
 101f828:	10800804 	addi	r2,r2,32
 101f82c:	e0bfff15 	stw	r2,-4(fp)
 101f830:	e0bfff17 	ldw	r2,-4(fp)
 101f834:	10820030 	cmpltui	r2,r2,2048
 101f838:	103ff81e 	bne	r2,zero,101f81c <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 101f83c:	e037883a 	mov	sp,fp
 101f840:	df000017 	ldw	fp,0(sp)
 101f844:	dec00104 	addi	sp,sp,4
 101f848:	f800283a 	ret

0101f84c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 101f84c:	defff904 	addi	sp,sp,-28
 101f850:	dfc00615 	stw	ra,24(sp)
 101f854:	df000515 	stw	fp,20(sp)
 101f858:	df000504 	addi	fp,sp,20
 101f85c:	e13ffd15 	stw	r4,-12(fp)
 101f860:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 101f864:	e0bffd17 	ldw	r2,-12(fp)
 101f868:	1005003a 	cmpeq	r2,r2,zero
 101f86c:	1000041e 	bne	r2,zero,101f880 <alt_dev_llist_insert+0x34>
 101f870:	e0bffd17 	ldw	r2,-12(fp)
 101f874:	10800217 	ldw	r2,8(r2)
 101f878:	1004c03a 	cmpne	r2,r2,zero
 101f87c:	1000071e 	bne	r2,zero,101f89c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 101f880:	101f9000 	call	101f900 <alt_get_errno>
 101f884:	1007883a 	mov	r3,r2
 101f888:	00800584 	movi	r2,22
 101f88c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 101f890:	00bffa84 	movi	r2,-22
 101f894:	e0bfff15 	stw	r2,-4(fp)
 101f898:	00001306 	br	101f8e8 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 101f89c:	e0fffd17 	ldw	r3,-12(fp)
 101f8a0:	e0bffe17 	ldw	r2,-8(fp)
 101f8a4:	e0bffb15 	stw	r2,-20(fp)
 101f8a8:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 101f8ac:	e0fffc17 	ldw	r3,-16(fp)
 101f8b0:	e0bffb17 	ldw	r2,-20(fp)
 101f8b4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 101f8b8:	e0bffb17 	ldw	r2,-20(fp)
 101f8bc:	10c00017 	ldw	r3,0(r2)
 101f8c0:	e0bffc17 	ldw	r2,-16(fp)
 101f8c4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 101f8c8:	e0bffb17 	ldw	r2,-20(fp)
 101f8cc:	10c00017 	ldw	r3,0(r2)
 101f8d0:	e0bffc17 	ldw	r2,-16(fp)
 101f8d4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 101f8d8:	e0fffb17 	ldw	r3,-20(fp)
 101f8dc:	e0bffc17 	ldw	r2,-16(fp)
 101f8e0:	18800015 	stw	r2,0(r3)

  return 0;  
 101f8e4:	e03fff15 	stw	zero,-4(fp)
 101f8e8:	e0bfff17 	ldw	r2,-4(fp)
}
 101f8ec:	e037883a 	mov	sp,fp
 101f8f0:	dfc00117 	ldw	ra,4(sp)
 101f8f4:	df000017 	ldw	fp,0(sp)
 101f8f8:	dec00204 	addi	sp,sp,8
 101f8fc:	f800283a 	ret

0101f900 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 101f900:	defffd04 	addi	sp,sp,-12
 101f904:	dfc00215 	stw	ra,8(sp)
 101f908:	df000115 	stw	fp,4(sp)
 101f90c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 101f910:	008040f4 	movhi	r2,259
 101f914:	10a68004 	addi	r2,r2,-26112
 101f918:	10800017 	ldw	r2,0(r2)
 101f91c:	1005003a 	cmpeq	r2,r2,zero
 101f920:	1000061e 	bne	r2,zero,101f93c <alt_get_errno+0x3c>
 101f924:	008040f4 	movhi	r2,259
 101f928:	10a68004 	addi	r2,r2,-26112
 101f92c:	10800017 	ldw	r2,0(r2)
 101f930:	103ee83a 	callr	r2
 101f934:	e0bfff15 	stw	r2,-4(fp)
 101f938:	00000306 	br	101f948 <alt_get_errno+0x48>
 101f93c:	008040f4 	movhi	r2,259
 101f940:	10ad7c04 	addi	r2,r2,-18960
 101f944:	e0bfff15 	stw	r2,-4(fp)
 101f948:	e0bfff17 	ldw	r2,-4(fp)
}
 101f94c:	e037883a 	mov	sp,fp
 101f950:	dfc00117 	ldw	ra,4(sp)
 101f954:	df000017 	ldw	fp,0(sp)
 101f958:	dec00204 	addi	sp,sp,8
 101f95c:	f800283a 	ret

0101f960 <_do_ctors>:
 101f960:	defffd04 	addi	sp,sp,-12
 101f964:	dfc00215 	stw	ra,8(sp)
 101f968:	df000115 	stw	fp,4(sp)
 101f96c:	df000104 	addi	fp,sp,4
 101f970:	00bfff04 	movi	r2,-4
 101f974:	00c040b4 	movhi	r3,258
 101f978:	18c80b04 	addi	r3,r3,8236
 101f97c:	1885883a 	add	r2,r3,r2
 101f980:	e0bfff15 	stw	r2,-4(fp)
 101f984:	00000606 	br	101f9a0 <_do_ctors+0x40>
 101f988:	e0bfff17 	ldw	r2,-4(fp)
 101f98c:	10800017 	ldw	r2,0(r2)
 101f990:	103ee83a 	callr	r2
 101f994:	e0bfff17 	ldw	r2,-4(fp)
 101f998:	10bfff04 	addi	r2,r2,-4
 101f99c:	e0bfff15 	stw	r2,-4(fp)
 101f9a0:	e0ffff17 	ldw	r3,-4(fp)
 101f9a4:	008040b4 	movhi	r2,258
 101f9a8:	10880a04 	addi	r2,r2,8232
 101f9ac:	18bff62e 	bgeu	r3,r2,101f988 <_do_ctors+0x28>
 101f9b0:	e037883a 	mov	sp,fp
 101f9b4:	dfc00117 	ldw	ra,4(sp)
 101f9b8:	df000017 	ldw	fp,0(sp)
 101f9bc:	dec00204 	addi	sp,sp,8
 101f9c0:	f800283a 	ret

0101f9c4 <_do_dtors>:
 101f9c4:	defffd04 	addi	sp,sp,-12
 101f9c8:	dfc00215 	stw	ra,8(sp)
 101f9cc:	df000115 	stw	fp,4(sp)
 101f9d0:	df000104 	addi	fp,sp,4
 101f9d4:	00bfff04 	movi	r2,-4
 101f9d8:	00c040b4 	movhi	r3,258
 101f9dc:	18c80b04 	addi	r3,r3,8236
 101f9e0:	1885883a 	add	r2,r3,r2
 101f9e4:	e0bfff15 	stw	r2,-4(fp)
 101f9e8:	00000606 	br	101fa04 <_do_dtors+0x40>
 101f9ec:	e0bfff17 	ldw	r2,-4(fp)
 101f9f0:	10800017 	ldw	r2,0(r2)
 101f9f4:	103ee83a 	callr	r2
 101f9f8:	e0bfff17 	ldw	r2,-4(fp)
 101f9fc:	10bfff04 	addi	r2,r2,-4
 101fa00:	e0bfff15 	stw	r2,-4(fp)
 101fa04:	e0ffff17 	ldw	r3,-4(fp)
 101fa08:	008040b4 	movhi	r2,258
 101fa0c:	10880b04 	addi	r2,r2,8236
 101fa10:	18bff62e 	bgeu	r3,r2,101f9ec <_do_dtors+0x28>
 101fa14:	e037883a 	mov	sp,fp
 101fa18:	dfc00117 	ldw	ra,4(sp)
 101fa1c:	df000017 	ldw	fp,0(sp)
 101fa20:	dec00204 	addi	sp,sp,8
 101fa24:	f800283a 	ret

0101fa28 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 101fa28:	defff904 	addi	sp,sp,-28
 101fa2c:	dfc00615 	stw	ra,24(sp)
 101fa30:	df000515 	stw	fp,20(sp)
 101fa34:	df000504 	addi	fp,sp,20
 101fa38:	e13ffd15 	stw	r4,-12(fp)
 101fa3c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 101fa40:	e0bffe17 	ldw	r2,-8(fp)
 101fa44:	10800017 	ldw	r2,0(r2)
 101fa48:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 101fa4c:	e13ffd17 	ldw	r4,-12(fp)
 101fa50:	100e3080 	call	100e308 <strlen>
 101fa54:	10800044 	addi	r2,r2,1
 101fa58:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 101fa5c:	00000d06 	br	101fa94 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 101fa60:	e0bffc17 	ldw	r2,-16(fp)
 101fa64:	11000217 	ldw	r4,8(r2)
 101fa68:	e1bffb17 	ldw	r6,-20(fp)
 101fa6c:	e17ffd17 	ldw	r5,-12(fp)
 101fa70:	10206080 	call	1020608 <memcmp>
 101fa74:	1004c03a 	cmpne	r2,r2,zero
 101fa78:	1000031e 	bne	r2,zero,101fa88 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 101fa7c:	e0bffc17 	ldw	r2,-16(fp)
 101fa80:	e0bfff15 	stw	r2,-4(fp)
 101fa84:	00000706 	br	101faa4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 101fa88:	e0bffc17 	ldw	r2,-16(fp)
 101fa8c:	10800017 	ldw	r2,0(r2)
 101fa90:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 101fa94:	e0fffe17 	ldw	r3,-8(fp)
 101fa98:	e0bffc17 	ldw	r2,-16(fp)
 101fa9c:	10fff01e 	bne	r2,r3,101fa60 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 101faa0:	e03fff15 	stw	zero,-4(fp)
 101faa4:	e0bfff17 	ldw	r2,-4(fp)
}
 101faa8:	e037883a 	mov	sp,fp
 101faac:	dfc00117 	ldw	ra,4(sp)
 101fab0:	df000017 	ldw	fp,0(sp)
 101fab4:	dec00204 	addi	sp,sp,8
 101fab8:	f800283a 	ret

0101fabc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 101fabc:	defffe04 	addi	sp,sp,-8
 101fac0:	dfc00115 	stw	ra,4(sp)
 101fac4:	df000015 	stw	fp,0(sp)
 101fac8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 101facc:	0009883a 	mov	r4,zero
 101fad0:	01500004 	movi	r5,16384
 101fad4:	10204480 	call	1020448 <alt_icache_flush>
#endif
}
 101fad8:	e037883a 	mov	sp,fp
 101fadc:	dfc00117 	ldw	ra,4(sp)
 101fae0:	df000017 	ldw	fp,0(sp)
 101fae4:	dec00204 	addi	sp,sp,8
 101fae8:	f800283a 	ret

0101faec <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 101faec:	defff904 	addi	sp,sp,-28
 101faf0:	dfc00615 	stw	ra,24(sp)
 101faf4:	df000515 	stw	fp,20(sp)
 101faf8:	df000504 	addi	fp,sp,20
 101fafc:	e13ffc15 	stw	r4,-16(fp)
 101fb00:	e17ffd15 	stw	r5,-12(fp)
 101fb04:	e1bffe15 	stw	r6,-8(fp)
 101fb08:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 101fb0c:	e13ffd17 	ldw	r4,-12(fp)
 101fb10:	e17ffe17 	ldw	r5,-8(fp)
 101fb14:	e1bfff17 	ldw	r6,-4(fp)
 101fb18:	101fec40 	call	101fec4 <open>
 101fb1c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 101fb20:	e0bffb17 	ldw	r2,-20(fp)
 101fb24:	1004803a 	cmplt	r2,r2,zero
 101fb28:	10001c1e 	bne	r2,zero,101fb9c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 101fb2c:	e0bffb17 	ldw	r2,-20(fp)
 101fb30:	00c040f4 	movhi	r3,259
 101fb34:	18e1d504 	addi	r3,r3,-30892
 101fb38:	10800324 	muli	r2,r2,12
 101fb3c:	10c5883a 	add	r2,r2,r3
 101fb40:	10c00017 	ldw	r3,0(r2)
 101fb44:	e0bffc17 	ldw	r2,-16(fp)
 101fb48:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 101fb4c:	e0bffb17 	ldw	r2,-20(fp)
 101fb50:	00c040f4 	movhi	r3,259
 101fb54:	18e1d504 	addi	r3,r3,-30892
 101fb58:	10800324 	muli	r2,r2,12
 101fb5c:	10c5883a 	add	r2,r2,r3
 101fb60:	10800104 	addi	r2,r2,4
 101fb64:	10c00017 	ldw	r3,0(r2)
 101fb68:	e0bffc17 	ldw	r2,-16(fp)
 101fb6c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 101fb70:	e0bffb17 	ldw	r2,-20(fp)
 101fb74:	00c040f4 	movhi	r3,259
 101fb78:	18e1d504 	addi	r3,r3,-30892
 101fb7c:	10800324 	muli	r2,r2,12
 101fb80:	10c5883a 	add	r2,r2,r3
 101fb84:	10800204 	addi	r2,r2,8
 101fb88:	10c00017 	ldw	r3,0(r2)
 101fb8c:	e0bffc17 	ldw	r2,-16(fp)
 101fb90:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 101fb94:	e13ffb17 	ldw	r4,-20(fp)
 101fb98:	10198bc0 	call	10198bc <alt_release_fd>
  }
} 
 101fb9c:	e037883a 	mov	sp,fp
 101fba0:	dfc00117 	ldw	ra,4(sp)
 101fba4:	df000017 	ldw	fp,0(sp)
 101fba8:	dec00204 	addi	sp,sp,8
 101fbac:	f800283a 	ret

0101fbb0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 101fbb0:	defffb04 	addi	sp,sp,-20
 101fbb4:	dfc00415 	stw	ra,16(sp)
 101fbb8:	df000315 	stw	fp,12(sp)
 101fbbc:	df000304 	addi	fp,sp,12
 101fbc0:	e13ffd15 	stw	r4,-12(fp)
 101fbc4:	e17ffe15 	stw	r5,-8(fp)
 101fbc8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 101fbcc:	010040f4 	movhi	r4,259
 101fbd0:	2121d804 	addi	r4,r4,-30880
 101fbd4:	e17ffd17 	ldw	r5,-12(fp)
 101fbd8:	01800044 	movi	r6,1
 101fbdc:	01c07fc4 	movi	r7,511
 101fbe0:	101faec0 	call	101faec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 101fbe4:	010040f4 	movhi	r4,259
 101fbe8:	2121d504 	addi	r4,r4,-30892
 101fbec:	e17ffe17 	ldw	r5,-8(fp)
 101fbf0:	000d883a 	mov	r6,zero
 101fbf4:	01c07fc4 	movi	r7,511
 101fbf8:	101faec0 	call	101faec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 101fbfc:	010040f4 	movhi	r4,259
 101fc00:	2121db04 	addi	r4,r4,-30868
 101fc04:	e17fff17 	ldw	r5,-4(fp)
 101fc08:	01800044 	movi	r6,1
 101fc0c:	01c07fc4 	movi	r7,511
 101fc10:	101faec0 	call	101faec <alt_open_fd>
}  
 101fc14:	e037883a 	mov	sp,fp
 101fc18:	dfc00117 	ldw	ra,4(sp)
 101fc1c:	df000017 	ldw	fp,0(sp)
 101fc20:	dec00204 	addi	sp,sp,8
 101fc24:	f800283a 	ret

0101fc28 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 101fc28:	deffef04 	addi	sp,sp,-68
 101fc2c:	df001015 	stw	fp,64(sp)
 101fc30:	df001004 	addi	fp,sp,64
 101fc34:	e13ffc15 	stw	r4,-16(fp)
 101fc38:	e17ffd15 	stw	r5,-12(fp)
 101fc3c:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
 101fc40:	00bffa84 	movi	r2,-22
 101fc44:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 101fc48:	e0bffc17 	ldw	r2,-16(fp)
 101fc4c:	10800828 	cmpgeui	r2,r2,32
 101fc50:	1000601e 	bne	r2,zero,101fdd4 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101fc54:	0005303a 	rdctl	r2,status
 101fc58:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101fc5c:	e0fff917 	ldw	r3,-28(fp)
 101fc60:	00bfff84 	movi	r2,-2
 101fc64:	1884703a 	and	r2,r3,r2
 101fc68:	1001703a 	wrctl	status,r2
  
  return context;
 101fc6c:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 101fc70:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
 101fc74:	e0bffc17 	ldw	r2,-16(fp)
 101fc78:	00c04234 	movhi	r3,264
 101fc7c:	18ed7b04 	addi	r3,r3,-18964
 101fc80:	100490fa 	slli	r2,r2,3
 101fc84:	10c7883a 	add	r3,r2,r3
 101fc88:	e0bffe17 	ldw	r2,-8(fp)
 101fc8c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
 101fc90:	e0bffc17 	ldw	r2,-16(fp)
 101fc94:	00c04234 	movhi	r3,264
 101fc98:	18ed7b04 	addi	r3,r3,-18964
 101fc9c:	100490fa 	slli	r2,r2,3
 101fca0:	10c5883a 	add	r2,r2,r3
 101fca4:	10c00104 	addi	r3,r2,4
 101fca8:	e0bffd17 	ldw	r2,-12(fp)
 101fcac:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 101fcb0:	e0bffe17 	ldw	r2,-8(fp)
 101fcb4:	1005003a 	cmpeq	r2,r2,zero
 101fcb8:	1000201e 	bne	r2,zero,101fd3c <alt_irq_register+0x114>
 101fcbc:	e0bffc17 	ldw	r2,-16(fp)
 101fcc0:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101fcc4:	0005303a 	rdctl	r2,status
 101fcc8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101fccc:	e0fff617 	ldw	r3,-40(fp)
 101fcd0:	00bfff84 	movi	r2,-2
 101fcd4:	1884703a 	and	r2,r3,r2
 101fcd8:	1001703a 	wrctl	status,r2
  
  return context;
 101fcdc:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 101fce0:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 101fce4:	e0fff717 	ldw	r3,-36(fp)
 101fce8:	00800044 	movi	r2,1
 101fcec:	10c4983a 	sll	r2,r2,r3
 101fcf0:	1007883a 	mov	r3,r2
 101fcf4:	008040f4 	movhi	r2,259
 101fcf8:	10ad8d04 	addi	r2,r2,-18892
 101fcfc:	10800017 	ldw	r2,0(r2)
 101fd00:	1886b03a 	or	r3,r3,r2
 101fd04:	008040f4 	movhi	r2,259
 101fd08:	10ad8d04 	addi	r2,r2,-18892
 101fd0c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 101fd10:	008040f4 	movhi	r2,259
 101fd14:	10ad8d04 	addi	r2,r2,-18892
 101fd18:	10800017 	ldw	r2,0(r2)
 101fd1c:	100170fa 	wrctl	ienable,r2
 101fd20:	e0bff817 	ldw	r2,-32(fp)
 101fd24:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101fd28:	e0bff517 	ldw	r2,-44(fp)
 101fd2c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 101fd30:	0005883a 	mov	r2,zero
 101fd34:	e0bfff15 	stw	r2,-4(fp)
 101fd38:	00002006 	br	101fdbc <alt_irq_register+0x194>
 101fd3c:	e0bffc17 	ldw	r2,-16(fp)
 101fd40:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101fd44:	0005303a 	rdctl	r2,status
 101fd48:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101fd4c:	e0fff217 	ldw	r3,-56(fp)
 101fd50:	00bfff84 	movi	r2,-2
 101fd54:	1884703a 	and	r2,r3,r2
 101fd58:	1001703a 	wrctl	status,r2
  
  return context;
 101fd5c:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 101fd60:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
 101fd64:	e0fff317 	ldw	r3,-52(fp)
 101fd68:	00800044 	movi	r2,1
 101fd6c:	10c4983a 	sll	r2,r2,r3
 101fd70:	0084303a 	nor	r2,zero,r2
 101fd74:	1007883a 	mov	r3,r2
 101fd78:	008040f4 	movhi	r2,259
 101fd7c:	10ad8d04 	addi	r2,r2,-18892
 101fd80:	10800017 	ldw	r2,0(r2)
 101fd84:	1886703a 	and	r3,r3,r2
 101fd88:	008040f4 	movhi	r2,259
 101fd8c:	10ad8d04 	addi	r2,r2,-18892
 101fd90:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 101fd94:	008040f4 	movhi	r2,259
 101fd98:	10ad8d04 	addi	r2,r2,-18892
 101fd9c:	10800017 	ldw	r2,0(r2)
 101fda0:	100170fa 	wrctl	ienable,r2
 101fda4:	e0bff417 	ldw	r2,-48(fp)
 101fda8:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101fdac:	e0bff117 	ldw	r2,-60(fp)
 101fdb0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 101fdb4:	0005883a 	mov	r2,zero
 101fdb8:	e0bfff15 	stw	r2,-4(fp)
 101fdbc:	e0bfff17 	ldw	r2,-4(fp)
 101fdc0:	e0bffb15 	stw	r2,-20(fp)
 101fdc4:	e0bffa17 	ldw	r2,-24(fp)
 101fdc8:	e0bff015 	stw	r2,-64(fp)
 101fdcc:	e0bff017 	ldw	r2,-64(fp)
 101fdd0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 101fdd4:	e0bffb17 	ldw	r2,-20(fp)
}
 101fdd8:	e037883a 	mov	sp,fp
 101fddc:	df000017 	ldw	fp,0(sp)
 101fde0:	dec00104 	addi	sp,sp,4
 101fde4:	f800283a 	ret

0101fde8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 101fde8:	defffc04 	addi	sp,sp,-16
 101fdec:	df000315 	stw	fp,12(sp)
 101fdf0:	df000304 	addi	fp,sp,12
 101fdf4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 101fdf8:	e0bffe17 	ldw	r2,-8(fp)
 101fdfc:	10800217 	ldw	r2,8(r2)
 101fe00:	10d00034 	orhi	r3,r2,16384
 101fe04:	e0bffe17 	ldw	r2,-8(fp)
 101fe08:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 101fe0c:	e03ffd15 	stw	zero,-12(fp)
 101fe10:	00002006 	br	101fe94 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 101fe14:	e0bffd17 	ldw	r2,-12(fp)
 101fe18:	00c040f4 	movhi	r3,259
 101fe1c:	18e1d504 	addi	r3,r3,-30892
 101fe20:	10800324 	muli	r2,r2,12
 101fe24:	10c5883a 	add	r2,r2,r3
 101fe28:	10c00017 	ldw	r3,0(r2)
 101fe2c:	e0bffe17 	ldw	r2,-8(fp)
 101fe30:	10800017 	ldw	r2,0(r2)
 101fe34:	1880141e 	bne	r3,r2,101fe88 <alt_file_locked+0xa0>
 101fe38:	e0bffd17 	ldw	r2,-12(fp)
 101fe3c:	00c040f4 	movhi	r3,259
 101fe40:	18e1d504 	addi	r3,r3,-30892
 101fe44:	10800324 	muli	r2,r2,12
 101fe48:	10c5883a 	add	r2,r2,r3
 101fe4c:	10800204 	addi	r2,r2,8
 101fe50:	10800017 	ldw	r2,0(r2)
 101fe54:	1004403a 	cmpge	r2,r2,zero
 101fe58:	10000b1e 	bne	r2,zero,101fe88 <alt_file_locked+0xa0>
 101fe5c:	e0bffd17 	ldw	r2,-12(fp)
 101fe60:	10800324 	muli	r2,r2,12
 101fe64:	1007883a 	mov	r3,r2
 101fe68:	008040f4 	movhi	r2,259
 101fe6c:	10a1d504 	addi	r2,r2,-30892
 101fe70:	1887883a 	add	r3,r3,r2
 101fe74:	e0bffe17 	ldw	r2,-8(fp)
 101fe78:	18800326 	beq	r3,r2,101fe88 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 101fe7c:	00bffcc4 	movi	r2,-13
 101fe80:	e0bfff15 	stw	r2,-4(fp)
 101fe84:	00000a06 	br	101feb0 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 101fe88:	e0bffd17 	ldw	r2,-12(fp)
 101fe8c:	10800044 	addi	r2,r2,1
 101fe90:	e0bffd15 	stw	r2,-12(fp)
 101fe94:	008040f4 	movhi	r2,259
 101fe98:	10a67f04 	addi	r2,r2,-26116
 101fe9c:	10800017 	ldw	r2,0(r2)
 101fea0:	1007883a 	mov	r3,r2
 101fea4:	e0bffd17 	ldw	r2,-12(fp)
 101fea8:	18bfda2e 	bgeu	r3,r2,101fe14 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 101feac:	e03fff15 	stw	zero,-4(fp)
 101feb0:	e0bfff17 	ldw	r2,-4(fp)
}
 101feb4:	e037883a 	mov	sp,fp
 101feb8:	df000017 	ldw	fp,0(sp)
 101febc:	dec00104 	addi	sp,sp,4
 101fec0:	f800283a 	ret

0101fec4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 101fec4:	defff404 	addi	sp,sp,-48
 101fec8:	dfc00b15 	stw	ra,44(sp)
 101fecc:	df000a15 	stw	fp,40(sp)
 101fed0:	df000a04 	addi	fp,sp,40
 101fed4:	e13ffb15 	stw	r4,-20(fp)
 101fed8:	e17ffc15 	stw	r5,-16(fp)
 101fedc:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 101fee0:	00bfffc4 	movi	r2,-1
 101fee4:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 101fee8:	00bffb44 	movi	r2,-19
 101feec:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 101fef0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 101fef4:	e13ffb17 	ldw	r4,-20(fp)
 101fef8:	014040f4 	movhi	r5,259
 101fefc:	29667d04 	addi	r5,r5,-26124
 101ff00:	101fa280 	call	101fa28 <alt_find_dev>
 101ff04:	e0bffa15 	stw	r2,-24(fp)
 101ff08:	e0bffa17 	ldw	r2,-24(fp)
 101ff0c:	1004c03a 	cmpne	r2,r2,zero
 101ff10:	1000051e 	bne	r2,zero,101ff28 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 101ff14:	e13ffb17 	ldw	r4,-20(fp)
 101ff18:	10202700 	call	1020270 <alt_find_file>
 101ff1c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 101ff20:	00800044 	movi	r2,1
 101ff24:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 101ff28:	e0bffa17 	ldw	r2,-24(fp)
 101ff2c:	1005003a 	cmpeq	r2,r2,zero
 101ff30:	1000301e 	bne	r2,zero,101fff4 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 101ff34:	e13ffa17 	ldw	r4,-24(fp)
 101ff38:	10203900 	call	1020390 <alt_get_fd>
 101ff3c:	e0bff815 	stw	r2,-32(fp)
 101ff40:	e0bff817 	ldw	r2,-32(fp)
 101ff44:	1004403a 	cmpge	r2,r2,zero
 101ff48:	1000031e 	bne	r2,zero,101ff58 <open+0x94>
    {
      status = index;
 101ff4c:	e0bff817 	ldw	r2,-32(fp)
 101ff50:	e0bff715 	stw	r2,-36(fp)
 101ff54:	00002906 	br	101fffc <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 101ff58:	e0bff817 	ldw	r2,-32(fp)
 101ff5c:	10800324 	muli	r2,r2,12
 101ff60:	1007883a 	mov	r3,r2
 101ff64:	008040f4 	movhi	r2,259
 101ff68:	10a1d504 	addi	r2,r2,-30892
 101ff6c:	1885883a 	add	r2,r3,r2
 101ff70:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 101ff74:	e0fffc17 	ldw	r3,-16(fp)
 101ff78:	00900034 	movhi	r2,16384
 101ff7c:	10bfffc4 	addi	r2,r2,-1
 101ff80:	1886703a 	and	r3,r3,r2
 101ff84:	e0bff917 	ldw	r2,-28(fp)
 101ff88:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 101ff8c:	e0bff617 	ldw	r2,-40(fp)
 101ff90:	1004c03a 	cmpne	r2,r2,zero
 101ff94:	1000061e 	bne	r2,zero,101ffb0 <open+0xec>
 101ff98:	e13ff917 	ldw	r4,-28(fp)
 101ff9c:	101fde80 	call	101fde8 <alt_file_locked>
 101ffa0:	e0bff715 	stw	r2,-36(fp)
 101ffa4:	e0bff717 	ldw	r2,-36(fp)
 101ffa8:	1004803a 	cmplt	r2,r2,zero
 101ffac:	1000131e 	bne	r2,zero,101fffc <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 101ffb0:	e0bffa17 	ldw	r2,-24(fp)
 101ffb4:	10800317 	ldw	r2,12(r2)
 101ffb8:	1005003a 	cmpeq	r2,r2,zero
 101ffbc:	1000091e 	bne	r2,zero,101ffe4 <open+0x120>
 101ffc0:	e0bffa17 	ldw	r2,-24(fp)
 101ffc4:	10800317 	ldw	r2,12(r2)
 101ffc8:	e13ff917 	ldw	r4,-28(fp)
 101ffcc:	e17ffb17 	ldw	r5,-20(fp)
 101ffd0:	e1bffc17 	ldw	r6,-16(fp)
 101ffd4:	e1fffd17 	ldw	r7,-12(fp)
 101ffd8:	103ee83a 	callr	r2
 101ffdc:	e0bfff15 	stw	r2,-4(fp)
 101ffe0:	00000106 	br	101ffe8 <open+0x124>
 101ffe4:	e03fff15 	stw	zero,-4(fp)
 101ffe8:	e0bfff17 	ldw	r2,-4(fp)
 101ffec:	e0bff715 	stw	r2,-36(fp)
 101fff0:	00000206 	br	101fffc <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 101fff4:	00bffb44 	movi	r2,-19
 101fff8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 101fffc:	e0bff717 	ldw	r2,-36(fp)
 1020000:	1004403a 	cmpge	r2,r2,zero
 1020004:	1000091e 	bne	r2,zero,102002c <open+0x168>
  {
    alt_release_fd (index);  
 1020008:	e13ff817 	ldw	r4,-32(fp)
 102000c:	10198bc0 	call	10198bc <alt_release_fd>
    ALT_ERRNO = -status;
 1020010:	102004c0 	call	102004c <alt_get_errno>
 1020014:	e0fff717 	ldw	r3,-36(fp)
 1020018:	00c7c83a 	sub	r3,zero,r3
 102001c:	10c00015 	stw	r3,0(r2)
    return -1;
 1020020:	00bfffc4 	movi	r2,-1
 1020024:	e0bffe15 	stw	r2,-8(fp)
 1020028:	00000206 	br	1020034 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 102002c:	e0bff817 	ldw	r2,-32(fp)
 1020030:	e0bffe15 	stw	r2,-8(fp)
 1020034:	e0bffe17 	ldw	r2,-8(fp)
}
 1020038:	e037883a 	mov	sp,fp
 102003c:	dfc00117 	ldw	ra,4(sp)
 1020040:	df000017 	ldw	fp,0(sp)
 1020044:	dec00204 	addi	sp,sp,8
 1020048:	f800283a 	ret

0102004c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 102004c:	defffd04 	addi	sp,sp,-12
 1020050:	dfc00215 	stw	ra,8(sp)
 1020054:	df000115 	stw	fp,4(sp)
 1020058:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 102005c:	008040f4 	movhi	r2,259
 1020060:	10a68004 	addi	r2,r2,-26112
 1020064:	10800017 	ldw	r2,0(r2)
 1020068:	1005003a 	cmpeq	r2,r2,zero
 102006c:	1000061e 	bne	r2,zero,1020088 <alt_get_errno+0x3c>
 1020070:	008040f4 	movhi	r2,259
 1020074:	10a68004 	addi	r2,r2,-26112
 1020078:	10800017 	ldw	r2,0(r2)
 102007c:	103ee83a 	callr	r2
 1020080:	e0bfff15 	stw	r2,-4(fp)
 1020084:	00000306 	br	1020094 <alt_get_errno+0x48>
 1020088:	008040f4 	movhi	r2,259
 102008c:	10ad7c04 	addi	r2,r2,-18960
 1020090:	e0bfff15 	stw	r2,-4(fp)
 1020094:	e0bfff17 	ldw	r2,-4(fp)
}
 1020098:	e037883a 	mov	sp,fp
 102009c:	dfc00117 	ldw	ra,4(sp)
 10200a0:	df000017 	ldw	fp,0(sp)
 10200a4:	dec00204 	addi	sp,sp,8
 10200a8:	f800283a 	ret

010200ac <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 10200ac:	defffa04 	addi	sp,sp,-24
 10200b0:	df000515 	stw	fp,20(sp)
 10200b4:	df000504 	addi	fp,sp,20
 10200b8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10200bc:	0005303a 	rdctl	r2,status
 10200c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10200c4:	e0fffd17 	ldw	r3,-12(fp)
 10200c8:	00bfff84 	movi	r2,-2
 10200cc:	1884703a 	and	r2,r3,r2
 10200d0:	1001703a 	wrctl	status,r2
  
  return context;
 10200d4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 10200d8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 10200dc:	e0bfff17 	ldw	r2,-4(fp)
 10200e0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 10200e4:	e0bffc17 	ldw	r2,-16(fp)
 10200e8:	10c00017 	ldw	r3,0(r2)
 10200ec:	e0bffc17 	ldw	r2,-16(fp)
 10200f0:	10800117 	ldw	r2,4(r2)
 10200f4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 10200f8:	e0bffc17 	ldw	r2,-16(fp)
 10200fc:	10c00117 	ldw	r3,4(r2)
 1020100:	e0bffc17 	ldw	r2,-16(fp)
 1020104:	10800017 	ldw	r2,0(r2)
 1020108:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 102010c:	e0fffc17 	ldw	r3,-16(fp)
 1020110:	e0bffc17 	ldw	r2,-16(fp)
 1020114:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 1020118:	e0fffc17 	ldw	r3,-16(fp)
 102011c:	e0bffc17 	ldw	r2,-16(fp)
 1020120:	18800015 	stw	r2,0(r3)
 1020124:	e0bffe17 	ldw	r2,-8(fp)
 1020128:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 102012c:	e0bffb17 	ldw	r2,-20(fp)
 1020130:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 1020134:	e037883a 	mov	sp,fp
 1020138:	df000017 	ldw	fp,0(sp)
 102013c:	dec00104 	addi	sp,sp,4
 1020140:	f800283a 	ret

01020144 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 1020144:	defffb04 	addi	sp,sp,-20
 1020148:	dfc00415 	stw	ra,16(sp)
 102014c:	df000315 	stw	fp,12(sp)
 1020150:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 1020154:	d0a01517 	ldw	r2,-32684(gp)
 1020158:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 102015c:	d0a72117 	ldw	r2,-25468(gp)
 1020160:	10800044 	addi	r2,r2,1
 1020164:	d0a72115 	stw	r2,-25468(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1020168:	00003106 	br	1020230 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 102016c:	e0bffe17 	ldw	r2,-8(fp)
 1020170:	10800017 	ldw	r2,0(r2)
 1020174:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 1020178:	e0bffe17 	ldw	r2,-8(fp)
 102017c:	10800403 	ldbu	r2,16(r2)
 1020180:	10803fcc 	andi	r2,r2,255
 1020184:	1005003a 	cmpeq	r2,r2,zero
 1020188:	1000051e 	bne	r2,zero,10201a0 <alt_tick+0x5c>
 102018c:	d0a72117 	ldw	r2,-25468(gp)
 1020190:	1004c03a 	cmpne	r2,r2,zero
 1020194:	1000021e 	bne	r2,zero,10201a0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 1020198:	e0bffe17 	ldw	r2,-8(fp)
 102019c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 10201a0:	e0bffe17 	ldw	r2,-8(fp)
 10201a4:	10c00217 	ldw	r3,8(r2)
 10201a8:	d0a72117 	ldw	r2,-25468(gp)
 10201ac:	10c01e36 	bltu	r2,r3,1020228 <alt_tick+0xe4>
 10201b0:	e0bffe17 	ldw	r2,-8(fp)
 10201b4:	10800403 	ldbu	r2,16(r2)
 10201b8:	10803fcc 	andi	r2,r2,255
 10201bc:	1004c03a 	cmpne	r2,r2,zero
 10201c0:	1000191e 	bne	r2,zero,1020228 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 10201c4:	e0bffe17 	ldw	r2,-8(fp)
 10201c8:	10c00317 	ldw	r3,12(r2)
 10201cc:	e0bffe17 	ldw	r2,-8(fp)
 10201d0:	11000517 	ldw	r4,20(r2)
 10201d4:	183ee83a 	callr	r3
 10201d8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 10201dc:	e0bffd17 	ldw	r2,-12(fp)
 10201e0:	1004c03a 	cmpne	r2,r2,zero
 10201e4:	1000031e 	bne	r2,zero,10201f4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 10201e8:	e13ffe17 	ldw	r4,-8(fp)
 10201ec:	10200ac0 	call	10200ac <alt_alarm_stop>
 10201f0:	00000d06 	br	1020228 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 10201f4:	e0bffe17 	ldw	r2,-8(fp)
 10201f8:	10c00217 	ldw	r3,8(r2)
 10201fc:	e0bffd17 	ldw	r2,-12(fp)
 1020200:	1887883a 	add	r3,r3,r2
 1020204:	e0bffe17 	ldw	r2,-8(fp)
 1020208:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 102020c:	e0bffe17 	ldw	r2,-8(fp)
 1020210:	10c00217 	ldw	r3,8(r2)
 1020214:	d0a72117 	ldw	r2,-25468(gp)
 1020218:	1880032e 	bgeu	r3,r2,1020228 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 102021c:	e0fffe17 	ldw	r3,-8(fp)
 1020220:	00800044 	movi	r2,1
 1020224:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 1020228:	e0bfff17 	ldw	r2,-4(fp)
 102022c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1020230:	d0e01504 	addi	r3,gp,-32684
 1020234:	e0bffe17 	ldw	r2,-8(fp)
 1020238:	10ffcc1e 	bne	r2,r3,102016c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 102023c:	e037883a 	mov	sp,fp
 1020240:	dfc00117 	ldw	ra,4(sp)
 1020244:	df000017 	ldw	fp,0(sp)
 1020248:	dec00204 	addi	sp,sp,8
 102024c:	f800283a 	ret

01020250 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 1020250:	deffff04 	addi	sp,sp,-4
 1020254:	df000015 	stw	fp,0(sp)
 1020258:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 102025c:	000170fa 	wrctl	ienable,zero
}
 1020260:	e037883a 	mov	sp,fp
 1020264:	df000017 	ldw	fp,0(sp)
 1020268:	dec00104 	addi	sp,sp,4
 102026c:	f800283a 	ret

01020270 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 1020270:	defffa04 	addi	sp,sp,-24
 1020274:	dfc00515 	stw	ra,20(sp)
 1020278:	df000415 	stw	fp,16(sp)
 102027c:	df000404 	addi	fp,sp,16
 1020280:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1020284:	008040f4 	movhi	r2,259
 1020288:	10a67b04 	addi	r2,r2,-26132
 102028c:	10800017 	ldw	r2,0(r2)
 1020290:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1020294:	00003306 	br	1020364 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 1020298:	e0bffd17 	ldw	r2,-12(fp)
 102029c:	11000217 	ldw	r4,8(r2)
 10202a0:	100e3080 	call	100e308 <strlen>
 10202a4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 10202a8:	e0bffd17 	ldw	r2,-12(fp)
 10202ac:	10c00217 	ldw	r3,8(r2)
 10202b0:	e0bffc17 	ldw	r2,-16(fp)
 10202b4:	1885883a 	add	r2,r3,r2
 10202b8:	10bfffc4 	addi	r2,r2,-1
 10202bc:	10800003 	ldbu	r2,0(r2)
 10202c0:	10803fcc 	andi	r2,r2,255
 10202c4:	1080201c 	xori	r2,r2,128
 10202c8:	10bfe004 	addi	r2,r2,-128
 10202cc:	10800bd8 	cmpnei	r2,r2,47
 10202d0:	1000031e 	bne	r2,zero,10202e0 <alt_find_file+0x70>
    {
      len -= 1;
 10202d4:	e0bffc17 	ldw	r2,-16(fp)
 10202d8:	10bfffc4 	addi	r2,r2,-1
 10202dc:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 10202e0:	e0bffc17 	ldw	r2,-16(fp)
 10202e4:	1007883a 	mov	r3,r2
 10202e8:	e0bffe17 	ldw	r2,-8(fp)
 10202ec:	1885883a 	add	r2,r3,r2
 10202f0:	10800003 	ldbu	r2,0(r2)
 10202f4:	10803fcc 	andi	r2,r2,255
 10202f8:	1080201c 	xori	r2,r2,128
 10202fc:	10bfe004 	addi	r2,r2,-128
 1020300:	10800be0 	cmpeqi	r2,r2,47
 1020304:	10000a1e 	bne	r2,zero,1020330 <alt_find_file+0xc0>
 1020308:	e0bffc17 	ldw	r2,-16(fp)
 102030c:	1007883a 	mov	r3,r2
 1020310:	e0bffe17 	ldw	r2,-8(fp)
 1020314:	1885883a 	add	r2,r3,r2
 1020318:	10800003 	ldbu	r2,0(r2)
 102031c:	10803fcc 	andi	r2,r2,255
 1020320:	1080201c 	xori	r2,r2,128
 1020324:	10bfe004 	addi	r2,r2,-128
 1020328:	1004c03a 	cmpne	r2,r2,zero
 102032c:	10000a1e 	bne	r2,zero,1020358 <alt_find_file+0xe8>
 1020330:	e0bffd17 	ldw	r2,-12(fp)
 1020334:	11000217 	ldw	r4,8(r2)
 1020338:	e1bffc17 	ldw	r6,-16(fp)
 102033c:	e17ffe17 	ldw	r5,-8(fp)
 1020340:	10206080 	call	1020608 <memcmp>
 1020344:	1004c03a 	cmpne	r2,r2,zero
 1020348:	1000031e 	bne	r2,zero,1020358 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 102034c:	e0bffd17 	ldw	r2,-12(fp)
 1020350:	e0bfff15 	stw	r2,-4(fp)
 1020354:	00000806 	br	1020378 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 1020358:	e0bffd17 	ldw	r2,-12(fp)
 102035c:	10800017 	ldw	r2,0(r2)
 1020360:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1020364:	00c040f4 	movhi	r3,259
 1020368:	18e67b04 	addi	r3,r3,-26132
 102036c:	e0bffd17 	ldw	r2,-12(fp)
 1020370:	10ffc91e 	bne	r2,r3,1020298 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1020374:	e03fff15 	stw	zero,-4(fp)
 1020378:	e0bfff17 	ldw	r2,-4(fp)
}
 102037c:	e037883a 	mov	sp,fp
 1020380:	dfc00117 	ldw	ra,4(sp)
 1020384:	df000017 	ldw	fp,0(sp)
 1020388:	dec00204 	addi	sp,sp,8
 102038c:	f800283a 	ret

01020390 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1020390:	defffc04 	addi	sp,sp,-16
 1020394:	df000315 	stw	fp,12(sp)
 1020398:	df000304 	addi	fp,sp,12
 102039c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 10203a0:	00bffa04 	movi	r2,-24
 10203a4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 10203a8:	e03ffe15 	stw	zero,-8(fp)
 10203ac:	00001e06 	br	1020428 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 10203b0:	e0bffe17 	ldw	r2,-8(fp)
 10203b4:	00c040f4 	movhi	r3,259
 10203b8:	18e1d504 	addi	r3,r3,-30892
 10203bc:	10800324 	muli	r2,r2,12
 10203c0:	10c5883a 	add	r2,r2,r3
 10203c4:	10800017 	ldw	r2,0(r2)
 10203c8:	1004c03a 	cmpne	r2,r2,zero
 10203cc:	1000131e 	bne	r2,zero,102041c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 10203d0:	e0bffe17 	ldw	r2,-8(fp)
 10203d4:	00c040f4 	movhi	r3,259
 10203d8:	18e1d504 	addi	r3,r3,-30892
 10203dc:	10800324 	muli	r2,r2,12
 10203e0:	10c7883a 	add	r3,r2,r3
 10203e4:	e0bfff17 	ldw	r2,-4(fp)
 10203e8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 10203ec:	008040f4 	movhi	r2,259
 10203f0:	10a67f04 	addi	r2,r2,-26116
 10203f4:	10c00017 	ldw	r3,0(r2)
 10203f8:	e0bffe17 	ldw	r2,-8(fp)
 10203fc:	1880040e 	bge	r3,r2,1020410 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 1020400:	00c040f4 	movhi	r3,259
 1020404:	18e67f04 	addi	r3,r3,-26116
 1020408:	e0bffe17 	ldw	r2,-8(fp)
 102040c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 1020410:	e0bffe17 	ldw	r2,-8(fp)
 1020414:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 1020418:	00000606 	br	1020434 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 102041c:	e0bffe17 	ldw	r2,-8(fp)
 1020420:	10800044 	addi	r2,r2,1
 1020424:	e0bffe15 	stw	r2,-8(fp)
 1020428:	e0bffe17 	ldw	r2,-8(fp)
 102042c:	10800810 	cmplti	r2,r2,32
 1020430:	103fdf1e 	bne	r2,zero,10203b0 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 1020434:	e0bffd17 	ldw	r2,-12(fp)
}
 1020438:	e037883a 	mov	sp,fp
 102043c:	df000017 	ldw	fp,0(sp)
 1020440:	dec00104 	addi	sp,sp,4
 1020444:	f800283a 	ret

01020448 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 1020448:	defffb04 	addi	sp,sp,-20
 102044c:	df000415 	stw	fp,16(sp)
 1020450:	df000404 	addi	fp,sp,16
 1020454:	e13ffe15 	stw	r4,-8(fp)
 1020458:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 102045c:	e0bfff17 	ldw	r2,-4(fp)
 1020460:	10900070 	cmpltui	r2,r2,16385
 1020464:	1000021e 	bne	r2,zero,1020470 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 1020468:	00900004 	movi	r2,16384
 102046c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 1020470:	e0fffe17 	ldw	r3,-8(fp)
 1020474:	e0bfff17 	ldw	r2,-4(fp)
 1020478:	1885883a 	add	r2,r3,r2
 102047c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1020480:	e0bffe17 	ldw	r2,-8(fp)
 1020484:	e0bffd15 	stw	r2,-12(fp)
 1020488:	00000506 	br	10204a0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 102048c:	e0bffd17 	ldw	r2,-12(fp)
 1020490:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1020494:	e0bffd17 	ldw	r2,-12(fp)
 1020498:	10800804 	addi	r2,r2,32
 102049c:	e0bffd15 	stw	r2,-12(fp)
 10204a0:	e0fffd17 	ldw	r3,-12(fp)
 10204a4:	e0bffc17 	ldw	r2,-16(fp)
 10204a8:	18bff836 	bltu	r3,r2,102048c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 10204ac:	e0bffe17 	ldw	r2,-8(fp)
 10204b0:	108007cc 	andi	r2,r2,31
 10204b4:	1005003a 	cmpeq	r2,r2,zero
 10204b8:	1000021e 	bne	r2,zero,10204c4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 10204bc:	e0bffd17 	ldw	r2,-12(fp)
 10204c0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 10204c4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 10204c8:	e037883a 	mov	sp,fp
 10204cc:	df000017 	ldw	fp,0(sp)
 10204d0:	dec00104 	addi	sp,sp,4
 10204d4:	f800283a 	ret

010204d8 <__assert_func>:
 10204d8:	008040f4 	movhi	r2,259
 10204dc:	10a67004 	addi	r2,r2,-26176
 10204e0:	10c00017 	ldw	r3,0(r2)
 10204e4:	defffc04 	addi	sp,sp,-16
 10204e8:	2011883a 	mov	r8,r4
 10204ec:	dfc00315 	stw	ra,12(sp)
 10204f0:	3005883a 	mov	r2,r6
 10204f4:	2813883a 	mov	r9,r5
 10204f8:	19000317 	ldw	r4,12(r3)
 10204fc:	30000b26 	beq	r6,zero,102052c <__assert_func+0x54>
 1020500:	00c040b4 	movhi	r3,258
 1020504:	18dfa004 	addi	r3,r3,32384
 1020508:	380d883a 	mov	r6,r7
 102050c:	014040b4 	movhi	r5,258
 1020510:	295f9404 	addi	r5,r5,32336
 1020514:	400f883a 	mov	r7,r8
 1020518:	da400015 	stw	r9,0(sp)
 102051c:	d8c00115 	stw	r3,4(sp)
 1020520:	d8800215 	stw	r2,8(sp)
 1020524:	102059c0 	call	102059c <fiprintf>
 1020528:	10209800 	call	1020980 <abort>
 102052c:	008040b4 	movhi	r2,258
 1020530:	109fa304 	addi	r2,r2,32396
 1020534:	1007883a 	mov	r3,r2
 1020538:	003ff306 	br	1020508 <__assert_func+0x30>

0102053c <__assert>:
 102053c:	deffff04 	addi	sp,sp,-4
 1020540:	300f883a 	mov	r7,r6
 1020544:	000d883a 	mov	r6,zero
 1020548:	dfc00015 	stw	ra,0(sp)
 102054c:	10204d80 	call	10204d8 <__assert_func>

01020550 <atexit>:
 1020550:	200b883a 	mov	r5,r4
 1020554:	000d883a 	mov	r6,zero
 1020558:	0009883a 	mov	r4,zero
 102055c:	000f883a 	mov	r7,zero
 1020560:	10206981 	jmpi	1020698 <__register_exitproc>

01020564 <exit>:
 1020564:	defffe04 	addi	sp,sp,-8
 1020568:	000b883a 	mov	r5,zero
 102056c:	dc000015 	stw	r16,0(sp)
 1020570:	dfc00115 	stw	ra,4(sp)
 1020574:	2021883a 	mov	r16,r4
 1020578:	10207d00 	call	10207d0 <__call_exitprocs>
 102057c:	008040f4 	movhi	r2,259
 1020580:	10a67104 	addi	r2,r2,-26172
 1020584:	11000017 	ldw	r4,0(r2)
 1020588:	20800f17 	ldw	r2,60(r4)
 102058c:	10000126 	beq	r2,zero,1020594 <exit+0x30>
 1020590:	103ee83a 	callr	r2
 1020594:	8009883a 	mov	r4,r16
 1020598:	1021e480 	call	1021e48 <_exit>

0102059c <fiprintf>:
 102059c:	defffc04 	addi	sp,sp,-16
 10205a0:	2007883a 	mov	r3,r4
 10205a4:	dfc00115 	stw	ra,4(sp)
 10205a8:	d9800215 	stw	r6,8(sp)
 10205ac:	d9c00315 	stw	r7,12(sp)
 10205b0:	018040f4 	movhi	r6,259
 10205b4:	31a67004 	addi	r6,r6,-26176
 10205b8:	31000017 	ldw	r4,0(r6)
 10205bc:	d8800204 	addi	r2,sp,8
 10205c0:	280d883a 	mov	r6,r5
 10205c4:	100f883a 	mov	r7,r2
 10205c8:	180b883a 	mov	r5,r3
 10205cc:	d8800015 	stw	r2,0(sp)
 10205d0:	102067c0 	call	102067c <_vfiprintf_r>
 10205d4:	dfc00117 	ldw	ra,4(sp)
 10205d8:	dec00404 	addi	sp,sp,16
 10205dc:	f800283a 	ret

010205e0 <_fiprintf_r>:
 10205e0:	defffd04 	addi	sp,sp,-12
 10205e4:	dfc00115 	stw	ra,4(sp)
 10205e8:	d9c00215 	stw	r7,8(sp)
 10205ec:	d8800204 	addi	r2,sp,8
 10205f0:	100f883a 	mov	r7,r2
 10205f4:	d8800015 	stw	r2,0(sp)
 10205f8:	102067c0 	call	102067c <_vfiprintf_r>
 10205fc:	dfc00117 	ldw	ra,4(sp)
 1020600:	dec00304 	addi	sp,sp,12
 1020604:	f800283a 	ret

01020608 <memcmp>:
 1020608:	00c000c4 	movi	r3,3
 102060c:	1980032e 	bgeu	r3,r6,102061c <memcmp+0x14>
 1020610:	2144b03a 	or	r2,r4,r5
 1020614:	10c4703a 	and	r2,r2,r3
 1020618:	10000f26 	beq	r2,zero,1020658 <memcmp+0x50>
 102061c:	31ffffc4 	addi	r7,r6,-1
 1020620:	3000061e 	bne	r6,zero,102063c <memcmp+0x34>
 1020624:	00000a06 	br	1020650 <memcmp+0x48>
 1020628:	39ffffc4 	addi	r7,r7,-1
 102062c:	00bfffc4 	movi	r2,-1
 1020630:	21000044 	addi	r4,r4,1
 1020634:	29400044 	addi	r5,r5,1
 1020638:	38800526 	beq	r7,r2,1020650 <memcmp+0x48>
 102063c:	20c00003 	ldbu	r3,0(r4)
 1020640:	28800003 	ldbu	r2,0(r5)
 1020644:	18bff826 	beq	r3,r2,1020628 <memcmp+0x20>
 1020648:	1885c83a 	sub	r2,r3,r2
 102064c:	f800283a 	ret
 1020650:	0005883a 	mov	r2,zero
 1020654:	f800283a 	ret
 1020658:	180f883a 	mov	r7,r3
 102065c:	20c00017 	ldw	r3,0(r4)
 1020660:	28800017 	ldw	r2,0(r5)
 1020664:	18bfed1e 	bne	r3,r2,102061c <memcmp+0x14>
 1020668:	31bfff04 	addi	r6,r6,-4
 102066c:	21000104 	addi	r4,r4,4
 1020670:	29400104 	addi	r5,r5,4
 1020674:	39bff936 	bltu	r7,r6,102065c <memcmp+0x54>
 1020678:	003fe806 	br	102061c <memcmp+0x14>

0102067c <_vfiprintf_r>:
 102067c:	defffe04 	addi	sp,sp,-8
 1020680:	dfc00115 	stw	ra,4(sp)
 1020684:	d9c00015 	stw	r7,0(sp)
 1020688:	1020d400 	call	1020d40 <___vfiprintf_internal_r>
 102068c:	dfc00117 	ldw	ra,4(sp)
 1020690:	dec00204 	addi	sp,sp,8
 1020694:	f800283a 	ret

01020698 <__register_exitproc>:
 1020698:	defffa04 	addi	sp,sp,-24
 102069c:	008040f4 	movhi	r2,259
 10206a0:	10a67104 	addi	r2,r2,-26172
 10206a4:	dc000015 	stw	r16,0(sp)
 10206a8:	14000017 	ldw	r16,0(r2)
 10206ac:	dd000415 	stw	r20,16(sp)
 10206b0:	2829883a 	mov	r20,r5
 10206b4:	81405217 	ldw	r5,328(r16)
 10206b8:	dcc00315 	stw	r19,12(sp)
 10206bc:	dc800215 	stw	r18,8(sp)
 10206c0:	dc400115 	stw	r17,4(sp)
 10206c4:	dfc00515 	stw	ra,20(sp)
 10206c8:	2023883a 	mov	r17,r4
 10206cc:	3027883a 	mov	r19,r6
 10206d0:	3825883a 	mov	r18,r7
 10206d4:	28002526 	beq	r5,zero,102076c <__register_exitproc+0xd4>
 10206d8:	29000117 	ldw	r4,4(r5)
 10206dc:	008007c4 	movi	r2,31
 10206e0:	11002716 	blt	r2,r4,1020780 <__register_exitproc+0xe8>
 10206e4:	8800101e 	bne	r17,zero,1020728 <__register_exitproc+0x90>
 10206e8:	2105883a 	add	r2,r4,r4
 10206ec:	1085883a 	add	r2,r2,r2
 10206f0:	20c00044 	addi	r3,r4,1
 10206f4:	1145883a 	add	r2,r2,r5
 10206f8:	0009883a 	mov	r4,zero
 10206fc:	15000215 	stw	r20,8(r2)
 1020700:	28c00115 	stw	r3,4(r5)
 1020704:	2005883a 	mov	r2,r4
 1020708:	dfc00517 	ldw	ra,20(sp)
 102070c:	dd000417 	ldw	r20,16(sp)
 1020710:	dcc00317 	ldw	r19,12(sp)
 1020714:	dc800217 	ldw	r18,8(sp)
 1020718:	dc400117 	ldw	r17,4(sp)
 102071c:	dc000017 	ldw	r16,0(sp)
 1020720:	dec00604 	addi	sp,sp,24
 1020724:	f800283a 	ret
 1020728:	29802204 	addi	r6,r5,136
 102072c:	00800044 	movi	r2,1
 1020730:	110e983a 	sll	r7,r2,r4
 1020734:	30c04017 	ldw	r3,256(r6)
 1020738:	2105883a 	add	r2,r4,r4
 102073c:	1085883a 	add	r2,r2,r2
 1020740:	1185883a 	add	r2,r2,r6
 1020744:	19c6b03a 	or	r3,r3,r7
 1020748:	14802015 	stw	r18,128(r2)
 102074c:	14c00015 	stw	r19,0(r2)
 1020750:	00800084 	movi	r2,2
 1020754:	30c04015 	stw	r3,256(r6)
 1020758:	88bfe31e 	bne	r17,r2,10206e8 <__register_exitproc+0x50>
 102075c:	30804117 	ldw	r2,260(r6)
 1020760:	11c4b03a 	or	r2,r2,r7
 1020764:	30804115 	stw	r2,260(r6)
 1020768:	003fdf06 	br	10206e8 <__register_exitproc+0x50>
 102076c:	00804234 	movhi	r2,264
 1020770:	10adbb04 	addi	r2,r2,-18708
 1020774:	100b883a 	mov	r5,r2
 1020778:	80805215 	stw	r2,328(r16)
 102077c:	003fd606 	br	10206d8 <__register_exitproc+0x40>
 1020780:	00800034 	movhi	r2,0
 1020784:	10800004 	addi	r2,r2,0
 1020788:	1000021e 	bne	r2,zero,1020794 <__register_exitproc+0xfc>
 102078c:	013fffc4 	movi	r4,-1
 1020790:	003fdc06 	br	1020704 <__register_exitproc+0x6c>
 1020794:	01006404 	movi	r4,400
 1020798:	103ee83a 	callr	r2
 102079c:	1007883a 	mov	r3,r2
 10207a0:	103ffa26 	beq	r2,zero,102078c <__register_exitproc+0xf4>
 10207a4:	80805217 	ldw	r2,328(r16)
 10207a8:	180b883a 	mov	r5,r3
 10207ac:	18000115 	stw	zero,4(r3)
 10207b0:	18800015 	stw	r2,0(r3)
 10207b4:	80c05215 	stw	r3,328(r16)
 10207b8:	18006215 	stw	zero,392(r3)
 10207bc:	18006315 	stw	zero,396(r3)
 10207c0:	0009883a 	mov	r4,zero
 10207c4:	883fc826 	beq	r17,zero,10206e8 <__register_exitproc+0x50>
 10207c8:	003fd706 	br	1020728 <__register_exitproc+0x90>

010207cc <register_fini>:
 10207cc:	f800283a 	ret

010207d0 <__call_exitprocs>:
 10207d0:	008040f4 	movhi	r2,259
 10207d4:	10a67104 	addi	r2,r2,-26172
 10207d8:	10800017 	ldw	r2,0(r2)
 10207dc:	defff304 	addi	sp,sp,-52
 10207e0:	df000b15 	stw	fp,44(sp)
 10207e4:	d8800115 	stw	r2,4(sp)
 10207e8:	00800034 	movhi	r2,0
 10207ec:	10800004 	addi	r2,r2,0
 10207f0:	1005003a 	cmpeq	r2,r2,zero
 10207f4:	d8800215 	stw	r2,8(sp)
 10207f8:	d8800117 	ldw	r2,4(sp)
 10207fc:	dd400815 	stw	r21,32(sp)
 1020800:	dd000715 	stw	r20,28(sp)
 1020804:	10805204 	addi	r2,r2,328
 1020808:	dfc00c15 	stw	ra,48(sp)
 102080c:	ddc00a15 	stw	r23,40(sp)
 1020810:	dd800915 	stw	r22,36(sp)
 1020814:	dcc00615 	stw	r19,24(sp)
 1020818:	dc800515 	stw	r18,20(sp)
 102081c:	dc400415 	stw	r17,16(sp)
 1020820:	dc000315 	stw	r16,12(sp)
 1020824:	282b883a 	mov	r21,r5
 1020828:	2039883a 	mov	fp,r4
 102082c:	d8800015 	stw	r2,0(sp)
 1020830:	2829003a 	cmpeq	r20,r5,zero
 1020834:	d8800117 	ldw	r2,4(sp)
 1020838:	14405217 	ldw	r17,328(r2)
 102083c:	88001026 	beq	r17,zero,1020880 <__call_exitprocs+0xb0>
 1020840:	ddc00017 	ldw	r23,0(sp)
 1020844:	88800117 	ldw	r2,4(r17)
 1020848:	8c802204 	addi	r18,r17,136
 102084c:	143fffc4 	addi	r16,r2,-1
 1020850:	80000916 	blt	r16,zero,1020878 <__call_exitprocs+0xa8>
 1020854:	05bfffc4 	movi	r22,-1
 1020858:	a000151e 	bne	r20,zero,10208b0 <__call_exitprocs+0xe0>
 102085c:	8409883a 	add	r4,r16,r16
 1020860:	2105883a 	add	r2,r4,r4
 1020864:	1485883a 	add	r2,r2,r18
 1020868:	10c02017 	ldw	r3,128(r2)
 102086c:	a8c01126 	beq	r21,r3,10208b4 <__call_exitprocs+0xe4>
 1020870:	843fffc4 	addi	r16,r16,-1
 1020874:	85bff81e 	bne	r16,r22,1020858 <__call_exitprocs+0x88>
 1020878:	d8800217 	ldw	r2,8(sp)
 102087c:	10003126 	beq	r2,zero,1020944 <__call_exitprocs+0x174>
 1020880:	dfc00c17 	ldw	ra,48(sp)
 1020884:	df000b17 	ldw	fp,44(sp)
 1020888:	ddc00a17 	ldw	r23,40(sp)
 102088c:	dd800917 	ldw	r22,36(sp)
 1020890:	dd400817 	ldw	r21,32(sp)
 1020894:	dd000717 	ldw	r20,28(sp)
 1020898:	dcc00617 	ldw	r19,24(sp)
 102089c:	dc800517 	ldw	r18,20(sp)
 10208a0:	dc400417 	ldw	r17,16(sp)
 10208a4:	dc000317 	ldw	r16,12(sp)
 10208a8:	dec00d04 	addi	sp,sp,52
 10208ac:	f800283a 	ret
 10208b0:	8409883a 	add	r4,r16,r16
 10208b4:	88c00117 	ldw	r3,4(r17)
 10208b8:	2105883a 	add	r2,r4,r4
 10208bc:	1445883a 	add	r2,r2,r17
 10208c0:	18ffffc4 	addi	r3,r3,-1
 10208c4:	11800217 	ldw	r6,8(r2)
 10208c8:	1c001526 	beq	r3,r16,1020920 <__call_exitprocs+0x150>
 10208cc:	10000215 	stw	zero,8(r2)
 10208d0:	303fe726 	beq	r6,zero,1020870 <__call_exitprocs+0xa0>
 10208d4:	00c00044 	movi	r3,1
 10208d8:	1c06983a 	sll	r3,r3,r16
 10208dc:	90804017 	ldw	r2,256(r18)
 10208e0:	8cc00117 	ldw	r19,4(r17)
 10208e4:	1884703a 	and	r2,r3,r2
 10208e8:	10001426 	beq	r2,zero,102093c <__call_exitprocs+0x16c>
 10208ec:	90804117 	ldw	r2,260(r18)
 10208f0:	1884703a 	and	r2,r3,r2
 10208f4:	10000c1e 	bne	r2,zero,1020928 <__call_exitprocs+0x158>
 10208f8:	2105883a 	add	r2,r4,r4
 10208fc:	1485883a 	add	r2,r2,r18
 1020900:	11400017 	ldw	r5,0(r2)
 1020904:	e009883a 	mov	r4,fp
 1020908:	303ee83a 	callr	r6
 102090c:	88800117 	ldw	r2,4(r17)
 1020910:	98bfc81e 	bne	r19,r2,1020834 <__call_exitprocs+0x64>
 1020914:	b8800017 	ldw	r2,0(r23)
 1020918:	147fd526 	beq	r2,r17,1020870 <__call_exitprocs+0xa0>
 102091c:	003fc506 	br	1020834 <__call_exitprocs+0x64>
 1020920:	8c000115 	stw	r16,4(r17)
 1020924:	003fea06 	br	10208d0 <__call_exitprocs+0x100>
 1020928:	2105883a 	add	r2,r4,r4
 102092c:	1485883a 	add	r2,r2,r18
 1020930:	11000017 	ldw	r4,0(r2)
 1020934:	303ee83a 	callr	r6
 1020938:	003ff406 	br	102090c <__call_exitprocs+0x13c>
 102093c:	303ee83a 	callr	r6
 1020940:	003ff206 	br	102090c <__call_exitprocs+0x13c>
 1020944:	88800117 	ldw	r2,4(r17)
 1020948:	1000081e 	bne	r2,zero,102096c <__call_exitprocs+0x19c>
 102094c:	89000017 	ldw	r4,0(r17)
 1020950:	20000726 	beq	r4,zero,1020970 <__call_exitprocs+0x1a0>
 1020954:	b9000015 	stw	r4,0(r23)
 1020958:	8809883a 	mov	r4,r17
 102095c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 1020960:	bc400017 	ldw	r17,0(r23)
 1020964:	883fb71e 	bne	r17,zero,1020844 <__call_exitprocs+0x74>
 1020968:	003fc506 	br	1020880 <__call_exitprocs+0xb0>
 102096c:	89000017 	ldw	r4,0(r17)
 1020970:	882f883a 	mov	r23,r17
 1020974:	2023883a 	mov	r17,r4
 1020978:	883fb21e 	bne	r17,zero,1020844 <__call_exitprocs+0x74>
 102097c:	003fc006 	br	1020880 <__call_exitprocs+0xb0>

01020980 <abort>:
 1020980:	deffff04 	addi	sp,sp,-4
 1020984:	01000184 	movi	r4,6
 1020988:	dfc00015 	stw	ra,0(sp)
 102098c:	1020a640 	call	1020a64 <raise>
 1020990:	01000044 	movi	r4,1
 1020994:	1021e480 	call	1021e48 <_exit>

01020998 <_raise_r>:
 1020998:	defffd04 	addi	sp,sp,-12
 102099c:	008007c4 	movi	r2,31
 10209a0:	dc400115 	stw	r17,4(sp)
 10209a4:	dc000015 	stw	r16,0(sp)
 10209a8:	dfc00215 	stw	ra,8(sp)
 10209ac:	2821883a 	mov	r16,r5
 10209b0:	2023883a 	mov	r17,r4
 10209b4:	11402736 	bltu	r2,r5,1020a54 <_raise_r+0xbc>
 10209b8:	20c0b717 	ldw	r3,732(r4)
 10209bc:	18001326 	beq	r3,zero,1020a0c <_raise_r+0x74>
 10209c0:	2945883a 	add	r2,r5,r5
 10209c4:	1085883a 	add	r2,r2,r2
 10209c8:	188b883a 	add	r5,r3,r2
 10209cc:	28c00017 	ldw	r3,0(r5)
 10209d0:	18000e26 	beq	r3,zero,1020a0c <_raise_r+0x74>
 10209d4:	01000044 	movi	r4,1
 10209d8:	19000526 	beq	r3,r4,10209f0 <_raise_r+0x58>
 10209dc:	00bfffc4 	movi	r2,-1
 10209e0:	18801326 	beq	r3,r2,1020a30 <_raise_r+0x98>
 10209e4:	28000015 	stw	zero,0(r5)
 10209e8:	8009883a 	mov	r4,r16
 10209ec:	183ee83a 	callr	r3
 10209f0:	0007883a 	mov	r3,zero
 10209f4:	1805883a 	mov	r2,r3
 10209f8:	dfc00217 	ldw	ra,8(sp)
 10209fc:	dc400117 	ldw	r17,4(sp)
 1020a00:	dc000017 	ldw	r16,0(sp)
 1020a04:	dec00304 	addi	sp,sp,12
 1020a08:	f800283a 	ret
 1020a0c:	1020c700 	call	1020c70 <_getpid_r>
 1020a10:	100b883a 	mov	r5,r2
 1020a14:	8809883a 	mov	r4,r17
 1020a18:	800d883a 	mov	r6,r16
 1020a1c:	dfc00217 	ldw	ra,8(sp)
 1020a20:	dc400117 	ldw	r17,4(sp)
 1020a24:	dc000017 	ldw	r16,0(sp)
 1020a28:	dec00304 	addi	sp,sp,12
 1020a2c:	1020c741 	jmpi	1020c74 <_kill_r>
 1020a30:	2007883a 	mov	r3,r4
 1020a34:	00800584 	movi	r2,22
 1020a38:	88800015 	stw	r2,0(r17)
 1020a3c:	1805883a 	mov	r2,r3
 1020a40:	dfc00217 	ldw	ra,8(sp)
 1020a44:	dc400117 	ldw	r17,4(sp)
 1020a48:	dc000017 	ldw	r16,0(sp)
 1020a4c:	dec00304 	addi	sp,sp,12
 1020a50:	f800283a 	ret
 1020a54:	00800584 	movi	r2,22
 1020a58:	00ffffc4 	movi	r3,-1
 1020a5c:	20800015 	stw	r2,0(r4)
 1020a60:	003fe406 	br	10209f4 <_raise_r+0x5c>

01020a64 <raise>:
 1020a64:	008040f4 	movhi	r2,259
 1020a68:	10a67004 	addi	r2,r2,-26176
 1020a6c:	200b883a 	mov	r5,r4
 1020a70:	11000017 	ldw	r4,0(r2)
 1020a74:	10209981 	jmpi	1020998 <_raise_r>

01020a78 <_init_signal_r>:
 1020a78:	2080b717 	ldw	r2,732(r4)
 1020a7c:	defffe04 	addi	sp,sp,-8
 1020a80:	dc000015 	stw	r16,0(sp)
 1020a84:	dfc00115 	stw	ra,4(sp)
 1020a88:	2021883a 	mov	r16,r4
 1020a8c:	10000526 	beq	r2,zero,1020aa4 <_init_signal_r+0x2c>
 1020a90:	0005883a 	mov	r2,zero
 1020a94:	dfc00117 	ldw	ra,4(sp)
 1020a98:	dc000017 	ldw	r16,0(sp)
 1020a9c:	dec00204 	addi	sp,sp,8
 1020aa0:	f800283a 	ret
 1020aa4:	01402004 	movi	r5,128
 1020aa8:	10154d00 	call	10154d0 <_malloc_r>
 1020aac:	1009883a 	mov	r4,r2
 1020ab0:	8080b715 	stw	r2,732(r16)
 1020ab4:	10000726 	beq	r2,zero,1020ad4 <_init_signal_r+0x5c>
 1020ab8:	0007883a 	mov	r3,zero
 1020abc:	01402004 	movi	r5,128
 1020ac0:	20c5883a 	add	r2,r4,r3
 1020ac4:	18c00104 	addi	r3,r3,4
 1020ac8:	10000015 	stw	zero,0(r2)
 1020acc:	197ffc1e 	bne	r3,r5,1020ac0 <_init_signal_r+0x48>
 1020ad0:	003fef06 	br	1020a90 <_init_signal_r+0x18>
 1020ad4:	00bfffc4 	movi	r2,-1
 1020ad8:	003fee06 	br	1020a94 <_init_signal_r+0x1c>

01020adc <_init_signal>:
 1020adc:	008040f4 	movhi	r2,259
 1020ae0:	10a67004 	addi	r2,r2,-26176
 1020ae4:	11000017 	ldw	r4,0(r2)
 1020ae8:	1020a781 	jmpi	1020a78 <_init_signal_r>

01020aec <__sigtramp_r>:
 1020aec:	defffd04 	addi	sp,sp,-12
 1020af0:	008007c4 	movi	r2,31
 1020af4:	dc000115 	stw	r16,4(sp)
 1020af8:	dfc00215 	stw	ra,8(sp)
 1020afc:	2021883a 	mov	r16,r4
 1020b00:	11401336 	bltu	r2,r5,1020b50 <__sigtramp_r+0x64>
 1020b04:	20c0b717 	ldw	r3,732(r4)
 1020b08:	18001f26 	beq	r3,zero,1020b88 <__sigtramp_r+0x9c>
 1020b0c:	2945883a 	add	r2,r5,r5
 1020b10:	1085883a 	add	r2,r2,r2
 1020b14:	10c9883a 	add	r4,r2,r3
 1020b18:	20c00017 	ldw	r3,0(r4)
 1020b1c:	18001626 	beq	r3,zero,1020b78 <__sigtramp_r+0x8c>
 1020b20:	00bfffc4 	movi	r2,-1
 1020b24:	18801626 	beq	r3,r2,1020b80 <__sigtramp_r+0x94>
 1020b28:	00800044 	movi	r2,1
 1020b2c:	18800d26 	beq	r3,r2,1020b64 <__sigtramp_r+0x78>
 1020b30:	20000015 	stw	zero,0(r4)
 1020b34:	2809883a 	mov	r4,r5
 1020b38:	183ee83a 	callr	r3
 1020b3c:	0005883a 	mov	r2,zero
 1020b40:	dfc00217 	ldw	ra,8(sp)
 1020b44:	dc000117 	ldw	r16,4(sp)
 1020b48:	dec00304 	addi	sp,sp,12
 1020b4c:	f800283a 	ret
 1020b50:	00bfffc4 	movi	r2,-1
 1020b54:	dfc00217 	ldw	ra,8(sp)
 1020b58:	dc000117 	ldw	r16,4(sp)
 1020b5c:	dec00304 	addi	sp,sp,12
 1020b60:	f800283a 	ret
 1020b64:	008000c4 	movi	r2,3
 1020b68:	dfc00217 	ldw	ra,8(sp)
 1020b6c:	dc000117 	ldw	r16,4(sp)
 1020b70:	dec00304 	addi	sp,sp,12
 1020b74:	f800283a 	ret
 1020b78:	00800044 	movi	r2,1
 1020b7c:	003ff006 	br	1020b40 <__sigtramp_r+0x54>
 1020b80:	00800084 	movi	r2,2
 1020b84:	003fee06 	br	1020b40 <__sigtramp_r+0x54>
 1020b88:	d9400015 	stw	r5,0(sp)
 1020b8c:	1020a780 	call	1020a78 <_init_signal_r>
 1020b90:	d9400017 	ldw	r5,0(sp)
 1020b94:	103fee1e 	bne	r2,zero,1020b50 <__sigtramp_r+0x64>
 1020b98:	80c0b717 	ldw	r3,732(r16)
 1020b9c:	003fdb06 	br	1020b0c <__sigtramp_r+0x20>

01020ba0 <__sigtramp>:
 1020ba0:	008040f4 	movhi	r2,259
 1020ba4:	10a67004 	addi	r2,r2,-26176
 1020ba8:	200b883a 	mov	r5,r4
 1020bac:	11000017 	ldw	r4,0(r2)
 1020bb0:	1020aec1 	jmpi	1020aec <__sigtramp_r>

01020bb4 <_signal_r>:
 1020bb4:	defffc04 	addi	sp,sp,-16
 1020bb8:	008007c4 	movi	r2,31
 1020bbc:	dc800215 	stw	r18,8(sp)
 1020bc0:	dc400115 	stw	r17,4(sp)
 1020bc4:	dc000015 	stw	r16,0(sp)
 1020bc8:	dfc00315 	stw	ra,12(sp)
 1020bcc:	2823883a 	mov	r17,r5
 1020bd0:	00ffffc4 	movi	r3,-1
 1020bd4:	3025883a 	mov	r18,r6
 1020bd8:	2021883a 	mov	r16,r4
 1020bdc:	1140092e 	bgeu	r2,r5,1020c04 <_signal_r+0x50>
 1020be0:	00800584 	movi	r2,22
 1020be4:	20800015 	stw	r2,0(r4)
 1020be8:	1805883a 	mov	r2,r3
 1020bec:	dfc00317 	ldw	ra,12(sp)
 1020bf0:	dc800217 	ldw	r18,8(sp)
 1020bf4:	dc400117 	ldw	r17,4(sp)
 1020bf8:	dc000017 	ldw	r16,0(sp)
 1020bfc:	dec00404 	addi	sp,sp,16
 1020c00:	f800283a 	ret
 1020c04:	2140b717 	ldw	r5,732(r4)
 1020c08:	28000c26 	beq	r5,zero,1020c3c <_signal_r+0x88>
 1020c0c:	8c45883a 	add	r2,r17,r17
 1020c10:	1085883a 	add	r2,r2,r2
 1020c14:	1145883a 	add	r2,r2,r5
 1020c18:	10c00017 	ldw	r3,0(r2)
 1020c1c:	14800015 	stw	r18,0(r2)
 1020c20:	1805883a 	mov	r2,r3
 1020c24:	dfc00317 	ldw	ra,12(sp)
 1020c28:	dc800217 	ldw	r18,8(sp)
 1020c2c:	dc400117 	ldw	r17,4(sp)
 1020c30:	dc000017 	ldw	r16,0(sp)
 1020c34:	dec00404 	addi	sp,sp,16
 1020c38:	f800283a 	ret
 1020c3c:	1020a780 	call	1020a78 <_init_signal_r>
 1020c40:	1000021e 	bne	r2,zero,1020c4c <_signal_r+0x98>
 1020c44:	8140b717 	ldw	r5,732(r16)
 1020c48:	003ff006 	br	1020c0c <_signal_r+0x58>
 1020c4c:	00ffffc4 	movi	r3,-1
 1020c50:	003fe506 	br	1020be8 <_signal_r+0x34>

01020c54 <signal>:
 1020c54:	018040f4 	movhi	r6,259
 1020c58:	31a67004 	addi	r6,r6,-26176
 1020c5c:	2007883a 	mov	r3,r4
 1020c60:	31000017 	ldw	r4,0(r6)
 1020c64:	280d883a 	mov	r6,r5
 1020c68:	180b883a 	mov	r5,r3
 1020c6c:	1020bb41 	jmpi	1020bb4 <_signal_r>

01020c70 <_getpid_r>:
 1020c70:	1021e681 	jmpi	1021e68 <getpid>

01020c74 <_kill_r>:
 1020c74:	defffd04 	addi	sp,sp,-12
 1020c78:	dc000015 	stw	r16,0(sp)
 1020c7c:	040040f4 	movhi	r16,259
 1020c80:	842d7c04 	addi	r16,r16,-18960
 1020c84:	dc400115 	stw	r17,4(sp)
 1020c88:	80000015 	stw	zero,0(r16)
 1020c8c:	2023883a 	mov	r17,r4
 1020c90:	2809883a 	mov	r4,r5
 1020c94:	300b883a 	mov	r5,r6
 1020c98:	dfc00215 	stw	ra,8(sp)
 1020c9c:	1021e880 	call	1021e88 <kill>
 1020ca0:	1007883a 	mov	r3,r2
 1020ca4:	00bfffc4 	movi	r2,-1
 1020ca8:	18800626 	beq	r3,r2,1020cc4 <_kill_r+0x50>
 1020cac:	1805883a 	mov	r2,r3
 1020cb0:	dfc00217 	ldw	ra,8(sp)
 1020cb4:	dc400117 	ldw	r17,4(sp)
 1020cb8:	dc000017 	ldw	r16,0(sp)
 1020cbc:	dec00304 	addi	sp,sp,12
 1020cc0:	f800283a 	ret
 1020cc4:	80800017 	ldw	r2,0(r16)
 1020cc8:	103ff826 	beq	r2,zero,1020cac <_kill_r+0x38>
 1020ccc:	88800015 	stw	r2,0(r17)
 1020cd0:	1805883a 	mov	r2,r3
 1020cd4:	dfc00217 	ldw	ra,8(sp)
 1020cd8:	dc400117 	ldw	r17,4(sp)
 1020cdc:	dc000017 	ldw	r16,0(sp)
 1020ce0:	dec00304 	addi	sp,sp,12
 1020ce4:	f800283a 	ret

01020ce8 <__sprint_r>:
 1020ce8:	30800217 	ldw	r2,8(r6)
 1020cec:	defffe04 	addi	sp,sp,-8
 1020cf0:	dc000015 	stw	r16,0(sp)
 1020cf4:	dfc00115 	stw	ra,4(sp)
 1020cf8:	3021883a 	mov	r16,r6
 1020cfc:	0007883a 	mov	r3,zero
 1020d00:	1000061e 	bne	r2,zero,1020d1c <__sprint_r+0x34>
 1020d04:	1805883a 	mov	r2,r3
 1020d08:	30000115 	stw	zero,4(r6)
 1020d0c:	dfc00117 	ldw	ra,4(sp)
 1020d10:	dc000017 	ldw	r16,0(sp)
 1020d14:	dec00204 	addi	sp,sp,8
 1020d18:	f800283a 	ret
 1020d1c:	10140c80 	call	10140c8 <__sfvwrite_r>
 1020d20:	1007883a 	mov	r3,r2
 1020d24:	1805883a 	mov	r2,r3
 1020d28:	80000115 	stw	zero,4(r16)
 1020d2c:	80000215 	stw	zero,8(r16)
 1020d30:	dfc00117 	ldw	ra,4(sp)
 1020d34:	dc000017 	ldw	r16,0(sp)
 1020d38:	dec00204 	addi	sp,sp,8
 1020d3c:	f800283a 	ret

01020d40 <___vfiprintf_internal_r>:
 1020d40:	defeb604 	addi	sp,sp,-1320
 1020d44:	dd814615 	stw	r22,1304(sp)
 1020d48:	dd414515 	stw	r21,1300(sp)
 1020d4c:	dc014015 	stw	r16,1280(sp)
 1020d50:	dfc14915 	stw	ra,1316(sp)
 1020d54:	df014815 	stw	fp,1312(sp)
 1020d58:	ddc14715 	stw	r23,1308(sp)
 1020d5c:	dd014415 	stw	r20,1296(sp)
 1020d60:	dcc14315 	stw	r19,1292(sp)
 1020d64:	dc814215 	stw	r18,1288(sp)
 1020d68:	dc414115 	stw	r17,1284(sp)
 1020d6c:	202d883a 	mov	r22,r4
 1020d70:	282b883a 	mov	r21,r5
 1020d74:	3021883a 	mov	r16,r6
 1020d78:	20000226 	beq	r4,zero,1020d84 <___vfiprintf_internal_r+0x44>
 1020d7c:	20800e17 	ldw	r2,56(r4)
 1020d80:	1001bc26 	beq	r2,zero,1021474 <___vfiprintf_internal_r+0x734>
 1020d84:	a880030b 	ldhu	r2,12(r21)
 1020d88:	1080020c 	andi	r2,r2,8
 1020d8c:	1001cb26 	beq	r2,zero,10214bc <___vfiprintf_internal_r+0x77c>
 1020d90:	a8800417 	ldw	r2,16(r21)
 1020d94:	1001c926 	beq	r2,zero,10214bc <___vfiprintf_internal_r+0x77c>
 1020d98:	aa00030b 	ldhu	r8,12(r21)
 1020d9c:	00800284 	movi	r2,10
 1020da0:	40c0068c 	andi	r3,r8,26
 1020da4:	18802f1e 	bne	r3,r2,1020e64 <___vfiprintf_internal_r+0x124>
 1020da8:	a880038f 	ldh	r2,14(r21)
 1020dac:	10002d16 	blt	r2,zero,1020e64 <___vfiprintf_internal_r+0x124>
 1020db0:	aa40038b 	ldhu	r9,14(r21)
 1020db4:	aa800717 	ldw	r10,28(r21)
 1020db8:	aac00917 	ldw	r11,36(r21)
 1020dbc:	dc401e04 	addi	r17,sp,120
 1020dc0:	d8803504 	addi	r2,sp,212
 1020dc4:	00c10004 	movi	r3,1024
 1020dc8:	423fff4c 	andi	r8,r8,65533
 1020dcc:	800d883a 	mov	r6,r16
 1020dd0:	b009883a 	mov	r4,r22
 1020dd4:	880b883a 	mov	r5,r17
 1020dd8:	da00210d 	sth	r8,132(sp)
 1020ddc:	da40218d 	sth	r9,134(sp)
 1020de0:	da802515 	stw	r10,148(sp)
 1020de4:	dac02715 	stw	r11,156(sp)
 1020de8:	d8802215 	stw	r2,136(sp)
 1020dec:	d8c02315 	stw	r3,140(sp)
 1020df0:	d8801e15 	stw	r2,120(sp)
 1020df4:	d8c02015 	stw	r3,128(sp)
 1020df8:	d8002415 	stw	zero,144(sp)
 1020dfc:	1020d400 	call	1020d40 <___vfiprintf_internal_r>
 1020e00:	d8813a15 	stw	r2,1256(sp)
 1020e04:	10000416 	blt	r2,zero,1020e18 <___vfiprintf_internal_r+0xd8>
 1020e08:	b009883a 	mov	r4,r22
 1020e0c:	880b883a 	mov	r5,r17
 1020e10:	10137980 	call	1013798 <_fflush_r>
 1020e14:	1001b01e 	bne	r2,zero,10214d8 <___vfiprintf_internal_r+0x798>
 1020e18:	d880210b 	ldhu	r2,132(sp)
 1020e1c:	1080100c 	andi	r2,r2,64
 1020e20:	10000326 	beq	r2,zero,1020e30 <___vfiprintf_internal_r+0xf0>
 1020e24:	a880030b 	ldhu	r2,12(r21)
 1020e28:	10801014 	ori	r2,r2,64
 1020e2c:	a880030d 	sth	r2,12(r21)
 1020e30:	d8813a17 	ldw	r2,1256(sp)
 1020e34:	dfc14917 	ldw	ra,1316(sp)
 1020e38:	df014817 	ldw	fp,1312(sp)
 1020e3c:	ddc14717 	ldw	r23,1308(sp)
 1020e40:	dd814617 	ldw	r22,1304(sp)
 1020e44:	dd414517 	ldw	r21,1300(sp)
 1020e48:	dd014417 	ldw	r20,1296(sp)
 1020e4c:	dcc14317 	ldw	r19,1292(sp)
 1020e50:	dc814217 	ldw	r18,1288(sp)
 1020e54:	dc414117 	ldw	r17,1284(sp)
 1020e58:	dc014017 	ldw	r16,1280(sp)
 1020e5c:	dec14a04 	addi	sp,sp,1320
 1020e60:	f800283a 	ret
 1020e64:	d8c00e04 	addi	r3,sp,56
 1020e68:	8029883a 	mov	r20,r16
 1020e6c:	d8c00115 	stw	r3,4(sp)
 1020e70:	d8000315 	stw	zero,12(sp)
 1020e74:	d8000215 	stw	zero,8(sp)
 1020e78:	1825883a 	mov	r18,r3
 1020e7c:	d8013a15 	stw	zero,1256(sp)
 1020e80:	d8013615 	stw	zero,1240(sp)
 1020e84:	a0800007 	ldb	r2,0(r20)
 1020e88:	10001926 	beq	r2,zero,1020ef0 <___vfiprintf_internal_r+0x1b0>
 1020e8c:	00c00944 	movi	r3,37
 1020e90:	10c01726 	beq	r2,r3,1020ef0 <___vfiprintf_internal_r+0x1b0>
 1020e94:	a021883a 	mov	r16,r20
 1020e98:	00000106 	br	1020ea0 <___vfiprintf_internal_r+0x160>
 1020e9c:	10c00326 	beq	r2,r3,1020eac <___vfiprintf_internal_r+0x16c>
 1020ea0:	84000044 	addi	r16,r16,1
 1020ea4:	80800007 	ldb	r2,0(r16)
 1020ea8:	103ffc1e 	bne	r2,zero,1020e9c <___vfiprintf_internal_r+0x15c>
 1020eac:	8523c83a 	sub	r17,r16,r20
 1020eb0:	88000e26 	beq	r17,zero,1020eec <___vfiprintf_internal_r+0x1ac>
 1020eb4:	d9400317 	ldw	r5,12(sp)
 1020eb8:	d9000217 	ldw	r4,8(sp)
 1020ebc:	008001c4 	movi	r2,7
 1020ec0:	2c4b883a 	add	r5,r5,r17
 1020ec4:	21000044 	addi	r4,r4,1
 1020ec8:	95000015 	stw	r20,0(r18)
 1020ecc:	d9400315 	stw	r5,12(sp)
 1020ed0:	94400115 	stw	r17,4(r18)
 1020ed4:	d9000215 	stw	r4,8(sp)
 1020ed8:	1101e816 	blt	r2,r4,102167c <___vfiprintf_internal_r+0x93c>
 1020edc:	94800204 	addi	r18,r18,8
 1020ee0:	d9013a17 	ldw	r4,1256(sp)
 1020ee4:	2449883a 	add	r4,r4,r17
 1020ee8:	d9013a15 	stw	r4,1256(sp)
 1020eec:	8029883a 	mov	r20,r16
 1020ef0:	a0800007 	ldb	r2,0(r20)
 1020ef4:	10012e26 	beq	r2,zero,10213b0 <___vfiprintf_internal_r+0x670>
 1020ef8:	a5000044 	addi	r20,r20,1
 1020efc:	d8000005 	stb	zero,0(sp)
 1020f00:	a0c00007 	ldb	r3,0(r20)
 1020f04:	05ffffc4 	movi	r23,-1
 1020f08:	d8013915 	stw	zero,1252(sp)
 1020f0c:	d8013b15 	stw	zero,1260(sp)
 1020f10:	180b883a 	mov	r5,r3
 1020f14:	a5000044 	addi	r20,r20,1
 1020f18:	28fff804 	addi	r3,r5,-32
 1020f1c:	00801604 	movi	r2,88
 1020f20:	10c06036 	bltu	r2,r3,10210a4 <___vfiprintf_internal_r+0x364>
 1020f24:	18c5883a 	add	r2,r3,r3
 1020f28:	1085883a 	add	r2,r2,r2
 1020f2c:	00c040b4 	movhi	r3,258
 1020f30:	18c3d004 	addi	r3,r3,3904
 1020f34:	10c5883a 	add	r2,r2,r3
 1020f38:	11000017 	ldw	r4,0(r2)
 1020f3c:	2000683a 	jmp	r4
 1020f40:	010217a8 	cmpgeui	r4,zero,2142
 1020f44:	010210a4 	muli	r4,zero,2114
 1020f48:	010210a4 	muli	r4,zero,2114
 1020f4c:	01021850 	cmplti	r4,zero,2145
 1020f50:	010210a4 	muli	r4,zero,2114
 1020f54:	010210a4 	muli	r4,zero,2114
 1020f58:	010210a4 	muli	r4,zero,2114
 1020f5c:	010210a4 	muli	r4,zero,2114
 1020f60:	010210a4 	muli	r4,zero,2114
 1020f64:	010210a4 	muli	r4,zero,2114
 1020f68:	01021730 	cmpltui	r4,zero,2140
 1020f6c:	01021864 	muli	r4,zero,2145
 1020f70:	010210a4 	muli	r4,zero,2114
 1020f74:	01021748 	cmpgei	r4,zero,2141
 1020f78:	01021800 	call	102180 <__alt_mem_onchip_memory2_0+0x102180>
 1020f7c:	010210a4 	muli	r4,zero,2114
 1020f80:	010217ec 	andhi	r4,zero,2143
 1020f84:	010217c0 	call	10217c <__alt_mem_onchip_memory2_0+0x10217c>
 1020f88:	010217c0 	call	10217c <__alt_mem_onchip_memory2_0+0x10217c>
 1020f8c:	010217c0 	call	10217c <__alt_mem_onchip_memory2_0+0x10217c>
 1020f90:	010217c0 	call	10217c <__alt_mem_onchip_memory2_0+0x10217c>
 1020f94:	010217c0 	call	10217c <__alt_mem_onchip_memory2_0+0x10217c>
 1020f98:	010217c0 	call	10217c <__alt_mem_onchip_memory2_0+0x10217c>
 1020f9c:	010217c0 	call	10217c <__alt_mem_onchip_memory2_0+0x10217c>
 1020fa0:	010217c0 	call	10217c <__alt_mem_onchip_memory2_0+0x10217c>
 1020fa4:	010217c0 	call	10217c <__alt_mem_onchip_memory2_0+0x10217c>
 1020fa8:	010210a4 	muli	r4,zero,2114
 1020fac:	010210a4 	muli	r4,zero,2114
 1020fb0:	010210a4 	muli	r4,zero,2114
 1020fb4:	010210a4 	muli	r4,zero,2114
 1020fb8:	010210a4 	muli	r4,zero,2114
 1020fbc:	010210a4 	muli	r4,zero,2114
 1020fc0:	010210a4 	muli	r4,zero,2114
 1020fc4:	010210a4 	muli	r4,zero,2114
 1020fc8:	010210a4 	muli	r4,zero,2114
 1020fcc:	010210a4 	muli	r4,zero,2114
 1020fd0:	0102150c 	andi	r4,zero,2132
 1020fd4:	010210a4 	muli	r4,zero,2114
 1020fd8:	010210a4 	muli	r4,zero,2114
 1020fdc:	010210a4 	muli	r4,zero,2114
 1020fe0:	010210a4 	muli	r4,zero,2114
 1020fe4:	010210a4 	muli	r4,zero,2114
 1020fe8:	010210a4 	muli	r4,zero,2114
 1020fec:	010210a4 	muli	r4,zero,2114
 1020ff0:	010210a4 	muli	r4,zero,2114
 1020ff4:	010210a4 	muli	r4,zero,2114
 1020ff8:	010210a4 	muli	r4,zero,2114
 1020ffc:	010215c0 	call	10215c <__alt_mem_onchip_memory2_0+0x10215c>
 1021000:	010210a4 	muli	r4,zero,2114
 1021004:	010210a4 	muli	r4,zero,2114
 1021008:	010210a4 	muli	r4,zero,2114
 102100c:	010210a4 	muli	r4,zero,2114
 1021010:	010210a4 	muli	r4,zero,2114
 1021014:	0102160c 	andi	r4,zero,2136
 1021018:	010210a4 	muli	r4,zero,2114
 102101c:	010210a4 	muli	r4,zero,2114
 1021020:	010218fc 	xorhi	r4,zero,2147
 1021024:	010210a4 	muli	r4,zero,2114
 1021028:	010210a4 	muli	r4,zero,2114
 102102c:	010210a4 	muli	r4,zero,2114
 1021030:	010210a4 	muli	r4,zero,2114
 1021034:	010210a4 	muli	r4,zero,2114
 1021038:	010210a4 	muli	r4,zero,2114
 102103c:	010210a4 	muli	r4,zero,2114
 1021040:	010210a4 	muli	r4,zero,2114
 1021044:	010210a4 	muli	r4,zero,2114
 1021048:	010210a4 	muli	r4,zero,2114
 102104c:	010218d4 	movui	r4,2147
 1021050:	01021518 	cmpnei	r4,zero,2132
 1021054:	010210a4 	muli	r4,zero,2114
 1021058:	010210a4 	muli	r4,zero,2114
 102105c:	010210a4 	muli	r4,zero,2114
 1021060:	010219e0 	cmpeqi	r4,zero,2151
 1021064:	01021518 	cmpnei	r4,zero,2132
 1021068:	010210a4 	muli	r4,zero,2114
 102106c:	010210a4 	muli	r4,zero,2114
 1021070:	01021934 	movhi	r4,2148
 1021074:	010210a4 	muli	r4,zero,2114
 1021078:	0102190c 	andi	r4,zero,2148
 102107c:	010215cc 	andi	r4,zero,2135
 1021080:	0102199c 	xori	r4,zero,2150
 1021084:	010219f4 	movhi	r4,2151
 1021088:	010210a4 	muli	r4,zero,2114
 102108c:	01021950 	cmplti	r4,zero,2149
 1021090:	010210a4 	muli	r4,zero,2114
 1021094:	01021618 	cmpnei	r4,zero,2136
 1021098:	010210a4 	muli	r4,zero,2114
 102109c:	010210a4 	muli	r4,zero,2114
 10210a0:	01021874 	movhi	r4,2145
 10210a4:	2800c226 	beq	r5,zero,10213b0 <___vfiprintf_internal_r+0x670>
 10210a8:	07000044 	movi	fp,1
 10210ac:	d9000404 	addi	r4,sp,16
 10210b0:	d9c13515 	stw	r7,1236(sp)
 10210b4:	d9013c15 	stw	r4,1264(sp)
 10210b8:	df013715 	stw	fp,1244(sp)
 10210bc:	d9400405 	stb	r5,16(sp)
 10210c0:	d8000005 	stb	zero,0(sp)
 10210c4:	d8013815 	stw	zero,1248(sp)
 10210c8:	d9813b17 	ldw	r6,1260(sp)
 10210cc:	3080008c 	andi	r2,r6,2
 10210d0:	1005003a 	cmpeq	r2,r2,zero
 10210d4:	d8813e15 	stw	r2,1272(sp)
 10210d8:	1000011e 	bne	r2,zero,10210e0 <___vfiprintf_internal_r+0x3a0>
 10210dc:	e7000084 	addi	fp,fp,2
 10210e0:	d8813b17 	ldw	r2,1260(sp)
 10210e4:	1080210c 	andi	r2,r2,132
 10210e8:	d8813d15 	stw	r2,1268(sp)
 10210ec:	10002a1e 	bne	r2,zero,1021198 <___vfiprintf_internal_r+0x458>
 10210f0:	d8c13917 	ldw	r3,1252(sp)
 10210f4:	1f21c83a 	sub	r16,r3,fp
 10210f8:	0400270e 	bge	zero,r16,1021198 <___vfiprintf_internal_r+0x458>
 10210fc:	00800404 	movi	r2,16
 1021100:	1402c80e 	bge	r2,r16,1021c24 <___vfiprintf_internal_r+0xee4>
 1021104:	d9400317 	ldw	r5,12(sp)
 1021108:	d9000217 	ldw	r4,8(sp)
 102110c:	1023883a 	mov	r17,r2
 1021110:	05c040b4 	movhi	r23,258
 1021114:	bddfa804 	addi	r23,r23,32416
 1021118:	04c001c4 	movi	r19,7
 102111c:	00000306 	br	102112c <___vfiprintf_internal_r+0x3ec>
 1021120:	843ffc04 	addi	r16,r16,-16
 1021124:	94800204 	addi	r18,r18,8
 1021128:	8c00110e 	bge	r17,r16,1021170 <___vfiprintf_internal_r+0x430>
 102112c:	29400404 	addi	r5,r5,16
 1021130:	21000044 	addi	r4,r4,1
 1021134:	95c00015 	stw	r23,0(r18)
 1021138:	94400115 	stw	r17,4(r18)
 102113c:	d9400315 	stw	r5,12(sp)
 1021140:	d9000215 	stw	r4,8(sp)
 1021144:	993ff60e 	bge	r19,r4,1021120 <___vfiprintf_internal_r+0x3e0>
 1021148:	b009883a 	mov	r4,r22
 102114c:	a80b883a 	mov	r5,r21
 1021150:	d9800104 	addi	r6,sp,4
 1021154:	1020ce80 	call	1020ce8 <__sprint_r>
 1021158:	1000981e 	bne	r2,zero,10213bc <___vfiprintf_internal_r+0x67c>
 102115c:	843ffc04 	addi	r16,r16,-16
 1021160:	d9400317 	ldw	r5,12(sp)
 1021164:	d9000217 	ldw	r4,8(sp)
 1021168:	dc800e04 	addi	r18,sp,56
 102116c:	8c3fef16 	blt	r17,r16,102112c <___vfiprintf_internal_r+0x3ec>
 1021170:	2c0b883a 	add	r5,r5,r16
 1021174:	21000044 	addi	r4,r4,1
 1021178:	008001c4 	movi	r2,7
 102117c:	95c00015 	stw	r23,0(r18)
 1021180:	94000115 	stw	r16,4(r18)
 1021184:	d9400315 	stw	r5,12(sp)
 1021188:	d9000215 	stw	r4,8(sp)
 102118c:	11015616 	blt	r2,r4,10216e8 <___vfiprintf_internal_r+0x9a8>
 1021190:	94800204 	addi	r18,r18,8
 1021194:	00000206 	br	10211a0 <___vfiprintf_internal_r+0x460>
 1021198:	d9400317 	ldw	r5,12(sp)
 102119c:	d9000217 	ldw	r4,8(sp)
 10211a0:	d8800007 	ldb	r2,0(sp)
 10211a4:	10000a26 	beq	r2,zero,10211d0 <___vfiprintf_internal_r+0x490>
 10211a8:	00800044 	movi	r2,1
 10211ac:	29400044 	addi	r5,r5,1
 10211b0:	21000044 	addi	r4,r4,1
 10211b4:	90800115 	stw	r2,4(r18)
 10211b8:	008001c4 	movi	r2,7
 10211bc:	96c00015 	stw	sp,0(r18)
 10211c0:	d9400315 	stw	r5,12(sp)
 10211c4:	d9000215 	stw	r4,8(sp)
 10211c8:	11013516 	blt	r2,r4,10216a0 <___vfiprintf_internal_r+0x960>
 10211cc:	94800204 	addi	r18,r18,8
 10211d0:	d9813e17 	ldw	r6,1272(sp)
 10211d4:	30000b1e 	bne	r6,zero,1021204 <___vfiprintf_internal_r+0x4c4>
 10211d8:	d8800044 	addi	r2,sp,1
 10211dc:	29400084 	addi	r5,r5,2
 10211e0:	21000044 	addi	r4,r4,1
 10211e4:	90800015 	stw	r2,0(r18)
 10211e8:	00c00084 	movi	r3,2
 10211ec:	008001c4 	movi	r2,7
 10211f0:	90c00115 	stw	r3,4(r18)
 10211f4:	d9400315 	stw	r5,12(sp)
 10211f8:	d9000215 	stw	r4,8(sp)
 10211fc:	11013116 	blt	r2,r4,10216c4 <___vfiprintf_internal_r+0x984>
 1021200:	94800204 	addi	r18,r18,8
 1021204:	d8c13d17 	ldw	r3,1268(sp)
 1021208:	00802004 	movi	r2,128
 102120c:	18807126 	beq	r3,r2,10213d4 <___vfiprintf_internal_r+0x694>
 1021210:	d8813817 	ldw	r2,1248(sp)
 1021214:	d8c13717 	ldw	r3,1244(sp)
 1021218:	10e1c83a 	sub	r16,r2,r3
 102121c:	0400240e 	bge	zero,r16,10212b0 <___vfiprintf_internal_r+0x570>
 1021220:	00800404 	movi	r2,16
 1021224:	1402510e 	bge	r2,r16,1021b6c <___vfiprintf_internal_r+0xe2c>
 1021228:	1023883a 	mov	r17,r2
 102122c:	05c040b4 	movhi	r23,258
 1021230:	bddfa404 	addi	r23,r23,32400
 1021234:	04c001c4 	movi	r19,7
 1021238:	00000306 	br	1021248 <___vfiprintf_internal_r+0x508>
 102123c:	843ffc04 	addi	r16,r16,-16
 1021240:	94800204 	addi	r18,r18,8
 1021244:	8c00110e 	bge	r17,r16,102128c <___vfiprintf_internal_r+0x54c>
 1021248:	29400404 	addi	r5,r5,16
 102124c:	21000044 	addi	r4,r4,1
 1021250:	95c00015 	stw	r23,0(r18)
 1021254:	94400115 	stw	r17,4(r18)
 1021258:	d9400315 	stw	r5,12(sp)
 102125c:	d9000215 	stw	r4,8(sp)
 1021260:	993ff60e 	bge	r19,r4,102123c <___vfiprintf_internal_r+0x4fc>
 1021264:	b009883a 	mov	r4,r22
 1021268:	a80b883a 	mov	r5,r21
 102126c:	d9800104 	addi	r6,sp,4
 1021270:	1020ce80 	call	1020ce8 <__sprint_r>
 1021274:	1000511e 	bne	r2,zero,10213bc <___vfiprintf_internal_r+0x67c>
 1021278:	843ffc04 	addi	r16,r16,-16
 102127c:	d9400317 	ldw	r5,12(sp)
 1021280:	d9000217 	ldw	r4,8(sp)
 1021284:	dc800e04 	addi	r18,sp,56
 1021288:	8c3fef16 	blt	r17,r16,1021248 <___vfiprintf_internal_r+0x508>
 102128c:	2c0b883a 	add	r5,r5,r16
 1021290:	21000044 	addi	r4,r4,1
 1021294:	008001c4 	movi	r2,7
 1021298:	95c00015 	stw	r23,0(r18)
 102129c:	94000115 	stw	r16,4(r18)
 10212a0:	d9400315 	stw	r5,12(sp)
 10212a4:	d9000215 	stw	r4,8(sp)
 10212a8:	1100eb16 	blt	r2,r4,1021658 <___vfiprintf_internal_r+0x918>
 10212ac:	94800204 	addi	r18,r18,8
 10212b0:	d9813717 	ldw	r6,1244(sp)
 10212b4:	d8813c17 	ldw	r2,1264(sp)
 10212b8:	21000044 	addi	r4,r4,1
 10212bc:	298b883a 	add	r5,r5,r6
 10212c0:	90800015 	stw	r2,0(r18)
 10212c4:	008001c4 	movi	r2,7
 10212c8:	91800115 	stw	r6,4(r18)
 10212cc:	d9400315 	stw	r5,12(sp)
 10212d0:	d9000215 	stw	r4,8(sp)
 10212d4:	11006b16 	blt	r2,r4,1021484 <___vfiprintf_internal_r+0x744>
 10212d8:	90c00204 	addi	r3,r18,8
 10212dc:	d9013b17 	ldw	r4,1260(sp)
 10212e0:	2080010c 	andi	r2,r4,4
 10212e4:	10002726 	beq	r2,zero,1021384 <___vfiprintf_internal_r+0x644>
 10212e8:	d9813917 	ldw	r6,1252(sp)
 10212ec:	3721c83a 	sub	r16,r6,fp
 10212f0:	0400240e 	bge	zero,r16,1021384 <___vfiprintf_internal_r+0x644>
 10212f4:	00800404 	movi	r2,16
 10212f8:	1402720e 	bge	r2,r16,1021cc4 <___vfiprintf_internal_r+0xf84>
 10212fc:	d9000217 	ldw	r4,8(sp)
 1021300:	1023883a 	mov	r17,r2
 1021304:	05c040b4 	movhi	r23,258
 1021308:	bddfa804 	addi	r23,r23,32416
 102130c:	048001c4 	movi	r18,7
 1021310:	00000306 	br	1021320 <___vfiprintf_internal_r+0x5e0>
 1021314:	843ffc04 	addi	r16,r16,-16
 1021318:	18c00204 	addi	r3,r3,8
 102131c:	8c00110e 	bge	r17,r16,1021364 <___vfiprintf_internal_r+0x624>
 1021320:	29400404 	addi	r5,r5,16
 1021324:	21000044 	addi	r4,r4,1
 1021328:	1dc00015 	stw	r23,0(r3)
 102132c:	1c400115 	stw	r17,4(r3)
 1021330:	d9400315 	stw	r5,12(sp)
 1021334:	d9000215 	stw	r4,8(sp)
 1021338:	913ff60e 	bge	r18,r4,1021314 <___vfiprintf_internal_r+0x5d4>
 102133c:	b009883a 	mov	r4,r22
 1021340:	a80b883a 	mov	r5,r21
 1021344:	d9800104 	addi	r6,sp,4
 1021348:	1020ce80 	call	1020ce8 <__sprint_r>
 102134c:	10001b1e 	bne	r2,zero,10213bc <___vfiprintf_internal_r+0x67c>
 1021350:	843ffc04 	addi	r16,r16,-16
 1021354:	d9400317 	ldw	r5,12(sp)
 1021358:	d9000217 	ldw	r4,8(sp)
 102135c:	d8c00e04 	addi	r3,sp,56
 1021360:	8c3fef16 	blt	r17,r16,1021320 <___vfiprintf_internal_r+0x5e0>
 1021364:	2c0b883a 	add	r5,r5,r16
 1021368:	21000044 	addi	r4,r4,1
 102136c:	008001c4 	movi	r2,7
 1021370:	1dc00015 	stw	r23,0(r3)
 1021374:	1c000115 	stw	r16,4(r3)
 1021378:	d9400315 	stw	r5,12(sp)
 102137c:	d9000215 	stw	r4,8(sp)
 1021380:	11005b16 	blt	r2,r4,10214f0 <___vfiprintf_internal_r+0x7b0>
 1021384:	d8813917 	ldw	r2,1252(sp)
 1021388:	1700010e 	bge	r2,fp,1021390 <___vfiprintf_internal_r+0x650>
 102138c:	e005883a 	mov	r2,fp
 1021390:	d8c13a17 	ldw	r3,1256(sp)
 1021394:	1887883a 	add	r3,r3,r2
 1021398:	d8c13a15 	stw	r3,1256(sp)
 102139c:	2800411e 	bne	r5,zero,10214a4 <___vfiprintf_internal_r+0x764>
 10213a0:	d9c13517 	ldw	r7,1236(sp)
 10213a4:	dc800e04 	addi	r18,sp,56
 10213a8:	d8000215 	stw	zero,8(sp)
 10213ac:	003eb506 	br	1020e84 <___vfiprintf_internal_r+0x144>
 10213b0:	d8800317 	ldw	r2,12(sp)
 10213b4:	1002521e 	bne	r2,zero,1021d00 <___vfiprintf_internal_r+0xfc0>
 10213b8:	d8000215 	stw	zero,8(sp)
 10213bc:	a880030b 	ldhu	r2,12(r21)
 10213c0:	1080100c 	andi	r2,r2,64
 10213c4:	103e9a26 	beq	r2,zero,1020e30 <___vfiprintf_internal_r+0xf0>
 10213c8:	013fffc4 	movi	r4,-1
 10213cc:	d9013a15 	stw	r4,1256(sp)
 10213d0:	003e9706 	br	1020e30 <___vfiprintf_internal_r+0xf0>
 10213d4:	d9813917 	ldw	r6,1252(sp)
 10213d8:	3721c83a 	sub	r16,r6,fp
 10213dc:	043f8c0e 	bge	zero,r16,1021210 <___vfiprintf_internal_r+0x4d0>
 10213e0:	00800404 	movi	r2,16
 10213e4:	14024c0e 	bge	r2,r16,1021d18 <___vfiprintf_internal_r+0xfd8>
 10213e8:	1023883a 	mov	r17,r2
 10213ec:	05c040b4 	movhi	r23,258
 10213f0:	bddfa404 	addi	r23,r23,32400
 10213f4:	04c001c4 	movi	r19,7
 10213f8:	00000306 	br	1021408 <___vfiprintf_internal_r+0x6c8>
 10213fc:	843ffc04 	addi	r16,r16,-16
 1021400:	94800204 	addi	r18,r18,8
 1021404:	8c00110e 	bge	r17,r16,102144c <___vfiprintf_internal_r+0x70c>
 1021408:	29400404 	addi	r5,r5,16
 102140c:	21000044 	addi	r4,r4,1
 1021410:	95c00015 	stw	r23,0(r18)
 1021414:	94400115 	stw	r17,4(r18)
 1021418:	d9400315 	stw	r5,12(sp)
 102141c:	d9000215 	stw	r4,8(sp)
 1021420:	993ff60e 	bge	r19,r4,10213fc <___vfiprintf_internal_r+0x6bc>
 1021424:	b009883a 	mov	r4,r22
 1021428:	a80b883a 	mov	r5,r21
 102142c:	d9800104 	addi	r6,sp,4
 1021430:	1020ce80 	call	1020ce8 <__sprint_r>
 1021434:	103fe11e 	bne	r2,zero,10213bc <___vfiprintf_internal_r+0x67c>
 1021438:	843ffc04 	addi	r16,r16,-16
 102143c:	d9400317 	ldw	r5,12(sp)
 1021440:	d9000217 	ldw	r4,8(sp)
 1021444:	dc800e04 	addi	r18,sp,56
 1021448:	8c3fef16 	blt	r17,r16,1021408 <___vfiprintf_internal_r+0x6c8>
 102144c:	2c0b883a 	add	r5,r5,r16
 1021450:	21000044 	addi	r4,r4,1
 1021454:	008001c4 	movi	r2,7
 1021458:	95c00015 	stw	r23,0(r18)
 102145c:	94000115 	stw	r16,4(r18)
 1021460:	d9400315 	stw	r5,12(sp)
 1021464:	d9000215 	stw	r4,8(sp)
 1021468:	1100a816 	blt	r2,r4,102170c <___vfiprintf_internal_r+0x9cc>
 102146c:	94800204 	addi	r18,r18,8
 1021470:	003f6706 	br	1021210 <___vfiprintf_internal_r+0x4d0>
 1021474:	d9c13f15 	stw	r7,1276(sp)
 1021478:	1013a300 	call	1013a30 <__sinit>
 102147c:	d9c13f17 	ldw	r7,1276(sp)
 1021480:	003e4006 	br	1020d84 <___vfiprintf_internal_r+0x44>
 1021484:	b009883a 	mov	r4,r22
 1021488:	a80b883a 	mov	r5,r21
 102148c:	d9800104 	addi	r6,sp,4
 1021490:	1020ce80 	call	1020ce8 <__sprint_r>
 1021494:	103fc91e 	bne	r2,zero,10213bc <___vfiprintf_internal_r+0x67c>
 1021498:	d9400317 	ldw	r5,12(sp)
 102149c:	d8c00e04 	addi	r3,sp,56
 10214a0:	003f8e06 	br	10212dc <___vfiprintf_internal_r+0x59c>
 10214a4:	b009883a 	mov	r4,r22
 10214a8:	a80b883a 	mov	r5,r21
 10214ac:	d9800104 	addi	r6,sp,4
 10214b0:	1020ce80 	call	1020ce8 <__sprint_r>
 10214b4:	103fba26 	beq	r2,zero,10213a0 <___vfiprintf_internal_r+0x660>
 10214b8:	003fc006 	br	10213bc <___vfiprintf_internal_r+0x67c>
 10214bc:	b009883a 	mov	r4,r22
 10214c0:	a80b883a 	mov	r5,r21
 10214c4:	d9c13f15 	stw	r7,1276(sp)
 10214c8:	1011e900 	call	1011e90 <__swsetup_r>
 10214cc:	d9c13f17 	ldw	r7,1276(sp)
 10214d0:	103e3126 	beq	r2,zero,1020d98 <___vfiprintf_internal_r+0x58>
 10214d4:	003fbc06 	br	10213c8 <___vfiprintf_internal_r+0x688>
 10214d8:	00bfffc4 	movi	r2,-1
 10214dc:	d8813a15 	stw	r2,1256(sp)
 10214e0:	d880210b 	ldhu	r2,132(sp)
 10214e4:	1080100c 	andi	r2,r2,64
 10214e8:	103e4e1e 	bne	r2,zero,1020e24 <___vfiprintf_internal_r+0xe4>
 10214ec:	003e5006 	br	1020e30 <___vfiprintf_internal_r+0xf0>
 10214f0:	b009883a 	mov	r4,r22
 10214f4:	a80b883a 	mov	r5,r21
 10214f8:	d9800104 	addi	r6,sp,4
 10214fc:	1020ce80 	call	1020ce8 <__sprint_r>
 1021500:	103fae1e 	bne	r2,zero,10213bc <___vfiprintf_internal_r+0x67c>
 1021504:	d9400317 	ldw	r5,12(sp)
 1021508:	003f9e06 	br	1021384 <___vfiprintf_internal_r+0x644>
 102150c:	d8813b17 	ldw	r2,1260(sp)
 1021510:	10800414 	ori	r2,r2,16
 1021514:	d8813b15 	stw	r2,1260(sp)
 1021518:	d8c13b17 	ldw	r3,1260(sp)
 102151c:	1880080c 	andi	r2,r3,32
 1021520:	10009c1e 	bne	r2,zero,1021794 <___vfiprintf_internal_r+0xa54>
 1021524:	d9413b17 	ldw	r5,1260(sp)
 1021528:	2880040c 	andi	r2,r5,16
 102152c:	1001b21e 	bne	r2,zero,1021bf8 <___vfiprintf_internal_r+0xeb8>
 1021530:	d9813b17 	ldw	r6,1260(sp)
 1021534:	3080100c 	andi	r2,r6,64
 1021538:	1001af26 	beq	r2,zero,1021bf8 <___vfiprintf_internal_r+0xeb8>
 102153c:	3880000f 	ldh	r2,0(r7)
 1021540:	39c00104 	addi	r7,r7,4
 1021544:	d9c13515 	stw	r7,1236(sp)
 1021548:	1023d7fa 	srai	r17,r2,31
 102154c:	1021883a 	mov	r16,r2
 1021550:	8801e016 	blt	r17,zero,1021cd4 <___vfiprintf_internal_r+0xf94>
 1021554:	01000044 	movi	r4,1
 1021558:	b8000416 	blt	r23,zero,102156c <___vfiprintf_internal_r+0x82c>
 102155c:	d9413b17 	ldw	r5,1260(sp)
 1021560:	00bfdfc4 	movi	r2,-129
 1021564:	288a703a 	and	r5,r5,r2
 1021568:	d9413b15 	stw	r5,1260(sp)
 102156c:	8444b03a 	or	r2,r16,r17
 1021570:	1001271e 	bne	r2,zero,1021a10 <___vfiprintf_internal_r+0xcd0>
 1021574:	b801261e 	bne	r23,zero,1021a10 <___vfiprintf_internal_r+0xcd0>
 1021578:	20803fcc 	andi	r2,r4,255
 102157c:	10017e26 	beq	r2,zero,1021b78 <___vfiprintf_internal_r+0xe38>
 1021580:	d8c00e04 	addi	r3,sp,56
 1021584:	df000404 	addi	fp,sp,16
 1021588:	d8c13c15 	stw	r3,1264(sp)
 102158c:	d8c13c17 	ldw	r3,1264(sp)
 1021590:	ddc13815 	stw	r23,1248(sp)
 1021594:	e0c5c83a 	sub	r2,fp,r3
 1021598:	10800a04 	addi	r2,r2,40
 102159c:	d8813715 	stw	r2,1244(sp)
 10215a0:	df013817 	ldw	fp,1248(sp)
 10215a4:	d9413717 	ldw	r5,1244(sp)
 10215a8:	e140010e 	bge	fp,r5,10215b0 <___vfiprintf_internal_r+0x870>
 10215ac:	2839883a 	mov	fp,r5
 10215b0:	d8800007 	ldb	r2,0(sp)
 10215b4:	103ec426 	beq	r2,zero,10210c8 <___vfiprintf_internal_r+0x388>
 10215b8:	e7000044 	addi	fp,fp,1
 10215bc:	003ec206 	br	10210c8 <___vfiprintf_internal_r+0x388>
 10215c0:	d9813b17 	ldw	r6,1260(sp)
 10215c4:	31800414 	ori	r6,r6,16
 10215c8:	d9813b15 	stw	r6,1260(sp)
 10215cc:	d8c13b17 	ldw	r3,1260(sp)
 10215d0:	1880080c 	andi	r2,r3,32
 10215d4:	1000681e 	bne	r2,zero,1021778 <___vfiprintf_internal_r+0xa38>
 10215d8:	d9413b17 	ldw	r5,1260(sp)
 10215dc:	2880040c 	andi	r2,r5,16
 10215e0:	1001771e 	bne	r2,zero,1021bc0 <___vfiprintf_internal_r+0xe80>
 10215e4:	d9813b17 	ldw	r6,1260(sp)
 10215e8:	3080100c 	andi	r2,r6,64
 10215ec:	10017426 	beq	r2,zero,1021bc0 <___vfiprintf_internal_r+0xe80>
 10215f0:	3c00000b 	ldhu	r16,0(r7)
 10215f4:	0009883a 	mov	r4,zero
 10215f8:	39c00104 	addi	r7,r7,4
 10215fc:	0023883a 	mov	r17,zero
 1021600:	d9c13515 	stw	r7,1236(sp)
 1021604:	d8000005 	stb	zero,0(sp)
 1021608:	003fd306 	br	1021558 <___vfiprintf_internal_r+0x818>
 102160c:	d8813b17 	ldw	r2,1260(sp)
 1021610:	10800414 	ori	r2,r2,16
 1021614:	d8813b15 	stw	r2,1260(sp)
 1021618:	d8c13b17 	ldw	r3,1260(sp)
 102161c:	1880080c 	andi	r2,r3,32
 1021620:	10004e1e 	bne	r2,zero,102175c <___vfiprintf_internal_r+0xa1c>
 1021624:	d9413b17 	ldw	r5,1260(sp)
 1021628:	2880040c 	andi	r2,r5,16
 102162c:	10016b1e 	bne	r2,zero,1021bdc <___vfiprintf_internal_r+0xe9c>
 1021630:	d9813b17 	ldw	r6,1260(sp)
 1021634:	3080100c 	andi	r2,r6,64
 1021638:	10016826 	beq	r2,zero,1021bdc <___vfiprintf_internal_r+0xe9c>
 102163c:	3c00000b 	ldhu	r16,0(r7)
 1021640:	01000044 	movi	r4,1
 1021644:	39c00104 	addi	r7,r7,4
 1021648:	0023883a 	mov	r17,zero
 102164c:	d9c13515 	stw	r7,1236(sp)
 1021650:	d8000005 	stb	zero,0(sp)
 1021654:	003fc006 	br	1021558 <___vfiprintf_internal_r+0x818>
 1021658:	b009883a 	mov	r4,r22
 102165c:	a80b883a 	mov	r5,r21
 1021660:	d9800104 	addi	r6,sp,4
 1021664:	1020ce80 	call	1020ce8 <__sprint_r>
 1021668:	103f541e 	bne	r2,zero,10213bc <___vfiprintf_internal_r+0x67c>
 102166c:	d9400317 	ldw	r5,12(sp)
 1021670:	d9000217 	ldw	r4,8(sp)
 1021674:	dc800e04 	addi	r18,sp,56
 1021678:	003f0d06 	br	10212b0 <___vfiprintf_internal_r+0x570>
 102167c:	b009883a 	mov	r4,r22
 1021680:	a80b883a 	mov	r5,r21
 1021684:	d9800104 	addi	r6,sp,4
 1021688:	d9c13f15 	stw	r7,1276(sp)
 102168c:	1020ce80 	call	1020ce8 <__sprint_r>
 1021690:	d9c13f17 	ldw	r7,1276(sp)
 1021694:	103f491e 	bne	r2,zero,10213bc <___vfiprintf_internal_r+0x67c>
 1021698:	dc800e04 	addi	r18,sp,56
 102169c:	003e1006 	br	1020ee0 <___vfiprintf_internal_r+0x1a0>
 10216a0:	b009883a 	mov	r4,r22
 10216a4:	a80b883a 	mov	r5,r21
 10216a8:	d9800104 	addi	r6,sp,4
 10216ac:	1020ce80 	call	1020ce8 <__sprint_r>
 10216b0:	103f421e 	bne	r2,zero,10213bc <___vfiprintf_internal_r+0x67c>
 10216b4:	d9400317 	ldw	r5,12(sp)
 10216b8:	d9000217 	ldw	r4,8(sp)
 10216bc:	dc800e04 	addi	r18,sp,56
 10216c0:	003ec306 	br	10211d0 <___vfiprintf_internal_r+0x490>
 10216c4:	b009883a 	mov	r4,r22
 10216c8:	a80b883a 	mov	r5,r21
 10216cc:	d9800104 	addi	r6,sp,4
 10216d0:	1020ce80 	call	1020ce8 <__sprint_r>
 10216d4:	103f391e 	bne	r2,zero,10213bc <___vfiprintf_internal_r+0x67c>
 10216d8:	d9400317 	ldw	r5,12(sp)
 10216dc:	d9000217 	ldw	r4,8(sp)
 10216e0:	dc800e04 	addi	r18,sp,56
 10216e4:	003ec706 	br	1021204 <___vfiprintf_internal_r+0x4c4>
 10216e8:	b009883a 	mov	r4,r22
 10216ec:	a80b883a 	mov	r5,r21
 10216f0:	d9800104 	addi	r6,sp,4
 10216f4:	1020ce80 	call	1020ce8 <__sprint_r>
 10216f8:	103f301e 	bne	r2,zero,10213bc <___vfiprintf_internal_r+0x67c>
 10216fc:	d9400317 	ldw	r5,12(sp)
 1021700:	d9000217 	ldw	r4,8(sp)
 1021704:	dc800e04 	addi	r18,sp,56
 1021708:	003ea506 	br	10211a0 <___vfiprintf_internal_r+0x460>
 102170c:	b009883a 	mov	r4,r22
 1021710:	a80b883a 	mov	r5,r21
 1021714:	d9800104 	addi	r6,sp,4
 1021718:	1020ce80 	call	1020ce8 <__sprint_r>
 102171c:	103f271e 	bne	r2,zero,10213bc <___vfiprintf_internal_r+0x67c>
 1021720:	d9400317 	ldw	r5,12(sp)
 1021724:	d9000217 	ldw	r4,8(sp)
 1021728:	dc800e04 	addi	r18,sp,56
 102172c:	003eb806 	br	1021210 <___vfiprintf_internal_r+0x4d0>
 1021730:	38c00017 	ldw	r3,0(r7)
 1021734:	39c00104 	addi	r7,r7,4
 1021738:	d8c13915 	stw	r3,1252(sp)
 102173c:	1800b20e 	bge	r3,zero,1021a08 <___vfiprintf_internal_r+0xcc8>
 1021740:	00c7c83a 	sub	r3,zero,r3
 1021744:	d8c13915 	stw	r3,1252(sp)
 1021748:	d9013b17 	ldw	r4,1260(sp)
 102174c:	a0c00007 	ldb	r3,0(r20)
 1021750:	21000114 	ori	r4,r4,4
 1021754:	d9013b15 	stw	r4,1260(sp)
 1021758:	003ded06 	br	1020f10 <___vfiprintf_internal_r+0x1d0>
 102175c:	3c000017 	ldw	r16,0(r7)
 1021760:	3c400117 	ldw	r17,4(r7)
 1021764:	39000204 	addi	r4,r7,8
 1021768:	d9013515 	stw	r4,1236(sp)
 102176c:	01000044 	movi	r4,1
 1021770:	d8000005 	stb	zero,0(sp)
 1021774:	003f7806 	br	1021558 <___vfiprintf_internal_r+0x818>
 1021778:	3c000017 	ldw	r16,0(r7)
 102177c:	3c400117 	ldw	r17,4(r7)
 1021780:	39000204 	addi	r4,r7,8
 1021784:	d9013515 	stw	r4,1236(sp)
 1021788:	0009883a 	mov	r4,zero
 102178c:	d8000005 	stb	zero,0(sp)
 1021790:	003f7106 	br	1021558 <___vfiprintf_internal_r+0x818>
 1021794:	3c000017 	ldw	r16,0(r7)
 1021798:	3c400117 	ldw	r17,4(r7)
 102179c:	39000204 	addi	r4,r7,8
 10217a0:	d9013515 	stw	r4,1236(sp)
 10217a4:	003f6a06 	br	1021550 <___vfiprintf_internal_r+0x810>
 10217a8:	d8800007 	ldb	r2,0(sp)
 10217ac:	1000961e 	bne	r2,zero,1021a08 <___vfiprintf_internal_r+0xcc8>
 10217b0:	00800804 	movi	r2,32
 10217b4:	d8800005 	stb	r2,0(sp)
 10217b8:	a0c00007 	ldb	r3,0(r20)
 10217bc:	003dd406 	br	1020f10 <___vfiprintf_internal_r+0x1d0>
 10217c0:	0007883a 	mov	r3,zero
 10217c4:	01000244 	movi	r4,9
 10217c8:	188002a4 	muli	r2,r3,10
 10217cc:	2885883a 	add	r2,r5,r2
 10217d0:	a1400007 	ldb	r5,0(r20)
 10217d4:	10fff404 	addi	r3,r2,-48
 10217d8:	a5000044 	addi	r20,r20,1
 10217dc:	28bff404 	addi	r2,r5,-48
 10217e0:	20bff92e 	bgeu	r4,r2,10217c8 <___vfiprintf_internal_r+0xa88>
 10217e4:	d8c13915 	stw	r3,1252(sp)
 10217e8:	003dcb06 	br	1020f18 <___vfiprintf_internal_r+0x1d8>
 10217ec:	d9413b17 	ldw	r5,1260(sp)
 10217f0:	a0c00007 	ldb	r3,0(r20)
 10217f4:	29402014 	ori	r5,r5,128
 10217f8:	d9413b15 	stw	r5,1260(sp)
 10217fc:	003dc406 	br	1020f10 <___vfiprintf_internal_r+0x1d0>
 1021800:	a0c00007 	ldb	r3,0(r20)
 1021804:	00800a84 	movi	r2,42
 1021808:	a5000044 	addi	r20,r20,1
 102180c:	18816f26 	beq	r3,r2,1021dcc <___vfiprintf_internal_r+0x108c>
 1021810:	180b883a 	mov	r5,r3
 1021814:	18bff404 	addi	r2,r3,-48
 1021818:	00c00244 	movi	r3,9
 102181c:	18816936 	bltu	r3,r2,1021dc4 <___vfiprintf_internal_r+0x1084>
 1021820:	000d883a 	mov	r6,zero
 1021824:	308002a4 	muli	r2,r6,10
 1021828:	1145883a 	add	r2,r2,r5
 102182c:	a1400007 	ldb	r5,0(r20)
 1021830:	11bff404 	addi	r6,r2,-48
 1021834:	a5000044 	addi	r20,r20,1
 1021838:	28bff404 	addi	r2,r5,-48
 102183c:	18bff92e 	bgeu	r3,r2,1021824 <___vfiprintf_internal_r+0xae4>
 1021840:	302f883a 	mov	r23,r6
 1021844:	303db40e 	bge	r6,zero,1020f18 <___vfiprintf_internal_r+0x1d8>
 1021848:	05ffffc4 	movi	r23,-1
 102184c:	003db206 	br	1020f18 <___vfiprintf_internal_r+0x1d8>
 1021850:	d8813b17 	ldw	r2,1260(sp)
 1021854:	a0c00007 	ldb	r3,0(r20)
 1021858:	10800054 	ori	r2,r2,1
 102185c:	d8813b15 	stw	r2,1260(sp)
 1021860:	003dab06 	br	1020f10 <___vfiprintf_internal_r+0x1d0>
 1021864:	00800ac4 	movi	r2,43
 1021868:	d8800005 	stb	r2,0(sp)
 102186c:	a0c00007 	ldb	r3,0(r20)
 1021870:	003da706 	br	1020f10 <___vfiprintf_internal_r+0x1d0>
 1021874:	018040b4 	movhi	r6,258
 1021878:	319e3604 	addi	r6,r6,30936
 102187c:	d9813615 	stw	r6,1240(sp)
 1021880:	d8c13b17 	ldw	r3,1260(sp)
 1021884:	1880080c 	andi	r2,r3,32
 1021888:	1000c226 	beq	r2,zero,1021b94 <___vfiprintf_internal_r+0xe54>
 102188c:	3c000017 	ldw	r16,0(r7)
 1021890:	3c400117 	ldw	r17,4(r7)
 1021894:	39000204 	addi	r4,r7,8
 1021898:	d9013515 	stw	r4,1236(sp)
 102189c:	d9013b17 	ldw	r4,1260(sp)
 10218a0:	2080004c 	andi	r2,r4,1
 10218a4:	1005003a 	cmpeq	r2,r2,zero
 10218a8:	1000931e 	bne	r2,zero,1021af8 <___vfiprintf_internal_r+0xdb8>
 10218ac:	8444b03a 	or	r2,r16,r17
 10218b0:	10009126 	beq	r2,zero,1021af8 <___vfiprintf_internal_r+0xdb8>
 10218b4:	21000094 	ori	r4,r4,2
 10218b8:	d9013b15 	stw	r4,1260(sp)
 10218bc:	00800c04 	movi	r2,48
 10218c0:	01000084 	movi	r4,2
 10218c4:	d8800045 	stb	r2,1(sp)
 10218c8:	d9400085 	stb	r5,2(sp)
 10218cc:	d8000005 	stb	zero,0(sp)
 10218d0:	003f2106 	br	1021558 <___vfiprintf_internal_r+0x818>
 10218d4:	38800017 	ldw	r2,0(r7)
 10218d8:	07000044 	movi	fp,1
 10218dc:	39c00104 	addi	r7,r7,4
 10218e0:	d9800404 	addi	r6,sp,16
 10218e4:	d9c13515 	stw	r7,1236(sp)
 10218e8:	d9813c15 	stw	r6,1264(sp)
 10218ec:	df013715 	stw	fp,1244(sp)
 10218f0:	d8800405 	stb	r2,16(sp)
 10218f4:	d8000005 	stb	zero,0(sp)
 10218f8:	003df206 	br	10210c4 <___vfiprintf_internal_r+0x384>
 10218fc:	008040b4 	movhi	r2,258
 1021900:	109e4104 	addi	r2,r2,30980
 1021904:	d8813615 	stw	r2,1240(sp)
 1021908:	003fdd06 	br	1021880 <___vfiprintf_internal_r+0xb40>
 102190c:	d8c13b17 	ldw	r3,1260(sp)
 1021910:	1880080c 	andi	r2,r3,32
 1021914:	1000e326 	beq	r2,zero,1021ca4 <___vfiprintf_internal_r+0xf64>
 1021918:	d9013a17 	ldw	r4,1256(sp)
 102191c:	38800017 	ldw	r2,0(r7)
 1021920:	39c00104 	addi	r7,r7,4
 1021924:	2007d7fa 	srai	r3,r4,31
 1021928:	11000015 	stw	r4,0(r2)
 102192c:	10c00115 	stw	r3,4(r2)
 1021930:	003d5406 	br	1020e84 <___vfiprintf_internal_r+0x144>
 1021934:	a0c00007 	ldb	r3,0(r20)
 1021938:	00801b04 	movi	r2,108
 102193c:	1880f926 	beq	r3,r2,1021d24 <___vfiprintf_internal_r+0xfe4>
 1021940:	d9013b17 	ldw	r4,1260(sp)
 1021944:	21000414 	ori	r4,r4,16
 1021948:	d9013b15 	stw	r4,1260(sp)
 102194c:	003d7006 	br	1020f10 <___vfiprintf_internal_r+0x1d0>
 1021950:	d8000005 	stb	zero,0(sp)
 1021954:	39000017 	ldw	r4,0(r7)
 1021958:	39c00104 	addi	r7,r7,4
 102195c:	d9c13515 	stw	r7,1236(sp)
 1021960:	d9013c15 	stw	r4,1264(sp)
 1021964:	20010226 	beq	r4,zero,1021d70 <___vfiprintf_internal_r+0x1030>
 1021968:	b800fc16 	blt	r23,zero,1021d5c <___vfiprintf_internal_r+0x101c>
 102196c:	d9013c17 	ldw	r4,1264(sp)
 1021970:	000b883a 	mov	r5,zero
 1021974:	b80d883a 	mov	r6,r23
 1021978:	1015c100 	call	1015c10 <memchr>
 102197c:	10000426 	beq	r2,zero,1021990 <___vfiprintf_internal_r+0xc50>
 1021980:	d9813c17 	ldw	r6,1264(sp)
 1021984:	1185c83a 	sub	r2,r2,r6
 1021988:	d8813715 	stw	r2,1244(sp)
 102198c:	b880010e 	bge	r23,r2,1021994 <___vfiprintf_internal_r+0xc54>
 1021990:	ddc13715 	stw	r23,1244(sp)
 1021994:	d8013815 	stw	zero,1248(sp)
 1021998:	003f0106 	br	10215a0 <___vfiprintf_internal_r+0x860>
 102199c:	d8813b17 	ldw	r2,1260(sp)
 10219a0:	3c000017 	ldw	r16,0(r7)
 10219a4:	00c040b4 	movhi	r3,258
 10219a8:	18de3604 	addi	r3,r3,30936
 10219ac:	10800094 	ori	r2,r2,2
 10219b0:	d8813b15 	stw	r2,1260(sp)
 10219b4:	39c00104 	addi	r7,r7,4
 10219b8:	d8c13615 	stw	r3,1240(sp)
 10219bc:	00800c04 	movi	r2,48
 10219c0:	00c01e04 	movi	r3,120
 10219c4:	0023883a 	mov	r17,zero
 10219c8:	01000084 	movi	r4,2
 10219cc:	d9c13515 	stw	r7,1236(sp)
 10219d0:	d8800045 	stb	r2,1(sp)
 10219d4:	d8c00085 	stb	r3,2(sp)
 10219d8:	d8000005 	stb	zero,0(sp)
 10219dc:	003ede06 	br	1021558 <___vfiprintf_internal_r+0x818>
 10219e0:	d9813b17 	ldw	r6,1260(sp)
 10219e4:	a0c00007 	ldb	r3,0(r20)
 10219e8:	31801014 	ori	r6,r6,64
 10219ec:	d9813b15 	stw	r6,1260(sp)
 10219f0:	003d4706 	br	1020f10 <___vfiprintf_internal_r+0x1d0>
 10219f4:	d9413b17 	ldw	r5,1260(sp)
 10219f8:	a0c00007 	ldb	r3,0(r20)
 10219fc:	29400814 	ori	r5,r5,32
 1021a00:	d9413b15 	stw	r5,1260(sp)
 1021a04:	003d4206 	br	1020f10 <___vfiprintf_internal_r+0x1d0>
 1021a08:	a0c00007 	ldb	r3,0(r20)
 1021a0c:	003d4006 	br	1020f10 <___vfiprintf_internal_r+0x1d0>
 1021a10:	20c03fcc 	andi	r3,r4,255
 1021a14:	00800044 	movi	r2,1
 1021a18:	18802b26 	beq	r3,r2,1021ac8 <___vfiprintf_internal_r+0xd88>
 1021a1c:	18800b36 	bltu	r3,r2,1021a4c <___vfiprintf_internal_r+0xd0c>
 1021a20:	00800084 	movi	r2,2
 1021a24:	18808426 	beq	r3,r2,1021c38 <___vfiprintf_internal_r+0xef8>
 1021a28:	010040b4 	movhi	r4,258
 1021a2c:	211e4604 	addi	r4,r4,31000
 1021a30:	ddc13815 	stw	r23,1248(sp)
 1021a34:	100e3080 	call	100e308 <strlen>
 1021a38:	d8813715 	stw	r2,1244(sp)
 1021a3c:	008040b4 	movhi	r2,258
 1021a40:	109e4604 	addi	r2,r2,31000
 1021a44:	d8813c15 	stw	r2,1264(sp)
 1021a48:	003ed506 	br	10215a0 <___vfiprintf_internal_r+0x860>
 1021a4c:	d8800e04 	addi	r2,sp,56
 1021a50:	df000404 	addi	fp,sp,16
 1021a54:	d8813c15 	stw	r2,1264(sp)
 1021a58:	880a977a 	slli	r5,r17,29
 1021a5c:	8004d0fa 	srli	r2,r16,3
 1021a60:	8806d0fa 	srli	r3,r17,3
 1021a64:	810001cc 	andi	r4,r16,7
 1021a68:	2884b03a 	or	r2,r5,r2
 1021a6c:	d9413c17 	ldw	r5,1264(sp)
 1021a70:	21000c04 	addi	r4,r4,48
 1021a74:	1021883a 	mov	r16,r2
 1021a78:	297fffc4 	addi	r5,r5,-1
 1021a7c:	d9413c15 	stw	r5,1264(sp)
 1021a80:	29000005 	stb	r4,0(r5)
 1021a84:	10cab03a 	or	r5,r2,r3
 1021a88:	1823883a 	mov	r17,r3
 1021a8c:	283ff21e 	bne	r5,zero,1021a58 <___vfiprintf_internal_r+0xd18>
 1021a90:	d9813b17 	ldw	r6,1260(sp)
 1021a94:	3080004c 	andi	r2,r6,1
 1021a98:	1005003a 	cmpeq	r2,r2,zero
 1021a9c:	103ebb1e 	bne	r2,zero,102158c <___vfiprintf_internal_r+0x84c>
 1021aa0:	20803fcc 	andi	r2,r4,255
 1021aa4:	1080201c 	xori	r2,r2,128
 1021aa8:	10bfe004 	addi	r2,r2,-128
 1021aac:	00c00c04 	movi	r3,48
 1021ab0:	10feb626 	beq	r2,r3,102158c <___vfiprintf_internal_r+0x84c>
 1021ab4:	d8813c17 	ldw	r2,1264(sp)
 1021ab8:	10bfffc4 	addi	r2,r2,-1
 1021abc:	d8813c15 	stw	r2,1264(sp)
 1021ac0:	10c00005 	stb	r3,0(r2)
 1021ac4:	003eb106 	br	102158c <___vfiprintf_internal_r+0x84c>
 1021ac8:	88800068 	cmpgeui	r2,r17,1
 1021acc:	10000d1e 	bne	r2,zero,1021b04 <___vfiprintf_internal_r+0xdc4>
 1021ad0:	8800021e 	bne	r17,zero,1021adc <___vfiprintf_internal_r+0xd9c>
 1021ad4:	00800244 	movi	r2,9
 1021ad8:	14000a36 	bltu	r2,r16,1021b04 <___vfiprintf_internal_r+0xdc4>
 1021adc:	d9800dc4 	addi	r6,sp,55
 1021ae0:	df000404 	addi	fp,sp,16
 1021ae4:	d9813c15 	stw	r6,1264(sp)
 1021ae8:	d8c13c17 	ldw	r3,1264(sp)
 1021aec:	80800c04 	addi	r2,r16,48
 1021af0:	18800005 	stb	r2,0(r3)
 1021af4:	003ea506 	br	102158c <___vfiprintf_internal_r+0x84c>
 1021af8:	01000084 	movi	r4,2
 1021afc:	d8000005 	stb	zero,0(sp)
 1021b00:	003e9506 	br	1021558 <___vfiprintf_internal_r+0x818>
 1021b04:	df000404 	addi	fp,sp,16
 1021b08:	dcc00e04 	addi	r19,sp,56
 1021b0c:	8009883a 	mov	r4,r16
 1021b10:	880b883a 	mov	r5,r17
 1021b14:	01800284 	movi	r6,10
 1021b18:	000f883a 	mov	r7,zero
 1021b1c:	101849c0 	call	101849c <__umoddi3>
 1021b20:	12000c04 	addi	r8,r2,48
 1021b24:	9cffffc4 	addi	r19,r19,-1
 1021b28:	8009883a 	mov	r4,r16
 1021b2c:	880b883a 	mov	r5,r17
 1021b30:	01800284 	movi	r6,10
 1021b34:	000f883a 	mov	r7,zero
 1021b38:	9a000005 	stb	r8,0(r19)
 1021b3c:	1017ec00 	call	1017ec0 <__udivdi3>
 1021b40:	1009883a 	mov	r4,r2
 1021b44:	1021883a 	mov	r16,r2
 1021b48:	18800068 	cmpgeui	r2,r3,1
 1021b4c:	1823883a 	mov	r17,r3
 1021b50:	103fee1e 	bne	r2,zero,1021b0c <___vfiprintf_internal_r+0xdcc>
 1021b54:	1800021e 	bne	r3,zero,1021b60 <___vfiprintf_internal_r+0xe20>
 1021b58:	00800244 	movi	r2,9
 1021b5c:	113feb36 	bltu	r2,r4,1021b0c <___vfiprintf_internal_r+0xdcc>
 1021b60:	9cffffc4 	addi	r19,r19,-1
 1021b64:	dcc13c15 	stw	r19,1264(sp)
 1021b68:	003fdf06 	br	1021ae8 <___vfiprintf_internal_r+0xda8>
 1021b6c:	05c040b4 	movhi	r23,258
 1021b70:	bddfa404 	addi	r23,r23,32400
 1021b74:	003dc506 	br	102128c <___vfiprintf_internal_r+0x54c>
 1021b78:	d9013b17 	ldw	r4,1260(sp)
 1021b7c:	2080004c 	andi	r2,r4,1
 1021b80:	1000421e 	bne	r2,zero,1021c8c <___vfiprintf_internal_r+0xf4c>
 1021b84:	d9400e04 	addi	r5,sp,56
 1021b88:	df000404 	addi	fp,sp,16
 1021b8c:	d9413c15 	stw	r5,1264(sp)
 1021b90:	003e7e06 	br	102158c <___vfiprintf_internal_r+0x84c>
 1021b94:	d9813b17 	ldw	r6,1260(sp)
 1021b98:	3080040c 	andi	r2,r6,16
 1021b9c:	10001c1e 	bne	r2,zero,1021c10 <___vfiprintf_internal_r+0xed0>
 1021ba0:	d8c13b17 	ldw	r3,1260(sp)
 1021ba4:	1880100c 	andi	r2,r3,64
 1021ba8:	10001926 	beq	r2,zero,1021c10 <___vfiprintf_internal_r+0xed0>
 1021bac:	3c00000b 	ldhu	r16,0(r7)
 1021bb0:	0023883a 	mov	r17,zero
 1021bb4:	39c00104 	addi	r7,r7,4
 1021bb8:	d9c13515 	stw	r7,1236(sp)
 1021bbc:	003f3706 	br	102189c <___vfiprintf_internal_r+0xb5c>
 1021bc0:	3c000017 	ldw	r16,0(r7)
 1021bc4:	0009883a 	mov	r4,zero
 1021bc8:	39c00104 	addi	r7,r7,4
 1021bcc:	0023883a 	mov	r17,zero
 1021bd0:	d9c13515 	stw	r7,1236(sp)
 1021bd4:	d8000005 	stb	zero,0(sp)
 1021bd8:	003e5f06 	br	1021558 <___vfiprintf_internal_r+0x818>
 1021bdc:	3c000017 	ldw	r16,0(r7)
 1021be0:	01000044 	movi	r4,1
 1021be4:	39c00104 	addi	r7,r7,4
 1021be8:	0023883a 	mov	r17,zero
 1021bec:	d9c13515 	stw	r7,1236(sp)
 1021bf0:	d8000005 	stb	zero,0(sp)
 1021bf4:	003e5806 	br	1021558 <___vfiprintf_internal_r+0x818>
 1021bf8:	38800017 	ldw	r2,0(r7)
 1021bfc:	39c00104 	addi	r7,r7,4
 1021c00:	d9c13515 	stw	r7,1236(sp)
 1021c04:	1023d7fa 	srai	r17,r2,31
 1021c08:	1021883a 	mov	r16,r2
 1021c0c:	003e5006 	br	1021550 <___vfiprintf_internal_r+0x810>
 1021c10:	3c000017 	ldw	r16,0(r7)
 1021c14:	0023883a 	mov	r17,zero
 1021c18:	39c00104 	addi	r7,r7,4
 1021c1c:	d9c13515 	stw	r7,1236(sp)
 1021c20:	003f1e06 	br	102189c <___vfiprintf_internal_r+0xb5c>
 1021c24:	d9400317 	ldw	r5,12(sp)
 1021c28:	d9000217 	ldw	r4,8(sp)
 1021c2c:	05c040b4 	movhi	r23,258
 1021c30:	bddfa804 	addi	r23,r23,32416
 1021c34:	003d4e06 	br	1021170 <___vfiprintf_internal_r+0x430>
 1021c38:	d9000e04 	addi	r4,sp,56
 1021c3c:	df000404 	addi	fp,sp,16
 1021c40:	d9013c15 	stw	r4,1264(sp)
 1021c44:	d9813617 	ldw	r6,1240(sp)
 1021c48:	880a973a 	slli	r5,r17,28
 1021c4c:	8004d13a 	srli	r2,r16,4
 1021c50:	810003cc 	andi	r4,r16,15
 1021c54:	3109883a 	add	r4,r6,r4
 1021c58:	2884b03a 	or	r2,r5,r2
 1021c5c:	21400003 	ldbu	r5,0(r4)
 1021c60:	d9013c17 	ldw	r4,1264(sp)
 1021c64:	8806d13a 	srli	r3,r17,4
 1021c68:	1021883a 	mov	r16,r2
 1021c6c:	213fffc4 	addi	r4,r4,-1
 1021c70:	d9013c15 	stw	r4,1264(sp)
 1021c74:	d9813c17 	ldw	r6,1264(sp)
 1021c78:	10c8b03a 	or	r4,r2,r3
 1021c7c:	1823883a 	mov	r17,r3
 1021c80:	31400005 	stb	r5,0(r6)
 1021c84:	203fef1e 	bne	r4,zero,1021c44 <___vfiprintf_internal_r+0xf04>
 1021c88:	003e4006 	br	102158c <___vfiprintf_internal_r+0x84c>
 1021c8c:	00800c04 	movi	r2,48
 1021c90:	d9800dc4 	addi	r6,sp,55
 1021c94:	df000404 	addi	fp,sp,16
 1021c98:	d8800dc5 	stb	r2,55(sp)
 1021c9c:	d9813c15 	stw	r6,1264(sp)
 1021ca0:	003e3a06 	br	102158c <___vfiprintf_internal_r+0x84c>
 1021ca4:	d9413b17 	ldw	r5,1260(sp)
 1021ca8:	2880040c 	andi	r2,r5,16
 1021cac:	10002326 	beq	r2,zero,1021d3c <___vfiprintf_internal_r+0xffc>
 1021cb0:	38800017 	ldw	r2,0(r7)
 1021cb4:	d9813a17 	ldw	r6,1256(sp)
 1021cb8:	39c00104 	addi	r7,r7,4
 1021cbc:	11800015 	stw	r6,0(r2)
 1021cc0:	003c7006 	br	1020e84 <___vfiprintf_internal_r+0x144>
 1021cc4:	d9000217 	ldw	r4,8(sp)
 1021cc8:	05c040b4 	movhi	r23,258
 1021ccc:	bddfa804 	addi	r23,r23,32416
 1021cd0:	003da406 	br	1021364 <___vfiprintf_internal_r+0x624>
 1021cd4:	0005883a 	mov	r2,zero
 1021cd8:	1409c83a 	sub	r4,r2,r16
 1021cdc:	1105803a 	cmpltu	r2,r2,r4
 1021ce0:	044bc83a 	sub	r5,zero,r17
 1021ce4:	2885c83a 	sub	r2,r5,r2
 1021ce8:	2021883a 	mov	r16,r4
 1021cec:	1023883a 	mov	r17,r2
 1021cf0:	01000044 	movi	r4,1
 1021cf4:	00800b44 	movi	r2,45
 1021cf8:	d8800005 	stb	r2,0(sp)
 1021cfc:	003e1606 	br	1021558 <___vfiprintf_internal_r+0x818>
 1021d00:	b009883a 	mov	r4,r22
 1021d04:	a80b883a 	mov	r5,r21
 1021d08:	d9800104 	addi	r6,sp,4
 1021d0c:	1020ce80 	call	1020ce8 <__sprint_r>
 1021d10:	103daa1e 	bne	r2,zero,10213bc <___vfiprintf_internal_r+0x67c>
 1021d14:	003da806 	br	10213b8 <___vfiprintf_internal_r+0x678>
 1021d18:	05c040b4 	movhi	r23,258
 1021d1c:	bddfa404 	addi	r23,r23,32400
 1021d20:	003dca06 	br	102144c <___vfiprintf_internal_r+0x70c>
 1021d24:	d8813b17 	ldw	r2,1260(sp)
 1021d28:	a5000044 	addi	r20,r20,1
 1021d2c:	a0c00007 	ldb	r3,0(r20)
 1021d30:	10800814 	ori	r2,r2,32
 1021d34:	d8813b15 	stw	r2,1260(sp)
 1021d38:	003c7506 	br	1020f10 <___vfiprintf_internal_r+0x1d0>
 1021d3c:	d8c13b17 	ldw	r3,1260(sp)
 1021d40:	1880100c 	andi	r2,r3,64
 1021d44:	10001a26 	beq	r2,zero,1021db0 <___vfiprintf_internal_r+0x1070>
 1021d48:	38800017 	ldw	r2,0(r7)
 1021d4c:	d9013a17 	ldw	r4,1256(sp)
 1021d50:	39c00104 	addi	r7,r7,4
 1021d54:	1100000d 	sth	r4,0(r2)
 1021d58:	003c4a06 	br	1020e84 <___vfiprintf_internal_r+0x144>
 1021d5c:	d9013c17 	ldw	r4,1264(sp)
 1021d60:	100e3080 	call	100e308 <strlen>
 1021d64:	d8813715 	stw	r2,1244(sp)
 1021d68:	d8013815 	stw	zero,1248(sp)
 1021d6c:	003e0c06 	br	10215a0 <___vfiprintf_internal_r+0x860>
 1021d70:	00800184 	movi	r2,6
 1021d74:	15c00836 	bltu	r2,r23,1021d98 <___vfiprintf_internal_r+0x1058>
 1021d78:	b839883a 	mov	fp,r23
 1021d7c:	b800010e 	bge	r23,zero,1021d84 <___vfiprintf_internal_r+0x1044>
 1021d80:	0039883a 	mov	fp,zero
 1021d84:	014040b4 	movhi	r5,258
 1021d88:	295e3f04 	addi	r5,r5,30972
 1021d8c:	ddc13715 	stw	r23,1244(sp)
 1021d90:	d9413c15 	stw	r5,1264(sp)
 1021d94:	003ccb06 	br	10210c4 <___vfiprintf_internal_r+0x384>
 1021d98:	014040b4 	movhi	r5,258
 1021d9c:	295e3f04 	addi	r5,r5,30972
 1021da0:	1039883a 	mov	fp,r2
 1021da4:	d9413c15 	stw	r5,1264(sp)
 1021da8:	d8813715 	stw	r2,1244(sp)
 1021dac:	003cc506 	br	10210c4 <___vfiprintf_internal_r+0x384>
 1021db0:	38800017 	ldw	r2,0(r7)
 1021db4:	d9413a17 	ldw	r5,1256(sp)
 1021db8:	39c00104 	addi	r7,r7,4
 1021dbc:	11400015 	stw	r5,0(r2)
 1021dc0:	003c3006 	br	1020e84 <___vfiprintf_internal_r+0x144>
 1021dc4:	002f883a 	mov	r23,zero
 1021dc8:	003c5306 	br	1020f18 <___vfiprintf_internal_r+0x1d8>
 1021dcc:	3dc00017 	ldw	r23,0(r7)
 1021dd0:	39c00104 	addi	r7,r7,4
 1021dd4:	b83f0c0e 	bge	r23,zero,1021a08 <___vfiprintf_internal_r+0xcc8>
 1021dd8:	a0c00007 	ldb	r3,0(r20)
 1021ddc:	05ffffc4 	movi	r23,-1
 1021de0:	003c4b06 	br	1020f10 <___vfiprintf_internal_r+0x1d0>

01021de4 <__vfiprintf_internal>:
 1021de4:	008040f4 	movhi	r2,259
 1021de8:	10a67004 	addi	r2,r2,-26176
 1021dec:	2013883a 	mov	r9,r4
 1021df0:	11000017 	ldw	r4,0(r2)
 1021df4:	2805883a 	mov	r2,r5
 1021df8:	300f883a 	mov	r7,r6
 1021dfc:	480b883a 	mov	r5,r9
 1021e00:	100d883a 	mov	r6,r2
 1021e04:	1020d401 	jmpi	1020d40 <___vfiprintf_internal_r>

01021e08 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 1021e08:	defffd04 	addi	sp,sp,-12
 1021e0c:	df000215 	stw	fp,8(sp)
 1021e10:	df000204 	addi	fp,sp,8
 1021e14:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 1021e18:	e0bfff17 	ldw	r2,-4(fp)
 1021e1c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 1021e20:	e0bffe17 	ldw	r2,-8(fp)
 1021e24:	1005003a 	cmpeq	r2,r2,zero
 1021e28:	1000021e 	bne	r2,zero,1021e34 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 1021e2c:	002af070 	cmpltui	zero,zero,43969
 1021e30:	00000106 	br	1021e38 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 1021e34:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 1021e38:	e037883a 	mov	sp,fp
 1021e3c:	df000017 	ldw	fp,0(sp)
 1021e40:	dec00104 	addi	sp,sp,4
 1021e44:	f800283a 	ret

01021e48 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 1021e48:	defffd04 	addi	sp,sp,-12
 1021e4c:	dfc00215 	stw	ra,8(sp)
 1021e50:	df000115 	stw	fp,4(sp)
 1021e54:	df000104 	addi	fp,sp,4
 1021e58:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 1021e5c:	e13fff17 	ldw	r4,-4(fp)
 1021e60:	1021e080 	call	1021e08 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 1021e64:	003fff06 	br	1021e64 <_exit+0x1c>

01021e68 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 1021e68:	deffff04 	addi	sp,sp,-4
 1021e6c:	df000015 	stw	fp,0(sp)
 1021e70:	d839883a 	mov	fp,sp
  return 0;
 1021e74:	0005883a 	mov	r2,zero
}
 1021e78:	e037883a 	mov	sp,fp
 1021e7c:	df000017 	ldw	fp,0(sp)
 1021e80:	dec00104 	addi	sp,sp,4
 1021e84:	f800283a 	ret

01021e88 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 1021e88:	defffa04 	addi	sp,sp,-24
 1021e8c:	dfc00515 	stw	ra,20(sp)
 1021e90:	df000415 	stw	fp,16(sp)
 1021e94:	df000404 	addi	fp,sp,16
 1021e98:	e13ffd15 	stw	r4,-12(fp)
 1021e9c:	e17ffe15 	stw	r5,-8(fp)
  int status = 0;
 1021ea0:	e03ffc15 	stw	zero,-16(fp)

  if (pid <= 0)
 1021ea4:	e0bffd17 	ldw	r2,-12(fp)
 1021ea8:	10800048 	cmpgei	r2,r2,1
 1021eac:	1000301e 	bne	r2,zero,1021f70 <kill+0xe8>
  {
    switch (sig)
 1021eb0:	e0bffe17 	ldw	r2,-8(fp)
 1021eb4:	10800828 	cmpgeui	r2,r2,32
 1021eb8:	10002a1e 	bne	r2,zero,1021f64 <kill+0xdc>
 1021ebc:	e0bffe17 	ldw	r2,-8(fp)
 1021ec0:	1085883a 	add	r2,r2,r2
 1021ec4:	1087883a 	add	r3,r2,r2
 1021ec8:	008040b4 	movhi	r2,258
 1021ecc:	1087b704 	addi	r2,r2,7900
 1021ed0:	1885883a 	add	r2,r3,r2
 1021ed4:	10800017 	ldw	r2,0(r2)
 1021ed8:	1000683a 	jmp	r2
 1021edc:	01021f84 	movi	r4,2174
 1021ee0:	01021f64 	muli	r4,zero,2173
 1021ee4:	01021f64 	muli	r4,zero,2173
 1021ee8:	01021f5c 	xori	r4,zero,2173
 1021eec:	01021f5c 	xori	r4,zero,2173
 1021ef0:	01021f5c 	xori	r4,zero,2173
 1021ef4:	01021f5c 	xori	r4,zero,2173
 1021ef8:	01021f64 	muli	r4,zero,2173
 1021efc:	01021f5c 	xori	r4,zero,2173
 1021f00:	01021f5c 	xori	r4,zero,2173
 1021f04:	01021f5c 	xori	r4,zero,2173
 1021f08:	01021f5c 	xori	r4,zero,2173
 1021f0c:	01021f5c 	xori	r4,zero,2173
 1021f10:	01021f5c 	xori	r4,zero,2173
 1021f14:	01021f5c 	xori	r4,zero,2173
 1021f18:	01021f5c 	xori	r4,zero,2173
 1021f1c:	01021f84 	movi	r4,2174
 1021f20:	01021f64 	muli	r4,zero,2173
 1021f24:	01021f64 	muli	r4,zero,2173
 1021f28:	01021f64 	muli	r4,zero,2173
 1021f2c:	01021f84 	movi	r4,2174
 1021f30:	01021f64 	muli	r4,zero,2173
 1021f34:	01021f64 	muli	r4,zero,2173
 1021f38:	01021f5c 	xori	r4,zero,2173
 1021f3c:	01021f5c 	xori	r4,zero,2173
 1021f40:	01021f5c 	xori	r4,zero,2173
 1021f44:	01021f5c 	xori	r4,zero,2173
 1021f48:	01021f5c 	xori	r4,zero,2173
 1021f4c:	01021f64 	muli	r4,zero,2173
 1021f50:	01021f64 	muli	r4,zero,2173
 1021f54:	01021f5c 	xori	r4,zero,2173
 1021f58:	01021f5c 	xori	r4,zero,2173
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 1021f5c:	0009883a 	mov	r4,zero
 1021f60:	1021e480 	call	1021e48 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 1021f64:	00800584 	movi	r2,22
 1021f68:	e0bffc15 	stw	r2,-16(fp)
 1021f6c:	00000506 	br	1021f84 <kill+0xfc>
    }
  }

  else if (pid > 0)
 1021f70:	e0bffd17 	ldw	r2,-12(fp)
 1021f74:	10800050 	cmplti	r2,r2,1
 1021f78:	1000021e 	bne	r2,zero,1021f84 <kill+0xfc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 1021f7c:	008000c4 	movi	r2,3
 1021f80:	e0bffc15 	stw	r2,-16(fp)
  }

  if (status)
 1021f84:	e0bffc17 	ldw	r2,-16(fp)
 1021f88:	1005003a 	cmpeq	r2,r2,zero
 1021f8c:	1000071e 	bne	r2,zero,1021fac <kill+0x124>
  {
    ALT_ERRNO = status;
 1021f90:	1021fc80 	call	1021fc8 <alt_get_errno>
 1021f94:	1007883a 	mov	r3,r2
 1021f98:	e0bffc17 	ldw	r2,-16(fp)
 1021f9c:	18800015 	stw	r2,0(r3)
    return -1;
 1021fa0:	00bfffc4 	movi	r2,-1
 1021fa4:	e0bfff15 	stw	r2,-4(fp)
 1021fa8:	00000106 	br	1021fb0 <kill+0x128>
  }

  return 0;
 1021fac:	e03fff15 	stw	zero,-4(fp)
 1021fb0:	e0bfff17 	ldw	r2,-4(fp)
}
 1021fb4:	e037883a 	mov	sp,fp
 1021fb8:	dfc00117 	ldw	ra,4(sp)
 1021fbc:	df000017 	ldw	fp,0(sp)
 1021fc0:	dec00204 	addi	sp,sp,8
 1021fc4:	f800283a 	ret

01021fc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1021fc8:	defffd04 	addi	sp,sp,-12
 1021fcc:	dfc00215 	stw	ra,8(sp)
 1021fd0:	df000115 	stw	fp,4(sp)
 1021fd4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1021fd8:	008040f4 	movhi	r2,259
 1021fdc:	10a68004 	addi	r2,r2,-26112
 1021fe0:	10800017 	ldw	r2,0(r2)
 1021fe4:	1005003a 	cmpeq	r2,r2,zero
 1021fe8:	1000061e 	bne	r2,zero,1022004 <alt_get_errno+0x3c>
 1021fec:	008040f4 	movhi	r2,259
 1021ff0:	10a68004 	addi	r2,r2,-26112
 1021ff4:	10800017 	ldw	r2,0(r2)
 1021ff8:	103ee83a 	callr	r2
 1021ffc:	e0bfff15 	stw	r2,-4(fp)
 1022000:	00000306 	br	1022010 <alt_get_errno+0x48>
 1022004:	008040f4 	movhi	r2,259
 1022008:	10ad7c04 	addi	r2,r2,-18960
 102200c:	e0bfff15 	stw	r2,-4(fp)
 1022010:	e0bfff17 	ldw	r2,-4(fp)
}
 1022014:	e037883a 	mov	sp,fp
 1022018:	dfc00117 	ldw	ra,4(sp)
 102201c:	df000017 	ldw	fp,0(sp)
 1022020:	dec00204 	addi	sp,sp,8
 1022024:	f800283a 	ret
 1022028:	010207cc 	andi	r4,zero,2079
