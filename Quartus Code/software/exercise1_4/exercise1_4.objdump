
exercise1_4.elf:     file format elf32-littlenios2
exercise1_4.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x0000d61c memsz 0x0000d61c flags r-x
    LOAD off    0x0000e63c vaddr 0x0100d63c paddr 0x0100f11c align 2**12
         filesz 0x00001ae0 memsz 0x00001ae0 flags rw-
    LOAD off    0x00010bfc vaddr 0x01010bfc paddr 0x01010bfc align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000d0a8  010001b8  010001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003dc  0100d260  0100d260  0000e260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ae0  0100d63c  0100f11c  0000e63c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  01010bfc  01010bfc  00010bfc  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0001011c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000c98  00000000  00000000  00010148  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000167d  00000000  00000000  00010de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00023a12  00000000  00000000  0001245d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007b4b  00000000  00000000  00035e6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00013eb0  00000000  00000000  0003d9ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001b28  00000000  00000000  0005186c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002220  00000000  00000000  00053394  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c1f6  00000000  00000000  000555b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  000617ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000990  00000000  00000000  000617e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000654ce  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000654d1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000654dd  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000654de  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000654df  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000654ea  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000654f5  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  00065500  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000000f  00000000  00000000  0006550b  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00086ce4  00000000  00000000  0006551a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001b8 l    d  .text	00000000 .text
0100d260 l    d  .rodata	00000000 .rodata
0100d63c l    d  .rwdata	00000000 .rwdata
01010bfc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
01000200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
01001518 l     F .text	00000058 __sprint_r
0100d42a l     O .rodata	00000010 blanks.3452
0100d41a l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0100357c l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
01004f78 l     F .text	00000058 std
01005084 l     F .text	00000008 __fp_lock
0100508c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0100d63c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0100f0e8 l     O .rwdata	00000004 charset
0100d460 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0100d5a8 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
01009218 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
01009e0c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0100a0ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0100a14c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0100a24c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0100a36c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0100a44c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0100a5a8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0100a7d4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0100f10c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0100aa70 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0100dff8 l     O .rwdata	00001060 jtag_uart_0
0100f058 l     O .rwdata	0000002c character_lcd_0
0100f084 l     O .rwdata	0000002c rs232_0
0100f0b0 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
0100ab8c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0100adc4 l     F .text	0000022c altera_avalon_jtag_uart_irq
0100aff0 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0100b66c l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0100c27c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0100c468 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0100c764 l     F .text	000000dc alt_file_locked
0100c9c8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0100d048 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0100d1fc l     F .text	00000040 alt_sim_halt
01006d34 g     F .text	00000094 _mprec_log10
01006e20 g     F .text	00000088 __any_on
0100852c g     F .text	00000070 _isatty_r
0100d580 g     O .rodata	00000028 __mprec_tinytens
0100a608 g     F .text	0000006c alt_main
010013f0 g     F .text	000000a0 _puts_r
01010c58 g     O .bss	00000100 alt_irq
0100859c g     F .text	00000078 _lseek_r
0100f11c g       *ABS*	00000000 __flash_rwdata_start
0100b7e4 g     F .text	00000034 alt_up_character_lcd_send_cmd
01009ae0 g     F .text	00000088 __eqdf2
01010ee8 g       *ABS*	00000000 __alt_heap_start
01001378 g     F .text	00000044 printf
01000378 g     F .text	00000228 GetPress
01007ff8 g     F .text	00000068 __sseek
01004fe0 g     F .text	000000a4 __sinit
01005cb8 g     F .text	00000084 _setlocale_r
01000334 g     F .text	00000044 WaitForTouch
010050e0 g     F .text	00000068 __sfmoreglue
0100a694 g     F .text	00000020 __malloc_unlock
0100becc g     F .text	00000090 alt_up_rs232_read_fd
010067b0 g     F .text	000000e0 memmove
010050d0 g     F .text	00000010 _cleanup
01006ea8 g     F .text	000000bc _Balloc
01000b04 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
0100b768 g     F .text	0000007c get_DDRAM_addr
01000000 g     F .entry	0000001c __reset
01000020 g       *ABS*	00000000 __flash_exceptions_start
010084b8 g     F .text	00000074 _fstat_r
01010c14 g     O .bss	00000004 errno
01010c1c g     O .bss	00000004 alt_argv
010170dc g       *ABS*	00000000 _gp
0100de78 g     O .rwdata	00000180 alt_fd_list
010005a0 g     F .text	00000204 GetRelease
0100c3a4 g     F .text	00000094 alt_find_dev
01006710 g     F .text	000000a0 memcpy
0100b97c g     F .text	0000004c alt_up_character_lcd_write_fd
010050c4 g     F .text	0000000c _cleanup_r
01000c14 g     F .text	000000f8 __floatsidf
0100c52c g     F .text	00000078 alt_io_redirect
01000b8c g     F .text	00000088 __ltdf2
0100d260 g       *ABS*	00000000 __DTOR_END__
0100be58 g     F .text	00000074 alt_up_rs232_read_data
01001490 g     F .text	00000014 puts
01006c84 g     F .text	000000b0 __ratio
0100b208 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
010013bc g     F .text	00000034 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
01009f48 g     F .text	00000008 __udivsi3
0100a2ac g     F .text	000000c0 isatty
0100d490 g     O .rodata	000000c8 __mprec_tens
01000204 g     F .text	00000040 wait_1s
01005c94 g     F .text	00000008 __locale_charset
0100cdc4 g     F .text	00000090 alt_icache_flush
01010c08 g     O .bss	00000004 __malloc_top_pad
0100f0e4 g     O .rwdata	00000004 __mb_cur_max
01005c9c g     F .text	0000000c _localeconv_r
010007a4 g     F .text	00000054 TestForReceivedData
010075a0 g     F .text	0000003c __i2b
01005678 g     F .text	0000049c __sfvwrite_r
01007f80 g     F .text	00000070 _sbrk_r
01008614 g     F .text	00000078 _read_r
0100da3c g     O .rwdata	0000000c __lc_ctype
0100f104 g     O .rwdata	00000004 alt_max_fd
0100bdc0 g     F .text	00000050 alt_up_rs232_check_parity
01001178 g     F .text	00000138 __unpack_d
01008394 g     F .text	00000110 _fclose_r
01004f44 g     F .text	00000034 fflush
01010c0c g     O .bss	00000004 __malloc_max_sbrked_mem
0100c5a4 g     F .text	000001c0 alt_irq_register
010096a8 g     F .text	00000074 __adddf3
01006b64 g     F .text	00000120 __b2d
01008c68 g     F .text	000005b0 __umoddi3
0100a4b8 g     F .text	000000f0 lseek
0100f0e0 g     O .rwdata	00000004 _global_impure_ptr
0100791c g     F .text	000005f4 _realloc_r
01010ee8 g       *ABS*	00000000 __bss_end
0100cac0 g     F .text	0000010c alt_tick
0100868c g     F .text	000005dc __udivdi3
0100d558 g     O .rodata	00000028 __mprec_bigtens
010077fc g     F .text	00000120 __s2b
01009c78 g     F .text	00000194 __floatunsidf
01006a84 g     F .text	00000060 __mcmp
01000244 g     F .text	000000c0 Init_Touch
010050ac g     F .text	00000018 __fp_lock_all
0100ca28 g     F .text	00000098 alt_alarm_stop
01010c24 g     O .bss	00000004 alt_irq_active
010000ec g     F .exceptions	000000cc alt_irq_handler
0100de50 g     O .rwdata	00000028 alt_dev_null
0100bc64 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0100c184 g     F .text	00000044 alt_dcache_flush_all
01006950 g     F .text	00000070 __hi0bits
01000d0c g     F .text	000000d8 __fixdfsi
0100f11c g       *ABS*	00000000 __ram_rwdata_end
0100f0fc g     O .rwdata	00000008 alt_dev_list
0100a950 g     F .text	00000120 write
0100d63c g       *ABS*	00000000 __ram_rodata_end
0100a178 g     F .text	000000d4 fstat
0100bf5c g     F .text	00000094 alt_up_rs232_write_fd
01000304 g     F .text	00000030 ScreenTouched
010076dc g     F .text	00000120 __pow5mult
01010bfc g     O .bss	00000004 __nlocale_changed
01009f50 g     F .text	00000008 __umodsi3
01010ee8 g       *ABS*	00000000 end
0100ad0c g     F .text	000000b8 altera_avalon_jtag_uart_init
0100d25c g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
0100b6e0 g     F .text	00000088 alt_avalon_timer_sc_init
01000de4 g     F .text	00000080 __clzsi2
0100b42c g     F .text	00000240 altera_avalon_jtag_uart_write
01004fd0 g     F .text	00000004 __sfp_lock_acquire
0100662c g     F .text	000000e4 memchr
0100b88c g     F .text	00000078 alt_up_character_lcd_write
01001570 g     F .text	00001eac ___vfprintf_internal_r
01005364 g     F .text	00000314 _free_r
0100d04c g     F .text	000001b0 __call_exitprocs
01010c00 g     O .bss	00000004 __mlocale_changed
0100f0f0 g     O .rwdata	00000004 __malloc_sbrk_base
010001b8 g     F .text	0000004c _start
01010c28 g     O .bss	00000004 _alt_tick_rate
0100726c g     F .text	0000014c __lshift
01010c2c g     O .bss	00000004 _alt_nticks
0100a6b4 g     F .text	00000120 read
0100ab04 g     F .text	00000088 alt_sys_init
0100baf0 g     F .text	000000b0 alt_up_character_lcd_shift_display
0100cf14 g     F .text	00000134 __register_exitproc
0100bd80 g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
010073b8 g     F .text	000001e8 __multiply
0100bba0 g     F .text	00000090 alt_up_character_lcd_erase_pos
0100b0a0 g     F .text	00000074 altera_avalon_jtag_uart_close
0100d63c g       *ABS*	00000000 __ram_rwdata_start
0100d260 g       *ABS*	00000000 __ram_rodata_start
01010c30 g     O .bss	00000028 __malloc_current_mallinfo
01006f64 g     F .text	0000017c __d2b
0100abc4 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0100cd0c g     F .text	000000b8 alt_get_fd
010012b0 g     F .text	000000c8 __fpcmp_parts_d
01008324 g     F .text	00000070 _close_r
0100cea0 g     F .text	00000074 memcmp
0100ac74 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
01010ee8 g       *ABS*	00000000 __alt_stack_base
0100acbc g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
01003440 g     F .text	0000013c __swsetup_r
010008ac g     F .text	00000258 __divdf3
01005148 g     F .text	000000f0 __sfp
01006dc8 g     F .text	00000058 __copybits
0100da48 g     O .rwdata	00000408 __malloc_av_
01004fdc g     F .text	00000004 __sinit_lock_release
0100971c g     F .text	000003c4 __muldf3
010080dc g     F .text	00000060 __sread
0100bcec g     F .text	00000058 alt_up_rs232_disable_read_interrupt
0100cbec g     F .text	00000120 alt_find_file
0100c1c8 g     F .text	000000b4 alt_dev_llist_insert
0100a674 g     F .text	00000020 __malloc_lock
0100a894 g     F .text	000000bc sbrk
01004d48 g     F .text	000001fc _fflush_r
01008270 g     F .text	000000b4 _calloc_r
01010bfc g       *ABS*	00000000 __bss_start
01006890 g     F .text	00000098 memset
01000880 g     F .text	0000002c main
01010c20 g     O .bss	00000004 alt_envp
01010c10 g     O .bss	00000004 __malloc_max_total_mem
0100ac1c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0100ba40 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
01007ff0 g     F .text	00000008 __sclose
01800000 g       *ABS*	00000000 __alt_heap_limit
010084a4 g     F .text	00000014 fclose
01010d58 g     O .bss	00000190 _atexit0
01003794 g     F .text	000015b4 _dtoa_r
01005eec g     F .text	00000740 _malloc_r
0100f108 g     O .rwdata	00000004 alt_errno
010007f8 g     F .text	00000040 putchartouch
01005bdc g     F .text	000000b8 _fwalk
01009e88 g     F .text	00000060 __divsi3
0100d2a4 g     O .rodata	00000014 __thenan_df
0100b84c g     F .text	00000040 alt_up_character_lcd_open_dev
01005238 g     F .text	0000012c _malloc_trim_r
0100d260 g       *ABS*	00000000 __CTOR_END__
0100b818 g     F .text	00000034 alt_up_character_lcd_init
0100813c g     F .text	000000bc strcmp
0100d260 g       *ABS*	00000000 __flash_rodata_start
0100d260 g       *ABS*	00000000 __DTOR_LIST__
0100bff0 g     F .text	00000040 alt_up_rs232_open_dev
01009b68 g     F .text	00000088 __nedf2
0100aad0 g     F .text	00000034 alt_irq_init
0100a834 g     F .text	00000060 alt_release_fd
0100bc30 g     F .text	00000034 alt_up_character_lcd_cursor_off
0100d2b8 g     O .rodata	00000100 __clz_tab
01010c04 g     O .bss	00000004 _PathLocale
0100ce54 g     F .text	00000014 atexit
010081f8 g     F .text	00000078 _write_r
01005d3c g     F .text	0000001c setlocale
0100f0dc g     O .rwdata	00000004 _impure_ptr
01010c18 g     O .bss	00000004 alt_argc
0100c340 g     F .text	00000064 _do_dtors
01000020 g       .exceptions	00000000 alt_irq_entry
01006ae4 g     F .text	00000080 __ulp
01007f10 g     F .text	00000040 __isinfd
01005094 g     F .text	00000018 __fp_unlock_all
0100f0f4 g     O .rwdata	00000008 alt_fs_list
0100bc98 g     F .text	00000054 alt_up_rs232_enable_read_interrupt
0100be10 g     F .text	00000048 alt_up_rs232_write_data
01000020 g       *ABS*	00000000 __ram_exceptions_start
01005ca8 g     F .text	00000010 localeconv
01000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
0100f11c g       *ABS*	00000000 _edata
01010ee8 g       *ABS*	00000000 _end
01000838 g     F .text	00000048 getchartouch
010001b8 g       *ABS*	00000000 __ram_exceptions_end
0100b114 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
01008060 g     F .text	0000007c __swrite
0100f0ec g     O .rwdata	00000004 __malloc_trim_threshold
0100cbcc g     F .text	00000020 altera_nios2_qsys_irq_init
0100ce68 g     F .text	00000038 exit
01005b14 g     F .text	000000c8 _fwalk_reent
010070e0 g     F .text	0000018c __mdiff
01009ee8 g     F .text	00000060 __modsi3
01800000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
01004fd4 g     F .text	00000004 __sfp_lock_release
0100b904 g     F .text	00000078 alt_up_character_lcd_string
0100d23c g     F .text	00000020 _exit
01007f50 g     F .text	00000030 __isnand
0100c030 g     F .text	00000154 alt_alarm_start
01009f58 g     F .text	00000098 __muldi3
01005d58 g     F .text	00000194 __smakebuf_r
010014a4 g     F .text	00000074 strlen
0100c840 g     F .text	00000188 open
01009bf0 g     F .text	00000088 __gedf2
0100c438 g     F .text	00000030 alt_icache_flush_all
0100b9c8 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
0100f110 g     O .rwdata	00000004 alt_priority_mask
0100341c g     F .text	00000024 __vfprintf_internal
01009628 g     F .text	00000080 __subdf3
010069c0 g     F .text	000000c4 __lo0bits
0100f114 g     O .rwdata	00000008 alt_alarm_list
0100c2dc g     F .text	00000064 _do_ctors
0100bd44 g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
01009ff0 g     F .text	000000fc close
0100a3cc g     F .text	00000080 alt_load
01000e64 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
01004fd8 g     F .text	00000004 __sinit_lock_acquire
010075dc g     F .text	00000100 __multadd
01006928 g     F .text	00000028 _Bfree



Disassembly of section .entry:

01000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1000000:	00900014 	movui	r2,16384
#endif

0:
    initi r2
 1000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100000c:	00bffd16 	blt	zero,r2,1000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000014:	08406e14 	ori	at,at,440
    jmp r1
 1000018:	0800683a 	jmp	at
 100001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>

Disassembly of section .exceptions:

01000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10000fc:	0005313a 	rdctl	r2,ipending
 1000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 100010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000110:	00800044 	movi	r2,1
 1000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1000118:	e0ffff17 	ldw	r3,-4(fp)
 100011c:	e0bffe17 	ldw	r2,-8(fp)
 1000120:	1884703a 	and	r2,r3,r2
 1000124:	1005003a 	cmpeq	r2,r2,zero
 1000128:	1000171e 	bne	r2,zero,1000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 100012c:	e0bffd17 	ldw	r2,-12(fp)
 1000130:	00c04074 	movhi	r3,257
 1000134:	18c31604 	addi	r3,r3,3160
 1000138:	100490fa 	slli	r2,r2,3
 100013c:	10c5883a 	add	r2,r2,r3
 1000140:	11800017 	ldw	r6,0(r2)
 1000144:	e0bffd17 	ldw	r2,-12(fp)
 1000148:	00c04074 	movhi	r3,257
 100014c:	18c31604 	addi	r3,r3,3160
 1000150:	100490fa 	slli	r2,r2,3
 1000154:	10c5883a 	add	r2,r2,r3
 1000158:	10800104 	addi	r2,r2,4
 100015c:	11000017 	ldw	r4,0(r2)
 1000160:	e17ffd17 	ldw	r5,-12(fp)
 1000164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000168:	0005313a 	rdctl	r2,ipending
 100016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 1000170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1000174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1000178:	e0bfff17 	ldw	r2,-4(fp)
 100017c:	1004c03a 	cmpne	r2,r2,zero
 1000180:	103fe21e 	bne	r2,zero,100010c <alt_irq_handler+0x20>
 1000184:	00000706 	br	10001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1000188:	e0bffe17 	ldw	r2,-8(fp)
 100018c:	1085883a 	add	r2,r2,r2
 1000190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1000194:	e0bffd17 	ldw	r2,-12(fp)
 1000198:	10800044 	addi	r2,r2,1
 100019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10001a0:	003fdd06 	br	1000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10001a4:	e037883a 	mov	sp,fp
 10001a8:	dfc00117 	ldw	ra,4(sp)
 10001ac:	df000017 	ldw	fp,0(sp)
 10001b0:	dec00204 	addi	sp,sp,8
 10001b4:	f800283a 	ret

Disassembly of section .text:

010001b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 10001b8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 10001bc:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 10001c0:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 10001c4:	00bffd16 	blt	zero,r2,10001bc <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001c8:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 10001cc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001d0:	06804074 	movhi	gp,257
    ori gp, gp, %lo(_gp)
 10001d4:	d69c3714 	ori	gp,gp,28892
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001d8:	00804074 	movhi	r2,257
    ori r2, r2, %lo(__bss_start)
 10001dc:	1082ff14 	ori	r2,r2,3068

    movhi r3, %hi(__bss_end)
 10001e0:	00c04074 	movhi	r3,257
    ori r3, r3, %lo(__bss_end)
 10001e4:	18c3ba14 	ori	r3,r3,3816

    beq r2, r3, 1f
 10001e8:	10c00326 	beq	r2,r3,10001f8 <_start+0x40>

0:
    stw zero, (r2)
 10001ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001f4:	10fffd36 	bltu	r2,r3,10001ec <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001f8:	100a3cc0 	call	100a3cc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001fc:	100a6080 	call	100a608 <alt_main>

01000200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1000200:	003fff06 	br	1000200 <alt_after_alt_main>

01000204 <wait_1s>:
#define touchscreen_TxData (*(volatile unsigned char *)(0x84000232))
#define touchscreen_RxData (*(volatile unsigned char *)(0x84000232))
#define touchscreen_Baud (*(volatile unsigned char *)(0x84000234))


void wait_1s(void){
 1000204:	defffe04 	addi	sp,sp,-8
 1000208:	df000115 	stw	fp,4(sp)
 100020c:	df000104 	addi	fp,sp,4
	int i;
	for( i = 0; i < 1000000; i++);
 1000210:	e03fff15 	stw	zero,-4(fp)
 1000214:	00000306 	br	1000224 <wait_1s+0x20>
 1000218:	e0bfff17 	ldw	r2,-4(fp)
 100021c:	10800044 	addi	r2,r2,1
 1000220:	e0bfff15 	stw	r2,-4(fp)
 1000224:	e0ffff17 	ldw	r3,-4(fp)
 1000228:	008003f4 	movhi	r2,15
 100022c:	10908fc4 	addi	r2,r2,16959
 1000230:	10fff90e 	bge	r2,r3,1000218 <wait_1s+0x14>
}
 1000234:	e037883a 	mov	sp,fp
 1000238:	df000017 	ldw	fp,0(sp)
 100023c:	dec00104 	addi	sp,sp,4
 1000240:	f800283a 	ret

01000244 <Init_Touch>:

void Init_Touch(void)
{
 1000244:	defffd04 	addi	sp,sp,-12
 1000248:	dfc00215 	stw	ra,8(sp)
 100024c:	df000115 	stw	fp,4(sp)
 1000250:	df000104 	addi	fp,sp,4
	touchscreen_Baud = 0x05; // program for 115k baud
 1000254:	00e10034 	movhi	r3,33792
 1000258:	18c08d04 	addi	r3,r3,564
 100025c:	00800144 	movi	r2,5
 1000260:	18800005 	stb	r2,0(r3)
	touchscreen_Control = 0x15;
 1000264:	00e10034 	movhi	r3,33792
 1000268:	18c08c04 	addi	r3,r3,560
 100026c:	00800544 	movi	r2,21
 1000270:	18800005 	stb	r2,0(r3)

	char cmd[3];
	cmd[0] = 0x55;
 1000274:	00801544 	movi	r2,85
 1000278:	e0bfff05 	stb	r2,-4(fp)
	cmd[1] = 0x01;
 100027c:	00800044 	movi	r2,1
 1000280:	e0bfff45 	stb	r2,-3(fp)
	cmd[2] = 0x12;
 1000284:	00800484 	movi	r2,18
 1000288:	e0bfff85 	stb	r2,-2(fp)

	while(touchscreen_Status & 0x02 != 0x02){
 100028c:	00a10034 	movhi	r2,33792
 1000290:	10808c04 	addi	r2,r2,560
 1000294:	10800003 	ldbu	r2,0(r2)
	}
	touchscreen_TxData = cmd[0]; //0x68
 1000298:	00e10034 	movhi	r3,33792
 100029c:	18c08c84 	addi	r3,r3,562
 10002a0:	e0bfff03 	ldbu	r2,-4(fp)
 10002a4:	18800005 	stb	r2,0(r3)

	while(touchscreen_Status & 0x02 != 0x02){
 10002a8:	00a10034 	movhi	r2,33792
 10002ac:	10808c04 	addi	r2,r2,560
 10002b0:	10800003 	ldbu	r2,0(r2)
	}
	touchscreen_TxData = cmd[1];
 10002b4:	00e10034 	movhi	r3,33792
 10002b8:	18c08c84 	addi	r3,r3,562
 10002bc:	e0bfff43 	ldbu	r2,-3(fp)
 10002c0:	18800005 	stb	r2,0(r3)

	while(touchscreen_Status & 0x02 != 0x02){
 10002c4:	00a10034 	movhi	r2,33792
 10002c8:	10808c04 	addi	r2,r2,560
 10002cc:	10800003 	ldbu	r2,0(r2)
	}
	touchscreen_TxData = cmd[2];
 10002d0:	00e10034 	movhi	r3,33792
 10002d4:	18c08c84 	addi	r3,r3,562
 10002d8:	e0bfff83 	ldbu	r2,-2(fp)
 10002dc:	18800005 	stb	r2,0(r3)

	putchartouch(0x51);
 10002e0:	01001444 	movi	r4,81
 10002e4:	10007f80 	call	10007f8 <putchartouch>
	putchartouch(0x41);
 10002e8:	01001044 	movi	r4,65
 10002ec:	10007f80 	call	10007f8 <putchartouch>
}
 10002f0:	e037883a 	mov	sp,fp
 10002f4:	dfc00117 	ldw	ra,4(sp)
 10002f8:	df000017 	ldw	fp,0(sp)
 10002fc:	dec00204 	addi	sp,sp,8
 1000300:	f800283a 	ret

01000304 <ScreenTouched>:


int ScreenTouched( void )
{
 1000304:	deffff04 	addi	sp,sp,-4
 1000308:	df000015 	stw	fp,0(sp)
 100030c:	d839883a 	mov	fp,sp
	return((touchscreen_Status & 0x1) == 0x1);
 1000310:	00a10034 	movhi	r2,33792
 1000314:	10808c04 	addi	r2,r2,560
 1000318:	10800003 	ldbu	r2,0(r2)
 100031c:	10803fcc 	andi	r2,r2,255
 1000320:	1080004c 	andi	r2,r2,1
}
 1000324:	e037883a 	mov	sp,fp
 1000328:	df000017 	ldw	fp,0(sp)
 100032c:	dec00104 	addi	sp,sp,4
 1000330:	f800283a 	ret

01000334 <WaitForTouch>:

void WaitForTouch()
{
 1000334:	defffe04 	addi	sp,sp,-8
 1000338:	dfc00115 	stw	ra,4(sp)
 100033c:	df000015 	stw	fp,0(sp)
 1000340:	d839883a 	mov	fp,sp
while(!ScreenTouched()){
 1000344:	00000406 	br	1000358 <WaitForTouch+0x24>
	printf("waiting for screen\n");
 1000348:	01004074 	movhi	r4,257
 100034c:	21349804 	addi	r4,r4,-11680
 1000350:	10014900 	call	1001490 <puts>
	wait_1s();
 1000354:	10002040 	call	1000204 <wait_1s>
	return((touchscreen_Status & 0x1) == 0x1);
}

void WaitForTouch()
{
while(!ScreenTouched()){
 1000358:	10003040 	call	1000304 <ScreenTouched>
 100035c:	1005003a 	cmpeq	r2,r2,zero
 1000360:	103ff91e 	bne	r2,zero,1000348 <WaitForTouch+0x14>
	printf("waiting for screen\n");
	wait_1s();
}
}
 1000364:	e037883a 	mov	sp,fp
 1000368:	dfc00117 	ldw	ra,4(sp)
 100036c:	df000017 	ldw	fp,0(sp)
 1000370:	dec00204 	addi	sp,sp,8
 1000374:	f800283a 	ret

01000378 <GetPress>:

typedef struct { int x, y; } Point ;

Point GetPress(void)
{
 1000378:	defff004 	addi	sp,sp,-64
 100037c:	dfc00f15 	stw	ra,60(sp)
 1000380:	df000e15 	stw	fp,56(sp)
 1000384:	df000e04 	addi	fp,sp,56
 int x1, x2, y1, y2;
 int x,y;
 double xf,yf;

 int coord;
 coord = getchartouch();
 1000388:	10008380 	call	1000838 <getchartouch>
 100038c:	e0bff315 	stw	r2,-52(fp)
 if(coord == 0x81){
 1000390:	e0bff317 	ldw	r2,-52(fp)
 1000394:	10802058 	cmpnei	r2,r2,129
 1000398:	1000761e 	bne	r2,zero,1000574 <GetPress+0x1fc>
	 printf("pen down\n");
 100039c:	01004074 	movhi	r4,257
 10003a0:	21349d04 	addi	r4,r4,-11660
 10003a4:	10014900 	call	1001490 <puts>
	 while (getchartouch() != 0x80);{
 10003a8:	10008380 	call	1000838 <getchartouch>
 10003ac:	10802018 	cmpnei	r2,r2,128
 10003b0:	103ffd1e 	bne	r2,zero,10003a8 <GetPress+0x30>
		 x1 = getchartouch() & 0x7f;
 10003b4:	10008380 	call	1000838 <getchartouch>
 10003b8:	10801fcc 	andi	r2,r2,127
 10003bc:	e0bffd15 	stw	r2,-12(fp)
		 x2 = getchartouch() & 0x1f;
 10003c0:	10008380 	call	1000838 <getchartouch>
 10003c4:	108007cc 	andi	r2,r2,31
 10003c8:	e0bffc15 	stw	r2,-16(fp)
		 y1 = getchartouch() & 0x7f;
 10003cc:	10008380 	call	1000838 <getchartouch>
 10003d0:	10801fcc 	andi	r2,r2,127
 10003d4:	e0bffb15 	stw	r2,-20(fp)
		 y2 = getchartouch() & 0x1f;
 10003d8:	10008380 	call	1000838 <getchartouch>
 10003dc:	108007cc 	andi	r2,r2,31
 10003e0:	e0bffa15 	stw	r2,-24(fp)

	 }
	// printf("%d %d %d %d\n", x1,x2, x1, y2);
	 x = x1 | (x2 << 7);
 10003e4:	e0bffc17 	ldw	r2,-16(fp)
 10003e8:	100691fa 	slli	r3,r2,7
 10003ec:	e0bffd17 	ldw	r2,-12(fp)
 10003f0:	1884b03a 	or	r2,r3,r2
 10003f4:	e0bff915 	stw	r2,-28(fp)
	 y = y1 | (y2 << 7);
 10003f8:	e0bffa17 	ldw	r2,-24(fp)
 10003fc:	100691fa 	slli	r3,r2,7
 1000400:	e0bffb17 	ldw	r2,-20(fp)
 1000404:	1884b03a 	or	r2,r3,r2
 1000408:	e0bff815 	stw	r2,-32(fp)
	 //x = x;;
	 //y = y;
	 xf = (x-108)/(4.89875);
 100040c:	e0bff917 	ldw	r2,-28(fp)
 1000410:	113fe504 	addi	r4,r2,-108
 1000414:	1000c140 	call	1000c14 <__floatsidf>
 1000418:	100b883a 	mov	r5,r2
 100041c:	180d883a 	mov	r6,r3
 1000420:	2809883a 	mov	r4,r5
 1000424:	300b883a 	mov	r5,r6
 1000428:	01bae174 	movhi	r6,60293
 100042c:	3187ae04 	addi	r6,r6,7864
 1000430:	01d00534 	movhi	r7,16404
 1000434:	39e61444 	addi	r7,r7,-26543
 1000438:	10008ac0 	call	10008ac <__divdf3>
 100043c:	1009883a 	mov	r4,r2
 1000440:	180b883a 	mov	r5,r3
 1000444:	e13ff615 	stw	r4,-40(fp)
 1000448:	e17ff715 	stw	r5,-36(fp)
	 yf = (y-260)/(7.84167);
 100044c:	e0bff817 	ldw	r2,-32(fp)
 1000450:	113fbf04 	addi	r4,r2,-260
 1000454:	1000c140 	call	1000c14 <__floatsidf>
 1000458:	100b883a 	mov	r5,r2
 100045c:	180d883a 	mov	r6,r3
 1000460:	2809883a 	mov	r4,r5
 1000464:	300b883a 	mov	r5,r6
 1000468:	01af6434 	movhi	r6,48528
 100046c:	318639c4 	addi	r6,r6,6375
 1000470:	01d007f4 	movhi	r7,16415
 1000474:	39d77784 	addi	r7,r7,24030
 1000478:	10008ac0 	call	10008ac <__divdf3>
 100047c:	1009883a 	mov	r4,r2
 1000480:	180b883a 	mov	r5,r3
 1000484:	e13ff415 	stw	r4,-48(fp)
 1000488:	e17ff515 	stw	r5,-44(fp)
	 if(xf < 0){
 100048c:	e13ff617 	ldw	r4,-40(fp)
 1000490:	e17ff717 	ldw	r5,-36(fp)
 1000494:	000d883a 	mov	r6,zero
 1000498:	000f883a 	mov	r7,zero
 100049c:	1000b8c0 	call	1000b8c <__ltdf2>
 10004a0:	1004803a 	cmplt	r2,r2,zero
 10004a4:	1000011e 	bne	r2,zero,10004ac <GetPress+0x134>
 10004a8:	00000206 	br	10004b4 <GetPress+0x13c>
		 xf =0;
 10004ac:	e03ff615 	stw	zero,-40(fp)
 10004b0:	e03ff715 	stw	zero,-36(fp)
	 }
	 if(xf > 800){
 10004b4:	e13ff617 	ldw	r4,-40(fp)
 10004b8:	e17ff717 	ldw	r5,-36(fp)
 10004bc:	000d883a 	mov	r6,zero
 10004c0:	01d02274 	movhi	r7,16521
 10004c4:	1000b040 	call	1000b04 <__gtdf2>
 10004c8:	10800048 	cmpgei	r2,r2,1
 10004cc:	1000011e 	bne	r2,zero,10004d4 <GetPress+0x15c>
 10004d0:	00000306 	br	10004e0 <GetPress+0x168>
		 xf = 800;
 10004d4:	e03ff615 	stw	zero,-40(fp)
 10004d8:	00902274 	movhi	r2,16521
 10004dc:	e0bff715 	stw	r2,-36(fp)
	 }
	 if(yf < 0){
 10004e0:	e13ff417 	ldw	r4,-48(fp)
 10004e4:	e17ff517 	ldw	r5,-44(fp)
 10004e8:	000d883a 	mov	r6,zero
 10004ec:	000f883a 	mov	r7,zero
 10004f0:	1000b8c0 	call	1000b8c <__ltdf2>
 10004f4:	1004803a 	cmplt	r2,r2,zero
 10004f8:	1000011e 	bne	r2,zero,1000500 <GetPress+0x188>
 10004fc:	00000206 	br	1000508 <GetPress+0x190>
		 yf =0;
 1000500:	e03ff415 	stw	zero,-48(fp)
 1000504:	e03ff515 	stw	zero,-44(fp)
	 }
	 if(yf > 480){
 1000508:	e13ff417 	ldw	r4,-48(fp)
 100050c:	e17ff517 	ldw	r5,-44(fp)
 1000510:	000d883a 	mov	r6,zero
 1000514:	01d01fb4 	movhi	r7,16510
 1000518:	1000b040 	call	1000b04 <__gtdf2>
 100051c:	10800048 	cmpgei	r2,r2,1
 1000520:	1000011e 	bne	r2,zero,1000528 <GetPress+0x1b0>
 1000524:	00000306 	br	1000534 <GetPress+0x1bc>
		 yf = 480;
 1000528:	e03ff415 	stw	zero,-48(fp)
 100052c:	00901fb4 	movhi	r2,16510
 1000530:	e0bff515 	stw	r2,-44(fp)
	 }
	 printf("%lf %lf\n", xf,yf);
 1000534:	e0bff517 	ldw	r2,-44(fp)
 1000538:	d8800015 	stw	r2,0(sp)
 100053c:	e1fff417 	ldw	r7,-48(fp)
 1000540:	01004074 	movhi	r4,257
 1000544:	2134a004 	addi	r4,r4,-11648
 1000548:	e17ff617 	ldw	r5,-40(fp)
 100054c:	e1bff717 	ldw	r6,-36(fp)
 1000550:	10013780 	call	1001378 <printf>
	 p1.x = xf;
 1000554:	e13ff617 	ldw	r4,-40(fp)
 1000558:	e17ff717 	ldw	r5,-36(fp)
 100055c:	1000d0c0 	call	1000d0c <__fixdfsi>
 1000560:	e0bffe15 	stw	r2,-8(fp)
	 p1.y = yf;
 1000564:	e13ff417 	ldw	r4,-48(fp)
 1000568:	e17ff517 	ldw	r5,-44(fp)
 100056c:	1000d0c0 	call	1000d0c <__fixdfsi>
 1000570:	e0bfff15 	stw	r2,-4(fp)
 }

 return p1;
 1000574:	e17ffe17 	ldw	r5,-8(fp)
 1000578:	e1bfff17 	ldw	r6,-4(fp)
 100057c:	2807883a 	mov	r3,r5
 1000580:	3009883a 	mov	r4,r6
}
 1000584:	1805883a 	mov	r2,r3
 1000588:	2007883a 	mov	r3,r4
 100058c:	e037883a 	mov	sp,fp
 1000590:	dfc00117 	ldw	ra,4(sp)
 1000594:	df000017 	ldw	fp,0(sp)
 1000598:	dec00204 	addi	sp,sp,8
 100059c:	f800283a 	ret

010005a0 <GetRelease>:

Point GetRelease(void)
{
 10005a0:	defff004 	addi	sp,sp,-64
 10005a4:	dfc00f15 	stw	ra,60(sp)
 10005a8:	df000e15 	stw	fp,56(sp)
 10005ac:	df000e04 	addi	fp,sp,56
	int x1, x2, y1, y2;
	 int x,y;
	 double xf,yf;

	 int coord;
	 coord = getchartouch();
 10005b0:	10008380 	call	1000838 <getchartouch>
 10005b4:	e0bff315 	stw	r2,-52(fp)
	 if(coord == 0x80){
 10005b8:	e0bff317 	ldw	r2,-52(fp)
 10005bc:	10802018 	cmpnei	r2,r2,128
 10005c0:	1000731e 	bne	r2,zero,1000790 <GetRelease+0x1f0>
		 printf("pen up\n");
 10005c4:	01004074 	movhi	r4,257
 10005c8:	2134a304 	addi	r4,r4,-11636
 10005cc:	10014900 	call	1001490 <puts>
		 //while (getchartouch() != 0x80);{
			 x1 = getchartouch() & 0x7f;
 10005d0:	10008380 	call	1000838 <getchartouch>
 10005d4:	10801fcc 	andi	r2,r2,127
 10005d8:	e0bffd15 	stw	r2,-12(fp)
			 x2 = getchartouch() & 0x1f;
 10005dc:	10008380 	call	1000838 <getchartouch>
 10005e0:	108007cc 	andi	r2,r2,31
 10005e4:	e0bffc15 	stw	r2,-16(fp)
			 y1 = getchartouch() & 0x7f;
 10005e8:	10008380 	call	1000838 <getchartouch>
 10005ec:	10801fcc 	andi	r2,r2,127
 10005f0:	e0bffb15 	stw	r2,-20(fp)
			 y2 = getchartouch() & 0x1f;
 10005f4:	10008380 	call	1000838 <getchartouch>
 10005f8:	108007cc 	andi	r2,r2,31
 10005fc:	e0bffa15 	stw	r2,-24(fp)

		 //}
		// printf("%d %d %d %d\n", x1,x2, x1, y2);
		 x = x1 | (x2 << 7);
 1000600:	e0bffc17 	ldw	r2,-16(fp)
 1000604:	100691fa 	slli	r3,r2,7
 1000608:	e0bffd17 	ldw	r2,-12(fp)
 100060c:	1884b03a 	or	r2,r3,r2
 1000610:	e0bff915 	stw	r2,-28(fp)
		 y = y1 | (y2 << 7);
 1000614:	e0bffa17 	ldw	r2,-24(fp)
 1000618:	100691fa 	slli	r3,r2,7
 100061c:	e0bffb17 	ldw	r2,-20(fp)
 1000620:	1884b03a 	or	r2,r3,r2
 1000624:	e0bff815 	stw	r2,-32(fp)
		 xf = (x-108)/(4.89875);
 1000628:	e0bff917 	ldw	r2,-28(fp)
 100062c:	113fe504 	addi	r4,r2,-108
 1000630:	1000c140 	call	1000c14 <__floatsidf>
 1000634:	100b883a 	mov	r5,r2
 1000638:	180d883a 	mov	r6,r3
 100063c:	2809883a 	mov	r4,r5
 1000640:	300b883a 	mov	r5,r6
 1000644:	01bae174 	movhi	r6,60293
 1000648:	3187ae04 	addi	r6,r6,7864
 100064c:	01d00534 	movhi	r7,16404
 1000650:	39e61444 	addi	r7,r7,-26543
 1000654:	10008ac0 	call	10008ac <__divdf3>
 1000658:	1009883a 	mov	r4,r2
 100065c:	180b883a 	mov	r5,r3
 1000660:	e13ff615 	stw	r4,-40(fp)
 1000664:	e17ff715 	stw	r5,-36(fp)
		 yf = (y-260)/(7.84167);
 1000668:	e0bff817 	ldw	r2,-32(fp)
 100066c:	113fbf04 	addi	r4,r2,-260
 1000670:	1000c140 	call	1000c14 <__floatsidf>
 1000674:	100b883a 	mov	r5,r2
 1000678:	180d883a 	mov	r6,r3
 100067c:	2809883a 	mov	r4,r5
 1000680:	300b883a 	mov	r5,r6
 1000684:	01af6434 	movhi	r6,48528
 1000688:	318639c4 	addi	r6,r6,6375
 100068c:	01d007f4 	movhi	r7,16415
 1000690:	39d77784 	addi	r7,r7,24030
 1000694:	10008ac0 	call	10008ac <__divdf3>
 1000698:	1009883a 	mov	r4,r2
 100069c:	180b883a 	mov	r5,r3
 10006a0:	e13ff415 	stw	r4,-48(fp)
 10006a4:	e17ff515 	stw	r5,-44(fp)
		 if(xf < 0){
 10006a8:	e13ff617 	ldw	r4,-40(fp)
 10006ac:	e17ff717 	ldw	r5,-36(fp)
 10006b0:	000d883a 	mov	r6,zero
 10006b4:	000f883a 	mov	r7,zero
 10006b8:	1000b8c0 	call	1000b8c <__ltdf2>
 10006bc:	1004803a 	cmplt	r2,r2,zero
 10006c0:	1000011e 	bne	r2,zero,10006c8 <GetRelease+0x128>
 10006c4:	00000206 	br	10006d0 <GetRelease+0x130>
			 xf =0;
 10006c8:	e03ff615 	stw	zero,-40(fp)
 10006cc:	e03ff715 	stw	zero,-36(fp)
		 }
		 if(xf > 800){
 10006d0:	e13ff617 	ldw	r4,-40(fp)
 10006d4:	e17ff717 	ldw	r5,-36(fp)
 10006d8:	000d883a 	mov	r6,zero
 10006dc:	01d02274 	movhi	r7,16521
 10006e0:	1000b040 	call	1000b04 <__gtdf2>
 10006e4:	10800048 	cmpgei	r2,r2,1
 10006e8:	1000011e 	bne	r2,zero,10006f0 <GetRelease+0x150>
 10006ec:	00000306 	br	10006fc <GetRelease+0x15c>
			 xf = 800;
 10006f0:	e03ff615 	stw	zero,-40(fp)
 10006f4:	00902274 	movhi	r2,16521
 10006f8:	e0bff715 	stw	r2,-36(fp)
		 }
		 if(yf < 0){
 10006fc:	e13ff417 	ldw	r4,-48(fp)
 1000700:	e17ff517 	ldw	r5,-44(fp)
 1000704:	000d883a 	mov	r6,zero
 1000708:	000f883a 	mov	r7,zero
 100070c:	1000b8c0 	call	1000b8c <__ltdf2>
 1000710:	1004803a 	cmplt	r2,r2,zero
 1000714:	1000011e 	bne	r2,zero,100071c <GetRelease+0x17c>
 1000718:	00000206 	br	1000724 <GetRelease+0x184>
			 yf =0;
 100071c:	e03ff415 	stw	zero,-48(fp)
 1000720:	e03ff515 	stw	zero,-44(fp)
		 }
		 if(yf > 480){
 1000724:	e13ff417 	ldw	r4,-48(fp)
 1000728:	e17ff517 	ldw	r5,-44(fp)
 100072c:	000d883a 	mov	r6,zero
 1000730:	01d01fb4 	movhi	r7,16510
 1000734:	1000b040 	call	1000b04 <__gtdf2>
 1000738:	10800048 	cmpgei	r2,r2,1
 100073c:	1000011e 	bne	r2,zero,1000744 <GetRelease+0x1a4>
 1000740:	00000306 	br	1000750 <GetRelease+0x1b0>
			 yf = 480;
 1000744:	e03ff415 	stw	zero,-48(fp)
 1000748:	00901fb4 	movhi	r2,16510
 100074c:	e0bff515 	stw	r2,-44(fp)
		 }
		 //x = x;;
		 //y = y;
		 printf("%lf %lf\n", xf,yf);
 1000750:	e0bff517 	ldw	r2,-44(fp)
 1000754:	d8800015 	stw	r2,0(sp)
 1000758:	e1fff417 	ldw	r7,-48(fp)
 100075c:	01004074 	movhi	r4,257
 1000760:	2134a004 	addi	r4,r4,-11648
 1000764:	e17ff617 	ldw	r5,-40(fp)
 1000768:	e1bff717 	ldw	r6,-36(fp)
 100076c:	10013780 	call	1001378 <printf>
		 p1.x = xf;
 1000770:	e13ff617 	ldw	r4,-40(fp)
 1000774:	e17ff717 	ldw	r5,-36(fp)
 1000778:	1000d0c0 	call	1000d0c <__fixdfsi>
 100077c:	e0bffe15 	stw	r2,-8(fp)
		 p1.y = yf;
 1000780:	e13ff417 	ldw	r4,-48(fp)
 1000784:	e17ff517 	ldw	r5,-44(fp)
 1000788:	1000d0c0 	call	1000d0c <__fixdfsi>
 100078c:	e0bfff15 	stw	r2,-4(fp)
	 }

}
 1000790:	e037883a 	mov	sp,fp
 1000794:	dfc00117 	ldw	ra,4(sp)
 1000798:	df000017 	ldw	fp,0(sp)
 100079c:	dec00204 	addi	sp,sp,8
 10007a0:	f800283a 	ret

010007a4 <TestForReceivedData>:

int TestForReceivedData(void){
 10007a4:	defffe04 	addi	sp,sp,-8
 10007a8:	dfc00115 	stw	ra,4(sp)
 10007ac:	df000015 	stw	fp,0(sp)
 10007b0:	d839883a 	mov	fp,sp
	if(getchartouch() == 0x81){
 10007b4:	10008380 	call	1000838 <getchartouch>
 10007b8:	10802058 	cmpnei	r2,r2,129
 10007bc:	1000031e 	bne	r2,zero,10007cc <TestForReceivedData+0x28>
		printf("pen down\n");
 10007c0:	01004074 	movhi	r4,257
 10007c4:	21349d04 	addi	r4,r4,-11660
 10007c8:	10014900 	call	1001490 <puts>
	}
	if(getchartouch() == 0x80){
 10007cc:	10008380 	call	1000838 <getchartouch>
 10007d0:	10802018 	cmpnei	r2,r2,128
 10007d4:	1000031e 	bne	r2,zero,10007e4 <TestForReceivedData+0x40>
		printf("pen up\n");
 10007d8:	01004074 	movhi	r4,257
 10007dc:	2134a304 	addi	r4,r4,-11636
 10007e0:	10014900 	call	1001490 <puts>
	}

}
 10007e4:	e037883a 	mov	sp,fp
 10007e8:	dfc00117 	ldw	ra,4(sp)
 10007ec:	df000017 	ldw	fp,0(sp)
 10007f0:	dec00204 	addi	sp,sp,8
 10007f4:	f800283a 	ret

010007f8 <putchartouch>:

int putchartouch(int c){
 10007f8:	defffe04 	addi	sp,sp,-8
 10007fc:	df000115 	stw	fp,4(sp)
 1000800:	df000104 	addi	fp,sp,4
 1000804:	e13fff15 	stw	r4,-4(fp)

	while(touchscreen_Status & 0x02 != 0x02){
 1000808:	00a10034 	movhi	r2,33792
 100080c:	10808c04 	addi	r2,r2,560
 1000810:	10800003 	ldbu	r2,0(r2)
	}

	touchscreen_TxData = c;
 1000814:	00e10034 	movhi	r3,33792
 1000818:	18c08c84 	addi	r3,r3,562
 100081c:	e0bfff17 	ldw	r2,-4(fp)
 1000820:	18800005 	stb	r2,0(r3)
	return c ;
 1000824:	e0bfff17 	ldw	r2,-4(fp)
}
 1000828:	e037883a 	mov	sp,fp
 100082c:	df000017 	ldw	fp,0(sp)
 1000830:	dec00104 	addi	sp,sp,4
 1000834:	f800283a 	ret

01000838 <getchartouch>:

int getchartouch(void){
 1000838:	deffff04 	addi	sp,sp,-4
 100083c:	df000015 	stw	fp,0(sp)
 1000840:	d839883a 	mov	fp,sp

	while(!((touchscreen_Status & 0x1) == 0x1)){
 1000844:	00a10034 	movhi	r2,33792
 1000848:	10808c04 	addi	r2,r2,560
 100084c:	10800003 	ldbu	r2,0(r2)
 1000850:	10803fcc 	andi	r2,r2,255
 1000854:	1080004c 	andi	r2,r2,1
 1000858:	1005003a 	cmpeq	r2,r2,zero
 100085c:	103ff91e 	bne	r2,zero,1000844 <getchartouch+0xc>
	}

	return touchscreen_RxData;
 1000860:	00a10034 	movhi	r2,33792
 1000864:	10808c84 	addi	r2,r2,562
 1000868:	10800003 	ldbu	r2,0(r2)
 100086c:	10803fcc 	andi	r2,r2,255
}
 1000870:	e037883a 	mov	sp,fp
 1000874:	df000017 	ldw	fp,0(sp)
 1000878:	dec00104 	addi	sp,sp,4
 100087c:	f800283a 	ret

01000880 <main>:


int main(){
 1000880:	defffa04 	addi	sp,sp,-24
 1000884:	dfc00515 	stw	ra,20(sp)
 1000888:	df000415 	stw	fp,16(sp)
 100088c:	df000404 	addi	fp,sp,16

	Point coord1;
	Point coord2;
	Init_Touch();
 1000890:	10002440 	call	1000244 <Init_Touch>
	printf("init test\n\n\n\n");
 1000894:	01004074 	movhi	r4,257
 1000898:	2134a504 	addi	r4,r4,-11628
 100089c:	10014900 	call	1001490 <puts>

	while(1){
		//WaitForTouch();
		GetPress();
 10008a0:	10003780 	call	1000378 <GetPress>
		GetRelease();
 10008a4:	10005a00 	call	10005a0 <GetRelease>
		//TestForReceivedData();
		//ScreenTouched();
		//wait_1s();
	}
 10008a8:	003ffd06 	br	10008a0 <main+0x20>

010008ac <__divdf3>:
 10008ac:	deffed04 	addi	sp,sp,-76
 10008b0:	dcc01115 	stw	r19,68(sp)
 10008b4:	dcc00404 	addi	r19,sp,16
 10008b8:	2011883a 	mov	r8,r4
 10008bc:	2813883a 	mov	r9,r5
 10008c0:	dc000e15 	stw	r16,56(sp)
 10008c4:	d809883a 	mov	r4,sp
 10008c8:	980b883a 	mov	r5,r19
 10008cc:	dc000904 	addi	r16,sp,36
 10008d0:	dfc01215 	stw	ra,72(sp)
 10008d4:	da400115 	stw	r9,4(sp)
 10008d8:	d9c00315 	stw	r7,12(sp)
 10008dc:	da000015 	stw	r8,0(sp)
 10008e0:	d9800215 	stw	r6,8(sp)
 10008e4:	dc801015 	stw	r18,64(sp)
 10008e8:	dc400f15 	stw	r17,60(sp)
 10008ec:	10011780 	call	1001178 <__unpack_d>
 10008f0:	d9000204 	addi	r4,sp,8
 10008f4:	800b883a 	mov	r5,r16
 10008f8:	10011780 	call	1001178 <__unpack_d>
 10008fc:	d9000417 	ldw	r4,16(sp)
 1000900:	00800044 	movi	r2,1
 1000904:	11000b2e 	bgeu	r2,r4,1000934 <__divdf3+0x88>
 1000908:	d9400917 	ldw	r5,36(sp)
 100090c:	1140762e 	bgeu	r2,r5,1000ae8 <__divdf3+0x23c>
 1000910:	d8800517 	ldw	r2,20(sp)
 1000914:	d8c00a17 	ldw	r3,40(sp)
 1000918:	01800104 	movi	r6,4
 100091c:	10c4f03a 	xor	r2,r2,r3
 1000920:	d8800515 	stw	r2,20(sp)
 1000924:	21800226 	beq	r4,r6,1000930 <__divdf3+0x84>
 1000928:	00800084 	movi	r2,2
 100092c:	2080141e 	bne	r4,r2,1000980 <__divdf3+0xd4>
 1000930:	29000926 	beq	r5,r4,1000958 <__divdf3+0xac>
 1000934:	9809883a 	mov	r4,r19
 1000938:	1000e640 	call	1000e64 <__pack_d>
 100093c:	dfc01217 	ldw	ra,72(sp)
 1000940:	dcc01117 	ldw	r19,68(sp)
 1000944:	dc801017 	ldw	r18,64(sp)
 1000948:	dc400f17 	ldw	r17,60(sp)
 100094c:	dc000e17 	ldw	r16,56(sp)
 1000950:	dec01304 	addi	sp,sp,76
 1000954:	f800283a 	ret
 1000958:	01004074 	movhi	r4,257
 100095c:	2134a904 	addi	r4,r4,-11612
 1000960:	1000e640 	call	1000e64 <__pack_d>
 1000964:	dfc01217 	ldw	ra,72(sp)
 1000968:	dcc01117 	ldw	r19,68(sp)
 100096c:	dc801017 	ldw	r18,64(sp)
 1000970:	dc400f17 	ldw	r17,60(sp)
 1000974:	dc000e17 	ldw	r16,56(sp)
 1000978:	dec01304 	addi	sp,sp,76
 100097c:	f800283a 	ret
 1000980:	29805b26 	beq	r5,r6,1000af0 <__divdf3+0x244>
 1000984:	28802d26 	beq	r5,r2,1000a3c <__divdf3+0x190>
 1000988:	d8c00617 	ldw	r3,24(sp)
 100098c:	d8800b17 	ldw	r2,44(sp)
 1000990:	d9c00817 	ldw	r7,32(sp)
 1000994:	dc400d17 	ldw	r17,52(sp)
 1000998:	188bc83a 	sub	r5,r3,r2
 100099c:	d9800717 	ldw	r6,28(sp)
 10009a0:	dc000c17 	ldw	r16,48(sp)
 10009a4:	d9400615 	stw	r5,24(sp)
 10009a8:	3c403836 	bltu	r7,r17,1000a8c <__divdf3+0x1e0>
 10009ac:	89c03626 	beq	r17,r7,1000a88 <__divdf3+0x1dc>
 10009b0:	0015883a 	mov	r10,zero
 10009b4:	001d883a 	mov	r14,zero
 10009b8:	02c40034 	movhi	r11,4096
 10009bc:	001f883a 	mov	r15,zero
 10009c0:	003f883a 	mov	ra,zero
 10009c4:	04800f44 	movi	r18,61
 10009c8:	00000f06 	br	1000a08 <__divdf3+0x15c>
 10009cc:	601d883a 	mov	r14,r12
 10009d0:	681f883a 	mov	r15,r13
 10009d4:	400d883a 	mov	r6,r8
 10009d8:	100f883a 	mov	r7,r2
 10009dc:	3191883a 	add	r8,r6,r6
 10009e0:	5808d07a 	srli	r4,r11,1
 10009e4:	4185803a 	cmpltu	r2,r8,r6
 10009e8:	39d3883a 	add	r9,r7,r7
 10009ec:	28c6b03a 	or	r3,r5,r3
 10009f0:	1245883a 	add	r2,r2,r9
 10009f4:	1815883a 	mov	r10,r3
 10009f8:	2017883a 	mov	r11,r4
 10009fc:	400d883a 	mov	r6,r8
 1000a00:	100f883a 	mov	r7,r2
 1000a04:	fc801726 	beq	ra,r18,1000a64 <__divdf3+0x1b8>
 1000a08:	580a97fa 	slli	r5,r11,31
 1000a0c:	5006d07a 	srli	r3,r10,1
 1000a10:	ffc00044 	addi	ra,ra,1
 1000a14:	3c7ff136 	bltu	r7,r17,10009dc <__divdf3+0x130>
 1000a18:	3411c83a 	sub	r8,r6,r16
 1000a1c:	3205803a 	cmpltu	r2,r6,r8
 1000a20:	3c53c83a 	sub	r9,r7,r17
 1000a24:	7298b03a 	or	r12,r14,r10
 1000a28:	7adab03a 	or	r13,r15,r11
 1000a2c:	4885c83a 	sub	r2,r9,r2
 1000a30:	89ffe61e 	bne	r17,r7,10009cc <__divdf3+0x120>
 1000a34:	343fe936 	bltu	r6,r16,10009dc <__divdf3+0x130>
 1000a38:	003fe406 	br	10009cc <__divdf3+0x120>
 1000a3c:	9809883a 	mov	r4,r19
 1000a40:	d9800415 	stw	r6,16(sp)
 1000a44:	1000e640 	call	1000e64 <__pack_d>
 1000a48:	dfc01217 	ldw	ra,72(sp)
 1000a4c:	dcc01117 	ldw	r19,68(sp)
 1000a50:	dc801017 	ldw	r18,64(sp)
 1000a54:	dc400f17 	ldw	r17,60(sp)
 1000a58:	dc000e17 	ldw	r16,56(sp)
 1000a5c:	dec01304 	addi	sp,sp,76
 1000a60:	f800283a 	ret
 1000a64:	00803fc4 	movi	r2,255
 1000a68:	7090703a 	and	r8,r14,r2
 1000a6c:	00802004 	movi	r2,128
 1000a70:	0007883a 	mov	r3,zero
 1000a74:	0013883a 	mov	r9,zero
 1000a78:	40800d26 	beq	r8,r2,1000ab0 <__divdf3+0x204>
 1000a7c:	dbc00815 	stw	r15,32(sp)
 1000a80:	db800715 	stw	r14,28(sp)
 1000a84:	003fab06 	br	1000934 <__divdf3+0x88>
 1000a88:	343fc92e 	bgeu	r6,r16,10009b0 <__divdf3+0x104>
 1000a8c:	3185883a 	add	r2,r6,r6
 1000a90:	1189803a 	cmpltu	r4,r2,r6
 1000a94:	39c7883a 	add	r3,r7,r7
 1000a98:	20c9883a 	add	r4,r4,r3
 1000a9c:	297fffc4 	addi	r5,r5,-1
 1000aa0:	100d883a 	mov	r6,r2
 1000aa4:	200f883a 	mov	r7,r4
 1000aa8:	d9400615 	stw	r5,24(sp)
 1000aac:	003fc006 	br	10009b0 <__divdf3+0x104>
 1000ab0:	483ff21e 	bne	r9,zero,1000a7c <__divdf3+0x1d0>
 1000ab4:	01004004 	movi	r4,256
 1000ab8:	7104703a 	and	r2,r14,r4
 1000abc:	10c4b03a 	or	r2,r2,r3
 1000ac0:	103fee1e 	bne	r2,zero,1000a7c <__divdf3+0x1d0>
 1000ac4:	31c4b03a 	or	r2,r6,r7
 1000ac8:	103fec26 	beq	r2,zero,1000a7c <__divdf3+0x1d0>
 1000acc:	7205883a 	add	r2,r14,r8
 1000ad0:	1391803a 	cmpltu	r8,r2,r14
 1000ad4:	43d1883a 	add	r8,r8,r15
 1000ad8:	013fc004 	movi	r4,-256
 1000adc:	111c703a 	and	r14,r2,r4
 1000ae0:	401f883a 	mov	r15,r8
 1000ae4:	003fe506 	br	1000a7c <__divdf3+0x1d0>
 1000ae8:	8009883a 	mov	r4,r16
 1000aec:	003f9206 	br	1000938 <__divdf3+0x8c>
 1000af0:	9809883a 	mov	r4,r19
 1000af4:	d8000715 	stw	zero,28(sp)
 1000af8:	d8000815 	stw	zero,32(sp)
 1000afc:	d8000615 	stw	zero,24(sp)
 1000b00:	003f8d06 	br	1000938 <__divdf3+0x8c>

01000b04 <__gtdf2>:
 1000b04:	deffef04 	addi	sp,sp,-68
 1000b08:	dc400f15 	stw	r17,60(sp)
 1000b0c:	dc400404 	addi	r17,sp,16
 1000b10:	2005883a 	mov	r2,r4
 1000b14:	2807883a 	mov	r3,r5
 1000b18:	dc000e15 	stw	r16,56(sp)
 1000b1c:	d809883a 	mov	r4,sp
 1000b20:	880b883a 	mov	r5,r17
 1000b24:	dc000904 	addi	r16,sp,36
 1000b28:	d8c00115 	stw	r3,4(sp)
 1000b2c:	d8800015 	stw	r2,0(sp)
 1000b30:	d9800215 	stw	r6,8(sp)
 1000b34:	dfc01015 	stw	ra,64(sp)
 1000b38:	d9c00315 	stw	r7,12(sp)
 1000b3c:	10011780 	call	1001178 <__unpack_d>
 1000b40:	d9000204 	addi	r4,sp,8
 1000b44:	800b883a 	mov	r5,r16
 1000b48:	10011780 	call	1001178 <__unpack_d>
 1000b4c:	d8800417 	ldw	r2,16(sp)
 1000b50:	00c00044 	movi	r3,1
 1000b54:	01bfffc4 	movi	r6,-1
 1000b58:	1880062e 	bgeu	r3,r2,1000b74 <__gtdf2+0x70>
 1000b5c:	d8800917 	ldw	r2,36(sp)
 1000b60:	8809883a 	mov	r4,r17
 1000b64:	800b883a 	mov	r5,r16
 1000b68:	1880022e 	bgeu	r3,r2,1000b74 <__gtdf2+0x70>
 1000b6c:	10012b00 	call	10012b0 <__fpcmp_parts_d>
 1000b70:	100d883a 	mov	r6,r2
 1000b74:	3005883a 	mov	r2,r6
 1000b78:	dfc01017 	ldw	ra,64(sp)
 1000b7c:	dc400f17 	ldw	r17,60(sp)
 1000b80:	dc000e17 	ldw	r16,56(sp)
 1000b84:	dec01104 	addi	sp,sp,68
 1000b88:	f800283a 	ret

01000b8c <__ltdf2>:
 1000b8c:	deffef04 	addi	sp,sp,-68
 1000b90:	dc400f15 	stw	r17,60(sp)
 1000b94:	dc400404 	addi	r17,sp,16
 1000b98:	2005883a 	mov	r2,r4
 1000b9c:	2807883a 	mov	r3,r5
 1000ba0:	dc000e15 	stw	r16,56(sp)
 1000ba4:	d809883a 	mov	r4,sp
 1000ba8:	880b883a 	mov	r5,r17
 1000bac:	dc000904 	addi	r16,sp,36
 1000bb0:	d8c00115 	stw	r3,4(sp)
 1000bb4:	d8800015 	stw	r2,0(sp)
 1000bb8:	d9800215 	stw	r6,8(sp)
 1000bbc:	dfc01015 	stw	ra,64(sp)
 1000bc0:	d9c00315 	stw	r7,12(sp)
 1000bc4:	10011780 	call	1001178 <__unpack_d>
 1000bc8:	d9000204 	addi	r4,sp,8
 1000bcc:	800b883a 	mov	r5,r16
 1000bd0:	10011780 	call	1001178 <__unpack_d>
 1000bd4:	d8800417 	ldw	r2,16(sp)
 1000bd8:	00c00044 	movi	r3,1
 1000bdc:	180d883a 	mov	r6,r3
 1000be0:	1880062e 	bgeu	r3,r2,1000bfc <__ltdf2+0x70>
 1000be4:	d8800917 	ldw	r2,36(sp)
 1000be8:	8809883a 	mov	r4,r17
 1000bec:	800b883a 	mov	r5,r16
 1000bf0:	1880022e 	bgeu	r3,r2,1000bfc <__ltdf2+0x70>
 1000bf4:	10012b00 	call	10012b0 <__fpcmp_parts_d>
 1000bf8:	100d883a 	mov	r6,r2
 1000bfc:	3005883a 	mov	r2,r6
 1000c00:	dfc01017 	ldw	ra,64(sp)
 1000c04:	dc400f17 	ldw	r17,60(sp)
 1000c08:	dc000e17 	ldw	r16,56(sp)
 1000c0c:	dec01104 	addi	sp,sp,68
 1000c10:	f800283a 	ret

01000c14 <__floatsidf>:
 1000c14:	2006d7fa 	srli	r3,r4,31
 1000c18:	defff604 	addi	sp,sp,-40
 1000c1c:	008000c4 	movi	r2,3
 1000c20:	dfc00915 	stw	ra,36(sp)
 1000c24:	dcc00815 	stw	r19,32(sp)
 1000c28:	dc800715 	stw	r18,28(sp)
 1000c2c:	dc400615 	stw	r17,24(sp)
 1000c30:	dc000515 	stw	r16,20(sp)
 1000c34:	d8800015 	stw	r2,0(sp)
 1000c38:	d8c00115 	stw	r3,4(sp)
 1000c3c:	20000f1e 	bne	r4,zero,1000c7c <__floatsidf+0x68>
 1000c40:	00800084 	movi	r2,2
 1000c44:	d8800015 	stw	r2,0(sp)
 1000c48:	d809883a 	mov	r4,sp
 1000c4c:	1000e640 	call	1000e64 <__pack_d>
 1000c50:	1009883a 	mov	r4,r2
 1000c54:	180b883a 	mov	r5,r3
 1000c58:	2005883a 	mov	r2,r4
 1000c5c:	2807883a 	mov	r3,r5
 1000c60:	dfc00917 	ldw	ra,36(sp)
 1000c64:	dcc00817 	ldw	r19,32(sp)
 1000c68:	dc800717 	ldw	r18,28(sp)
 1000c6c:	dc400617 	ldw	r17,24(sp)
 1000c70:	dc000517 	ldw	r16,20(sp)
 1000c74:	dec00a04 	addi	sp,sp,40
 1000c78:	f800283a 	ret
 1000c7c:	00800f04 	movi	r2,60
 1000c80:	1807003a 	cmpeq	r3,r3,zero
 1000c84:	d8800215 	stw	r2,8(sp)
 1000c88:	18001126 	beq	r3,zero,1000cd0 <__floatsidf+0xbc>
 1000c8c:	0027883a 	mov	r19,zero
 1000c90:	2025883a 	mov	r18,r4
 1000c94:	d9000315 	stw	r4,12(sp)
 1000c98:	dcc00415 	stw	r19,16(sp)
 1000c9c:	1000de40 	call	1000de4 <__clzsi2>
 1000ca0:	11000744 	addi	r4,r2,29
 1000ca4:	013fe80e 	bge	zero,r4,1000c48 <__floatsidf+0x34>
 1000ca8:	10bfff44 	addi	r2,r2,-3
 1000cac:	10000c16 	blt	r2,zero,1000ce0 <__floatsidf+0xcc>
 1000cb0:	90a2983a 	sll	r17,r18,r2
 1000cb4:	0021883a 	mov	r16,zero
 1000cb8:	d8800217 	ldw	r2,8(sp)
 1000cbc:	dc400415 	stw	r17,16(sp)
 1000cc0:	dc000315 	stw	r16,12(sp)
 1000cc4:	1105c83a 	sub	r2,r2,r4
 1000cc8:	d8800215 	stw	r2,8(sp)
 1000ccc:	003fde06 	br	1000c48 <__floatsidf+0x34>
 1000cd0:	00a00034 	movhi	r2,32768
 1000cd4:	20800a26 	beq	r4,r2,1000d00 <__floatsidf+0xec>
 1000cd8:	0109c83a 	sub	r4,zero,r4
 1000cdc:	003feb06 	br	1000c8c <__floatsidf+0x78>
 1000ce0:	9006d07a 	srli	r3,r18,1
 1000ce4:	008007c4 	movi	r2,31
 1000ce8:	1105c83a 	sub	r2,r2,r4
 1000cec:	1886d83a 	srl	r3,r3,r2
 1000cf0:	9922983a 	sll	r17,r19,r4
 1000cf4:	9120983a 	sll	r16,r18,r4
 1000cf8:	1c62b03a 	or	r17,r3,r17
 1000cfc:	003fee06 	br	1000cb8 <__floatsidf+0xa4>
 1000d00:	0009883a 	mov	r4,zero
 1000d04:	01707834 	movhi	r5,49632
 1000d08:	003fd306 	br	1000c58 <__floatsidf+0x44>

01000d0c <__fixdfsi>:
 1000d0c:	defff804 	addi	sp,sp,-32
 1000d10:	2005883a 	mov	r2,r4
 1000d14:	2807883a 	mov	r3,r5
 1000d18:	d809883a 	mov	r4,sp
 1000d1c:	d9400204 	addi	r5,sp,8
 1000d20:	d8c00115 	stw	r3,4(sp)
 1000d24:	d8800015 	stw	r2,0(sp)
 1000d28:	dfc00715 	stw	ra,28(sp)
 1000d2c:	10011780 	call	1001178 <__unpack_d>
 1000d30:	d8c00217 	ldw	r3,8(sp)
 1000d34:	00800084 	movi	r2,2
 1000d38:	1880051e 	bne	r3,r2,1000d50 <__fixdfsi+0x44>
 1000d3c:	0007883a 	mov	r3,zero
 1000d40:	1805883a 	mov	r2,r3
 1000d44:	dfc00717 	ldw	ra,28(sp)
 1000d48:	dec00804 	addi	sp,sp,32
 1000d4c:	f800283a 	ret
 1000d50:	00800044 	movi	r2,1
 1000d54:	10fff92e 	bgeu	r2,r3,1000d3c <__fixdfsi+0x30>
 1000d58:	00800104 	movi	r2,4
 1000d5c:	18800426 	beq	r3,r2,1000d70 <__fixdfsi+0x64>
 1000d60:	d8c00417 	ldw	r3,16(sp)
 1000d64:	183ff516 	blt	r3,zero,1000d3c <__fixdfsi+0x30>
 1000d68:	00800784 	movi	r2,30
 1000d6c:	10c0080e 	bge	r2,r3,1000d90 <__fixdfsi+0x84>
 1000d70:	d8800317 	ldw	r2,12(sp)
 1000d74:	1000121e 	bne	r2,zero,1000dc0 <__fixdfsi+0xb4>
 1000d78:	00e00034 	movhi	r3,32768
 1000d7c:	18ffffc4 	addi	r3,r3,-1
 1000d80:	1805883a 	mov	r2,r3
 1000d84:	dfc00717 	ldw	ra,28(sp)
 1000d88:	dec00804 	addi	sp,sp,32
 1000d8c:	f800283a 	ret
 1000d90:	00800f04 	movi	r2,60
 1000d94:	10d1c83a 	sub	r8,r2,r3
 1000d98:	40bff804 	addi	r2,r8,-32
 1000d9c:	d9800517 	ldw	r6,20(sp)
 1000da0:	d9c00617 	ldw	r7,24(sp)
 1000da4:	10000816 	blt	r2,zero,1000dc8 <__fixdfsi+0xbc>
 1000da8:	3888d83a 	srl	r4,r7,r2
 1000dac:	d8800317 	ldw	r2,12(sp)
 1000db0:	2007883a 	mov	r3,r4
 1000db4:	103fe226 	beq	r2,zero,1000d40 <__fixdfsi+0x34>
 1000db8:	0107c83a 	sub	r3,zero,r4
 1000dbc:	003fe006 	br	1000d40 <__fixdfsi+0x34>
 1000dc0:	00e00034 	movhi	r3,32768
 1000dc4:	003fde06 	br	1000d40 <__fixdfsi+0x34>
 1000dc8:	39c7883a 	add	r3,r7,r7
 1000dcc:	008007c4 	movi	r2,31
 1000dd0:	1205c83a 	sub	r2,r2,r8
 1000dd4:	1886983a 	sll	r3,r3,r2
 1000dd8:	3208d83a 	srl	r4,r6,r8
 1000ddc:	1908b03a 	or	r4,r3,r4
 1000de0:	003ff206 	br	1000dac <__fixdfsi+0xa0>

01000de4 <__clzsi2>:
 1000de4:	00bfffd4 	movui	r2,65535
 1000de8:	11000e36 	bltu	r2,r4,1000e24 <__clzsi2+0x40>
 1000dec:	00803fc4 	movi	r2,255
 1000df0:	01400204 	movi	r5,8
 1000df4:	0007883a 	mov	r3,zero
 1000df8:	11001036 	bltu	r2,r4,1000e3c <__clzsi2+0x58>
 1000dfc:	000b883a 	mov	r5,zero
 1000e00:	20c6d83a 	srl	r3,r4,r3
 1000e04:	00804074 	movhi	r2,257
 1000e08:	10b4ae04 	addi	r2,r2,-11592
 1000e0c:	1887883a 	add	r3,r3,r2
 1000e10:	18800003 	ldbu	r2,0(r3)
 1000e14:	00c00804 	movi	r3,32
 1000e18:	2885883a 	add	r2,r5,r2
 1000e1c:	1885c83a 	sub	r2,r3,r2
 1000e20:	f800283a 	ret
 1000e24:	01400404 	movi	r5,16
 1000e28:	00804034 	movhi	r2,256
 1000e2c:	10bfffc4 	addi	r2,r2,-1
 1000e30:	2807883a 	mov	r3,r5
 1000e34:	113ff22e 	bgeu	r2,r4,1000e00 <__clzsi2+0x1c>
 1000e38:	01400604 	movi	r5,24
 1000e3c:	2807883a 	mov	r3,r5
 1000e40:	20c6d83a 	srl	r3,r4,r3
 1000e44:	00804074 	movhi	r2,257
 1000e48:	10b4ae04 	addi	r2,r2,-11592
 1000e4c:	1887883a 	add	r3,r3,r2
 1000e50:	18800003 	ldbu	r2,0(r3)
 1000e54:	00c00804 	movi	r3,32
 1000e58:	2885883a 	add	r2,r5,r2
 1000e5c:	1885c83a 	sub	r2,r3,r2
 1000e60:	f800283a 	ret

01000e64 <__pack_d>:
 1000e64:	20c00017 	ldw	r3,0(r4)
 1000e68:	defffd04 	addi	sp,sp,-12
 1000e6c:	dc000015 	stw	r16,0(sp)
 1000e70:	dc800215 	stw	r18,8(sp)
 1000e74:	dc400115 	stw	r17,4(sp)
 1000e78:	00800044 	movi	r2,1
 1000e7c:	22000317 	ldw	r8,12(r4)
 1000e80:	001f883a 	mov	r15,zero
 1000e84:	22400417 	ldw	r9,16(r4)
 1000e88:	24000117 	ldw	r16,4(r4)
 1000e8c:	10c0552e 	bgeu	r2,r3,1000fe4 <__pack_d+0x180>
 1000e90:	00800104 	movi	r2,4
 1000e94:	18804f26 	beq	r3,r2,1000fd4 <__pack_d+0x170>
 1000e98:	00800084 	movi	r2,2
 1000e9c:	18800226 	beq	r3,r2,1000ea8 <__pack_d+0x44>
 1000ea0:	4244b03a 	or	r2,r8,r9
 1000ea4:	10001a1e 	bne	r2,zero,1000f10 <__pack_d+0xac>
 1000ea8:	000d883a 	mov	r6,zero
 1000eac:	000f883a 	mov	r7,zero
 1000eb0:	0011883a 	mov	r8,zero
 1000eb4:	00800434 	movhi	r2,16
 1000eb8:	10bfffc4 	addi	r2,r2,-1
 1000ebc:	301d883a 	mov	r14,r6
 1000ec0:	3884703a 	and	r2,r7,r2
 1000ec4:	400a953a 	slli	r5,r8,20
 1000ec8:	79bffc2c 	andhi	r6,r15,65520
 1000ecc:	308cb03a 	or	r6,r6,r2
 1000ed0:	00e00434 	movhi	r3,32784
 1000ed4:	18ffffc4 	addi	r3,r3,-1
 1000ed8:	800497fa 	slli	r2,r16,31
 1000edc:	30c6703a 	and	r3,r6,r3
 1000ee0:	1946b03a 	or	r3,r3,r5
 1000ee4:	01600034 	movhi	r5,32768
 1000ee8:	297fffc4 	addi	r5,r5,-1
 1000eec:	194a703a 	and	r5,r3,r5
 1000ef0:	288ab03a 	or	r5,r5,r2
 1000ef4:	2807883a 	mov	r3,r5
 1000ef8:	7005883a 	mov	r2,r14
 1000efc:	dc800217 	ldw	r18,8(sp)
 1000f00:	dc400117 	ldw	r17,4(sp)
 1000f04:	dc000017 	ldw	r16,0(sp)
 1000f08:	dec00304 	addi	sp,sp,12
 1000f0c:	f800283a 	ret
 1000f10:	21000217 	ldw	r4,8(r4)
 1000f14:	00bf0084 	movi	r2,-1022
 1000f18:	20803f16 	blt	r4,r2,1001018 <__pack_d+0x1b4>
 1000f1c:	0080ffc4 	movi	r2,1023
 1000f20:	11002c16 	blt	r2,r4,1000fd4 <__pack_d+0x170>
 1000f24:	00803fc4 	movi	r2,255
 1000f28:	408c703a 	and	r6,r8,r2
 1000f2c:	00802004 	movi	r2,128
 1000f30:	0007883a 	mov	r3,zero
 1000f34:	000f883a 	mov	r7,zero
 1000f38:	2280ffc4 	addi	r10,r4,1023
 1000f3c:	30801e26 	beq	r6,r2,1000fb8 <__pack_d+0x154>
 1000f40:	00801fc4 	movi	r2,127
 1000f44:	4089883a 	add	r4,r8,r2
 1000f48:	220d803a 	cmpltu	r6,r4,r8
 1000f4c:	324d883a 	add	r6,r6,r9
 1000f50:	2011883a 	mov	r8,r4
 1000f54:	3013883a 	mov	r9,r6
 1000f58:	00880034 	movhi	r2,8192
 1000f5c:	10bfffc4 	addi	r2,r2,-1
 1000f60:	12400d36 	bltu	r2,r9,1000f98 <__pack_d+0x134>
 1000f64:	4804963a 	slli	r2,r9,24
 1000f68:	400cd23a 	srli	r6,r8,8
 1000f6c:	480ed23a 	srli	r7,r9,8
 1000f70:	013fffc4 	movi	r4,-1
 1000f74:	118cb03a 	or	r6,r2,r6
 1000f78:	01400434 	movhi	r5,16
 1000f7c:	297fffc4 	addi	r5,r5,-1
 1000f80:	3104703a 	and	r2,r6,r4
 1000f84:	3946703a 	and	r3,r7,r5
 1000f88:	5201ffcc 	andi	r8,r10,2047
 1000f8c:	100d883a 	mov	r6,r2
 1000f90:	180f883a 	mov	r7,r3
 1000f94:	003fc706 	br	1000eb4 <__pack_d+0x50>
 1000f98:	480897fa 	slli	r4,r9,31
 1000f9c:	4004d07a 	srli	r2,r8,1
 1000fa0:	4806d07a 	srli	r3,r9,1
 1000fa4:	52800044 	addi	r10,r10,1
 1000fa8:	2084b03a 	or	r2,r4,r2
 1000fac:	1011883a 	mov	r8,r2
 1000fb0:	1813883a 	mov	r9,r3
 1000fb4:	003feb06 	br	1000f64 <__pack_d+0x100>
 1000fb8:	383fe11e 	bne	r7,zero,1000f40 <__pack_d+0xdc>
 1000fbc:	01004004 	movi	r4,256
 1000fc0:	4104703a 	and	r2,r8,r4
 1000fc4:	10c4b03a 	or	r2,r2,r3
 1000fc8:	103fe326 	beq	r2,zero,1000f58 <__pack_d+0xf4>
 1000fcc:	3005883a 	mov	r2,r6
 1000fd0:	003fdc06 	br	1000f44 <__pack_d+0xe0>
 1000fd4:	000d883a 	mov	r6,zero
 1000fd8:	000f883a 	mov	r7,zero
 1000fdc:	0201ffc4 	movi	r8,2047
 1000fe0:	003fb406 	br	1000eb4 <__pack_d+0x50>
 1000fe4:	0005883a 	mov	r2,zero
 1000fe8:	00c00234 	movhi	r3,8
 1000fec:	408cb03a 	or	r6,r8,r2
 1000ff0:	48ceb03a 	or	r7,r9,r3
 1000ff4:	013fffc4 	movi	r4,-1
 1000ff8:	01400434 	movhi	r5,16
 1000ffc:	297fffc4 	addi	r5,r5,-1
 1001000:	3104703a 	and	r2,r6,r4
 1001004:	3946703a 	and	r3,r7,r5
 1001008:	100d883a 	mov	r6,r2
 100100c:	180f883a 	mov	r7,r3
 1001010:	0201ffc4 	movi	r8,2047
 1001014:	003fa706 	br	1000eb4 <__pack_d+0x50>
 1001018:	1109c83a 	sub	r4,r2,r4
 100101c:	00800e04 	movi	r2,56
 1001020:	11004316 	blt	r2,r4,1001130 <__pack_d+0x2cc>
 1001024:	21fff804 	addi	r7,r4,-32
 1001028:	38004516 	blt	r7,zero,1001140 <__pack_d+0x2dc>
 100102c:	49d8d83a 	srl	r12,r9,r7
 1001030:	001b883a 	mov	r13,zero
 1001034:	0023883a 	mov	r17,zero
 1001038:	01400044 	movi	r5,1
 100103c:	0025883a 	mov	r18,zero
 1001040:	38004716 	blt	r7,zero,1001160 <__pack_d+0x2fc>
 1001044:	29d6983a 	sll	r11,r5,r7
 1001048:	0015883a 	mov	r10,zero
 100104c:	00bfffc4 	movi	r2,-1
 1001050:	5089883a 	add	r4,r10,r2
 1001054:	588b883a 	add	r5,r11,r2
 1001058:	228d803a 	cmpltu	r6,r4,r10
 100105c:	314b883a 	add	r5,r6,r5
 1001060:	4104703a 	and	r2,r8,r4
 1001064:	4946703a 	and	r3,r9,r5
 1001068:	10c4b03a 	or	r2,r2,r3
 100106c:	10000226 	beq	r2,zero,1001078 <__pack_d+0x214>
 1001070:	04400044 	movi	r17,1
 1001074:	0025883a 	mov	r18,zero
 1001078:	00803fc4 	movi	r2,255
 100107c:	644eb03a 	or	r7,r12,r17
 1001080:	3892703a 	and	r9,r7,r2
 1001084:	00802004 	movi	r2,128
 1001088:	6c90b03a 	or	r8,r13,r18
 100108c:	0015883a 	mov	r10,zero
 1001090:	48801626 	beq	r9,r2,10010ec <__pack_d+0x288>
 1001094:	01001fc4 	movi	r4,127
 1001098:	3905883a 	add	r2,r7,r4
 100109c:	11cd803a 	cmpltu	r6,r2,r7
 10010a0:	320d883a 	add	r6,r6,r8
 10010a4:	100f883a 	mov	r7,r2
 10010a8:	00840034 	movhi	r2,4096
 10010ac:	10bfffc4 	addi	r2,r2,-1
 10010b0:	3011883a 	mov	r8,r6
 10010b4:	0007883a 	mov	r3,zero
 10010b8:	11801b36 	bltu	r2,r6,1001128 <__pack_d+0x2c4>
 10010bc:	4004963a 	slli	r2,r8,24
 10010c0:	3808d23a 	srli	r4,r7,8
 10010c4:	400ad23a 	srli	r5,r8,8
 10010c8:	1813883a 	mov	r9,r3
 10010cc:	1108b03a 	or	r4,r2,r4
 10010d0:	00bfffc4 	movi	r2,-1
 10010d4:	00c00434 	movhi	r3,16
 10010d8:	18ffffc4 	addi	r3,r3,-1
 10010dc:	208c703a 	and	r6,r4,r2
 10010e0:	28ce703a 	and	r7,r5,r3
 10010e4:	4a01ffcc 	andi	r8,r9,2047
 10010e8:	003f7206 	br	1000eb4 <__pack_d+0x50>
 10010ec:	503fe91e 	bne	r10,zero,1001094 <__pack_d+0x230>
 10010f0:	01004004 	movi	r4,256
 10010f4:	3904703a 	and	r2,r7,r4
 10010f8:	0007883a 	mov	r3,zero
 10010fc:	10c4b03a 	or	r2,r2,r3
 1001100:	10000626 	beq	r2,zero,100111c <__pack_d+0x2b8>
 1001104:	3a45883a 	add	r2,r7,r9
 1001108:	11cd803a 	cmpltu	r6,r2,r7
 100110c:	320d883a 	add	r6,r6,r8
 1001110:	100f883a 	mov	r7,r2
 1001114:	3011883a 	mov	r8,r6
 1001118:	0007883a 	mov	r3,zero
 100111c:	00840034 	movhi	r2,4096
 1001120:	10bfffc4 	addi	r2,r2,-1
 1001124:	123fe52e 	bgeu	r2,r8,10010bc <__pack_d+0x258>
 1001128:	00c00044 	movi	r3,1
 100112c:	003fe306 	br	10010bc <__pack_d+0x258>
 1001130:	0009883a 	mov	r4,zero
 1001134:	0013883a 	mov	r9,zero
 1001138:	000b883a 	mov	r5,zero
 100113c:	003fe406 	br	10010d0 <__pack_d+0x26c>
 1001140:	4a47883a 	add	r3,r9,r9
 1001144:	008007c4 	movi	r2,31
 1001148:	1105c83a 	sub	r2,r2,r4
 100114c:	1886983a 	sll	r3,r3,r2
 1001150:	4118d83a 	srl	r12,r8,r4
 1001154:	491ad83a 	srl	r13,r9,r4
 1001158:	1b18b03a 	or	r12,r3,r12
 100115c:	003fb506 	br	1001034 <__pack_d+0x1d0>
 1001160:	2806d07a 	srli	r3,r5,1
 1001164:	008007c4 	movi	r2,31
 1001168:	1105c83a 	sub	r2,r2,r4
 100116c:	1896d83a 	srl	r11,r3,r2
 1001170:	2914983a 	sll	r10,r5,r4
 1001174:	003fb506 	br	100104c <__pack_d+0x1e8>

01001178 <__unpack_d>:
 1001178:	20c00117 	ldw	r3,4(r4)
 100117c:	22400017 	ldw	r9,0(r4)
 1001180:	00800434 	movhi	r2,16
 1001184:	10bfffc4 	addi	r2,r2,-1
 1001188:	1808d53a 	srli	r4,r3,20
 100118c:	180cd7fa 	srli	r6,r3,31
 1001190:	1894703a 	and	r10,r3,r2
 1001194:	2201ffcc 	andi	r8,r4,2047
 1001198:	281b883a 	mov	r13,r5
 100119c:	4817883a 	mov	r11,r9
 10011a0:	29800115 	stw	r6,4(r5)
 10011a4:	5019883a 	mov	r12,r10
 10011a8:	40001e1e 	bne	r8,zero,1001224 <__unpack_d+0xac>
 10011ac:	4a84b03a 	or	r2,r9,r10
 10011b0:	10001926 	beq	r2,zero,1001218 <__unpack_d+0xa0>
 10011b4:	4804d63a 	srli	r2,r9,24
 10011b8:	500c923a 	slli	r6,r10,8
 10011bc:	013f0084 	movi	r4,-1022
 10011c0:	00c40034 	movhi	r3,4096
 10011c4:	18ffffc4 	addi	r3,r3,-1
 10011c8:	118cb03a 	or	r6,r2,r6
 10011cc:	008000c4 	movi	r2,3
 10011d0:	480a923a 	slli	r5,r9,8
 10011d4:	68800015 	stw	r2,0(r13)
 10011d8:	69000215 	stw	r4,8(r13)
 10011dc:	19800b36 	bltu	r3,r6,100120c <__unpack_d+0x94>
 10011e0:	200f883a 	mov	r7,r4
 10011e4:	1811883a 	mov	r8,r3
 10011e8:	2945883a 	add	r2,r5,r5
 10011ec:	1149803a 	cmpltu	r4,r2,r5
 10011f0:	3187883a 	add	r3,r6,r6
 10011f4:	20c9883a 	add	r4,r4,r3
 10011f8:	100b883a 	mov	r5,r2
 10011fc:	200d883a 	mov	r6,r4
 1001200:	39ffffc4 	addi	r7,r7,-1
 1001204:	413ff82e 	bgeu	r8,r4,10011e8 <__unpack_d+0x70>
 1001208:	69c00215 	stw	r7,8(r13)
 100120c:	69800415 	stw	r6,16(r13)
 1001210:	69400315 	stw	r5,12(r13)
 1001214:	f800283a 	ret
 1001218:	00800084 	movi	r2,2
 100121c:	28800015 	stw	r2,0(r5)
 1001220:	f800283a 	ret
 1001224:	0081ffc4 	movi	r2,2047
 1001228:	40800f26 	beq	r8,r2,1001268 <__unpack_d+0xf0>
 100122c:	480cd63a 	srli	r6,r9,24
 1001230:	5006923a 	slli	r3,r10,8
 1001234:	4804923a 	slli	r2,r9,8
 1001238:	0009883a 	mov	r4,zero
 100123c:	30c6b03a 	or	r3,r6,r3
 1001240:	01440034 	movhi	r5,4096
 1001244:	110cb03a 	or	r6,r2,r4
 1001248:	423f0044 	addi	r8,r8,-1023
 100124c:	194eb03a 	or	r7,r3,r5
 1001250:	008000c4 	movi	r2,3
 1001254:	69c00415 	stw	r7,16(r13)
 1001258:	6a000215 	stw	r8,8(r13)
 100125c:	68800015 	stw	r2,0(r13)
 1001260:	69800315 	stw	r6,12(r13)
 1001264:	f800283a 	ret
 1001268:	4a84b03a 	or	r2,r9,r10
 100126c:	1000031e 	bne	r2,zero,100127c <__unpack_d+0x104>
 1001270:	00800104 	movi	r2,4
 1001274:	28800015 	stw	r2,0(r5)
 1001278:	f800283a 	ret
 100127c:	0009883a 	mov	r4,zero
 1001280:	01400234 	movhi	r5,8
 1001284:	4904703a 	and	r2,r9,r4
 1001288:	5146703a 	and	r3,r10,r5
 100128c:	10c4b03a 	or	r2,r2,r3
 1001290:	10000526 	beq	r2,zero,10012a8 <__unpack_d+0x130>
 1001294:	00800044 	movi	r2,1
 1001298:	68800015 	stw	r2,0(r13)
 100129c:	6b000415 	stw	r12,16(r13)
 10012a0:	6ac00315 	stw	r11,12(r13)
 10012a4:	f800283a 	ret
 10012a8:	68000015 	stw	zero,0(r13)
 10012ac:	003ffb06 	br	100129c <__unpack_d+0x124>

010012b0 <__fpcmp_parts_d>:
 10012b0:	21800017 	ldw	r6,0(r4)
 10012b4:	00c00044 	movi	r3,1
 10012b8:	19800a2e 	bgeu	r3,r6,10012e4 <__fpcmp_parts_d+0x34>
 10012bc:	28800017 	ldw	r2,0(r5)
 10012c0:	1880082e 	bgeu	r3,r2,10012e4 <__fpcmp_parts_d+0x34>
 10012c4:	00c00104 	movi	r3,4
 10012c8:	30c02626 	beq	r6,r3,1001364 <__fpcmp_parts_d+0xb4>
 10012cc:	10c02226 	beq	r2,r3,1001358 <__fpcmp_parts_d+0xa8>
 10012d0:	00c00084 	movi	r3,2
 10012d4:	30c00526 	beq	r6,r3,10012ec <__fpcmp_parts_d+0x3c>
 10012d8:	10c0071e 	bne	r2,r3,10012f8 <__fpcmp_parts_d+0x48>
 10012dc:	20800117 	ldw	r2,4(r4)
 10012e0:	1000091e 	bne	r2,zero,1001308 <__fpcmp_parts_d+0x58>
 10012e4:	00800044 	movi	r2,1
 10012e8:	f800283a 	ret
 10012ec:	10c01a1e 	bne	r2,r3,1001358 <__fpcmp_parts_d+0xa8>
 10012f0:	0005883a 	mov	r2,zero
 10012f4:	f800283a 	ret
 10012f8:	22000117 	ldw	r8,4(r4)
 10012fc:	28800117 	ldw	r2,4(r5)
 1001300:	40800326 	beq	r8,r2,1001310 <__fpcmp_parts_d+0x60>
 1001304:	403ff726 	beq	r8,zero,10012e4 <__fpcmp_parts_d+0x34>
 1001308:	00bfffc4 	movi	r2,-1
 100130c:	f800283a 	ret
 1001310:	20c00217 	ldw	r3,8(r4)
 1001314:	28800217 	ldw	r2,8(r5)
 1001318:	10fffa16 	blt	r2,r3,1001304 <__fpcmp_parts_d+0x54>
 100131c:	18800916 	blt	r3,r2,1001344 <__fpcmp_parts_d+0x94>
 1001320:	21c00417 	ldw	r7,16(r4)
 1001324:	28c00417 	ldw	r3,16(r5)
 1001328:	21800317 	ldw	r6,12(r4)
 100132c:	28800317 	ldw	r2,12(r5)
 1001330:	19fff436 	bltu	r3,r7,1001304 <__fpcmp_parts_d+0x54>
 1001334:	38c00526 	beq	r7,r3,100134c <__fpcmp_parts_d+0x9c>
 1001338:	38c00236 	bltu	r7,r3,1001344 <__fpcmp_parts_d+0x94>
 100133c:	19ffec1e 	bne	r3,r7,10012f0 <__fpcmp_parts_d+0x40>
 1001340:	30bfeb2e 	bgeu	r6,r2,10012f0 <__fpcmp_parts_d+0x40>
 1001344:	403fe71e 	bne	r8,zero,10012e4 <__fpcmp_parts_d+0x34>
 1001348:	003fef06 	br	1001308 <__fpcmp_parts_d+0x58>
 100134c:	11bffa2e 	bgeu	r2,r6,1001338 <__fpcmp_parts_d+0x88>
 1001350:	403fe426 	beq	r8,zero,10012e4 <__fpcmp_parts_d+0x34>
 1001354:	003fec06 	br	1001308 <__fpcmp_parts_d+0x58>
 1001358:	28800117 	ldw	r2,4(r5)
 100135c:	103fe11e 	bne	r2,zero,10012e4 <__fpcmp_parts_d+0x34>
 1001360:	003fe906 	br	1001308 <__fpcmp_parts_d+0x58>
 1001364:	11bfdd1e 	bne	r2,r6,10012dc <__fpcmp_parts_d+0x2c>
 1001368:	28c00117 	ldw	r3,4(r5)
 100136c:	20800117 	ldw	r2,4(r4)
 1001370:	1885c83a 	sub	r2,r3,r2
 1001374:	f800283a 	ret

01001378 <printf>:
 1001378:	defffb04 	addi	sp,sp,-20
 100137c:	dfc00115 	stw	ra,4(sp)
 1001380:	d9400215 	stw	r5,8(sp)
 1001384:	d9800315 	stw	r6,12(sp)
 1001388:	d9c00415 	stw	r7,16(sp)
 100138c:	00804074 	movhi	r2,257
 1001390:	10bc3704 	addi	r2,r2,-3876
 1001394:	10c00017 	ldw	r3,0(r2)
 1001398:	200b883a 	mov	r5,r4
 100139c:	d8800204 	addi	r2,sp,8
 10013a0:	19000217 	ldw	r4,8(r3)
 10013a4:	100d883a 	mov	r6,r2
 10013a8:	d8800015 	stw	r2,0(sp)
 10013ac:	100341c0 	call	100341c <__vfprintf_internal>
 10013b0:	dfc00117 	ldw	ra,4(sp)
 10013b4:	dec00504 	addi	sp,sp,20
 10013b8:	f800283a 	ret

010013bc <_printf_r>:
 10013bc:	defffc04 	addi	sp,sp,-16
 10013c0:	dfc00115 	stw	ra,4(sp)
 10013c4:	d9800215 	stw	r6,8(sp)
 10013c8:	d9c00315 	stw	r7,12(sp)
 10013cc:	280d883a 	mov	r6,r5
 10013d0:	21400217 	ldw	r5,8(r4)
 10013d4:	d8c00204 	addi	r3,sp,8
 10013d8:	180f883a 	mov	r7,r3
 10013dc:	d8c00015 	stw	r3,0(sp)
 10013e0:	10015700 	call	1001570 <___vfprintf_internal_r>
 10013e4:	dfc00117 	ldw	ra,4(sp)
 10013e8:	dec00404 	addi	sp,sp,16
 10013ec:	f800283a 	ret

010013f0 <_puts_r>:
 10013f0:	defff604 	addi	sp,sp,-40
 10013f4:	dc400715 	stw	r17,28(sp)
 10013f8:	2023883a 	mov	r17,r4
 10013fc:	2809883a 	mov	r4,r5
 1001400:	dfc00915 	stw	ra,36(sp)
 1001404:	dcc00815 	stw	r19,32(sp)
 1001408:	2827883a 	mov	r19,r5
 100140c:	10014a40 	call	10014a4 <strlen>
 1001410:	89400217 	ldw	r5,8(r17)
 1001414:	00c04074 	movhi	r3,257
 1001418:	18f4ee04 	addi	r3,r3,-11336
 100141c:	01c00044 	movi	r7,1
 1001420:	12000044 	addi	r8,r2,1
 1001424:	d8c00515 	stw	r3,20(sp)
 1001428:	d9c00615 	stw	r7,24(sp)
 100142c:	d8c00304 	addi	r3,sp,12
 1001430:	01c00084 	movi	r7,2
 1001434:	8809883a 	mov	r4,r17
 1001438:	d80d883a 	mov	r6,sp
 100143c:	d8c00015 	stw	r3,0(sp)
 1001440:	dcc00315 	stw	r19,12(sp)
 1001444:	da000215 	stw	r8,8(sp)
 1001448:	d9c00115 	stw	r7,4(sp)
 100144c:	d8800415 	stw	r2,16(sp)
 1001450:	10056780 	call	1005678 <__sfvwrite_r>
 1001454:	00ffffc4 	movi	r3,-1
 1001458:	10000626 	beq	r2,zero,1001474 <_puts_r+0x84>
 100145c:	1805883a 	mov	r2,r3
 1001460:	dfc00917 	ldw	ra,36(sp)
 1001464:	dcc00817 	ldw	r19,32(sp)
 1001468:	dc400717 	ldw	r17,28(sp)
 100146c:	dec00a04 	addi	sp,sp,40
 1001470:	f800283a 	ret
 1001474:	00c00284 	movi	r3,10
 1001478:	1805883a 	mov	r2,r3
 100147c:	dfc00917 	ldw	ra,36(sp)
 1001480:	dcc00817 	ldw	r19,32(sp)
 1001484:	dc400717 	ldw	r17,28(sp)
 1001488:	dec00a04 	addi	sp,sp,40
 100148c:	f800283a 	ret

01001490 <puts>:
 1001490:	00804074 	movhi	r2,257
 1001494:	10bc3704 	addi	r2,r2,-3876
 1001498:	200b883a 	mov	r5,r4
 100149c:	11000017 	ldw	r4,0(r2)
 10014a0:	10013f01 	jmpi	10013f0 <_puts_r>

010014a4 <strlen>:
 10014a4:	208000cc 	andi	r2,r4,3
 10014a8:	2011883a 	mov	r8,r4
 10014ac:	1000161e 	bne	r2,zero,1001508 <strlen+0x64>
 10014b0:	20c00017 	ldw	r3,0(r4)
 10014b4:	017fbff4 	movhi	r5,65279
 10014b8:	297fbfc4 	addi	r5,r5,-257
 10014bc:	01e02074 	movhi	r7,32897
 10014c0:	39e02004 	addi	r7,r7,-32640
 10014c4:	1945883a 	add	r2,r3,r5
 10014c8:	11c4703a 	and	r2,r2,r7
 10014cc:	00c6303a 	nor	r3,zero,r3
 10014d0:	1886703a 	and	r3,r3,r2
 10014d4:	18000c1e 	bne	r3,zero,1001508 <strlen+0x64>
 10014d8:	280d883a 	mov	r6,r5
 10014dc:	380b883a 	mov	r5,r7
 10014e0:	21000104 	addi	r4,r4,4
 10014e4:	20800017 	ldw	r2,0(r4)
 10014e8:	1187883a 	add	r3,r2,r6
 10014ec:	1946703a 	and	r3,r3,r5
 10014f0:	0084303a 	nor	r2,zero,r2
 10014f4:	10c4703a 	and	r2,r2,r3
 10014f8:	103ff926 	beq	r2,zero,10014e0 <strlen+0x3c>
 10014fc:	20800007 	ldb	r2,0(r4)
 1001500:	10000326 	beq	r2,zero,1001510 <strlen+0x6c>
 1001504:	21000044 	addi	r4,r4,1
 1001508:	20800007 	ldb	r2,0(r4)
 100150c:	103ffd1e 	bne	r2,zero,1001504 <strlen+0x60>
 1001510:	2205c83a 	sub	r2,r4,r8
 1001514:	f800283a 	ret

01001518 <__sprint_r>:
 1001518:	30800217 	ldw	r2,8(r6)
 100151c:	defffe04 	addi	sp,sp,-8
 1001520:	dc000015 	stw	r16,0(sp)
 1001524:	dfc00115 	stw	ra,4(sp)
 1001528:	3021883a 	mov	r16,r6
 100152c:	0007883a 	mov	r3,zero
 1001530:	1000061e 	bne	r2,zero,100154c <__sprint_r+0x34>
 1001534:	1805883a 	mov	r2,r3
 1001538:	30000115 	stw	zero,4(r6)
 100153c:	dfc00117 	ldw	ra,4(sp)
 1001540:	dc000017 	ldw	r16,0(sp)
 1001544:	dec00204 	addi	sp,sp,8
 1001548:	f800283a 	ret
 100154c:	10056780 	call	1005678 <__sfvwrite_r>
 1001550:	1007883a 	mov	r3,r2
 1001554:	1805883a 	mov	r2,r3
 1001558:	80000115 	stw	zero,4(r16)
 100155c:	80000215 	stw	zero,8(r16)
 1001560:	dfc00117 	ldw	ra,4(sp)
 1001564:	dc000017 	ldw	r16,0(sp)
 1001568:	dec00204 	addi	sp,sp,8
 100156c:	f800283a 	ret

01001570 <___vfprintf_internal_r>:
 1001570:	defea404 	addi	sp,sp,-1392
 1001574:	dd815815 	stw	r22,1376(sp)
 1001578:	dc015215 	stw	r16,1352(sp)
 100157c:	d9c15115 	stw	r7,1348(sp)
 1001580:	dfc15b15 	stw	ra,1388(sp)
 1001584:	df015a15 	stw	fp,1384(sp)
 1001588:	ddc15915 	stw	r23,1380(sp)
 100158c:	dd415715 	stw	r21,1372(sp)
 1001590:	dd015615 	stw	r20,1368(sp)
 1001594:	dcc15515 	stw	r19,1364(sp)
 1001598:	dc815415 	stw	r18,1360(sp)
 100159c:	dc415315 	stw	r17,1356(sp)
 10015a0:	282d883a 	mov	r22,r5
 10015a4:	3021883a 	mov	r16,r6
 10015a8:	d9014f15 	stw	r4,1340(sp)
 10015ac:	1005c9c0 	call	1005c9c <_localeconv_r>
 10015b0:	10800017 	ldw	r2,0(r2)
 10015b4:	d9c15117 	ldw	r7,1348(sp)
 10015b8:	d8814915 	stw	r2,1316(sp)
 10015bc:	d8814f17 	ldw	r2,1340(sp)
 10015c0:	10000226 	beq	r2,zero,10015cc <___vfprintf_internal_r+0x5c>
 10015c4:	10800e17 	ldw	r2,56(r2)
 10015c8:	10020d26 	beq	r2,zero,1001e00 <___vfprintf_internal_r+0x890>
 10015cc:	b080030b 	ldhu	r2,12(r22)
 10015d0:	1080020c 	andi	r2,r2,8
 10015d4:	10020e26 	beq	r2,zero,1001e10 <___vfprintf_internal_r+0x8a0>
 10015d8:	b0800417 	ldw	r2,16(r22)
 10015dc:	10020c26 	beq	r2,zero,1001e10 <___vfprintf_internal_r+0x8a0>
 10015e0:	b200030b 	ldhu	r8,12(r22)
 10015e4:	00800284 	movi	r2,10
 10015e8:	40c0068c 	andi	r3,r8,26
 10015ec:	18802f1e 	bne	r3,r2,10016ac <___vfprintf_internal_r+0x13c>
 10015f0:	b080038f 	ldh	r2,14(r22)
 10015f4:	10002d16 	blt	r2,zero,10016ac <___vfprintf_internal_r+0x13c>
 10015f8:	b240038b 	ldhu	r9,14(r22)
 10015fc:	b2800717 	ldw	r10,28(r22)
 1001600:	b2c00917 	ldw	r11,36(r22)
 1001604:	d9014f17 	ldw	r4,1340(sp)
 1001608:	dc402904 	addi	r17,sp,164
 100160c:	d8804004 	addi	r2,sp,256
 1001610:	00c10004 	movi	r3,1024
 1001614:	423fff4c 	andi	r8,r8,65533
 1001618:	800d883a 	mov	r6,r16
 100161c:	880b883a 	mov	r5,r17
 1001620:	da002c0d 	sth	r8,176(sp)
 1001624:	da402c8d 	sth	r9,178(sp)
 1001628:	da803015 	stw	r10,192(sp)
 100162c:	dac03215 	stw	r11,200(sp)
 1001630:	d8802d15 	stw	r2,180(sp)
 1001634:	d8c02e15 	stw	r3,184(sp)
 1001638:	d8802915 	stw	r2,164(sp)
 100163c:	d8c02b15 	stw	r3,172(sp)
 1001640:	d8002f15 	stw	zero,188(sp)
 1001644:	10015700 	call	1001570 <___vfprintf_internal_r>
 1001648:	d8814b15 	stw	r2,1324(sp)
 100164c:	10000416 	blt	r2,zero,1001660 <___vfprintf_internal_r+0xf0>
 1001650:	d9014f17 	ldw	r4,1340(sp)
 1001654:	880b883a 	mov	r5,r17
 1001658:	1004d480 	call	1004d48 <_fflush_r>
 100165c:	1002321e 	bne	r2,zero,1001f28 <___vfprintf_internal_r+0x9b8>
 1001660:	d8802c0b 	ldhu	r2,176(sp)
 1001664:	1080100c 	andi	r2,r2,64
 1001668:	10000326 	beq	r2,zero,1001678 <___vfprintf_internal_r+0x108>
 100166c:	b080030b 	ldhu	r2,12(r22)
 1001670:	10801014 	ori	r2,r2,64
 1001674:	b080030d 	sth	r2,12(r22)
 1001678:	d8814b17 	ldw	r2,1324(sp)
 100167c:	dfc15b17 	ldw	ra,1388(sp)
 1001680:	df015a17 	ldw	fp,1384(sp)
 1001684:	ddc15917 	ldw	r23,1380(sp)
 1001688:	dd815817 	ldw	r22,1376(sp)
 100168c:	dd415717 	ldw	r21,1372(sp)
 1001690:	dd015617 	ldw	r20,1368(sp)
 1001694:	dcc15517 	ldw	r19,1364(sp)
 1001698:	dc815417 	ldw	r18,1360(sp)
 100169c:	dc415317 	ldw	r17,1356(sp)
 10016a0:	dc015217 	ldw	r16,1352(sp)
 10016a4:	dec15c04 	addi	sp,sp,1392
 10016a8:	f800283a 	ret
 10016ac:	0005883a 	mov	r2,zero
 10016b0:	0007883a 	mov	r3,zero
 10016b4:	dd401904 	addi	r21,sp,100
 10016b8:	d8814215 	stw	r2,1288(sp)
 10016bc:	802f883a 	mov	r23,r16
 10016c0:	d8c14315 	stw	r3,1292(sp)
 10016c4:	d8014b15 	stw	zero,1324(sp)
 10016c8:	d8014815 	stw	zero,1312(sp)
 10016cc:	d8014415 	stw	zero,1296(sp)
 10016d0:	d8014715 	stw	zero,1308(sp)
 10016d4:	dd400c15 	stw	r21,48(sp)
 10016d8:	d8000e15 	stw	zero,56(sp)
 10016dc:	d8000d15 	stw	zero,52(sp)
 10016e0:	b8800007 	ldb	r2,0(r23)
 10016e4:	10001926 	beq	r2,zero,100174c <___vfprintf_internal_r+0x1dc>
 10016e8:	00c00944 	movi	r3,37
 10016ec:	10c01726 	beq	r2,r3,100174c <___vfprintf_internal_r+0x1dc>
 10016f0:	b821883a 	mov	r16,r23
 10016f4:	00000106 	br	10016fc <___vfprintf_internal_r+0x18c>
 10016f8:	10c00326 	beq	r2,r3,1001708 <___vfprintf_internal_r+0x198>
 10016fc:	84000044 	addi	r16,r16,1
 1001700:	80800007 	ldb	r2,0(r16)
 1001704:	103ffc1e 	bne	r2,zero,10016f8 <___vfprintf_internal_r+0x188>
 1001708:	85e7c83a 	sub	r19,r16,r23
 100170c:	98000e26 	beq	r19,zero,1001748 <___vfprintf_internal_r+0x1d8>
 1001710:	dc800e17 	ldw	r18,56(sp)
 1001714:	dc400d17 	ldw	r17,52(sp)
 1001718:	008001c4 	movi	r2,7
 100171c:	94e5883a 	add	r18,r18,r19
 1001720:	8c400044 	addi	r17,r17,1
 1001724:	adc00015 	stw	r23,0(r21)
 1001728:	dc800e15 	stw	r18,56(sp)
 100172c:	acc00115 	stw	r19,4(r21)
 1001730:	dc400d15 	stw	r17,52(sp)
 1001734:	14428b16 	blt	r2,r17,1002164 <___vfprintf_internal_r+0xbf4>
 1001738:	ad400204 	addi	r21,r21,8
 100173c:	d9014b17 	ldw	r4,1324(sp)
 1001740:	24c9883a 	add	r4,r4,r19
 1001744:	d9014b15 	stw	r4,1324(sp)
 1001748:	802f883a 	mov	r23,r16
 100174c:	b8800007 	ldb	r2,0(r23)
 1001750:	10013c26 	beq	r2,zero,1001c44 <___vfprintf_internal_r+0x6d4>
 1001754:	bdc00044 	addi	r23,r23,1
 1001758:	d8000405 	stb	zero,16(sp)
 100175c:	b8c00007 	ldb	r3,0(r23)
 1001760:	04ffffc4 	movi	r19,-1
 1001764:	d8014c15 	stw	zero,1328(sp)
 1001768:	d8014a15 	stw	zero,1320(sp)
 100176c:	d8c14d15 	stw	r3,1332(sp)
 1001770:	bdc00044 	addi	r23,r23,1
 1001774:	d9414d17 	ldw	r5,1332(sp)
 1001778:	00801604 	movi	r2,88
 100177c:	28fff804 	addi	r3,r5,-32
 1001780:	10c06036 	bltu	r2,r3,1001904 <___vfprintf_internal_r+0x394>
 1001784:	18c5883a 	add	r2,r3,r3
 1001788:	1085883a 	add	r2,r2,r2
 100178c:	00c04034 	movhi	r3,256
 1001790:	18c5e804 	addi	r3,r3,6048
 1001794:	10c5883a 	add	r2,r2,r3
 1001798:	11000017 	ldw	r4,0(r2)
 100179c:	2000683a 	jmp	r4
 10017a0:	01002714 	movui	r4,156
 10017a4:	01001904 	movi	r4,100
 10017a8:	01001904 	movi	r4,100
 10017ac:	01002700 	call	100270 <__alt_mem_onchip_memory2_0+0x100270>
 10017b0:	01001904 	movi	r4,100
 10017b4:	01001904 	movi	r4,100
 10017b8:	01001904 	movi	r4,100
 10017bc:	01001904 	movi	r4,100
 10017c0:	01001904 	movi	r4,100
 10017c4:	01001904 	movi	r4,100
 10017c8:	010024e0 	cmpeqi	r4,zero,147
 10017cc:	010026f0 	cmpltui	r4,zero,155
 10017d0:	01001904 	movi	r4,100
 10017d4:	010024f8 	rdprs	r4,zero,147
 10017d8:	0100278c 	andi	r4,zero,158
 10017dc:	01001904 	movi	r4,100
 10017e0:	01002778 	rdprs	r4,zero,157
 10017e4:	01002740 	call	100274 <__alt_mem_onchip_memory2_0+0x100274>
 10017e8:	01002740 	call	100274 <__alt_mem_onchip_memory2_0+0x100274>
 10017ec:	01002740 	call	100274 <__alt_mem_onchip_memory2_0+0x100274>
 10017f0:	01002740 	call	100274 <__alt_mem_onchip_memory2_0+0x100274>
 10017f4:	01002740 	call	100274 <__alt_mem_onchip_memory2_0+0x100274>
 10017f8:	01002740 	call	100274 <__alt_mem_onchip_memory2_0+0x100274>
 10017fc:	01002740 	call	100274 <__alt_mem_onchip_memory2_0+0x100274>
 1001800:	01002740 	call	100274 <__alt_mem_onchip_memory2_0+0x100274>
 1001804:	01002740 	call	100274 <__alt_mem_onchip_memory2_0+0x100274>
 1001808:	01001904 	movi	r4,100
 100180c:	01001904 	movi	r4,100
 1001810:	01001904 	movi	r4,100
 1001814:	01001904 	movi	r4,100
 1001818:	01001904 	movi	r4,100
 100181c:	01001904 	movi	r4,100
 1001820:	01001904 	movi	r4,100
 1001824:	01001904 	movi	r4,100
 1001828:	01001904 	movi	r4,100
 100182c:	01001904 	movi	r4,100
 1001830:	01001f5c 	xori	r4,zero,125
 1001834:	010025c8 	cmpgei	r4,zero,151
 1001838:	01001904 	movi	r4,100
 100183c:	010025c8 	cmpgei	r4,zero,151
 1001840:	01001904 	movi	r4,100
 1001844:	01001904 	movi	r4,100
 1001848:	01001904 	movi	r4,100
 100184c:	01001904 	movi	r4,100
 1001850:	0100272c 	andhi	r4,zero,156
 1001854:	01001904 	movi	r4,100
 1001858:	01001904 	movi	r4,100
 100185c:	01002010 	cmplti	r4,zero,128
 1001860:	01001904 	movi	r4,100
 1001864:	01001904 	movi	r4,100
 1001868:	01001904 	movi	r4,100
 100186c:	01001904 	movi	r4,100
 1001870:	01001904 	movi	r4,100
 1001874:	0100205c 	xori	r4,zero,129
 1001878:	01001904 	movi	r4,100
 100187c:	01001904 	movi	r4,100
 1001880:	0100267c 	xorhi	r4,zero,153
 1001884:	01001904 	movi	r4,100
 1001888:	01001904 	movi	r4,100
 100188c:	01001904 	movi	r4,100
 1001890:	01001904 	movi	r4,100
 1001894:	01001904 	movi	r4,100
 1001898:	01001904 	movi	r4,100
 100189c:	01001904 	movi	r4,100
 10018a0:	01001904 	movi	r4,100
 10018a4:	01001904 	movi	r4,100
 10018a8:	01001904 	movi	r4,100
 10018ac:	01002650 	cmplti	r4,zero,153
 10018b0:	01001f68 	cmpgeui	r4,zero,125
 10018b4:	010025c8 	cmpgei	r4,zero,151
 10018b8:	010025c8 	cmpgei	r4,zero,151
 10018bc:	010025c8 	cmpgei	r4,zero,151
 10018c0:	010025b4 	movhi	r4,150
 10018c4:	01001f68 	cmpgeui	r4,zero,125
 10018c8:	01001904 	movi	r4,100
 10018cc:	01001904 	movi	r4,100
 10018d0:	0100253c 	xorhi	r4,zero,148
 10018d4:	01001904 	movi	r4,100
 10018d8:	0100250c 	andi	r4,zero,148
 10018dc:	0100201c 	xori	r4,zero,128
 10018e0:	0100256c 	andhi	r4,zero,149
 10018e4:	01002558 	cmpnei	r4,zero,149
 10018e8:	01001904 	movi	r4,100
 10018ec:	010027e8 	cmpgeui	r4,zero,159
 10018f0:	01001904 	movi	r4,100
 10018f4:	01002068 	cmpgeui	r4,zero,129
 10018f8:	01001904 	movi	r4,100
 10018fc:	01001904 	movi	r4,100
 1001900:	010026e0 	cmpeqi	r4,zero,155
 1001904:	d9014d17 	ldw	r4,1332(sp)
 1001908:	2000ce26 	beq	r4,zero,1001c44 <___vfprintf_internal_r+0x6d4>
 100190c:	01400044 	movi	r5,1
 1001910:	d9800f04 	addi	r6,sp,60
 1001914:	d9c14015 	stw	r7,1280(sp)
 1001918:	d9414515 	stw	r5,1300(sp)
 100191c:	d9814115 	stw	r6,1284(sp)
 1001920:	280f883a 	mov	r7,r5
 1001924:	d9000f05 	stb	r4,60(sp)
 1001928:	d8000405 	stb	zero,16(sp)
 100192c:	d8014615 	stw	zero,1304(sp)
 1001930:	d8c14c17 	ldw	r3,1328(sp)
 1001934:	1880008c 	andi	r2,r3,2
 1001938:	1005003a 	cmpeq	r2,r2,zero
 100193c:	d8815015 	stw	r2,1344(sp)
 1001940:	1000031e 	bne	r2,zero,1001950 <___vfprintf_internal_r+0x3e0>
 1001944:	d9014517 	ldw	r4,1300(sp)
 1001948:	21000084 	addi	r4,r4,2
 100194c:	d9014515 	stw	r4,1300(sp)
 1001950:	d9414c17 	ldw	r5,1328(sp)
 1001954:	2940210c 	andi	r5,r5,132
 1001958:	d9414e15 	stw	r5,1336(sp)
 100195c:	28002d1e 	bne	r5,zero,1001a14 <___vfprintf_internal_r+0x4a4>
 1001960:	d9814a17 	ldw	r6,1320(sp)
 1001964:	d8814517 	ldw	r2,1300(sp)
 1001968:	30a1c83a 	sub	r16,r6,r2
 100196c:	0400290e 	bge	zero,r16,1001a14 <___vfprintf_internal_r+0x4a4>
 1001970:	00800404 	movi	r2,16
 1001974:	1404580e 	bge	r2,r16,1002ad8 <___vfprintf_internal_r+0x1568>
 1001978:	dc800e17 	ldw	r18,56(sp)
 100197c:	dc400d17 	ldw	r17,52(sp)
 1001980:	1027883a 	mov	r19,r2
 1001984:	07004074 	movhi	fp,257
 1001988:	e7350a84 	addi	fp,fp,-11222
 100198c:	050001c4 	movi	r20,7
 1001990:	00000306 	br	10019a0 <___vfprintf_internal_r+0x430>
 1001994:	843ffc04 	addi	r16,r16,-16
 1001998:	ad400204 	addi	r21,r21,8
 100199c:	9c00130e 	bge	r19,r16,10019ec <___vfprintf_internal_r+0x47c>
 10019a0:	94800404 	addi	r18,r18,16
 10019a4:	8c400044 	addi	r17,r17,1
 10019a8:	af000015 	stw	fp,0(r21)
 10019ac:	acc00115 	stw	r19,4(r21)
 10019b0:	dc800e15 	stw	r18,56(sp)
 10019b4:	dc400d15 	stw	r17,52(sp)
 10019b8:	a47ff60e 	bge	r20,r17,1001994 <___vfprintf_internal_r+0x424>
 10019bc:	d9014f17 	ldw	r4,1340(sp)
 10019c0:	b00b883a 	mov	r5,r22
 10019c4:	d9800c04 	addi	r6,sp,48
 10019c8:	d9c15115 	stw	r7,1348(sp)
 10019cc:	10015180 	call	1001518 <__sprint_r>
 10019d0:	d9c15117 	ldw	r7,1348(sp)
 10019d4:	10009e1e 	bne	r2,zero,1001c50 <___vfprintf_internal_r+0x6e0>
 10019d8:	843ffc04 	addi	r16,r16,-16
 10019dc:	dc800e17 	ldw	r18,56(sp)
 10019e0:	dc400d17 	ldw	r17,52(sp)
 10019e4:	dd401904 	addi	r21,sp,100
 10019e8:	9c3fed16 	blt	r19,r16,10019a0 <___vfprintf_internal_r+0x430>
 10019ec:	9425883a 	add	r18,r18,r16
 10019f0:	8c400044 	addi	r17,r17,1
 10019f4:	008001c4 	movi	r2,7
 10019f8:	af000015 	stw	fp,0(r21)
 10019fc:	ac000115 	stw	r16,4(r21)
 1001a00:	dc800e15 	stw	r18,56(sp)
 1001a04:	dc400d15 	stw	r17,52(sp)
 1001a08:	1441f516 	blt	r2,r17,10021e0 <___vfprintf_internal_r+0xc70>
 1001a0c:	ad400204 	addi	r21,r21,8
 1001a10:	00000206 	br	1001a1c <___vfprintf_internal_r+0x4ac>
 1001a14:	dc800e17 	ldw	r18,56(sp)
 1001a18:	dc400d17 	ldw	r17,52(sp)
 1001a1c:	d8800407 	ldb	r2,16(sp)
 1001a20:	10000b26 	beq	r2,zero,1001a50 <___vfprintf_internal_r+0x4e0>
 1001a24:	00800044 	movi	r2,1
 1001a28:	94800044 	addi	r18,r18,1
 1001a2c:	8c400044 	addi	r17,r17,1
 1001a30:	a8800115 	stw	r2,4(r21)
 1001a34:	d8c00404 	addi	r3,sp,16
 1001a38:	008001c4 	movi	r2,7
 1001a3c:	a8c00015 	stw	r3,0(r21)
 1001a40:	dc800e15 	stw	r18,56(sp)
 1001a44:	dc400d15 	stw	r17,52(sp)
 1001a48:	1441da16 	blt	r2,r17,10021b4 <___vfprintf_internal_r+0xc44>
 1001a4c:	ad400204 	addi	r21,r21,8
 1001a50:	d9015017 	ldw	r4,1344(sp)
 1001a54:	20000b1e 	bne	r4,zero,1001a84 <___vfprintf_internal_r+0x514>
 1001a58:	d8800444 	addi	r2,sp,17
 1001a5c:	94800084 	addi	r18,r18,2
 1001a60:	8c400044 	addi	r17,r17,1
 1001a64:	a8800015 	stw	r2,0(r21)
 1001a68:	00c00084 	movi	r3,2
 1001a6c:	008001c4 	movi	r2,7
 1001a70:	a8c00115 	stw	r3,4(r21)
 1001a74:	dc800e15 	stw	r18,56(sp)
 1001a78:	dc400d15 	stw	r17,52(sp)
 1001a7c:	1441c216 	blt	r2,r17,1002188 <___vfprintf_internal_r+0xc18>
 1001a80:	ad400204 	addi	r21,r21,8
 1001a84:	d9414e17 	ldw	r5,1336(sp)
 1001a88:	00802004 	movi	r2,128
 1001a8c:	2880b126 	beq	r5,r2,1001d54 <___vfprintf_internal_r+0x7e4>
 1001a90:	d8c14617 	ldw	r3,1304(sp)
 1001a94:	19e1c83a 	sub	r16,r3,r7
 1001a98:	0400260e 	bge	zero,r16,1001b34 <___vfprintf_internal_r+0x5c4>
 1001a9c:	00800404 	movi	r2,16
 1001aa0:	1403c90e 	bge	r2,r16,10029c8 <___vfprintf_internal_r+0x1458>
 1001aa4:	1027883a 	mov	r19,r2
 1001aa8:	07004074 	movhi	fp,257
 1001aac:	e7350684 	addi	fp,fp,-11238
 1001ab0:	050001c4 	movi	r20,7
 1001ab4:	00000306 	br	1001ac4 <___vfprintf_internal_r+0x554>
 1001ab8:	843ffc04 	addi	r16,r16,-16
 1001abc:	ad400204 	addi	r21,r21,8
 1001ac0:	9c00130e 	bge	r19,r16,1001b10 <___vfprintf_internal_r+0x5a0>
 1001ac4:	94800404 	addi	r18,r18,16
 1001ac8:	8c400044 	addi	r17,r17,1
 1001acc:	af000015 	stw	fp,0(r21)
 1001ad0:	acc00115 	stw	r19,4(r21)
 1001ad4:	dc800e15 	stw	r18,56(sp)
 1001ad8:	dc400d15 	stw	r17,52(sp)
 1001adc:	a47ff60e 	bge	r20,r17,1001ab8 <___vfprintf_internal_r+0x548>
 1001ae0:	d9014f17 	ldw	r4,1340(sp)
 1001ae4:	b00b883a 	mov	r5,r22
 1001ae8:	d9800c04 	addi	r6,sp,48
 1001aec:	d9c15115 	stw	r7,1348(sp)
 1001af0:	10015180 	call	1001518 <__sprint_r>
 1001af4:	d9c15117 	ldw	r7,1348(sp)
 1001af8:	1000551e 	bne	r2,zero,1001c50 <___vfprintf_internal_r+0x6e0>
 1001afc:	843ffc04 	addi	r16,r16,-16
 1001b00:	dc800e17 	ldw	r18,56(sp)
 1001b04:	dc400d17 	ldw	r17,52(sp)
 1001b08:	dd401904 	addi	r21,sp,100
 1001b0c:	9c3fed16 	blt	r19,r16,1001ac4 <___vfprintf_internal_r+0x554>
 1001b10:	9425883a 	add	r18,r18,r16
 1001b14:	8c400044 	addi	r17,r17,1
 1001b18:	008001c4 	movi	r2,7
 1001b1c:	af000015 	stw	fp,0(r21)
 1001b20:	ac000115 	stw	r16,4(r21)
 1001b24:	dc800e15 	stw	r18,56(sp)
 1001b28:	dc400d15 	stw	r17,52(sp)
 1001b2c:	14418216 	blt	r2,r17,1002138 <___vfprintf_internal_r+0xbc8>
 1001b30:	ad400204 	addi	r21,r21,8
 1001b34:	d9014c17 	ldw	r4,1328(sp)
 1001b38:	2080400c 	andi	r2,r4,256
 1001b3c:	10004a1e 	bne	r2,zero,1001c68 <___vfprintf_internal_r+0x6f8>
 1001b40:	d9414117 	ldw	r5,1284(sp)
 1001b44:	91e5883a 	add	r18,r18,r7
 1001b48:	8c400044 	addi	r17,r17,1
 1001b4c:	008001c4 	movi	r2,7
 1001b50:	a9400015 	stw	r5,0(r21)
 1001b54:	a9c00115 	stw	r7,4(r21)
 1001b58:	dc800e15 	stw	r18,56(sp)
 1001b5c:	dc400d15 	stw	r17,52(sp)
 1001b60:	14416716 	blt	r2,r17,1002100 <___vfprintf_internal_r+0xb90>
 1001b64:	a8c00204 	addi	r3,r21,8
 1001b68:	d9814c17 	ldw	r6,1328(sp)
 1001b6c:	3080010c 	andi	r2,r6,4
 1001b70:	10002826 	beq	r2,zero,1001c14 <___vfprintf_internal_r+0x6a4>
 1001b74:	d8814a17 	ldw	r2,1320(sp)
 1001b78:	d9014517 	ldw	r4,1300(sp)
 1001b7c:	1121c83a 	sub	r16,r2,r4
 1001b80:	0400240e 	bge	zero,r16,1001c14 <___vfprintf_internal_r+0x6a4>
 1001b84:	00800404 	movi	r2,16
 1001b88:	14044f0e 	bge	r2,r16,1002cc8 <___vfprintf_internal_r+0x1758>
 1001b8c:	dc400d17 	ldw	r17,52(sp)
 1001b90:	1027883a 	mov	r19,r2
 1001b94:	07004074 	movhi	fp,257
 1001b98:	e7350a84 	addi	fp,fp,-11222
 1001b9c:	050001c4 	movi	r20,7
 1001ba0:	00000306 	br	1001bb0 <___vfprintf_internal_r+0x640>
 1001ba4:	843ffc04 	addi	r16,r16,-16
 1001ba8:	18c00204 	addi	r3,r3,8
 1001bac:	9c00110e 	bge	r19,r16,1001bf4 <___vfprintf_internal_r+0x684>
 1001bb0:	94800404 	addi	r18,r18,16
 1001bb4:	8c400044 	addi	r17,r17,1
 1001bb8:	1f000015 	stw	fp,0(r3)
 1001bbc:	1cc00115 	stw	r19,4(r3)
 1001bc0:	dc800e15 	stw	r18,56(sp)
 1001bc4:	dc400d15 	stw	r17,52(sp)
 1001bc8:	a47ff60e 	bge	r20,r17,1001ba4 <___vfprintf_internal_r+0x634>
 1001bcc:	d9014f17 	ldw	r4,1340(sp)
 1001bd0:	b00b883a 	mov	r5,r22
 1001bd4:	d9800c04 	addi	r6,sp,48
 1001bd8:	10015180 	call	1001518 <__sprint_r>
 1001bdc:	10001c1e 	bne	r2,zero,1001c50 <___vfprintf_internal_r+0x6e0>
 1001be0:	843ffc04 	addi	r16,r16,-16
 1001be4:	dc800e17 	ldw	r18,56(sp)
 1001be8:	dc400d17 	ldw	r17,52(sp)
 1001bec:	d8c01904 	addi	r3,sp,100
 1001bf0:	9c3fef16 	blt	r19,r16,1001bb0 <___vfprintf_internal_r+0x640>
 1001bf4:	9425883a 	add	r18,r18,r16
 1001bf8:	8c400044 	addi	r17,r17,1
 1001bfc:	008001c4 	movi	r2,7
 1001c00:	1f000015 	stw	fp,0(r3)
 1001c04:	1c000115 	stw	r16,4(r3)
 1001c08:	dc800e15 	stw	r18,56(sp)
 1001c0c:	dc400d15 	stw	r17,52(sp)
 1001c10:	1440cb16 	blt	r2,r17,1001f40 <___vfprintf_internal_r+0x9d0>
 1001c14:	d8814a17 	ldw	r2,1320(sp)
 1001c18:	d9414517 	ldw	r5,1300(sp)
 1001c1c:	1140010e 	bge	r2,r5,1001c24 <___vfprintf_internal_r+0x6b4>
 1001c20:	2805883a 	mov	r2,r5
 1001c24:	d9814b17 	ldw	r6,1324(sp)
 1001c28:	308d883a 	add	r6,r6,r2
 1001c2c:	d9814b15 	stw	r6,1324(sp)
 1001c30:	90013b1e 	bne	r18,zero,1002120 <___vfprintf_internal_r+0xbb0>
 1001c34:	d9c14017 	ldw	r7,1280(sp)
 1001c38:	dd401904 	addi	r21,sp,100
 1001c3c:	d8000d15 	stw	zero,52(sp)
 1001c40:	003ea706 	br	10016e0 <___vfprintf_internal_r+0x170>
 1001c44:	d8800e17 	ldw	r2,56(sp)
 1001c48:	10053f1e 	bne	r2,zero,1003148 <___vfprintf_internal_r+0x1bd8>
 1001c4c:	d8000d15 	stw	zero,52(sp)
 1001c50:	b080030b 	ldhu	r2,12(r22)
 1001c54:	1080100c 	andi	r2,r2,64
 1001c58:	103e8726 	beq	r2,zero,1001678 <___vfprintf_internal_r+0x108>
 1001c5c:	00bfffc4 	movi	r2,-1
 1001c60:	d8814b15 	stw	r2,1324(sp)
 1001c64:	003e8406 	br	1001678 <___vfprintf_internal_r+0x108>
 1001c68:	d9814d17 	ldw	r6,1332(sp)
 1001c6c:	00801944 	movi	r2,101
 1001c70:	11806e16 	blt	r2,r6,1001e2c <___vfprintf_internal_r+0x8bc>
 1001c74:	d9414717 	ldw	r5,1308(sp)
 1001c78:	00c00044 	movi	r3,1
 1001c7c:	1943430e 	bge	r3,r5,100298c <___vfprintf_internal_r+0x141c>
 1001c80:	d8814117 	ldw	r2,1284(sp)
 1001c84:	94800044 	addi	r18,r18,1
 1001c88:	8c400044 	addi	r17,r17,1
 1001c8c:	a8800015 	stw	r2,0(r21)
 1001c90:	008001c4 	movi	r2,7
 1001c94:	a8c00115 	stw	r3,4(r21)
 1001c98:	dc800e15 	stw	r18,56(sp)
 1001c9c:	dc400d15 	stw	r17,52(sp)
 1001ca0:	1441ca16 	blt	r2,r17,10023cc <___vfprintf_internal_r+0xe5c>
 1001ca4:	a8c00204 	addi	r3,r21,8
 1001ca8:	d9014917 	ldw	r4,1316(sp)
 1001cac:	00800044 	movi	r2,1
 1001cb0:	94800044 	addi	r18,r18,1
 1001cb4:	8c400044 	addi	r17,r17,1
 1001cb8:	18800115 	stw	r2,4(r3)
 1001cbc:	008001c4 	movi	r2,7
 1001cc0:	19000015 	stw	r4,0(r3)
 1001cc4:	dc800e15 	stw	r18,56(sp)
 1001cc8:	dc400d15 	stw	r17,52(sp)
 1001ccc:	1441b616 	blt	r2,r17,10023a8 <___vfprintf_internal_r+0xe38>
 1001cd0:	1cc00204 	addi	r19,r3,8
 1001cd4:	d9014217 	ldw	r4,1288(sp)
 1001cd8:	d9414317 	ldw	r5,1292(sp)
 1001cdc:	000d883a 	mov	r6,zero
 1001ce0:	000f883a 	mov	r7,zero
 1001ce4:	1009b680 	call	1009b68 <__nedf2>
 1001ce8:	10017426 	beq	r2,zero,10022bc <___vfprintf_internal_r+0xd4c>
 1001cec:	d9414717 	ldw	r5,1308(sp)
 1001cf0:	d9814117 	ldw	r6,1284(sp)
 1001cf4:	8c400044 	addi	r17,r17,1
 1001cf8:	2c85883a 	add	r2,r5,r18
 1001cfc:	14bfffc4 	addi	r18,r2,-1
 1001d00:	28bfffc4 	addi	r2,r5,-1
 1001d04:	30c00044 	addi	r3,r6,1
 1001d08:	98800115 	stw	r2,4(r19)
 1001d0c:	008001c4 	movi	r2,7
 1001d10:	98c00015 	stw	r3,0(r19)
 1001d14:	dc800e15 	stw	r18,56(sp)
 1001d18:	dc400d15 	stw	r17,52(sp)
 1001d1c:	14418e16 	blt	r2,r17,1002358 <___vfprintf_internal_r+0xde8>
 1001d20:	9cc00204 	addi	r19,r19,8
 1001d24:	d9414817 	ldw	r5,1312(sp)
 1001d28:	d8800804 	addi	r2,sp,32
 1001d2c:	8c400044 	addi	r17,r17,1
 1001d30:	9165883a 	add	r18,r18,r5
 1001d34:	98800015 	stw	r2,0(r19)
 1001d38:	008001c4 	movi	r2,7
 1001d3c:	99400115 	stw	r5,4(r19)
 1001d40:	dc800e15 	stw	r18,56(sp)
 1001d44:	dc400d15 	stw	r17,52(sp)
 1001d48:	1440ed16 	blt	r2,r17,1002100 <___vfprintf_internal_r+0xb90>
 1001d4c:	98c00204 	addi	r3,r19,8
 1001d50:	003f8506 	br	1001b68 <___vfprintf_internal_r+0x5f8>
 1001d54:	d9814a17 	ldw	r6,1320(sp)
 1001d58:	d8814517 	ldw	r2,1300(sp)
 1001d5c:	30a1c83a 	sub	r16,r6,r2
 1001d60:	043f4b0e 	bge	zero,r16,1001a90 <___vfprintf_internal_r+0x520>
 1001d64:	00800404 	movi	r2,16
 1001d68:	1404340e 	bge	r2,r16,1002e3c <___vfprintf_internal_r+0x18cc>
 1001d6c:	1027883a 	mov	r19,r2
 1001d70:	07004074 	movhi	fp,257
 1001d74:	e7350684 	addi	fp,fp,-11238
 1001d78:	050001c4 	movi	r20,7
 1001d7c:	00000306 	br	1001d8c <___vfprintf_internal_r+0x81c>
 1001d80:	843ffc04 	addi	r16,r16,-16
 1001d84:	ad400204 	addi	r21,r21,8
 1001d88:	9c00130e 	bge	r19,r16,1001dd8 <___vfprintf_internal_r+0x868>
 1001d8c:	94800404 	addi	r18,r18,16
 1001d90:	8c400044 	addi	r17,r17,1
 1001d94:	af000015 	stw	fp,0(r21)
 1001d98:	acc00115 	stw	r19,4(r21)
 1001d9c:	dc800e15 	stw	r18,56(sp)
 1001da0:	dc400d15 	stw	r17,52(sp)
 1001da4:	a47ff60e 	bge	r20,r17,1001d80 <___vfprintf_internal_r+0x810>
 1001da8:	d9014f17 	ldw	r4,1340(sp)
 1001dac:	b00b883a 	mov	r5,r22
 1001db0:	d9800c04 	addi	r6,sp,48
 1001db4:	d9c15115 	stw	r7,1348(sp)
 1001db8:	10015180 	call	1001518 <__sprint_r>
 1001dbc:	d9c15117 	ldw	r7,1348(sp)
 1001dc0:	103fa31e 	bne	r2,zero,1001c50 <___vfprintf_internal_r+0x6e0>
 1001dc4:	843ffc04 	addi	r16,r16,-16
 1001dc8:	dc800e17 	ldw	r18,56(sp)
 1001dcc:	dc400d17 	ldw	r17,52(sp)
 1001dd0:	dd401904 	addi	r21,sp,100
 1001dd4:	9c3fed16 	blt	r19,r16,1001d8c <___vfprintf_internal_r+0x81c>
 1001dd8:	9425883a 	add	r18,r18,r16
 1001ddc:	8c400044 	addi	r17,r17,1
 1001de0:	008001c4 	movi	r2,7
 1001de4:	af000015 	stw	fp,0(r21)
 1001de8:	ac000115 	stw	r16,4(r21)
 1001dec:	dc800e15 	stw	r18,56(sp)
 1001df0:	dc400d15 	stw	r17,52(sp)
 1001df4:	14416116 	blt	r2,r17,100237c <___vfprintf_internal_r+0xe0c>
 1001df8:	ad400204 	addi	r21,r21,8
 1001dfc:	003f2406 	br	1001a90 <___vfprintf_internal_r+0x520>
 1001e00:	d9014f17 	ldw	r4,1340(sp)
 1001e04:	1004fe00 	call	1004fe0 <__sinit>
 1001e08:	d9c15117 	ldw	r7,1348(sp)
 1001e0c:	003def06 	br	10015cc <___vfprintf_internal_r+0x5c>
 1001e10:	d9014f17 	ldw	r4,1340(sp)
 1001e14:	b00b883a 	mov	r5,r22
 1001e18:	d9c15115 	stw	r7,1348(sp)
 1001e1c:	10034400 	call	1003440 <__swsetup_r>
 1001e20:	d9c15117 	ldw	r7,1348(sp)
 1001e24:	103dee26 	beq	r2,zero,10015e0 <___vfprintf_internal_r+0x70>
 1001e28:	003f8c06 	br	1001c5c <___vfprintf_internal_r+0x6ec>
 1001e2c:	d9014217 	ldw	r4,1288(sp)
 1001e30:	d9414317 	ldw	r5,1292(sp)
 1001e34:	000d883a 	mov	r6,zero
 1001e38:	000f883a 	mov	r7,zero
 1001e3c:	1009ae00 	call	1009ae0 <__eqdf2>
 1001e40:	1000f21e 	bne	r2,zero,100220c <___vfprintf_internal_r+0xc9c>
 1001e44:	00804074 	movhi	r2,257
 1001e48:	10b50604 	addi	r2,r2,-11240
 1001e4c:	94800044 	addi	r18,r18,1
 1001e50:	8c400044 	addi	r17,r17,1
 1001e54:	a8800015 	stw	r2,0(r21)
 1001e58:	00c00044 	movi	r3,1
 1001e5c:	008001c4 	movi	r2,7
 1001e60:	a8c00115 	stw	r3,4(r21)
 1001e64:	dc800e15 	stw	r18,56(sp)
 1001e68:	dc400d15 	stw	r17,52(sp)
 1001e6c:	1442fa16 	blt	r2,r17,1002a58 <___vfprintf_internal_r+0x14e8>
 1001e70:	a8c00204 	addi	r3,r21,8
 1001e74:	d8800517 	ldw	r2,20(sp)
 1001e78:	d9014717 	ldw	r4,1308(sp)
 1001e7c:	11015c0e 	bge	r2,r4,10023f0 <___vfprintf_internal_r+0xe80>
 1001e80:	dc400d17 	ldw	r17,52(sp)
 1001e84:	d9814917 	ldw	r6,1316(sp)
 1001e88:	00800044 	movi	r2,1
 1001e8c:	94800044 	addi	r18,r18,1
 1001e90:	8c400044 	addi	r17,r17,1
 1001e94:	18800115 	stw	r2,4(r3)
 1001e98:	008001c4 	movi	r2,7
 1001e9c:	19800015 	stw	r6,0(r3)
 1001ea0:	dc800e15 	stw	r18,56(sp)
 1001ea4:	dc400d15 	stw	r17,52(sp)
 1001ea8:	14431016 	blt	r2,r17,1002aec <___vfprintf_internal_r+0x157c>
 1001eac:	18c00204 	addi	r3,r3,8
 1001eb0:	d8814717 	ldw	r2,1308(sp)
 1001eb4:	143fffc4 	addi	r16,r2,-1
 1001eb8:	043f2b0e 	bge	zero,r16,1001b68 <___vfprintf_internal_r+0x5f8>
 1001ebc:	00800404 	movi	r2,16
 1001ec0:	1402a20e 	bge	r2,r16,100294c <___vfprintf_internal_r+0x13dc>
 1001ec4:	dc400d17 	ldw	r17,52(sp)
 1001ec8:	1027883a 	mov	r19,r2
 1001ecc:	07004074 	movhi	fp,257
 1001ed0:	e7350684 	addi	fp,fp,-11238
 1001ed4:	050001c4 	movi	r20,7
 1001ed8:	00000306 	br	1001ee8 <___vfprintf_internal_r+0x978>
 1001edc:	18c00204 	addi	r3,r3,8
 1001ee0:	843ffc04 	addi	r16,r16,-16
 1001ee4:	9c029c0e 	bge	r19,r16,1002958 <___vfprintf_internal_r+0x13e8>
 1001ee8:	94800404 	addi	r18,r18,16
 1001eec:	8c400044 	addi	r17,r17,1
 1001ef0:	1f000015 	stw	fp,0(r3)
 1001ef4:	1cc00115 	stw	r19,4(r3)
 1001ef8:	dc800e15 	stw	r18,56(sp)
 1001efc:	dc400d15 	stw	r17,52(sp)
 1001f00:	a47ff60e 	bge	r20,r17,1001edc <___vfprintf_internal_r+0x96c>
 1001f04:	d9014f17 	ldw	r4,1340(sp)
 1001f08:	b00b883a 	mov	r5,r22
 1001f0c:	d9800c04 	addi	r6,sp,48
 1001f10:	10015180 	call	1001518 <__sprint_r>
 1001f14:	103f4e1e 	bne	r2,zero,1001c50 <___vfprintf_internal_r+0x6e0>
 1001f18:	dc800e17 	ldw	r18,56(sp)
 1001f1c:	dc400d17 	ldw	r17,52(sp)
 1001f20:	d8c01904 	addi	r3,sp,100
 1001f24:	003fee06 	br	1001ee0 <___vfprintf_internal_r+0x970>
 1001f28:	d8802c0b 	ldhu	r2,176(sp)
 1001f2c:	00ffffc4 	movi	r3,-1
 1001f30:	d8c14b15 	stw	r3,1324(sp)
 1001f34:	1080100c 	andi	r2,r2,64
 1001f38:	103dcc1e 	bne	r2,zero,100166c <___vfprintf_internal_r+0xfc>
 1001f3c:	003dce06 	br	1001678 <___vfprintf_internal_r+0x108>
 1001f40:	d9014f17 	ldw	r4,1340(sp)
 1001f44:	b00b883a 	mov	r5,r22
 1001f48:	d9800c04 	addi	r6,sp,48
 1001f4c:	10015180 	call	1001518 <__sprint_r>
 1001f50:	103f3f1e 	bne	r2,zero,1001c50 <___vfprintf_internal_r+0x6e0>
 1001f54:	dc800e17 	ldw	r18,56(sp)
 1001f58:	003f2e06 	br	1001c14 <___vfprintf_internal_r+0x6a4>
 1001f5c:	d9414c17 	ldw	r5,1328(sp)
 1001f60:	29400414 	ori	r5,r5,16
 1001f64:	d9414c15 	stw	r5,1328(sp)
 1001f68:	d9814c17 	ldw	r6,1328(sp)
 1001f6c:	3080080c 	andi	r2,r6,32
 1001f70:	10014f1e 	bne	r2,zero,10024b0 <___vfprintf_internal_r+0xf40>
 1001f74:	d8c14c17 	ldw	r3,1328(sp)
 1001f78:	1880040c 	andi	r2,r3,16
 1001f7c:	1002ea1e 	bne	r2,zero,1002b28 <___vfprintf_internal_r+0x15b8>
 1001f80:	d9014c17 	ldw	r4,1328(sp)
 1001f84:	2080100c 	andi	r2,r4,64
 1001f88:	1002e726 	beq	r2,zero,1002b28 <___vfprintf_internal_r+0x15b8>
 1001f8c:	3880000f 	ldh	r2,0(r7)
 1001f90:	39c00104 	addi	r7,r7,4
 1001f94:	d9c14015 	stw	r7,1280(sp)
 1001f98:	1023d7fa 	srai	r17,r2,31
 1001f9c:	1021883a 	mov	r16,r2
 1001fa0:	88037216 	blt	r17,zero,1002d6c <___vfprintf_internal_r+0x17fc>
 1001fa4:	01000044 	movi	r4,1
 1001fa8:	98000416 	blt	r19,zero,1001fbc <___vfprintf_internal_r+0xa4c>
 1001fac:	d8c14c17 	ldw	r3,1328(sp)
 1001fb0:	00bfdfc4 	movi	r2,-129
 1001fb4:	1886703a 	and	r3,r3,r2
 1001fb8:	d8c14c15 	stw	r3,1328(sp)
 1001fbc:	8444b03a 	or	r2,r16,r17
 1001fc0:	1002261e 	bne	r2,zero,100285c <___vfprintf_internal_r+0x12ec>
 1001fc4:	9802251e 	bne	r19,zero,100285c <___vfprintf_internal_r+0x12ec>
 1001fc8:	20803fcc 	andi	r2,r4,255
 1001fcc:	10029b26 	beq	r2,zero,1002a3c <___vfprintf_internal_r+0x14cc>
 1001fd0:	d8c01904 	addi	r3,sp,100
 1001fd4:	dd000f04 	addi	r20,sp,60
 1001fd8:	d8c14115 	stw	r3,1284(sp)
 1001fdc:	d8c14117 	ldw	r3,1284(sp)
 1001fe0:	dcc14515 	stw	r19,1300(sp)
 1001fe4:	a0c5c83a 	sub	r2,r20,r3
 1001fe8:	11c00a04 	addi	r7,r2,40
 1001fec:	99c0010e 	bge	r19,r7,1001ff4 <___vfprintf_internal_r+0xa84>
 1001ff0:	d9c14515 	stw	r7,1300(sp)
 1001ff4:	dcc14615 	stw	r19,1304(sp)
 1001ff8:	d8800407 	ldb	r2,16(sp)
 1001ffc:	103e4c26 	beq	r2,zero,1001930 <___vfprintf_internal_r+0x3c0>
 1002000:	d8814517 	ldw	r2,1300(sp)
 1002004:	10800044 	addi	r2,r2,1
 1002008:	d8814515 	stw	r2,1300(sp)
 100200c:	003e4806 	br	1001930 <___vfprintf_internal_r+0x3c0>
 1002010:	d9814c17 	ldw	r6,1328(sp)
 1002014:	31800414 	ori	r6,r6,16
 1002018:	d9814c15 	stw	r6,1328(sp)
 100201c:	d8c14c17 	ldw	r3,1328(sp)
 1002020:	1880080c 	andi	r2,r3,32
 1002024:	1001271e 	bne	r2,zero,10024c4 <___vfprintf_internal_r+0xf54>
 1002028:	d9414c17 	ldw	r5,1328(sp)
 100202c:	2880040c 	andi	r2,r5,16
 1002030:	1002b61e 	bne	r2,zero,1002b0c <___vfprintf_internal_r+0x159c>
 1002034:	d9814c17 	ldw	r6,1328(sp)
 1002038:	3080100c 	andi	r2,r6,64
 100203c:	1002b326 	beq	r2,zero,1002b0c <___vfprintf_internal_r+0x159c>
 1002040:	3c00000b 	ldhu	r16,0(r7)
 1002044:	0009883a 	mov	r4,zero
 1002048:	39c00104 	addi	r7,r7,4
 100204c:	0023883a 	mov	r17,zero
 1002050:	d9c14015 	stw	r7,1280(sp)
 1002054:	d8000405 	stb	zero,16(sp)
 1002058:	003fd306 	br	1001fa8 <___vfprintf_internal_r+0xa38>
 100205c:	d9014c17 	ldw	r4,1328(sp)
 1002060:	21000414 	ori	r4,r4,16
 1002064:	d9014c15 	stw	r4,1328(sp)
 1002068:	d9414c17 	ldw	r5,1328(sp)
 100206c:	2880080c 	andi	r2,r5,32
 1002070:	1001081e 	bne	r2,zero,1002494 <___vfprintf_internal_r+0xf24>
 1002074:	d8c14c17 	ldw	r3,1328(sp)
 1002078:	1880040c 	andi	r2,r3,16
 100207c:	1002b01e 	bne	r2,zero,1002b40 <___vfprintf_internal_r+0x15d0>
 1002080:	d9014c17 	ldw	r4,1328(sp)
 1002084:	2080100c 	andi	r2,r4,64
 1002088:	1002ad26 	beq	r2,zero,1002b40 <___vfprintf_internal_r+0x15d0>
 100208c:	3c00000b 	ldhu	r16,0(r7)
 1002090:	01000044 	movi	r4,1
 1002094:	39c00104 	addi	r7,r7,4
 1002098:	0023883a 	mov	r17,zero
 100209c:	d9c14015 	stw	r7,1280(sp)
 10020a0:	d8000405 	stb	zero,16(sp)
 10020a4:	003fc006 	br	1001fa8 <___vfprintf_internal_r+0xa38>
 10020a8:	d9014f17 	ldw	r4,1340(sp)
 10020ac:	b00b883a 	mov	r5,r22
 10020b0:	d9800c04 	addi	r6,sp,48
 10020b4:	10015180 	call	1001518 <__sprint_r>
 10020b8:	103ee51e 	bne	r2,zero,1001c50 <___vfprintf_internal_r+0x6e0>
 10020bc:	dc800e17 	ldw	r18,56(sp)
 10020c0:	d8c01904 	addi	r3,sp,100
 10020c4:	d9814c17 	ldw	r6,1328(sp)
 10020c8:	3080004c 	andi	r2,r6,1
 10020cc:	1005003a 	cmpeq	r2,r2,zero
 10020d0:	103ea51e 	bne	r2,zero,1001b68 <___vfprintf_internal_r+0x5f8>
 10020d4:	00800044 	movi	r2,1
 10020d8:	dc400d17 	ldw	r17,52(sp)
 10020dc:	18800115 	stw	r2,4(r3)
 10020e0:	d8814917 	ldw	r2,1316(sp)
 10020e4:	94800044 	addi	r18,r18,1
 10020e8:	8c400044 	addi	r17,r17,1
 10020ec:	18800015 	stw	r2,0(r3)
 10020f0:	008001c4 	movi	r2,7
 10020f4:	dc800e15 	stw	r18,56(sp)
 10020f8:	dc400d15 	stw	r17,52(sp)
 10020fc:	14421e0e 	bge	r2,r17,1002978 <___vfprintf_internal_r+0x1408>
 1002100:	d9014f17 	ldw	r4,1340(sp)
 1002104:	b00b883a 	mov	r5,r22
 1002108:	d9800c04 	addi	r6,sp,48
 100210c:	10015180 	call	1001518 <__sprint_r>
 1002110:	103ecf1e 	bne	r2,zero,1001c50 <___vfprintf_internal_r+0x6e0>
 1002114:	dc800e17 	ldw	r18,56(sp)
 1002118:	d8c01904 	addi	r3,sp,100
 100211c:	003e9206 	br	1001b68 <___vfprintf_internal_r+0x5f8>
 1002120:	d9014f17 	ldw	r4,1340(sp)
 1002124:	b00b883a 	mov	r5,r22
 1002128:	d9800c04 	addi	r6,sp,48
 100212c:	10015180 	call	1001518 <__sprint_r>
 1002130:	103ec026 	beq	r2,zero,1001c34 <___vfprintf_internal_r+0x6c4>
 1002134:	003ec606 	br	1001c50 <___vfprintf_internal_r+0x6e0>
 1002138:	d9014f17 	ldw	r4,1340(sp)
 100213c:	b00b883a 	mov	r5,r22
 1002140:	d9800c04 	addi	r6,sp,48
 1002144:	d9c15115 	stw	r7,1348(sp)
 1002148:	10015180 	call	1001518 <__sprint_r>
 100214c:	d9c15117 	ldw	r7,1348(sp)
 1002150:	103ebf1e 	bne	r2,zero,1001c50 <___vfprintf_internal_r+0x6e0>
 1002154:	dc800e17 	ldw	r18,56(sp)
 1002158:	dc400d17 	ldw	r17,52(sp)
 100215c:	dd401904 	addi	r21,sp,100
 1002160:	003e7406 	br	1001b34 <___vfprintf_internal_r+0x5c4>
 1002164:	d9014f17 	ldw	r4,1340(sp)
 1002168:	b00b883a 	mov	r5,r22
 100216c:	d9800c04 	addi	r6,sp,48
 1002170:	d9c15115 	stw	r7,1348(sp)
 1002174:	10015180 	call	1001518 <__sprint_r>
 1002178:	d9c15117 	ldw	r7,1348(sp)
 100217c:	103eb41e 	bne	r2,zero,1001c50 <___vfprintf_internal_r+0x6e0>
 1002180:	dd401904 	addi	r21,sp,100
 1002184:	003d6d06 	br	100173c <___vfprintf_internal_r+0x1cc>
 1002188:	d9014f17 	ldw	r4,1340(sp)
 100218c:	b00b883a 	mov	r5,r22
 1002190:	d9800c04 	addi	r6,sp,48
 1002194:	d9c15115 	stw	r7,1348(sp)
 1002198:	10015180 	call	1001518 <__sprint_r>
 100219c:	d9c15117 	ldw	r7,1348(sp)
 10021a0:	103eab1e 	bne	r2,zero,1001c50 <___vfprintf_internal_r+0x6e0>
 10021a4:	dc800e17 	ldw	r18,56(sp)
 10021a8:	dc400d17 	ldw	r17,52(sp)
 10021ac:	dd401904 	addi	r21,sp,100
 10021b0:	003e3406 	br	1001a84 <___vfprintf_internal_r+0x514>
 10021b4:	d9014f17 	ldw	r4,1340(sp)
 10021b8:	b00b883a 	mov	r5,r22
 10021bc:	d9800c04 	addi	r6,sp,48
 10021c0:	d9c15115 	stw	r7,1348(sp)
 10021c4:	10015180 	call	1001518 <__sprint_r>
 10021c8:	d9c15117 	ldw	r7,1348(sp)
 10021cc:	103ea01e 	bne	r2,zero,1001c50 <___vfprintf_internal_r+0x6e0>
 10021d0:	dc800e17 	ldw	r18,56(sp)
 10021d4:	dc400d17 	ldw	r17,52(sp)
 10021d8:	dd401904 	addi	r21,sp,100
 10021dc:	003e1c06 	br	1001a50 <___vfprintf_internal_r+0x4e0>
 10021e0:	d9014f17 	ldw	r4,1340(sp)
 10021e4:	b00b883a 	mov	r5,r22
 10021e8:	d9800c04 	addi	r6,sp,48
 10021ec:	d9c15115 	stw	r7,1348(sp)
 10021f0:	10015180 	call	1001518 <__sprint_r>
 10021f4:	d9c15117 	ldw	r7,1348(sp)
 10021f8:	103e951e 	bne	r2,zero,1001c50 <___vfprintf_internal_r+0x6e0>
 10021fc:	dc800e17 	ldw	r18,56(sp)
 1002200:	dc400d17 	ldw	r17,52(sp)
 1002204:	dd401904 	addi	r21,sp,100
 1002208:	003e0406 	br	1001a1c <___vfprintf_internal_r+0x4ac>
 100220c:	d9000517 	ldw	r4,20(sp)
 1002210:	0102520e 	bge	zero,r4,1002b5c <___vfprintf_internal_r+0x15ec>
 1002214:	d9814717 	ldw	r6,1308(sp)
 1002218:	21807a16 	blt	r4,r6,1002404 <___vfprintf_internal_r+0xe94>
 100221c:	d8814117 	ldw	r2,1284(sp)
 1002220:	91a5883a 	add	r18,r18,r6
 1002224:	8c400044 	addi	r17,r17,1
 1002228:	a8800015 	stw	r2,0(r21)
 100222c:	008001c4 	movi	r2,7
 1002230:	a9800115 	stw	r6,4(r21)
 1002234:	dc800e15 	stw	r18,56(sp)
 1002238:	dc400d15 	stw	r17,52(sp)
 100223c:	1442f616 	blt	r2,r17,1002e18 <___vfprintf_internal_r+0x18a8>
 1002240:	a8c00204 	addi	r3,r21,8
 1002244:	d9414717 	ldw	r5,1308(sp)
 1002248:	2161c83a 	sub	r16,r4,r5
 100224c:	043f9d0e 	bge	zero,r16,10020c4 <___vfprintf_internal_r+0xb54>
 1002250:	00800404 	movi	r2,16
 1002254:	1402130e 	bge	r2,r16,1002aa4 <___vfprintf_internal_r+0x1534>
 1002258:	dc400d17 	ldw	r17,52(sp)
 100225c:	1027883a 	mov	r19,r2
 1002260:	07004074 	movhi	fp,257
 1002264:	e7350684 	addi	fp,fp,-11238
 1002268:	050001c4 	movi	r20,7
 100226c:	00000306 	br	100227c <___vfprintf_internal_r+0xd0c>
 1002270:	18c00204 	addi	r3,r3,8
 1002274:	843ffc04 	addi	r16,r16,-16
 1002278:	9c020d0e 	bge	r19,r16,1002ab0 <___vfprintf_internal_r+0x1540>
 100227c:	94800404 	addi	r18,r18,16
 1002280:	8c400044 	addi	r17,r17,1
 1002284:	1f000015 	stw	fp,0(r3)
 1002288:	1cc00115 	stw	r19,4(r3)
 100228c:	dc800e15 	stw	r18,56(sp)
 1002290:	dc400d15 	stw	r17,52(sp)
 1002294:	a47ff60e 	bge	r20,r17,1002270 <___vfprintf_internal_r+0xd00>
 1002298:	d9014f17 	ldw	r4,1340(sp)
 100229c:	b00b883a 	mov	r5,r22
 10022a0:	d9800c04 	addi	r6,sp,48
 10022a4:	10015180 	call	1001518 <__sprint_r>
 10022a8:	103e691e 	bne	r2,zero,1001c50 <___vfprintf_internal_r+0x6e0>
 10022ac:	dc800e17 	ldw	r18,56(sp)
 10022b0:	dc400d17 	ldw	r17,52(sp)
 10022b4:	d8c01904 	addi	r3,sp,100
 10022b8:	003fee06 	br	1002274 <___vfprintf_internal_r+0xd04>
 10022bc:	d8814717 	ldw	r2,1308(sp)
 10022c0:	143fffc4 	addi	r16,r2,-1
 10022c4:	043e970e 	bge	zero,r16,1001d24 <___vfprintf_internal_r+0x7b4>
 10022c8:	00800404 	movi	r2,16
 10022cc:	1400180e 	bge	r2,r16,1002330 <___vfprintf_internal_r+0xdc0>
 10022d0:	1029883a 	mov	r20,r2
 10022d4:	07004074 	movhi	fp,257
 10022d8:	e7350684 	addi	fp,fp,-11238
 10022dc:	054001c4 	movi	r21,7
 10022e0:	00000306 	br	10022f0 <___vfprintf_internal_r+0xd80>
 10022e4:	9cc00204 	addi	r19,r19,8
 10022e8:	843ffc04 	addi	r16,r16,-16
 10022ec:	a400120e 	bge	r20,r16,1002338 <___vfprintf_internal_r+0xdc8>
 10022f0:	94800404 	addi	r18,r18,16
 10022f4:	8c400044 	addi	r17,r17,1
 10022f8:	9f000015 	stw	fp,0(r19)
 10022fc:	9d000115 	stw	r20,4(r19)
 1002300:	dc800e15 	stw	r18,56(sp)
 1002304:	dc400d15 	stw	r17,52(sp)
 1002308:	ac7ff60e 	bge	r21,r17,10022e4 <___vfprintf_internal_r+0xd74>
 100230c:	d9014f17 	ldw	r4,1340(sp)
 1002310:	b00b883a 	mov	r5,r22
 1002314:	d9800c04 	addi	r6,sp,48
 1002318:	10015180 	call	1001518 <__sprint_r>
 100231c:	103e4c1e 	bne	r2,zero,1001c50 <___vfprintf_internal_r+0x6e0>
 1002320:	dc800e17 	ldw	r18,56(sp)
 1002324:	dc400d17 	ldw	r17,52(sp)
 1002328:	dcc01904 	addi	r19,sp,100
 100232c:	003fee06 	br	10022e8 <___vfprintf_internal_r+0xd78>
 1002330:	07004074 	movhi	fp,257
 1002334:	e7350684 	addi	fp,fp,-11238
 1002338:	9425883a 	add	r18,r18,r16
 100233c:	8c400044 	addi	r17,r17,1
 1002340:	008001c4 	movi	r2,7
 1002344:	9f000015 	stw	fp,0(r19)
 1002348:	9c000115 	stw	r16,4(r19)
 100234c:	dc800e15 	stw	r18,56(sp)
 1002350:	dc400d15 	stw	r17,52(sp)
 1002354:	147e720e 	bge	r2,r17,1001d20 <___vfprintf_internal_r+0x7b0>
 1002358:	d9014f17 	ldw	r4,1340(sp)
 100235c:	b00b883a 	mov	r5,r22
 1002360:	d9800c04 	addi	r6,sp,48
 1002364:	10015180 	call	1001518 <__sprint_r>
 1002368:	103e391e 	bne	r2,zero,1001c50 <___vfprintf_internal_r+0x6e0>
 100236c:	dc800e17 	ldw	r18,56(sp)
 1002370:	dc400d17 	ldw	r17,52(sp)
 1002374:	dcc01904 	addi	r19,sp,100
 1002378:	003e6a06 	br	1001d24 <___vfprintf_internal_r+0x7b4>
 100237c:	d9014f17 	ldw	r4,1340(sp)
 1002380:	b00b883a 	mov	r5,r22
 1002384:	d9800c04 	addi	r6,sp,48
 1002388:	d9c15115 	stw	r7,1348(sp)
 100238c:	10015180 	call	1001518 <__sprint_r>
 1002390:	d9c15117 	ldw	r7,1348(sp)
 1002394:	103e2e1e 	bne	r2,zero,1001c50 <___vfprintf_internal_r+0x6e0>
 1002398:	dc800e17 	ldw	r18,56(sp)
 100239c:	dc400d17 	ldw	r17,52(sp)
 10023a0:	dd401904 	addi	r21,sp,100
 10023a4:	003dba06 	br	1001a90 <___vfprintf_internal_r+0x520>
 10023a8:	d9014f17 	ldw	r4,1340(sp)
 10023ac:	b00b883a 	mov	r5,r22
 10023b0:	d9800c04 	addi	r6,sp,48
 10023b4:	10015180 	call	1001518 <__sprint_r>
 10023b8:	103e251e 	bne	r2,zero,1001c50 <___vfprintf_internal_r+0x6e0>
 10023bc:	dc800e17 	ldw	r18,56(sp)
 10023c0:	dc400d17 	ldw	r17,52(sp)
 10023c4:	dcc01904 	addi	r19,sp,100
 10023c8:	003e4206 	br	1001cd4 <___vfprintf_internal_r+0x764>
 10023cc:	d9014f17 	ldw	r4,1340(sp)
 10023d0:	b00b883a 	mov	r5,r22
 10023d4:	d9800c04 	addi	r6,sp,48
 10023d8:	10015180 	call	1001518 <__sprint_r>
 10023dc:	103e1c1e 	bne	r2,zero,1001c50 <___vfprintf_internal_r+0x6e0>
 10023e0:	dc800e17 	ldw	r18,56(sp)
 10023e4:	dc400d17 	ldw	r17,52(sp)
 10023e8:	d8c01904 	addi	r3,sp,100
 10023ec:	003e2e06 	br	1001ca8 <___vfprintf_internal_r+0x738>
 10023f0:	d9414c17 	ldw	r5,1328(sp)
 10023f4:	2880004c 	andi	r2,r5,1
 10023f8:	1005003a 	cmpeq	r2,r2,zero
 10023fc:	103dda1e 	bne	r2,zero,1001b68 <___vfprintf_internal_r+0x5f8>
 1002400:	003e9f06 	br	1001e80 <___vfprintf_internal_r+0x910>
 1002404:	d8c14117 	ldw	r3,1284(sp)
 1002408:	9125883a 	add	r18,r18,r4
 100240c:	8c400044 	addi	r17,r17,1
 1002410:	008001c4 	movi	r2,7
 1002414:	a8c00015 	stw	r3,0(r21)
 1002418:	a9000115 	stw	r4,4(r21)
 100241c:	dc800e15 	stw	r18,56(sp)
 1002420:	dc400d15 	stw	r17,52(sp)
 1002424:	14426616 	blt	r2,r17,1002dc0 <___vfprintf_internal_r+0x1850>
 1002428:	a8c00204 	addi	r3,r21,8
 100242c:	d9414917 	ldw	r5,1316(sp)
 1002430:	00800044 	movi	r2,1
 1002434:	94800044 	addi	r18,r18,1
 1002438:	8c400044 	addi	r17,r17,1
 100243c:	18800115 	stw	r2,4(r3)
 1002440:	008001c4 	movi	r2,7
 1002444:	19400015 	stw	r5,0(r3)
 1002448:	dc800e15 	stw	r18,56(sp)
 100244c:	dc400d15 	stw	r17,52(sp)
 1002450:	2021883a 	mov	r16,r4
 1002454:	14425016 	blt	r2,r17,1002d98 <___vfprintf_internal_r+0x1828>
 1002458:	19400204 	addi	r5,r3,8
 100245c:	d9814717 	ldw	r6,1308(sp)
 1002460:	8c400044 	addi	r17,r17,1
 1002464:	dc400d15 	stw	r17,52(sp)
 1002468:	3107c83a 	sub	r3,r6,r4
 100246c:	d9014117 	ldw	r4,1284(sp)
 1002470:	90e5883a 	add	r18,r18,r3
 1002474:	28c00115 	stw	r3,4(r5)
 1002478:	8105883a 	add	r2,r16,r4
 100247c:	28800015 	stw	r2,0(r5)
 1002480:	008001c4 	movi	r2,7
 1002484:	dc800e15 	stw	r18,56(sp)
 1002488:	147f1d16 	blt	r2,r17,1002100 <___vfprintf_internal_r+0xb90>
 100248c:	28c00204 	addi	r3,r5,8
 1002490:	003db506 	br	1001b68 <___vfprintf_internal_r+0x5f8>
 1002494:	3c000017 	ldw	r16,0(r7)
 1002498:	3c400117 	ldw	r17,4(r7)
 100249c:	39800204 	addi	r6,r7,8
 10024a0:	01000044 	movi	r4,1
 10024a4:	d9814015 	stw	r6,1280(sp)
 10024a8:	d8000405 	stb	zero,16(sp)
 10024ac:	003ebe06 	br	1001fa8 <___vfprintf_internal_r+0xa38>
 10024b0:	3c000017 	ldw	r16,0(r7)
 10024b4:	3c400117 	ldw	r17,4(r7)
 10024b8:	38800204 	addi	r2,r7,8
 10024bc:	d8814015 	stw	r2,1280(sp)
 10024c0:	003eb706 	br	1001fa0 <___vfprintf_internal_r+0xa30>
 10024c4:	3c000017 	ldw	r16,0(r7)
 10024c8:	3c400117 	ldw	r17,4(r7)
 10024cc:	39000204 	addi	r4,r7,8
 10024d0:	d9014015 	stw	r4,1280(sp)
 10024d4:	0009883a 	mov	r4,zero
 10024d8:	d8000405 	stb	zero,16(sp)
 10024dc:	003eb206 	br	1001fa8 <___vfprintf_internal_r+0xa38>
 10024e0:	38c00017 	ldw	r3,0(r7)
 10024e4:	39c00104 	addi	r7,r7,4
 10024e8:	d8c14a15 	stw	r3,1320(sp)
 10024ec:	1800d10e 	bge	r3,zero,1002834 <___vfprintf_internal_r+0x12c4>
 10024f0:	00c7c83a 	sub	r3,zero,r3
 10024f4:	d8c14a15 	stw	r3,1320(sp)
 10024f8:	d9014c17 	ldw	r4,1328(sp)
 10024fc:	b8c00007 	ldb	r3,0(r23)
 1002500:	21000114 	ori	r4,r4,4
 1002504:	d9014c15 	stw	r4,1328(sp)
 1002508:	003c9806 	br	100176c <___vfprintf_internal_r+0x1fc>
 100250c:	d9814c17 	ldw	r6,1328(sp)
 1002510:	3080080c 	andi	r2,r6,32
 1002514:	1001f026 	beq	r2,zero,1002cd8 <___vfprintf_internal_r+0x1768>
 1002518:	d9014b17 	ldw	r4,1324(sp)
 100251c:	38800017 	ldw	r2,0(r7)
 1002520:	39c00104 	addi	r7,r7,4
 1002524:	d9c14015 	stw	r7,1280(sp)
 1002528:	2007d7fa 	srai	r3,r4,31
 100252c:	d9c14017 	ldw	r7,1280(sp)
 1002530:	11000015 	stw	r4,0(r2)
 1002534:	10c00115 	stw	r3,4(r2)
 1002538:	003c6906 	br	10016e0 <___vfprintf_internal_r+0x170>
 100253c:	b8c00007 	ldb	r3,0(r23)
 1002540:	00801b04 	movi	r2,108
 1002544:	18824f26 	beq	r3,r2,1002e84 <___vfprintf_internal_r+0x1914>
 1002548:	d9414c17 	ldw	r5,1328(sp)
 100254c:	29400414 	ori	r5,r5,16
 1002550:	d9414c15 	stw	r5,1328(sp)
 1002554:	003c8506 	br	100176c <___vfprintf_internal_r+0x1fc>
 1002558:	d9814c17 	ldw	r6,1328(sp)
 100255c:	b8c00007 	ldb	r3,0(r23)
 1002560:	31800814 	ori	r6,r6,32
 1002564:	d9814c15 	stw	r6,1328(sp)
 1002568:	003c8006 	br	100176c <___vfprintf_internal_r+0x1fc>
 100256c:	d8814c17 	ldw	r2,1328(sp)
 1002570:	3c000017 	ldw	r16,0(r7)
 1002574:	00c01e04 	movi	r3,120
 1002578:	10800094 	ori	r2,r2,2
 100257c:	d8814c15 	stw	r2,1328(sp)
 1002580:	39c00104 	addi	r7,r7,4
 1002584:	01404074 	movhi	r5,257
 1002588:	2974ef04 	addi	r5,r5,-11332
 100258c:	00800c04 	movi	r2,48
 1002590:	0023883a 	mov	r17,zero
 1002594:	01000084 	movi	r4,2
 1002598:	d9c14015 	stw	r7,1280(sp)
 100259c:	d8c14d15 	stw	r3,1332(sp)
 10025a0:	d9414415 	stw	r5,1296(sp)
 10025a4:	d8800445 	stb	r2,17(sp)
 10025a8:	d8c00485 	stb	r3,18(sp)
 10025ac:	d8000405 	stb	zero,16(sp)
 10025b0:	003e7d06 	br	1001fa8 <___vfprintf_internal_r+0xa38>
 10025b4:	d8814c17 	ldw	r2,1328(sp)
 10025b8:	b8c00007 	ldb	r3,0(r23)
 10025bc:	10801014 	ori	r2,r2,64
 10025c0:	d8814c15 	stw	r2,1328(sp)
 10025c4:	003c6906 	br	100176c <___vfprintf_internal_r+0x1fc>
 10025c8:	d9414c17 	ldw	r5,1328(sp)
 10025cc:	2880020c 	andi	r2,r5,8
 10025d0:	1001df26 	beq	r2,zero,1002d50 <___vfprintf_internal_r+0x17e0>
 10025d4:	39800017 	ldw	r6,0(r7)
 10025d8:	38800204 	addi	r2,r7,8
 10025dc:	d8814015 	stw	r2,1280(sp)
 10025e0:	d9814215 	stw	r6,1288(sp)
 10025e4:	39c00117 	ldw	r7,4(r7)
 10025e8:	d9c14315 	stw	r7,1292(sp)
 10025ec:	d9014217 	ldw	r4,1288(sp)
 10025f0:	d9414317 	ldw	r5,1292(sp)
 10025f4:	1007f100 	call	1007f10 <__isinfd>
 10025f8:	10021726 	beq	r2,zero,1002e58 <___vfprintf_internal_r+0x18e8>
 10025fc:	d9014217 	ldw	r4,1288(sp)
 1002600:	d9414317 	ldw	r5,1292(sp)
 1002604:	000d883a 	mov	r6,zero
 1002608:	000f883a 	mov	r7,zero
 100260c:	1000b8c0 	call	1000b8c <__ltdf2>
 1002610:	1002ca16 	blt	r2,zero,100313c <___vfprintf_internal_r+0x1bcc>
 1002614:	d9414d17 	ldw	r5,1332(sp)
 1002618:	008011c4 	movi	r2,71
 100261c:	11420a16 	blt	r2,r5,1002e48 <___vfprintf_internal_r+0x18d8>
 1002620:	01804074 	movhi	r6,257
 1002624:	31b4f404 	addi	r6,r6,-11312
 1002628:	d9814115 	stw	r6,1284(sp)
 100262c:	d9014c17 	ldw	r4,1328(sp)
 1002630:	00c000c4 	movi	r3,3
 1002634:	00bfdfc4 	movi	r2,-129
 1002638:	2088703a 	and	r4,r4,r2
 100263c:	180f883a 	mov	r7,r3
 1002640:	d8c14515 	stw	r3,1300(sp)
 1002644:	d9014c15 	stw	r4,1328(sp)
 1002648:	d8014615 	stw	zero,1304(sp)
 100264c:	003e6a06 	br	1001ff8 <___vfprintf_internal_r+0xa88>
 1002650:	38800017 	ldw	r2,0(r7)
 1002654:	00c00044 	movi	r3,1
 1002658:	39c00104 	addi	r7,r7,4
 100265c:	d9c14015 	stw	r7,1280(sp)
 1002660:	d9000f04 	addi	r4,sp,60
 1002664:	180f883a 	mov	r7,r3
 1002668:	d8c14515 	stw	r3,1300(sp)
 100266c:	d9014115 	stw	r4,1284(sp)
 1002670:	d8800f05 	stb	r2,60(sp)
 1002674:	d8000405 	stb	zero,16(sp)
 1002678:	003cac06 	br	100192c <___vfprintf_internal_r+0x3bc>
 100267c:	01404074 	movhi	r5,257
 1002680:	2974fa04 	addi	r5,r5,-11288
 1002684:	d9414415 	stw	r5,1296(sp)
 1002688:	d9814c17 	ldw	r6,1328(sp)
 100268c:	3080080c 	andi	r2,r6,32
 1002690:	1000f926 	beq	r2,zero,1002a78 <___vfprintf_internal_r+0x1508>
 1002694:	3c000017 	ldw	r16,0(r7)
 1002698:	3c400117 	ldw	r17,4(r7)
 100269c:	38800204 	addi	r2,r7,8
 10026a0:	d8814015 	stw	r2,1280(sp)
 10026a4:	d9414c17 	ldw	r5,1328(sp)
 10026a8:	2880004c 	andi	r2,r5,1
 10026ac:	1005003a 	cmpeq	r2,r2,zero
 10026b0:	1000b31e 	bne	r2,zero,1002980 <___vfprintf_internal_r+0x1410>
 10026b4:	8444b03a 	or	r2,r16,r17
 10026b8:	1000b126 	beq	r2,zero,1002980 <___vfprintf_internal_r+0x1410>
 10026bc:	d9814d17 	ldw	r6,1332(sp)
 10026c0:	29400094 	ori	r5,r5,2
 10026c4:	00800c04 	movi	r2,48
 10026c8:	01000084 	movi	r4,2
 10026cc:	d9414c15 	stw	r5,1328(sp)
 10026d0:	d8800445 	stb	r2,17(sp)
 10026d4:	d9800485 	stb	r6,18(sp)
 10026d8:	d8000405 	stb	zero,16(sp)
 10026dc:	003e3206 	br	1001fa8 <___vfprintf_internal_r+0xa38>
 10026e0:	01804074 	movhi	r6,257
 10026e4:	31b4ef04 	addi	r6,r6,-11332
 10026e8:	d9814415 	stw	r6,1296(sp)
 10026ec:	003fe606 	br	1002688 <___vfprintf_internal_r+0x1118>
 10026f0:	00800ac4 	movi	r2,43
 10026f4:	d8800405 	stb	r2,16(sp)
 10026f8:	b8c00007 	ldb	r3,0(r23)
 10026fc:	003c1b06 	br	100176c <___vfprintf_internal_r+0x1fc>
 1002700:	d8814c17 	ldw	r2,1328(sp)
 1002704:	b8c00007 	ldb	r3,0(r23)
 1002708:	10800054 	ori	r2,r2,1
 100270c:	d8814c15 	stw	r2,1328(sp)
 1002710:	003c1606 	br	100176c <___vfprintf_internal_r+0x1fc>
 1002714:	d8800407 	ldb	r2,16(sp)
 1002718:	1000461e 	bne	r2,zero,1002834 <___vfprintf_internal_r+0x12c4>
 100271c:	00800804 	movi	r2,32
 1002720:	d8800405 	stb	r2,16(sp)
 1002724:	b8c00007 	ldb	r3,0(r23)
 1002728:	003c1006 	br	100176c <___vfprintf_internal_r+0x1fc>
 100272c:	d9814c17 	ldw	r6,1328(sp)
 1002730:	b8c00007 	ldb	r3,0(r23)
 1002734:	31800214 	ori	r6,r6,8
 1002738:	d9814c15 	stw	r6,1328(sp)
 100273c:	003c0b06 	br	100176c <___vfprintf_internal_r+0x1fc>
 1002740:	0007883a 	mov	r3,zero
 1002744:	01000244 	movi	r4,9
 1002748:	188002a4 	muli	r2,r3,10
 100274c:	b8c00007 	ldb	r3,0(r23)
 1002750:	d9814d17 	ldw	r6,1332(sp)
 1002754:	bdc00044 	addi	r23,r23,1
 1002758:	d8c14d15 	stw	r3,1332(sp)
 100275c:	d9414d17 	ldw	r5,1332(sp)
 1002760:	3085883a 	add	r2,r6,r2
 1002764:	10fff404 	addi	r3,r2,-48
 1002768:	28bff404 	addi	r2,r5,-48
 100276c:	20bff62e 	bgeu	r4,r2,1002748 <___vfprintf_internal_r+0x11d8>
 1002770:	d8c14a15 	stw	r3,1320(sp)
 1002774:	003bff06 	br	1001774 <___vfprintf_internal_r+0x204>
 1002778:	d9414c17 	ldw	r5,1328(sp)
 100277c:	b8c00007 	ldb	r3,0(r23)
 1002780:	29402014 	ori	r5,r5,128
 1002784:	d9414c15 	stw	r5,1328(sp)
 1002788:	003bf806 	br	100176c <___vfprintf_internal_r+0x1fc>
 100278c:	b8c00007 	ldb	r3,0(r23)
 1002790:	00800a84 	movi	r2,42
 1002794:	bdc00044 	addi	r23,r23,1
 1002798:	18831526 	beq	r3,r2,10033f0 <___vfprintf_internal_r+0x1e80>
 100279c:	d8c14d15 	stw	r3,1332(sp)
 10027a0:	18bff404 	addi	r2,r3,-48
 10027a4:	00c00244 	movi	r3,9
 10027a8:	18827836 	bltu	r3,r2,100318c <___vfprintf_internal_r+0x1c1c>
 10027ac:	000d883a 	mov	r6,zero
 10027b0:	308002a4 	muli	r2,r6,10
 10027b4:	b9800007 	ldb	r6,0(r23)
 10027b8:	d9414d17 	ldw	r5,1332(sp)
 10027bc:	bdc00044 	addi	r23,r23,1
 10027c0:	d9814d15 	stw	r6,1332(sp)
 10027c4:	d9014d17 	ldw	r4,1332(sp)
 10027c8:	1145883a 	add	r2,r2,r5
 10027cc:	11bff404 	addi	r6,r2,-48
 10027d0:	20bff404 	addi	r2,r4,-48
 10027d4:	18bff62e 	bgeu	r3,r2,10027b0 <___vfprintf_internal_r+0x1240>
 10027d8:	3027883a 	mov	r19,r6
 10027dc:	303be50e 	bge	r6,zero,1001774 <___vfprintf_internal_r+0x204>
 10027e0:	04ffffc4 	movi	r19,-1
 10027e4:	003be306 	br	1001774 <___vfprintf_internal_r+0x204>
 10027e8:	d8000405 	stb	zero,16(sp)
 10027ec:	39800017 	ldw	r6,0(r7)
 10027f0:	39c00104 	addi	r7,r7,4
 10027f4:	d9c14015 	stw	r7,1280(sp)
 10027f8:	d9814115 	stw	r6,1284(sp)
 10027fc:	3001c926 	beq	r6,zero,1002f24 <___vfprintf_internal_r+0x19b4>
 1002800:	98000e16 	blt	r19,zero,100283c <___vfprintf_internal_r+0x12cc>
 1002804:	d9014117 	ldw	r4,1284(sp)
 1002808:	000b883a 	mov	r5,zero
 100280c:	980d883a 	mov	r6,r19
 1002810:	100662c0 	call	100662c <memchr>
 1002814:	10025926 	beq	r2,zero,100317c <___vfprintf_internal_r+0x1c0c>
 1002818:	d8c14117 	ldw	r3,1284(sp)
 100281c:	10cfc83a 	sub	r7,r2,r3
 1002820:	99c19e16 	blt	r19,r7,1002e9c <___vfprintf_internal_r+0x192c>
 1002824:	d9c14515 	stw	r7,1300(sp)
 1002828:	38000916 	blt	r7,zero,1002850 <___vfprintf_internal_r+0x12e0>
 100282c:	d8014615 	stw	zero,1304(sp)
 1002830:	003df106 	br	1001ff8 <___vfprintf_internal_r+0xa88>
 1002834:	b8c00007 	ldb	r3,0(r23)
 1002838:	003bcc06 	br	100176c <___vfprintf_internal_r+0x1fc>
 100283c:	d9014117 	ldw	r4,1284(sp)
 1002840:	10014a40 	call	10014a4 <strlen>
 1002844:	d8814515 	stw	r2,1300(sp)
 1002848:	100f883a 	mov	r7,r2
 100284c:	103ff70e 	bge	r2,zero,100282c <___vfprintf_internal_r+0x12bc>
 1002850:	d8014515 	stw	zero,1300(sp)
 1002854:	d8014615 	stw	zero,1304(sp)
 1002858:	003de706 	br	1001ff8 <___vfprintf_internal_r+0xa88>
 100285c:	20c03fcc 	andi	r3,r4,255
 1002860:	00800044 	movi	r2,1
 1002864:	18802d26 	beq	r3,r2,100291c <___vfprintf_internal_r+0x13ac>
 1002868:	18800e36 	bltu	r3,r2,10028a4 <___vfprintf_internal_r+0x1334>
 100286c:	00800084 	movi	r2,2
 1002870:	1880fa26 	beq	r3,r2,1002c5c <___vfprintf_internal_r+0x16ec>
 1002874:	01004074 	movhi	r4,257
 1002878:	2134ff04 	addi	r4,r4,-11268
 100287c:	10014a40 	call	10014a4 <strlen>
 1002880:	100f883a 	mov	r7,r2
 1002884:	dcc14515 	stw	r19,1300(sp)
 1002888:	9880010e 	bge	r19,r2,1002890 <___vfprintf_internal_r+0x1320>
 100288c:	d8814515 	stw	r2,1300(sp)
 1002890:	00804074 	movhi	r2,257
 1002894:	10b4ff04 	addi	r2,r2,-11268
 1002898:	dcc14615 	stw	r19,1304(sp)
 100289c:	d8814115 	stw	r2,1284(sp)
 10028a0:	003dd506 	br	1001ff8 <___vfprintf_internal_r+0xa88>
 10028a4:	d9401904 	addi	r5,sp,100
 10028a8:	dd000f04 	addi	r20,sp,60
 10028ac:	d9414115 	stw	r5,1284(sp)
 10028b0:	880a977a 	slli	r5,r17,29
 10028b4:	d9814117 	ldw	r6,1284(sp)
 10028b8:	8004d0fa 	srli	r2,r16,3
 10028bc:	8806d0fa 	srli	r3,r17,3
 10028c0:	810001cc 	andi	r4,r16,7
 10028c4:	2884b03a 	or	r2,r5,r2
 10028c8:	31bfffc4 	addi	r6,r6,-1
 10028cc:	21000c04 	addi	r4,r4,48
 10028d0:	d9814115 	stw	r6,1284(sp)
 10028d4:	10cab03a 	or	r5,r2,r3
 10028d8:	31000005 	stb	r4,0(r6)
 10028dc:	1021883a 	mov	r16,r2
 10028e0:	1823883a 	mov	r17,r3
 10028e4:	283ff21e 	bne	r5,zero,10028b0 <___vfprintf_internal_r+0x1340>
 10028e8:	d8c14c17 	ldw	r3,1328(sp)
 10028ec:	1880004c 	andi	r2,r3,1
 10028f0:	1005003a 	cmpeq	r2,r2,zero
 10028f4:	103db91e 	bne	r2,zero,1001fdc <___vfprintf_internal_r+0xa6c>
 10028f8:	20803fcc 	andi	r2,r4,255
 10028fc:	1080201c 	xori	r2,r2,128
 1002900:	10bfe004 	addi	r2,r2,-128
 1002904:	00c00c04 	movi	r3,48
 1002908:	10fdb426 	beq	r2,r3,1001fdc <___vfprintf_internal_r+0xa6c>
 100290c:	31bfffc4 	addi	r6,r6,-1
 1002910:	d9814115 	stw	r6,1284(sp)
 1002914:	30c00005 	stb	r3,0(r6)
 1002918:	003db006 	br	1001fdc <___vfprintf_internal_r+0xa6c>
 100291c:	88800068 	cmpgeui	r2,r17,1
 1002920:	10002c1e 	bne	r2,zero,10029d4 <___vfprintf_internal_r+0x1464>
 1002924:	8800021e 	bne	r17,zero,1002930 <___vfprintf_internal_r+0x13c0>
 1002928:	00800244 	movi	r2,9
 100292c:	14002936 	bltu	r2,r16,10029d4 <___vfprintf_internal_r+0x1464>
 1002930:	d90018c4 	addi	r4,sp,99
 1002934:	dd000f04 	addi	r20,sp,60
 1002938:	d9014115 	stw	r4,1284(sp)
 100293c:	d9014117 	ldw	r4,1284(sp)
 1002940:	80800c04 	addi	r2,r16,48
 1002944:	20800005 	stb	r2,0(r4)
 1002948:	003da406 	br	1001fdc <___vfprintf_internal_r+0xa6c>
 100294c:	dc400d17 	ldw	r17,52(sp)
 1002950:	07004074 	movhi	fp,257
 1002954:	e7350684 	addi	fp,fp,-11238
 1002958:	9425883a 	add	r18,r18,r16
 100295c:	8c400044 	addi	r17,r17,1
 1002960:	008001c4 	movi	r2,7
 1002964:	1f000015 	stw	fp,0(r3)
 1002968:	1c000115 	stw	r16,4(r3)
 100296c:	dc800e15 	stw	r18,56(sp)
 1002970:	dc400d15 	stw	r17,52(sp)
 1002974:	147de216 	blt	r2,r17,1002100 <___vfprintf_internal_r+0xb90>
 1002978:	18c00204 	addi	r3,r3,8
 100297c:	003c7a06 	br	1001b68 <___vfprintf_internal_r+0x5f8>
 1002980:	01000084 	movi	r4,2
 1002984:	d8000405 	stb	zero,16(sp)
 1002988:	003d8706 	br	1001fa8 <___vfprintf_internal_r+0xa38>
 100298c:	d9814c17 	ldw	r6,1328(sp)
 1002990:	30c4703a 	and	r2,r6,r3
 1002994:	1005003a 	cmpeq	r2,r2,zero
 1002998:	103cb926 	beq	r2,zero,1001c80 <___vfprintf_internal_r+0x710>
 100299c:	d9014117 	ldw	r4,1284(sp)
 10029a0:	94800044 	addi	r18,r18,1
 10029a4:	8c400044 	addi	r17,r17,1
 10029a8:	008001c4 	movi	r2,7
 10029ac:	a9000015 	stw	r4,0(r21)
 10029b0:	a8c00115 	stw	r3,4(r21)
 10029b4:	dc800e15 	stw	r18,56(sp)
 10029b8:	dc400d15 	stw	r17,52(sp)
 10029bc:	147e6616 	blt	r2,r17,1002358 <___vfprintf_internal_r+0xde8>
 10029c0:	acc00204 	addi	r19,r21,8
 10029c4:	003cd706 	br	1001d24 <___vfprintf_internal_r+0x7b4>
 10029c8:	07004074 	movhi	fp,257
 10029cc:	e7350684 	addi	fp,fp,-11238
 10029d0:	003c4f06 	br	1001b10 <___vfprintf_internal_r+0x5a0>
 10029d4:	dd000f04 	addi	r20,sp,60
 10029d8:	dc801904 	addi	r18,sp,100
 10029dc:	8009883a 	mov	r4,r16
 10029e0:	880b883a 	mov	r5,r17
 10029e4:	01800284 	movi	r6,10
 10029e8:	000f883a 	mov	r7,zero
 10029ec:	1008c680 	call	1008c68 <__umoddi3>
 10029f0:	12000c04 	addi	r8,r2,48
 10029f4:	94bfffc4 	addi	r18,r18,-1
 10029f8:	8009883a 	mov	r4,r16
 10029fc:	880b883a 	mov	r5,r17
 1002a00:	01800284 	movi	r6,10
 1002a04:	000f883a 	mov	r7,zero
 1002a08:	92000005 	stb	r8,0(r18)
 1002a0c:	100868c0 	call	100868c <__udivdi3>
 1002a10:	1009883a 	mov	r4,r2
 1002a14:	1021883a 	mov	r16,r2
 1002a18:	18800068 	cmpgeui	r2,r3,1
 1002a1c:	1823883a 	mov	r17,r3
 1002a20:	103fee1e 	bne	r2,zero,10029dc <___vfprintf_internal_r+0x146c>
 1002a24:	1800021e 	bne	r3,zero,1002a30 <___vfprintf_internal_r+0x14c0>
 1002a28:	00800244 	movi	r2,9
 1002a2c:	113feb36 	bltu	r2,r4,10029dc <___vfprintf_internal_r+0x146c>
 1002a30:	94bfffc4 	addi	r18,r18,-1
 1002a34:	dc814115 	stw	r18,1284(sp)
 1002a38:	003fc006 	br	100293c <___vfprintf_internal_r+0x13cc>
 1002a3c:	d9014c17 	ldw	r4,1328(sp)
 1002a40:	2080004c 	andi	r2,r4,1
 1002a44:	10009a1e 	bne	r2,zero,1002cb0 <___vfprintf_internal_r+0x1740>
 1002a48:	d9401904 	addi	r5,sp,100
 1002a4c:	dd000f04 	addi	r20,sp,60
 1002a50:	d9414115 	stw	r5,1284(sp)
 1002a54:	003d6106 	br	1001fdc <___vfprintf_internal_r+0xa6c>
 1002a58:	d9014f17 	ldw	r4,1340(sp)
 1002a5c:	b00b883a 	mov	r5,r22
 1002a60:	d9800c04 	addi	r6,sp,48
 1002a64:	10015180 	call	1001518 <__sprint_r>
 1002a68:	103c791e 	bne	r2,zero,1001c50 <___vfprintf_internal_r+0x6e0>
 1002a6c:	dc800e17 	ldw	r18,56(sp)
 1002a70:	d8c01904 	addi	r3,sp,100
 1002a74:	003cff06 	br	1001e74 <___vfprintf_internal_r+0x904>
 1002a78:	d8c14c17 	ldw	r3,1328(sp)
 1002a7c:	1880040c 	andi	r2,r3,16
 1002a80:	1000711e 	bne	r2,zero,1002c48 <___vfprintf_internal_r+0x16d8>
 1002a84:	d9014c17 	ldw	r4,1328(sp)
 1002a88:	2080100c 	andi	r2,r4,64
 1002a8c:	10006e26 	beq	r2,zero,1002c48 <___vfprintf_internal_r+0x16d8>
 1002a90:	3c00000b 	ldhu	r16,0(r7)
 1002a94:	0023883a 	mov	r17,zero
 1002a98:	39c00104 	addi	r7,r7,4
 1002a9c:	d9c14015 	stw	r7,1280(sp)
 1002aa0:	003f0006 	br	10026a4 <___vfprintf_internal_r+0x1134>
 1002aa4:	dc400d17 	ldw	r17,52(sp)
 1002aa8:	07004074 	movhi	fp,257
 1002aac:	e7350684 	addi	fp,fp,-11238
 1002ab0:	9425883a 	add	r18,r18,r16
 1002ab4:	8c400044 	addi	r17,r17,1
 1002ab8:	008001c4 	movi	r2,7
 1002abc:	1f000015 	stw	fp,0(r3)
 1002ac0:	1c000115 	stw	r16,4(r3)
 1002ac4:	dc800e15 	stw	r18,56(sp)
 1002ac8:	dc400d15 	stw	r17,52(sp)
 1002acc:	147d7616 	blt	r2,r17,10020a8 <___vfprintf_internal_r+0xb38>
 1002ad0:	18c00204 	addi	r3,r3,8
 1002ad4:	003d7b06 	br	10020c4 <___vfprintf_internal_r+0xb54>
 1002ad8:	dc800e17 	ldw	r18,56(sp)
 1002adc:	dc400d17 	ldw	r17,52(sp)
 1002ae0:	07004074 	movhi	fp,257
 1002ae4:	e7350a84 	addi	fp,fp,-11222
 1002ae8:	003bc006 	br	10019ec <___vfprintf_internal_r+0x47c>
 1002aec:	d9014f17 	ldw	r4,1340(sp)
 1002af0:	b00b883a 	mov	r5,r22
 1002af4:	d9800c04 	addi	r6,sp,48
 1002af8:	10015180 	call	1001518 <__sprint_r>
 1002afc:	103c541e 	bne	r2,zero,1001c50 <___vfprintf_internal_r+0x6e0>
 1002b00:	dc800e17 	ldw	r18,56(sp)
 1002b04:	d8c01904 	addi	r3,sp,100
 1002b08:	003ce906 	br	1001eb0 <___vfprintf_internal_r+0x940>
 1002b0c:	3c000017 	ldw	r16,0(r7)
 1002b10:	0009883a 	mov	r4,zero
 1002b14:	39c00104 	addi	r7,r7,4
 1002b18:	0023883a 	mov	r17,zero
 1002b1c:	d9c14015 	stw	r7,1280(sp)
 1002b20:	d8000405 	stb	zero,16(sp)
 1002b24:	003d2006 	br	1001fa8 <___vfprintf_internal_r+0xa38>
 1002b28:	38800017 	ldw	r2,0(r7)
 1002b2c:	39c00104 	addi	r7,r7,4
 1002b30:	d9c14015 	stw	r7,1280(sp)
 1002b34:	1023d7fa 	srai	r17,r2,31
 1002b38:	1021883a 	mov	r16,r2
 1002b3c:	003d1806 	br	1001fa0 <___vfprintf_internal_r+0xa30>
 1002b40:	3c000017 	ldw	r16,0(r7)
 1002b44:	01000044 	movi	r4,1
 1002b48:	39c00104 	addi	r7,r7,4
 1002b4c:	0023883a 	mov	r17,zero
 1002b50:	d9c14015 	stw	r7,1280(sp)
 1002b54:	d8000405 	stb	zero,16(sp)
 1002b58:	003d1306 	br	1001fa8 <___vfprintf_internal_r+0xa38>
 1002b5c:	00804074 	movhi	r2,257
 1002b60:	10b50604 	addi	r2,r2,-11240
 1002b64:	94800044 	addi	r18,r18,1
 1002b68:	8c400044 	addi	r17,r17,1
 1002b6c:	a8800015 	stw	r2,0(r21)
 1002b70:	00c00044 	movi	r3,1
 1002b74:	008001c4 	movi	r2,7
 1002b78:	a8c00115 	stw	r3,4(r21)
 1002b7c:	dc800e15 	stw	r18,56(sp)
 1002b80:	dc400d15 	stw	r17,52(sp)
 1002b84:	1440ca16 	blt	r2,r17,1002eb0 <___vfprintf_internal_r+0x1940>
 1002b88:	a8c00204 	addi	r3,r21,8
 1002b8c:	2000061e 	bne	r4,zero,1002ba8 <___vfprintf_internal_r+0x1638>
 1002b90:	d9414717 	ldw	r5,1308(sp)
 1002b94:	2800041e 	bne	r5,zero,1002ba8 <___vfprintf_internal_r+0x1638>
 1002b98:	d9814c17 	ldw	r6,1328(sp)
 1002b9c:	3080004c 	andi	r2,r6,1
 1002ba0:	1005003a 	cmpeq	r2,r2,zero
 1002ba4:	103bf01e 	bne	r2,zero,1001b68 <___vfprintf_internal_r+0x5f8>
 1002ba8:	00800044 	movi	r2,1
 1002bac:	dc400d17 	ldw	r17,52(sp)
 1002bb0:	18800115 	stw	r2,4(r3)
 1002bb4:	d8814917 	ldw	r2,1316(sp)
 1002bb8:	94800044 	addi	r18,r18,1
 1002bbc:	8c400044 	addi	r17,r17,1
 1002bc0:	18800015 	stw	r2,0(r3)
 1002bc4:	008001c4 	movi	r2,7
 1002bc8:	dc800e15 	stw	r18,56(sp)
 1002bcc:	dc400d15 	stw	r17,52(sp)
 1002bd0:	1440ca16 	blt	r2,r17,1002efc <___vfprintf_internal_r+0x198c>
 1002bd4:	18c00204 	addi	r3,r3,8
 1002bd8:	0121c83a 	sub	r16,zero,r4
 1002bdc:	0400500e 	bge	zero,r16,1002d20 <___vfprintf_internal_r+0x17b0>
 1002be0:	00800404 	movi	r2,16
 1002be4:	1400800e 	bge	r2,r16,1002de8 <___vfprintf_internal_r+0x1878>
 1002be8:	1027883a 	mov	r19,r2
 1002bec:	07004074 	movhi	fp,257
 1002bf0:	e7350684 	addi	fp,fp,-11238
 1002bf4:	050001c4 	movi	r20,7
 1002bf8:	00000306 	br	1002c08 <___vfprintf_internal_r+0x1698>
 1002bfc:	18c00204 	addi	r3,r3,8
 1002c00:	843ffc04 	addi	r16,r16,-16
 1002c04:	9c007a0e 	bge	r19,r16,1002df0 <___vfprintf_internal_r+0x1880>
 1002c08:	94800404 	addi	r18,r18,16
 1002c0c:	8c400044 	addi	r17,r17,1
 1002c10:	1f000015 	stw	fp,0(r3)
 1002c14:	1cc00115 	stw	r19,4(r3)
 1002c18:	dc800e15 	stw	r18,56(sp)
 1002c1c:	dc400d15 	stw	r17,52(sp)
 1002c20:	a47ff60e 	bge	r20,r17,1002bfc <___vfprintf_internal_r+0x168c>
 1002c24:	d9014f17 	ldw	r4,1340(sp)
 1002c28:	b00b883a 	mov	r5,r22
 1002c2c:	d9800c04 	addi	r6,sp,48
 1002c30:	10015180 	call	1001518 <__sprint_r>
 1002c34:	103c061e 	bne	r2,zero,1001c50 <___vfprintf_internal_r+0x6e0>
 1002c38:	dc800e17 	ldw	r18,56(sp)
 1002c3c:	dc400d17 	ldw	r17,52(sp)
 1002c40:	d8c01904 	addi	r3,sp,100
 1002c44:	003fee06 	br	1002c00 <___vfprintf_internal_r+0x1690>
 1002c48:	3c000017 	ldw	r16,0(r7)
 1002c4c:	0023883a 	mov	r17,zero
 1002c50:	39c00104 	addi	r7,r7,4
 1002c54:	d9c14015 	stw	r7,1280(sp)
 1002c58:	003e9206 	br	10026a4 <___vfprintf_internal_r+0x1134>
 1002c5c:	d9401904 	addi	r5,sp,100
 1002c60:	dd000f04 	addi	r20,sp,60
 1002c64:	d9414115 	stw	r5,1284(sp)
 1002c68:	d9814417 	ldw	r6,1296(sp)
 1002c6c:	880a973a 	slli	r5,r17,28
 1002c70:	8004d13a 	srli	r2,r16,4
 1002c74:	810003cc 	andi	r4,r16,15
 1002c78:	3109883a 	add	r4,r6,r4
 1002c7c:	2884b03a 	or	r2,r5,r2
 1002c80:	21400003 	ldbu	r5,0(r4)
 1002c84:	d9014117 	ldw	r4,1284(sp)
 1002c88:	8806d13a 	srli	r3,r17,4
 1002c8c:	1021883a 	mov	r16,r2
 1002c90:	213fffc4 	addi	r4,r4,-1
 1002c94:	d9014115 	stw	r4,1284(sp)
 1002c98:	d9814117 	ldw	r6,1284(sp)
 1002c9c:	10c8b03a 	or	r4,r2,r3
 1002ca0:	1823883a 	mov	r17,r3
 1002ca4:	31400005 	stb	r5,0(r6)
 1002ca8:	203fef1e 	bne	r4,zero,1002c68 <___vfprintf_internal_r+0x16f8>
 1002cac:	003ccb06 	br	1001fdc <___vfprintf_internal_r+0xa6c>
 1002cb0:	00800c04 	movi	r2,48
 1002cb4:	d98018c4 	addi	r6,sp,99
 1002cb8:	dd000f04 	addi	r20,sp,60
 1002cbc:	d88018c5 	stb	r2,99(sp)
 1002cc0:	d9814115 	stw	r6,1284(sp)
 1002cc4:	003cc506 	br	1001fdc <___vfprintf_internal_r+0xa6c>
 1002cc8:	dc400d17 	ldw	r17,52(sp)
 1002ccc:	07004074 	movhi	fp,257
 1002cd0:	e7350a84 	addi	fp,fp,-11222
 1002cd4:	003bc706 	br	1001bf4 <___vfprintf_internal_r+0x684>
 1002cd8:	d9414c17 	ldw	r5,1328(sp)
 1002cdc:	2880040c 	andi	r2,r5,16
 1002ce0:	10007c26 	beq	r2,zero,1002ed4 <___vfprintf_internal_r+0x1964>
 1002ce4:	38800017 	ldw	r2,0(r7)
 1002ce8:	39c00104 	addi	r7,r7,4
 1002cec:	d9c14015 	stw	r7,1280(sp)
 1002cf0:	d9814b17 	ldw	r6,1324(sp)
 1002cf4:	d9c14017 	ldw	r7,1280(sp)
 1002cf8:	11800015 	stw	r6,0(r2)
 1002cfc:	003a7806 	br	10016e0 <___vfprintf_internal_r+0x170>
 1002d00:	d9014f17 	ldw	r4,1340(sp)
 1002d04:	b00b883a 	mov	r5,r22
 1002d08:	d9800c04 	addi	r6,sp,48
 1002d0c:	10015180 	call	1001518 <__sprint_r>
 1002d10:	103bcf1e 	bne	r2,zero,1001c50 <___vfprintf_internal_r+0x6e0>
 1002d14:	dc800e17 	ldw	r18,56(sp)
 1002d18:	dc400d17 	ldw	r17,52(sp)
 1002d1c:	d8c01904 	addi	r3,sp,100
 1002d20:	d9014717 	ldw	r4,1308(sp)
 1002d24:	d9414117 	ldw	r5,1284(sp)
 1002d28:	8c400044 	addi	r17,r17,1
 1002d2c:	9125883a 	add	r18,r18,r4
 1002d30:	008001c4 	movi	r2,7
 1002d34:	19400015 	stw	r5,0(r3)
 1002d38:	19000115 	stw	r4,4(r3)
 1002d3c:	dc800e15 	stw	r18,56(sp)
 1002d40:	dc400d15 	stw	r17,52(sp)
 1002d44:	147cee16 	blt	r2,r17,1002100 <___vfprintf_internal_r+0xb90>
 1002d48:	18c00204 	addi	r3,r3,8
 1002d4c:	003b8606 	br	1001b68 <___vfprintf_internal_r+0x5f8>
 1002d50:	38c00017 	ldw	r3,0(r7)
 1002d54:	39000204 	addi	r4,r7,8
 1002d58:	d9014015 	stw	r4,1280(sp)
 1002d5c:	d8c14215 	stw	r3,1288(sp)
 1002d60:	39c00117 	ldw	r7,4(r7)
 1002d64:	d9c14315 	stw	r7,1292(sp)
 1002d68:	003e2006 	br	10025ec <___vfprintf_internal_r+0x107c>
 1002d6c:	0005883a 	mov	r2,zero
 1002d70:	1409c83a 	sub	r4,r2,r16
 1002d74:	1105803a 	cmpltu	r2,r2,r4
 1002d78:	044bc83a 	sub	r5,zero,r17
 1002d7c:	2885c83a 	sub	r2,r5,r2
 1002d80:	2021883a 	mov	r16,r4
 1002d84:	1023883a 	mov	r17,r2
 1002d88:	01000044 	movi	r4,1
 1002d8c:	00800b44 	movi	r2,45
 1002d90:	d8800405 	stb	r2,16(sp)
 1002d94:	003c8406 	br	1001fa8 <___vfprintf_internal_r+0xa38>
 1002d98:	d9014f17 	ldw	r4,1340(sp)
 1002d9c:	b00b883a 	mov	r5,r22
 1002da0:	d9800c04 	addi	r6,sp,48
 1002da4:	10015180 	call	1001518 <__sprint_r>
 1002da8:	103ba91e 	bne	r2,zero,1001c50 <___vfprintf_internal_r+0x6e0>
 1002dac:	dc800e17 	ldw	r18,56(sp)
 1002db0:	dc400d17 	ldw	r17,52(sp)
 1002db4:	d9000517 	ldw	r4,20(sp)
 1002db8:	d9401904 	addi	r5,sp,100
 1002dbc:	003da706 	br	100245c <___vfprintf_internal_r+0xeec>
 1002dc0:	d9014f17 	ldw	r4,1340(sp)
 1002dc4:	b00b883a 	mov	r5,r22
 1002dc8:	d9800c04 	addi	r6,sp,48
 1002dcc:	10015180 	call	1001518 <__sprint_r>
 1002dd0:	103b9f1e 	bne	r2,zero,1001c50 <___vfprintf_internal_r+0x6e0>
 1002dd4:	dc800e17 	ldw	r18,56(sp)
 1002dd8:	dc400d17 	ldw	r17,52(sp)
 1002ddc:	d9000517 	ldw	r4,20(sp)
 1002de0:	d8c01904 	addi	r3,sp,100
 1002de4:	003d9106 	br	100242c <___vfprintf_internal_r+0xebc>
 1002de8:	07004074 	movhi	fp,257
 1002dec:	e7350684 	addi	fp,fp,-11238
 1002df0:	9425883a 	add	r18,r18,r16
 1002df4:	8c400044 	addi	r17,r17,1
 1002df8:	008001c4 	movi	r2,7
 1002dfc:	1f000015 	stw	fp,0(r3)
 1002e00:	1c000115 	stw	r16,4(r3)
 1002e04:	dc800e15 	stw	r18,56(sp)
 1002e08:	dc400d15 	stw	r17,52(sp)
 1002e0c:	147fbc16 	blt	r2,r17,1002d00 <___vfprintf_internal_r+0x1790>
 1002e10:	18c00204 	addi	r3,r3,8
 1002e14:	003fc206 	br	1002d20 <___vfprintf_internal_r+0x17b0>
 1002e18:	d9014f17 	ldw	r4,1340(sp)
 1002e1c:	b00b883a 	mov	r5,r22
 1002e20:	d9800c04 	addi	r6,sp,48
 1002e24:	10015180 	call	1001518 <__sprint_r>
 1002e28:	103b891e 	bne	r2,zero,1001c50 <___vfprintf_internal_r+0x6e0>
 1002e2c:	dc800e17 	ldw	r18,56(sp)
 1002e30:	d9000517 	ldw	r4,20(sp)
 1002e34:	d8c01904 	addi	r3,sp,100
 1002e38:	003d0206 	br	1002244 <___vfprintf_internal_r+0xcd4>
 1002e3c:	07004074 	movhi	fp,257
 1002e40:	e7350684 	addi	fp,fp,-11238
 1002e44:	003be406 	br	1001dd8 <___vfprintf_internal_r+0x868>
 1002e48:	00804074 	movhi	r2,257
 1002e4c:	10b4f504 	addi	r2,r2,-11308
 1002e50:	d8814115 	stw	r2,1284(sp)
 1002e54:	003df506 	br	100262c <___vfprintf_internal_r+0x10bc>
 1002e58:	d9014217 	ldw	r4,1288(sp)
 1002e5c:	d9414317 	ldw	r5,1292(sp)
 1002e60:	1007f500 	call	1007f50 <__isnand>
 1002e64:	10003926 	beq	r2,zero,1002f4c <___vfprintf_internal_r+0x19dc>
 1002e68:	d9414d17 	ldw	r5,1332(sp)
 1002e6c:	008011c4 	movi	r2,71
 1002e70:	1140ce16 	blt	r2,r5,10031ac <___vfprintf_internal_r+0x1c3c>
 1002e74:	01804074 	movhi	r6,257
 1002e78:	31b4f604 	addi	r6,r6,-11304
 1002e7c:	d9814115 	stw	r6,1284(sp)
 1002e80:	003dea06 	br	100262c <___vfprintf_internal_r+0x10bc>
 1002e84:	d9014c17 	ldw	r4,1328(sp)
 1002e88:	bdc00044 	addi	r23,r23,1
 1002e8c:	b8c00007 	ldb	r3,0(r23)
 1002e90:	21000814 	ori	r4,r4,32
 1002e94:	d9014c15 	stw	r4,1328(sp)
 1002e98:	003a3406 	br	100176c <___vfprintf_internal_r+0x1fc>
 1002e9c:	dcc14515 	stw	r19,1300(sp)
 1002ea0:	98011016 	blt	r19,zero,10032e4 <___vfprintf_internal_r+0x1d74>
 1002ea4:	980f883a 	mov	r7,r19
 1002ea8:	d8014615 	stw	zero,1304(sp)
 1002eac:	003c5206 	br	1001ff8 <___vfprintf_internal_r+0xa88>
 1002eb0:	d9014f17 	ldw	r4,1340(sp)
 1002eb4:	b00b883a 	mov	r5,r22
 1002eb8:	d9800c04 	addi	r6,sp,48
 1002ebc:	10015180 	call	1001518 <__sprint_r>
 1002ec0:	103b631e 	bne	r2,zero,1001c50 <___vfprintf_internal_r+0x6e0>
 1002ec4:	dc800e17 	ldw	r18,56(sp)
 1002ec8:	d9000517 	ldw	r4,20(sp)
 1002ecc:	d8c01904 	addi	r3,sp,100
 1002ed0:	003f2e06 	br	1002b8c <___vfprintf_internal_r+0x161c>
 1002ed4:	d8c14c17 	ldw	r3,1328(sp)
 1002ed8:	1880100c 	andi	r2,r3,64
 1002edc:	1000a026 	beq	r2,zero,1003160 <___vfprintf_internal_r+0x1bf0>
 1002ee0:	38800017 	ldw	r2,0(r7)
 1002ee4:	39c00104 	addi	r7,r7,4
 1002ee8:	d9c14015 	stw	r7,1280(sp)
 1002eec:	d9014b17 	ldw	r4,1324(sp)
 1002ef0:	d9c14017 	ldw	r7,1280(sp)
 1002ef4:	1100000d 	sth	r4,0(r2)
 1002ef8:	0039f906 	br	10016e0 <___vfprintf_internal_r+0x170>
 1002efc:	d9014f17 	ldw	r4,1340(sp)
 1002f00:	b00b883a 	mov	r5,r22
 1002f04:	d9800c04 	addi	r6,sp,48
 1002f08:	10015180 	call	1001518 <__sprint_r>
 1002f0c:	103b501e 	bne	r2,zero,1001c50 <___vfprintf_internal_r+0x6e0>
 1002f10:	dc800e17 	ldw	r18,56(sp)
 1002f14:	dc400d17 	ldw	r17,52(sp)
 1002f18:	d9000517 	ldw	r4,20(sp)
 1002f1c:	d8c01904 	addi	r3,sp,100
 1002f20:	003f2d06 	br	1002bd8 <___vfprintf_internal_r+0x1668>
 1002f24:	00800184 	movi	r2,6
 1002f28:	14c09a36 	bltu	r2,r19,1003194 <___vfprintf_internal_r+0x1c24>
 1002f2c:	dcc14515 	stw	r19,1300(sp)
 1002f30:	9800010e 	bge	r19,zero,1002f38 <___vfprintf_internal_r+0x19c8>
 1002f34:	d8014515 	stw	zero,1300(sp)
 1002f38:	00804074 	movhi	r2,257
 1002f3c:	10b4f804 	addi	r2,r2,-11296
 1002f40:	980f883a 	mov	r7,r19
 1002f44:	d8814115 	stw	r2,1284(sp)
 1002f48:	003a7806 	br	100192c <___vfprintf_internal_r+0x3bc>
 1002f4c:	00bfffc4 	movi	r2,-1
 1002f50:	9880e226 	beq	r19,r2,10032dc <___vfprintf_internal_r+0x1d6c>
 1002f54:	d9414d17 	ldw	r5,1332(sp)
 1002f58:	008019c4 	movi	r2,103
 1002f5c:	2880dc26 	beq	r5,r2,10032d0 <___vfprintf_internal_r+0x1d60>
 1002f60:	008011c4 	movi	r2,71
 1002f64:	2880da26 	beq	r5,r2,10032d0 <___vfprintf_internal_r+0x1d60>
 1002f68:	d9414c17 	ldw	r5,1328(sp)
 1002f6c:	d9014317 	ldw	r4,1292(sp)
 1002f70:	d9814217 	ldw	r6,1288(sp)
 1002f74:	29404014 	ori	r5,r5,256
 1002f78:	d9414c15 	stw	r5,1328(sp)
 1002f7c:	2000cc16 	blt	r4,zero,10032b0 <___vfprintf_internal_r+0x1d40>
 1002f80:	3021883a 	mov	r16,r6
 1002f84:	2023883a 	mov	r17,r4
 1002f88:	0039883a 	mov	fp,zero
 1002f8c:	d9414d17 	ldw	r5,1332(sp)
 1002f90:	00801984 	movi	r2,102
 1002f94:	2880b726 	beq	r5,r2,1003274 <___vfprintf_internal_r+0x1d04>
 1002f98:	00801184 	movi	r2,70
 1002f9c:	2880b526 	beq	r5,r2,1003274 <___vfprintf_internal_r+0x1d04>
 1002fa0:	00801944 	movi	r2,101
 1002fa4:	2880c826 	beq	r5,r2,10032c8 <___vfprintf_internal_r+0x1d58>
 1002fa8:	00801144 	movi	r2,69
 1002fac:	2880c626 	beq	r5,r2,10032c8 <___vfprintf_internal_r+0x1d58>
 1002fb0:	9829883a 	mov	r20,r19
 1002fb4:	d9014f17 	ldw	r4,1340(sp)
 1002fb8:	d8800504 	addi	r2,sp,20
 1002fbc:	880d883a 	mov	r6,r17
 1002fc0:	d8800115 	stw	r2,4(sp)
 1002fc4:	d8c00604 	addi	r3,sp,24
 1002fc8:	d8800704 	addi	r2,sp,28
 1002fcc:	800b883a 	mov	r5,r16
 1002fd0:	01c00084 	movi	r7,2
 1002fd4:	d8c00215 	stw	r3,8(sp)
 1002fd8:	d8800315 	stw	r2,12(sp)
 1002fdc:	dd000015 	stw	r20,0(sp)
 1002fe0:	10037940 	call	1003794 <_dtoa_r>
 1002fe4:	d9814d17 	ldw	r6,1332(sp)
 1002fe8:	d8814115 	stw	r2,1284(sp)
 1002fec:	008019c4 	movi	r2,103
 1002ff0:	30809526 	beq	r6,r2,1003248 <___vfprintf_internal_r+0x1cd8>
 1002ff4:	d8c14d17 	ldw	r3,1332(sp)
 1002ff8:	008011c4 	movi	r2,71
 1002ffc:	18809226 	beq	r3,r2,1003248 <___vfprintf_internal_r+0x1cd8>
 1003000:	d9414117 	ldw	r5,1284(sp)
 1003004:	d9814d17 	ldw	r6,1332(sp)
 1003008:	00801984 	movi	r2,102
 100300c:	2d25883a 	add	r18,r5,r20
 1003010:	30808626 	beq	r6,r2,100322c <___vfprintf_internal_r+0x1cbc>
 1003014:	00801184 	movi	r2,70
 1003018:	30808426 	beq	r6,r2,100322c <___vfprintf_internal_r+0x1cbc>
 100301c:	000d883a 	mov	r6,zero
 1003020:	000f883a 	mov	r7,zero
 1003024:	880b883a 	mov	r5,r17
 1003028:	8009883a 	mov	r4,r16
 100302c:	1009ae00 	call	1009ae0 <__eqdf2>
 1003030:	1000751e 	bne	r2,zero,1003208 <___vfprintf_internal_r+0x1c98>
 1003034:	9005883a 	mov	r2,r18
 1003038:	dc800715 	stw	r18,28(sp)
 100303c:	d9014117 	ldw	r4,1284(sp)
 1003040:	d9414d17 	ldw	r5,1332(sp)
 1003044:	00c019c4 	movi	r3,103
 1003048:	1125c83a 	sub	r18,r2,r4
 100304c:	28c06826 	beq	r5,r3,10031f0 <___vfprintf_internal_r+0x1c80>
 1003050:	008011c4 	movi	r2,71
 1003054:	28806626 	beq	r5,r2,10031f0 <___vfprintf_internal_r+0x1c80>
 1003058:	d9000517 	ldw	r4,20(sp)
 100305c:	d8c14d17 	ldw	r3,1332(sp)
 1003060:	00801944 	movi	r2,101
 1003064:	10c05516 	blt	r2,r3,10031bc <___vfprintf_internal_r+0x1c4c>
 1003068:	213fffc4 	addi	r4,r4,-1
 100306c:	d9000515 	stw	r4,20(sp)
 1003070:	d8c00805 	stb	r3,32(sp)
 1003074:	2021883a 	mov	r16,r4
 1003078:	2000c116 	blt	r4,zero,1003380 <___vfprintf_internal_r+0x1e10>
 100307c:	00800ac4 	movi	r2,43
 1003080:	d8800845 	stb	r2,33(sp)
 1003084:	00800244 	movi	r2,9
 1003088:	1400af0e 	bge	r2,r16,1003348 <___vfprintf_internal_r+0x1dd8>
 100308c:	1027883a 	mov	r19,r2
 1003090:	dc400b84 	addi	r17,sp,46
 1003094:	8009883a 	mov	r4,r16
 1003098:	01400284 	movi	r5,10
 100309c:	1009ee80 	call	1009ee8 <__modsi3>
 10030a0:	10800c04 	addi	r2,r2,48
 10030a4:	8c7fffc4 	addi	r17,r17,-1
 10030a8:	8009883a 	mov	r4,r16
 10030ac:	01400284 	movi	r5,10
 10030b0:	88800005 	stb	r2,0(r17)
 10030b4:	1009e880 	call	1009e88 <__divsi3>
 10030b8:	1021883a 	mov	r16,r2
 10030bc:	98bff516 	blt	r19,r2,1003094 <___vfprintf_internal_r+0x1b24>
 10030c0:	10c00c04 	addi	r3,r2,48
 10030c4:	d88009c4 	addi	r2,sp,39
 10030c8:	108001c4 	addi	r2,r2,7
 10030cc:	897fffc4 	addi	r5,r17,-1
 10030d0:	88ffffc5 	stb	r3,-1(r17)
 10030d4:	2880a72e 	bgeu	r5,r2,1003374 <___vfprintf_internal_r+0x1e04>
 10030d8:	1009883a 	mov	r4,r2
 10030dc:	d9800804 	addi	r6,sp,32
 10030e0:	d8c00884 	addi	r3,sp,34
 10030e4:	28800003 	ldbu	r2,0(r5)
 10030e8:	29400044 	addi	r5,r5,1
 10030ec:	18800005 	stb	r2,0(r3)
 10030f0:	18c00044 	addi	r3,r3,1
 10030f4:	293ffb36 	bltu	r5,r4,10030e4 <___vfprintf_internal_r+0x1b74>
 10030f8:	1987c83a 	sub	r3,r3,r6
 10030fc:	00800044 	movi	r2,1
 1003100:	d8c14815 	stw	r3,1312(sp)
 1003104:	90cf883a 	add	r7,r18,r3
 1003108:	1480960e 	bge	r2,r18,1003364 <___vfprintf_internal_r+0x1df4>
 100310c:	39c00044 	addi	r7,r7,1
 1003110:	d9c14515 	stw	r7,1300(sp)
 1003114:	38003416 	blt	r7,zero,10031e8 <___vfprintf_internal_r+0x1c78>
 1003118:	e0803fcc 	andi	r2,fp,255
 100311c:	1080201c 	xori	r2,r2,128
 1003120:	10bfe004 	addi	r2,r2,-128
 1003124:	10004e26 	beq	r2,zero,1003260 <___vfprintf_internal_r+0x1cf0>
 1003128:	00800b44 	movi	r2,45
 100312c:	dc814715 	stw	r18,1308(sp)
 1003130:	d8014615 	stw	zero,1304(sp)
 1003134:	d8800405 	stb	r2,16(sp)
 1003138:	003bb106 	br	1002000 <___vfprintf_internal_r+0xa90>
 100313c:	00800b44 	movi	r2,45
 1003140:	d8800405 	stb	r2,16(sp)
 1003144:	003d3306 	br	1002614 <___vfprintf_internal_r+0x10a4>
 1003148:	d9014f17 	ldw	r4,1340(sp)
 100314c:	b00b883a 	mov	r5,r22
 1003150:	d9800c04 	addi	r6,sp,48
 1003154:	10015180 	call	1001518 <__sprint_r>
 1003158:	103abd1e 	bne	r2,zero,1001c50 <___vfprintf_internal_r+0x6e0>
 100315c:	003abb06 	br	1001c4c <___vfprintf_internal_r+0x6dc>
 1003160:	38800017 	ldw	r2,0(r7)
 1003164:	39c00104 	addi	r7,r7,4
 1003168:	d9c14015 	stw	r7,1280(sp)
 100316c:	d9414b17 	ldw	r5,1324(sp)
 1003170:	d9c14017 	ldw	r7,1280(sp)
 1003174:	11400015 	stw	r5,0(r2)
 1003178:	00395906 	br	10016e0 <___vfprintf_internal_r+0x170>
 100317c:	980f883a 	mov	r7,r19
 1003180:	dcc14515 	stw	r19,1300(sp)
 1003184:	d8014615 	stw	zero,1304(sp)
 1003188:	003b9b06 	br	1001ff8 <___vfprintf_internal_r+0xa88>
 100318c:	0027883a 	mov	r19,zero
 1003190:	00397806 	br	1001774 <___vfprintf_internal_r+0x204>
 1003194:	00c04074 	movhi	r3,257
 1003198:	18f4f804 	addi	r3,r3,-11296
 100319c:	100f883a 	mov	r7,r2
 10031a0:	d8814515 	stw	r2,1300(sp)
 10031a4:	d8c14115 	stw	r3,1284(sp)
 10031a8:	0039e006 	br	100192c <___vfprintf_internal_r+0x3bc>
 10031ac:	00804074 	movhi	r2,257
 10031b0:	10b4f704 	addi	r2,r2,-11300
 10031b4:	d8814115 	stw	r2,1284(sp)
 10031b8:	003d1c06 	br	100262c <___vfprintf_internal_r+0x10bc>
 10031bc:	d9414d17 	ldw	r5,1332(sp)
 10031c0:	00801984 	movi	r2,102
 10031c4:	28804926 	beq	r5,r2,10032ec <___vfprintf_internal_r+0x1d7c>
 10031c8:	200f883a 	mov	r7,r4
 10031cc:	24805716 	blt	r4,r18,100332c <___vfprintf_internal_r+0x1dbc>
 10031d0:	d9414c17 	ldw	r5,1328(sp)
 10031d4:	2880004c 	andi	r2,r5,1
 10031d8:	10000126 	beq	r2,zero,10031e0 <___vfprintf_internal_r+0x1c70>
 10031dc:	21c00044 	addi	r7,r4,1
 10031e0:	d9c14515 	stw	r7,1300(sp)
 10031e4:	383fcc0e 	bge	r7,zero,1003118 <___vfprintf_internal_r+0x1ba8>
 10031e8:	d8014515 	stw	zero,1300(sp)
 10031ec:	003fca06 	br	1003118 <___vfprintf_internal_r+0x1ba8>
 10031f0:	d9000517 	ldw	r4,20(sp)
 10031f4:	00bfff04 	movi	r2,-4
 10031f8:	1100480e 	bge	r2,r4,100331c <___vfprintf_internal_r+0x1dac>
 10031fc:	99004716 	blt	r19,r4,100331c <___vfprintf_internal_r+0x1dac>
 1003200:	d8c14d15 	stw	r3,1332(sp)
 1003204:	003ff006 	br	10031c8 <___vfprintf_internal_r+0x1c58>
 1003208:	d8800717 	ldw	r2,28(sp)
 100320c:	14bf8b2e 	bgeu	r2,r18,100303c <___vfprintf_internal_r+0x1acc>
 1003210:	9007883a 	mov	r3,r18
 1003214:	01000c04 	movi	r4,48
 1003218:	11000005 	stb	r4,0(r2)
 100321c:	10800044 	addi	r2,r2,1
 1003220:	d8800715 	stw	r2,28(sp)
 1003224:	18bffc1e 	bne	r3,r2,1003218 <___vfprintf_internal_r+0x1ca8>
 1003228:	003f8406 	br	100303c <___vfprintf_internal_r+0x1acc>
 100322c:	d8814117 	ldw	r2,1284(sp)
 1003230:	10c00007 	ldb	r3,0(r2)
 1003234:	00800c04 	movi	r2,48
 1003238:	18805b26 	beq	r3,r2,10033a8 <___vfprintf_internal_r+0x1e38>
 100323c:	d9000517 	ldw	r4,20(sp)
 1003240:	9125883a 	add	r18,r18,r4
 1003244:	003f7506 	br	100301c <___vfprintf_internal_r+0x1aac>
 1003248:	d9014c17 	ldw	r4,1328(sp)
 100324c:	2080004c 	andi	r2,r4,1
 1003250:	1005003a 	cmpeq	r2,r2,zero
 1003254:	103f6a26 	beq	r2,zero,1003000 <___vfprintf_internal_r+0x1a90>
 1003258:	d8800717 	ldw	r2,28(sp)
 100325c:	003f7706 	br	100303c <___vfprintf_internal_r+0x1acc>
 1003260:	d9c14515 	stw	r7,1300(sp)
 1003264:	38004d16 	blt	r7,zero,100339c <___vfprintf_internal_r+0x1e2c>
 1003268:	dc814715 	stw	r18,1308(sp)
 100326c:	d8014615 	stw	zero,1304(sp)
 1003270:	003b6106 	br	1001ff8 <___vfprintf_internal_r+0xa88>
 1003274:	d9014f17 	ldw	r4,1340(sp)
 1003278:	d8800504 	addi	r2,sp,20
 100327c:	d8800115 	stw	r2,4(sp)
 1003280:	d8c00604 	addi	r3,sp,24
 1003284:	d8800704 	addi	r2,sp,28
 1003288:	800b883a 	mov	r5,r16
 100328c:	880d883a 	mov	r6,r17
 1003290:	01c000c4 	movi	r7,3
 1003294:	d8c00215 	stw	r3,8(sp)
 1003298:	d8800315 	stw	r2,12(sp)
 100329c:	dcc00015 	stw	r19,0(sp)
 10032a0:	9829883a 	mov	r20,r19
 10032a4:	10037940 	call	1003794 <_dtoa_r>
 10032a8:	d8814115 	stw	r2,1284(sp)
 10032ac:	003f5106 	br	1002ff4 <___vfprintf_internal_r+0x1a84>
 10032b0:	d8c14217 	ldw	r3,1288(sp)
 10032b4:	d9014317 	ldw	r4,1292(sp)
 10032b8:	07000b44 	movi	fp,45
 10032bc:	1821883a 	mov	r16,r3
 10032c0:	2460003c 	xorhi	r17,r4,32768
 10032c4:	003f3106 	br	1002f8c <___vfprintf_internal_r+0x1a1c>
 10032c8:	9d000044 	addi	r20,r19,1
 10032cc:	003f3906 	br	1002fb4 <___vfprintf_internal_r+0x1a44>
 10032d0:	983f251e 	bne	r19,zero,1002f68 <___vfprintf_internal_r+0x19f8>
 10032d4:	04c00044 	movi	r19,1
 10032d8:	003f2306 	br	1002f68 <___vfprintf_internal_r+0x19f8>
 10032dc:	04c00184 	movi	r19,6
 10032e0:	003f2106 	br	1002f68 <___vfprintf_internal_r+0x19f8>
 10032e4:	d8014515 	stw	zero,1300(sp)
 10032e8:	003eee06 	br	1002ea4 <___vfprintf_internal_r+0x1934>
 10032ec:	200f883a 	mov	r7,r4
 10032f0:	0100370e 	bge	zero,r4,10033d0 <___vfprintf_internal_r+0x1e60>
 10032f4:	9800031e 	bne	r19,zero,1003304 <___vfprintf_internal_r+0x1d94>
 10032f8:	d9814c17 	ldw	r6,1328(sp)
 10032fc:	3080004c 	andi	r2,r6,1
 1003300:	103fb726 	beq	r2,zero,10031e0 <___vfprintf_internal_r+0x1c70>
 1003304:	20800044 	addi	r2,r4,1
 1003308:	98a7883a 	add	r19,r19,r2
 100330c:	dcc14515 	stw	r19,1300(sp)
 1003310:	980f883a 	mov	r7,r19
 1003314:	983f800e 	bge	r19,zero,1003118 <___vfprintf_internal_r+0x1ba8>
 1003318:	003fb306 	br	10031e8 <___vfprintf_internal_r+0x1c78>
 100331c:	d9814d17 	ldw	r6,1332(sp)
 1003320:	31bfff84 	addi	r6,r6,-2
 1003324:	d9814d15 	stw	r6,1332(sp)
 1003328:	003f4c06 	br	100305c <___vfprintf_internal_r+0x1aec>
 100332c:	0100180e 	bge	zero,r4,1003390 <___vfprintf_internal_r+0x1e20>
 1003330:	00800044 	movi	r2,1
 1003334:	1485883a 	add	r2,r2,r18
 1003338:	d8814515 	stw	r2,1300(sp)
 100333c:	100f883a 	mov	r7,r2
 1003340:	103f750e 	bge	r2,zero,1003118 <___vfprintf_internal_r+0x1ba8>
 1003344:	003fa806 	br	10031e8 <___vfprintf_internal_r+0x1c78>
 1003348:	80c00c04 	addi	r3,r16,48
 100334c:	00800c04 	movi	r2,48
 1003350:	d8c008c5 	stb	r3,35(sp)
 1003354:	d9800804 	addi	r6,sp,32
 1003358:	d8c00904 	addi	r3,sp,36
 100335c:	d8800885 	stb	r2,34(sp)
 1003360:	003f6506 	br	10030f8 <___vfprintf_internal_r+0x1b88>
 1003364:	d9014c17 	ldw	r4,1328(sp)
 1003368:	2084703a 	and	r2,r4,r2
 100336c:	103f9c26 	beq	r2,zero,10031e0 <___vfprintf_internal_r+0x1c70>
 1003370:	003f6606 	br	100310c <___vfprintf_internal_r+0x1b9c>
 1003374:	d9800804 	addi	r6,sp,32
 1003378:	d8c00884 	addi	r3,sp,34
 100337c:	003f5e06 	br	10030f8 <___vfprintf_internal_r+0x1b88>
 1003380:	00800b44 	movi	r2,45
 1003384:	0121c83a 	sub	r16,zero,r4
 1003388:	d8800845 	stb	r2,33(sp)
 100338c:	003f3d06 	br	1003084 <___vfprintf_internal_r+0x1b14>
 1003390:	00800084 	movi	r2,2
 1003394:	1105c83a 	sub	r2,r2,r4
 1003398:	003fe606 	br	1003334 <___vfprintf_internal_r+0x1dc4>
 100339c:	d8014515 	stw	zero,1300(sp)
 10033a0:	dc814715 	stw	r18,1308(sp)
 10033a4:	003fb106 	br	100326c <___vfprintf_internal_r+0x1cfc>
 10033a8:	000d883a 	mov	r6,zero
 10033ac:	000f883a 	mov	r7,zero
 10033b0:	8009883a 	mov	r4,r16
 10033b4:	880b883a 	mov	r5,r17
 10033b8:	1009b680 	call	1009b68 <__nedf2>
 10033bc:	103f9f26 	beq	r2,zero,100323c <___vfprintf_internal_r+0x1ccc>
 10033c0:	00800044 	movi	r2,1
 10033c4:	1509c83a 	sub	r4,r2,r20
 10033c8:	d9000515 	stw	r4,20(sp)
 10033cc:	003f9b06 	br	100323c <___vfprintf_internal_r+0x1ccc>
 10033d0:	98000d1e 	bne	r19,zero,1003408 <___vfprintf_internal_r+0x1e98>
 10033d4:	d8c14c17 	ldw	r3,1328(sp)
 10033d8:	1880004c 	andi	r2,r3,1
 10033dc:	10000a1e 	bne	r2,zero,1003408 <___vfprintf_internal_r+0x1e98>
 10033e0:	01000044 	movi	r4,1
 10033e4:	200f883a 	mov	r7,r4
 10033e8:	d9014515 	stw	r4,1300(sp)
 10033ec:	003f4a06 	br	1003118 <___vfprintf_internal_r+0x1ba8>
 10033f0:	3cc00017 	ldw	r19,0(r7)
 10033f4:	39c00104 	addi	r7,r7,4
 10033f8:	983d0e0e 	bge	r19,zero,1002834 <___vfprintf_internal_r+0x12c4>
 10033fc:	b8c00007 	ldb	r3,0(r23)
 1003400:	04ffffc4 	movi	r19,-1
 1003404:	0038d906 	br	100176c <___vfprintf_internal_r+0x1fc>
 1003408:	9cc00084 	addi	r19,r19,2
 100340c:	dcc14515 	stw	r19,1300(sp)
 1003410:	980f883a 	mov	r7,r19
 1003414:	983f400e 	bge	r19,zero,1003118 <___vfprintf_internal_r+0x1ba8>
 1003418:	003f7306 	br	10031e8 <___vfprintf_internal_r+0x1c78>

0100341c <__vfprintf_internal>:
 100341c:	00804074 	movhi	r2,257
 1003420:	10bc3704 	addi	r2,r2,-3876
 1003424:	2013883a 	mov	r9,r4
 1003428:	11000017 	ldw	r4,0(r2)
 100342c:	2805883a 	mov	r2,r5
 1003430:	300f883a 	mov	r7,r6
 1003434:	480b883a 	mov	r5,r9
 1003438:	100d883a 	mov	r6,r2
 100343c:	10015701 	jmpi	1001570 <___vfprintf_internal_r>

01003440 <__swsetup_r>:
 1003440:	00804074 	movhi	r2,257
 1003444:	10bc3704 	addi	r2,r2,-3876
 1003448:	10c00017 	ldw	r3,0(r2)
 100344c:	defffd04 	addi	sp,sp,-12
 1003450:	dc400115 	stw	r17,4(sp)
 1003454:	dc000015 	stw	r16,0(sp)
 1003458:	dfc00215 	stw	ra,8(sp)
 100345c:	2023883a 	mov	r17,r4
 1003460:	2821883a 	mov	r16,r5
 1003464:	18000226 	beq	r3,zero,1003470 <__swsetup_r+0x30>
 1003468:	18800e17 	ldw	r2,56(r3)
 100346c:	10001f26 	beq	r2,zero,10034ec <__swsetup_r+0xac>
 1003470:	8100030b 	ldhu	r4,12(r16)
 1003474:	2080020c 	andi	r2,r4,8
 1003478:	10002826 	beq	r2,zero,100351c <__swsetup_r+0xdc>
 100347c:	81400417 	ldw	r5,16(r16)
 1003480:	28001d26 	beq	r5,zero,10034f8 <__swsetup_r+0xb8>
 1003484:	2080004c 	andi	r2,r4,1
 1003488:	1005003a 	cmpeq	r2,r2,zero
 100348c:	10000b26 	beq	r2,zero,10034bc <__swsetup_r+0x7c>
 1003490:	2080008c 	andi	r2,r4,2
 1003494:	10001226 	beq	r2,zero,10034e0 <__swsetup_r+0xa0>
 1003498:	0005883a 	mov	r2,zero
 100349c:	80800215 	stw	r2,8(r16)
 10034a0:	28000b26 	beq	r5,zero,10034d0 <__swsetup_r+0x90>
 10034a4:	0005883a 	mov	r2,zero
 10034a8:	dfc00217 	ldw	ra,8(sp)
 10034ac:	dc400117 	ldw	r17,4(sp)
 10034b0:	dc000017 	ldw	r16,0(sp)
 10034b4:	dec00304 	addi	sp,sp,12
 10034b8:	f800283a 	ret
 10034bc:	80800517 	ldw	r2,20(r16)
 10034c0:	80000215 	stw	zero,8(r16)
 10034c4:	0085c83a 	sub	r2,zero,r2
 10034c8:	80800615 	stw	r2,24(r16)
 10034cc:	283ff51e 	bne	r5,zero,10034a4 <__swsetup_r+0x64>
 10034d0:	2080200c 	andi	r2,r4,128
 10034d4:	103ff326 	beq	r2,zero,10034a4 <__swsetup_r+0x64>
 10034d8:	00bfffc4 	movi	r2,-1
 10034dc:	003ff206 	br	10034a8 <__swsetup_r+0x68>
 10034e0:	80800517 	ldw	r2,20(r16)
 10034e4:	80800215 	stw	r2,8(r16)
 10034e8:	003fed06 	br	10034a0 <__swsetup_r+0x60>
 10034ec:	1809883a 	mov	r4,r3
 10034f0:	1004fe00 	call	1004fe0 <__sinit>
 10034f4:	003fde06 	br	1003470 <__swsetup_r+0x30>
 10034f8:	20c0a00c 	andi	r3,r4,640
 10034fc:	00808004 	movi	r2,512
 1003500:	18bfe026 	beq	r3,r2,1003484 <__swsetup_r+0x44>
 1003504:	8809883a 	mov	r4,r17
 1003508:	800b883a 	mov	r5,r16
 100350c:	1005d580 	call	1005d58 <__smakebuf_r>
 1003510:	8100030b 	ldhu	r4,12(r16)
 1003514:	81400417 	ldw	r5,16(r16)
 1003518:	003fda06 	br	1003484 <__swsetup_r+0x44>
 100351c:	2080040c 	andi	r2,r4,16
 1003520:	103fed26 	beq	r2,zero,10034d8 <__swsetup_r+0x98>
 1003524:	2080010c 	andi	r2,r4,4
 1003528:	10001226 	beq	r2,zero,1003574 <__swsetup_r+0x134>
 100352c:	81400c17 	ldw	r5,48(r16)
 1003530:	28000526 	beq	r5,zero,1003548 <__swsetup_r+0x108>
 1003534:	80801004 	addi	r2,r16,64
 1003538:	28800226 	beq	r5,r2,1003544 <__swsetup_r+0x104>
 100353c:	8809883a 	mov	r4,r17
 1003540:	10053640 	call	1005364 <_free_r>
 1003544:	80000c15 	stw	zero,48(r16)
 1003548:	8080030b 	ldhu	r2,12(r16)
 100354c:	81400417 	ldw	r5,16(r16)
 1003550:	80000115 	stw	zero,4(r16)
 1003554:	10bff6cc 	andi	r2,r2,65499
 1003558:	8080030d 	sth	r2,12(r16)
 100355c:	81400015 	stw	r5,0(r16)
 1003560:	8080030b 	ldhu	r2,12(r16)
 1003564:	10800214 	ori	r2,r2,8
 1003568:	113fffcc 	andi	r4,r2,65535
 100356c:	8080030d 	sth	r2,12(r16)
 1003570:	003fc306 	br	1003480 <__swsetup_r+0x40>
 1003574:	81400417 	ldw	r5,16(r16)
 1003578:	003ff906 	br	1003560 <__swsetup_r+0x120>

0100357c <quorem>:
 100357c:	28c00417 	ldw	r3,16(r5)
 1003580:	20800417 	ldw	r2,16(r4)
 1003584:	defff604 	addi	sp,sp,-40
 1003588:	ddc00715 	stw	r23,28(sp)
 100358c:	dd400515 	stw	r21,20(sp)
 1003590:	dfc00915 	stw	ra,36(sp)
 1003594:	df000815 	stw	fp,32(sp)
 1003598:	dd800615 	stw	r22,24(sp)
 100359c:	dd000415 	stw	r20,16(sp)
 10035a0:	dcc00315 	stw	r19,12(sp)
 10035a4:	dc800215 	stw	r18,8(sp)
 10035a8:	dc400115 	stw	r17,4(sp)
 10035ac:	dc000015 	stw	r16,0(sp)
 10035b0:	202f883a 	mov	r23,r4
 10035b4:	282b883a 	mov	r21,r5
 10035b8:	10c07416 	blt	r2,r3,100378c <quorem+0x210>
 10035bc:	1c7fffc4 	addi	r17,r3,-1
 10035c0:	8c45883a 	add	r2,r17,r17
 10035c4:	1085883a 	add	r2,r2,r2
 10035c8:	2c000504 	addi	r16,r5,20
 10035cc:	24c00504 	addi	r19,r4,20
 10035d0:	14ed883a 	add	r22,r2,r19
 10035d4:	80a5883a 	add	r18,r16,r2
 10035d8:	b7000017 	ldw	fp,0(r22)
 10035dc:	91400017 	ldw	r5,0(r18)
 10035e0:	e009883a 	mov	r4,fp
 10035e4:	29400044 	addi	r5,r5,1
 10035e8:	1009f480 	call	1009f48 <__udivsi3>
 10035ec:	1029883a 	mov	r20,r2
 10035f0:	10003c1e 	bne	r2,zero,10036e4 <quorem+0x168>
 10035f4:	a80b883a 	mov	r5,r21
 10035f8:	b809883a 	mov	r4,r23
 10035fc:	1006a840 	call	1006a84 <__mcmp>
 1003600:	10002b16 	blt	r2,zero,10036b0 <quorem+0x134>
 1003604:	a5000044 	addi	r20,r20,1
 1003608:	980f883a 	mov	r7,r19
 100360c:	0011883a 	mov	r8,zero
 1003610:	0009883a 	mov	r4,zero
 1003614:	81400017 	ldw	r5,0(r16)
 1003618:	38c00017 	ldw	r3,0(r7)
 100361c:	84000104 	addi	r16,r16,4
 1003620:	28bfffcc 	andi	r2,r5,65535
 1003624:	2085883a 	add	r2,r4,r2
 1003628:	11bfffcc 	andi	r6,r2,65535
 100362c:	193fffcc 	andi	r4,r3,65535
 1003630:	1004d43a 	srli	r2,r2,16
 1003634:	280ad43a 	srli	r5,r5,16
 1003638:	2189c83a 	sub	r4,r4,r6
 100363c:	2209883a 	add	r4,r4,r8
 1003640:	1806d43a 	srli	r3,r3,16
 1003644:	288b883a 	add	r5,r5,r2
 1003648:	200dd43a 	srai	r6,r4,16
 100364c:	28bfffcc 	andi	r2,r5,65535
 1003650:	1887c83a 	sub	r3,r3,r2
 1003654:	1987883a 	add	r3,r3,r6
 1003658:	3900000d 	sth	r4,0(r7)
 100365c:	38c0008d 	sth	r3,2(r7)
 1003660:	2808d43a 	srli	r4,r5,16
 1003664:	39c00104 	addi	r7,r7,4
 1003668:	1811d43a 	srai	r8,r3,16
 100366c:	943fe92e 	bgeu	r18,r16,1003614 <quorem+0x98>
 1003670:	8c45883a 	add	r2,r17,r17
 1003674:	1085883a 	add	r2,r2,r2
 1003678:	9885883a 	add	r2,r19,r2
 100367c:	10c00017 	ldw	r3,0(r2)
 1003680:	18000b1e 	bne	r3,zero,10036b0 <quorem+0x134>
 1003684:	113fff04 	addi	r4,r2,-4
 1003688:	9900082e 	bgeu	r19,r4,10036ac <quorem+0x130>
 100368c:	10bfff17 	ldw	r2,-4(r2)
 1003690:	10000326 	beq	r2,zero,10036a0 <quorem+0x124>
 1003694:	00000506 	br	10036ac <quorem+0x130>
 1003698:	20800017 	ldw	r2,0(r4)
 100369c:	1000031e 	bne	r2,zero,10036ac <quorem+0x130>
 10036a0:	213fff04 	addi	r4,r4,-4
 10036a4:	8c7fffc4 	addi	r17,r17,-1
 10036a8:	993ffb36 	bltu	r19,r4,1003698 <quorem+0x11c>
 10036ac:	bc400415 	stw	r17,16(r23)
 10036b0:	a005883a 	mov	r2,r20
 10036b4:	dfc00917 	ldw	ra,36(sp)
 10036b8:	df000817 	ldw	fp,32(sp)
 10036bc:	ddc00717 	ldw	r23,28(sp)
 10036c0:	dd800617 	ldw	r22,24(sp)
 10036c4:	dd400517 	ldw	r21,20(sp)
 10036c8:	dd000417 	ldw	r20,16(sp)
 10036cc:	dcc00317 	ldw	r19,12(sp)
 10036d0:	dc800217 	ldw	r18,8(sp)
 10036d4:	dc400117 	ldw	r17,4(sp)
 10036d8:	dc000017 	ldw	r16,0(sp)
 10036dc:	dec00a04 	addi	sp,sp,40
 10036e0:	f800283a 	ret
 10036e4:	980f883a 	mov	r7,r19
 10036e8:	8011883a 	mov	r8,r16
 10036ec:	0013883a 	mov	r9,zero
 10036f0:	000d883a 	mov	r6,zero
 10036f4:	40c00017 	ldw	r3,0(r8)
 10036f8:	39000017 	ldw	r4,0(r7)
 10036fc:	42000104 	addi	r8,r8,4
 1003700:	18bfffcc 	andi	r2,r3,65535
 1003704:	a085383a 	mul	r2,r20,r2
 1003708:	1806d43a 	srli	r3,r3,16
 100370c:	217fffcc 	andi	r5,r4,65535
 1003710:	3085883a 	add	r2,r6,r2
 1003714:	11bfffcc 	andi	r6,r2,65535
 1003718:	a0c7383a 	mul	r3,r20,r3
 100371c:	1004d43a 	srli	r2,r2,16
 1003720:	298bc83a 	sub	r5,r5,r6
 1003724:	2a4b883a 	add	r5,r5,r9
 1003728:	2008d43a 	srli	r4,r4,16
 100372c:	1887883a 	add	r3,r3,r2
 1003730:	280dd43a 	srai	r6,r5,16
 1003734:	18bfffcc 	andi	r2,r3,65535
 1003738:	2089c83a 	sub	r4,r4,r2
 100373c:	2189883a 	add	r4,r4,r6
 1003740:	3900008d 	sth	r4,2(r7)
 1003744:	3940000d 	sth	r5,0(r7)
 1003748:	180cd43a 	srli	r6,r3,16
 100374c:	39c00104 	addi	r7,r7,4
 1003750:	2013d43a 	srai	r9,r4,16
 1003754:	923fe72e 	bgeu	r18,r8,10036f4 <quorem+0x178>
 1003758:	e03fa61e 	bne	fp,zero,10035f4 <quorem+0x78>
 100375c:	b0ffff04 	addi	r3,r22,-4
 1003760:	98c0082e 	bgeu	r19,r3,1003784 <quorem+0x208>
 1003764:	b0bfff17 	ldw	r2,-4(r22)
 1003768:	10000326 	beq	r2,zero,1003778 <quorem+0x1fc>
 100376c:	00000506 	br	1003784 <quorem+0x208>
 1003770:	18800017 	ldw	r2,0(r3)
 1003774:	1000031e 	bne	r2,zero,1003784 <quorem+0x208>
 1003778:	18ffff04 	addi	r3,r3,-4
 100377c:	8c7fffc4 	addi	r17,r17,-1
 1003780:	98fffb36 	bltu	r19,r3,1003770 <quorem+0x1f4>
 1003784:	bc400415 	stw	r17,16(r23)
 1003788:	003f9a06 	br	10035f4 <quorem+0x78>
 100378c:	0005883a 	mov	r2,zero
 1003790:	003fc806 	br	10036b4 <quorem+0x138>

01003794 <_dtoa_r>:
 1003794:	22001017 	ldw	r8,64(r4)
 1003798:	deffda04 	addi	sp,sp,-152
 100379c:	dd402115 	stw	r21,132(sp)
 10037a0:	dd002015 	stw	r20,128(sp)
 10037a4:	dc801e15 	stw	r18,120(sp)
 10037a8:	dc401d15 	stw	r17,116(sp)
 10037ac:	dfc02515 	stw	ra,148(sp)
 10037b0:	df002415 	stw	fp,144(sp)
 10037b4:	ddc02315 	stw	r23,140(sp)
 10037b8:	dd802215 	stw	r22,136(sp)
 10037bc:	dcc01f15 	stw	r19,124(sp)
 10037c0:	dc001c15 	stw	r16,112(sp)
 10037c4:	d9001615 	stw	r4,88(sp)
 10037c8:	3023883a 	mov	r17,r6
 10037cc:	2829883a 	mov	r20,r5
 10037d0:	d9c01715 	stw	r7,92(sp)
 10037d4:	dc802817 	ldw	r18,160(sp)
 10037d8:	302b883a 	mov	r21,r6
 10037dc:	40000a26 	beq	r8,zero,1003808 <_dtoa_r+0x74>
 10037e0:	20801117 	ldw	r2,68(r4)
 10037e4:	400b883a 	mov	r5,r8
 10037e8:	40800115 	stw	r2,4(r8)
 10037ec:	20c01117 	ldw	r3,68(r4)
 10037f0:	00800044 	movi	r2,1
 10037f4:	10c4983a 	sll	r2,r2,r3
 10037f8:	40800215 	stw	r2,8(r8)
 10037fc:	10069280 	call	1006928 <_Bfree>
 1003800:	d8c01617 	ldw	r3,88(sp)
 1003804:	18001015 	stw	zero,64(r3)
 1003808:	8800a316 	blt	r17,zero,1003a98 <_dtoa_r+0x304>
 100380c:	90000015 	stw	zero,0(r18)
 1003810:	a8dffc2c 	andhi	r3,r21,32752
 1003814:	009ffc34 	movhi	r2,32752
 1003818:	18809126 	beq	r3,r2,1003a60 <_dtoa_r+0x2cc>
 100381c:	000d883a 	mov	r6,zero
 1003820:	000f883a 	mov	r7,zero
 1003824:	a009883a 	mov	r4,r20
 1003828:	a80b883a 	mov	r5,r21
 100382c:	dd001215 	stw	r20,72(sp)
 1003830:	dd401315 	stw	r21,76(sp)
 1003834:	1009b680 	call	1009b68 <__nedf2>
 1003838:	1000171e 	bne	r2,zero,1003898 <_dtoa_r+0x104>
 100383c:	d9802717 	ldw	r6,156(sp)
 1003840:	00800044 	movi	r2,1
 1003844:	30800015 	stw	r2,0(r6)
 1003848:	d8802917 	ldw	r2,164(sp)
 100384c:	10029b26 	beq	r2,zero,10042bc <_dtoa_r+0xb28>
 1003850:	d9002917 	ldw	r4,164(sp)
 1003854:	00804074 	movhi	r2,257
 1003858:	10b50644 	addi	r2,r2,-11239
 100385c:	10ffffc4 	addi	r3,r2,-1
 1003860:	20800015 	stw	r2,0(r4)
 1003864:	1805883a 	mov	r2,r3
 1003868:	dfc02517 	ldw	ra,148(sp)
 100386c:	df002417 	ldw	fp,144(sp)
 1003870:	ddc02317 	ldw	r23,140(sp)
 1003874:	dd802217 	ldw	r22,136(sp)
 1003878:	dd402117 	ldw	r21,132(sp)
 100387c:	dd002017 	ldw	r20,128(sp)
 1003880:	dcc01f17 	ldw	r19,124(sp)
 1003884:	dc801e17 	ldw	r18,120(sp)
 1003888:	dc401d17 	ldw	r17,116(sp)
 100388c:	dc001c17 	ldw	r16,112(sp)
 1003890:	dec02604 	addi	sp,sp,152
 1003894:	f800283a 	ret
 1003898:	d9001617 	ldw	r4,88(sp)
 100389c:	d9401217 	ldw	r5,72(sp)
 10038a0:	d8800104 	addi	r2,sp,4
 10038a4:	a80d883a 	mov	r6,r21
 10038a8:	d9c00204 	addi	r7,sp,8
 10038ac:	d8800015 	stw	r2,0(sp)
 10038b0:	1006f640 	call	1006f64 <__d2b>
 10038b4:	d8800715 	stw	r2,28(sp)
 10038b8:	a804d53a 	srli	r2,r21,20
 10038bc:	1101ffcc 	andi	r4,r2,2047
 10038c0:	20008626 	beq	r4,zero,1003adc <_dtoa_r+0x348>
 10038c4:	d8c01217 	ldw	r3,72(sp)
 10038c8:	00800434 	movhi	r2,16
 10038cc:	10bfffc4 	addi	r2,r2,-1
 10038d0:	ddc00117 	ldw	r23,4(sp)
 10038d4:	a884703a 	and	r2,r21,r2
 10038d8:	1811883a 	mov	r8,r3
 10038dc:	124ffc34 	orhi	r9,r2,16368
 10038e0:	25bf0044 	addi	r22,r4,-1023
 10038e4:	d8000815 	stw	zero,32(sp)
 10038e8:	0005883a 	mov	r2,zero
 10038ec:	00cffe34 	movhi	r3,16376
 10038f0:	480b883a 	mov	r5,r9
 10038f4:	4009883a 	mov	r4,r8
 10038f8:	180f883a 	mov	r7,r3
 10038fc:	100d883a 	mov	r6,r2
 1003900:	10096280 	call	1009628 <__subdf3>
 1003904:	0218dbf4 	movhi	r8,25455
 1003908:	4210d844 	addi	r8,r8,17249
 100390c:	024ff4f4 	movhi	r9,16339
 1003910:	4a61e9c4 	addi	r9,r9,-30809
 1003914:	480f883a 	mov	r7,r9
 1003918:	400d883a 	mov	r6,r8
 100391c:	180b883a 	mov	r5,r3
 1003920:	1009883a 	mov	r4,r2
 1003924:	100971c0 	call	100971c <__muldf3>
 1003928:	0222d874 	movhi	r8,35681
 100392c:	42322cc4 	addi	r8,r8,-14157
 1003930:	024ff1f4 	movhi	r9,16327
 1003934:	4a628a04 	addi	r9,r9,-30168
 1003938:	480f883a 	mov	r7,r9
 100393c:	400d883a 	mov	r6,r8
 1003940:	180b883a 	mov	r5,r3
 1003944:	1009883a 	mov	r4,r2
 1003948:	10096a80 	call	10096a8 <__adddf3>
 100394c:	b009883a 	mov	r4,r22
 1003950:	1021883a 	mov	r16,r2
 1003954:	1823883a 	mov	r17,r3
 1003958:	1000c140 	call	1000c14 <__floatsidf>
 100395c:	021427f4 	movhi	r8,20639
 1003960:	421e7ec4 	addi	r8,r8,31227
 1003964:	024ff4f4 	movhi	r9,16339
 1003968:	4a5104c4 	addi	r9,r9,17427
 100396c:	480f883a 	mov	r7,r9
 1003970:	400d883a 	mov	r6,r8
 1003974:	180b883a 	mov	r5,r3
 1003978:	1009883a 	mov	r4,r2
 100397c:	100971c0 	call	100971c <__muldf3>
 1003980:	180f883a 	mov	r7,r3
 1003984:	880b883a 	mov	r5,r17
 1003988:	100d883a 	mov	r6,r2
 100398c:	8009883a 	mov	r4,r16
 1003990:	10096a80 	call	10096a8 <__adddf3>
 1003994:	1009883a 	mov	r4,r2
 1003998:	180b883a 	mov	r5,r3
 100399c:	1021883a 	mov	r16,r2
 10039a0:	1823883a 	mov	r17,r3
 10039a4:	1000d0c0 	call	1000d0c <__fixdfsi>
 10039a8:	000d883a 	mov	r6,zero
 10039ac:	000f883a 	mov	r7,zero
 10039b0:	8009883a 	mov	r4,r16
 10039b4:	880b883a 	mov	r5,r17
 10039b8:	d8800d15 	stw	r2,52(sp)
 10039bc:	1000b8c0 	call	1000b8c <__ltdf2>
 10039c0:	10031716 	blt	r2,zero,1004620 <_dtoa_r+0xe8c>
 10039c4:	d8c00d17 	ldw	r3,52(sp)
 10039c8:	00800584 	movi	r2,22
 10039cc:	10c1482e 	bgeu	r2,r3,1003ef0 <_dtoa_r+0x75c>
 10039d0:	01000044 	movi	r4,1
 10039d4:	d9000c15 	stw	r4,48(sp)
 10039d8:	bd85c83a 	sub	r2,r23,r22
 10039dc:	11bfffc4 	addi	r6,r2,-1
 10039e0:	30030b16 	blt	r6,zero,1004610 <_dtoa_r+0xe7c>
 10039e4:	d9800a15 	stw	r6,40(sp)
 10039e8:	d8001115 	stw	zero,68(sp)
 10039ec:	d8c00d17 	ldw	r3,52(sp)
 10039f0:	1802ff16 	blt	r3,zero,10045f0 <_dtoa_r+0xe5c>
 10039f4:	d9000a17 	ldw	r4,40(sp)
 10039f8:	d8c00915 	stw	r3,36(sp)
 10039fc:	d8001015 	stw	zero,64(sp)
 1003a00:	20c9883a 	add	r4,r4,r3
 1003a04:	d9000a15 	stw	r4,40(sp)
 1003a08:	d9001717 	ldw	r4,92(sp)
 1003a0c:	00800244 	movi	r2,9
 1003a10:	11004636 	bltu	r2,r4,1003b2c <_dtoa_r+0x398>
 1003a14:	00800144 	movi	r2,5
 1003a18:	11020416 	blt	r2,r4,100422c <_dtoa_r+0xa98>
 1003a1c:	04400044 	movi	r17,1
 1003a20:	d8c01717 	ldw	r3,92(sp)
 1003a24:	00800144 	movi	r2,5
 1003a28:	10c1ed36 	bltu	r2,r3,10041e0 <_dtoa_r+0xa4c>
 1003a2c:	18c5883a 	add	r2,r3,r3
 1003a30:	1085883a 	add	r2,r2,r2
 1003a34:	00c04034 	movhi	r3,256
 1003a38:	18ce9204 	addi	r3,r3,14920
 1003a3c:	10c5883a 	add	r2,r2,r3
 1003a40:	11000017 	ldw	r4,0(r2)
 1003a44:	2000683a 	jmp	r4
 1003a48:	01003b34 	movhi	r4,236
 1003a4c:	01003b34 	movhi	r4,236
 1003a50:	01004534 	movhi	r4,276
 1003a54:	0100450c 	andi	r4,zero,276
 1003a58:	01004550 	cmplti	r4,zero,277
 1003a5c:	0100455c 	xori	r4,zero,277
 1003a60:	d9002717 	ldw	r4,156(sp)
 1003a64:	0089c3c4 	movi	r2,9999
 1003a68:	20800015 	stw	r2,0(r4)
 1003a6c:	a0001026 	beq	r20,zero,1003ab0 <_dtoa_r+0x31c>
 1003a70:	00c04074 	movhi	r3,257
 1003a74:	18f51204 	addi	r3,r3,-11192
 1003a78:	d9802917 	ldw	r6,164(sp)
 1003a7c:	303f7926 	beq	r6,zero,1003864 <_dtoa_r+0xd0>
 1003a80:	188000c7 	ldb	r2,3(r3)
 1003a84:	190000c4 	addi	r4,r3,3
 1003a88:	1000101e 	bne	r2,zero,1003acc <_dtoa_r+0x338>
 1003a8c:	d8802917 	ldw	r2,164(sp)
 1003a90:	11000015 	stw	r4,0(r2)
 1003a94:	003f7306 	br	1003864 <_dtoa_r+0xd0>
 1003a98:	00a00034 	movhi	r2,32768
 1003a9c:	10bfffc4 	addi	r2,r2,-1
 1003aa0:	00c00044 	movi	r3,1
 1003aa4:	88aa703a 	and	r21,r17,r2
 1003aa8:	90c00015 	stw	r3,0(r18)
 1003aac:	003f5806 	br	1003810 <_dtoa_r+0x7c>
 1003ab0:	00800434 	movhi	r2,16
 1003ab4:	10bfffc4 	addi	r2,r2,-1
 1003ab8:	a884703a 	and	r2,r21,r2
 1003abc:	103fec1e 	bne	r2,zero,1003a70 <_dtoa_r+0x2dc>
 1003ac0:	00c04074 	movhi	r3,257
 1003ac4:	18f50f04 	addi	r3,r3,-11204
 1003ac8:	003feb06 	br	1003a78 <_dtoa_r+0x2e4>
 1003acc:	d8802917 	ldw	r2,164(sp)
 1003ad0:	19000204 	addi	r4,r3,8
 1003ad4:	11000015 	stw	r4,0(r2)
 1003ad8:	003f6206 	br	1003864 <_dtoa_r+0xd0>
 1003adc:	ddc00117 	ldw	r23,4(sp)
 1003ae0:	d8800217 	ldw	r2,8(sp)
 1003ae4:	01000804 	movi	r4,32
 1003ae8:	b8c10c84 	addi	r3,r23,1074
 1003aec:	18a3883a 	add	r17,r3,r2
 1003af0:	2441b80e 	bge	r4,r17,10041d4 <_dtoa_r+0xa40>
 1003af4:	00c01004 	movi	r3,64
 1003af8:	1c47c83a 	sub	r3,r3,r17
 1003afc:	88bff804 	addi	r2,r17,-32
 1003b00:	a8c6983a 	sll	r3,r21,r3
 1003b04:	a084d83a 	srl	r2,r20,r2
 1003b08:	1888b03a 	or	r4,r3,r2
 1003b0c:	1009c780 	call	1009c78 <__floatunsidf>
 1003b10:	1011883a 	mov	r8,r2
 1003b14:	00bf8434 	movhi	r2,65040
 1003b18:	01000044 	movi	r4,1
 1003b1c:	10d3883a 	add	r9,r2,r3
 1003b20:	8dbef344 	addi	r22,r17,-1075
 1003b24:	d9000815 	stw	r4,32(sp)
 1003b28:	003f6f06 	br	10038e8 <_dtoa_r+0x154>
 1003b2c:	d8001715 	stw	zero,92(sp)
 1003b30:	04400044 	movi	r17,1
 1003b34:	00bfffc4 	movi	r2,-1
 1003b38:	00c00044 	movi	r3,1
 1003b3c:	d8800e15 	stw	r2,56(sp)
 1003b40:	d8002615 	stw	zero,152(sp)
 1003b44:	d8800f15 	stw	r2,60(sp)
 1003b48:	d8c00b15 	stw	r3,44(sp)
 1003b4c:	1021883a 	mov	r16,r2
 1003b50:	d8801617 	ldw	r2,88(sp)
 1003b54:	10001115 	stw	zero,68(r2)
 1003b58:	d8801617 	ldw	r2,88(sp)
 1003b5c:	11401117 	ldw	r5,68(r2)
 1003b60:	1009883a 	mov	r4,r2
 1003b64:	1006ea80 	call	1006ea8 <_Balloc>
 1003b68:	d8c01617 	ldw	r3,88(sp)
 1003b6c:	d8800515 	stw	r2,20(sp)
 1003b70:	18801015 	stw	r2,64(r3)
 1003b74:	00800384 	movi	r2,14
 1003b78:	14006836 	bltu	r2,r16,1003d1c <_dtoa_r+0x588>
 1003b7c:	8805003a 	cmpeq	r2,r17,zero
 1003b80:	1000661e 	bne	r2,zero,1003d1c <_dtoa_r+0x588>
 1003b84:	d9000d17 	ldw	r4,52(sp)
 1003b88:	0102300e 	bge	zero,r4,100444c <_dtoa_r+0xcb8>
 1003b8c:	208003cc 	andi	r2,r4,15
 1003b90:	100490fa 	slli	r2,r2,3
 1003b94:	2025d13a 	srai	r18,r4,4
 1003b98:	00c04074 	movhi	r3,257
 1003b9c:	18f52404 	addi	r3,r3,-11120
 1003ba0:	10c5883a 	add	r2,r2,r3
 1003ba4:	90c0040c 	andi	r3,r18,16
 1003ba8:	14000017 	ldw	r16,0(r2)
 1003bac:	14400117 	ldw	r17,4(r2)
 1003bb0:	18036a1e 	bne	r3,zero,100495c <_dtoa_r+0x11c8>
 1003bb4:	05800084 	movi	r22,2
 1003bb8:	90001026 	beq	r18,zero,1003bfc <_dtoa_r+0x468>
 1003bbc:	04c04074 	movhi	r19,257
 1003bc0:	9cf55604 	addi	r19,r19,-10920
 1003bc4:	9080004c 	andi	r2,r18,1
 1003bc8:	1005003a 	cmpeq	r2,r2,zero
 1003bcc:	1000081e 	bne	r2,zero,1003bf0 <_dtoa_r+0x45c>
 1003bd0:	99800017 	ldw	r6,0(r19)
 1003bd4:	99c00117 	ldw	r7,4(r19)
 1003bd8:	880b883a 	mov	r5,r17
 1003bdc:	8009883a 	mov	r4,r16
 1003be0:	100971c0 	call	100971c <__muldf3>
 1003be4:	1021883a 	mov	r16,r2
 1003be8:	b5800044 	addi	r22,r22,1
 1003bec:	1823883a 	mov	r17,r3
 1003bf0:	9025d07a 	srai	r18,r18,1
 1003bf4:	9cc00204 	addi	r19,r19,8
 1003bf8:	903ff21e 	bne	r18,zero,1003bc4 <_dtoa_r+0x430>
 1003bfc:	a80b883a 	mov	r5,r21
 1003c00:	a009883a 	mov	r4,r20
 1003c04:	880f883a 	mov	r7,r17
 1003c08:	800d883a 	mov	r6,r16
 1003c0c:	10008ac0 	call	10008ac <__divdf3>
 1003c10:	1029883a 	mov	r20,r2
 1003c14:	182b883a 	mov	r21,r3
 1003c18:	d8c00c17 	ldw	r3,48(sp)
 1003c1c:	1805003a 	cmpeq	r2,r3,zero
 1003c20:	1000081e 	bne	r2,zero,1003c44 <_dtoa_r+0x4b0>
 1003c24:	0005883a 	mov	r2,zero
 1003c28:	00cffc34 	movhi	r3,16368
 1003c2c:	180f883a 	mov	r7,r3
 1003c30:	a009883a 	mov	r4,r20
 1003c34:	a80b883a 	mov	r5,r21
 1003c38:	100d883a 	mov	r6,r2
 1003c3c:	1000b8c0 	call	1000b8c <__ltdf2>
 1003c40:	1003fe16 	blt	r2,zero,1004c3c <_dtoa_r+0x14a8>
 1003c44:	b009883a 	mov	r4,r22
 1003c48:	1000c140 	call	1000c14 <__floatsidf>
 1003c4c:	180b883a 	mov	r5,r3
 1003c50:	1009883a 	mov	r4,r2
 1003c54:	a00d883a 	mov	r6,r20
 1003c58:	a80f883a 	mov	r7,r21
 1003c5c:	100971c0 	call	100971c <__muldf3>
 1003c60:	0011883a 	mov	r8,zero
 1003c64:	02500734 	movhi	r9,16412
 1003c68:	1009883a 	mov	r4,r2
 1003c6c:	180b883a 	mov	r5,r3
 1003c70:	480f883a 	mov	r7,r9
 1003c74:	400d883a 	mov	r6,r8
 1003c78:	10096a80 	call	10096a8 <__adddf3>
 1003c7c:	d9000f17 	ldw	r4,60(sp)
 1003c80:	102d883a 	mov	r22,r2
 1003c84:	00bf3034 	movhi	r2,64704
 1003c88:	18b9883a 	add	fp,r3,r2
 1003c8c:	e02f883a 	mov	r23,fp
 1003c90:	20028f1e 	bne	r4,zero,10046d0 <_dtoa_r+0xf3c>
 1003c94:	0005883a 	mov	r2,zero
 1003c98:	00d00534 	movhi	r3,16404
 1003c9c:	a009883a 	mov	r4,r20
 1003ca0:	a80b883a 	mov	r5,r21
 1003ca4:	180f883a 	mov	r7,r3
 1003ca8:	100d883a 	mov	r6,r2
 1003cac:	10096280 	call	1009628 <__subdf3>
 1003cb0:	1009883a 	mov	r4,r2
 1003cb4:	e00f883a 	mov	r7,fp
 1003cb8:	180b883a 	mov	r5,r3
 1003cbc:	b00d883a 	mov	r6,r22
 1003cc0:	1025883a 	mov	r18,r2
 1003cc4:	1827883a 	mov	r19,r3
 1003cc8:	1000b040 	call	1000b04 <__gtdf2>
 1003ccc:	00834f16 	blt	zero,r2,1004a0c <_dtoa_r+0x1278>
 1003cd0:	e0e0003c 	xorhi	r3,fp,32768
 1003cd4:	9009883a 	mov	r4,r18
 1003cd8:	980b883a 	mov	r5,r19
 1003cdc:	180f883a 	mov	r7,r3
 1003ce0:	b00d883a 	mov	r6,r22
 1003ce4:	1000b8c0 	call	1000b8c <__ltdf2>
 1003ce8:	1000080e 	bge	r2,zero,1003d0c <_dtoa_r+0x578>
 1003cec:	0027883a 	mov	r19,zero
 1003cf0:	0025883a 	mov	r18,zero
 1003cf4:	d8802617 	ldw	r2,152(sp)
 1003cf8:	df000517 	ldw	fp,20(sp)
 1003cfc:	d8000615 	stw	zero,24(sp)
 1003d00:	0084303a 	nor	r2,zero,r2
 1003d04:	d8800d15 	stw	r2,52(sp)
 1003d08:	00019b06 	br	1004378 <_dtoa_r+0xbe4>
 1003d0c:	d9801217 	ldw	r6,72(sp)
 1003d10:	d8801317 	ldw	r2,76(sp)
 1003d14:	3029883a 	mov	r20,r6
 1003d18:	102b883a 	mov	r21,r2
 1003d1c:	d8c00217 	ldw	r3,8(sp)
 1003d20:	18008516 	blt	r3,zero,1003f38 <_dtoa_r+0x7a4>
 1003d24:	d9000d17 	ldw	r4,52(sp)
 1003d28:	00800384 	movi	r2,14
 1003d2c:	11008216 	blt	r2,r4,1003f38 <_dtoa_r+0x7a4>
 1003d30:	200490fa 	slli	r2,r4,3
 1003d34:	d9802617 	ldw	r6,152(sp)
 1003d38:	00c04074 	movhi	r3,257
 1003d3c:	18f52404 	addi	r3,r3,-11120
 1003d40:	10c5883a 	add	r2,r2,r3
 1003d44:	14800017 	ldw	r18,0(r2)
 1003d48:	14c00117 	ldw	r19,4(r2)
 1003d4c:	30031e16 	blt	r6,zero,10049c8 <_dtoa_r+0x1234>
 1003d50:	d9000517 	ldw	r4,20(sp)
 1003d54:	d8c00f17 	ldw	r3,60(sp)
 1003d58:	a823883a 	mov	r17,r21
 1003d5c:	a021883a 	mov	r16,r20
 1003d60:	192b883a 	add	r21,r3,r4
 1003d64:	2039883a 	mov	fp,r4
 1003d68:	00000f06 	br	1003da8 <_dtoa_r+0x614>
 1003d6c:	0005883a 	mov	r2,zero
 1003d70:	00d00934 	movhi	r3,16420
 1003d74:	5009883a 	mov	r4,r10
 1003d78:	580b883a 	mov	r5,r11
 1003d7c:	180f883a 	mov	r7,r3
 1003d80:	100d883a 	mov	r6,r2
 1003d84:	100971c0 	call	100971c <__muldf3>
 1003d88:	180b883a 	mov	r5,r3
 1003d8c:	000d883a 	mov	r6,zero
 1003d90:	000f883a 	mov	r7,zero
 1003d94:	1009883a 	mov	r4,r2
 1003d98:	1021883a 	mov	r16,r2
 1003d9c:	1823883a 	mov	r17,r3
 1003da0:	1009b680 	call	1009b68 <__nedf2>
 1003da4:	10004526 	beq	r2,zero,1003ebc <_dtoa_r+0x728>
 1003da8:	900d883a 	mov	r6,r18
 1003dac:	980f883a 	mov	r7,r19
 1003db0:	8009883a 	mov	r4,r16
 1003db4:	880b883a 	mov	r5,r17
 1003db8:	10008ac0 	call	10008ac <__divdf3>
 1003dbc:	180b883a 	mov	r5,r3
 1003dc0:	1009883a 	mov	r4,r2
 1003dc4:	1000d0c0 	call	1000d0c <__fixdfsi>
 1003dc8:	1009883a 	mov	r4,r2
 1003dcc:	1029883a 	mov	r20,r2
 1003dd0:	1000c140 	call	1000c14 <__floatsidf>
 1003dd4:	180f883a 	mov	r7,r3
 1003dd8:	9009883a 	mov	r4,r18
 1003ddc:	980b883a 	mov	r5,r19
 1003de0:	100d883a 	mov	r6,r2
 1003de4:	100971c0 	call	100971c <__muldf3>
 1003de8:	180f883a 	mov	r7,r3
 1003dec:	880b883a 	mov	r5,r17
 1003df0:	8009883a 	mov	r4,r16
 1003df4:	100d883a 	mov	r6,r2
 1003df8:	10096280 	call	1009628 <__subdf3>
 1003dfc:	1015883a 	mov	r10,r2
 1003e00:	a0800c04 	addi	r2,r20,48
 1003e04:	e0800005 	stb	r2,0(fp)
 1003e08:	e7000044 	addi	fp,fp,1
 1003e0c:	1817883a 	mov	r11,r3
 1003e10:	e57fd61e 	bne	fp,r21,1003d6c <_dtoa_r+0x5d8>
 1003e14:	500d883a 	mov	r6,r10
 1003e18:	180f883a 	mov	r7,r3
 1003e1c:	5009883a 	mov	r4,r10
 1003e20:	180b883a 	mov	r5,r3
 1003e24:	10096a80 	call	10096a8 <__adddf3>
 1003e28:	100d883a 	mov	r6,r2
 1003e2c:	9009883a 	mov	r4,r18
 1003e30:	980b883a 	mov	r5,r19
 1003e34:	180f883a 	mov	r7,r3
 1003e38:	1021883a 	mov	r16,r2
 1003e3c:	1823883a 	mov	r17,r3
 1003e40:	1000b8c0 	call	1000b8c <__ltdf2>
 1003e44:	10000816 	blt	r2,zero,1003e68 <_dtoa_r+0x6d4>
 1003e48:	980b883a 	mov	r5,r19
 1003e4c:	800d883a 	mov	r6,r16
 1003e50:	880f883a 	mov	r7,r17
 1003e54:	9009883a 	mov	r4,r18
 1003e58:	1009ae00 	call	1009ae0 <__eqdf2>
 1003e5c:	1000171e 	bne	r2,zero,1003ebc <_dtoa_r+0x728>
 1003e60:	a080004c 	andi	r2,r20,1
 1003e64:	10001526 	beq	r2,zero,1003ebc <_dtoa_r+0x728>
 1003e68:	d8800d17 	ldw	r2,52(sp)
 1003e6c:	d8800415 	stw	r2,16(sp)
 1003e70:	e009883a 	mov	r4,fp
 1003e74:	213fffc4 	addi	r4,r4,-1
 1003e78:	20c00007 	ldb	r3,0(r4)
 1003e7c:	00800e44 	movi	r2,57
 1003e80:	1880081e 	bne	r3,r2,1003ea4 <_dtoa_r+0x710>
 1003e84:	d8800517 	ldw	r2,20(sp)
 1003e88:	113ffa1e 	bne	r2,r4,1003e74 <_dtoa_r+0x6e0>
 1003e8c:	d8c00417 	ldw	r3,16(sp)
 1003e90:	d9800517 	ldw	r6,20(sp)
 1003e94:	00800c04 	movi	r2,48
 1003e98:	18c00044 	addi	r3,r3,1
 1003e9c:	d8c00415 	stw	r3,16(sp)
 1003ea0:	30800005 	stb	r2,0(r6)
 1003ea4:	20800003 	ldbu	r2,0(r4)
 1003ea8:	d8c00417 	ldw	r3,16(sp)
 1003eac:	27000044 	addi	fp,r4,1
 1003eb0:	10800044 	addi	r2,r2,1
 1003eb4:	d8c00d15 	stw	r3,52(sp)
 1003eb8:	20800005 	stb	r2,0(r4)
 1003ebc:	d9001617 	ldw	r4,88(sp)
 1003ec0:	d9400717 	ldw	r5,28(sp)
 1003ec4:	10069280 	call	1006928 <_Bfree>
 1003ec8:	e0000005 	stb	zero,0(fp)
 1003ecc:	d9800d17 	ldw	r6,52(sp)
 1003ed0:	d8c02717 	ldw	r3,156(sp)
 1003ed4:	d9002917 	ldw	r4,164(sp)
 1003ed8:	30800044 	addi	r2,r6,1
 1003edc:	18800015 	stw	r2,0(r3)
 1003ee0:	20029c26 	beq	r4,zero,1004954 <_dtoa_r+0x11c0>
 1003ee4:	d8c00517 	ldw	r3,20(sp)
 1003ee8:	27000015 	stw	fp,0(r4)
 1003eec:	003e5d06 	br	1003864 <_dtoa_r+0xd0>
 1003ef0:	d9800d17 	ldw	r6,52(sp)
 1003ef4:	00c04074 	movhi	r3,257
 1003ef8:	18f52404 	addi	r3,r3,-11120
 1003efc:	d9001217 	ldw	r4,72(sp)
 1003f00:	300490fa 	slli	r2,r6,3
 1003f04:	d9401317 	ldw	r5,76(sp)
 1003f08:	10c5883a 	add	r2,r2,r3
 1003f0c:	12000017 	ldw	r8,0(r2)
 1003f10:	12400117 	ldw	r9,4(r2)
 1003f14:	400d883a 	mov	r6,r8
 1003f18:	480f883a 	mov	r7,r9
 1003f1c:	1000b8c0 	call	1000b8c <__ltdf2>
 1003f20:	1000030e 	bge	r2,zero,1003f30 <_dtoa_r+0x79c>
 1003f24:	d8800d17 	ldw	r2,52(sp)
 1003f28:	10bfffc4 	addi	r2,r2,-1
 1003f2c:	d8800d15 	stw	r2,52(sp)
 1003f30:	d8000c15 	stw	zero,48(sp)
 1003f34:	003ea806 	br	10039d8 <_dtoa_r+0x244>
 1003f38:	d9000b17 	ldw	r4,44(sp)
 1003f3c:	202cc03a 	cmpne	r22,r4,zero
 1003f40:	b000c71e 	bne	r22,zero,1004260 <_dtoa_r+0xacc>
 1003f44:	dc001117 	ldw	r16,68(sp)
 1003f48:	dc801017 	ldw	r18,64(sp)
 1003f4c:	0027883a 	mov	r19,zero
 1003f50:	04000b0e 	bge	zero,r16,1003f80 <_dtoa_r+0x7ec>
 1003f54:	d8c00a17 	ldw	r3,40(sp)
 1003f58:	00c0090e 	bge	zero,r3,1003f80 <_dtoa_r+0x7ec>
 1003f5c:	8005883a 	mov	r2,r16
 1003f60:	1c011316 	blt	r3,r16,10043b0 <_dtoa_r+0xc1c>
 1003f64:	d9000a17 	ldw	r4,40(sp)
 1003f68:	d9801117 	ldw	r6,68(sp)
 1003f6c:	80a1c83a 	sub	r16,r16,r2
 1003f70:	2089c83a 	sub	r4,r4,r2
 1003f74:	308dc83a 	sub	r6,r6,r2
 1003f78:	d9000a15 	stw	r4,40(sp)
 1003f7c:	d9801115 	stw	r6,68(sp)
 1003f80:	d8801017 	ldw	r2,64(sp)
 1003f84:	0080150e 	bge	zero,r2,1003fdc <_dtoa_r+0x848>
 1003f88:	d8c00b17 	ldw	r3,44(sp)
 1003f8c:	1805003a 	cmpeq	r2,r3,zero
 1003f90:	1001c91e 	bne	r2,zero,10046b8 <_dtoa_r+0xf24>
 1003f94:	04800e0e 	bge	zero,r18,1003fd0 <_dtoa_r+0x83c>
 1003f98:	d9001617 	ldw	r4,88(sp)
 1003f9c:	980b883a 	mov	r5,r19
 1003fa0:	900d883a 	mov	r6,r18
 1003fa4:	10076dc0 	call	10076dc <__pow5mult>
 1003fa8:	d9001617 	ldw	r4,88(sp)
 1003fac:	d9800717 	ldw	r6,28(sp)
 1003fb0:	100b883a 	mov	r5,r2
 1003fb4:	1027883a 	mov	r19,r2
 1003fb8:	10073b80 	call	10073b8 <__multiply>
 1003fbc:	d9001617 	ldw	r4,88(sp)
 1003fc0:	d9400717 	ldw	r5,28(sp)
 1003fc4:	1023883a 	mov	r17,r2
 1003fc8:	10069280 	call	1006928 <_Bfree>
 1003fcc:	dc400715 	stw	r17,28(sp)
 1003fd0:	d9001017 	ldw	r4,64(sp)
 1003fd4:	248dc83a 	sub	r6,r4,r18
 1003fd8:	30010e1e 	bne	r6,zero,1004414 <_dtoa_r+0xc80>
 1003fdc:	d9001617 	ldw	r4,88(sp)
 1003fe0:	04400044 	movi	r17,1
 1003fe4:	880b883a 	mov	r5,r17
 1003fe8:	10075a00 	call	10075a0 <__i2b>
 1003fec:	d9800917 	ldw	r6,36(sp)
 1003ff0:	1025883a 	mov	r18,r2
 1003ff4:	0180040e 	bge	zero,r6,1004008 <_dtoa_r+0x874>
 1003ff8:	d9001617 	ldw	r4,88(sp)
 1003ffc:	100b883a 	mov	r5,r2
 1004000:	10076dc0 	call	10076dc <__pow5mult>
 1004004:	1025883a 	mov	r18,r2
 1004008:	d8801717 	ldw	r2,92(sp)
 100400c:	8880f30e 	bge	r17,r2,10043dc <_dtoa_r+0xc48>
 1004010:	0023883a 	mov	r17,zero
 1004014:	d9800917 	ldw	r6,36(sp)
 1004018:	30019e1e 	bne	r6,zero,1004694 <_dtoa_r+0xf00>
 100401c:	00c00044 	movi	r3,1
 1004020:	d9000a17 	ldw	r4,40(sp)
 1004024:	20c5883a 	add	r2,r4,r3
 1004028:	10c007cc 	andi	r3,r2,31
 100402c:	1800841e 	bne	r3,zero,1004240 <_dtoa_r+0xaac>
 1004030:	00800704 	movi	r2,28
 1004034:	d9000a17 	ldw	r4,40(sp)
 1004038:	d9801117 	ldw	r6,68(sp)
 100403c:	80a1883a 	add	r16,r16,r2
 1004040:	2089883a 	add	r4,r4,r2
 1004044:	308d883a 	add	r6,r6,r2
 1004048:	d9000a15 	stw	r4,40(sp)
 100404c:	d9801115 	stw	r6,68(sp)
 1004050:	d8801117 	ldw	r2,68(sp)
 1004054:	0080050e 	bge	zero,r2,100406c <_dtoa_r+0x8d8>
 1004058:	d9400717 	ldw	r5,28(sp)
 100405c:	d9001617 	ldw	r4,88(sp)
 1004060:	100d883a 	mov	r6,r2
 1004064:	100726c0 	call	100726c <__lshift>
 1004068:	d8800715 	stw	r2,28(sp)
 100406c:	d8c00a17 	ldw	r3,40(sp)
 1004070:	00c0050e 	bge	zero,r3,1004088 <_dtoa_r+0x8f4>
 1004074:	d9001617 	ldw	r4,88(sp)
 1004078:	900b883a 	mov	r5,r18
 100407c:	180d883a 	mov	r6,r3
 1004080:	100726c0 	call	100726c <__lshift>
 1004084:	1025883a 	mov	r18,r2
 1004088:	d9000c17 	ldw	r4,48(sp)
 100408c:	2005003a 	cmpeq	r2,r4,zero
 1004090:	10016f26 	beq	r2,zero,1004650 <_dtoa_r+0xebc>
 1004094:	d9000f17 	ldw	r4,60(sp)
 1004098:	0102170e 	bge	zero,r4,10048f8 <_dtoa_r+0x1164>
 100409c:	d9800b17 	ldw	r6,44(sp)
 10040a0:	3005003a 	cmpeq	r2,r6,zero
 10040a4:	1000881e 	bne	r2,zero,10042c8 <_dtoa_r+0xb34>
 10040a8:	0400050e 	bge	zero,r16,10040c0 <_dtoa_r+0x92c>
 10040ac:	d9001617 	ldw	r4,88(sp)
 10040b0:	980b883a 	mov	r5,r19
 10040b4:	800d883a 	mov	r6,r16
 10040b8:	100726c0 	call	100726c <__lshift>
 10040bc:	1027883a 	mov	r19,r2
 10040c0:	8804c03a 	cmpne	r2,r17,zero
 10040c4:	1002541e 	bne	r2,zero,1004a18 <_dtoa_r+0x1284>
 10040c8:	980b883a 	mov	r5,r19
 10040cc:	dd800517 	ldw	r22,20(sp)
 10040d0:	dcc00615 	stw	r19,24(sp)
 10040d4:	a700004c 	andi	fp,r20,1
 10040d8:	2827883a 	mov	r19,r5
 10040dc:	d9000717 	ldw	r4,28(sp)
 10040e0:	900b883a 	mov	r5,r18
 10040e4:	100357c0 	call	100357c <quorem>
 10040e8:	d9000717 	ldw	r4,28(sp)
 10040ec:	d9400617 	ldw	r5,24(sp)
 10040f0:	1023883a 	mov	r17,r2
 10040f4:	8dc00c04 	addi	r23,r17,48
 10040f8:	1006a840 	call	1006a84 <__mcmp>
 10040fc:	d9001617 	ldw	r4,88(sp)
 1004100:	900b883a 	mov	r5,r18
 1004104:	980d883a 	mov	r6,r19
 1004108:	1029883a 	mov	r20,r2
 100410c:	10070e00 	call	10070e0 <__mdiff>
 1004110:	102b883a 	mov	r21,r2
 1004114:	10800317 	ldw	r2,12(r2)
 1004118:	1001281e 	bne	r2,zero,10045bc <_dtoa_r+0xe28>
 100411c:	d9000717 	ldw	r4,28(sp)
 1004120:	a80b883a 	mov	r5,r21
 1004124:	1006a840 	call	1006a84 <__mcmp>
 1004128:	d9001617 	ldw	r4,88(sp)
 100412c:	1021883a 	mov	r16,r2
 1004130:	a80b883a 	mov	r5,r21
 1004134:	10069280 	call	1006928 <_Bfree>
 1004138:	8000041e 	bne	r16,zero,100414c <_dtoa_r+0x9b8>
 100413c:	d8801717 	ldw	r2,92(sp)
 1004140:	1000021e 	bne	r2,zero,100414c <_dtoa_r+0x9b8>
 1004144:	e004c03a 	cmpne	r2,fp,zero
 1004148:	10011726 	beq	r2,zero,10045a8 <_dtoa_r+0xe14>
 100414c:	a0010616 	blt	r20,zero,1004568 <_dtoa_r+0xdd4>
 1004150:	a000041e 	bne	r20,zero,1004164 <_dtoa_r+0x9d0>
 1004154:	d8c01717 	ldw	r3,92(sp)
 1004158:	1800021e 	bne	r3,zero,1004164 <_dtoa_r+0x9d0>
 100415c:	e004c03a 	cmpne	r2,fp,zero
 1004160:	10010126 	beq	r2,zero,1004568 <_dtoa_r+0xdd4>
 1004164:	04023d16 	blt	zero,r16,1004a5c <_dtoa_r+0x12c8>
 1004168:	b5c00005 	stb	r23,0(r22)
 100416c:	d9800517 	ldw	r6,20(sp)
 1004170:	d9000f17 	ldw	r4,60(sp)
 1004174:	b5800044 	addi	r22,r22,1
 1004178:	3105883a 	add	r2,r6,r4
 100417c:	b0806526 	beq	r22,r2,1004314 <_dtoa_r+0xb80>
 1004180:	d9400717 	ldw	r5,28(sp)
 1004184:	d9001617 	ldw	r4,88(sp)
 1004188:	01800284 	movi	r6,10
 100418c:	000f883a 	mov	r7,zero
 1004190:	10075dc0 	call	10075dc <__multadd>
 1004194:	d8800715 	stw	r2,28(sp)
 1004198:	d8800617 	ldw	r2,24(sp)
 100419c:	14c10c26 	beq	r2,r19,10045d0 <_dtoa_r+0xe3c>
 10041a0:	d9400617 	ldw	r5,24(sp)
 10041a4:	d9001617 	ldw	r4,88(sp)
 10041a8:	01800284 	movi	r6,10
 10041ac:	000f883a 	mov	r7,zero
 10041b0:	10075dc0 	call	10075dc <__multadd>
 10041b4:	d9001617 	ldw	r4,88(sp)
 10041b8:	980b883a 	mov	r5,r19
 10041bc:	01800284 	movi	r6,10
 10041c0:	000f883a 	mov	r7,zero
 10041c4:	d8800615 	stw	r2,24(sp)
 10041c8:	10075dc0 	call	10075dc <__multadd>
 10041cc:	1027883a 	mov	r19,r2
 10041d0:	003fc206 	br	10040dc <_dtoa_r+0x948>
 10041d4:	2445c83a 	sub	r2,r4,r17
 10041d8:	a088983a 	sll	r4,r20,r2
 10041dc:	003e4b06 	br	1003b0c <_dtoa_r+0x378>
 10041e0:	01bfffc4 	movi	r6,-1
 10041e4:	00800044 	movi	r2,1
 10041e8:	d9800e15 	stw	r6,56(sp)
 10041ec:	d9800f15 	stw	r6,60(sp)
 10041f0:	d8800b15 	stw	r2,44(sp)
 10041f4:	d8c01617 	ldw	r3,88(sp)
 10041f8:	008005c4 	movi	r2,23
 10041fc:	18001115 	stw	zero,68(r3)
 1004200:	1580082e 	bgeu	r2,r22,1004224 <_dtoa_r+0xa90>
 1004204:	00c00104 	movi	r3,4
 1004208:	0009883a 	mov	r4,zero
 100420c:	18c7883a 	add	r3,r3,r3
 1004210:	18800504 	addi	r2,r3,20
 1004214:	21000044 	addi	r4,r4,1
 1004218:	b0bffc2e 	bgeu	r22,r2,100420c <_dtoa_r+0xa78>
 100421c:	d9801617 	ldw	r6,88(sp)
 1004220:	31001115 	stw	r4,68(r6)
 1004224:	dc000f17 	ldw	r16,60(sp)
 1004228:	003e4b06 	br	1003b58 <_dtoa_r+0x3c4>
 100422c:	d9801717 	ldw	r6,92(sp)
 1004230:	0023883a 	mov	r17,zero
 1004234:	31bfff04 	addi	r6,r6,-4
 1004238:	d9801715 	stw	r6,92(sp)
 100423c:	003df806 	br	1003a20 <_dtoa_r+0x28c>
 1004240:	00800804 	movi	r2,32
 1004244:	10c9c83a 	sub	r4,r2,r3
 1004248:	00c00104 	movi	r3,4
 100424c:	19005a16 	blt	r3,r4,10043b8 <_dtoa_r+0xc24>
 1004250:	008000c4 	movi	r2,3
 1004254:	113f7e16 	blt	r2,r4,1004050 <_dtoa_r+0x8bc>
 1004258:	20800704 	addi	r2,r4,28
 100425c:	003f7506 	br	1004034 <_dtoa_r+0x8a0>
 1004260:	d9801717 	ldw	r6,92(sp)
 1004264:	00800044 	movi	r2,1
 1004268:	1180a10e 	bge	r2,r6,10044f0 <_dtoa_r+0xd5c>
 100426c:	d9800f17 	ldw	r6,60(sp)
 1004270:	d8c01017 	ldw	r3,64(sp)
 1004274:	30bfffc4 	addi	r2,r6,-1
 1004278:	1881c616 	blt	r3,r2,1004994 <_dtoa_r+0x1200>
 100427c:	18a5c83a 	sub	r18,r3,r2
 1004280:	d8800f17 	ldw	r2,60(sp)
 1004284:	10026216 	blt	r2,zero,1004c10 <_dtoa_r+0x147c>
 1004288:	dc001117 	ldw	r16,68(sp)
 100428c:	1007883a 	mov	r3,r2
 1004290:	d9800a17 	ldw	r6,40(sp)
 1004294:	d8801117 	ldw	r2,68(sp)
 1004298:	d9001617 	ldw	r4,88(sp)
 100429c:	30cd883a 	add	r6,r6,r3
 10042a0:	10c5883a 	add	r2,r2,r3
 10042a4:	01400044 	movi	r5,1
 10042a8:	d9800a15 	stw	r6,40(sp)
 10042ac:	d8801115 	stw	r2,68(sp)
 10042b0:	10075a00 	call	10075a0 <__i2b>
 10042b4:	1027883a 	mov	r19,r2
 10042b8:	003f2506 	br	1003f50 <_dtoa_r+0x7bc>
 10042bc:	00c04074 	movhi	r3,257
 10042c0:	18f50604 	addi	r3,r3,-11240
 10042c4:	003d6706 	br	1003864 <_dtoa_r+0xd0>
 10042c8:	dd800517 	ldw	r22,20(sp)
 10042cc:	04000044 	movi	r16,1
 10042d0:	00000706 	br	10042f0 <_dtoa_r+0xb5c>
 10042d4:	d9400717 	ldw	r5,28(sp)
 10042d8:	d9001617 	ldw	r4,88(sp)
 10042dc:	01800284 	movi	r6,10
 10042e0:	000f883a 	mov	r7,zero
 10042e4:	10075dc0 	call	10075dc <__multadd>
 10042e8:	d8800715 	stw	r2,28(sp)
 10042ec:	84000044 	addi	r16,r16,1
 10042f0:	d9000717 	ldw	r4,28(sp)
 10042f4:	900b883a 	mov	r5,r18
 10042f8:	100357c0 	call	100357c <quorem>
 10042fc:	15c00c04 	addi	r23,r2,48
 1004300:	b5c00005 	stb	r23,0(r22)
 1004304:	d8c00f17 	ldw	r3,60(sp)
 1004308:	b5800044 	addi	r22,r22,1
 100430c:	80fff116 	blt	r16,r3,10042d4 <_dtoa_r+0xb40>
 1004310:	d8000615 	stw	zero,24(sp)
 1004314:	d9400717 	ldw	r5,28(sp)
 1004318:	d9001617 	ldw	r4,88(sp)
 100431c:	01800044 	movi	r6,1
 1004320:	100726c0 	call	100726c <__lshift>
 1004324:	1009883a 	mov	r4,r2
 1004328:	900b883a 	mov	r5,r18
 100432c:	d8800715 	stw	r2,28(sp)
 1004330:	1006a840 	call	1006a84 <__mcmp>
 1004334:	00803c0e 	bge	zero,r2,1004428 <_dtoa_r+0xc94>
 1004338:	b009883a 	mov	r4,r22
 100433c:	213fffc4 	addi	r4,r4,-1
 1004340:	21400003 	ldbu	r5,0(r4)
 1004344:	00800e44 	movi	r2,57
 1004348:	28c03fcc 	andi	r3,r5,255
 100434c:	18c0201c 	xori	r3,r3,128
 1004350:	18ffe004 	addi	r3,r3,-128
 1004354:	1881981e 	bne	r3,r2,10049b8 <_dtoa_r+0x1224>
 1004358:	d9800517 	ldw	r6,20(sp)
 100435c:	21bff71e 	bne	r4,r6,100433c <_dtoa_r+0xba8>
 1004360:	d8800d17 	ldw	r2,52(sp)
 1004364:	37000044 	addi	fp,r6,1
 1004368:	10800044 	addi	r2,r2,1
 100436c:	d8800d15 	stw	r2,52(sp)
 1004370:	00800c44 	movi	r2,49
 1004374:	30800005 	stb	r2,0(r6)
 1004378:	d9001617 	ldw	r4,88(sp)
 100437c:	900b883a 	mov	r5,r18
 1004380:	10069280 	call	1006928 <_Bfree>
 1004384:	983ecd26 	beq	r19,zero,1003ebc <_dtoa_r+0x728>
 1004388:	d8c00617 	ldw	r3,24(sp)
 100438c:	18000426 	beq	r3,zero,10043a0 <_dtoa_r+0xc0c>
 1004390:	1cc00326 	beq	r3,r19,10043a0 <_dtoa_r+0xc0c>
 1004394:	d9001617 	ldw	r4,88(sp)
 1004398:	180b883a 	mov	r5,r3
 100439c:	10069280 	call	1006928 <_Bfree>
 10043a0:	d9001617 	ldw	r4,88(sp)
 10043a4:	980b883a 	mov	r5,r19
 10043a8:	10069280 	call	1006928 <_Bfree>
 10043ac:	003ec306 	br	1003ebc <_dtoa_r+0x728>
 10043b0:	1805883a 	mov	r2,r3
 10043b4:	003eeb06 	br	1003f64 <_dtoa_r+0x7d0>
 10043b8:	d9800a17 	ldw	r6,40(sp)
 10043bc:	d8c01117 	ldw	r3,68(sp)
 10043c0:	20bfff04 	addi	r2,r4,-4
 10043c4:	308d883a 	add	r6,r6,r2
 10043c8:	1887883a 	add	r3,r3,r2
 10043cc:	80a1883a 	add	r16,r16,r2
 10043d0:	d9800a15 	stw	r6,40(sp)
 10043d4:	d8c01115 	stw	r3,68(sp)
 10043d8:	003f1d06 	br	1004050 <_dtoa_r+0x8bc>
 10043dc:	a03f0c1e 	bne	r20,zero,1004010 <_dtoa_r+0x87c>
 10043e0:	00800434 	movhi	r2,16
 10043e4:	10bfffc4 	addi	r2,r2,-1
 10043e8:	a884703a 	and	r2,r21,r2
 10043ec:	103f081e 	bne	r2,zero,1004010 <_dtoa_r+0x87c>
 10043f0:	a89ffc2c 	andhi	r2,r21,32752
 10043f4:	103f0626 	beq	r2,zero,1004010 <_dtoa_r+0x87c>
 10043f8:	d8c01117 	ldw	r3,68(sp)
 10043fc:	d9000a17 	ldw	r4,40(sp)
 1004400:	18c00044 	addi	r3,r3,1
 1004404:	21000044 	addi	r4,r4,1
 1004408:	d8c01115 	stw	r3,68(sp)
 100440c:	d9000a15 	stw	r4,40(sp)
 1004410:	003f0006 	br	1004014 <_dtoa_r+0x880>
 1004414:	d9400717 	ldw	r5,28(sp)
 1004418:	d9001617 	ldw	r4,88(sp)
 100441c:	10076dc0 	call	10076dc <__pow5mult>
 1004420:	d8800715 	stw	r2,28(sp)
 1004424:	003eed06 	br	1003fdc <_dtoa_r+0x848>
 1004428:	1000021e 	bne	r2,zero,1004434 <_dtoa_r+0xca0>
 100442c:	b880004c 	andi	r2,r23,1
 1004430:	103fc11e 	bne	r2,zero,1004338 <_dtoa_r+0xba4>
 1004434:	b5bfffc4 	addi	r22,r22,-1
 1004438:	b0c00007 	ldb	r3,0(r22)
 100443c:	00800c04 	movi	r2,48
 1004440:	18bffc26 	beq	r3,r2,1004434 <_dtoa_r+0xca0>
 1004444:	b7000044 	addi	fp,r22,1
 1004448:	003fcb06 	br	1004378 <_dtoa_r+0xbe4>
 100444c:	d9800d17 	ldw	r6,52(sp)
 1004450:	018fc83a 	sub	r7,zero,r6
 1004454:	3801f726 	beq	r7,zero,1004c34 <_dtoa_r+0x14a0>
 1004458:	398003cc 	andi	r6,r7,15
 100445c:	300c90fa 	slli	r6,r6,3
 1004460:	01404074 	movhi	r5,257
 1004464:	29752404 	addi	r5,r5,-11120
 1004468:	d9001217 	ldw	r4,72(sp)
 100446c:	314d883a 	add	r6,r6,r5
 1004470:	30c00117 	ldw	r3,4(r6)
 1004474:	30800017 	ldw	r2,0(r6)
 1004478:	d9401317 	ldw	r5,76(sp)
 100447c:	3821d13a 	srai	r16,r7,4
 1004480:	100d883a 	mov	r6,r2
 1004484:	180f883a 	mov	r7,r3
 1004488:	100971c0 	call	100971c <__muldf3>
 100448c:	1011883a 	mov	r8,r2
 1004490:	1813883a 	mov	r9,r3
 1004494:	1029883a 	mov	r20,r2
 1004498:	182b883a 	mov	r21,r3
 100449c:	8001e526 	beq	r16,zero,1004c34 <_dtoa_r+0x14a0>
 10044a0:	05800084 	movi	r22,2
 10044a4:	04404074 	movhi	r17,257
 10044a8:	8c755604 	addi	r17,r17,-10920
 10044ac:	8080004c 	andi	r2,r16,1
 10044b0:	1005003a 	cmpeq	r2,r2,zero
 10044b4:	1000081e 	bne	r2,zero,10044d8 <_dtoa_r+0xd44>
 10044b8:	89800017 	ldw	r6,0(r17)
 10044bc:	89c00117 	ldw	r7,4(r17)
 10044c0:	480b883a 	mov	r5,r9
 10044c4:	4009883a 	mov	r4,r8
 10044c8:	100971c0 	call	100971c <__muldf3>
 10044cc:	1011883a 	mov	r8,r2
 10044d0:	b5800044 	addi	r22,r22,1
 10044d4:	1813883a 	mov	r9,r3
 10044d8:	8021d07a 	srai	r16,r16,1
 10044dc:	8c400204 	addi	r17,r17,8
 10044e0:	803ff21e 	bne	r16,zero,10044ac <_dtoa_r+0xd18>
 10044e4:	4029883a 	mov	r20,r8
 10044e8:	482b883a 	mov	r21,r9
 10044ec:	003dca06 	br	1003c18 <_dtoa_r+0x484>
 10044f0:	d9000817 	ldw	r4,32(sp)
 10044f4:	2005003a 	cmpeq	r2,r4,zero
 10044f8:	1001f61e 	bne	r2,zero,1004cd4 <_dtoa_r+0x1540>
 10044fc:	dc001117 	ldw	r16,68(sp)
 1004500:	dc801017 	ldw	r18,64(sp)
 1004504:	18c10cc4 	addi	r3,r3,1075
 1004508:	003f6106 	br	1004290 <_dtoa_r+0xafc>
 100450c:	d8000b15 	stw	zero,44(sp)
 1004510:	d9802617 	ldw	r6,152(sp)
 1004514:	d8c00d17 	ldw	r3,52(sp)
 1004518:	30800044 	addi	r2,r6,1
 100451c:	18ad883a 	add	r22,r3,r2
 1004520:	b13fffc4 	addi	r4,r22,-1
 1004524:	d9000e15 	stw	r4,56(sp)
 1004528:	0581f60e 	bge	zero,r22,1004d04 <_dtoa_r+0x1570>
 100452c:	dd800f15 	stw	r22,60(sp)
 1004530:	003f3006 	br	10041f4 <_dtoa_r+0xa60>
 1004534:	d8000b15 	stw	zero,44(sp)
 1004538:	d9002617 	ldw	r4,152(sp)
 100453c:	0101eb0e 	bge	zero,r4,1004cec <_dtoa_r+0x1558>
 1004540:	202d883a 	mov	r22,r4
 1004544:	d9000e15 	stw	r4,56(sp)
 1004548:	d9000f15 	stw	r4,60(sp)
 100454c:	003f2906 	br	10041f4 <_dtoa_r+0xa60>
 1004550:	01800044 	movi	r6,1
 1004554:	d9800b15 	stw	r6,44(sp)
 1004558:	003ff706 	br	1004538 <_dtoa_r+0xda4>
 100455c:	01000044 	movi	r4,1
 1004560:	d9000b15 	stw	r4,44(sp)
 1004564:	003fea06 	br	1004510 <_dtoa_r+0xd7c>
 1004568:	04000c0e 	bge	zero,r16,100459c <_dtoa_r+0xe08>
 100456c:	d9400717 	ldw	r5,28(sp)
 1004570:	d9001617 	ldw	r4,88(sp)
 1004574:	01800044 	movi	r6,1
 1004578:	100726c0 	call	100726c <__lshift>
 100457c:	1009883a 	mov	r4,r2
 1004580:	900b883a 	mov	r5,r18
 1004584:	d8800715 	stw	r2,28(sp)
 1004588:	1006a840 	call	1006a84 <__mcmp>
 100458c:	0081e00e 	bge	zero,r2,1004d10 <_dtoa_r+0x157c>
 1004590:	bdc00044 	addi	r23,r23,1
 1004594:	00800e84 	movi	r2,58
 1004598:	b881a226 	beq	r23,r2,1004c24 <_dtoa_r+0x1490>
 100459c:	b7000044 	addi	fp,r22,1
 10045a0:	b5c00005 	stb	r23,0(r22)
 10045a4:	003f7406 	br	1004378 <_dtoa_r+0xbe4>
 10045a8:	00800e44 	movi	r2,57
 10045ac:	b8819d26 	beq	r23,r2,1004c24 <_dtoa_r+0x1490>
 10045b0:	053ffa0e 	bge	zero,r20,100459c <_dtoa_r+0xe08>
 10045b4:	8dc00c44 	addi	r23,r17,49
 10045b8:	003ff806 	br	100459c <_dtoa_r+0xe08>
 10045bc:	d9001617 	ldw	r4,88(sp)
 10045c0:	a80b883a 	mov	r5,r21
 10045c4:	04000044 	movi	r16,1
 10045c8:	10069280 	call	1006928 <_Bfree>
 10045cc:	003edf06 	br	100414c <_dtoa_r+0x9b8>
 10045d0:	d9001617 	ldw	r4,88(sp)
 10045d4:	980b883a 	mov	r5,r19
 10045d8:	01800284 	movi	r6,10
 10045dc:	000f883a 	mov	r7,zero
 10045e0:	10075dc0 	call	10075dc <__multadd>
 10045e4:	1027883a 	mov	r19,r2
 10045e8:	d8800615 	stw	r2,24(sp)
 10045ec:	003ebb06 	br	10040dc <_dtoa_r+0x948>
 10045f0:	d9801117 	ldw	r6,68(sp)
 10045f4:	d8800d17 	ldw	r2,52(sp)
 10045f8:	d8000915 	stw	zero,36(sp)
 10045fc:	308dc83a 	sub	r6,r6,r2
 1004600:	0087c83a 	sub	r3,zero,r2
 1004604:	d9801115 	stw	r6,68(sp)
 1004608:	d8c01015 	stw	r3,64(sp)
 100460c:	003cfe06 	br	1003a08 <_dtoa_r+0x274>
 1004610:	018dc83a 	sub	r6,zero,r6
 1004614:	d9801115 	stw	r6,68(sp)
 1004618:	d8000a15 	stw	zero,40(sp)
 100461c:	003cf306 	br	10039ec <_dtoa_r+0x258>
 1004620:	d9000d17 	ldw	r4,52(sp)
 1004624:	1000c140 	call	1000c14 <__floatsidf>
 1004628:	880b883a 	mov	r5,r17
 100462c:	8009883a 	mov	r4,r16
 1004630:	180f883a 	mov	r7,r3
 1004634:	100d883a 	mov	r6,r2
 1004638:	1009b680 	call	1009b68 <__nedf2>
 100463c:	103ce126 	beq	r2,zero,10039c4 <_dtoa_r+0x230>
 1004640:	d9800d17 	ldw	r6,52(sp)
 1004644:	31bfffc4 	addi	r6,r6,-1
 1004648:	d9800d15 	stw	r6,52(sp)
 100464c:	003cdd06 	br	10039c4 <_dtoa_r+0x230>
 1004650:	d9000717 	ldw	r4,28(sp)
 1004654:	900b883a 	mov	r5,r18
 1004658:	1006a840 	call	1006a84 <__mcmp>
 100465c:	103e8d0e 	bge	r2,zero,1004094 <_dtoa_r+0x900>
 1004660:	d9400717 	ldw	r5,28(sp)
 1004664:	d9001617 	ldw	r4,88(sp)
 1004668:	01800284 	movi	r6,10
 100466c:	000f883a 	mov	r7,zero
 1004670:	10075dc0 	call	10075dc <__multadd>
 1004674:	d9800d17 	ldw	r6,52(sp)
 1004678:	d8800715 	stw	r2,28(sp)
 100467c:	31bfffc4 	addi	r6,r6,-1
 1004680:	d9800d15 	stw	r6,52(sp)
 1004684:	b001a71e 	bne	r22,zero,1004d24 <_dtoa_r+0x1590>
 1004688:	d8800e17 	ldw	r2,56(sp)
 100468c:	d8800f15 	stw	r2,60(sp)
 1004690:	003e8006 	br	1004094 <_dtoa_r+0x900>
 1004694:	90800417 	ldw	r2,16(r18)
 1004698:	1085883a 	add	r2,r2,r2
 100469c:	1085883a 	add	r2,r2,r2
 10046a0:	1485883a 	add	r2,r2,r18
 10046a4:	11000417 	ldw	r4,16(r2)
 10046a8:	10069500 	call	1006950 <__hi0bits>
 10046ac:	00c00804 	movi	r3,32
 10046b0:	1887c83a 	sub	r3,r3,r2
 10046b4:	003e5a06 	br	1004020 <_dtoa_r+0x88c>
 10046b8:	d9400717 	ldw	r5,28(sp)
 10046bc:	d9801017 	ldw	r6,64(sp)
 10046c0:	d9001617 	ldw	r4,88(sp)
 10046c4:	10076dc0 	call	10076dc <__pow5mult>
 10046c8:	d8800715 	stw	r2,28(sp)
 10046cc:	003e4306 	br	1003fdc <_dtoa_r+0x848>
 10046d0:	d9800f17 	ldw	r6,60(sp)
 10046d4:	d8800d17 	ldw	r2,52(sp)
 10046d8:	d9800315 	stw	r6,12(sp)
 10046dc:	d8800415 	stw	r2,16(sp)
 10046e0:	d8c00b17 	ldw	r3,44(sp)
 10046e4:	1805003a 	cmpeq	r2,r3,zero
 10046e8:	1000e21e 	bne	r2,zero,1004a74 <_dtoa_r+0x12e0>
 10046ec:	d9000317 	ldw	r4,12(sp)
 10046f0:	0005883a 	mov	r2,zero
 10046f4:	00cff834 	movhi	r3,16352
 10046f8:	200c90fa 	slli	r6,r4,3
 10046fc:	01004074 	movhi	r4,257
 1004700:	21352404 	addi	r4,r4,-11120
 1004704:	180b883a 	mov	r5,r3
 1004708:	310d883a 	add	r6,r6,r4
 100470c:	327fff17 	ldw	r9,-4(r6)
 1004710:	323ffe17 	ldw	r8,-8(r6)
 1004714:	1009883a 	mov	r4,r2
 1004718:	480f883a 	mov	r7,r9
 100471c:	400d883a 	mov	r6,r8
 1004720:	10008ac0 	call	10008ac <__divdf3>
 1004724:	180b883a 	mov	r5,r3
 1004728:	b00d883a 	mov	r6,r22
 100472c:	b80f883a 	mov	r7,r23
 1004730:	1009883a 	mov	r4,r2
 1004734:	10096280 	call	1009628 <__subdf3>
 1004738:	a80b883a 	mov	r5,r21
 100473c:	a009883a 	mov	r4,r20
 1004740:	d8c01915 	stw	r3,100(sp)
 1004744:	d8801815 	stw	r2,96(sp)
 1004748:	1000d0c0 	call	1000d0c <__fixdfsi>
 100474c:	1009883a 	mov	r4,r2
 1004750:	1027883a 	mov	r19,r2
 1004754:	1000c140 	call	1000c14 <__floatsidf>
 1004758:	a80b883a 	mov	r5,r21
 100475c:	a009883a 	mov	r4,r20
 1004760:	180f883a 	mov	r7,r3
 1004764:	100d883a 	mov	r6,r2
 1004768:	10096280 	call	1009628 <__subdf3>
 100476c:	d9801817 	ldw	r6,96(sp)
 1004770:	1823883a 	mov	r17,r3
 1004774:	d8801415 	stw	r2,80(sp)
 1004778:	302d883a 	mov	r22,r6
 100477c:	d9800517 	ldw	r6,20(sp)
 1004780:	9cc00c04 	addi	r19,r19,48
 1004784:	dc401515 	stw	r17,84(sp)
 1004788:	d8c01917 	ldw	r3,100(sp)
 100478c:	34c00005 	stb	r19,0(r6)
 1004790:	d8800517 	ldw	r2,20(sp)
 1004794:	d9401917 	ldw	r5,100(sp)
 1004798:	d9801417 	ldw	r6,80(sp)
 100479c:	b009883a 	mov	r4,r22
 10047a0:	880f883a 	mov	r7,r17
 10047a4:	182f883a 	mov	r23,r3
 10047a8:	17000044 	addi	fp,r2,1
 10047ac:	1000b040 	call	1000b04 <__gtdf2>
 10047b0:	00804e16 	blt	zero,r2,10048ec <_dtoa_r+0x1158>
 10047b4:	d9801417 	ldw	r6,80(sp)
 10047b8:	0005883a 	mov	r2,zero
 10047bc:	00cffc34 	movhi	r3,16368
 10047c0:	180b883a 	mov	r5,r3
 10047c4:	880f883a 	mov	r7,r17
 10047c8:	1009883a 	mov	r4,r2
 10047cc:	10096280 	call	1009628 <__subdf3>
 10047d0:	d9401917 	ldw	r5,100(sp)
 10047d4:	180f883a 	mov	r7,r3
 10047d8:	b009883a 	mov	r4,r22
 10047dc:	100d883a 	mov	r6,r2
 10047e0:	1000b040 	call	1000b04 <__gtdf2>
 10047e4:	00bda216 	blt	zero,r2,1003e70 <_dtoa_r+0x6dc>
 10047e8:	d8c00317 	ldw	r3,12(sp)
 10047ec:	00800044 	movi	r2,1
 10047f0:	10c01216 	blt	r2,r3,100483c <_dtoa_r+0x10a8>
 10047f4:	003d4506 	br	1003d0c <_dtoa_r+0x578>
 10047f8:	d9801417 	ldw	r6,80(sp)
 10047fc:	0005883a 	mov	r2,zero
 1004800:	00cffc34 	movhi	r3,16368
 1004804:	180b883a 	mov	r5,r3
 1004808:	880f883a 	mov	r7,r17
 100480c:	1009883a 	mov	r4,r2
 1004810:	10096280 	call	1009628 <__subdf3>
 1004814:	d9c01b17 	ldw	r7,108(sp)
 1004818:	180b883a 	mov	r5,r3
 100481c:	1009883a 	mov	r4,r2
 1004820:	b00d883a 	mov	r6,r22
 1004824:	1000b8c0 	call	1000b8c <__ltdf2>
 1004828:	103d9116 	blt	r2,zero,1003e70 <_dtoa_r+0x6dc>
 100482c:	d9800517 	ldw	r6,20(sp)
 1004830:	d9000317 	ldw	r4,12(sp)
 1004834:	3105883a 	add	r2,r6,r4
 1004838:	e0bd3426 	beq	fp,r2,1003d0c <_dtoa_r+0x578>
 100483c:	04500934 	movhi	r17,16420
 1004840:	0021883a 	mov	r16,zero
 1004844:	b80b883a 	mov	r5,r23
 1004848:	b009883a 	mov	r4,r22
 100484c:	800d883a 	mov	r6,r16
 1004850:	880f883a 	mov	r7,r17
 1004854:	100971c0 	call	100971c <__muldf3>
 1004858:	d9401517 	ldw	r5,84(sp)
 100485c:	d9001417 	ldw	r4,80(sp)
 1004860:	880f883a 	mov	r7,r17
 1004864:	000d883a 	mov	r6,zero
 1004868:	d8801a15 	stw	r2,104(sp)
 100486c:	d8c01b15 	stw	r3,108(sp)
 1004870:	100971c0 	call	100971c <__muldf3>
 1004874:	180b883a 	mov	r5,r3
 1004878:	1009883a 	mov	r4,r2
 100487c:	1823883a 	mov	r17,r3
 1004880:	1021883a 	mov	r16,r2
 1004884:	1000d0c0 	call	1000d0c <__fixdfsi>
 1004888:	1009883a 	mov	r4,r2
 100488c:	102b883a 	mov	r21,r2
 1004890:	1000c140 	call	1000c14 <__floatsidf>
 1004894:	880b883a 	mov	r5,r17
 1004898:	8009883a 	mov	r4,r16
 100489c:	180f883a 	mov	r7,r3
 10048a0:	100d883a 	mov	r6,r2
 10048a4:	10096280 	call	1009628 <__subdf3>
 10048a8:	1021883a 	mov	r16,r2
 10048ac:	d9001b17 	ldw	r4,108(sp)
 10048b0:	1823883a 	mov	r17,r3
 10048b4:	dc001415 	stw	r16,80(sp)
 10048b8:	ad400c04 	addi	r21,r21,48
 10048bc:	dc401515 	stw	r17,84(sp)
 10048c0:	d8801a17 	ldw	r2,104(sp)
 10048c4:	e5400005 	stb	r21,0(fp)
 10048c8:	202f883a 	mov	r23,r4
 10048cc:	d9c01b17 	ldw	r7,108(sp)
 10048d0:	d9001417 	ldw	r4,80(sp)
 10048d4:	880b883a 	mov	r5,r17
 10048d8:	100d883a 	mov	r6,r2
 10048dc:	102d883a 	mov	r22,r2
 10048e0:	e7000044 	addi	fp,fp,1
 10048e4:	1000b8c0 	call	1000b8c <__ltdf2>
 10048e8:	103fc30e 	bge	r2,zero,10047f8 <_dtoa_r+0x1064>
 10048ec:	d9000417 	ldw	r4,16(sp)
 10048f0:	d9000d15 	stw	r4,52(sp)
 10048f4:	003d7106 	br	1003ebc <_dtoa_r+0x728>
 10048f8:	d9801717 	ldw	r6,92(sp)
 10048fc:	00800084 	movi	r2,2
 1004900:	11bde60e 	bge	r2,r6,100409c <_dtoa_r+0x908>
 1004904:	203cfb1e 	bne	r4,zero,1003cf4 <_dtoa_r+0x560>
 1004908:	d9001617 	ldw	r4,88(sp)
 100490c:	900b883a 	mov	r5,r18
 1004910:	01800144 	movi	r6,5
 1004914:	000f883a 	mov	r7,zero
 1004918:	10075dc0 	call	10075dc <__multadd>
 100491c:	d9000717 	ldw	r4,28(sp)
 1004920:	100b883a 	mov	r5,r2
 1004924:	1025883a 	mov	r18,r2
 1004928:	1006a840 	call	1006a84 <__mcmp>
 100492c:	00bcf10e 	bge	zero,r2,1003cf4 <_dtoa_r+0x560>
 1004930:	d8c00d17 	ldw	r3,52(sp)
 1004934:	d9000517 	ldw	r4,20(sp)
 1004938:	d8000615 	stw	zero,24(sp)
 100493c:	18c00044 	addi	r3,r3,1
 1004940:	d8c00d15 	stw	r3,52(sp)
 1004944:	00800c44 	movi	r2,49
 1004948:	27000044 	addi	fp,r4,1
 100494c:	20800005 	stb	r2,0(r4)
 1004950:	003e8906 	br	1004378 <_dtoa_r+0xbe4>
 1004954:	d8c00517 	ldw	r3,20(sp)
 1004958:	003bc206 	br	1003864 <_dtoa_r+0xd0>
 100495c:	01804074 	movhi	r6,257
 1004960:	31b55604 	addi	r6,r6,-10920
 1004964:	30c00917 	ldw	r3,36(r6)
 1004968:	30800817 	ldw	r2,32(r6)
 100496c:	d9001217 	ldw	r4,72(sp)
 1004970:	d9401317 	ldw	r5,76(sp)
 1004974:	180f883a 	mov	r7,r3
 1004978:	100d883a 	mov	r6,r2
 100497c:	10008ac0 	call	10008ac <__divdf3>
 1004980:	948003cc 	andi	r18,r18,15
 1004984:	058000c4 	movi	r22,3
 1004988:	1029883a 	mov	r20,r2
 100498c:	182b883a 	mov	r21,r3
 1004990:	003c8906 	br	1003bb8 <_dtoa_r+0x424>
 1004994:	d9001017 	ldw	r4,64(sp)
 1004998:	d9800917 	ldw	r6,36(sp)
 100499c:	0025883a 	mov	r18,zero
 10049a0:	1105c83a 	sub	r2,r2,r4
 10049a4:	2089883a 	add	r4,r4,r2
 10049a8:	308d883a 	add	r6,r6,r2
 10049ac:	d9001015 	stw	r4,64(sp)
 10049b0:	d9800915 	stw	r6,36(sp)
 10049b4:	003e3206 	br	1004280 <_dtoa_r+0xaec>
 10049b8:	28800044 	addi	r2,r5,1
 10049bc:	27000044 	addi	fp,r4,1
 10049c0:	20800005 	stb	r2,0(r4)
 10049c4:	003e6c06 	br	1004378 <_dtoa_r+0xbe4>
 10049c8:	d8800f17 	ldw	r2,60(sp)
 10049cc:	00bce016 	blt	zero,r2,1003d50 <_dtoa_r+0x5bc>
 10049d0:	d9800f17 	ldw	r6,60(sp)
 10049d4:	303cc51e 	bne	r6,zero,1003cec <_dtoa_r+0x558>
 10049d8:	0005883a 	mov	r2,zero
 10049dc:	00d00534 	movhi	r3,16404
 10049e0:	980b883a 	mov	r5,r19
 10049e4:	180f883a 	mov	r7,r3
 10049e8:	9009883a 	mov	r4,r18
 10049ec:	100d883a 	mov	r6,r2
 10049f0:	100971c0 	call	100971c <__muldf3>
 10049f4:	180b883a 	mov	r5,r3
 10049f8:	a80f883a 	mov	r7,r21
 10049fc:	1009883a 	mov	r4,r2
 1004a00:	a00d883a 	mov	r6,r20
 1004a04:	1009bf00 	call	1009bf0 <__gedf2>
 1004a08:	103cb80e 	bge	r2,zero,1003cec <_dtoa_r+0x558>
 1004a0c:	0027883a 	mov	r19,zero
 1004a10:	0025883a 	mov	r18,zero
 1004a14:	003fc606 	br	1004930 <_dtoa_r+0x119c>
 1004a18:	99400117 	ldw	r5,4(r19)
 1004a1c:	d9001617 	ldw	r4,88(sp)
 1004a20:	1006ea80 	call	1006ea8 <_Balloc>
 1004a24:	99800417 	ldw	r6,16(r19)
 1004a28:	11000304 	addi	r4,r2,12
 1004a2c:	99400304 	addi	r5,r19,12
 1004a30:	318d883a 	add	r6,r6,r6
 1004a34:	318d883a 	add	r6,r6,r6
 1004a38:	31800204 	addi	r6,r6,8
 1004a3c:	1023883a 	mov	r17,r2
 1004a40:	10067100 	call	1006710 <memcpy>
 1004a44:	d9001617 	ldw	r4,88(sp)
 1004a48:	880b883a 	mov	r5,r17
 1004a4c:	01800044 	movi	r6,1
 1004a50:	100726c0 	call	100726c <__lshift>
 1004a54:	100b883a 	mov	r5,r2
 1004a58:	003d9c06 	br	10040cc <_dtoa_r+0x938>
 1004a5c:	00800e44 	movi	r2,57
 1004a60:	b8807026 	beq	r23,r2,1004c24 <_dtoa_r+0x1490>
 1004a64:	b8800044 	addi	r2,r23,1
 1004a68:	b7000044 	addi	fp,r22,1
 1004a6c:	b0800005 	stb	r2,0(r22)
 1004a70:	003e4106 	br	1004378 <_dtoa_r+0xbe4>
 1004a74:	d8800317 	ldw	r2,12(sp)
 1004a78:	01804074 	movhi	r6,257
 1004a7c:	31b52404 	addi	r6,r6,-11120
 1004a80:	b009883a 	mov	r4,r22
 1004a84:	100e90fa 	slli	r7,r2,3
 1004a88:	b80b883a 	mov	r5,r23
 1004a8c:	398f883a 	add	r7,r7,r6
 1004a90:	38bffe17 	ldw	r2,-8(r7)
 1004a94:	d9800517 	ldw	r6,20(sp)
 1004a98:	38ffff17 	ldw	r3,-4(r7)
 1004a9c:	37000044 	addi	fp,r6,1
 1004aa0:	180f883a 	mov	r7,r3
 1004aa4:	100d883a 	mov	r6,r2
 1004aa8:	100971c0 	call	100971c <__muldf3>
 1004aac:	a80b883a 	mov	r5,r21
 1004ab0:	a009883a 	mov	r4,r20
 1004ab4:	182f883a 	mov	r23,r3
 1004ab8:	102d883a 	mov	r22,r2
 1004abc:	1000d0c0 	call	1000d0c <__fixdfsi>
 1004ac0:	1009883a 	mov	r4,r2
 1004ac4:	1027883a 	mov	r19,r2
 1004ac8:	1000c140 	call	1000c14 <__floatsidf>
 1004acc:	a80b883a 	mov	r5,r21
 1004ad0:	a009883a 	mov	r4,r20
 1004ad4:	180f883a 	mov	r7,r3
 1004ad8:	100d883a 	mov	r6,r2
 1004adc:	10096280 	call	1009628 <__subdf3>
 1004ae0:	180b883a 	mov	r5,r3
 1004ae4:	d8c00517 	ldw	r3,20(sp)
 1004ae8:	9cc00c04 	addi	r19,r19,48
 1004aec:	1009883a 	mov	r4,r2
 1004af0:	1cc00005 	stb	r19,0(r3)
 1004af4:	2021883a 	mov	r16,r4
 1004af8:	d9000317 	ldw	r4,12(sp)
 1004afc:	00800044 	movi	r2,1
 1004b00:	2823883a 	mov	r17,r5
 1004b04:	20802226 	beq	r4,r2,1004b90 <_dtoa_r+0x13fc>
 1004b08:	1029883a 	mov	r20,r2
 1004b0c:	0005883a 	mov	r2,zero
 1004b10:	00d00934 	movhi	r3,16420
 1004b14:	180f883a 	mov	r7,r3
 1004b18:	100d883a 	mov	r6,r2
 1004b1c:	880b883a 	mov	r5,r17
 1004b20:	8009883a 	mov	r4,r16
 1004b24:	100971c0 	call	100971c <__muldf3>
 1004b28:	180b883a 	mov	r5,r3
 1004b2c:	1009883a 	mov	r4,r2
 1004b30:	1823883a 	mov	r17,r3
 1004b34:	1021883a 	mov	r16,r2
 1004b38:	1000d0c0 	call	1000d0c <__fixdfsi>
 1004b3c:	1009883a 	mov	r4,r2
 1004b40:	102b883a 	mov	r21,r2
 1004b44:	1000c140 	call	1000c14 <__floatsidf>
 1004b48:	880b883a 	mov	r5,r17
 1004b4c:	8009883a 	mov	r4,r16
 1004b50:	180f883a 	mov	r7,r3
 1004b54:	100d883a 	mov	r6,r2
 1004b58:	10096280 	call	1009628 <__subdf3>
 1004b5c:	180b883a 	mov	r5,r3
 1004b60:	d8c00517 	ldw	r3,20(sp)
 1004b64:	1009883a 	mov	r4,r2
 1004b68:	ad400c04 	addi	r21,r21,48
 1004b6c:	1d05883a 	add	r2,r3,r20
 1004b70:	15400005 	stb	r21,0(r2)
 1004b74:	2021883a 	mov	r16,r4
 1004b78:	d9000317 	ldw	r4,12(sp)
 1004b7c:	a5000044 	addi	r20,r20,1
 1004b80:	2823883a 	mov	r17,r5
 1004b84:	a13fe11e 	bne	r20,r4,1004b0c <_dtoa_r+0x1378>
 1004b88:	e505883a 	add	r2,fp,r20
 1004b8c:	173fffc4 	addi	fp,r2,-1
 1004b90:	0025883a 	mov	r18,zero
 1004b94:	04cff834 	movhi	r19,16352
 1004b98:	b009883a 	mov	r4,r22
 1004b9c:	b80b883a 	mov	r5,r23
 1004ba0:	900d883a 	mov	r6,r18
 1004ba4:	980f883a 	mov	r7,r19
 1004ba8:	10096a80 	call	10096a8 <__adddf3>
 1004bac:	180b883a 	mov	r5,r3
 1004bb0:	1009883a 	mov	r4,r2
 1004bb4:	800d883a 	mov	r6,r16
 1004bb8:	880f883a 	mov	r7,r17
 1004bbc:	1000b8c0 	call	1000b8c <__ltdf2>
 1004bc0:	103cab16 	blt	r2,zero,1003e70 <_dtoa_r+0x6dc>
 1004bc4:	0009883a 	mov	r4,zero
 1004bc8:	980b883a 	mov	r5,r19
 1004bcc:	b80f883a 	mov	r7,r23
 1004bd0:	b00d883a 	mov	r6,r22
 1004bd4:	10096280 	call	1009628 <__subdf3>
 1004bd8:	180b883a 	mov	r5,r3
 1004bdc:	880f883a 	mov	r7,r17
 1004be0:	1009883a 	mov	r4,r2
 1004be4:	800d883a 	mov	r6,r16
 1004be8:	1000b040 	call	1000b04 <__gtdf2>
 1004bec:	00bc470e 	bge	zero,r2,1003d0c <_dtoa_r+0x578>
 1004bf0:	00c00c04 	movi	r3,48
 1004bf4:	e73fffc4 	addi	fp,fp,-1
 1004bf8:	e0800007 	ldb	r2,0(fp)
 1004bfc:	10fffd26 	beq	r2,r3,1004bf4 <_dtoa_r+0x1460>
 1004c00:	d9800417 	ldw	r6,16(sp)
 1004c04:	e7000044 	addi	fp,fp,1
 1004c08:	d9800d15 	stw	r6,52(sp)
 1004c0c:	003cab06 	br	1003ebc <_dtoa_r+0x728>
 1004c10:	d8c00f17 	ldw	r3,60(sp)
 1004c14:	d9001117 	ldw	r4,68(sp)
 1004c18:	20e1c83a 	sub	r16,r4,r3
 1004c1c:	0007883a 	mov	r3,zero
 1004c20:	003d9b06 	br	1004290 <_dtoa_r+0xafc>
 1004c24:	00800e44 	movi	r2,57
 1004c28:	b0800005 	stb	r2,0(r22)
 1004c2c:	b5800044 	addi	r22,r22,1
 1004c30:	003dc106 	br	1004338 <_dtoa_r+0xba4>
 1004c34:	05800084 	movi	r22,2
 1004c38:	003bf706 	br	1003c18 <_dtoa_r+0x484>
 1004c3c:	d9000f17 	ldw	r4,60(sp)
 1004c40:	013c000e 	bge	zero,r4,1003c44 <_dtoa_r+0x4b0>
 1004c44:	d9800e17 	ldw	r6,56(sp)
 1004c48:	01bc300e 	bge	zero,r6,1003d0c <_dtoa_r+0x578>
 1004c4c:	0005883a 	mov	r2,zero
 1004c50:	00d00934 	movhi	r3,16420
 1004c54:	a80b883a 	mov	r5,r21
 1004c58:	180f883a 	mov	r7,r3
 1004c5c:	a009883a 	mov	r4,r20
 1004c60:	100d883a 	mov	r6,r2
 1004c64:	100971c0 	call	100971c <__muldf3>
 1004c68:	b1000044 	addi	r4,r22,1
 1004c6c:	1021883a 	mov	r16,r2
 1004c70:	1823883a 	mov	r17,r3
 1004c74:	1000c140 	call	1000c14 <__floatsidf>
 1004c78:	880b883a 	mov	r5,r17
 1004c7c:	8009883a 	mov	r4,r16
 1004c80:	180f883a 	mov	r7,r3
 1004c84:	100d883a 	mov	r6,r2
 1004c88:	100971c0 	call	100971c <__muldf3>
 1004c8c:	0011883a 	mov	r8,zero
 1004c90:	02500734 	movhi	r9,16412
 1004c94:	180b883a 	mov	r5,r3
 1004c98:	480f883a 	mov	r7,r9
 1004c9c:	1009883a 	mov	r4,r2
 1004ca0:	400d883a 	mov	r6,r8
 1004ca4:	10096a80 	call	10096a8 <__adddf3>
 1004ca8:	102d883a 	mov	r22,r2
 1004cac:	00bf3034 	movhi	r2,64704
 1004cb0:	10ef883a 	add	r23,r2,r3
 1004cb4:	d8800d17 	ldw	r2,52(sp)
 1004cb8:	d8c00e17 	ldw	r3,56(sp)
 1004cbc:	8029883a 	mov	r20,r16
 1004cc0:	10bfffc4 	addi	r2,r2,-1
 1004cc4:	882b883a 	mov	r21,r17
 1004cc8:	d8800415 	stw	r2,16(sp)
 1004ccc:	d8c00315 	stw	r3,12(sp)
 1004cd0:	003e8306 	br	10046e0 <_dtoa_r+0xf4c>
 1004cd4:	d8800117 	ldw	r2,4(sp)
 1004cd8:	dc001117 	ldw	r16,68(sp)
 1004cdc:	dc801017 	ldw	r18,64(sp)
 1004ce0:	00c00d84 	movi	r3,54
 1004ce4:	1887c83a 	sub	r3,r3,r2
 1004ce8:	003d6906 	br	1004290 <_dtoa_r+0xafc>
 1004cec:	01800044 	movi	r6,1
 1004cf0:	3021883a 	mov	r16,r6
 1004cf4:	d9800f15 	stw	r6,60(sp)
 1004cf8:	d9802615 	stw	r6,152(sp)
 1004cfc:	d9800e15 	stw	r6,56(sp)
 1004d00:	003b9306 	br	1003b50 <_dtoa_r+0x3bc>
 1004d04:	b021883a 	mov	r16,r22
 1004d08:	dd800f15 	stw	r22,60(sp)
 1004d0c:	003b9006 	br	1003b50 <_dtoa_r+0x3bc>
 1004d10:	103e221e 	bne	r2,zero,100459c <_dtoa_r+0xe08>
 1004d14:	b880004c 	andi	r2,r23,1
 1004d18:	1005003a 	cmpeq	r2,r2,zero
 1004d1c:	103e1f1e 	bne	r2,zero,100459c <_dtoa_r+0xe08>
 1004d20:	003e1b06 	br	1004590 <_dtoa_r+0xdfc>
 1004d24:	d9001617 	ldw	r4,88(sp)
 1004d28:	980b883a 	mov	r5,r19
 1004d2c:	01800284 	movi	r6,10
 1004d30:	000f883a 	mov	r7,zero
 1004d34:	10075dc0 	call	10075dc <__multadd>
 1004d38:	d8c00e17 	ldw	r3,56(sp)
 1004d3c:	1027883a 	mov	r19,r2
 1004d40:	d8c00f15 	stw	r3,60(sp)
 1004d44:	003cd306 	br	1004094 <_dtoa_r+0x900>

01004d48 <_fflush_r>:
 1004d48:	defffb04 	addi	sp,sp,-20
 1004d4c:	dcc00315 	stw	r19,12(sp)
 1004d50:	dc800215 	stw	r18,8(sp)
 1004d54:	dfc00415 	stw	ra,16(sp)
 1004d58:	dc400115 	stw	r17,4(sp)
 1004d5c:	dc000015 	stw	r16,0(sp)
 1004d60:	2027883a 	mov	r19,r4
 1004d64:	2825883a 	mov	r18,r5
 1004d68:	20000226 	beq	r4,zero,1004d74 <_fflush_r+0x2c>
 1004d6c:	20800e17 	ldw	r2,56(r4)
 1004d70:	10005626 	beq	r2,zero,1004ecc <_fflush_r+0x184>
 1004d74:	9100030b 	ldhu	r4,12(r18)
 1004d78:	20ffffcc 	andi	r3,r4,65535
 1004d7c:	18e0001c 	xori	r3,r3,32768
 1004d80:	18e00004 	addi	r3,r3,-32768
 1004d84:	1880020c 	andi	r2,r3,8
 1004d88:	1000261e 	bne	r2,zero,1004e24 <_fflush_r+0xdc>
 1004d8c:	90c00117 	ldw	r3,4(r18)
 1004d90:	20820014 	ori	r2,r4,2048
 1004d94:	9080030d 	sth	r2,12(r18)
 1004d98:	1009883a 	mov	r4,r2
 1004d9c:	00c0400e 	bge	zero,r3,1004ea0 <_fflush_r+0x158>
 1004da0:	92000a17 	ldw	r8,40(r18)
 1004da4:	40004026 	beq	r8,zero,1004ea8 <_fflush_r+0x160>
 1004da8:	2084000c 	andi	r2,r4,4096
 1004dac:	10005326 	beq	r2,zero,1004efc <_fflush_r+0x1b4>
 1004db0:	94001417 	ldw	r16,80(r18)
 1004db4:	9080030b 	ldhu	r2,12(r18)
 1004db8:	1080010c 	andi	r2,r2,4
 1004dbc:	1000481e 	bne	r2,zero,1004ee0 <_fflush_r+0x198>
 1004dc0:	91400717 	ldw	r5,28(r18)
 1004dc4:	9809883a 	mov	r4,r19
 1004dc8:	800d883a 	mov	r6,r16
 1004dcc:	000f883a 	mov	r7,zero
 1004dd0:	403ee83a 	callr	r8
 1004dd4:	8080261e 	bne	r16,r2,1004e70 <_fflush_r+0x128>
 1004dd8:	9080030b 	ldhu	r2,12(r18)
 1004ddc:	91000417 	ldw	r4,16(r18)
 1004de0:	90000115 	stw	zero,4(r18)
 1004de4:	10bdffcc 	andi	r2,r2,63487
 1004de8:	10ffffcc 	andi	r3,r2,65535
 1004dec:	18c4000c 	andi	r3,r3,4096
 1004df0:	9080030d 	sth	r2,12(r18)
 1004df4:	91000015 	stw	r4,0(r18)
 1004df8:	18002b26 	beq	r3,zero,1004ea8 <_fflush_r+0x160>
 1004dfc:	0007883a 	mov	r3,zero
 1004e00:	1805883a 	mov	r2,r3
 1004e04:	94001415 	stw	r16,80(r18)
 1004e08:	dfc00417 	ldw	ra,16(sp)
 1004e0c:	dcc00317 	ldw	r19,12(sp)
 1004e10:	dc800217 	ldw	r18,8(sp)
 1004e14:	dc400117 	ldw	r17,4(sp)
 1004e18:	dc000017 	ldw	r16,0(sp)
 1004e1c:	dec00504 	addi	sp,sp,20
 1004e20:	f800283a 	ret
 1004e24:	94400417 	ldw	r17,16(r18)
 1004e28:	88001f26 	beq	r17,zero,1004ea8 <_fflush_r+0x160>
 1004e2c:	90800017 	ldw	r2,0(r18)
 1004e30:	18c000cc 	andi	r3,r3,3
 1004e34:	94400015 	stw	r17,0(r18)
 1004e38:	1461c83a 	sub	r16,r2,r17
 1004e3c:	18002526 	beq	r3,zero,1004ed4 <_fflush_r+0x18c>
 1004e40:	0005883a 	mov	r2,zero
 1004e44:	90800215 	stw	r2,8(r18)
 1004e48:	0400170e 	bge	zero,r16,1004ea8 <_fflush_r+0x160>
 1004e4c:	90c00917 	ldw	r3,36(r18)
 1004e50:	91400717 	ldw	r5,28(r18)
 1004e54:	880d883a 	mov	r6,r17
 1004e58:	800f883a 	mov	r7,r16
 1004e5c:	9809883a 	mov	r4,r19
 1004e60:	183ee83a 	callr	r3
 1004e64:	88a3883a 	add	r17,r17,r2
 1004e68:	80a1c83a 	sub	r16,r16,r2
 1004e6c:	00bff616 	blt	zero,r2,1004e48 <_fflush_r+0x100>
 1004e70:	9080030b 	ldhu	r2,12(r18)
 1004e74:	00ffffc4 	movi	r3,-1
 1004e78:	10801014 	ori	r2,r2,64
 1004e7c:	9080030d 	sth	r2,12(r18)
 1004e80:	1805883a 	mov	r2,r3
 1004e84:	dfc00417 	ldw	ra,16(sp)
 1004e88:	dcc00317 	ldw	r19,12(sp)
 1004e8c:	dc800217 	ldw	r18,8(sp)
 1004e90:	dc400117 	ldw	r17,4(sp)
 1004e94:	dc000017 	ldw	r16,0(sp)
 1004e98:	dec00504 	addi	sp,sp,20
 1004e9c:	f800283a 	ret
 1004ea0:	90800f17 	ldw	r2,60(r18)
 1004ea4:	00bfbe16 	blt	zero,r2,1004da0 <_fflush_r+0x58>
 1004ea8:	0007883a 	mov	r3,zero
 1004eac:	1805883a 	mov	r2,r3
 1004eb0:	dfc00417 	ldw	ra,16(sp)
 1004eb4:	dcc00317 	ldw	r19,12(sp)
 1004eb8:	dc800217 	ldw	r18,8(sp)
 1004ebc:	dc400117 	ldw	r17,4(sp)
 1004ec0:	dc000017 	ldw	r16,0(sp)
 1004ec4:	dec00504 	addi	sp,sp,20
 1004ec8:	f800283a 	ret
 1004ecc:	1004fe00 	call	1004fe0 <__sinit>
 1004ed0:	003fa806 	br	1004d74 <_fflush_r+0x2c>
 1004ed4:	90800517 	ldw	r2,20(r18)
 1004ed8:	90800215 	stw	r2,8(r18)
 1004edc:	003fda06 	br	1004e48 <_fflush_r+0x100>
 1004ee0:	90800117 	ldw	r2,4(r18)
 1004ee4:	90c00c17 	ldw	r3,48(r18)
 1004ee8:	80a1c83a 	sub	r16,r16,r2
 1004eec:	183fb426 	beq	r3,zero,1004dc0 <_fflush_r+0x78>
 1004ef0:	90800f17 	ldw	r2,60(r18)
 1004ef4:	80a1c83a 	sub	r16,r16,r2
 1004ef8:	003fb106 	br	1004dc0 <_fflush_r+0x78>
 1004efc:	91400717 	ldw	r5,28(r18)
 1004f00:	9809883a 	mov	r4,r19
 1004f04:	000d883a 	mov	r6,zero
 1004f08:	01c00044 	movi	r7,1
 1004f0c:	403ee83a 	callr	r8
 1004f10:	1021883a 	mov	r16,r2
 1004f14:	00bfffc4 	movi	r2,-1
 1004f18:	80800226 	beq	r16,r2,1004f24 <_fflush_r+0x1dc>
 1004f1c:	92000a17 	ldw	r8,40(r18)
 1004f20:	003fa406 	br	1004db4 <_fflush_r+0x6c>
 1004f24:	98c00017 	ldw	r3,0(r19)
 1004f28:	00800744 	movi	r2,29
 1004f2c:	18bfde26 	beq	r3,r2,1004ea8 <_fflush_r+0x160>
 1004f30:	9080030b 	ldhu	r2,12(r18)
 1004f34:	8007883a 	mov	r3,r16
 1004f38:	10801014 	ori	r2,r2,64
 1004f3c:	9080030d 	sth	r2,12(r18)
 1004f40:	003fcf06 	br	1004e80 <_fflush_r+0x138>

01004f44 <fflush>:
 1004f44:	01404034 	movhi	r5,256
 1004f48:	29535204 	addi	r5,r5,19784
 1004f4c:	2007883a 	mov	r3,r4
 1004f50:	20000526 	beq	r4,zero,1004f68 <fflush+0x24>
 1004f54:	00804074 	movhi	r2,257
 1004f58:	10bc3704 	addi	r2,r2,-3876
 1004f5c:	11000017 	ldw	r4,0(r2)
 1004f60:	180b883a 	mov	r5,r3
 1004f64:	1004d481 	jmpi	1004d48 <_fflush_r>
 1004f68:	00804074 	movhi	r2,257
 1004f6c:	10bc3804 	addi	r2,r2,-3872
 1004f70:	11000017 	ldw	r4,0(r2)
 1004f74:	1005b141 	jmpi	1005b14 <_fwalk_reent>

01004f78 <std>:
 1004f78:	00804034 	movhi	r2,256
 1004f7c:	109ffc04 	addi	r2,r2,32752
 1004f80:	20800b15 	stw	r2,44(r4)
 1004f84:	00804074 	movhi	r2,257
 1004f88:	10a03704 	addi	r2,r2,-32548
 1004f8c:	20800815 	stw	r2,32(r4)
 1004f90:	00c04074 	movhi	r3,257
 1004f94:	18e01804 	addi	r3,r3,-32672
 1004f98:	00804034 	movhi	r2,256
 1004f9c:	109ffe04 	addi	r2,r2,32760
 1004fa0:	2140030d 	sth	r5,12(r4)
 1004fa4:	2180038d 	sth	r6,14(r4)
 1004fa8:	20c00915 	stw	r3,36(r4)
 1004fac:	20800a15 	stw	r2,40(r4)
 1004fb0:	20000015 	stw	zero,0(r4)
 1004fb4:	20000115 	stw	zero,4(r4)
 1004fb8:	20000215 	stw	zero,8(r4)
 1004fbc:	20000415 	stw	zero,16(r4)
 1004fc0:	20000515 	stw	zero,20(r4)
 1004fc4:	20000615 	stw	zero,24(r4)
 1004fc8:	21000715 	stw	r4,28(r4)
 1004fcc:	f800283a 	ret

01004fd0 <__sfp_lock_acquire>:
 1004fd0:	f800283a 	ret

01004fd4 <__sfp_lock_release>:
 1004fd4:	f800283a 	ret

01004fd8 <__sinit_lock_acquire>:
 1004fd8:	f800283a 	ret

01004fdc <__sinit_lock_release>:
 1004fdc:	f800283a 	ret

01004fe0 <__sinit>:
 1004fe0:	20800e17 	ldw	r2,56(r4)
 1004fe4:	defffd04 	addi	sp,sp,-12
 1004fe8:	dc400115 	stw	r17,4(sp)
 1004fec:	dc000015 	stw	r16,0(sp)
 1004ff0:	dfc00215 	stw	ra,8(sp)
 1004ff4:	04400044 	movi	r17,1
 1004ff8:	01400104 	movi	r5,4
 1004ffc:	000d883a 	mov	r6,zero
 1005000:	2021883a 	mov	r16,r4
 1005004:	2200bb04 	addi	r8,r4,748
 1005008:	200f883a 	mov	r7,r4
 100500c:	10000526 	beq	r2,zero,1005024 <__sinit+0x44>
 1005010:	dfc00217 	ldw	ra,8(sp)
 1005014:	dc400117 	ldw	r17,4(sp)
 1005018:	dc000017 	ldw	r16,0(sp)
 100501c:	dec00304 	addi	sp,sp,12
 1005020:	f800283a 	ret
 1005024:	21000117 	ldw	r4,4(r4)
 1005028:	00804034 	movhi	r2,256
 100502c:	10943104 	addi	r2,r2,20676
 1005030:	00c000c4 	movi	r3,3
 1005034:	80800f15 	stw	r2,60(r16)
 1005038:	80c0b915 	stw	r3,740(r16)
 100503c:	8200ba15 	stw	r8,744(r16)
 1005040:	84400e15 	stw	r17,56(r16)
 1005044:	8000b815 	stw	zero,736(r16)
 1005048:	1004f780 	call	1004f78 <std>
 100504c:	81000217 	ldw	r4,8(r16)
 1005050:	880d883a 	mov	r6,r17
 1005054:	800f883a 	mov	r7,r16
 1005058:	01400284 	movi	r5,10
 100505c:	1004f780 	call	1004f78 <std>
 1005060:	81000317 	ldw	r4,12(r16)
 1005064:	800f883a 	mov	r7,r16
 1005068:	01400484 	movi	r5,18
 100506c:	01800084 	movi	r6,2
 1005070:	dfc00217 	ldw	ra,8(sp)
 1005074:	dc400117 	ldw	r17,4(sp)
 1005078:	dc000017 	ldw	r16,0(sp)
 100507c:	dec00304 	addi	sp,sp,12
 1005080:	1004f781 	jmpi	1004f78 <std>

01005084 <__fp_lock>:
 1005084:	0005883a 	mov	r2,zero
 1005088:	f800283a 	ret

0100508c <__fp_unlock>:
 100508c:	0005883a 	mov	r2,zero
 1005090:	f800283a 	ret

01005094 <__fp_unlock_all>:
 1005094:	00804074 	movhi	r2,257
 1005098:	10bc3704 	addi	r2,r2,-3876
 100509c:	11000017 	ldw	r4,0(r2)
 10050a0:	01404034 	movhi	r5,256
 10050a4:	29542304 	addi	r5,r5,20620
 10050a8:	1005bdc1 	jmpi	1005bdc <_fwalk>

010050ac <__fp_lock_all>:
 10050ac:	00804074 	movhi	r2,257
 10050b0:	10bc3704 	addi	r2,r2,-3876
 10050b4:	11000017 	ldw	r4,0(r2)
 10050b8:	01404034 	movhi	r5,256
 10050bc:	29542104 	addi	r5,r5,20612
 10050c0:	1005bdc1 	jmpi	1005bdc <_fwalk>

010050c4 <_cleanup_r>:
 10050c4:	01404074 	movhi	r5,257
 10050c8:	29612904 	addi	r5,r5,-31580
 10050cc:	1005bdc1 	jmpi	1005bdc <_fwalk>

010050d0 <_cleanup>:
 10050d0:	00804074 	movhi	r2,257
 10050d4:	10bc3804 	addi	r2,r2,-3872
 10050d8:	11000017 	ldw	r4,0(r2)
 10050dc:	10050c41 	jmpi	10050c4 <_cleanup_r>

010050e0 <__sfmoreglue>:
 10050e0:	defffc04 	addi	sp,sp,-16
 10050e4:	dc400115 	stw	r17,4(sp)
 10050e8:	2c401724 	muli	r17,r5,92
 10050ec:	dc800215 	stw	r18,8(sp)
 10050f0:	2825883a 	mov	r18,r5
 10050f4:	89400304 	addi	r5,r17,12
 10050f8:	dc000015 	stw	r16,0(sp)
 10050fc:	dfc00315 	stw	ra,12(sp)
 1005100:	1005eec0 	call	1005eec <_malloc_r>
 1005104:	0021883a 	mov	r16,zero
 1005108:	880d883a 	mov	r6,r17
 100510c:	000b883a 	mov	r5,zero
 1005110:	10000626 	beq	r2,zero,100512c <__sfmoreglue+0x4c>
 1005114:	11000304 	addi	r4,r2,12
 1005118:	14800115 	stw	r18,4(r2)
 100511c:	10000015 	stw	zero,0(r2)
 1005120:	11000215 	stw	r4,8(r2)
 1005124:	1021883a 	mov	r16,r2
 1005128:	10068900 	call	1006890 <memset>
 100512c:	8005883a 	mov	r2,r16
 1005130:	dfc00317 	ldw	ra,12(sp)
 1005134:	dc800217 	ldw	r18,8(sp)
 1005138:	dc400117 	ldw	r17,4(sp)
 100513c:	dc000017 	ldw	r16,0(sp)
 1005140:	dec00404 	addi	sp,sp,16
 1005144:	f800283a 	ret

01005148 <__sfp>:
 1005148:	defffd04 	addi	sp,sp,-12
 100514c:	00804074 	movhi	r2,257
 1005150:	10bc3804 	addi	r2,r2,-3872
 1005154:	dc000015 	stw	r16,0(sp)
 1005158:	14000017 	ldw	r16,0(r2)
 100515c:	dc400115 	stw	r17,4(sp)
 1005160:	dfc00215 	stw	ra,8(sp)
 1005164:	80800e17 	ldw	r2,56(r16)
 1005168:	2023883a 	mov	r17,r4
 100516c:	10002626 	beq	r2,zero,1005208 <__sfp+0xc0>
 1005170:	8400b804 	addi	r16,r16,736
 1005174:	80800117 	ldw	r2,4(r16)
 1005178:	81000217 	ldw	r4,8(r16)
 100517c:	10ffffc4 	addi	r3,r2,-1
 1005180:	18000916 	blt	r3,zero,10051a8 <__sfp+0x60>
 1005184:	2080030f 	ldh	r2,12(r4)
 1005188:	10000b26 	beq	r2,zero,10051b8 <__sfp+0x70>
 100518c:	017fffc4 	movi	r5,-1
 1005190:	00000206 	br	100519c <__sfp+0x54>
 1005194:	2080030f 	ldh	r2,12(r4)
 1005198:	10000726 	beq	r2,zero,10051b8 <__sfp+0x70>
 100519c:	18ffffc4 	addi	r3,r3,-1
 10051a0:	21001704 	addi	r4,r4,92
 10051a4:	197ffb1e 	bne	r3,r5,1005194 <__sfp+0x4c>
 10051a8:	80800017 	ldw	r2,0(r16)
 10051ac:	10001926 	beq	r2,zero,1005214 <__sfp+0xcc>
 10051b0:	1021883a 	mov	r16,r2
 10051b4:	003fef06 	br	1005174 <__sfp+0x2c>
 10051b8:	00bfffc4 	movi	r2,-1
 10051bc:	00c00044 	movi	r3,1
 10051c0:	2080038d 	sth	r2,14(r4)
 10051c4:	20c0030d 	sth	r3,12(r4)
 10051c8:	20000015 	stw	zero,0(r4)
 10051cc:	20000215 	stw	zero,8(r4)
 10051d0:	20000115 	stw	zero,4(r4)
 10051d4:	20000415 	stw	zero,16(r4)
 10051d8:	20000515 	stw	zero,20(r4)
 10051dc:	20000615 	stw	zero,24(r4)
 10051e0:	20000c15 	stw	zero,48(r4)
 10051e4:	20000d15 	stw	zero,52(r4)
 10051e8:	20001115 	stw	zero,68(r4)
 10051ec:	20001215 	stw	zero,72(r4)
 10051f0:	2005883a 	mov	r2,r4
 10051f4:	dfc00217 	ldw	ra,8(sp)
 10051f8:	dc400117 	ldw	r17,4(sp)
 10051fc:	dc000017 	ldw	r16,0(sp)
 1005200:	dec00304 	addi	sp,sp,12
 1005204:	f800283a 	ret
 1005208:	8009883a 	mov	r4,r16
 100520c:	1004fe00 	call	1004fe0 <__sinit>
 1005210:	003fd706 	br	1005170 <__sfp+0x28>
 1005214:	8809883a 	mov	r4,r17
 1005218:	01400104 	movi	r5,4
 100521c:	10050e00 	call	10050e0 <__sfmoreglue>
 1005220:	80800015 	stw	r2,0(r16)
 1005224:	103fe21e 	bne	r2,zero,10051b0 <__sfp+0x68>
 1005228:	00800304 	movi	r2,12
 100522c:	0009883a 	mov	r4,zero
 1005230:	88800015 	stw	r2,0(r17)
 1005234:	003fee06 	br	10051f0 <__sfp+0xa8>

01005238 <_malloc_trim_r>:
 1005238:	defffb04 	addi	sp,sp,-20
 100523c:	dcc00315 	stw	r19,12(sp)
 1005240:	04c04074 	movhi	r19,257
 1005244:	9cf69204 	addi	r19,r19,-9656
 1005248:	dc800215 	stw	r18,8(sp)
 100524c:	dc400115 	stw	r17,4(sp)
 1005250:	dc000015 	stw	r16,0(sp)
 1005254:	2823883a 	mov	r17,r5
 1005258:	2025883a 	mov	r18,r4
 100525c:	dfc00415 	stw	ra,16(sp)
 1005260:	100a6740 	call	100a674 <__malloc_lock>
 1005264:	98800217 	ldw	r2,8(r19)
 1005268:	9009883a 	mov	r4,r18
 100526c:	000b883a 	mov	r5,zero
 1005270:	10c00117 	ldw	r3,4(r2)
 1005274:	00bfff04 	movi	r2,-4
 1005278:	18a0703a 	and	r16,r3,r2
 100527c:	8463c83a 	sub	r17,r16,r17
 1005280:	8c43fbc4 	addi	r17,r17,4079
 1005284:	8822d33a 	srli	r17,r17,12
 1005288:	0083ffc4 	movi	r2,4095
 100528c:	8c7fffc4 	addi	r17,r17,-1
 1005290:	8822933a 	slli	r17,r17,12
 1005294:	1440060e 	bge	r2,r17,10052b0 <_malloc_trim_r+0x78>
 1005298:	1007f800 	call	1007f80 <_sbrk_r>
 100529c:	98c00217 	ldw	r3,8(r19)
 10052a0:	9009883a 	mov	r4,r18
 10052a4:	044bc83a 	sub	r5,zero,r17
 10052a8:	80c7883a 	add	r3,r16,r3
 10052ac:	10c00926 	beq	r2,r3,10052d4 <_malloc_trim_r+0x9c>
 10052b0:	100a6940 	call	100a694 <__malloc_unlock>
 10052b4:	0005883a 	mov	r2,zero
 10052b8:	dfc00417 	ldw	ra,16(sp)
 10052bc:	dcc00317 	ldw	r19,12(sp)
 10052c0:	dc800217 	ldw	r18,8(sp)
 10052c4:	dc400117 	ldw	r17,4(sp)
 10052c8:	dc000017 	ldw	r16,0(sp)
 10052cc:	dec00504 	addi	sp,sp,20
 10052d0:	f800283a 	ret
 10052d4:	9009883a 	mov	r4,r18
 10052d8:	1007f800 	call	1007f80 <_sbrk_r>
 10052dc:	844dc83a 	sub	r6,r16,r17
 10052e0:	00ffffc4 	movi	r3,-1
 10052e4:	9009883a 	mov	r4,r18
 10052e8:	000b883a 	mov	r5,zero
 10052ec:	01c04074 	movhi	r7,257
 10052f0:	39c30c04 	addi	r7,r7,3120
 10052f4:	31800054 	ori	r6,r6,1
 10052f8:	10c00926 	beq	r2,r3,1005320 <_malloc_trim_r+0xe8>
 10052fc:	38800017 	ldw	r2,0(r7)
 1005300:	98c00217 	ldw	r3,8(r19)
 1005304:	9009883a 	mov	r4,r18
 1005308:	1445c83a 	sub	r2,r2,r17
 100530c:	38800015 	stw	r2,0(r7)
 1005310:	19800115 	stw	r6,4(r3)
 1005314:	100a6940 	call	100a694 <__malloc_unlock>
 1005318:	00800044 	movi	r2,1
 100531c:	003fe606 	br	10052b8 <_malloc_trim_r+0x80>
 1005320:	1007f800 	call	1007f80 <_sbrk_r>
 1005324:	99800217 	ldw	r6,8(r19)
 1005328:	100f883a 	mov	r7,r2
 100532c:	9009883a 	mov	r4,r18
 1005330:	1187c83a 	sub	r3,r2,r6
 1005334:	008003c4 	movi	r2,15
 1005338:	19400054 	ori	r5,r3,1
 100533c:	10ffdc0e 	bge	r2,r3,10052b0 <_malloc_trim_r+0x78>
 1005340:	00804074 	movhi	r2,257
 1005344:	10bc3c04 	addi	r2,r2,-3856
 1005348:	10c00017 	ldw	r3,0(r2)
 100534c:	00804074 	movhi	r2,257
 1005350:	10830c04 	addi	r2,r2,3120
 1005354:	31400115 	stw	r5,4(r6)
 1005358:	38c7c83a 	sub	r3,r7,r3
 100535c:	10c00015 	stw	r3,0(r2)
 1005360:	003fd306 	br	10052b0 <_malloc_trim_r+0x78>

01005364 <_free_r>:
 1005364:	defffd04 	addi	sp,sp,-12
 1005368:	dc400115 	stw	r17,4(sp)
 100536c:	dc000015 	stw	r16,0(sp)
 1005370:	dfc00215 	stw	ra,8(sp)
 1005374:	2821883a 	mov	r16,r5
 1005378:	2023883a 	mov	r17,r4
 100537c:	28005a26 	beq	r5,zero,10054e8 <_free_r+0x184>
 1005380:	100a6740 	call	100a674 <__malloc_lock>
 1005384:	823ffe04 	addi	r8,r16,-8
 1005388:	41400117 	ldw	r5,4(r8)
 100538c:	00bfff84 	movi	r2,-2
 1005390:	02804074 	movhi	r10,257
 1005394:	52b69204 	addi	r10,r10,-9656
 1005398:	288e703a 	and	r7,r5,r2
 100539c:	41cd883a 	add	r6,r8,r7
 10053a0:	30c00117 	ldw	r3,4(r6)
 10053a4:	51000217 	ldw	r4,8(r10)
 10053a8:	00bfff04 	movi	r2,-4
 10053ac:	1892703a 	and	r9,r3,r2
 10053b0:	5017883a 	mov	r11,r10
 10053b4:	31006726 	beq	r6,r4,1005554 <_free_r+0x1f0>
 10053b8:	2880004c 	andi	r2,r5,1
 10053bc:	1005003a 	cmpeq	r2,r2,zero
 10053c0:	32400115 	stw	r9,4(r6)
 10053c4:	10001a1e 	bne	r2,zero,1005430 <_free_r+0xcc>
 10053c8:	000b883a 	mov	r5,zero
 10053cc:	3247883a 	add	r3,r6,r9
 10053d0:	18800117 	ldw	r2,4(r3)
 10053d4:	1080004c 	andi	r2,r2,1
 10053d8:	1000231e 	bne	r2,zero,1005468 <_free_r+0x104>
 10053dc:	280ac03a 	cmpne	r5,r5,zero
 10053e0:	3a4f883a 	add	r7,r7,r9
 10053e4:	2800451e 	bne	r5,zero,10054fc <_free_r+0x198>
 10053e8:	31000217 	ldw	r4,8(r6)
 10053ec:	00804074 	movhi	r2,257
 10053f0:	10b69404 	addi	r2,r2,-9648
 10053f4:	20807b26 	beq	r4,r2,10055e4 <_free_r+0x280>
 10053f8:	30800317 	ldw	r2,12(r6)
 10053fc:	3a07883a 	add	r3,r7,r8
 1005400:	19c00015 	stw	r7,0(r3)
 1005404:	11000215 	stw	r4,8(r2)
 1005408:	20800315 	stw	r2,12(r4)
 100540c:	38800054 	ori	r2,r7,1
 1005410:	40800115 	stw	r2,4(r8)
 1005414:	28001a26 	beq	r5,zero,1005480 <_free_r+0x11c>
 1005418:	8809883a 	mov	r4,r17
 100541c:	dfc00217 	ldw	ra,8(sp)
 1005420:	dc400117 	ldw	r17,4(sp)
 1005424:	dc000017 	ldw	r16,0(sp)
 1005428:	dec00304 	addi	sp,sp,12
 100542c:	100a6941 	jmpi	100a694 <__malloc_unlock>
 1005430:	80bffe17 	ldw	r2,-8(r16)
 1005434:	50c00204 	addi	r3,r10,8
 1005438:	4091c83a 	sub	r8,r8,r2
 100543c:	41000217 	ldw	r4,8(r8)
 1005440:	388f883a 	add	r7,r7,r2
 1005444:	20c06126 	beq	r4,r3,10055cc <_free_r+0x268>
 1005448:	40800317 	ldw	r2,12(r8)
 100544c:	3247883a 	add	r3,r6,r9
 1005450:	000b883a 	mov	r5,zero
 1005454:	11000215 	stw	r4,8(r2)
 1005458:	20800315 	stw	r2,12(r4)
 100545c:	18800117 	ldw	r2,4(r3)
 1005460:	1080004c 	andi	r2,r2,1
 1005464:	103fdd26 	beq	r2,zero,10053dc <_free_r+0x78>
 1005468:	38800054 	ori	r2,r7,1
 100546c:	3a07883a 	add	r3,r7,r8
 1005470:	280ac03a 	cmpne	r5,r5,zero
 1005474:	40800115 	stw	r2,4(r8)
 1005478:	19c00015 	stw	r7,0(r3)
 100547c:	283fe61e 	bne	r5,zero,1005418 <_free_r+0xb4>
 1005480:	00807fc4 	movi	r2,511
 1005484:	11c01f2e 	bgeu	r2,r7,1005504 <_free_r+0x1a0>
 1005488:	3806d27a 	srli	r3,r7,9
 100548c:	1800481e 	bne	r3,zero,10055b0 <_free_r+0x24c>
 1005490:	3804d0fa 	srli	r2,r7,3
 1005494:	100690fa 	slli	r3,r2,3
 1005498:	1acd883a 	add	r6,r3,r11
 100549c:	31400217 	ldw	r5,8(r6)
 10054a0:	31405926 	beq	r6,r5,1005608 <_free_r+0x2a4>
 10054a4:	28800117 	ldw	r2,4(r5)
 10054a8:	00ffff04 	movi	r3,-4
 10054ac:	10c4703a 	and	r2,r2,r3
 10054b0:	3880022e 	bgeu	r7,r2,10054bc <_free_r+0x158>
 10054b4:	29400217 	ldw	r5,8(r5)
 10054b8:	317ffa1e 	bne	r6,r5,10054a4 <_free_r+0x140>
 10054bc:	29800317 	ldw	r6,12(r5)
 10054c0:	41800315 	stw	r6,12(r8)
 10054c4:	41400215 	stw	r5,8(r8)
 10054c8:	8809883a 	mov	r4,r17
 10054cc:	2a000315 	stw	r8,12(r5)
 10054d0:	32000215 	stw	r8,8(r6)
 10054d4:	dfc00217 	ldw	ra,8(sp)
 10054d8:	dc400117 	ldw	r17,4(sp)
 10054dc:	dc000017 	ldw	r16,0(sp)
 10054e0:	dec00304 	addi	sp,sp,12
 10054e4:	100a6941 	jmpi	100a694 <__malloc_unlock>
 10054e8:	dfc00217 	ldw	ra,8(sp)
 10054ec:	dc400117 	ldw	r17,4(sp)
 10054f0:	dc000017 	ldw	r16,0(sp)
 10054f4:	dec00304 	addi	sp,sp,12
 10054f8:	f800283a 	ret
 10054fc:	31000217 	ldw	r4,8(r6)
 1005500:	003fbd06 	br	10053f8 <_free_r+0x94>
 1005504:	3806d0fa 	srli	r3,r7,3
 1005508:	00800044 	movi	r2,1
 100550c:	51400117 	ldw	r5,4(r10)
 1005510:	180890fa 	slli	r4,r3,3
 1005514:	1807d0ba 	srai	r3,r3,2
 1005518:	22c9883a 	add	r4,r4,r11
 100551c:	21800217 	ldw	r6,8(r4)
 1005520:	10c4983a 	sll	r2,r2,r3
 1005524:	41000315 	stw	r4,12(r8)
 1005528:	41800215 	stw	r6,8(r8)
 100552c:	288ab03a 	or	r5,r5,r2
 1005530:	22000215 	stw	r8,8(r4)
 1005534:	8809883a 	mov	r4,r17
 1005538:	51400115 	stw	r5,4(r10)
 100553c:	32000315 	stw	r8,12(r6)
 1005540:	dfc00217 	ldw	ra,8(sp)
 1005544:	dc400117 	ldw	r17,4(sp)
 1005548:	dc000017 	ldw	r16,0(sp)
 100554c:	dec00304 	addi	sp,sp,12
 1005550:	100a6941 	jmpi	100a694 <__malloc_unlock>
 1005554:	2880004c 	andi	r2,r5,1
 1005558:	3a4d883a 	add	r6,r7,r9
 100555c:	1000071e 	bne	r2,zero,100557c <_free_r+0x218>
 1005560:	80bffe17 	ldw	r2,-8(r16)
 1005564:	4091c83a 	sub	r8,r8,r2
 1005568:	41000317 	ldw	r4,12(r8)
 100556c:	40c00217 	ldw	r3,8(r8)
 1005570:	308d883a 	add	r6,r6,r2
 1005574:	20c00215 	stw	r3,8(r4)
 1005578:	19000315 	stw	r4,12(r3)
 100557c:	00804074 	movhi	r2,257
 1005580:	10bc3b04 	addi	r2,r2,-3860
 1005584:	11000017 	ldw	r4,0(r2)
 1005588:	30c00054 	ori	r3,r6,1
 100558c:	52000215 	stw	r8,8(r10)
 1005590:	40c00115 	stw	r3,4(r8)
 1005594:	313fa036 	bltu	r6,r4,1005418 <_free_r+0xb4>
 1005598:	00804074 	movhi	r2,257
 100559c:	10830204 	addi	r2,r2,3080
 10055a0:	11400017 	ldw	r5,0(r2)
 10055a4:	8809883a 	mov	r4,r17
 10055a8:	10052380 	call	1005238 <_malloc_trim_r>
 10055ac:	003f9a06 	br	1005418 <_free_r+0xb4>
 10055b0:	00800104 	movi	r2,4
 10055b4:	10c0072e 	bgeu	r2,r3,10055d4 <_free_r+0x270>
 10055b8:	00800504 	movi	r2,20
 10055bc:	10c01936 	bltu	r2,r3,1005624 <_free_r+0x2c0>
 10055c0:	188016c4 	addi	r2,r3,91
 10055c4:	100690fa 	slli	r3,r2,3
 10055c8:	003fb306 	br	1005498 <_free_r+0x134>
 10055cc:	01400044 	movi	r5,1
 10055d0:	003f7e06 	br	10053cc <_free_r+0x68>
 10055d4:	3804d1ba 	srli	r2,r7,6
 10055d8:	10800e04 	addi	r2,r2,56
 10055dc:	100690fa 	slli	r3,r2,3
 10055e0:	003fad06 	br	1005498 <_free_r+0x134>
 10055e4:	22000315 	stw	r8,12(r4)
 10055e8:	22000215 	stw	r8,8(r4)
 10055ec:	3a05883a 	add	r2,r7,r8
 10055f0:	38c00054 	ori	r3,r7,1
 10055f4:	11c00015 	stw	r7,0(r2)
 10055f8:	41000215 	stw	r4,8(r8)
 10055fc:	40c00115 	stw	r3,4(r8)
 1005600:	41000315 	stw	r4,12(r8)
 1005604:	003f8406 	br	1005418 <_free_r+0xb4>
 1005608:	1005d0ba 	srai	r2,r2,2
 100560c:	00c00044 	movi	r3,1
 1005610:	51000117 	ldw	r4,4(r10)
 1005614:	1886983a 	sll	r3,r3,r2
 1005618:	20c8b03a 	or	r4,r4,r3
 100561c:	51000115 	stw	r4,4(r10)
 1005620:	003fa706 	br	10054c0 <_free_r+0x15c>
 1005624:	00801504 	movi	r2,84
 1005628:	10c00436 	bltu	r2,r3,100563c <_free_r+0x2d8>
 100562c:	3804d33a 	srli	r2,r7,12
 1005630:	10801b84 	addi	r2,r2,110
 1005634:	100690fa 	slli	r3,r2,3
 1005638:	003f9706 	br	1005498 <_free_r+0x134>
 100563c:	00805504 	movi	r2,340
 1005640:	10c00436 	bltu	r2,r3,1005654 <_free_r+0x2f0>
 1005644:	3804d3fa 	srli	r2,r7,15
 1005648:	10801dc4 	addi	r2,r2,119
 100564c:	100690fa 	slli	r3,r2,3
 1005650:	003f9106 	br	1005498 <_free_r+0x134>
 1005654:	00815504 	movi	r2,1364
 1005658:	10c0032e 	bgeu	r2,r3,1005668 <_free_r+0x304>
 100565c:	00801f84 	movi	r2,126
 1005660:	00c0fc04 	movi	r3,1008
 1005664:	003f8c06 	br	1005498 <_free_r+0x134>
 1005668:	3804d4ba 	srli	r2,r7,18
 100566c:	10801f04 	addi	r2,r2,124
 1005670:	100690fa 	slli	r3,r2,3
 1005674:	003f8806 	br	1005498 <_free_r+0x134>

01005678 <__sfvwrite_r>:
 1005678:	30800217 	ldw	r2,8(r6)
 100567c:	defff504 	addi	sp,sp,-44
 1005680:	df000915 	stw	fp,36(sp)
 1005684:	dd800715 	stw	r22,28(sp)
 1005688:	dc800315 	stw	r18,12(sp)
 100568c:	dfc00a15 	stw	ra,40(sp)
 1005690:	ddc00815 	stw	r23,32(sp)
 1005694:	dd400615 	stw	r21,24(sp)
 1005698:	dd000515 	stw	r20,20(sp)
 100569c:	dcc00415 	stw	r19,16(sp)
 10056a0:	dc400215 	stw	r17,8(sp)
 10056a4:	dc000115 	stw	r16,4(sp)
 10056a8:	302d883a 	mov	r22,r6
 10056ac:	2039883a 	mov	fp,r4
 10056b0:	2825883a 	mov	r18,r5
 10056b4:	10001c26 	beq	r2,zero,1005728 <__sfvwrite_r+0xb0>
 10056b8:	29c0030b 	ldhu	r7,12(r5)
 10056bc:	3880020c 	andi	r2,r7,8
 10056c0:	10002726 	beq	r2,zero,1005760 <__sfvwrite_r+0xe8>
 10056c4:	28800417 	ldw	r2,16(r5)
 10056c8:	10002526 	beq	r2,zero,1005760 <__sfvwrite_r+0xe8>
 10056cc:	3880008c 	andi	r2,r7,2
 10056d0:	b5400017 	ldw	r21,0(r22)
 10056d4:	10002826 	beq	r2,zero,1005778 <__sfvwrite_r+0x100>
 10056d8:	0021883a 	mov	r16,zero
 10056dc:	0023883a 	mov	r17,zero
 10056e0:	880d883a 	mov	r6,r17
 10056e4:	e009883a 	mov	r4,fp
 10056e8:	00810004 	movi	r2,1024
 10056ec:	80006e26 	beq	r16,zero,10058a8 <__sfvwrite_r+0x230>
 10056f0:	800f883a 	mov	r7,r16
 10056f4:	91400717 	ldw	r5,28(r18)
 10056f8:	1400012e 	bgeu	r2,r16,1005700 <__sfvwrite_r+0x88>
 10056fc:	100f883a 	mov	r7,r2
 1005700:	90c00917 	ldw	r3,36(r18)
 1005704:	183ee83a 	callr	r3
 1005708:	1007883a 	mov	r3,r2
 100570c:	80a1c83a 	sub	r16,r16,r2
 1005710:	88a3883a 	add	r17,r17,r2
 1005714:	00806d0e 	bge	zero,r2,10058cc <__sfvwrite_r+0x254>
 1005718:	b0800217 	ldw	r2,8(r22)
 100571c:	10c5c83a 	sub	r2,r2,r3
 1005720:	b0800215 	stw	r2,8(r22)
 1005724:	103fee1e 	bne	r2,zero,10056e0 <__sfvwrite_r+0x68>
 1005728:	0009883a 	mov	r4,zero
 100572c:	2005883a 	mov	r2,r4
 1005730:	dfc00a17 	ldw	ra,40(sp)
 1005734:	df000917 	ldw	fp,36(sp)
 1005738:	ddc00817 	ldw	r23,32(sp)
 100573c:	dd800717 	ldw	r22,28(sp)
 1005740:	dd400617 	ldw	r21,24(sp)
 1005744:	dd000517 	ldw	r20,20(sp)
 1005748:	dcc00417 	ldw	r19,16(sp)
 100574c:	dc800317 	ldw	r18,12(sp)
 1005750:	dc400217 	ldw	r17,8(sp)
 1005754:	dc000117 	ldw	r16,4(sp)
 1005758:	dec00b04 	addi	sp,sp,44
 100575c:	f800283a 	ret
 1005760:	10034400 	call	1003440 <__swsetup_r>
 1005764:	1000e41e 	bne	r2,zero,1005af8 <__sfvwrite_r+0x480>
 1005768:	91c0030b 	ldhu	r7,12(r18)
 100576c:	b5400017 	ldw	r21,0(r22)
 1005770:	3880008c 	andi	r2,r7,2
 1005774:	103fd81e 	bne	r2,zero,10056d8 <__sfvwrite_r+0x60>
 1005778:	3880004c 	andi	r2,r7,1
 100577c:	1005003a 	cmpeq	r2,r2,zero
 1005780:	10005726 	beq	r2,zero,10058e0 <__sfvwrite_r+0x268>
 1005784:	0029883a 	mov	r20,zero
 1005788:	002f883a 	mov	r23,zero
 100578c:	a0004226 	beq	r20,zero,1005898 <__sfvwrite_r+0x220>
 1005790:	3880800c 	andi	r2,r7,512
 1005794:	94000217 	ldw	r16,8(r18)
 1005798:	10008b26 	beq	r2,zero,10059c8 <__sfvwrite_r+0x350>
 100579c:	800d883a 	mov	r6,r16
 10057a0:	a400a536 	bltu	r20,r16,1005a38 <__sfvwrite_r+0x3c0>
 10057a4:	3881200c 	andi	r2,r7,1152
 10057a8:	10002726 	beq	r2,zero,1005848 <__sfvwrite_r+0x1d0>
 10057ac:	90800517 	ldw	r2,20(r18)
 10057b0:	92000417 	ldw	r8,16(r18)
 10057b4:	91400017 	ldw	r5,0(r18)
 10057b8:	1087883a 	add	r3,r2,r2
 10057bc:	1887883a 	add	r3,r3,r2
 10057c0:	1808d7fa 	srli	r4,r3,31
 10057c4:	2a21c83a 	sub	r16,r5,r8
 10057c8:	80800044 	addi	r2,r16,1
 10057cc:	20c9883a 	add	r4,r4,r3
 10057d0:	2027d07a 	srai	r19,r4,1
 10057d4:	a085883a 	add	r2,r20,r2
 10057d8:	980d883a 	mov	r6,r19
 10057dc:	9880022e 	bgeu	r19,r2,10057e8 <__sfvwrite_r+0x170>
 10057e0:	1027883a 	mov	r19,r2
 10057e4:	100d883a 	mov	r6,r2
 10057e8:	3881000c 	andi	r2,r7,1024
 10057ec:	1000b826 	beq	r2,zero,1005ad0 <__sfvwrite_r+0x458>
 10057f0:	300b883a 	mov	r5,r6
 10057f4:	e009883a 	mov	r4,fp
 10057f8:	1005eec0 	call	1005eec <_malloc_r>
 10057fc:	10003126 	beq	r2,zero,10058c4 <__sfvwrite_r+0x24c>
 1005800:	91400417 	ldw	r5,16(r18)
 1005804:	1009883a 	mov	r4,r2
 1005808:	800d883a 	mov	r6,r16
 100580c:	1023883a 	mov	r17,r2
 1005810:	10067100 	call	1006710 <memcpy>
 1005814:	90c0030b 	ldhu	r3,12(r18)
 1005818:	00beffc4 	movi	r2,-1025
 100581c:	1886703a 	and	r3,r3,r2
 1005820:	18c02014 	ori	r3,r3,128
 1005824:	90c0030d 	sth	r3,12(r18)
 1005828:	9c07c83a 	sub	r3,r19,r16
 100582c:	8c05883a 	add	r2,r17,r16
 1005830:	a00d883a 	mov	r6,r20
 1005834:	a021883a 	mov	r16,r20
 1005838:	90800015 	stw	r2,0(r18)
 100583c:	90c00215 	stw	r3,8(r18)
 1005840:	94400415 	stw	r17,16(r18)
 1005844:	94c00515 	stw	r19,20(r18)
 1005848:	91000017 	ldw	r4,0(r18)
 100584c:	b80b883a 	mov	r5,r23
 1005850:	a023883a 	mov	r17,r20
 1005854:	10067b00 	call	10067b0 <memmove>
 1005858:	90c00217 	ldw	r3,8(r18)
 100585c:	90800017 	ldw	r2,0(r18)
 1005860:	a027883a 	mov	r19,r20
 1005864:	1c07c83a 	sub	r3,r3,r16
 1005868:	1405883a 	add	r2,r2,r16
 100586c:	90c00215 	stw	r3,8(r18)
 1005870:	a021883a 	mov	r16,r20
 1005874:	90800015 	stw	r2,0(r18)
 1005878:	b0800217 	ldw	r2,8(r22)
 100587c:	1405c83a 	sub	r2,r2,r16
 1005880:	b0800215 	stw	r2,8(r22)
 1005884:	103fa826 	beq	r2,zero,1005728 <__sfvwrite_r+0xb0>
 1005888:	a469c83a 	sub	r20,r20,r17
 100588c:	91c0030b 	ldhu	r7,12(r18)
 1005890:	bcef883a 	add	r23,r23,r19
 1005894:	a03fbe1e 	bne	r20,zero,1005790 <__sfvwrite_r+0x118>
 1005898:	adc00017 	ldw	r23,0(r21)
 100589c:	ad000117 	ldw	r20,4(r21)
 10058a0:	ad400204 	addi	r21,r21,8
 10058a4:	003fb906 	br	100578c <__sfvwrite_r+0x114>
 10058a8:	ac400017 	ldw	r17,0(r21)
 10058ac:	ac000117 	ldw	r16,4(r21)
 10058b0:	ad400204 	addi	r21,r21,8
 10058b4:	003f8a06 	br	10056e0 <__sfvwrite_r+0x68>
 10058b8:	91400417 	ldw	r5,16(r18)
 10058bc:	e009883a 	mov	r4,fp
 10058c0:	10053640 	call	1005364 <_free_r>
 10058c4:	00800304 	movi	r2,12
 10058c8:	e0800015 	stw	r2,0(fp)
 10058cc:	9080030b 	ldhu	r2,12(r18)
 10058d0:	013fffc4 	movi	r4,-1
 10058d4:	10801014 	ori	r2,r2,64
 10058d8:	9080030d 	sth	r2,12(r18)
 10058dc:	003f9306 	br	100572c <__sfvwrite_r+0xb4>
 10058e0:	0027883a 	mov	r19,zero
 10058e4:	002f883a 	mov	r23,zero
 10058e8:	d8000015 	stw	zero,0(sp)
 10058ec:	0029883a 	mov	r20,zero
 10058f0:	98001e26 	beq	r19,zero,100596c <__sfvwrite_r+0x2f4>
 10058f4:	d8c00017 	ldw	r3,0(sp)
 10058f8:	1804c03a 	cmpne	r2,r3,zero
 10058fc:	10005e26 	beq	r2,zero,1005a78 <__sfvwrite_r+0x400>
 1005900:	9821883a 	mov	r16,r19
 1005904:	a4c0012e 	bgeu	r20,r19,100590c <__sfvwrite_r+0x294>
 1005908:	a021883a 	mov	r16,r20
 100590c:	91000017 	ldw	r4,0(r18)
 1005910:	90800417 	ldw	r2,16(r18)
 1005914:	91800217 	ldw	r6,8(r18)
 1005918:	91c00517 	ldw	r7,20(r18)
 100591c:	1100022e 	bgeu	r2,r4,1005928 <__sfvwrite_r+0x2b0>
 1005920:	31e3883a 	add	r17,r6,r7
 1005924:	8c001616 	blt	r17,r16,1005980 <__sfvwrite_r+0x308>
 1005928:	81c03816 	blt	r16,r7,1005a0c <__sfvwrite_r+0x394>
 100592c:	90c00917 	ldw	r3,36(r18)
 1005930:	91400717 	ldw	r5,28(r18)
 1005934:	e009883a 	mov	r4,fp
 1005938:	b80d883a 	mov	r6,r23
 100593c:	183ee83a 	callr	r3
 1005940:	1023883a 	mov	r17,r2
 1005944:	00bfe10e 	bge	zero,r2,10058cc <__sfvwrite_r+0x254>
 1005948:	a469c83a 	sub	r20,r20,r17
 100594c:	a0001826 	beq	r20,zero,10059b0 <__sfvwrite_r+0x338>
 1005950:	b0800217 	ldw	r2,8(r22)
 1005954:	1445c83a 	sub	r2,r2,r17
 1005958:	b0800215 	stw	r2,8(r22)
 100595c:	103f7226 	beq	r2,zero,1005728 <__sfvwrite_r+0xb0>
 1005960:	9c67c83a 	sub	r19,r19,r17
 1005964:	bc6f883a 	add	r23,r23,r17
 1005968:	983fe21e 	bne	r19,zero,10058f4 <__sfvwrite_r+0x27c>
 100596c:	adc00017 	ldw	r23,0(r21)
 1005970:	acc00117 	ldw	r19,4(r21)
 1005974:	ad400204 	addi	r21,r21,8
 1005978:	d8000015 	stw	zero,0(sp)
 100597c:	003fdc06 	br	10058f0 <__sfvwrite_r+0x278>
 1005980:	b80b883a 	mov	r5,r23
 1005984:	880d883a 	mov	r6,r17
 1005988:	10067b00 	call	10067b0 <memmove>
 100598c:	90c00017 	ldw	r3,0(r18)
 1005990:	e009883a 	mov	r4,fp
 1005994:	900b883a 	mov	r5,r18
 1005998:	1c47883a 	add	r3,r3,r17
 100599c:	90c00015 	stw	r3,0(r18)
 10059a0:	1004d480 	call	1004d48 <_fflush_r>
 10059a4:	103fc91e 	bne	r2,zero,10058cc <__sfvwrite_r+0x254>
 10059a8:	a469c83a 	sub	r20,r20,r17
 10059ac:	a03fe81e 	bne	r20,zero,1005950 <__sfvwrite_r+0x2d8>
 10059b0:	e009883a 	mov	r4,fp
 10059b4:	900b883a 	mov	r5,r18
 10059b8:	1004d480 	call	1004d48 <_fflush_r>
 10059bc:	103fc31e 	bne	r2,zero,10058cc <__sfvwrite_r+0x254>
 10059c0:	d8000015 	stw	zero,0(sp)
 10059c4:	003fe206 	br	1005950 <__sfvwrite_r+0x2d8>
 10059c8:	91000017 	ldw	r4,0(r18)
 10059cc:	90800417 	ldw	r2,16(r18)
 10059d0:	1100022e 	bgeu	r2,r4,10059dc <__sfvwrite_r+0x364>
 10059d4:	8023883a 	mov	r17,r16
 10059d8:	85003136 	bltu	r16,r20,1005aa0 <__sfvwrite_r+0x428>
 10059dc:	91c00517 	ldw	r7,20(r18)
 10059e0:	a1c01836 	bltu	r20,r7,1005a44 <__sfvwrite_r+0x3cc>
 10059e4:	90c00917 	ldw	r3,36(r18)
 10059e8:	91400717 	ldw	r5,28(r18)
 10059ec:	e009883a 	mov	r4,fp
 10059f0:	b80d883a 	mov	r6,r23
 10059f4:	183ee83a 	callr	r3
 10059f8:	1021883a 	mov	r16,r2
 10059fc:	00bfb30e 	bge	zero,r2,10058cc <__sfvwrite_r+0x254>
 1005a00:	1023883a 	mov	r17,r2
 1005a04:	1027883a 	mov	r19,r2
 1005a08:	003f9b06 	br	1005878 <__sfvwrite_r+0x200>
 1005a0c:	b80b883a 	mov	r5,r23
 1005a10:	800d883a 	mov	r6,r16
 1005a14:	10067b00 	call	10067b0 <memmove>
 1005a18:	90c00217 	ldw	r3,8(r18)
 1005a1c:	90800017 	ldw	r2,0(r18)
 1005a20:	8023883a 	mov	r17,r16
 1005a24:	1c07c83a 	sub	r3,r3,r16
 1005a28:	1405883a 	add	r2,r2,r16
 1005a2c:	90c00215 	stw	r3,8(r18)
 1005a30:	90800015 	stw	r2,0(r18)
 1005a34:	003fc406 	br	1005948 <__sfvwrite_r+0x2d0>
 1005a38:	a00d883a 	mov	r6,r20
 1005a3c:	a021883a 	mov	r16,r20
 1005a40:	003f8106 	br	1005848 <__sfvwrite_r+0x1d0>
 1005a44:	b80b883a 	mov	r5,r23
 1005a48:	a00d883a 	mov	r6,r20
 1005a4c:	10067b00 	call	10067b0 <memmove>
 1005a50:	90c00217 	ldw	r3,8(r18)
 1005a54:	90800017 	ldw	r2,0(r18)
 1005a58:	a021883a 	mov	r16,r20
 1005a5c:	1d07c83a 	sub	r3,r3,r20
 1005a60:	1505883a 	add	r2,r2,r20
 1005a64:	a023883a 	mov	r17,r20
 1005a68:	a027883a 	mov	r19,r20
 1005a6c:	90c00215 	stw	r3,8(r18)
 1005a70:	90800015 	stw	r2,0(r18)
 1005a74:	003f8006 	br	1005878 <__sfvwrite_r+0x200>
 1005a78:	b809883a 	mov	r4,r23
 1005a7c:	01400284 	movi	r5,10
 1005a80:	980d883a 	mov	r6,r19
 1005a84:	100662c0 	call	100662c <memchr>
 1005a88:	10001726 	beq	r2,zero,1005ae8 <__sfvwrite_r+0x470>
 1005a8c:	15c5c83a 	sub	r2,r2,r23
 1005a90:	15000044 	addi	r20,r2,1
 1005a94:	00800044 	movi	r2,1
 1005a98:	d8800015 	stw	r2,0(sp)
 1005a9c:	003f9806 	br	1005900 <__sfvwrite_r+0x288>
 1005aa0:	b80b883a 	mov	r5,r23
 1005aa4:	800d883a 	mov	r6,r16
 1005aa8:	10067b00 	call	10067b0 <memmove>
 1005aac:	90c00017 	ldw	r3,0(r18)
 1005ab0:	e009883a 	mov	r4,fp
 1005ab4:	900b883a 	mov	r5,r18
 1005ab8:	1c07883a 	add	r3,r3,r16
 1005abc:	90c00015 	stw	r3,0(r18)
 1005ac0:	8027883a 	mov	r19,r16
 1005ac4:	1004d480 	call	1004d48 <_fflush_r>
 1005ac8:	103f6b26 	beq	r2,zero,1005878 <__sfvwrite_r+0x200>
 1005acc:	003f7f06 	br	10058cc <__sfvwrite_r+0x254>
 1005ad0:	400b883a 	mov	r5,r8
 1005ad4:	e009883a 	mov	r4,fp
 1005ad8:	100791c0 	call	100791c <_realloc_r>
 1005adc:	103f7626 	beq	r2,zero,10058b8 <__sfvwrite_r+0x240>
 1005ae0:	1023883a 	mov	r17,r2
 1005ae4:	003f5006 	br	1005828 <__sfvwrite_r+0x1b0>
 1005ae8:	00c00044 	movi	r3,1
 1005aec:	9d000044 	addi	r20,r19,1
 1005af0:	d8c00015 	stw	r3,0(sp)
 1005af4:	003f8206 	br	1005900 <__sfvwrite_r+0x288>
 1005af8:	9080030b 	ldhu	r2,12(r18)
 1005afc:	00c00244 	movi	r3,9
 1005b00:	013fffc4 	movi	r4,-1
 1005b04:	10801014 	ori	r2,r2,64
 1005b08:	9080030d 	sth	r2,12(r18)
 1005b0c:	e0c00015 	stw	r3,0(fp)
 1005b10:	003f0606 	br	100572c <__sfvwrite_r+0xb4>

01005b14 <_fwalk_reent>:
 1005b14:	defff704 	addi	sp,sp,-36
 1005b18:	dcc00315 	stw	r19,12(sp)
 1005b1c:	24c0b804 	addi	r19,r4,736
 1005b20:	dd800615 	stw	r22,24(sp)
 1005b24:	dd400515 	stw	r21,20(sp)
 1005b28:	dfc00815 	stw	ra,32(sp)
 1005b2c:	ddc00715 	stw	r23,28(sp)
 1005b30:	dd000415 	stw	r20,16(sp)
 1005b34:	dc800215 	stw	r18,8(sp)
 1005b38:	dc400115 	stw	r17,4(sp)
 1005b3c:	dc000015 	stw	r16,0(sp)
 1005b40:	202b883a 	mov	r21,r4
 1005b44:	282d883a 	mov	r22,r5
 1005b48:	1004fd00 	call	1004fd0 <__sfp_lock_acquire>
 1005b4c:	98002126 	beq	r19,zero,1005bd4 <_fwalk_reent+0xc0>
 1005b50:	002f883a 	mov	r23,zero
 1005b54:	9c800117 	ldw	r18,4(r19)
 1005b58:	9c000217 	ldw	r16,8(r19)
 1005b5c:	90bfffc4 	addi	r2,r18,-1
 1005b60:	10000d16 	blt	r2,zero,1005b98 <_fwalk_reent+0x84>
 1005b64:	0023883a 	mov	r17,zero
 1005b68:	053fffc4 	movi	r20,-1
 1005b6c:	8080030f 	ldh	r2,12(r16)
 1005b70:	8c400044 	addi	r17,r17,1
 1005b74:	10000626 	beq	r2,zero,1005b90 <_fwalk_reent+0x7c>
 1005b78:	8080038f 	ldh	r2,14(r16)
 1005b7c:	800b883a 	mov	r5,r16
 1005b80:	a809883a 	mov	r4,r21
 1005b84:	15000226 	beq	r2,r20,1005b90 <_fwalk_reent+0x7c>
 1005b88:	b03ee83a 	callr	r22
 1005b8c:	b8aeb03a 	or	r23,r23,r2
 1005b90:	84001704 	addi	r16,r16,92
 1005b94:	947ff51e 	bne	r18,r17,1005b6c <_fwalk_reent+0x58>
 1005b98:	9cc00017 	ldw	r19,0(r19)
 1005b9c:	983fed1e 	bne	r19,zero,1005b54 <_fwalk_reent+0x40>
 1005ba0:	1004fd40 	call	1004fd4 <__sfp_lock_release>
 1005ba4:	b805883a 	mov	r2,r23
 1005ba8:	dfc00817 	ldw	ra,32(sp)
 1005bac:	ddc00717 	ldw	r23,28(sp)
 1005bb0:	dd800617 	ldw	r22,24(sp)
 1005bb4:	dd400517 	ldw	r21,20(sp)
 1005bb8:	dd000417 	ldw	r20,16(sp)
 1005bbc:	dcc00317 	ldw	r19,12(sp)
 1005bc0:	dc800217 	ldw	r18,8(sp)
 1005bc4:	dc400117 	ldw	r17,4(sp)
 1005bc8:	dc000017 	ldw	r16,0(sp)
 1005bcc:	dec00904 	addi	sp,sp,36
 1005bd0:	f800283a 	ret
 1005bd4:	002f883a 	mov	r23,zero
 1005bd8:	003ff106 	br	1005ba0 <_fwalk_reent+0x8c>

01005bdc <_fwalk>:
 1005bdc:	defff804 	addi	sp,sp,-32
 1005be0:	dcc00315 	stw	r19,12(sp)
 1005be4:	24c0b804 	addi	r19,r4,736
 1005be8:	dd400515 	stw	r21,20(sp)
 1005bec:	dfc00715 	stw	ra,28(sp)
 1005bf0:	dd800615 	stw	r22,24(sp)
 1005bf4:	dd000415 	stw	r20,16(sp)
 1005bf8:	dc800215 	stw	r18,8(sp)
 1005bfc:	dc400115 	stw	r17,4(sp)
 1005c00:	dc000015 	stw	r16,0(sp)
 1005c04:	282b883a 	mov	r21,r5
 1005c08:	1004fd00 	call	1004fd0 <__sfp_lock_acquire>
 1005c0c:	98001f26 	beq	r19,zero,1005c8c <_fwalk+0xb0>
 1005c10:	002d883a 	mov	r22,zero
 1005c14:	9c800117 	ldw	r18,4(r19)
 1005c18:	9c000217 	ldw	r16,8(r19)
 1005c1c:	90bfffc4 	addi	r2,r18,-1
 1005c20:	10000c16 	blt	r2,zero,1005c54 <_fwalk+0x78>
 1005c24:	0023883a 	mov	r17,zero
 1005c28:	053fffc4 	movi	r20,-1
 1005c2c:	8080030f 	ldh	r2,12(r16)
 1005c30:	8c400044 	addi	r17,r17,1
 1005c34:	10000526 	beq	r2,zero,1005c4c <_fwalk+0x70>
 1005c38:	8080038f 	ldh	r2,14(r16)
 1005c3c:	8009883a 	mov	r4,r16
 1005c40:	15000226 	beq	r2,r20,1005c4c <_fwalk+0x70>
 1005c44:	a83ee83a 	callr	r21
 1005c48:	b0acb03a 	or	r22,r22,r2
 1005c4c:	84001704 	addi	r16,r16,92
 1005c50:	947ff61e 	bne	r18,r17,1005c2c <_fwalk+0x50>
 1005c54:	9cc00017 	ldw	r19,0(r19)
 1005c58:	983fee1e 	bne	r19,zero,1005c14 <_fwalk+0x38>
 1005c5c:	1004fd40 	call	1004fd4 <__sfp_lock_release>
 1005c60:	b005883a 	mov	r2,r22
 1005c64:	dfc00717 	ldw	ra,28(sp)
 1005c68:	dd800617 	ldw	r22,24(sp)
 1005c6c:	dd400517 	ldw	r21,20(sp)
 1005c70:	dd000417 	ldw	r20,16(sp)
 1005c74:	dcc00317 	ldw	r19,12(sp)
 1005c78:	dc800217 	ldw	r18,8(sp)
 1005c7c:	dc400117 	ldw	r17,4(sp)
 1005c80:	dc000017 	ldw	r16,0(sp)
 1005c84:	dec00804 	addi	sp,sp,32
 1005c88:	f800283a 	ret
 1005c8c:	002d883a 	mov	r22,zero
 1005c90:	003ff206 	br	1005c5c <_fwalk+0x80>

01005c94 <__locale_charset>:
 1005c94:	d0a00317 	ldw	r2,-32756(gp)
 1005c98:	f800283a 	ret

01005c9c <_localeconv_r>:
 1005c9c:	00804074 	movhi	r2,257
 1005ca0:	10b51804 	addi	r2,r2,-11168
 1005ca4:	f800283a 	ret

01005ca8 <localeconv>:
 1005ca8:	00804074 	movhi	r2,257
 1005cac:	10bc3704 	addi	r2,r2,-3876
 1005cb0:	11000017 	ldw	r4,0(r2)
 1005cb4:	1005c9c1 	jmpi	1005c9c <_localeconv_r>

01005cb8 <_setlocale_r>:
 1005cb8:	defffc04 	addi	sp,sp,-16
 1005cbc:	00c04074 	movhi	r3,257
 1005cc0:	18f51304 	addi	r3,r3,-11188
 1005cc4:	dc800215 	stw	r18,8(sp)
 1005cc8:	dc400115 	stw	r17,4(sp)
 1005ccc:	dc000015 	stw	r16,0(sp)
 1005cd0:	2023883a 	mov	r17,r4
 1005cd4:	2825883a 	mov	r18,r5
 1005cd8:	dfc00315 	stw	ra,12(sp)
 1005cdc:	3021883a 	mov	r16,r6
 1005ce0:	3009883a 	mov	r4,r6
 1005ce4:	180b883a 	mov	r5,r3
 1005ce8:	30000926 	beq	r6,zero,1005d10 <_setlocale_r+0x58>
 1005cec:	100813c0 	call	100813c <strcmp>
 1005cf0:	8009883a 	mov	r4,r16
 1005cf4:	01404074 	movhi	r5,257
 1005cf8:	2974fe04 	addi	r5,r5,-11272
 1005cfc:	10000b1e 	bne	r2,zero,1005d2c <_setlocale_r+0x74>
 1005d00:	8c000d15 	stw	r16,52(r17)
 1005d04:	8c800c15 	stw	r18,48(r17)
 1005d08:	00c04074 	movhi	r3,257
 1005d0c:	18f51304 	addi	r3,r3,-11188
 1005d10:	1805883a 	mov	r2,r3
 1005d14:	dfc00317 	ldw	ra,12(sp)
 1005d18:	dc800217 	ldw	r18,8(sp)
 1005d1c:	dc400117 	ldw	r17,4(sp)
 1005d20:	dc000017 	ldw	r16,0(sp)
 1005d24:	dec00404 	addi	sp,sp,16
 1005d28:	f800283a 	ret
 1005d2c:	100813c0 	call	100813c <strcmp>
 1005d30:	0007883a 	mov	r3,zero
 1005d34:	103ff226 	beq	r2,zero,1005d00 <_setlocale_r+0x48>
 1005d38:	003ff506 	br	1005d10 <_setlocale_r+0x58>

01005d3c <setlocale>:
 1005d3c:	01804074 	movhi	r6,257
 1005d40:	31bc3704 	addi	r6,r6,-3876
 1005d44:	2007883a 	mov	r3,r4
 1005d48:	31000017 	ldw	r4,0(r6)
 1005d4c:	280d883a 	mov	r6,r5
 1005d50:	180b883a 	mov	r5,r3
 1005d54:	1005cb81 	jmpi	1005cb8 <_setlocale_r>

01005d58 <__smakebuf_r>:
 1005d58:	2880030b 	ldhu	r2,12(r5)
 1005d5c:	deffed04 	addi	sp,sp,-76
 1005d60:	dc401015 	stw	r17,64(sp)
 1005d64:	1080008c 	andi	r2,r2,2
 1005d68:	dc000f15 	stw	r16,60(sp)
 1005d6c:	dfc01215 	stw	ra,72(sp)
 1005d70:	dc801115 	stw	r18,68(sp)
 1005d74:	2821883a 	mov	r16,r5
 1005d78:	2023883a 	mov	r17,r4
 1005d7c:	10000b26 	beq	r2,zero,1005dac <__smakebuf_r+0x54>
 1005d80:	28c010c4 	addi	r3,r5,67
 1005d84:	00800044 	movi	r2,1
 1005d88:	28800515 	stw	r2,20(r5)
 1005d8c:	28c00415 	stw	r3,16(r5)
 1005d90:	28c00015 	stw	r3,0(r5)
 1005d94:	dfc01217 	ldw	ra,72(sp)
 1005d98:	dc801117 	ldw	r18,68(sp)
 1005d9c:	dc401017 	ldw	r17,64(sp)
 1005da0:	dc000f17 	ldw	r16,60(sp)
 1005da4:	dec01304 	addi	sp,sp,76
 1005da8:	f800283a 	ret
 1005dac:	2940038f 	ldh	r5,14(r5)
 1005db0:	28002116 	blt	r5,zero,1005e38 <__smakebuf_r+0xe0>
 1005db4:	d80d883a 	mov	r6,sp
 1005db8:	10084b80 	call	10084b8 <_fstat_r>
 1005dbc:	10001e16 	blt	r2,zero,1005e38 <__smakebuf_r+0xe0>
 1005dc0:	d8800117 	ldw	r2,4(sp)
 1005dc4:	00e00014 	movui	r3,32768
 1005dc8:	113c000c 	andi	r4,r2,61440
 1005dcc:	20c03126 	beq	r4,r3,1005e94 <__smakebuf_r+0x13c>
 1005dd0:	8080030b 	ldhu	r2,12(r16)
 1005dd4:	00c80004 	movi	r3,8192
 1005dd8:	10820014 	ori	r2,r2,2048
 1005ddc:	8080030d 	sth	r2,12(r16)
 1005de0:	20c01e26 	beq	r4,r3,1005e5c <__smakebuf_r+0x104>
 1005de4:	04810004 	movi	r18,1024
 1005de8:	8809883a 	mov	r4,r17
 1005dec:	900b883a 	mov	r5,r18
 1005df0:	1005eec0 	call	1005eec <_malloc_r>
 1005df4:	1009883a 	mov	r4,r2
 1005df8:	10003126 	beq	r2,zero,1005ec0 <__smakebuf_r+0x168>
 1005dfc:	80c0030b 	ldhu	r3,12(r16)
 1005e00:	00804034 	movhi	r2,256
 1005e04:	10943104 	addi	r2,r2,20676
 1005e08:	88800f15 	stw	r2,60(r17)
 1005e0c:	18c02014 	ori	r3,r3,128
 1005e10:	84800515 	stw	r18,20(r16)
 1005e14:	80c0030d 	sth	r3,12(r16)
 1005e18:	81000415 	stw	r4,16(r16)
 1005e1c:	81000015 	stw	r4,0(r16)
 1005e20:	dfc01217 	ldw	ra,72(sp)
 1005e24:	dc801117 	ldw	r18,68(sp)
 1005e28:	dc401017 	ldw	r17,64(sp)
 1005e2c:	dc000f17 	ldw	r16,60(sp)
 1005e30:	dec01304 	addi	sp,sp,76
 1005e34:	f800283a 	ret
 1005e38:	80c0030b 	ldhu	r3,12(r16)
 1005e3c:	1880200c 	andi	r2,r3,128
 1005e40:	10000426 	beq	r2,zero,1005e54 <__smakebuf_r+0xfc>
 1005e44:	04801004 	movi	r18,64
 1005e48:	18820014 	ori	r2,r3,2048
 1005e4c:	8080030d 	sth	r2,12(r16)
 1005e50:	003fe506 	br	1005de8 <__smakebuf_r+0x90>
 1005e54:	04810004 	movi	r18,1024
 1005e58:	003ffb06 	br	1005e48 <__smakebuf_r+0xf0>
 1005e5c:	8140038f 	ldh	r5,14(r16)
 1005e60:	8809883a 	mov	r4,r17
 1005e64:	100852c0 	call	100852c <_isatty_r>
 1005e68:	103fde26 	beq	r2,zero,1005de4 <__smakebuf_r+0x8c>
 1005e6c:	8080030b 	ldhu	r2,12(r16)
 1005e70:	80c010c4 	addi	r3,r16,67
 1005e74:	04810004 	movi	r18,1024
 1005e78:	10800054 	ori	r2,r2,1
 1005e7c:	8080030d 	sth	r2,12(r16)
 1005e80:	00800044 	movi	r2,1
 1005e84:	80c00415 	stw	r3,16(r16)
 1005e88:	80800515 	stw	r2,20(r16)
 1005e8c:	80c00015 	stw	r3,0(r16)
 1005e90:	003fd506 	br	1005de8 <__smakebuf_r+0x90>
 1005e94:	80c00a17 	ldw	r3,40(r16)
 1005e98:	00804034 	movhi	r2,256
 1005e9c:	109ffe04 	addi	r2,r2,32760
 1005ea0:	18bfcb1e 	bne	r3,r2,1005dd0 <__smakebuf_r+0x78>
 1005ea4:	8080030b 	ldhu	r2,12(r16)
 1005ea8:	00c10004 	movi	r3,1024
 1005eac:	1825883a 	mov	r18,r3
 1005eb0:	10c4b03a 	or	r2,r2,r3
 1005eb4:	8080030d 	sth	r2,12(r16)
 1005eb8:	80c01315 	stw	r3,76(r16)
 1005ebc:	003fca06 	br	1005de8 <__smakebuf_r+0x90>
 1005ec0:	8100030b 	ldhu	r4,12(r16)
 1005ec4:	2080800c 	andi	r2,r4,512
 1005ec8:	103fb21e 	bne	r2,zero,1005d94 <__smakebuf_r+0x3c>
 1005ecc:	80c010c4 	addi	r3,r16,67
 1005ed0:	21000094 	ori	r4,r4,2
 1005ed4:	00800044 	movi	r2,1
 1005ed8:	80800515 	stw	r2,20(r16)
 1005edc:	8100030d 	sth	r4,12(r16)
 1005ee0:	80c00415 	stw	r3,16(r16)
 1005ee4:	80c00015 	stw	r3,0(r16)
 1005ee8:	003faa06 	br	1005d94 <__smakebuf_r+0x3c>

01005eec <_malloc_r>:
 1005eec:	defff604 	addi	sp,sp,-40
 1005ef0:	28c002c4 	addi	r3,r5,11
 1005ef4:	00800584 	movi	r2,22
 1005ef8:	dc800215 	stw	r18,8(sp)
 1005efc:	dfc00915 	stw	ra,36(sp)
 1005f00:	df000815 	stw	fp,32(sp)
 1005f04:	ddc00715 	stw	r23,28(sp)
 1005f08:	dd800615 	stw	r22,24(sp)
 1005f0c:	dd400515 	stw	r21,20(sp)
 1005f10:	dd000415 	stw	r20,16(sp)
 1005f14:	dcc00315 	stw	r19,12(sp)
 1005f18:	dc400115 	stw	r17,4(sp)
 1005f1c:	dc000015 	stw	r16,0(sp)
 1005f20:	2025883a 	mov	r18,r4
 1005f24:	10c01236 	bltu	r2,r3,1005f70 <_malloc_r+0x84>
 1005f28:	04400404 	movi	r17,16
 1005f2c:	8940142e 	bgeu	r17,r5,1005f80 <_malloc_r+0x94>
 1005f30:	00800304 	movi	r2,12
 1005f34:	0007883a 	mov	r3,zero
 1005f38:	90800015 	stw	r2,0(r18)
 1005f3c:	1805883a 	mov	r2,r3
 1005f40:	dfc00917 	ldw	ra,36(sp)
 1005f44:	df000817 	ldw	fp,32(sp)
 1005f48:	ddc00717 	ldw	r23,28(sp)
 1005f4c:	dd800617 	ldw	r22,24(sp)
 1005f50:	dd400517 	ldw	r21,20(sp)
 1005f54:	dd000417 	ldw	r20,16(sp)
 1005f58:	dcc00317 	ldw	r19,12(sp)
 1005f5c:	dc800217 	ldw	r18,8(sp)
 1005f60:	dc400117 	ldw	r17,4(sp)
 1005f64:	dc000017 	ldw	r16,0(sp)
 1005f68:	dec00a04 	addi	sp,sp,40
 1005f6c:	f800283a 	ret
 1005f70:	00bffe04 	movi	r2,-8
 1005f74:	18a2703a 	and	r17,r3,r2
 1005f78:	883fed16 	blt	r17,zero,1005f30 <_malloc_r+0x44>
 1005f7c:	897fec36 	bltu	r17,r5,1005f30 <_malloc_r+0x44>
 1005f80:	9009883a 	mov	r4,r18
 1005f84:	100a6740 	call	100a674 <__malloc_lock>
 1005f88:	00807dc4 	movi	r2,503
 1005f8c:	14402b2e 	bgeu	r2,r17,100603c <_malloc_r+0x150>
 1005f90:	8806d27a 	srli	r3,r17,9
 1005f94:	18003f1e 	bne	r3,zero,1006094 <_malloc_r+0x1a8>
 1005f98:	880cd0fa 	srli	r6,r17,3
 1005f9c:	300490fa 	slli	r2,r6,3
 1005fa0:	02c04074 	movhi	r11,257
 1005fa4:	5af69204 	addi	r11,r11,-9656
 1005fa8:	12cb883a 	add	r5,r2,r11
 1005fac:	2c000317 	ldw	r16,12(r5)
 1005fb0:	580f883a 	mov	r7,r11
 1005fb4:	2c00041e 	bne	r5,r16,1005fc8 <_malloc_r+0xdc>
 1005fb8:	00000a06 	br	1005fe4 <_malloc_r+0xf8>
 1005fbc:	1800860e 	bge	r3,zero,10061d8 <_malloc_r+0x2ec>
 1005fc0:	84000317 	ldw	r16,12(r16)
 1005fc4:	2c000726 	beq	r5,r16,1005fe4 <_malloc_r+0xf8>
 1005fc8:	80800117 	ldw	r2,4(r16)
 1005fcc:	00ffff04 	movi	r3,-4
 1005fd0:	10c8703a 	and	r4,r2,r3
 1005fd4:	2447c83a 	sub	r3,r4,r17
 1005fd8:	008003c4 	movi	r2,15
 1005fdc:	10fff70e 	bge	r2,r3,1005fbc <_malloc_r+0xd0>
 1005fe0:	31bfffc4 	addi	r6,r6,-1
 1005fe4:	32400044 	addi	r9,r6,1
 1005fe8:	02804074 	movhi	r10,257
 1005fec:	52b69404 	addi	r10,r10,-9648
 1005ff0:	54000217 	ldw	r16,8(r10)
 1005ff4:	8280a026 	beq	r16,r10,1006278 <_malloc_r+0x38c>
 1005ff8:	80800117 	ldw	r2,4(r16)
 1005ffc:	00ffff04 	movi	r3,-4
 1006000:	10ca703a 	and	r5,r2,r3
 1006004:	2c4dc83a 	sub	r6,r5,r17
 1006008:	008003c4 	movi	r2,15
 100600c:	11808316 	blt	r2,r6,100621c <_malloc_r+0x330>
 1006010:	52800315 	stw	r10,12(r10)
 1006014:	52800215 	stw	r10,8(r10)
 1006018:	30002916 	blt	r6,zero,10060c0 <_malloc_r+0x1d4>
 100601c:	8147883a 	add	r3,r16,r5
 1006020:	18800117 	ldw	r2,4(r3)
 1006024:	9009883a 	mov	r4,r18
 1006028:	10800054 	ori	r2,r2,1
 100602c:	18800115 	stw	r2,4(r3)
 1006030:	100a6940 	call	100a694 <__malloc_unlock>
 1006034:	80c00204 	addi	r3,r16,8
 1006038:	003fc006 	br	1005f3c <_malloc_r+0x50>
 100603c:	02c04074 	movhi	r11,257
 1006040:	5af69204 	addi	r11,r11,-9656
 1006044:	8ac5883a 	add	r2,r17,r11
 1006048:	14000317 	ldw	r16,12(r2)
 100604c:	580f883a 	mov	r7,r11
 1006050:	8806d0fa 	srli	r3,r17,3
 1006054:	14006c26 	beq	r2,r16,1006208 <_malloc_r+0x31c>
 1006058:	80c00117 	ldw	r3,4(r16)
 100605c:	00bfff04 	movi	r2,-4
 1006060:	81800317 	ldw	r6,12(r16)
 1006064:	1886703a 	and	r3,r3,r2
 1006068:	80c7883a 	add	r3,r16,r3
 100606c:	18800117 	ldw	r2,4(r3)
 1006070:	81400217 	ldw	r5,8(r16)
 1006074:	9009883a 	mov	r4,r18
 1006078:	10800054 	ori	r2,r2,1
 100607c:	18800115 	stw	r2,4(r3)
 1006080:	31400215 	stw	r5,8(r6)
 1006084:	29800315 	stw	r6,12(r5)
 1006088:	100a6940 	call	100a694 <__malloc_unlock>
 100608c:	80c00204 	addi	r3,r16,8
 1006090:	003faa06 	br	1005f3c <_malloc_r+0x50>
 1006094:	00800104 	movi	r2,4
 1006098:	10c0052e 	bgeu	r2,r3,10060b0 <_malloc_r+0x1c4>
 100609c:	00800504 	movi	r2,20
 10060a0:	10c07836 	bltu	r2,r3,1006284 <_malloc_r+0x398>
 10060a4:	198016c4 	addi	r6,r3,91
 10060a8:	300490fa 	slli	r2,r6,3
 10060ac:	003fbc06 	br	1005fa0 <_malloc_r+0xb4>
 10060b0:	8804d1ba 	srli	r2,r17,6
 10060b4:	11800e04 	addi	r6,r2,56
 10060b8:	300490fa 	slli	r2,r6,3
 10060bc:	003fb806 	br	1005fa0 <_malloc_r+0xb4>
 10060c0:	00807fc4 	movi	r2,511
 10060c4:	1140bb36 	bltu	r2,r5,10063b4 <_malloc_r+0x4c8>
 10060c8:	2806d0fa 	srli	r3,r5,3
 10060cc:	573ffe04 	addi	fp,r10,-8
 10060d0:	00800044 	movi	r2,1
 10060d4:	180890fa 	slli	r4,r3,3
 10060d8:	1807d0ba 	srai	r3,r3,2
 10060dc:	e1c00117 	ldw	r7,4(fp)
 10060e0:	5909883a 	add	r4,r11,r4
 10060e4:	21400217 	ldw	r5,8(r4)
 10060e8:	10c4983a 	sll	r2,r2,r3
 10060ec:	81000315 	stw	r4,12(r16)
 10060f0:	81400215 	stw	r5,8(r16)
 10060f4:	388eb03a 	or	r7,r7,r2
 10060f8:	2c000315 	stw	r16,12(r5)
 10060fc:	24000215 	stw	r16,8(r4)
 1006100:	e1c00115 	stw	r7,4(fp)
 1006104:	4807883a 	mov	r3,r9
 1006108:	4800cd16 	blt	r9,zero,1006440 <_malloc_r+0x554>
 100610c:	1807d0ba 	srai	r3,r3,2
 1006110:	00800044 	movi	r2,1
 1006114:	10c8983a 	sll	r4,r2,r3
 1006118:	39004436 	bltu	r7,r4,100622c <_malloc_r+0x340>
 100611c:	21c4703a 	and	r2,r4,r7
 1006120:	10000a1e 	bne	r2,zero,100614c <_malloc_r+0x260>
 1006124:	2109883a 	add	r4,r4,r4
 1006128:	00bfff04 	movi	r2,-4
 100612c:	4884703a 	and	r2,r9,r2
 1006130:	3906703a 	and	r3,r7,r4
 1006134:	12400104 	addi	r9,r2,4
 1006138:	1800041e 	bne	r3,zero,100614c <_malloc_r+0x260>
 100613c:	2109883a 	add	r4,r4,r4
 1006140:	3904703a 	and	r2,r7,r4
 1006144:	4a400104 	addi	r9,r9,4
 1006148:	103ffc26 	beq	r2,zero,100613c <_malloc_r+0x250>
 100614c:	480490fa 	slli	r2,r9,3
 1006150:	4819883a 	mov	r12,r9
 1006154:	023fff04 	movi	r8,-4
 1006158:	589b883a 	add	r13,r11,r2
 100615c:	6807883a 	mov	r3,r13
 1006160:	014003c4 	movi	r5,15
 1006164:	1c000317 	ldw	r16,12(r3)
 1006168:	1c00041e 	bne	r3,r16,100617c <_malloc_r+0x290>
 100616c:	0000a706 	br	100640c <_malloc_r+0x520>
 1006170:	3000ab0e 	bge	r6,zero,1006420 <_malloc_r+0x534>
 1006174:	84000317 	ldw	r16,12(r16)
 1006178:	1c00a426 	beq	r3,r16,100640c <_malloc_r+0x520>
 100617c:	80800117 	ldw	r2,4(r16)
 1006180:	1204703a 	and	r2,r2,r8
 1006184:	144dc83a 	sub	r6,r2,r17
 1006188:	29bff90e 	bge	r5,r6,1006170 <_malloc_r+0x284>
 100618c:	81000317 	ldw	r4,12(r16)
 1006190:	80c00217 	ldw	r3,8(r16)
 1006194:	89400054 	ori	r5,r17,1
 1006198:	8445883a 	add	r2,r16,r17
 100619c:	20c00215 	stw	r3,8(r4)
 10061a0:	19000315 	stw	r4,12(r3)
 10061a4:	81400115 	stw	r5,4(r16)
 10061a8:	1187883a 	add	r3,r2,r6
 10061ac:	31000054 	ori	r4,r6,1
 10061b0:	50800315 	stw	r2,12(r10)
 10061b4:	50800215 	stw	r2,8(r10)
 10061b8:	19800015 	stw	r6,0(r3)
 10061bc:	11000115 	stw	r4,4(r2)
 10061c0:	12800215 	stw	r10,8(r2)
 10061c4:	12800315 	stw	r10,12(r2)
 10061c8:	9009883a 	mov	r4,r18
 10061cc:	100a6940 	call	100a694 <__malloc_unlock>
 10061d0:	80c00204 	addi	r3,r16,8
 10061d4:	003f5906 	br	1005f3c <_malloc_r+0x50>
 10061d8:	8109883a 	add	r4,r16,r4
 10061dc:	20800117 	ldw	r2,4(r4)
 10061e0:	80c00217 	ldw	r3,8(r16)
 10061e4:	81400317 	ldw	r5,12(r16)
 10061e8:	10800054 	ori	r2,r2,1
 10061ec:	20800115 	stw	r2,4(r4)
 10061f0:	28c00215 	stw	r3,8(r5)
 10061f4:	19400315 	stw	r5,12(r3)
 10061f8:	9009883a 	mov	r4,r18
 10061fc:	100a6940 	call	100a694 <__malloc_unlock>
 1006200:	80c00204 	addi	r3,r16,8
 1006204:	003f4d06 	br	1005f3c <_malloc_r+0x50>
 1006208:	80800204 	addi	r2,r16,8
 100620c:	14000317 	ldw	r16,12(r2)
 1006210:	143f911e 	bne	r2,r16,1006058 <_malloc_r+0x16c>
 1006214:	1a400084 	addi	r9,r3,2
 1006218:	003f7306 	br	1005fe8 <_malloc_r+0xfc>
 100621c:	88c00054 	ori	r3,r17,1
 1006220:	8445883a 	add	r2,r16,r17
 1006224:	80c00115 	stw	r3,4(r16)
 1006228:	003fdf06 	br	10061a8 <_malloc_r+0x2bc>
 100622c:	e4000217 	ldw	r16,8(fp)
 1006230:	00bfff04 	movi	r2,-4
 1006234:	80c00117 	ldw	r3,4(r16)
 1006238:	802d883a 	mov	r22,r16
 100623c:	18aa703a 	and	r21,r3,r2
 1006240:	ac401636 	bltu	r21,r17,100629c <_malloc_r+0x3b0>
 1006244:	ac49c83a 	sub	r4,r21,r17
 1006248:	008003c4 	movi	r2,15
 100624c:	1100130e 	bge	r2,r4,100629c <_malloc_r+0x3b0>
 1006250:	88800054 	ori	r2,r17,1
 1006254:	8447883a 	add	r3,r16,r17
 1006258:	80800115 	stw	r2,4(r16)
 100625c:	20800054 	ori	r2,r4,1
 1006260:	18800115 	stw	r2,4(r3)
 1006264:	e0c00215 	stw	r3,8(fp)
 1006268:	9009883a 	mov	r4,r18
 100626c:	100a6940 	call	100a694 <__malloc_unlock>
 1006270:	80c00204 	addi	r3,r16,8
 1006274:	003f3106 	br	1005f3c <_malloc_r+0x50>
 1006278:	39c00117 	ldw	r7,4(r7)
 100627c:	573ffe04 	addi	fp,r10,-8
 1006280:	003fa006 	br	1006104 <_malloc_r+0x218>
 1006284:	00801504 	movi	r2,84
 1006288:	10c06736 	bltu	r2,r3,1006428 <_malloc_r+0x53c>
 100628c:	8804d33a 	srli	r2,r17,12
 1006290:	11801b84 	addi	r6,r2,110
 1006294:	300490fa 	slli	r2,r6,3
 1006298:	003f4106 	br	1005fa0 <_malloc_r+0xb4>
 100629c:	d0a6cb17 	ldw	r2,-25812(gp)
 10062a0:	d0e00517 	ldw	r3,-32748(gp)
 10062a4:	053fffc4 	movi	r20,-1
 10062a8:	10800404 	addi	r2,r2,16
 10062ac:	88a7883a 	add	r19,r17,r2
 10062b0:	1d000326 	beq	r3,r20,10062c0 <_malloc_r+0x3d4>
 10062b4:	98c3ffc4 	addi	r3,r19,4095
 10062b8:	00bc0004 	movi	r2,-4096
 10062bc:	18a6703a 	and	r19,r3,r2
 10062c0:	9009883a 	mov	r4,r18
 10062c4:	980b883a 	mov	r5,r19
 10062c8:	1007f800 	call	1007f80 <_sbrk_r>
 10062cc:	1009883a 	mov	r4,r2
 10062d0:	15000426 	beq	r2,r20,10062e4 <_malloc_r+0x3f8>
 10062d4:	854b883a 	add	r5,r16,r21
 10062d8:	1029883a 	mov	r20,r2
 10062dc:	11405a2e 	bgeu	r2,r5,1006448 <_malloc_r+0x55c>
 10062e0:	87000c26 	beq	r16,fp,1006314 <_malloc_r+0x428>
 10062e4:	e4000217 	ldw	r16,8(fp)
 10062e8:	80c00117 	ldw	r3,4(r16)
 10062ec:	00bfff04 	movi	r2,-4
 10062f0:	1884703a 	and	r2,r3,r2
 10062f4:	14400336 	bltu	r2,r17,1006304 <_malloc_r+0x418>
 10062f8:	1449c83a 	sub	r4,r2,r17
 10062fc:	008003c4 	movi	r2,15
 1006300:	113fd316 	blt	r2,r4,1006250 <_malloc_r+0x364>
 1006304:	9009883a 	mov	r4,r18
 1006308:	100a6940 	call	100a694 <__malloc_unlock>
 100630c:	0007883a 	mov	r3,zero
 1006310:	003f0a06 	br	1005f3c <_malloc_r+0x50>
 1006314:	05c04074 	movhi	r23,257
 1006318:	bdc30c04 	addi	r23,r23,3120
 100631c:	b8800017 	ldw	r2,0(r23)
 1006320:	988d883a 	add	r6,r19,r2
 1006324:	b9800015 	stw	r6,0(r23)
 1006328:	d0e00517 	ldw	r3,-32748(gp)
 100632c:	00bfffc4 	movi	r2,-1
 1006330:	18808e26 	beq	r3,r2,100656c <_malloc_r+0x680>
 1006334:	2145c83a 	sub	r2,r4,r5
 1006338:	3085883a 	add	r2,r6,r2
 100633c:	b8800015 	stw	r2,0(r23)
 1006340:	20c001cc 	andi	r3,r4,7
 1006344:	18005f1e 	bne	r3,zero,10064c4 <_malloc_r+0x5d8>
 1006348:	000b883a 	mov	r5,zero
 100634c:	a4c5883a 	add	r2,r20,r19
 1006350:	1083ffcc 	andi	r2,r2,4095
 1006354:	00c40004 	movi	r3,4096
 1006358:	1887c83a 	sub	r3,r3,r2
 100635c:	28e7883a 	add	r19,r5,r3
 1006360:	9009883a 	mov	r4,r18
 1006364:	980b883a 	mov	r5,r19
 1006368:	1007f800 	call	1007f80 <_sbrk_r>
 100636c:	1007883a 	mov	r3,r2
 1006370:	00bfffc4 	movi	r2,-1
 1006374:	18807a26 	beq	r3,r2,1006560 <_malloc_r+0x674>
 1006378:	1d05c83a 	sub	r2,r3,r20
 100637c:	9885883a 	add	r2,r19,r2
 1006380:	10c00054 	ori	r3,r2,1
 1006384:	b8800017 	ldw	r2,0(r23)
 1006388:	a021883a 	mov	r16,r20
 100638c:	a0c00115 	stw	r3,4(r20)
 1006390:	9885883a 	add	r2,r19,r2
 1006394:	b8800015 	stw	r2,0(r23)
 1006398:	e5000215 	stw	r20,8(fp)
 100639c:	b7003626 	beq	r22,fp,1006478 <_malloc_r+0x58c>
 10063a0:	018003c4 	movi	r6,15
 10063a4:	35404b36 	bltu	r6,r21,10064d4 <_malloc_r+0x5e8>
 10063a8:	00800044 	movi	r2,1
 10063ac:	a0800115 	stw	r2,4(r20)
 10063b0:	003fcd06 	br	10062e8 <_malloc_r+0x3fc>
 10063b4:	2808d27a 	srli	r4,r5,9
 10063b8:	2000371e 	bne	r4,zero,1006498 <_malloc_r+0x5ac>
 10063bc:	2808d0fa 	srli	r4,r5,3
 10063c0:	200690fa 	slli	r3,r4,3
 10063c4:	1ad1883a 	add	r8,r3,r11
 10063c8:	41800217 	ldw	r6,8(r8)
 10063cc:	41805b26 	beq	r8,r6,100653c <_malloc_r+0x650>
 10063d0:	30800117 	ldw	r2,4(r6)
 10063d4:	00ffff04 	movi	r3,-4
 10063d8:	10c4703a 	and	r2,r2,r3
 10063dc:	2880022e 	bgeu	r5,r2,10063e8 <_malloc_r+0x4fc>
 10063e0:	31800217 	ldw	r6,8(r6)
 10063e4:	41bffa1e 	bne	r8,r6,10063d0 <_malloc_r+0x4e4>
 10063e8:	32000317 	ldw	r8,12(r6)
 10063ec:	39c00117 	ldw	r7,4(r7)
 10063f0:	82000315 	stw	r8,12(r16)
 10063f4:	81800215 	stw	r6,8(r16)
 10063f8:	07004074 	movhi	fp,257
 10063fc:	e7369204 	addi	fp,fp,-9656
 1006400:	34000315 	stw	r16,12(r6)
 1006404:	44000215 	stw	r16,8(r8)
 1006408:	003f3e06 	br	1006104 <_malloc_r+0x218>
 100640c:	63000044 	addi	r12,r12,1
 1006410:	608000cc 	andi	r2,r12,3
 1006414:	10005d26 	beq	r2,zero,100658c <_malloc_r+0x6a0>
 1006418:	18c00204 	addi	r3,r3,8
 100641c:	003f5106 	br	1006164 <_malloc_r+0x278>
 1006420:	8089883a 	add	r4,r16,r2
 1006424:	003f6d06 	br	10061dc <_malloc_r+0x2f0>
 1006428:	00805504 	movi	r2,340
 100642c:	10c02036 	bltu	r2,r3,10064b0 <_malloc_r+0x5c4>
 1006430:	8804d3fa 	srli	r2,r17,15
 1006434:	11801dc4 	addi	r6,r2,119
 1006438:	300490fa 	slli	r2,r6,3
 100643c:	003ed806 	br	1005fa0 <_malloc_r+0xb4>
 1006440:	48c000c4 	addi	r3,r9,3
 1006444:	003f3106 	br	100610c <_malloc_r+0x220>
 1006448:	05c04074 	movhi	r23,257
 100644c:	bdc30c04 	addi	r23,r23,3120
 1006450:	b8800017 	ldw	r2,0(r23)
 1006454:	988d883a 	add	r6,r19,r2
 1006458:	b9800015 	stw	r6,0(r23)
 100645c:	293fb21e 	bne	r5,r4,1006328 <_malloc_r+0x43c>
 1006460:	2083ffcc 	andi	r2,r4,4095
 1006464:	103fb01e 	bne	r2,zero,1006328 <_malloc_r+0x43c>
 1006468:	e4000217 	ldw	r16,8(fp)
 100646c:	9d45883a 	add	r2,r19,r21
 1006470:	10800054 	ori	r2,r2,1
 1006474:	80800115 	stw	r2,4(r16)
 1006478:	b8c00017 	ldw	r3,0(r23)
 100647c:	d0a6cc17 	ldw	r2,-25808(gp)
 1006480:	10c0012e 	bgeu	r2,r3,1006488 <_malloc_r+0x59c>
 1006484:	d0e6cc15 	stw	r3,-25808(gp)
 1006488:	d0a6cd17 	ldw	r2,-25804(gp)
 100648c:	10ff962e 	bgeu	r2,r3,10062e8 <_malloc_r+0x3fc>
 1006490:	d0e6cd15 	stw	r3,-25804(gp)
 1006494:	003f9406 	br	10062e8 <_malloc_r+0x3fc>
 1006498:	00800104 	movi	r2,4
 100649c:	11001e36 	bltu	r2,r4,1006518 <_malloc_r+0x62c>
 10064a0:	2804d1ba 	srli	r2,r5,6
 10064a4:	11000e04 	addi	r4,r2,56
 10064a8:	200690fa 	slli	r3,r4,3
 10064ac:	003fc506 	br	10063c4 <_malloc_r+0x4d8>
 10064b0:	00815504 	movi	r2,1364
 10064b4:	10c01d2e 	bgeu	r2,r3,100652c <_malloc_r+0x640>
 10064b8:	01801f84 	movi	r6,126
 10064bc:	0080fc04 	movi	r2,1008
 10064c0:	003eb706 	br	1005fa0 <_malloc_r+0xb4>
 10064c4:	00800204 	movi	r2,8
 10064c8:	10cbc83a 	sub	r5,r2,r3
 10064cc:	2169883a 	add	r20,r4,r5
 10064d0:	003f9e06 	br	100634c <_malloc_r+0x460>
 10064d4:	00bffe04 	movi	r2,-8
 10064d8:	a93ffd04 	addi	r4,r21,-12
 10064dc:	2088703a 	and	r4,r4,r2
 10064e0:	b10b883a 	add	r5,r22,r4
 10064e4:	00c00144 	movi	r3,5
 10064e8:	28c00215 	stw	r3,8(r5)
 10064ec:	28c00115 	stw	r3,4(r5)
 10064f0:	b0800117 	ldw	r2,4(r22)
 10064f4:	1080004c 	andi	r2,r2,1
 10064f8:	2084b03a 	or	r2,r4,r2
 10064fc:	b0800115 	stw	r2,4(r22)
 1006500:	313fdd2e 	bgeu	r6,r4,1006478 <_malloc_r+0x58c>
 1006504:	b1400204 	addi	r5,r22,8
 1006508:	9009883a 	mov	r4,r18
 100650c:	10053640 	call	1005364 <_free_r>
 1006510:	e4000217 	ldw	r16,8(fp)
 1006514:	003fd806 	br	1006478 <_malloc_r+0x58c>
 1006518:	00800504 	movi	r2,20
 100651c:	11001536 	bltu	r2,r4,1006574 <_malloc_r+0x688>
 1006520:	210016c4 	addi	r4,r4,91
 1006524:	200690fa 	slli	r3,r4,3
 1006528:	003fa606 	br	10063c4 <_malloc_r+0x4d8>
 100652c:	8804d4ba 	srli	r2,r17,18
 1006530:	11801f04 	addi	r6,r2,124
 1006534:	300490fa 	slli	r2,r6,3
 1006538:	003e9906 	br	1005fa0 <_malloc_r+0xb4>
 100653c:	2009d0ba 	srai	r4,r4,2
 1006540:	01404074 	movhi	r5,257
 1006544:	29769204 	addi	r5,r5,-9656
 1006548:	00c00044 	movi	r3,1
 100654c:	28800117 	ldw	r2,4(r5)
 1006550:	1906983a 	sll	r3,r3,r4
 1006554:	10c4b03a 	or	r2,r2,r3
 1006558:	28800115 	stw	r2,4(r5)
 100655c:	003fa306 	br	10063ec <_malloc_r+0x500>
 1006560:	0027883a 	mov	r19,zero
 1006564:	00c00044 	movi	r3,1
 1006568:	003f8606 	br	1006384 <_malloc_r+0x498>
 100656c:	d1200515 	stw	r4,-32748(gp)
 1006570:	003f7306 	br	1006340 <_malloc_r+0x454>
 1006574:	00801504 	movi	r2,84
 1006578:	11001936 	bltu	r2,r4,10065e0 <_malloc_r+0x6f4>
 100657c:	2804d33a 	srli	r2,r5,12
 1006580:	11001b84 	addi	r4,r2,110
 1006584:	200690fa 	slli	r3,r4,3
 1006588:	003f8e06 	br	10063c4 <_malloc_r+0x4d8>
 100658c:	480b883a 	mov	r5,r9
 1006590:	6807883a 	mov	r3,r13
 1006594:	288000cc 	andi	r2,r5,3
 1006598:	18fffe04 	addi	r3,r3,-8
 100659c:	297fffc4 	addi	r5,r5,-1
 10065a0:	10001526 	beq	r2,zero,10065f8 <_malloc_r+0x70c>
 10065a4:	18800217 	ldw	r2,8(r3)
 10065a8:	10fffa26 	beq	r2,r3,1006594 <_malloc_r+0x6a8>
 10065ac:	2109883a 	add	r4,r4,r4
 10065b0:	393f1e36 	bltu	r7,r4,100622c <_malloc_r+0x340>
 10065b4:	203f1d26 	beq	r4,zero,100622c <_malloc_r+0x340>
 10065b8:	21c4703a 	and	r2,r4,r7
 10065bc:	10000226 	beq	r2,zero,10065c8 <_malloc_r+0x6dc>
 10065c0:	6013883a 	mov	r9,r12
 10065c4:	003ee106 	br	100614c <_malloc_r+0x260>
 10065c8:	2109883a 	add	r4,r4,r4
 10065cc:	3904703a 	and	r2,r7,r4
 10065d0:	63000104 	addi	r12,r12,4
 10065d4:	103ffc26 	beq	r2,zero,10065c8 <_malloc_r+0x6dc>
 10065d8:	6013883a 	mov	r9,r12
 10065dc:	003edb06 	br	100614c <_malloc_r+0x260>
 10065e0:	00805504 	movi	r2,340
 10065e4:	11000836 	bltu	r2,r4,1006608 <_malloc_r+0x71c>
 10065e8:	2804d3fa 	srli	r2,r5,15
 10065ec:	11001dc4 	addi	r4,r2,119
 10065f0:	200690fa 	slli	r3,r4,3
 10065f4:	003f7306 	br	10063c4 <_malloc_r+0x4d8>
 10065f8:	0104303a 	nor	r2,zero,r4
 10065fc:	388e703a 	and	r7,r7,r2
 1006600:	e1c00115 	stw	r7,4(fp)
 1006604:	003fe906 	br	10065ac <_malloc_r+0x6c0>
 1006608:	00815504 	movi	r2,1364
 100660c:	1100032e 	bgeu	r2,r4,100661c <_malloc_r+0x730>
 1006610:	01001f84 	movi	r4,126
 1006614:	00c0fc04 	movi	r3,1008
 1006618:	003f6a06 	br	10063c4 <_malloc_r+0x4d8>
 100661c:	2804d4ba 	srli	r2,r5,18
 1006620:	11001f04 	addi	r4,r2,124
 1006624:	200690fa 	slli	r3,r4,3
 1006628:	003f6606 	br	10063c4 <_malloc_r+0x4d8>

0100662c <memchr>:
 100662c:	008000c4 	movi	r2,3
 1006630:	29403fcc 	andi	r5,r5,255
 1006634:	2007883a 	mov	r3,r4
 1006638:	1180022e 	bgeu	r2,r6,1006644 <memchr+0x18>
 100663c:	2084703a 	and	r2,r4,r2
 1006640:	10000b26 	beq	r2,zero,1006670 <memchr+0x44>
 1006644:	313fffc4 	addi	r4,r6,-1
 1006648:	3000051e 	bne	r6,zero,1006660 <memchr+0x34>
 100664c:	00002c06 	br	1006700 <memchr+0xd4>
 1006650:	213fffc4 	addi	r4,r4,-1
 1006654:	00bfffc4 	movi	r2,-1
 1006658:	18c00044 	addi	r3,r3,1
 100665c:	20802826 	beq	r4,r2,1006700 <memchr+0xd4>
 1006660:	18800003 	ldbu	r2,0(r3)
 1006664:	28bffa1e 	bne	r5,r2,1006650 <memchr+0x24>
 1006668:	1805883a 	mov	r2,r3
 100666c:	f800283a 	ret
 1006670:	0011883a 	mov	r8,zero
 1006674:	0007883a 	mov	r3,zero
 1006678:	01c00104 	movi	r7,4
 100667c:	4004923a 	slli	r2,r8,8
 1006680:	18c00044 	addi	r3,r3,1
 1006684:	1151883a 	add	r8,r2,r5
 1006688:	19fffc1e 	bne	r3,r7,100667c <memchr+0x50>
 100668c:	02bfbff4 	movhi	r10,65279
 1006690:	52bfbfc4 	addi	r10,r10,-257
 1006694:	02602074 	movhi	r9,32897
 1006698:	4a602004 	addi	r9,r9,-32640
 100669c:	02c000c4 	movi	r11,3
 10066a0:	20800017 	ldw	r2,0(r4)
 10066a4:	31bfff04 	addi	r6,r6,-4
 10066a8:	200f883a 	mov	r7,r4
 10066ac:	1204f03a 	xor	r2,r2,r8
 10066b0:	1287883a 	add	r3,r2,r10
 10066b4:	1a46703a 	and	r3,r3,r9
 10066b8:	0084303a 	nor	r2,zero,r2
 10066bc:	10c4703a 	and	r2,r2,r3
 10066c0:	10000b26 	beq	r2,zero,10066f0 <memchr+0xc4>
 10066c4:	20800003 	ldbu	r2,0(r4)
 10066c8:	28800f26 	beq	r5,r2,1006708 <memchr+0xdc>
 10066cc:	20800043 	ldbu	r2,1(r4)
 10066d0:	21c00044 	addi	r7,r4,1
 10066d4:	28800c26 	beq	r5,r2,1006708 <memchr+0xdc>
 10066d8:	20800083 	ldbu	r2,2(r4)
 10066dc:	21c00084 	addi	r7,r4,2
 10066e0:	28800926 	beq	r5,r2,1006708 <memchr+0xdc>
 10066e4:	208000c3 	ldbu	r2,3(r4)
 10066e8:	21c000c4 	addi	r7,r4,3
 10066ec:	28800626 	beq	r5,r2,1006708 <memchr+0xdc>
 10066f0:	21000104 	addi	r4,r4,4
 10066f4:	59bfea36 	bltu	r11,r6,10066a0 <memchr+0x74>
 10066f8:	2007883a 	mov	r3,r4
 10066fc:	003fd106 	br	1006644 <memchr+0x18>
 1006700:	0005883a 	mov	r2,zero
 1006704:	f800283a 	ret
 1006708:	3805883a 	mov	r2,r7
 100670c:	f800283a 	ret

01006710 <memcpy>:
 1006710:	01c003c4 	movi	r7,15
 1006714:	2007883a 	mov	r3,r4
 1006718:	3980032e 	bgeu	r7,r6,1006728 <memcpy+0x18>
 100671c:	2904b03a 	or	r2,r5,r4
 1006720:	108000cc 	andi	r2,r2,3
 1006724:	10000926 	beq	r2,zero,100674c <memcpy+0x3c>
 1006728:	30000626 	beq	r6,zero,1006744 <memcpy+0x34>
 100672c:	30cd883a 	add	r6,r6,r3
 1006730:	28800003 	ldbu	r2,0(r5)
 1006734:	29400044 	addi	r5,r5,1
 1006738:	18800005 	stb	r2,0(r3)
 100673c:	18c00044 	addi	r3,r3,1
 1006740:	30fffb1e 	bne	r6,r3,1006730 <memcpy+0x20>
 1006744:	2005883a 	mov	r2,r4
 1006748:	f800283a 	ret
 100674c:	3811883a 	mov	r8,r7
 1006750:	200f883a 	mov	r7,r4
 1006754:	28c00017 	ldw	r3,0(r5)
 1006758:	31bffc04 	addi	r6,r6,-16
 100675c:	38c00015 	stw	r3,0(r7)
 1006760:	28800117 	ldw	r2,4(r5)
 1006764:	38800115 	stw	r2,4(r7)
 1006768:	28c00217 	ldw	r3,8(r5)
 100676c:	38c00215 	stw	r3,8(r7)
 1006770:	28800317 	ldw	r2,12(r5)
 1006774:	29400404 	addi	r5,r5,16
 1006778:	38800315 	stw	r2,12(r7)
 100677c:	39c00404 	addi	r7,r7,16
 1006780:	41bff436 	bltu	r8,r6,1006754 <memcpy+0x44>
 1006784:	008000c4 	movi	r2,3
 1006788:	1180072e 	bgeu	r2,r6,10067a8 <memcpy+0x98>
 100678c:	1007883a 	mov	r3,r2
 1006790:	28800017 	ldw	r2,0(r5)
 1006794:	31bfff04 	addi	r6,r6,-4
 1006798:	29400104 	addi	r5,r5,4
 100679c:	38800015 	stw	r2,0(r7)
 10067a0:	39c00104 	addi	r7,r7,4
 10067a4:	19bffa36 	bltu	r3,r6,1006790 <memcpy+0x80>
 10067a8:	3807883a 	mov	r3,r7
 10067ac:	003fde06 	br	1006728 <memcpy+0x18>

010067b0 <memmove>:
 10067b0:	2807883a 	mov	r3,r5
 10067b4:	2011883a 	mov	r8,r4
 10067b8:	29000c2e 	bgeu	r5,r4,10067ec <memmove+0x3c>
 10067bc:	298f883a 	add	r7,r5,r6
 10067c0:	21c00a2e 	bgeu	r4,r7,10067ec <memmove+0x3c>
 10067c4:	30000726 	beq	r6,zero,10067e4 <memmove+0x34>
 10067c8:	2187883a 	add	r3,r4,r6
 10067cc:	198dc83a 	sub	r6,r3,r6
 10067d0:	39ffffc4 	addi	r7,r7,-1
 10067d4:	38800003 	ldbu	r2,0(r7)
 10067d8:	18ffffc4 	addi	r3,r3,-1
 10067dc:	18800005 	stb	r2,0(r3)
 10067e0:	19bffb1e 	bne	r3,r6,10067d0 <memmove+0x20>
 10067e4:	2005883a 	mov	r2,r4
 10067e8:	f800283a 	ret
 10067ec:	01c003c4 	movi	r7,15
 10067f0:	39800a36 	bltu	r7,r6,100681c <memmove+0x6c>
 10067f4:	303ffb26 	beq	r6,zero,10067e4 <memmove+0x34>
 10067f8:	400f883a 	mov	r7,r8
 10067fc:	320d883a 	add	r6,r6,r8
 1006800:	28800003 	ldbu	r2,0(r5)
 1006804:	29400044 	addi	r5,r5,1
 1006808:	38800005 	stb	r2,0(r7)
 100680c:	39c00044 	addi	r7,r7,1
 1006810:	39bffb1e 	bne	r7,r6,1006800 <memmove+0x50>
 1006814:	2005883a 	mov	r2,r4
 1006818:	f800283a 	ret
 100681c:	1904b03a 	or	r2,r3,r4
 1006820:	108000cc 	andi	r2,r2,3
 1006824:	103ff31e 	bne	r2,zero,10067f4 <memmove+0x44>
 1006828:	3811883a 	mov	r8,r7
 100682c:	180b883a 	mov	r5,r3
 1006830:	200f883a 	mov	r7,r4
 1006834:	28c00017 	ldw	r3,0(r5)
 1006838:	31bffc04 	addi	r6,r6,-16
 100683c:	38c00015 	stw	r3,0(r7)
 1006840:	28800117 	ldw	r2,4(r5)
 1006844:	38800115 	stw	r2,4(r7)
 1006848:	28c00217 	ldw	r3,8(r5)
 100684c:	38c00215 	stw	r3,8(r7)
 1006850:	28800317 	ldw	r2,12(r5)
 1006854:	29400404 	addi	r5,r5,16
 1006858:	38800315 	stw	r2,12(r7)
 100685c:	39c00404 	addi	r7,r7,16
 1006860:	41bff436 	bltu	r8,r6,1006834 <memmove+0x84>
 1006864:	008000c4 	movi	r2,3
 1006868:	1180072e 	bgeu	r2,r6,1006888 <memmove+0xd8>
 100686c:	1007883a 	mov	r3,r2
 1006870:	28800017 	ldw	r2,0(r5)
 1006874:	31bfff04 	addi	r6,r6,-4
 1006878:	29400104 	addi	r5,r5,4
 100687c:	38800015 	stw	r2,0(r7)
 1006880:	39c00104 	addi	r7,r7,4
 1006884:	19bffa36 	bltu	r3,r6,1006870 <memmove+0xc0>
 1006888:	3811883a 	mov	r8,r7
 100688c:	003fd906 	br	10067f4 <memmove+0x44>

01006890 <memset>:
 1006890:	008000c4 	movi	r2,3
 1006894:	29403fcc 	andi	r5,r5,255
 1006898:	2007883a 	mov	r3,r4
 100689c:	1180022e 	bgeu	r2,r6,10068a8 <memset+0x18>
 10068a0:	2084703a 	and	r2,r4,r2
 10068a4:	10000826 	beq	r2,zero,10068c8 <memset+0x38>
 10068a8:	30000526 	beq	r6,zero,10068c0 <memset+0x30>
 10068ac:	2805883a 	mov	r2,r5
 10068b0:	30cd883a 	add	r6,r6,r3
 10068b4:	18800005 	stb	r2,0(r3)
 10068b8:	18c00044 	addi	r3,r3,1
 10068bc:	19bffd1e 	bne	r3,r6,10068b4 <memset+0x24>
 10068c0:	2005883a 	mov	r2,r4
 10068c4:	f800283a 	ret
 10068c8:	2804923a 	slli	r2,r5,8
 10068cc:	020003c4 	movi	r8,15
 10068d0:	200f883a 	mov	r7,r4
 10068d4:	2884b03a 	or	r2,r5,r2
 10068d8:	1006943a 	slli	r3,r2,16
 10068dc:	10c6b03a 	or	r3,r2,r3
 10068e0:	41800a2e 	bgeu	r8,r6,100690c <memset+0x7c>
 10068e4:	4005883a 	mov	r2,r8
 10068e8:	31bffc04 	addi	r6,r6,-16
 10068ec:	38c00015 	stw	r3,0(r7)
 10068f0:	38c00115 	stw	r3,4(r7)
 10068f4:	38c00215 	stw	r3,8(r7)
 10068f8:	38c00315 	stw	r3,12(r7)
 10068fc:	39c00404 	addi	r7,r7,16
 1006900:	11bff936 	bltu	r2,r6,10068e8 <memset+0x58>
 1006904:	008000c4 	movi	r2,3
 1006908:	1180052e 	bgeu	r2,r6,1006920 <memset+0x90>
 100690c:	31bfff04 	addi	r6,r6,-4
 1006910:	008000c4 	movi	r2,3
 1006914:	38c00015 	stw	r3,0(r7)
 1006918:	39c00104 	addi	r7,r7,4
 100691c:	11bffb36 	bltu	r2,r6,100690c <memset+0x7c>
 1006920:	3807883a 	mov	r3,r7
 1006924:	003fe006 	br	10068a8 <memset+0x18>

01006928 <_Bfree>:
 1006928:	28000826 	beq	r5,zero,100694c <_Bfree+0x24>
 100692c:	28800117 	ldw	r2,4(r5)
 1006930:	21001317 	ldw	r4,76(r4)
 1006934:	1085883a 	add	r2,r2,r2
 1006938:	1085883a 	add	r2,r2,r2
 100693c:	1105883a 	add	r2,r2,r4
 1006940:	10c00017 	ldw	r3,0(r2)
 1006944:	28c00015 	stw	r3,0(r5)
 1006948:	11400015 	stw	r5,0(r2)
 100694c:	f800283a 	ret

01006950 <__hi0bits>:
 1006950:	20bfffec 	andhi	r2,r4,65535
 1006954:	10001426 	beq	r2,zero,10069a8 <__hi0bits+0x58>
 1006958:	0007883a 	mov	r3,zero
 100695c:	20bfc02c 	andhi	r2,r4,65280
 1006960:	1000021e 	bne	r2,zero,100696c <__hi0bits+0x1c>
 1006964:	2008923a 	slli	r4,r4,8
 1006968:	18c00204 	addi	r3,r3,8
 100696c:	20bc002c 	andhi	r2,r4,61440
 1006970:	1000021e 	bne	r2,zero,100697c <__hi0bits+0x2c>
 1006974:	2008913a 	slli	r4,r4,4
 1006978:	18c00104 	addi	r3,r3,4
 100697c:	20b0002c 	andhi	r2,r4,49152
 1006980:	1000031e 	bne	r2,zero,1006990 <__hi0bits+0x40>
 1006984:	2105883a 	add	r2,r4,r4
 1006988:	18c00084 	addi	r3,r3,2
 100698c:	1089883a 	add	r4,r2,r2
 1006990:	20000316 	blt	r4,zero,10069a0 <__hi0bits+0x50>
 1006994:	2090002c 	andhi	r2,r4,16384
 1006998:	10000626 	beq	r2,zero,10069b4 <__hi0bits+0x64>
 100699c:	18c00044 	addi	r3,r3,1
 10069a0:	1805883a 	mov	r2,r3
 10069a4:	f800283a 	ret
 10069a8:	2008943a 	slli	r4,r4,16
 10069ac:	00c00404 	movi	r3,16
 10069b0:	003fea06 	br	100695c <__hi0bits+0xc>
 10069b4:	00c00804 	movi	r3,32
 10069b8:	1805883a 	mov	r2,r3
 10069bc:	f800283a 	ret

010069c0 <__lo0bits>:
 10069c0:	20c00017 	ldw	r3,0(r4)
 10069c4:	188001cc 	andi	r2,r3,7
 10069c8:	10000a26 	beq	r2,zero,10069f4 <__lo0bits+0x34>
 10069cc:	1880004c 	andi	r2,r3,1
 10069d0:	1005003a 	cmpeq	r2,r2,zero
 10069d4:	10002126 	beq	r2,zero,1006a5c <__lo0bits+0x9c>
 10069d8:	1880008c 	andi	r2,r3,2
 10069dc:	1000251e 	bne	r2,zero,1006a74 <__lo0bits+0xb4>
 10069e0:	1804d0ba 	srli	r2,r3,2
 10069e4:	01400084 	movi	r5,2
 10069e8:	20800015 	stw	r2,0(r4)
 10069ec:	2805883a 	mov	r2,r5
 10069f0:	f800283a 	ret
 10069f4:	18bfffcc 	andi	r2,r3,65535
 10069f8:	10001526 	beq	r2,zero,1006a50 <__lo0bits+0x90>
 10069fc:	000b883a 	mov	r5,zero
 1006a00:	18803fcc 	andi	r2,r3,255
 1006a04:	1000021e 	bne	r2,zero,1006a10 <__lo0bits+0x50>
 1006a08:	1806d23a 	srli	r3,r3,8
 1006a0c:	29400204 	addi	r5,r5,8
 1006a10:	188003cc 	andi	r2,r3,15
 1006a14:	1000021e 	bne	r2,zero,1006a20 <__lo0bits+0x60>
 1006a18:	1806d13a 	srli	r3,r3,4
 1006a1c:	29400104 	addi	r5,r5,4
 1006a20:	188000cc 	andi	r2,r3,3
 1006a24:	1000021e 	bne	r2,zero,1006a30 <__lo0bits+0x70>
 1006a28:	1806d0ba 	srli	r3,r3,2
 1006a2c:	29400084 	addi	r5,r5,2
 1006a30:	1880004c 	andi	r2,r3,1
 1006a34:	1000031e 	bne	r2,zero,1006a44 <__lo0bits+0x84>
 1006a38:	1806d07a 	srli	r3,r3,1
 1006a3c:	18000a26 	beq	r3,zero,1006a68 <__lo0bits+0xa8>
 1006a40:	29400044 	addi	r5,r5,1
 1006a44:	2805883a 	mov	r2,r5
 1006a48:	20c00015 	stw	r3,0(r4)
 1006a4c:	f800283a 	ret
 1006a50:	1806d43a 	srli	r3,r3,16
 1006a54:	01400404 	movi	r5,16
 1006a58:	003fe906 	br	1006a00 <__lo0bits+0x40>
 1006a5c:	000b883a 	mov	r5,zero
 1006a60:	2805883a 	mov	r2,r5
 1006a64:	f800283a 	ret
 1006a68:	01400804 	movi	r5,32
 1006a6c:	2805883a 	mov	r2,r5
 1006a70:	f800283a 	ret
 1006a74:	1804d07a 	srli	r2,r3,1
 1006a78:	01400044 	movi	r5,1
 1006a7c:	20800015 	stw	r2,0(r4)
 1006a80:	003fda06 	br	10069ec <__lo0bits+0x2c>

01006a84 <__mcmp>:
 1006a84:	20800417 	ldw	r2,16(r4)
 1006a88:	28c00417 	ldw	r3,16(r5)
 1006a8c:	10cfc83a 	sub	r7,r2,r3
 1006a90:	38000c1e 	bne	r7,zero,1006ac4 <__mcmp+0x40>
 1006a94:	18c5883a 	add	r2,r3,r3
 1006a98:	1085883a 	add	r2,r2,r2
 1006a9c:	10c00504 	addi	r3,r2,20
 1006aa0:	21000504 	addi	r4,r4,20
 1006aa4:	28cb883a 	add	r5,r5,r3
 1006aa8:	2085883a 	add	r2,r4,r2
 1006aac:	10bfff04 	addi	r2,r2,-4
 1006ab0:	297fff04 	addi	r5,r5,-4
 1006ab4:	11800017 	ldw	r6,0(r2)
 1006ab8:	28c00017 	ldw	r3,0(r5)
 1006abc:	30c0031e 	bne	r6,r3,1006acc <__mcmp+0x48>
 1006ac0:	20bffa36 	bltu	r4,r2,1006aac <__mcmp+0x28>
 1006ac4:	3805883a 	mov	r2,r7
 1006ac8:	f800283a 	ret
 1006acc:	30c00336 	bltu	r6,r3,1006adc <__mcmp+0x58>
 1006ad0:	01c00044 	movi	r7,1
 1006ad4:	3805883a 	mov	r2,r7
 1006ad8:	f800283a 	ret
 1006adc:	01ffffc4 	movi	r7,-1
 1006ae0:	003ff806 	br	1006ac4 <__mcmp+0x40>

01006ae4 <__ulp>:
 1006ae4:	295ffc2c 	andhi	r5,r5,32752
 1006ae8:	013f3034 	movhi	r4,64704
 1006aec:	290b883a 	add	r5,r5,r4
 1006af0:	0145c83a 	sub	r2,zero,r5
 1006af4:	1007d53a 	srai	r3,r2,20
 1006af8:	000d883a 	mov	r6,zero
 1006afc:	0140040e 	bge	zero,r5,1006b10 <__ulp+0x2c>
 1006b00:	280f883a 	mov	r7,r5
 1006b04:	3807883a 	mov	r3,r7
 1006b08:	3005883a 	mov	r2,r6
 1006b0c:	f800283a 	ret
 1006b10:	008004c4 	movi	r2,19
 1006b14:	193ffb04 	addi	r4,r3,-20
 1006b18:	10c00c0e 	bge	r2,r3,1006b4c <__ulp+0x68>
 1006b1c:	008007c4 	movi	r2,31
 1006b20:	1107c83a 	sub	r3,r2,r4
 1006b24:	00800784 	movi	r2,30
 1006b28:	01400044 	movi	r5,1
 1006b2c:	11000216 	blt	r2,r4,1006b38 <__ulp+0x54>
 1006b30:	00800044 	movi	r2,1
 1006b34:	10ca983a 	sll	r5,r2,r3
 1006b38:	000f883a 	mov	r7,zero
 1006b3c:	280d883a 	mov	r6,r5
 1006b40:	3807883a 	mov	r3,r7
 1006b44:	3005883a 	mov	r2,r6
 1006b48:	f800283a 	ret
 1006b4c:	00800234 	movhi	r2,8
 1006b50:	10cfd83a 	sra	r7,r2,r3
 1006b54:	000d883a 	mov	r6,zero
 1006b58:	3005883a 	mov	r2,r6
 1006b5c:	3807883a 	mov	r3,r7
 1006b60:	f800283a 	ret

01006b64 <__b2d>:
 1006b64:	20800417 	ldw	r2,16(r4)
 1006b68:	defff904 	addi	sp,sp,-28
 1006b6c:	dd000415 	stw	r20,16(sp)
 1006b70:	1085883a 	add	r2,r2,r2
 1006b74:	25000504 	addi	r20,r4,20
 1006b78:	1085883a 	add	r2,r2,r2
 1006b7c:	dc000015 	stw	r16,0(sp)
 1006b80:	a0a1883a 	add	r16,r20,r2
 1006b84:	dd400515 	stw	r21,20(sp)
 1006b88:	857fff17 	ldw	r21,-4(r16)
 1006b8c:	dc400115 	stw	r17,4(sp)
 1006b90:	dfc00615 	stw	ra,24(sp)
 1006b94:	a809883a 	mov	r4,r21
 1006b98:	2823883a 	mov	r17,r5
 1006b9c:	dcc00315 	stw	r19,12(sp)
 1006ba0:	dc800215 	stw	r18,8(sp)
 1006ba4:	10069500 	call	1006950 <__hi0bits>
 1006ba8:	100b883a 	mov	r5,r2
 1006bac:	00800804 	movi	r2,32
 1006bb0:	1145c83a 	sub	r2,r2,r5
 1006bb4:	88800015 	stw	r2,0(r17)
 1006bb8:	00800284 	movi	r2,10
 1006bbc:	80ffff04 	addi	r3,r16,-4
 1006bc0:	11401416 	blt	r2,r5,1006c14 <__b2d+0xb0>
 1006bc4:	008002c4 	movi	r2,11
 1006bc8:	1149c83a 	sub	r4,r2,r5
 1006bcc:	a0c02736 	bltu	r20,r3,1006c6c <__b2d+0x108>
 1006bd0:	000d883a 	mov	r6,zero
 1006bd4:	28800544 	addi	r2,r5,21
 1006bd8:	a906d83a 	srl	r3,r21,r4
 1006bdc:	a884983a 	sll	r2,r21,r2
 1006be0:	1ccffc34 	orhi	r19,r3,16368
 1006be4:	11a4b03a 	or	r18,r2,r6
 1006be8:	9005883a 	mov	r2,r18
 1006bec:	9807883a 	mov	r3,r19
 1006bf0:	dfc00617 	ldw	ra,24(sp)
 1006bf4:	dd400517 	ldw	r21,20(sp)
 1006bf8:	dd000417 	ldw	r20,16(sp)
 1006bfc:	dcc00317 	ldw	r19,12(sp)
 1006c00:	dc800217 	ldw	r18,8(sp)
 1006c04:	dc400117 	ldw	r17,4(sp)
 1006c08:	dc000017 	ldw	r16,0(sp)
 1006c0c:	dec00704 	addi	sp,sp,28
 1006c10:	f800283a 	ret
 1006c14:	a0c00e36 	bltu	r20,r3,1006c50 <__b2d+0xec>
 1006c18:	293ffd44 	addi	r4,r5,-11
 1006c1c:	000d883a 	mov	r6,zero
 1006c20:	20000f26 	beq	r4,zero,1006c60 <__b2d+0xfc>
 1006c24:	00800804 	movi	r2,32
 1006c28:	110bc83a 	sub	r5,r2,r4
 1006c2c:	a0c01236 	bltu	r20,r3,1006c78 <__b2d+0x114>
 1006c30:	000f883a 	mov	r7,zero
 1006c34:	a904983a 	sll	r2,r21,r4
 1006c38:	3146d83a 	srl	r3,r6,r5
 1006c3c:	3108983a 	sll	r4,r6,r4
 1006c40:	108ffc34 	orhi	r2,r2,16368
 1006c44:	18a6b03a 	or	r19,r3,r2
 1006c48:	3924b03a 	or	r18,r7,r4
 1006c4c:	003fe606 	br	1006be8 <__b2d+0x84>
 1006c50:	293ffd44 	addi	r4,r5,-11
 1006c54:	81bffe17 	ldw	r6,-8(r16)
 1006c58:	80fffe04 	addi	r3,r16,-8
 1006c5c:	203ff11e 	bne	r4,zero,1006c24 <__b2d+0xc0>
 1006c60:	accffc34 	orhi	r19,r21,16368
 1006c64:	3025883a 	mov	r18,r6
 1006c68:	003fdf06 	br	1006be8 <__b2d+0x84>
 1006c6c:	18bfff17 	ldw	r2,-4(r3)
 1006c70:	110cd83a 	srl	r6,r2,r4
 1006c74:	003fd706 	br	1006bd4 <__b2d+0x70>
 1006c78:	18bfff17 	ldw	r2,-4(r3)
 1006c7c:	114ed83a 	srl	r7,r2,r5
 1006c80:	003fec06 	br	1006c34 <__b2d+0xd0>

01006c84 <__ratio>:
 1006c84:	defff904 	addi	sp,sp,-28
 1006c88:	dc400215 	stw	r17,8(sp)
 1006c8c:	2823883a 	mov	r17,r5
 1006c90:	d80b883a 	mov	r5,sp
 1006c94:	dfc00615 	stw	ra,24(sp)
 1006c98:	dd000515 	stw	r20,20(sp)
 1006c9c:	dcc00415 	stw	r19,16(sp)
 1006ca0:	dc800315 	stw	r18,12(sp)
 1006ca4:	2025883a 	mov	r18,r4
 1006ca8:	1006b640 	call	1006b64 <__b2d>
 1006cac:	8809883a 	mov	r4,r17
 1006cb0:	d9400104 	addi	r5,sp,4
 1006cb4:	1027883a 	mov	r19,r2
 1006cb8:	1829883a 	mov	r20,r3
 1006cbc:	1006b640 	call	1006b64 <__b2d>
 1006cc0:	89000417 	ldw	r4,16(r17)
 1006cc4:	91c00417 	ldw	r7,16(r18)
 1006cc8:	d9800117 	ldw	r6,4(sp)
 1006ccc:	180b883a 	mov	r5,r3
 1006cd0:	390fc83a 	sub	r7,r7,r4
 1006cd4:	1009883a 	mov	r4,r2
 1006cd8:	d8800017 	ldw	r2,0(sp)
 1006cdc:	380e917a 	slli	r7,r7,5
 1006ce0:	2011883a 	mov	r8,r4
 1006ce4:	1185c83a 	sub	r2,r2,r6
 1006ce8:	11c5883a 	add	r2,r2,r7
 1006cec:	1006953a 	slli	r3,r2,20
 1006cf0:	2813883a 	mov	r9,r5
 1006cf4:	00800d0e 	bge	zero,r2,1006d2c <__ratio+0xa8>
 1006cf8:	1d29883a 	add	r20,r3,r20
 1006cfc:	a00b883a 	mov	r5,r20
 1006d00:	480f883a 	mov	r7,r9
 1006d04:	9809883a 	mov	r4,r19
 1006d08:	400d883a 	mov	r6,r8
 1006d0c:	10008ac0 	call	10008ac <__divdf3>
 1006d10:	dfc00617 	ldw	ra,24(sp)
 1006d14:	dd000517 	ldw	r20,20(sp)
 1006d18:	dcc00417 	ldw	r19,16(sp)
 1006d1c:	dc800317 	ldw	r18,12(sp)
 1006d20:	dc400217 	ldw	r17,8(sp)
 1006d24:	dec00704 	addi	sp,sp,28
 1006d28:	f800283a 	ret
 1006d2c:	28d3c83a 	sub	r9,r5,r3
 1006d30:	003ff206 	br	1006cfc <__ratio+0x78>

01006d34 <_mprec_log10>:
 1006d34:	defffe04 	addi	sp,sp,-8
 1006d38:	008005c4 	movi	r2,23
 1006d3c:	dc000015 	stw	r16,0(sp)
 1006d40:	dfc00115 	stw	ra,4(sp)
 1006d44:	2021883a 	mov	r16,r4
 1006d48:	11000c16 	blt	r2,r4,1006d7c <_mprec_log10+0x48>
 1006d4c:	200490fa 	slli	r2,r4,3
 1006d50:	00c04074 	movhi	r3,257
 1006d54:	18f52404 	addi	r3,r3,-11120
 1006d58:	10c5883a 	add	r2,r2,r3
 1006d5c:	12400117 	ldw	r9,4(r2)
 1006d60:	12000017 	ldw	r8,0(r2)
 1006d64:	4807883a 	mov	r3,r9
 1006d68:	4005883a 	mov	r2,r8
 1006d6c:	dfc00117 	ldw	ra,4(sp)
 1006d70:	dc000017 	ldw	r16,0(sp)
 1006d74:	dec00204 	addi	sp,sp,8
 1006d78:	f800283a 	ret
 1006d7c:	0011883a 	mov	r8,zero
 1006d80:	024ffc34 	movhi	r9,16368
 1006d84:	0005883a 	mov	r2,zero
 1006d88:	00d00934 	movhi	r3,16420
 1006d8c:	480b883a 	mov	r5,r9
 1006d90:	4009883a 	mov	r4,r8
 1006d94:	180f883a 	mov	r7,r3
 1006d98:	100d883a 	mov	r6,r2
 1006d9c:	100971c0 	call	100971c <__muldf3>
 1006da0:	843fffc4 	addi	r16,r16,-1
 1006da4:	1011883a 	mov	r8,r2
 1006da8:	1813883a 	mov	r9,r3
 1006dac:	803ff51e 	bne	r16,zero,1006d84 <_mprec_log10+0x50>
 1006db0:	4005883a 	mov	r2,r8
 1006db4:	4807883a 	mov	r3,r9
 1006db8:	dfc00117 	ldw	ra,4(sp)
 1006dbc:	dc000017 	ldw	r16,0(sp)
 1006dc0:	dec00204 	addi	sp,sp,8
 1006dc4:	f800283a 	ret

01006dc8 <__copybits>:
 1006dc8:	297fffc4 	addi	r5,r5,-1
 1006dcc:	30800417 	ldw	r2,16(r6)
 1006dd0:	280bd17a 	srai	r5,r5,5
 1006dd4:	31800504 	addi	r6,r6,20
 1006dd8:	1085883a 	add	r2,r2,r2
 1006ddc:	294b883a 	add	r5,r5,r5
 1006de0:	294b883a 	add	r5,r5,r5
 1006de4:	1085883a 	add	r2,r2,r2
 1006de8:	290b883a 	add	r5,r5,r4
 1006dec:	3087883a 	add	r3,r6,r2
 1006df0:	29400104 	addi	r5,r5,4
 1006df4:	30c0052e 	bgeu	r6,r3,1006e0c <__copybits+0x44>
 1006df8:	30800017 	ldw	r2,0(r6)
 1006dfc:	31800104 	addi	r6,r6,4
 1006e00:	20800015 	stw	r2,0(r4)
 1006e04:	21000104 	addi	r4,r4,4
 1006e08:	30fffb36 	bltu	r6,r3,1006df8 <__copybits+0x30>
 1006e0c:	2140032e 	bgeu	r4,r5,1006e1c <__copybits+0x54>
 1006e10:	20000015 	stw	zero,0(r4)
 1006e14:	21000104 	addi	r4,r4,4
 1006e18:	217ffd36 	bltu	r4,r5,1006e10 <__copybits+0x48>
 1006e1c:	f800283a 	ret

01006e20 <__any_on>:
 1006e20:	20800417 	ldw	r2,16(r4)
 1006e24:	2807d17a 	srai	r3,r5,5
 1006e28:	21000504 	addi	r4,r4,20
 1006e2c:	10c00d0e 	bge	r2,r3,1006e64 <__any_on+0x44>
 1006e30:	1085883a 	add	r2,r2,r2
 1006e34:	1085883a 	add	r2,r2,r2
 1006e38:	208d883a 	add	r6,r4,r2
 1006e3c:	2180182e 	bgeu	r4,r6,1006ea0 <__any_on+0x80>
 1006e40:	30bfff17 	ldw	r2,-4(r6)
 1006e44:	30ffff04 	addi	r3,r6,-4
 1006e48:	1000041e 	bne	r2,zero,1006e5c <__any_on+0x3c>
 1006e4c:	20c0142e 	bgeu	r4,r3,1006ea0 <__any_on+0x80>
 1006e50:	18ffff04 	addi	r3,r3,-4
 1006e54:	18800017 	ldw	r2,0(r3)
 1006e58:	103ffc26 	beq	r2,zero,1006e4c <__any_on+0x2c>
 1006e5c:	00800044 	movi	r2,1
 1006e60:	f800283a 	ret
 1006e64:	18800a0e 	bge	r3,r2,1006e90 <__any_on+0x70>
 1006e68:	294007cc 	andi	r5,r5,31
 1006e6c:	28000826 	beq	r5,zero,1006e90 <__any_on+0x70>
 1006e70:	18c5883a 	add	r2,r3,r3
 1006e74:	1085883a 	add	r2,r2,r2
 1006e78:	208d883a 	add	r6,r4,r2
 1006e7c:	30c00017 	ldw	r3,0(r6)
 1006e80:	1944d83a 	srl	r2,r3,r5
 1006e84:	1144983a 	sll	r2,r2,r5
 1006e88:	18bff41e 	bne	r3,r2,1006e5c <__any_on+0x3c>
 1006e8c:	003feb06 	br	1006e3c <__any_on+0x1c>
 1006e90:	18c5883a 	add	r2,r3,r3
 1006e94:	1085883a 	add	r2,r2,r2
 1006e98:	208d883a 	add	r6,r4,r2
 1006e9c:	003fe706 	br	1006e3c <__any_on+0x1c>
 1006ea0:	0005883a 	mov	r2,zero
 1006ea4:	f800283a 	ret

01006ea8 <_Balloc>:
 1006ea8:	20c01317 	ldw	r3,76(r4)
 1006eac:	defffb04 	addi	sp,sp,-20
 1006eb0:	dcc00315 	stw	r19,12(sp)
 1006eb4:	dc800215 	stw	r18,8(sp)
 1006eb8:	dfc00415 	stw	ra,16(sp)
 1006ebc:	2825883a 	mov	r18,r5
 1006ec0:	dc400115 	stw	r17,4(sp)
 1006ec4:	dc000015 	stw	r16,0(sp)
 1006ec8:	2027883a 	mov	r19,r4
 1006ecc:	01800404 	movi	r6,16
 1006ed0:	01400104 	movi	r5,4
 1006ed4:	18001726 	beq	r3,zero,1006f34 <_Balloc+0x8c>
 1006ed8:	01400044 	movi	r5,1
 1006edc:	9485883a 	add	r2,r18,r18
 1006ee0:	2ca2983a 	sll	r17,r5,r18
 1006ee4:	1085883a 	add	r2,r2,r2
 1006ee8:	10c7883a 	add	r3,r2,r3
 1006eec:	1c000017 	ldw	r16,0(r3)
 1006ef0:	8c4d883a 	add	r6,r17,r17
 1006ef4:	318d883a 	add	r6,r6,r6
 1006ef8:	9809883a 	mov	r4,r19
 1006efc:	31800504 	addi	r6,r6,20
 1006f00:	80001226 	beq	r16,zero,1006f4c <_Balloc+0xa4>
 1006f04:	80800017 	ldw	r2,0(r16)
 1006f08:	18800015 	stw	r2,0(r3)
 1006f0c:	80000415 	stw	zero,16(r16)
 1006f10:	80000315 	stw	zero,12(r16)
 1006f14:	8005883a 	mov	r2,r16
 1006f18:	dfc00417 	ldw	ra,16(sp)
 1006f1c:	dcc00317 	ldw	r19,12(sp)
 1006f20:	dc800217 	ldw	r18,8(sp)
 1006f24:	dc400117 	ldw	r17,4(sp)
 1006f28:	dc000017 	ldw	r16,0(sp)
 1006f2c:	dec00504 	addi	sp,sp,20
 1006f30:	f800283a 	ret
 1006f34:	10082700 	call	1008270 <_calloc_r>
 1006f38:	1007883a 	mov	r3,r2
 1006f3c:	0021883a 	mov	r16,zero
 1006f40:	98801315 	stw	r2,76(r19)
 1006f44:	103fe41e 	bne	r2,zero,1006ed8 <_Balloc+0x30>
 1006f48:	003ff206 	br	1006f14 <_Balloc+0x6c>
 1006f4c:	10082700 	call	1008270 <_calloc_r>
 1006f50:	103ff026 	beq	r2,zero,1006f14 <_Balloc+0x6c>
 1006f54:	1021883a 	mov	r16,r2
 1006f58:	14800115 	stw	r18,4(r2)
 1006f5c:	14400215 	stw	r17,8(r2)
 1006f60:	003fea06 	br	1006f0c <_Balloc+0x64>

01006f64 <__d2b>:
 1006f64:	defff504 	addi	sp,sp,-44
 1006f68:	dcc00515 	stw	r19,20(sp)
 1006f6c:	04c00044 	movi	r19,1
 1006f70:	dc000215 	stw	r16,8(sp)
 1006f74:	2821883a 	mov	r16,r5
 1006f78:	980b883a 	mov	r5,r19
 1006f7c:	ddc00915 	stw	r23,36(sp)
 1006f80:	dd800815 	stw	r22,32(sp)
 1006f84:	dd400715 	stw	r21,28(sp)
 1006f88:	dd000615 	stw	r20,24(sp)
 1006f8c:	dc800415 	stw	r18,16(sp)
 1006f90:	dc400315 	stw	r17,12(sp)
 1006f94:	dfc00a15 	stw	ra,40(sp)
 1006f98:	3023883a 	mov	r17,r6
 1006f9c:	382d883a 	mov	r22,r7
 1006fa0:	ddc00b17 	ldw	r23,44(sp)
 1006fa4:	1006ea80 	call	1006ea8 <_Balloc>
 1006fa8:	1025883a 	mov	r18,r2
 1006fac:	00a00034 	movhi	r2,32768
 1006fb0:	10bfffc4 	addi	r2,r2,-1
 1006fb4:	8888703a 	and	r4,r17,r2
 1006fb8:	202ad53a 	srli	r21,r4,20
 1006fbc:	00800434 	movhi	r2,16
 1006fc0:	10bfffc4 	addi	r2,r2,-1
 1006fc4:	8886703a 	and	r3,r17,r2
 1006fc8:	a829003a 	cmpeq	r20,r21,zero
 1006fcc:	800b883a 	mov	r5,r16
 1006fd0:	d8c00115 	stw	r3,4(sp)
 1006fd4:	94000504 	addi	r16,r18,20
 1006fd8:	a000021e 	bne	r20,zero,1006fe4 <__d2b+0x80>
 1006fdc:	18c00434 	orhi	r3,r3,16
 1006fe0:	d8c00115 	stw	r3,4(sp)
 1006fe4:	28002726 	beq	r5,zero,1007084 <__d2b+0x120>
 1006fe8:	d809883a 	mov	r4,sp
 1006fec:	d9400015 	stw	r5,0(sp)
 1006ff0:	10069c00 	call	10069c0 <__lo0bits>
 1006ff4:	100d883a 	mov	r6,r2
 1006ff8:	10003526 	beq	r2,zero,10070d0 <__d2b+0x16c>
 1006ffc:	d8c00117 	ldw	r3,4(sp)
 1007000:	00800804 	movi	r2,32
 1007004:	1185c83a 	sub	r2,r2,r6
 1007008:	d9000017 	ldw	r4,0(sp)
 100700c:	1886983a 	sll	r3,r3,r2
 1007010:	1906b03a 	or	r3,r3,r4
 1007014:	90c00515 	stw	r3,20(r18)
 1007018:	d8c00117 	ldw	r3,4(sp)
 100701c:	1986d83a 	srl	r3,r3,r6
 1007020:	d8c00115 	stw	r3,4(sp)
 1007024:	180b003a 	cmpeq	r5,r3,zero
 1007028:	00800084 	movi	r2,2
 100702c:	114bc83a 	sub	r5,r2,r5
 1007030:	80c00115 	stw	r3,4(r16)
 1007034:	91400415 	stw	r5,16(r18)
 1007038:	a0001a1e 	bne	r20,zero,10070a4 <__d2b+0x140>
 100703c:	3545883a 	add	r2,r6,r21
 1007040:	10bef344 	addi	r2,r2,-1075
 1007044:	00c00d44 	movi	r3,53
 1007048:	b0800015 	stw	r2,0(r22)
 100704c:	1987c83a 	sub	r3,r3,r6
 1007050:	b8c00015 	stw	r3,0(r23)
 1007054:	9005883a 	mov	r2,r18
 1007058:	dfc00a17 	ldw	ra,40(sp)
 100705c:	ddc00917 	ldw	r23,36(sp)
 1007060:	dd800817 	ldw	r22,32(sp)
 1007064:	dd400717 	ldw	r21,28(sp)
 1007068:	dd000617 	ldw	r20,24(sp)
 100706c:	dcc00517 	ldw	r19,20(sp)
 1007070:	dc800417 	ldw	r18,16(sp)
 1007074:	dc400317 	ldw	r17,12(sp)
 1007078:	dc000217 	ldw	r16,8(sp)
 100707c:	dec00b04 	addi	sp,sp,44
 1007080:	f800283a 	ret
 1007084:	d9000104 	addi	r4,sp,4
 1007088:	10069c00 	call	10069c0 <__lo0bits>
 100708c:	11800804 	addi	r6,r2,32
 1007090:	d8800117 	ldw	r2,4(sp)
 1007094:	94c00415 	stw	r19,16(r18)
 1007098:	980b883a 	mov	r5,r19
 100709c:	90800515 	stw	r2,20(r18)
 10070a0:	a03fe626 	beq	r20,zero,100703c <__d2b+0xd8>
 10070a4:	2945883a 	add	r2,r5,r5
 10070a8:	1085883a 	add	r2,r2,r2
 10070ac:	1405883a 	add	r2,r2,r16
 10070b0:	113fff17 	ldw	r4,-4(r2)
 10070b4:	30fef384 	addi	r3,r6,-1074
 10070b8:	2820917a 	slli	r16,r5,5
 10070bc:	b0c00015 	stw	r3,0(r22)
 10070c0:	10069500 	call	1006950 <__hi0bits>
 10070c4:	80a1c83a 	sub	r16,r16,r2
 10070c8:	bc000015 	stw	r16,0(r23)
 10070cc:	003fe106 	br	1007054 <__d2b+0xf0>
 10070d0:	d8800017 	ldw	r2,0(sp)
 10070d4:	90800515 	stw	r2,20(r18)
 10070d8:	d8c00117 	ldw	r3,4(sp)
 10070dc:	003fd106 	br	1007024 <__d2b+0xc0>

010070e0 <__mdiff>:
 10070e0:	defffb04 	addi	sp,sp,-20
 10070e4:	dc000015 	stw	r16,0(sp)
 10070e8:	2821883a 	mov	r16,r5
 10070ec:	dc800215 	stw	r18,8(sp)
 10070f0:	300b883a 	mov	r5,r6
 10070f4:	2025883a 	mov	r18,r4
 10070f8:	8009883a 	mov	r4,r16
 10070fc:	dc400115 	stw	r17,4(sp)
 1007100:	dfc00415 	stw	ra,16(sp)
 1007104:	dcc00315 	stw	r19,12(sp)
 1007108:	3023883a 	mov	r17,r6
 100710c:	1006a840 	call	1006a84 <__mcmp>
 1007110:	10004226 	beq	r2,zero,100721c <__mdiff+0x13c>
 1007114:	10005016 	blt	r2,zero,1007258 <__mdiff+0x178>
 1007118:	0027883a 	mov	r19,zero
 100711c:	81400117 	ldw	r5,4(r16)
 1007120:	9009883a 	mov	r4,r18
 1007124:	1006ea80 	call	1006ea8 <_Balloc>
 1007128:	1019883a 	mov	r12,r2
 100712c:	82800417 	ldw	r10,16(r16)
 1007130:	88800417 	ldw	r2,16(r17)
 1007134:	81800504 	addi	r6,r16,20
 1007138:	5287883a 	add	r3,r10,r10
 100713c:	1085883a 	add	r2,r2,r2
 1007140:	18c7883a 	add	r3,r3,r3
 1007144:	1085883a 	add	r2,r2,r2
 1007148:	8a000504 	addi	r8,r17,20
 100714c:	64c00315 	stw	r19,12(r12)
 1007150:	30db883a 	add	r13,r6,r3
 1007154:	4097883a 	add	r11,r8,r2
 1007158:	61c00504 	addi	r7,r12,20
 100715c:	0013883a 	mov	r9,zero
 1007160:	31000017 	ldw	r4,0(r6)
 1007164:	41400017 	ldw	r5,0(r8)
 1007168:	42000104 	addi	r8,r8,4
 100716c:	20bfffcc 	andi	r2,r4,65535
 1007170:	28ffffcc 	andi	r3,r5,65535
 1007174:	10c5c83a 	sub	r2,r2,r3
 1007178:	1245883a 	add	r2,r2,r9
 100717c:	2008d43a 	srli	r4,r4,16
 1007180:	280ad43a 	srli	r5,r5,16
 1007184:	1007d43a 	srai	r3,r2,16
 1007188:	3880000d 	sth	r2,0(r7)
 100718c:	2149c83a 	sub	r4,r4,r5
 1007190:	20c9883a 	add	r4,r4,r3
 1007194:	3900008d 	sth	r4,2(r7)
 1007198:	31800104 	addi	r6,r6,4
 100719c:	39c00104 	addi	r7,r7,4
 10071a0:	2013d43a 	srai	r9,r4,16
 10071a4:	42ffee36 	bltu	r8,r11,1007160 <__mdiff+0x80>
 10071a8:	33400c2e 	bgeu	r6,r13,10071dc <__mdiff+0xfc>
 10071ac:	30800017 	ldw	r2,0(r6)
 10071b0:	31800104 	addi	r6,r6,4
 10071b4:	10ffffcc 	andi	r3,r2,65535
 10071b8:	1a47883a 	add	r3,r3,r9
 10071bc:	1004d43a 	srli	r2,r2,16
 10071c0:	1809d43a 	srai	r4,r3,16
 10071c4:	38c0000d 	sth	r3,0(r7)
 10071c8:	1105883a 	add	r2,r2,r4
 10071cc:	3880008d 	sth	r2,2(r7)
 10071d0:	1013d43a 	srai	r9,r2,16
 10071d4:	39c00104 	addi	r7,r7,4
 10071d8:	337ff436 	bltu	r6,r13,10071ac <__mdiff+0xcc>
 10071dc:	38bfff17 	ldw	r2,-4(r7)
 10071e0:	38ffff04 	addi	r3,r7,-4
 10071e4:	1000041e 	bne	r2,zero,10071f8 <__mdiff+0x118>
 10071e8:	18ffff04 	addi	r3,r3,-4
 10071ec:	18800017 	ldw	r2,0(r3)
 10071f0:	52bfffc4 	addi	r10,r10,-1
 10071f4:	103ffc26 	beq	r2,zero,10071e8 <__mdiff+0x108>
 10071f8:	6005883a 	mov	r2,r12
 10071fc:	62800415 	stw	r10,16(r12)
 1007200:	dfc00417 	ldw	ra,16(sp)
 1007204:	dcc00317 	ldw	r19,12(sp)
 1007208:	dc800217 	ldw	r18,8(sp)
 100720c:	dc400117 	ldw	r17,4(sp)
 1007210:	dc000017 	ldw	r16,0(sp)
 1007214:	dec00504 	addi	sp,sp,20
 1007218:	f800283a 	ret
 100721c:	9009883a 	mov	r4,r18
 1007220:	000b883a 	mov	r5,zero
 1007224:	1006ea80 	call	1006ea8 <_Balloc>
 1007228:	1019883a 	mov	r12,r2
 100722c:	00800044 	movi	r2,1
 1007230:	60800415 	stw	r2,16(r12)
 1007234:	6005883a 	mov	r2,r12
 1007238:	60000515 	stw	zero,20(r12)
 100723c:	dfc00417 	ldw	ra,16(sp)
 1007240:	dcc00317 	ldw	r19,12(sp)
 1007244:	dc800217 	ldw	r18,8(sp)
 1007248:	dc400117 	ldw	r17,4(sp)
 100724c:	dc000017 	ldw	r16,0(sp)
 1007250:	dec00504 	addi	sp,sp,20
 1007254:	f800283a 	ret
 1007258:	880d883a 	mov	r6,r17
 100725c:	04c00044 	movi	r19,1
 1007260:	8023883a 	mov	r17,r16
 1007264:	3021883a 	mov	r16,r6
 1007268:	003fac06 	br	100711c <__mdiff+0x3c>

0100726c <__lshift>:
 100726c:	defff904 	addi	sp,sp,-28
 1007270:	28800417 	ldw	r2,16(r5)
 1007274:	dc000015 	stw	r16,0(sp)
 1007278:	3021d17a 	srai	r16,r6,5
 100727c:	28c00217 	ldw	r3,8(r5)
 1007280:	10800044 	addi	r2,r2,1
 1007284:	dc400115 	stw	r17,4(sp)
 1007288:	80a3883a 	add	r17,r16,r2
 100728c:	dd400515 	stw	r21,20(sp)
 1007290:	dd000415 	stw	r20,16(sp)
 1007294:	dc800215 	stw	r18,8(sp)
 1007298:	dfc00615 	stw	ra,24(sp)
 100729c:	2825883a 	mov	r18,r5
 10072a0:	dcc00315 	stw	r19,12(sp)
 10072a4:	3029883a 	mov	r20,r6
 10072a8:	202b883a 	mov	r21,r4
 10072ac:	29400117 	ldw	r5,4(r5)
 10072b0:	1c40030e 	bge	r3,r17,10072c0 <__lshift+0x54>
 10072b4:	18c7883a 	add	r3,r3,r3
 10072b8:	29400044 	addi	r5,r5,1
 10072bc:	1c7ffd16 	blt	r3,r17,10072b4 <__lshift+0x48>
 10072c0:	a809883a 	mov	r4,r21
 10072c4:	1006ea80 	call	1006ea8 <_Balloc>
 10072c8:	1027883a 	mov	r19,r2
 10072cc:	11400504 	addi	r5,r2,20
 10072d0:	0400090e 	bge	zero,r16,10072f8 <__lshift+0x8c>
 10072d4:	2805883a 	mov	r2,r5
 10072d8:	0007883a 	mov	r3,zero
 10072dc:	18c00044 	addi	r3,r3,1
 10072e0:	10000015 	stw	zero,0(r2)
 10072e4:	10800104 	addi	r2,r2,4
 10072e8:	80fffc1e 	bne	r16,r3,10072dc <__lshift+0x70>
 10072ec:	8405883a 	add	r2,r16,r16
 10072f0:	1085883a 	add	r2,r2,r2
 10072f4:	288b883a 	add	r5,r5,r2
 10072f8:	90800417 	ldw	r2,16(r18)
 10072fc:	91000504 	addi	r4,r18,20
 1007300:	a18007cc 	andi	r6,r20,31
 1007304:	1085883a 	add	r2,r2,r2
 1007308:	1085883a 	add	r2,r2,r2
 100730c:	208f883a 	add	r7,r4,r2
 1007310:	30001e26 	beq	r6,zero,100738c <__lshift+0x120>
 1007314:	00800804 	movi	r2,32
 1007318:	1191c83a 	sub	r8,r2,r6
 100731c:	0007883a 	mov	r3,zero
 1007320:	20800017 	ldw	r2,0(r4)
 1007324:	1184983a 	sll	r2,r2,r6
 1007328:	1884b03a 	or	r2,r3,r2
 100732c:	28800015 	stw	r2,0(r5)
 1007330:	20c00017 	ldw	r3,0(r4)
 1007334:	21000104 	addi	r4,r4,4
 1007338:	29400104 	addi	r5,r5,4
 100733c:	1a06d83a 	srl	r3,r3,r8
 1007340:	21fff736 	bltu	r4,r7,1007320 <__lshift+0xb4>
 1007344:	28c00015 	stw	r3,0(r5)
 1007348:	18000126 	beq	r3,zero,1007350 <__lshift+0xe4>
 100734c:	8c400044 	addi	r17,r17,1
 1007350:	88bfffc4 	addi	r2,r17,-1
 1007354:	98800415 	stw	r2,16(r19)
 1007358:	a809883a 	mov	r4,r21
 100735c:	900b883a 	mov	r5,r18
 1007360:	10069280 	call	1006928 <_Bfree>
 1007364:	9805883a 	mov	r2,r19
 1007368:	dfc00617 	ldw	ra,24(sp)
 100736c:	dd400517 	ldw	r21,20(sp)
 1007370:	dd000417 	ldw	r20,16(sp)
 1007374:	dcc00317 	ldw	r19,12(sp)
 1007378:	dc800217 	ldw	r18,8(sp)
 100737c:	dc400117 	ldw	r17,4(sp)
 1007380:	dc000017 	ldw	r16,0(sp)
 1007384:	dec00704 	addi	sp,sp,28
 1007388:	f800283a 	ret
 100738c:	20800017 	ldw	r2,0(r4)
 1007390:	21000104 	addi	r4,r4,4
 1007394:	28800015 	stw	r2,0(r5)
 1007398:	29400104 	addi	r5,r5,4
 100739c:	21ffec2e 	bgeu	r4,r7,1007350 <__lshift+0xe4>
 10073a0:	20800017 	ldw	r2,0(r4)
 10073a4:	21000104 	addi	r4,r4,4
 10073a8:	28800015 	stw	r2,0(r5)
 10073ac:	29400104 	addi	r5,r5,4
 10073b0:	21fff636 	bltu	r4,r7,100738c <__lshift+0x120>
 10073b4:	003fe606 	br	1007350 <__lshift+0xe4>

010073b8 <__multiply>:
 10073b8:	defff904 	addi	sp,sp,-28
 10073bc:	dcc00315 	stw	r19,12(sp)
 10073c0:	dc800215 	stw	r18,8(sp)
 10073c4:	2cc00417 	ldw	r19,16(r5)
 10073c8:	34800417 	ldw	r18,16(r6)
 10073cc:	dd000415 	stw	r20,16(sp)
 10073d0:	dc400115 	stw	r17,4(sp)
 10073d4:	dfc00615 	stw	ra,24(sp)
 10073d8:	dd400515 	stw	r21,20(sp)
 10073dc:	dc000015 	stw	r16,0(sp)
 10073e0:	2823883a 	mov	r17,r5
 10073e4:	3029883a 	mov	r20,r6
 10073e8:	9c80040e 	bge	r19,r18,10073fc <__multiply+0x44>
 10073ec:	9027883a 	mov	r19,r18
 10073f0:	2c800417 	ldw	r18,16(r5)
 10073f4:	2829883a 	mov	r20,r5
 10073f8:	3023883a 	mov	r17,r6
 10073fc:	88800217 	ldw	r2,8(r17)
 1007400:	9ca1883a 	add	r16,r19,r18
 1007404:	89400117 	ldw	r5,4(r17)
 1007408:	1400010e 	bge	r2,r16,1007410 <__multiply+0x58>
 100740c:	29400044 	addi	r5,r5,1
 1007410:	1006ea80 	call	1006ea8 <_Balloc>
 1007414:	102b883a 	mov	r21,r2
 1007418:	8405883a 	add	r2,r16,r16
 100741c:	1085883a 	add	r2,r2,r2
 1007420:	a9000504 	addi	r4,r21,20
 1007424:	209d883a 	add	r14,r4,r2
 1007428:	2380042e 	bgeu	r4,r14,100743c <__multiply+0x84>
 100742c:	2005883a 	mov	r2,r4
 1007430:	10000015 	stw	zero,0(r2)
 1007434:	10800104 	addi	r2,r2,4
 1007438:	13bffd36 	bltu	r2,r14,1007430 <__multiply+0x78>
 100743c:	9485883a 	add	r2,r18,r18
 1007440:	9cc7883a 	add	r3,r19,r19
 1007444:	a1800504 	addi	r6,r20,20
 1007448:	1085883a 	add	r2,r2,r2
 100744c:	8b400504 	addi	r13,r17,20
 1007450:	18c7883a 	add	r3,r3,r3
 1007454:	309f883a 	add	r15,r6,r2
 1007458:	68d7883a 	add	r11,r13,r3
 100745c:	33c03b2e 	bgeu	r6,r15,100754c <__multiply+0x194>
 1007460:	2019883a 	mov	r12,r4
 1007464:	30800017 	ldw	r2,0(r6)
 1007468:	127fffcc 	andi	r9,r2,65535
 100746c:	48001826 	beq	r9,zero,10074d0 <__multiply+0x118>
 1007470:	6811883a 	mov	r8,r13
 1007474:	600f883a 	mov	r7,r12
 1007478:	0015883a 	mov	r10,zero
 100747c:	40c00017 	ldw	r3,0(r8)
 1007480:	39400017 	ldw	r5,0(r7)
 1007484:	42000104 	addi	r8,r8,4
 1007488:	193fffcc 	andi	r4,r3,65535
 100748c:	4909383a 	mul	r4,r9,r4
 1007490:	1806d43a 	srli	r3,r3,16
 1007494:	28bfffcc 	andi	r2,r5,65535
 1007498:	5085883a 	add	r2,r10,r2
 100749c:	2089883a 	add	r4,r4,r2
 10074a0:	48c7383a 	mul	r3,r9,r3
 10074a4:	280ad43a 	srli	r5,r5,16
 10074a8:	2004d43a 	srli	r2,r4,16
 10074ac:	3900000d 	sth	r4,0(r7)
 10074b0:	1947883a 	add	r3,r3,r5
 10074b4:	10c5883a 	add	r2,r2,r3
 10074b8:	3880008d 	sth	r2,2(r7)
 10074bc:	1014d43a 	srli	r10,r2,16
 10074c0:	39c00104 	addi	r7,r7,4
 10074c4:	42ffed36 	bltu	r8,r11,100747c <__multiply+0xc4>
 10074c8:	3a800015 	stw	r10,0(r7)
 10074cc:	30800017 	ldw	r2,0(r6)
 10074d0:	1012d43a 	srli	r9,r2,16
 10074d4:	48001926 	beq	r9,zero,100753c <__multiply+0x184>
 10074d8:	60800017 	ldw	r2,0(r12)
 10074dc:	6811883a 	mov	r8,r13
 10074e0:	600f883a 	mov	r7,r12
 10074e4:	0015883a 	mov	r10,zero
 10074e8:	100b883a 	mov	r5,r2
 10074ec:	41000017 	ldw	r4,0(r8)
 10074f0:	2806d43a 	srli	r3,r5,16
 10074f4:	3880000d 	sth	r2,0(r7)
 10074f8:	20bfffcc 	andi	r2,r4,65535
 10074fc:	4885383a 	mul	r2,r9,r2
 1007500:	50c7883a 	add	r3,r10,r3
 1007504:	2008d43a 	srli	r4,r4,16
 1007508:	10c5883a 	add	r2,r2,r3
 100750c:	3880008d 	sth	r2,2(r7)
 1007510:	39c00104 	addi	r7,r7,4
 1007514:	39400017 	ldw	r5,0(r7)
 1007518:	4909383a 	mul	r4,r9,r4
 100751c:	1004d43a 	srli	r2,r2,16
 1007520:	28ffffcc 	andi	r3,r5,65535
 1007524:	20c9883a 	add	r4,r4,r3
 1007528:	1105883a 	add	r2,r2,r4
 100752c:	42000104 	addi	r8,r8,4
 1007530:	1014d43a 	srli	r10,r2,16
 1007534:	42ffed36 	bltu	r8,r11,10074ec <__multiply+0x134>
 1007538:	38800015 	stw	r2,0(r7)
 100753c:	31800104 	addi	r6,r6,4
 1007540:	33c0022e 	bgeu	r6,r15,100754c <__multiply+0x194>
 1007544:	63000104 	addi	r12,r12,4
 1007548:	003fc606 	br	1007464 <__multiply+0xac>
 100754c:	0400090e 	bge	zero,r16,1007574 <__multiply+0x1bc>
 1007550:	70bfff17 	ldw	r2,-4(r14)
 1007554:	70ffff04 	addi	r3,r14,-4
 1007558:	10000326 	beq	r2,zero,1007568 <__multiply+0x1b0>
 100755c:	00000506 	br	1007574 <__multiply+0x1bc>
 1007560:	18800017 	ldw	r2,0(r3)
 1007564:	1000031e 	bne	r2,zero,1007574 <__multiply+0x1bc>
 1007568:	843fffc4 	addi	r16,r16,-1
 100756c:	18ffff04 	addi	r3,r3,-4
 1007570:	803ffb1e 	bne	r16,zero,1007560 <__multiply+0x1a8>
 1007574:	a805883a 	mov	r2,r21
 1007578:	ac000415 	stw	r16,16(r21)
 100757c:	dfc00617 	ldw	ra,24(sp)
 1007580:	dd400517 	ldw	r21,20(sp)
 1007584:	dd000417 	ldw	r20,16(sp)
 1007588:	dcc00317 	ldw	r19,12(sp)
 100758c:	dc800217 	ldw	r18,8(sp)
 1007590:	dc400117 	ldw	r17,4(sp)
 1007594:	dc000017 	ldw	r16,0(sp)
 1007598:	dec00704 	addi	sp,sp,28
 100759c:	f800283a 	ret

010075a0 <__i2b>:
 10075a0:	defffd04 	addi	sp,sp,-12
 10075a4:	dc000015 	stw	r16,0(sp)
 10075a8:	04000044 	movi	r16,1
 10075ac:	dc800115 	stw	r18,4(sp)
 10075b0:	2825883a 	mov	r18,r5
 10075b4:	800b883a 	mov	r5,r16
 10075b8:	dfc00215 	stw	ra,8(sp)
 10075bc:	1006ea80 	call	1006ea8 <_Balloc>
 10075c0:	14000415 	stw	r16,16(r2)
 10075c4:	14800515 	stw	r18,20(r2)
 10075c8:	dfc00217 	ldw	ra,8(sp)
 10075cc:	dc800117 	ldw	r18,4(sp)
 10075d0:	dc000017 	ldw	r16,0(sp)
 10075d4:	dec00304 	addi	sp,sp,12
 10075d8:	f800283a 	ret

010075dc <__multadd>:
 10075dc:	defffa04 	addi	sp,sp,-24
 10075e0:	dc800215 	stw	r18,8(sp)
 10075e4:	2c800417 	ldw	r18,16(r5)
 10075e8:	dd000415 	stw	r20,16(sp)
 10075ec:	dcc00315 	stw	r19,12(sp)
 10075f0:	dc000015 	stw	r16,0(sp)
 10075f4:	dfc00515 	stw	ra,20(sp)
 10075f8:	3821883a 	mov	r16,r7
 10075fc:	dc400115 	stw	r17,4(sp)
 1007600:	2827883a 	mov	r19,r5
 1007604:	2029883a 	mov	r20,r4
 1007608:	2a000504 	addi	r8,r5,20
 100760c:	000f883a 	mov	r7,zero
 1007610:	40800017 	ldw	r2,0(r8)
 1007614:	39c00044 	addi	r7,r7,1
 1007618:	10ffffcc 	andi	r3,r2,65535
 100761c:	1987383a 	mul	r3,r3,r6
 1007620:	1004d43a 	srli	r2,r2,16
 1007624:	1c07883a 	add	r3,r3,r16
 1007628:	180ad43a 	srli	r5,r3,16
 100762c:	1185383a 	mul	r2,r2,r6
 1007630:	18ffffcc 	andi	r3,r3,65535
 1007634:	1145883a 	add	r2,r2,r5
 1007638:	1008943a 	slli	r4,r2,16
 100763c:	1020d43a 	srli	r16,r2,16
 1007640:	20c9883a 	add	r4,r4,r3
 1007644:	41000015 	stw	r4,0(r8)
 1007648:	42000104 	addi	r8,r8,4
 100764c:	3cbff016 	blt	r7,r18,1007610 <__multadd+0x34>
 1007650:	80000826 	beq	r16,zero,1007674 <__multadd+0x98>
 1007654:	98800217 	ldw	r2,8(r19)
 1007658:	90800f0e 	bge	r18,r2,1007698 <__multadd+0xbc>
 100765c:	9485883a 	add	r2,r18,r18
 1007660:	1085883a 	add	r2,r2,r2
 1007664:	14c5883a 	add	r2,r2,r19
 1007668:	90c00044 	addi	r3,r18,1
 100766c:	14000515 	stw	r16,20(r2)
 1007670:	98c00415 	stw	r3,16(r19)
 1007674:	9805883a 	mov	r2,r19
 1007678:	dfc00517 	ldw	ra,20(sp)
 100767c:	dd000417 	ldw	r20,16(sp)
 1007680:	dcc00317 	ldw	r19,12(sp)
 1007684:	dc800217 	ldw	r18,8(sp)
 1007688:	dc400117 	ldw	r17,4(sp)
 100768c:	dc000017 	ldw	r16,0(sp)
 1007690:	dec00604 	addi	sp,sp,24
 1007694:	f800283a 	ret
 1007698:	99400117 	ldw	r5,4(r19)
 100769c:	a009883a 	mov	r4,r20
 10076a0:	29400044 	addi	r5,r5,1
 10076a4:	1006ea80 	call	1006ea8 <_Balloc>
 10076a8:	99800417 	ldw	r6,16(r19)
 10076ac:	99400304 	addi	r5,r19,12
 10076b0:	11000304 	addi	r4,r2,12
 10076b4:	318d883a 	add	r6,r6,r6
 10076b8:	318d883a 	add	r6,r6,r6
 10076bc:	31800204 	addi	r6,r6,8
 10076c0:	1023883a 	mov	r17,r2
 10076c4:	10067100 	call	1006710 <memcpy>
 10076c8:	980b883a 	mov	r5,r19
 10076cc:	a009883a 	mov	r4,r20
 10076d0:	10069280 	call	1006928 <_Bfree>
 10076d4:	8827883a 	mov	r19,r17
 10076d8:	003fe006 	br	100765c <__multadd+0x80>

010076dc <__pow5mult>:
 10076dc:	defffa04 	addi	sp,sp,-24
 10076e0:	308000cc 	andi	r2,r6,3
 10076e4:	dd000415 	stw	r20,16(sp)
 10076e8:	dcc00315 	stw	r19,12(sp)
 10076ec:	dc000015 	stw	r16,0(sp)
 10076f0:	dfc00515 	stw	ra,20(sp)
 10076f4:	dc800215 	stw	r18,8(sp)
 10076f8:	dc400115 	stw	r17,4(sp)
 10076fc:	3021883a 	mov	r16,r6
 1007700:	2027883a 	mov	r19,r4
 1007704:	2829883a 	mov	r20,r5
 1007708:	10002b1e 	bne	r2,zero,10077b8 <__pow5mult+0xdc>
 100770c:	8025d0ba 	srai	r18,r16,2
 1007710:	90001b26 	beq	r18,zero,1007780 <__pow5mult+0xa4>
 1007714:	9c001217 	ldw	r16,72(r19)
 1007718:	8000081e 	bne	r16,zero,100773c <__pow5mult+0x60>
 100771c:	00003006 	br	10077e0 <__pow5mult+0x104>
 1007720:	800b883a 	mov	r5,r16
 1007724:	800d883a 	mov	r6,r16
 1007728:	9809883a 	mov	r4,r19
 100772c:	90001426 	beq	r18,zero,1007780 <__pow5mult+0xa4>
 1007730:	80800017 	ldw	r2,0(r16)
 1007734:	10001b26 	beq	r2,zero,10077a4 <__pow5mult+0xc8>
 1007738:	1021883a 	mov	r16,r2
 100773c:	9080004c 	andi	r2,r18,1
 1007740:	1005003a 	cmpeq	r2,r2,zero
 1007744:	9025d07a 	srai	r18,r18,1
 1007748:	800d883a 	mov	r6,r16
 100774c:	9809883a 	mov	r4,r19
 1007750:	a00b883a 	mov	r5,r20
 1007754:	103ff21e 	bne	r2,zero,1007720 <__pow5mult+0x44>
 1007758:	10073b80 	call	10073b8 <__multiply>
 100775c:	a00b883a 	mov	r5,r20
 1007760:	9809883a 	mov	r4,r19
 1007764:	1023883a 	mov	r17,r2
 1007768:	10069280 	call	1006928 <_Bfree>
 100776c:	8829883a 	mov	r20,r17
 1007770:	800b883a 	mov	r5,r16
 1007774:	800d883a 	mov	r6,r16
 1007778:	9809883a 	mov	r4,r19
 100777c:	903fec1e 	bne	r18,zero,1007730 <__pow5mult+0x54>
 1007780:	a005883a 	mov	r2,r20
 1007784:	dfc00517 	ldw	ra,20(sp)
 1007788:	dd000417 	ldw	r20,16(sp)
 100778c:	dcc00317 	ldw	r19,12(sp)
 1007790:	dc800217 	ldw	r18,8(sp)
 1007794:	dc400117 	ldw	r17,4(sp)
 1007798:	dc000017 	ldw	r16,0(sp)
 100779c:	dec00604 	addi	sp,sp,24
 10077a0:	f800283a 	ret
 10077a4:	10073b80 	call	10073b8 <__multiply>
 10077a8:	80800015 	stw	r2,0(r16)
 10077ac:	1021883a 	mov	r16,r2
 10077b0:	10000015 	stw	zero,0(r2)
 10077b4:	003fe106 	br	100773c <__pow5mult+0x60>
 10077b8:	1085883a 	add	r2,r2,r2
 10077bc:	00c04074 	movhi	r3,257
 10077c0:	18f56a04 	addi	r3,r3,-10840
 10077c4:	1085883a 	add	r2,r2,r2
 10077c8:	10c5883a 	add	r2,r2,r3
 10077cc:	11bfff17 	ldw	r6,-4(r2)
 10077d0:	000f883a 	mov	r7,zero
 10077d4:	10075dc0 	call	10075dc <__multadd>
 10077d8:	1029883a 	mov	r20,r2
 10077dc:	003fcb06 	br	100770c <__pow5mult+0x30>
 10077e0:	9809883a 	mov	r4,r19
 10077e4:	01409c44 	movi	r5,625
 10077e8:	10075a00 	call	10075a0 <__i2b>
 10077ec:	98801215 	stw	r2,72(r19)
 10077f0:	1021883a 	mov	r16,r2
 10077f4:	10000015 	stw	zero,0(r2)
 10077f8:	003fd006 	br	100773c <__pow5mult+0x60>

010077fc <__s2b>:
 10077fc:	defff904 	addi	sp,sp,-28
 1007800:	dcc00315 	stw	r19,12(sp)
 1007804:	dc800215 	stw	r18,8(sp)
 1007808:	2827883a 	mov	r19,r5
 100780c:	2025883a 	mov	r18,r4
 1007810:	01400244 	movi	r5,9
 1007814:	39000204 	addi	r4,r7,8
 1007818:	dd000415 	stw	r20,16(sp)
 100781c:	dc400115 	stw	r17,4(sp)
 1007820:	dfc00615 	stw	ra,24(sp)
 1007824:	dd400515 	stw	r21,20(sp)
 1007828:	dc000015 	stw	r16,0(sp)
 100782c:	3829883a 	mov	r20,r7
 1007830:	3023883a 	mov	r17,r6
 1007834:	1009e880 	call	1009e88 <__divsi3>
 1007838:	00c00044 	movi	r3,1
 100783c:	1880350e 	bge	r3,r2,1007914 <__s2b+0x118>
 1007840:	000b883a 	mov	r5,zero
 1007844:	18c7883a 	add	r3,r3,r3
 1007848:	29400044 	addi	r5,r5,1
 100784c:	18bffd16 	blt	r3,r2,1007844 <__s2b+0x48>
 1007850:	9009883a 	mov	r4,r18
 1007854:	1006ea80 	call	1006ea8 <_Balloc>
 1007858:	1011883a 	mov	r8,r2
 100785c:	d8800717 	ldw	r2,28(sp)
 1007860:	00c00044 	movi	r3,1
 1007864:	01800244 	movi	r6,9
 1007868:	40800515 	stw	r2,20(r8)
 100786c:	40c00415 	stw	r3,16(r8)
 1007870:	3440260e 	bge	r6,r17,100790c <__s2b+0x110>
 1007874:	3021883a 	mov	r16,r6
 1007878:	99ab883a 	add	r21,r19,r6
 100787c:	9c05883a 	add	r2,r19,r16
 1007880:	11c00007 	ldb	r7,0(r2)
 1007884:	400b883a 	mov	r5,r8
 1007888:	9009883a 	mov	r4,r18
 100788c:	39fff404 	addi	r7,r7,-48
 1007890:	01800284 	movi	r6,10
 1007894:	10075dc0 	call	10075dc <__multadd>
 1007898:	84000044 	addi	r16,r16,1
 100789c:	1011883a 	mov	r8,r2
 10078a0:	8c3ff61e 	bne	r17,r16,100787c <__s2b+0x80>
 10078a4:	ac45883a 	add	r2,r21,r17
 10078a8:	117ffe04 	addi	r5,r2,-8
 10078ac:	880d883a 	mov	r6,r17
 10078b0:	35000c0e 	bge	r6,r20,10078e4 <__s2b+0xe8>
 10078b4:	a185c83a 	sub	r2,r20,r6
 10078b8:	2821883a 	mov	r16,r5
 10078bc:	28a3883a 	add	r17,r5,r2
 10078c0:	81c00007 	ldb	r7,0(r16)
 10078c4:	400b883a 	mov	r5,r8
 10078c8:	9009883a 	mov	r4,r18
 10078cc:	39fff404 	addi	r7,r7,-48
 10078d0:	01800284 	movi	r6,10
 10078d4:	10075dc0 	call	10075dc <__multadd>
 10078d8:	84000044 	addi	r16,r16,1
 10078dc:	1011883a 	mov	r8,r2
 10078e0:	847ff71e 	bne	r16,r17,10078c0 <__s2b+0xc4>
 10078e4:	4005883a 	mov	r2,r8
 10078e8:	dfc00617 	ldw	ra,24(sp)
 10078ec:	dd400517 	ldw	r21,20(sp)
 10078f0:	dd000417 	ldw	r20,16(sp)
 10078f4:	dcc00317 	ldw	r19,12(sp)
 10078f8:	dc800217 	ldw	r18,8(sp)
 10078fc:	dc400117 	ldw	r17,4(sp)
 1007900:	dc000017 	ldw	r16,0(sp)
 1007904:	dec00704 	addi	sp,sp,28
 1007908:	f800283a 	ret
 100790c:	99400284 	addi	r5,r19,10
 1007910:	003fe706 	br	10078b0 <__s2b+0xb4>
 1007914:	000b883a 	mov	r5,zero
 1007918:	003fcd06 	br	1007850 <__s2b+0x54>

0100791c <_realloc_r>:
 100791c:	defff404 	addi	sp,sp,-48
 1007920:	dd800815 	stw	r22,32(sp)
 1007924:	dc800415 	stw	r18,16(sp)
 1007928:	dc400315 	stw	r17,12(sp)
 100792c:	dfc00b15 	stw	ra,44(sp)
 1007930:	df000a15 	stw	fp,40(sp)
 1007934:	ddc00915 	stw	r23,36(sp)
 1007938:	dd400715 	stw	r21,28(sp)
 100793c:	dd000615 	stw	r20,24(sp)
 1007940:	dcc00515 	stw	r19,20(sp)
 1007944:	dc000215 	stw	r16,8(sp)
 1007948:	2825883a 	mov	r18,r5
 100794c:	3023883a 	mov	r17,r6
 1007950:	202d883a 	mov	r22,r4
 1007954:	2800c926 	beq	r5,zero,1007c7c <_realloc_r+0x360>
 1007958:	100a6740 	call	100a674 <__malloc_lock>
 100795c:	943ffe04 	addi	r16,r18,-8
 1007960:	88c002c4 	addi	r3,r17,11
 1007964:	00800584 	movi	r2,22
 1007968:	82000117 	ldw	r8,4(r16)
 100796c:	10c01b2e 	bgeu	r2,r3,10079dc <_realloc_r+0xc0>
 1007970:	00bffe04 	movi	r2,-8
 1007974:	188e703a 	and	r7,r3,r2
 1007978:	3839883a 	mov	fp,r7
 100797c:	38001a16 	blt	r7,zero,10079e8 <_realloc_r+0xcc>
 1007980:	e4401936 	bltu	fp,r17,10079e8 <_realloc_r+0xcc>
 1007984:	013fff04 	movi	r4,-4
 1007988:	4126703a 	and	r19,r8,r4
 100798c:	99c02616 	blt	r19,r7,1007a28 <_realloc_r+0x10c>
 1007990:	802b883a 	mov	r21,r16
 1007994:	9829883a 	mov	r20,r19
 1007998:	84000204 	addi	r16,r16,8
 100799c:	a80f883a 	mov	r7,r21
 10079a0:	a70dc83a 	sub	r6,r20,fp
 10079a4:	008003c4 	movi	r2,15
 10079a8:	1180c136 	bltu	r2,r6,1007cb0 <_realloc_r+0x394>
 10079ac:	38800117 	ldw	r2,4(r7)
 10079b0:	a549883a 	add	r4,r20,r21
 10079b4:	1080004c 	andi	r2,r2,1
 10079b8:	a084b03a 	or	r2,r20,r2
 10079bc:	38800115 	stw	r2,4(r7)
 10079c0:	20c00117 	ldw	r3,4(r4)
 10079c4:	18c00054 	ori	r3,r3,1
 10079c8:	20c00115 	stw	r3,4(r4)
 10079cc:	b009883a 	mov	r4,r22
 10079d0:	100a6940 	call	100a694 <__malloc_unlock>
 10079d4:	8023883a 	mov	r17,r16
 10079d8:	00000606 	br	10079f4 <_realloc_r+0xd8>
 10079dc:	01c00404 	movi	r7,16
 10079e0:	3839883a 	mov	fp,r7
 10079e4:	e47fe72e 	bgeu	fp,r17,1007984 <_realloc_r+0x68>
 10079e8:	00800304 	movi	r2,12
 10079ec:	0023883a 	mov	r17,zero
 10079f0:	b0800015 	stw	r2,0(r22)
 10079f4:	8805883a 	mov	r2,r17
 10079f8:	dfc00b17 	ldw	ra,44(sp)
 10079fc:	df000a17 	ldw	fp,40(sp)
 1007a00:	ddc00917 	ldw	r23,36(sp)
 1007a04:	dd800817 	ldw	r22,32(sp)
 1007a08:	dd400717 	ldw	r21,28(sp)
 1007a0c:	dd000617 	ldw	r20,24(sp)
 1007a10:	dcc00517 	ldw	r19,20(sp)
 1007a14:	dc800417 	ldw	r18,16(sp)
 1007a18:	dc400317 	ldw	r17,12(sp)
 1007a1c:	dc000217 	ldw	r16,8(sp)
 1007a20:	dec00c04 	addi	sp,sp,48
 1007a24:	f800283a 	ret
 1007a28:	00804074 	movhi	r2,257
 1007a2c:	10b69204 	addi	r2,r2,-9656
 1007a30:	12400217 	ldw	r9,8(r2)
 1007a34:	84cd883a 	add	r6,r16,r19
 1007a38:	802b883a 	mov	r21,r16
 1007a3c:	3240b926 	beq	r6,r9,1007d24 <_realloc_r+0x408>
 1007a40:	31400117 	ldw	r5,4(r6)
 1007a44:	00bfff84 	movi	r2,-2
 1007a48:	2884703a 	and	r2,r5,r2
 1007a4c:	1185883a 	add	r2,r2,r6
 1007a50:	10c00117 	ldw	r3,4(r2)
 1007a54:	18c0004c 	andi	r3,r3,1
 1007a58:	1807003a 	cmpeq	r3,r3,zero
 1007a5c:	1800a326 	beq	r3,zero,1007cec <_realloc_r+0x3d0>
 1007a60:	2908703a 	and	r4,r5,r4
 1007a64:	9929883a 	add	r20,r19,r4
 1007a68:	a1c0a30e 	bge	r20,r7,1007cf8 <_realloc_r+0x3dc>
 1007a6c:	4080004c 	andi	r2,r8,1
 1007a70:	1000551e 	bne	r2,zero,1007bc8 <_realloc_r+0x2ac>
 1007a74:	80800017 	ldw	r2,0(r16)
 1007a78:	80afc83a 	sub	r23,r16,r2
 1007a7c:	b8c00117 	ldw	r3,4(r23)
 1007a80:	00bfff04 	movi	r2,-4
 1007a84:	1884703a 	and	r2,r3,r2
 1007a88:	30002e26 	beq	r6,zero,1007b44 <_realloc_r+0x228>
 1007a8c:	3240b926 	beq	r6,r9,1007d74 <_realloc_r+0x458>
 1007a90:	98a9883a 	add	r20,r19,r2
 1007a94:	2509883a 	add	r4,r4,r20
 1007a98:	d9000015 	stw	r4,0(sp)
 1007a9c:	21c02a16 	blt	r4,r7,1007b48 <_realloc_r+0x22c>
 1007aa0:	30800317 	ldw	r2,12(r6)
 1007aa4:	30c00217 	ldw	r3,8(r6)
 1007aa8:	01400904 	movi	r5,36
 1007aac:	99bfff04 	addi	r6,r19,-4
 1007ab0:	18800315 	stw	r2,12(r3)
 1007ab4:	10c00215 	stw	r3,8(r2)
 1007ab8:	b9000317 	ldw	r4,12(r23)
 1007abc:	b8800217 	ldw	r2,8(r23)
 1007ac0:	b82b883a 	mov	r21,r23
 1007ac4:	bc000204 	addi	r16,r23,8
 1007ac8:	20800215 	stw	r2,8(r4)
 1007acc:	11000315 	stw	r4,12(r2)
 1007ad0:	2980e436 	bltu	r5,r6,1007e64 <_realloc_r+0x548>
 1007ad4:	008004c4 	movi	r2,19
 1007ad8:	9009883a 	mov	r4,r18
 1007adc:	8011883a 	mov	r8,r16
 1007ae0:	11800f2e 	bgeu	r2,r6,1007b20 <_realloc_r+0x204>
 1007ae4:	90800017 	ldw	r2,0(r18)
 1007ae8:	ba000404 	addi	r8,r23,16
 1007aec:	91000204 	addi	r4,r18,8
 1007af0:	b8800215 	stw	r2,8(r23)
 1007af4:	90c00117 	ldw	r3,4(r18)
 1007af8:	008006c4 	movi	r2,27
 1007afc:	b8c00315 	stw	r3,12(r23)
 1007b00:	1180072e 	bgeu	r2,r6,1007b20 <_realloc_r+0x204>
 1007b04:	90c00217 	ldw	r3,8(r18)
 1007b08:	ba000604 	addi	r8,r23,24
 1007b0c:	91000404 	addi	r4,r18,16
 1007b10:	b8c00415 	stw	r3,16(r23)
 1007b14:	90800317 	ldw	r2,12(r18)
 1007b18:	b8800515 	stw	r2,20(r23)
 1007b1c:	3140e726 	beq	r6,r5,1007ebc <_realloc_r+0x5a0>
 1007b20:	20800017 	ldw	r2,0(r4)
 1007b24:	dd000017 	ldw	r20,0(sp)
 1007b28:	b80f883a 	mov	r7,r23
 1007b2c:	40800015 	stw	r2,0(r8)
 1007b30:	20c00117 	ldw	r3,4(r4)
 1007b34:	40c00115 	stw	r3,4(r8)
 1007b38:	20800217 	ldw	r2,8(r4)
 1007b3c:	40800215 	stw	r2,8(r8)
 1007b40:	003f9706 	br	10079a0 <_realloc_r+0x84>
 1007b44:	98a9883a 	add	r20,r19,r2
 1007b48:	a1c01f16 	blt	r20,r7,1007bc8 <_realloc_r+0x2ac>
 1007b4c:	b8c00317 	ldw	r3,12(r23)
 1007b50:	b8800217 	ldw	r2,8(r23)
 1007b54:	99bfff04 	addi	r6,r19,-4
 1007b58:	01400904 	movi	r5,36
 1007b5c:	b82b883a 	mov	r21,r23
 1007b60:	18800215 	stw	r2,8(r3)
 1007b64:	10c00315 	stw	r3,12(r2)
 1007b68:	bc000204 	addi	r16,r23,8
 1007b6c:	2980c336 	bltu	r5,r6,1007e7c <_realloc_r+0x560>
 1007b70:	008004c4 	movi	r2,19
 1007b74:	9009883a 	mov	r4,r18
 1007b78:	8011883a 	mov	r8,r16
 1007b7c:	11800f2e 	bgeu	r2,r6,1007bbc <_realloc_r+0x2a0>
 1007b80:	90800017 	ldw	r2,0(r18)
 1007b84:	ba000404 	addi	r8,r23,16
 1007b88:	91000204 	addi	r4,r18,8
 1007b8c:	b8800215 	stw	r2,8(r23)
 1007b90:	90c00117 	ldw	r3,4(r18)
 1007b94:	008006c4 	movi	r2,27
 1007b98:	b8c00315 	stw	r3,12(r23)
 1007b9c:	1180072e 	bgeu	r2,r6,1007bbc <_realloc_r+0x2a0>
 1007ba0:	90c00217 	ldw	r3,8(r18)
 1007ba4:	ba000604 	addi	r8,r23,24
 1007ba8:	91000404 	addi	r4,r18,16
 1007bac:	b8c00415 	stw	r3,16(r23)
 1007bb0:	90800317 	ldw	r2,12(r18)
 1007bb4:	b8800515 	stw	r2,20(r23)
 1007bb8:	3140c726 	beq	r6,r5,1007ed8 <_realloc_r+0x5bc>
 1007bbc:	20800017 	ldw	r2,0(r4)
 1007bc0:	b80f883a 	mov	r7,r23
 1007bc4:	003fd906 	br	1007b2c <_realloc_r+0x210>
 1007bc8:	880b883a 	mov	r5,r17
 1007bcc:	b009883a 	mov	r4,r22
 1007bd0:	1005eec0 	call	1005eec <_malloc_r>
 1007bd4:	1023883a 	mov	r17,r2
 1007bd8:	10002526 	beq	r2,zero,1007c70 <_realloc_r+0x354>
 1007bdc:	80800117 	ldw	r2,4(r16)
 1007be0:	00ffff84 	movi	r3,-2
 1007be4:	893ffe04 	addi	r4,r17,-8
 1007be8:	10c4703a 	and	r2,r2,r3
 1007bec:	8085883a 	add	r2,r16,r2
 1007bf0:	20809526 	beq	r4,r2,1007e48 <_realloc_r+0x52c>
 1007bf4:	99bfff04 	addi	r6,r19,-4
 1007bf8:	01c00904 	movi	r7,36
 1007bfc:	39804536 	bltu	r7,r6,1007d14 <_realloc_r+0x3f8>
 1007c00:	008004c4 	movi	r2,19
 1007c04:	9009883a 	mov	r4,r18
 1007c08:	880b883a 	mov	r5,r17
 1007c0c:	11800f2e 	bgeu	r2,r6,1007c4c <_realloc_r+0x330>
 1007c10:	90800017 	ldw	r2,0(r18)
 1007c14:	89400204 	addi	r5,r17,8
 1007c18:	91000204 	addi	r4,r18,8
 1007c1c:	88800015 	stw	r2,0(r17)
 1007c20:	90c00117 	ldw	r3,4(r18)
 1007c24:	008006c4 	movi	r2,27
 1007c28:	88c00115 	stw	r3,4(r17)
 1007c2c:	1180072e 	bgeu	r2,r6,1007c4c <_realloc_r+0x330>
 1007c30:	90c00217 	ldw	r3,8(r18)
 1007c34:	89400404 	addi	r5,r17,16
 1007c38:	91000404 	addi	r4,r18,16
 1007c3c:	88c00215 	stw	r3,8(r17)
 1007c40:	90800317 	ldw	r2,12(r18)
 1007c44:	88800315 	stw	r2,12(r17)
 1007c48:	31c09126 	beq	r6,r7,1007e90 <_realloc_r+0x574>
 1007c4c:	20800017 	ldw	r2,0(r4)
 1007c50:	28800015 	stw	r2,0(r5)
 1007c54:	20c00117 	ldw	r3,4(r4)
 1007c58:	28c00115 	stw	r3,4(r5)
 1007c5c:	20800217 	ldw	r2,8(r4)
 1007c60:	28800215 	stw	r2,8(r5)
 1007c64:	900b883a 	mov	r5,r18
 1007c68:	b009883a 	mov	r4,r22
 1007c6c:	10053640 	call	1005364 <_free_r>
 1007c70:	b009883a 	mov	r4,r22
 1007c74:	100a6940 	call	100a694 <__malloc_unlock>
 1007c78:	003f5e06 	br	10079f4 <_realloc_r+0xd8>
 1007c7c:	300b883a 	mov	r5,r6
 1007c80:	dfc00b17 	ldw	ra,44(sp)
 1007c84:	df000a17 	ldw	fp,40(sp)
 1007c88:	ddc00917 	ldw	r23,36(sp)
 1007c8c:	dd800817 	ldw	r22,32(sp)
 1007c90:	dd400717 	ldw	r21,28(sp)
 1007c94:	dd000617 	ldw	r20,24(sp)
 1007c98:	dcc00517 	ldw	r19,20(sp)
 1007c9c:	dc800417 	ldw	r18,16(sp)
 1007ca0:	dc400317 	ldw	r17,12(sp)
 1007ca4:	dc000217 	ldw	r16,8(sp)
 1007ca8:	dec00c04 	addi	sp,sp,48
 1007cac:	1005eec1 	jmpi	1005eec <_malloc_r>
 1007cb0:	38800117 	ldw	r2,4(r7)
 1007cb4:	e54b883a 	add	r5,fp,r21
 1007cb8:	31000054 	ori	r4,r6,1
 1007cbc:	1080004c 	andi	r2,r2,1
 1007cc0:	1704b03a 	or	r2,r2,fp
 1007cc4:	38800115 	stw	r2,4(r7)
 1007cc8:	29000115 	stw	r4,4(r5)
 1007ccc:	2987883a 	add	r3,r5,r6
 1007cd0:	18800117 	ldw	r2,4(r3)
 1007cd4:	29400204 	addi	r5,r5,8
 1007cd8:	b009883a 	mov	r4,r22
 1007cdc:	10800054 	ori	r2,r2,1
 1007ce0:	18800115 	stw	r2,4(r3)
 1007ce4:	10053640 	call	1005364 <_free_r>
 1007ce8:	003f3806 	br	10079cc <_realloc_r+0xb0>
 1007cec:	000d883a 	mov	r6,zero
 1007cf0:	0009883a 	mov	r4,zero
 1007cf4:	003f5d06 	br	1007a6c <_realloc_r+0x150>
 1007cf8:	30c00217 	ldw	r3,8(r6)
 1007cfc:	30800317 	ldw	r2,12(r6)
 1007d00:	800f883a 	mov	r7,r16
 1007d04:	84000204 	addi	r16,r16,8
 1007d08:	10c00215 	stw	r3,8(r2)
 1007d0c:	18800315 	stw	r2,12(r3)
 1007d10:	003f2306 	br	10079a0 <_realloc_r+0x84>
 1007d14:	8809883a 	mov	r4,r17
 1007d18:	900b883a 	mov	r5,r18
 1007d1c:	10067b00 	call	10067b0 <memmove>
 1007d20:	003fd006 	br	1007c64 <_realloc_r+0x348>
 1007d24:	30800117 	ldw	r2,4(r6)
 1007d28:	e0c00404 	addi	r3,fp,16
 1007d2c:	1108703a 	and	r4,r2,r4
 1007d30:	9905883a 	add	r2,r19,r4
 1007d34:	10ff4d16 	blt	r2,r3,1007a6c <_realloc_r+0x150>
 1007d38:	1705c83a 	sub	r2,r2,fp
 1007d3c:	870b883a 	add	r5,r16,fp
 1007d40:	10800054 	ori	r2,r2,1
 1007d44:	28800115 	stw	r2,4(r5)
 1007d48:	80c00117 	ldw	r3,4(r16)
 1007d4c:	00804074 	movhi	r2,257
 1007d50:	10b69204 	addi	r2,r2,-9656
 1007d54:	b009883a 	mov	r4,r22
 1007d58:	18c0004c 	andi	r3,r3,1
 1007d5c:	e0c6b03a 	or	r3,fp,r3
 1007d60:	11400215 	stw	r5,8(r2)
 1007d64:	80c00115 	stw	r3,4(r16)
 1007d68:	100a6940 	call	100a694 <__malloc_unlock>
 1007d6c:	84400204 	addi	r17,r16,8
 1007d70:	003f2006 	br	10079f4 <_realloc_r+0xd8>
 1007d74:	98a9883a 	add	r20,r19,r2
 1007d78:	2509883a 	add	r4,r4,r20
 1007d7c:	e0800404 	addi	r2,fp,16
 1007d80:	d9000115 	stw	r4,4(sp)
 1007d84:	20bf7016 	blt	r4,r2,1007b48 <_realloc_r+0x22c>
 1007d88:	b8c00317 	ldw	r3,12(r23)
 1007d8c:	b8800217 	ldw	r2,8(r23)
 1007d90:	99bfff04 	addi	r6,r19,-4
 1007d94:	01400904 	movi	r5,36
 1007d98:	18800215 	stw	r2,8(r3)
 1007d9c:	10c00315 	stw	r3,12(r2)
 1007da0:	bc400204 	addi	r17,r23,8
 1007da4:	29804136 	bltu	r5,r6,1007eac <_realloc_r+0x590>
 1007da8:	008004c4 	movi	r2,19
 1007dac:	9009883a 	mov	r4,r18
 1007db0:	880f883a 	mov	r7,r17
 1007db4:	11800f2e 	bgeu	r2,r6,1007df4 <_realloc_r+0x4d8>
 1007db8:	90800017 	ldw	r2,0(r18)
 1007dbc:	b9c00404 	addi	r7,r23,16
 1007dc0:	91000204 	addi	r4,r18,8
 1007dc4:	b8800215 	stw	r2,8(r23)
 1007dc8:	90c00117 	ldw	r3,4(r18)
 1007dcc:	008006c4 	movi	r2,27
 1007dd0:	b8c00315 	stw	r3,12(r23)
 1007dd4:	1180072e 	bgeu	r2,r6,1007df4 <_realloc_r+0x4d8>
 1007dd8:	90c00217 	ldw	r3,8(r18)
 1007ddc:	b9c00604 	addi	r7,r23,24
 1007de0:	91000404 	addi	r4,r18,16
 1007de4:	b8c00415 	stw	r3,16(r23)
 1007de8:	90800317 	ldw	r2,12(r18)
 1007dec:	b8800515 	stw	r2,20(r23)
 1007df0:	31404026 	beq	r6,r5,1007ef4 <_realloc_r+0x5d8>
 1007df4:	20800017 	ldw	r2,0(r4)
 1007df8:	38800015 	stw	r2,0(r7)
 1007dfc:	20c00117 	ldw	r3,4(r4)
 1007e00:	38c00115 	stw	r3,4(r7)
 1007e04:	20800217 	ldw	r2,8(r4)
 1007e08:	38800215 	stw	r2,8(r7)
 1007e0c:	d8c00117 	ldw	r3,4(sp)
 1007e10:	bf0b883a 	add	r5,r23,fp
 1007e14:	b009883a 	mov	r4,r22
 1007e18:	1f05c83a 	sub	r2,r3,fp
 1007e1c:	10800054 	ori	r2,r2,1
 1007e20:	28800115 	stw	r2,4(r5)
 1007e24:	b8c00117 	ldw	r3,4(r23)
 1007e28:	00804074 	movhi	r2,257
 1007e2c:	10b69204 	addi	r2,r2,-9656
 1007e30:	11400215 	stw	r5,8(r2)
 1007e34:	18c0004c 	andi	r3,r3,1
 1007e38:	e0c6b03a 	or	r3,fp,r3
 1007e3c:	b8c00115 	stw	r3,4(r23)
 1007e40:	100a6940 	call	100a694 <__malloc_unlock>
 1007e44:	003eeb06 	br	10079f4 <_realloc_r+0xd8>
 1007e48:	20800117 	ldw	r2,4(r4)
 1007e4c:	00ffff04 	movi	r3,-4
 1007e50:	800f883a 	mov	r7,r16
 1007e54:	10c4703a 	and	r2,r2,r3
 1007e58:	98a9883a 	add	r20,r19,r2
 1007e5c:	84000204 	addi	r16,r16,8
 1007e60:	003ecf06 	br	10079a0 <_realloc_r+0x84>
 1007e64:	900b883a 	mov	r5,r18
 1007e68:	8009883a 	mov	r4,r16
 1007e6c:	10067b00 	call	10067b0 <memmove>
 1007e70:	dd000017 	ldw	r20,0(sp)
 1007e74:	b80f883a 	mov	r7,r23
 1007e78:	003ec906 	br	10079a0 <_realloc_r+0x84>
 1007e7c:	900b883a 	mov	r5,r18
 1007e80:	8009883a 	mov	r4,r16
 1007e84:	10067b00 	call	10067b0 <memmove>
 1007e88:	b80f883a 	mov	r7,r23
 1007e8c:	003ec406 	br	10079a0 <_realloc_r+0x84>
 1007e90:	90c00417 	ldw	r3,16(r18)
 1007e94:	89400604 	addi	r5,r17,24
 1007e98:	91000604 	addi	r4,r18,24
 1007e9c:	88c00415 	stw	r3,16(r17)
 1007ea0:	90800517 	ldw	r2,20(r18)
 1007ea4:	88800515 	stw	r2,20(r17)
 1007ea8:	003f6806 	br	1007c4c <_realloc_r+0x330>
 1007eac:	900b883a 	mov	r5,r18
 1007eb0:	8809883a 	mov	r4,r17
 1007eb4:	10067b00 	call	10067b0 <memmove>
 1007eb8:	003fd406 	br	1007e0c <_realloc_r+0x4f0>
 1007ebc:	90c00417 	ldw	r3,16(r18)
 1007ec0:	91000604 	addi	r4,r18,24
 1007ec4:	ba000804 	addi	r8,r23,32
 1007ec8:	b8c00615 	stw	r3,24(r23)
 1007ecc:	90800517 	ldw	r2,20(r18)
 1007ed0:	b8800715 	stw	r2,28(r23)
 1007ed4:	003f1206 	br	1007b20 <_realloc_r+0x204>
 1007ed8:	90c00417 	ldw	r3,16(r18)
 1007edc:	91000604 	addi	r4,r18,24
 1007ee0:	ba000804 	addi	r8,r23,32
 1007ee4:	b8c00615 	stw	r3,24(r23)
 1007ee8:	90800517 	ldw	r2,20(r18)
 1007eec:	b8800715 	stw	r2,28(r23)
 1007ef0:	003f3206 	br	1007bbc <_realloc_r+0x2a0>
 1007ef4:	90c00417 	ldw	r3,16(r18)
 1007ef8:	91000604 	addi	r4,r18,24
 1007efc:	b9c00804 	addi	r7,r23,32
 1007f00:	b8c00615 	stw	r3,24(r23)
 1007f04:	90800517 	ldw	r2,20(r18)
 1007f08:	b8800715 	stw	r2,28(r23)
 1007f0c:	003fb906 	br	1007df4 <_realloc_r+0x4d8>

01007f10 <__isinfd>:
 1007f10:	200d883a 	mov	r6,r4
 1007f14:	0109c83a 	sub	r4,zero,r4
 1007f18:	2188b03a 	or	r4,r4,r6
 1007f1c:	2008d7fa 	srli	r4,r4,31
 1007f20:	00a00034 	movhi	r2,32768
 1007f24:	10bfffc4 	addi	r2,r2,-1
 1007f28:	1144703a 	and	r2,r2,r5
 1007f2c:	2088b03a 	or	r4,r4,r2
 1007f30:	009ffc34 	movhi	r2,32752
 1007f34:	1105c83a 	sub	r2,r2,r4
 1007f38:	0087c83a 	sub	r3,zero,r2
 1007f3c:	10c4b03a 	or	r2,r2,r3
 1007f40:	1004d7fa 	srli	r2,r2,31
 1007f44:	00c00044 	movi	r3,1
 1007f48:	1885c83a 	sub	r2,r3,r2
 1007f4c:	f800283a 	ret

01007f50 <__isnand>:
 1007f50:	200d883a 	mov	r6,r4
 1007f54:	0109c83a 	sub	r4,zero,r4
 1007f58:	2188b03a 	or	r4,r4,r6
 1007f5c:	2008d7fa 	srli	r4,r4,31
 1007f60:	00a00034 	movhi	r2,32768
 1007f64:	10bfffc4 	addi	r2,r2,-1
 1007f68:	1144703a 	and	r2,r2,r5
 1007f6c:	2088b03a 	or	r4,r4,r2
 1007f70:	009ffc34 	movhi	r2,32752
 1007f74:	1105c83a 	sub	r2,r2,r4
 1007f78:	1004d7fa 	srli	r2,r2,31
 1007f7c:	f800283a 	ret

01007f80 <_sbrk_r>:
 1007f80:	defffd04 	addi	sp,sp,-12
 1007f84:	dc000015 	stw	r16,0(sp)
 1007f88:	04004074 	movhi	r16,257
 1007f8c:	84030504 	addi	r16,r16,3092
 1007f90:	dc400115 	stw	r17,4(sp)
 1007f94:	80000015 	stw	zero,0(r16)
 1007f98:	2023883a 	mov	r17,r4
 1007f9c:	2809883a 	mov	r4,r5
 1007fa0:	dfc00215 	stw	ra,8(sp)
 1007fa4:	100a8940 	call	100a894 <sbrk>
 1007fa8:	1007883a 	mov	r3,r2
 1007fac:	00bfffc4 	movi	r2,-1
 1007fb0:	18800626 	beq	r3,r2,1007fcc <_sbrk_r+0x4c>
 1007fb4:	1805883a 	mov	r2,r3
 1007fb8:	dfc00217 	ldw	ra,8(sp)
 1007fbc:	dc400117 	ldw	r17,4(sp)
 1007fc0:	dc000017 	ldw	r16,0(sp)
 1007fc4:	dec00304 	addi	sp,sp,12
 1007fc8:	f800283a 	ret
 1007fcc:	80800017 	ldw	r2,0(r16)
 1007fd0:	103ff826 	beq	r2,zero,1007fb4 <_sbrk_r+0x34>
 1007fd4:	88800015 	stw	r2,0(r17)
 1007fd8:	1805883a 	mov	r2,r3
 1007fdc:	dfc00217 	ldw	ra,8(sp)
 1007fe0:	dc400117 	ldw	r17,4(sp)
 1007fe4:	dc000017 	ldw	r16,0(sp)
 1007fe8:	dec00304 	addi	sp,sp,12
 1007fec:	f800283a 	ret

01007ff0 <__sclose>:
 1007ff0:	2940038f 	ldh	r5,14(r5)
 1007ff4:	10083241 	jmpi	1008324 <_close_r>

01007ff8 <__sseek>:
 1007ff8:	defffe04 	addi	sp,sp,-8
 1007ffc:	dc000015 	stw	r16,0(sp)
 1008000:	2821883a 	mov	r16,r5
 1008004:	2940038f 	ldh	r5,14(r5)
 1008008:	dfc00115 	stw	ra,4(sp)
 100800c:	100859c0 	call	100859c <_lseek_r>
 1008010:	1007883a 	mov	r3,r2
 1008014:	00bfffc4 	movi	r2,-1
 1008018:	18800926 	beq	r3,r2,1008040 <__sseek+0x48>
 100801c:	8080030b 	ldhu	r2,12(r16)
 1008020:	80c01415 	stw	r3,80(r16)
 1008024:	10840014 	ori	r2,r2,4096
 1008028:	8080030d 	sth	r2,12(r16)
 100802c:	1805883a 	mov	r2,r3
 1008030:	dfc00117 	ldw	ra,4(sp)
 1008034:	dc000017 	ldw	r16,0(sp)
 1008038:	dec00204 	addi	sp,sp,8
 100803c:	f800283a 	ret
 1008040:	8080030b 	ldhu	r2,12(r16)
 1008044:	10bbffcc 	andi	r2,r2,61439
 1008048:	8080030d 	sth	r2,12(r16)
 100804c:	1805883a 	mov	r2,r3
 1008050:	dfc00117 	ldw	ra,4(sp)
 1008054:	dc000017 	ldw	r16,0(sp)
 1008058:	dec00204 	addi	sp,sp,8
 100805c:	f800283a 	ret

01008060 <__swrite>:
 1008060:	2880030b 	ldhu	r2,12(r5)
 1008064:	defffb04 	addi	sp,sp,-20
 1008068:	dcc00315 	stw	r19,12(sp)
 100806c:	1080400c 	andi	r2,r2,256
 1008070:	dc800215 	stw	r18,8(sp)
 1008074:	dc400115 	stw	r17,4(sp)
 1008078:	dc000015 	stw	r16,0(sp)
 100807c:	3027883a 	mov	r19,r6
 1008080:	3825883a 	mov	r18,r7
 1008084:	dfc00415 	stw	ra,16(sp)
 1008088:	2821883a 	mov	r16,r5
 100808c:	000d883a 	mov	r6,zero
 1008090:	01c00084 	movi	r7,2
 1008094:	2023883a 	mov	r17,r4
 1008098:	10000226 	beq	r2,zero,10080a4 <__swrite+0x44>
 100809c:	2940038f 	ldh	r5,14(r5)
 10080a0:	100859c0 	call	100859c <_lseek_r>
 10080a4:	8080030b 	ldhu	r2,12(r16)
 10080a8:	8140038f 	ldh	r5,14(r16)
 10080ac:	8809883a 	mov	r4,r17
 10080b0:	10bbffcc 	andi	r2,r2,61439
 10080b4:	980d883a 	mov	r6,r19
 10080b8:	900f883a 	mov	r7,r18
 10080bc:	8080030d 	sth	r2,12(r16)
 10080c0:	dfc00417 	ldw	ra,16(sp)
 10080c4:	dcc00317 	ldw	r19,12(sp)
 10080c8:	dc800217 	ldw	r18,8(sp)
 10080cc:	dc400117 	ldw	r17,4(sp)
 10080d0:	dc000017 	ldw	r16,0(sp)
 10080d4:	dec00504 	addi	sp,sp,20
 10080d8:	10081f81 	jmpi	10081f8 <_write_r>

010080dc <__sread>:
 10080dc:	defffe04 	addi	sp,sp,-8
 10080e0:	dc000015 	stw	r16,0(sp)
 10080e4:	2821883a 	mov	r16,r5
 10080e8:	2940038f 	ldh	r5,14(r5)
 10080ec:	dfc00115 	stw	ra,4(sp)
 10080f0:	10086140 	call	1008614 <_read_r>
 10080f4:	1007883a 	mov	r3,r2
 10080f8:	10000816 	blt	r2,zero,100811c <__sread+0x40>
 10080fc:	80801417 	ldw	r2,80(r16)
 1008100:	10c5883a 	add	r2,r2,r3
 1008104:	80801415 	stw	r2,80(r16)
 1008108:	1805883a 	mov	r2,r3
 100810c:	dfc00117 	ldw	ra,4(sp)
 1008110:	dc000017 	ldw	r16,0(sp)
 1008114:	dec00204 	addi	sp,sp,8
 1008118:	f800283a 	ret
 100811c:	8080030b 	ldhu	r2,12(r16)
 1008120:	10bbffcc 	andi	r2,r2,61439
 1008124:	8080030d 	sth	r2,12(r16)
 1008128:	1805883a 	mov	r2,r3
 100812c:	dfc00117 	ldw	ra,4(sp)
 1008130:	dc000017 	ldw	r16,0(sp)
 1008134:	dec00204 	addi	sp,sp,8
 1008138:	f800283a 	ret

0100813c <strcmp>:
 100813c:	2144b03a 	or	r2,r4,r5
 1008140:	108000cc 	andi	r2,r2,3
 1008144:	10001d1e 	bne	r2,zero,10081bc <strcmp+0x80>
 1008148:	200f883a 	mov	r7,r4
 100814c:	28800017 	ldw	r2,0(r5)
 1008150:	21000017 	ldw	r4,0(r4)
 1008154:	280d883a 	mov	r6,r5
 1008158:	2080161e 	bne	r4,r2,10081b4 <strcmp+0x78>
 100815c:	023fbff4 	movhi	r8,65279
 1008160:	423fbfc4 	addi	r8,r8,-257
 1008164:	2207883a 	add	r3,r4,r8
 1008168:	01602074 	movhi	r5,32897
 100816c:	29602004 	addi	r5,r5,-32640
 1008170:	1946703a 	and	r3,r3,r5
 1008174:	0104303a 	nor	r2,zero,r4
 1008178:	10c4703a 	and	r2,r2,r3
 100817c:	10001c1e 	bne	r2,zero,10081f0 <strcmp+0xb4>
 1008180:	4013883a 	mov	r9,r8
 1008184:	2811883a 	mov	r8,r5
 1008188:	00000106 	br	1008190 <strcmp+0x54>
 100818c:	1800181e 	bne	r3,zero,10081f0 <strcmp+0xb4>
 1008190:	39c00104 	addi	r7,r7,4
 1008194:	39000017 	ldw	r4,0(r7)
 1008198:	31800104 	addi	r6,r6,4
 100819c:	31400017 	ldw	r5,0(r6)
 10081a0:	2245883a 	add	r2,r4,r9
 10081a4:	1204703a 	and	r2,r2,r8
 10081a8:	0106303a 	nor	r3,zero,r4
 10081ac:	1886703a 	and	r3,r3,r2
 10081b0:	217ff626 	beq	r4,r5,100818c <strcmp+0x50>
 10081b4:	3809883a 	mov	r4,r7
 10081b8:	300b883a 	mov	r5,r6
 10081bc:	20c00007 	ldb	r3,0(r4)
 10081c0:	1800051e 	bne	r3,zero,10081d8 <strcmp+0x9c>
 10081c4:	00000606 	br	10081e0 <strcmp+0xa4>
 10081c8:	21000044 	addi	r4,r4,1
 10081cc:	20c00007 	ldb	r3,0(r4)
 10081d0:	29400044 	addi	r5,r5,1
 10081d4:	18000226 	beq	r3,zero,10081e0 <strcmp+0xa4>
 10081d8:	28800007 	ldb	r2,0(r5)
 10081dc:	18bffa26 	beq	r3,r2,10081c8 <strcmp+0x8c>
 10081e0:	20c00003 	ldbu	r3,0(r4)
 10081e4:	28800003 	ldbu	r2,0(r5)
 10081e8:	1885c83a 	sub	r2,r3,r2
 10081ec:	f800283a 	ret
 10081f0:	0005883a 	mov	r2,zero
 10081f4:	f800283a 	ret

010081f8 <_write_r>:
 10081f8:	defffd04 	addi	sp,sp,-12
 10081fc:	dc000015 	stw	r16,0(sp)
 1008200:	04004074 	movhi	r16,257
 1008204:	84030504 	addi	r16,r16,3092
 1008208:	dc400115 	stw	r17,4(sp)
 100820c:	80000015 	stw	zero,0(r16)
 1008210:	2023883a 	mov	r17,r4
 1008214:	2809883a 	mov	r4,r5
 1008218:	300b883a 	mov	r5,r6
 100821c:	380d883a 	mov	r6,r7
 1008220:	dfc00215 	stw	ra,8(sp)
 1008224:	100a9500 	call	100a950 <write>
 1008228:	1007883a 	mov	r3,r2
 100822c:	00bfffc4 	movi	r2,-1
 1008230:	18800626 	beq	r3,r2,100824c <_write_r+0x54>
 1008234:	1805883a 	mov	r2,r3
 1008238:	dfc00217 	ldw	ra,8(sp)
 100823c:	dc400117 	ldw	r17,4(sp)
 1008240:	dc000017 	ldw	r16,0(sp)
 1008244:	dec00304 	addi	sp,sp,12
 1008248:	f800283a 	ret
 100824c:	80800017 	ldw	r2,0(r16)
 1008250:	103ff826 	beq	r2,zero,1008234 <_write_r+0x3c>
 1008254:	88800015 	stw	r2,0(r17)
 1008258:	1805883a 	mov	r2,r3
 100825c:	dfc00217 	ldw	ra,8(sp)
 1008260:	dc400117 	ldw	r17,4(sp)
 1008264:	dc000017 	ldw	r16,0(sp)
 1008268:	dec00304 	addi	sp,sp,12
 100826c:	f800283a 	ret

01008270 <_calloc_r>:
 1008270:	298b383a 	mul	r5,r5,r6
 1008274:	defffe04 	addi	sp,sp,-8
 1008278:	dc000015 	stw	r16,0(sp)
 100827c:	dfc00115 	stw	ra,4(sp)
 1008280:	1005eec0 	call	1005eec <_malloc_r>
 1008284:	1021883a 	mov	r16,r2
 1008288:	01c00904 	movi	r7,36
 100828c:	10000d26 	beq	r2,zero,10082c4 <_calloc_r+0x54>
 1008290:	10ffff17 	ldw	r3,-4(r2)
 1008294:	1009883a 	mov	r4,r2
 1008298:	00bfff04 	movi	r2,-4
 100829c:	1886703a 	and	r3,r3,r2
 10082a0:	1887883a 	add	r3,r3,r2
 10082a4:	180d883a 	mov	r6,r3
 10082a8:	000b883a 	mov	r5,zero
 10082ac:	38c01736 	bltu	r7,r3,100830c <_calloc_r+0x9c>
 10082b0:	008004c4 	movi	r2,19
 10082b4:	10c00836 	bltu	r2,r3,10082d8 <_calloc_r+0x68>
 10082b8:	20000215 	stw	zero,8(r4)
 10082bc:	20000015 	stw	zero,0(r4)
 10082c0:	20000115 	stw	zero,4(r4)
 10082c4:	8005883a 	mov	r2,r16
 10082c8:	dfc00117 	ldw	ra,4(sp)
 10082cc:	dc000017 	ldw	r16,0(sp)
 10082d0:	dec00204 	addi	sp,sp,8
 10082d4:	f800283a 	ret
 10082d8:	008006c4 	movi	r2,27
 10082dc:	80000015 	stw	zero,0(r16)
 10082e0:	80000115 	stw	zero,4(r16)
 10082e4:	81000204 	addi	r4,r16,8
 10082e8:	10fff32e 	bgeu	r2,r3,10082b8 <_calloc_r+0x48>
 10082ec:	80000215 	stw	zero,8(r16)
 10082f0:	80000315 	stw	zero,12(r16)
 10082f4:	81000404 	addi	r4,r16,16
 10082f8:	19ffef1e 	bne	r3,r7,10082b8 <_calloc_r+0x48>
 10082fc:	81000604 	addi	r4,r16,24
 1008300:	80000415 	stw	zero,16(r16)
 1008304:	80000515 	stw	zero,20(r16)
 1008308:	003feb06 	br	10082b8 <_calloc_r+0x48>
 100830c:	10068900 	call	1006890 <memset>
 1008310:	8005883a 	mov	r2,r16
 1008314:	dfc00117 	ldw	ra,4(sp)
 1008318:	dc000017 	ldw	r16,0(sp)
 100831c:	dec00204 	addi	sp,sp,8
 1008320:	f800283a 	ret

01008324 <_close_r>:
 1008324:	defffd04 	addi	sp,sp,-12
 1008328:	dc000015 	stw	r16,0(sp)
 100832c:	04004074 	movhi	r16,257
 1008330:	84030504 	addi	r16,r16,3092
 1008334:	dc400115 	stw	r17,4(sp)
 1008338:	80000015 	stw	zero,0(r16)
 100833c:	2023883a 	mov	r17,r4
 1008340:	2809883a 	mov	r4,r5
 1008344:	dfc00215 	stw	ra,8(sp)
 1008348:	1009ff00 	call	1009ff0 <close>
 100834c:	1007883a 	mov	r3,r2
 1008350:	00bfffc4 	movi	r2,-1
 1008354:	18800626 	beq	r3,r2,1008370 <_close_r+0x4c>
 1008358:	1805883a 	mov	r2,r3
 100835c:	dfc00217 	ldw	ra,8(sp)
 1008360:	dc400117 	ldw	r17,4(sp)
 1008364:	dc000017 	ldw	r16,0(sp)
 1008368:	dec00304 	addi	sp,sp,12
 100836c:	f800283a 	ret
 1008370:	80800017 	ldw	r2,0(r16)
 1008374:	103ff826 	beq	r2,zero,1008358 <_close_r+0x34>
 1008378:	88800015 	stw	r2,0(r17)
 100837c:	1805883a 	mov	r2,r3
 1008380:	dfc00217 	ldw	ra,8(sp)
 1008384:	dc400117 	ldw	r17,4(sp)
 1008388:	dc000017 	ldw	r16,0(sp)
 100838c:	dec00304 	addi	sp,sp,12
 1008390:	f800283a 	ret

01008394 <_fclose_r>:
 1008394:	defffc04 	addi	sp,sp,-16
 1008398:	dc400115 	stw	r17,4(sp)
 100839c:	dc000015 	stw	r16,0(sp)
 10083a0:	dfc00315 	stw	ra,12(sp)
 10083a4:	dc800215 	stw	r18,8(sp)
 10083a8:	2821883a 	mov	r16,r5
 10083ac:	2023883a 	mov	r17,r4
 10083b0:	28002926 	beq	r5,zero,1008458 <_fclose_r+0xc4>
 10083b4:	1004fd00 	call	1004fd0 <__sfp_lock_acquire>
 10083b8:	88000226 	beq	r17,zero,10083c4 <_fclose_r+0x30>
 10083bc:	88800e17 	ldw	r2,56(r17)
 10083c0:	10002d26 	beq	r2,zero,1008478 <_fclose_r+0xe4>
 10083c4:	8080030f 	ldh	r2,12(r16)
 10083c8:	10002226 	beq	r2,zero,1008454 <_fclose_r+0xc0>
 10083cc:	8809883a 	mov	r4,r17
 10083d0:	800b883a 	mov	r5,r16
 10083d4:	1004d480 	call	1004d48 <_fflush_r>
 10083d8:	1025883a 	mov	r18,r2
 10083dc:	80800b17 	ldw	r2,44(r16)
 10083e0:	10000426 	beq	r2,zero,10083f4 <_fclose_r+0x60>
 10083e4:	81400717 	ldw	r5,28(r16)
 10083e8:	8809883a 	mov	r4,r17
 10083ec:	103ee83a 	callr	r2
 10083f0:	10002a16 	blt	r2,zero,100849c <_fclose_r+0x108>
 10083f4:	8080030b 	ldhu	r2,12(r16)
 10083f8:	1080200c 	andi	r2,r2,128
 10083fc:	1000231e 	bne	r2,zero,100848c <_fclose_r+0xf8>
 1008400:	81400c17 	ldw	r5,48(r16)
 1008404:	28000526 	beq	r5,zero,100841c <_fclose_r+0x88>
 1008408:	80801004 	addi	r2,r16,64
 100840c:	28800226 	beq	r5,r2,1008418 <_fclose_r+0x84>
 1008410:	8809883a 	mov	r4,r17
 1008414:	10053640 	call	1005364 <_free_r>
 1008418:	80000c15 	stw	zero,48(r16)
 100841c:	81401117 	ldw	r5,68(r16)
 1008420:	28000326 	beq	r5,zero,1008430 <_fclose_r+0x9c>
 1008424:	8809883a 	mov	r4,r17
 1008428:	10053640 	call	1005364 <_free_r>
 100842c:	80001115 	stw	zero,68(r16)
 1008430:	8000030d 	sth	zero,12(r16)
 1008434:	1004fd40 	call	1004fd4 <__sfp_lock_release>
 1008438:	9005883a 	mov	r2,r18
 100843c:	dfc00317 	ldw	ra,12(sp)
 1008440:	dc800217 	ldw	r18,8(sp)
 1008444:	dc400117 	ldw	r17,4(sp)
 1008448:	dc000017 	ldw	r16,0(sp)
 100844c:	dec00404 	addi	sp,sp,16
 1008450:	f800283a 	ret
 1008454:	1004fd40 	call	1004fd4 <__sfp_lock_release>
 1008458:	0025883a 	mov	r18,zero
 100845c:	9005883a 	mov	r2,r18
 1008460:	dfc00317 	ldw	ra,12(sp)
 1008464:	dc800217 	ldw	r18,8(sp)
 1008468:	dc400117 	ldw	r17,4(sp)
 100846c:	dc000017 	ldw	r16,0(sp)
 1008470:	dec00404 	addi	sp,sp,16
 1008474:	f800283a 	ret
 1008478:	8809883a 	mov	r4,r17
 100847c:	1004fe00 	call	1004fe0 <__sinit>
 1008480:	8080030f 	ldh	r2,12(r16)
 1008484:	103fd11e 	bne	r2,zero,10083cc <_fclose_r+0x38>
 1008488:	003ff206 	br	1008454 <_fclose_r+0xc0>
 100848c:	81400417 	ldw	r5,16(r16)
 1008490:	8809883a 	mov	r4,r17
 1008494:	10053640 	call	1005364 <_free_r>
 1008498:	003fd906 	br	1008400 <_fclose_r+0x6c>
 100849c:	04bfffc4 	movi	r18,-1
 10084a0:	003fd406 	br	10083f4 <_fclose_r+0x60>

010084a4 <fclose>:
 10084a4:	00804074 	movhi	r2,257
 10084a8:	10bc3704 	addi	r2,r2,-3876
 10084ac:	200b883a 	mov	r5,r4
 10084b0:	11000017 	ldw	r4,0(r2)
 10084b4:	10083941 	jmpi	1008394 <_fclose_r>

010084b8 <_fstat_r>:
 10084b8:	defffd04 	addi	sp,sp,-12
 10084bc:	dc000015 	stw	r16,0(sp)
 10084c0:	04004074 	movhi	r16,257
 10084c4:	84030504 	addi	r16,r16,3092
 10084c8:	dc400115 	stw	r17,4(sp)
 10084cc:	80000015 	stw	zero,0(r16)
 10084d0:	2023883a 	mov	r17,r4
 10084d4:	2809883a 	mov	r4,r5
 10084d8:	300b883a 	mov	r5,r6
 10084dc:	dfc00215 	stw	ra,8(sp)
 10084e0:	100a1780 	call	100a178 <fstat>
 10084e4:	1007883a 	mov	r3,r2
 10084e8:	00bfffc4 	movi	r2,-1
 10084ec:	18800626 	beq	r3,r2,1008508 <_fstat_r+0x50>
 10084f0:	1805883a 	mov	r2,r3
 10084f4:	dfc00217 	ldw	ra,8(sp)
 10084f8:	dc400117 	ldw	r17,4(sp)
 10084fc:	dc000017 	ldw	r16,0(sp)
 1008500:	dec00304 	addi	sp,sp,12
 1008504:	f800283a 	ret
 1008508:	80800017 	ldw	r2,0(r16)
 100850c:	103ff826 	beq	r2,zero,10084f0 <_fstat_r+0x38>
 1008510:	88800015 	stw	r2,0(r17)
 1008514:	1805883a 	mov	r2,r3
 1008518:	dfc00217 	ldw	ra,8(sp)
 100851c:	dc400117 	ldw	r17,4(sp)
 1008520:	dc000017 	ldw	r16,0(sp)
 1008524:	dec00304 	addi	sp,sp,12
 1008528:	f800283a 	ret

0100852c <_isatty_r>:
 100852c:	defffd04 	addi	sp,sp,-12
 1008530:	dc000015 	stw	r16,0(sp)
 1008534:	04004074 	movhi	r16,257
 1008538:	84030504 	addi	r16,r16,3092
 100853c:	dc400115 	stw	r17,4(sp)
 1008540:	80000015 	stw	zero,0(r16)
 1008544:	2023883a 	mov	r17,r4
 1008548:	2809883a 	mov	r4,r5
 100854c:	dfc00215 	stw	ra,8(sp)
 1008550:	100a2ac0 	call	100a2ac <isatty>
 1008554:	1007883a 	mov	r3,r2
 1008558:	00bfffc4 	movi	r2,-1
 100855c:	18800626 	beq	r3,r2,1008578 <_isatty_r+0x4c>
 1008560:	1805883a 	mov	r2,r3
 1008564:	dfc00217 	ldw	ra,8(sp)
 1008568:	dc400117 	ldw	r17,4(sp)
 100856c:	dc000017 	ldw	r16,0(sp)
 1008570:	dec00304 	addi	sp,sp,12
 1008574:	f800283a 	ret
 1008578:	80800017 	ldw	r2,0(r16)
 100857c:	103ff826 	beq	r2,zero,1008560 <_isatty_r+0x34>
 1008580:	88800015 	stw	r2,0(r17)
 1008584:	1805883a 	mov	r2,r3
 1008588:	dfc00217 	ldw	ra,8(sp)
 100858c:	dc400117 	ldw	r17,4(sp)
 1008590:	dc000017 	ldw	r16,0(sp)
 1008594:	dec00304 	addi	sp,sp,12
 1008598:	f800283a 	ret

0100859c <_lseek_r>:
 100859c:	defffd04 	addi	sp,sp,-12
 10085a0:	dc000015 	stw	r16,0(sp)
 10085a4:	04004074 	movhi	r16,257
 10085a8:	84030504 	addi	r16,r16,3092
 10085ac:	dc400115 	stw	r17,4(sp)
 10085b0:	80000015 	stw	zero,0(r16)
 10085b4:	2023883a 	mov	r17,r4
 10085b8:	2809883a 	mov	r4,r5
 10085bc:	300b883a 	mov	r5,r6
 10085c0:	380d883a 	mov	r6,r7
 10085c4:	dfc00215 	stw	ra,8(sp)
 10085c8:	100a4b80 	call	100a4b8 <lseek>
 10085cc:	1007883a 	mov	r3,r2
 10085d0:	00bfffc4 	movi	r2,-1
 10085d4:	18800626 	beq	r3,r2,10085f0 <_lseek_r+0x54>
 10085d8:	1805883a 	mov	r2,r3
 10085dc:	dfc00217 	ldw	ra,8(sp)
 10085e0:	dc400117 	ldw	r17,4(sp)
 10085e4:	dc000017 	ldw	r16,0(sp)
 10085e8:	dec00304 	addi	sp,sp,12
 10085ec:	f800283a 	ret
 10085f0:	80800017 	ldw	r2,0(r16)
 10085f4:	103ff826 	beq	r2,zero,10085d8 <_lseek_r+0x3c>
 10085f8:	88800015 	stw	r2,0(r17)
 10085fc:	1805883a 	mov	r2,r3
 1008600:	dfc00217 	ldw	ra,8(sp)
 1008604:	dc400117 	ldw	r17,4(sp)
 1008608:	dc000017 	ldw	r16,0(sp)
 100860c:	dec00304 	addi	sp,sp,12
 1008610:	f800283a 	ret

01008614 <_read_r>:
 1008614:	defffd04 	addi	sp,sp,-12
 1008618:	dc000015 	stw	r16,0(sp)
 100861c:	04004074 	movhi	r16,257
 1008620:	84030504 	addi	r16,r16,3092
 1008624:	dc400115 	stw	r17,4(sp)
 1008628:	80000015 	stw	zero,0(r16)
 100862c:	2023883a 	mov	r17,r4
 1008630:	2809883a 	mov	r4,r5
 1008634:	300b883a 	mov	r5,r6
 1008638:	380d883a 	mov	r6,r7
 100863c:	dfc00215 	stw	ra,8(sp)
 1008640:	100a6b40 	call	100a6b4 <read>
 1008644:	1007883a 	mov	r3,r2
 1008648:	00bfffc4 	movi	r2,-1
 100864c:	18800626 	beq	r3,r2,1008668 <_read_r+0x54>
 1008650:	1805883a 	mov	r2,r3
 1008654:	dfc00217 	ldw	ra,8(sp)
 1008658:	dc400117 	ldw	r17,4(sp)
 100865c:	dc000017 	ldw	r16,0(sp)
 1008660:	dec00304 	addi	sp,sp,12
 1008664:	f800283a 	ret
 1008668:	80800017 	ldw	r2,0(r16)
 100866c:	103ff826 	beq	r2,zero,1008650 <_read_r+0x3c>
 1008670:	88800015 	stw	r2,0(r17)
 1008674:	1805883a 	mov	r2,r3
 1008678:	dfc00217 	ldw	ra,8(sp)
 100867c:	dc400117 	ldw	r17,4(sp)
 1008680:	dc000017 	ldw	r16,0(sp)
 1008684:	dec00304 	addi	sp,sp,12
 1008688:	f800283a 	ret

0100868c <__udivdi3>:
 100868c:	defff004 	addi	sp,sp,-64
 1008690:	2005883a 	mov	r2,r4
 1008694:	3011883a 	mov	r8,r6
 1008698:	df000e15 	stw	fp,56(sp)
 100869c:	dd000a15 	stw	r20,40(sp)
 10086a0:	dc000615 	stw	r16,24(sp)
 10086a4:	dfc00f15 	stw	ra,60(sp)
 10086a8:	ddc00d15 	stw	r23,52(sp)
 10086ac:	dd800c15 	stw	r22,48(sp)
 10086b0:	dd400b15 	stw	r21,44(sp)
 10086b4:	dcc00915 	stw	r19,36(sp)
 10086b8:	dc800815 	stw	r18,32(sp)
 10086bc:	dc400715 	stw	r17,28(sp)
 10086c0:	4021883a 	mov	r16,r8
 10086c4:	1039883a 	mov	fp,r2
 10086c8:	2829883a 	mov	r20,r5
 10086cc:	38003b1e 	bne	r7,zero,10087bc <__udivdi3+0x130>
 10086d0:	2a005c36 	bltu	r5,r8,1008844 <__udivdi3+0x1b8>
 10086d4:	4000a626 	beq	r8,zero,1008970 <__udivdi3+0x2e4>
 10086d8:	00bfffd4 	movui	r2,65535
 10086dc:	14009e36 	bltu	r2,r16,1008958 <__udivdi3+0x2cc>
 10086e0:	00803fc4 	movi	r2,255
 10086e4:	14013d36 	bltu	r2,r16,1008bdc <__udivdi3+0x550>
 10086e8:	000b883a 	mov	r5,zero
 10086ec:	0005883a 	mov	r2,zero
 10086f0:	8084d83a 	srl	r2,r16,r2
 10086f4:	01004074 	movhi	r4,257
 10086f8:	2134ae04 	addi	r4,r4,-11592
 10086fc:	01800804 	movi	r6,32
 1008700:	1105883a 	add	r2,r2,r4
 1008704:	10c00003 	ldbu	r3,0(r2)
 1008708:	28c7883a 	add	r3,r5,r3
 100870c:	30edc83a 	sub	r22,r6,r3
 1008710:	b000ee1e 	bne	r22,zero,1008acc <__udivdi3+0x440>
 1008714:	802ad43a 	srli	r21,r16,16
 1008718:	00800044 	movi	r2,1
 100871c:	a423c83a 	sub	r17,r20,r16
 1008720:	85ffffcc 	andi	r23,r16,65535
 1008724:	d8800315 	stw	r2,12(sp)
 1008728:	8809883a 	mov	r4,r17
 100872c:	a80b883a 	mov	r5,r21
 1008730:	1009f480 	call	1009f48 <__udivsi3>
 1008734:	8809883a 	mov	r4,r17
 1008738:	a80b883a 	mov	r5,r21
 100873c:	102d883a 	mov	r22,r2
 1008740:	1009f500 	call	1009f50 <__umodsi3>
 1008744:	1004943a 	slli	r2,r2,16
 1008748:	e006d43a 	srli	r3,fp,16
 100874c:	bda3383a 	mul	r17,r23,r22
 1008750:	10c4b03a 	or	r2,r2,r3
 1008754:	1440042e 	bgeu	r2,r17,1008768 <__udivdi3+0xdc>
 1008758:	1405883a 	add	r2,r2,r16
 100875c:	b5bfffc4 	addi	r22,r22,-1
 1008760:	14000136 	bltu	r2,r16,1008768 <__udivdi3+0xdc>
 1008764:	14413d36 	bltu	r2,r17,1008c5c <__udivdi3+0x5d0>
 1008768:	1463c83a 	sub	r17,r2,r17
 100876c:	8809883a 	mov	r4,r17
 1008770:	a80b883a 	mov	r5,r21
 1008774:	1009f480 	call	1009f48 <__udivsi3>
 1008778:	8809883a 	mov	r4,r17
 100877c:	a80b883a 	mov	r5,r21
 1008780:	1029883a 	mov	r20,r2
 1008784:	1009f500 	call	1009f50 <__umodsi3>
 1008788:	1004943a 	slli	r2,r2,16
 100878c:	bd09383a 	mul	r4,r23,r20
 1008790:	e0ffffcc 	andi	r3,fp,65535
 1008794:	10c4b03a 	or	r2,r2,r3
 1008798:	1100042e 	bgeu	r2,r4,10087ac <__udivdi3+0x120>
 100879c:	8085883a 	add	r2,r16,r2
 10087a0:	a53fffc4 	addi	r20,r20,-1
 10087a4:	14000136 	bltu	r2,r16,10087ac <__udivdi3+0x120>
 10087a8:	11012036 	bltu	r2,r4,1008c2c <__udivdi3+0x5a0>
 10087ac:	b004943a 	slli	r2,r22,16
 10087b0:	d9000317 	ldw	r4,12(sp)
 10087b4:	a084b03a 	or	r2,r20,r2
 10087b8:	00001506 	br	1008810 <__udivdi3+0x184>
 10087bc:	380d883a 	mov	r6,r7
 10087c0:	29c06236 	bltu	r5,r7,100894c <__udivdi3+0x2c0>
 10087c4:	00bfffd4 	movui	r2,65535
 10087c8:	11c05a36 	bltu	r2,r7,1008934 <__udivdi3+0x2a8>
 10087cc:	00803fc4 	movi	r2,255
 10087d0:	11c0fc36 	bltu	r2,r7,1008bc4 <__udivdi3+0x538>
 10087d4:	000b883a 	mov	r5,zero
 10087d8:	0005883a 	mov	r2,zero
 10087dc:	3084d83a 	srl	r2,r6,r2
 10087e0:	01004074 	movhi	r4,257
 10087e4:	2134ae04 	addi	r4,r4,-11592
 10087e8:	01c00804 	movi	r7,32
 10087ec:	1105883a 	add	r2,r2,r4
 10087f0:	10c00003 	ldbu	r3,0(r2)
 10087f4:	28c7883a 	add	r3,r5,r3
 10087f8:	38efc83a 	sub	r23,r7,r3
 10087fc:	b800691e 	bne	r23,zero,10089a4 <__udivdi3+0x318>
 1008800:	35000136 	bltu	r6,r20,1008808 <__udivdi3+0x17c>
 1008804:	e4005136 	bltu	fp,r16,100894c <__udivdi3+0x2c0>
 1008808:	00800044 	movi	r2,1
 100880c:	0009883a 	mov	r4,zero
 1008810:	2007883a 	mov	r3,r4
 1008814:	dfc00f17 	ldw	ra,60(sp)
 1008818:	df000e17 	ldw	fp,56(sp)
 100881c:	ddc00d17 	ldw	r23,52(sp)
 1008820:	dd800c17 	ldw	r22,48(sp)
 1008824:	dd400b17 	ldw	r21,44(sp)
 1008828:	dd000a17 	ldw	r20,40(sp)
 100882c:	dcc00917 	ldw	r19,36(sp)
 1008830:	dc800817 	ldw	r18,32(sp)
 1008834:	dc400717 	ldw	r17,28(sp)
 1008838:	dc000617 	ldw	r16,24(sp)
 100883c:	dec01004 	addi	sp,sp,64
 1008840:	f800283a 	ret
 1008844:	00bfffd4 	movui	r2,65535
 1008848:	12005036 	bltu	r2,r8,100898c <__udivdi3+0x300>
 100884c:	00803fc4 	movi	r2,255
 1008850:	1200e836 	bltu	r2,r8,1008bf4 <__udivdi3+0x568>
 1008854:	000b883a 	mov	r5,zero
 1008858:	0005883a 	mov	r2,zero
 100885c:	8084d83a 	srl	r2,r16,r2
 1008860:	01004074 	movhi	r4,257
 1008864:	2134ae04 	addi	r4,r4,-11592
 1008868:	01800804 	movi	r6,32
 100886c:	1105883a 	add	r2,r2,r4
 1008870:	10c00003 	ldbu	r3,0(r2)
 1008874:	28c7883a 	add	r3,r5,r3
 1008878:	30cbc83a 	sub	r5,r6,r3
 100887c:	28000626 	beq	r5,zero,1008898 <__udivdi3+0x20c>
 1008880:	3145c83a 	sub	r2,r6,r5
 1008884:	e084d83a 	srl	r2,fp,r2
 1008888:	a146983a 	sll	r3,r20,r5
 100888c:	e178983a 	sll	fp,fp,r5
 1008890:	8160983a 	sll	r16,r16,r5
 1008894:	18a8b03a 	or	r20,r3,r2
 1008898:	802ad43a 	srli	r21,r16,16
 100889c:	a009883a 	mov	r4,r20
 10088a0:	85ffffcc 	andi	r23,r16,65535
 10088a4:	a80b883a 	mov	r5,r21
 10088a8:	1009f480 	call	1009f48 <__udivsi3>
 10088ac:	a009883a 	mov	r4,r20
 10088b0:	a80b883a 	mov	r5,r21
 10088b4:	102d883a 	mov	r22,r2
 10088b8:	1009f500 	call	1009f50 <__umodsi3>
 10088bc:	1004943a 	slli	r2,r2,16
 10088c0:	e006d43a 	srli	r3,fp,16
 10088c4:	bda3383a 	mul	r17,r23,r22
 10088c8:	10c4b03a 	or	r2,r2,r3
 10088cc:	1440042e 	bgeu	r2,r17,10088e0 <__udivdi3+0x254>
 10088d0:	1405883a 	add	r2,r2,r16
 10088d4:	b5bfffc4 	addi	r22,r22,-1
 10088d8:	14000136 	bltu	r2,r16,10088e0 <__udivdi3+0x254>
 10088dc:	1440d536 	bltu	r2,r17,1008c34 <__udivdi3+0x5a8>
 10088e0:	1463c83a 	sub	r17,r2,r17
 10088e4:	8809883a 	mov	r4,r17
 10088e8:	a80b883a 	mov	r5,r21
 10088ec:	1009f480 	call	1009f48 <__udivsi3>
 10088f0:	8809883a 	mov	r4,r17
 10088f4:	a80b883a 	mov	r5,r21
 10088f8:	1029883a 	mov	r20,r2
 10088fc:	1009f500 	call	1009f50 <__umodsi3>
 1008900:	1004943a 	slli	r2,r2,16
 1008904:	bd09383a 	mul	r4,r23,r20
 1008908:	e0ffffcc 	andi	r3,fp,65535
 100890c:	10c4b03a 	or	r2,r2,r3
 1008910:	1100042e 	bgeu	r2,r4,1008924 <__udivdi3+0x298>
 1008914:	8085883a 	add	r2,r16,r2
 1008918:	a53fffc4 	addi	r20,r20,-1
 100891c:	14000136 	bltu	r2,r16,1008924 <__udivdi3+0x298>
 1008920:	1100c736 	bltu	r2,r4,1008c40 <__udivdi3+0x5b4>
 1008924:	b004943a 	slli	r2,r22,16
 1008928:	0009883a 	mov	r4,zero
 100892c:	a084b03a 	or	r2,r20,r2
 1008930:	003fb706 	br	1008810 <__udivdi3+0x184>
 1008934:	00804034 	movhi	r2,256
 1008938:	10bfffc4 	addi	r2,r2,-1
 100893c:	11c0a436 	bltu	r2,r7,1008bd0 <__udivdi3+0x544>
 1008940:	01400404 	movi	r5,16
 1008944:	2805883a 	mov	r2,r5
 1008948:	003fa406 	br	10087dc <__udivdi3+0x150>
 100894c:	0005883a 	mov	r2,zero
 1008950:	0009883a 	mov	r4,zero
 1008954:	003fae06 	br	1008810 <__udivdi3+0x184>
 1008958:	00804034 	movhi	r2,256
 100895c:	10bfffc4 	addi	r2,r2,-1
 1008960:	1400a136 	bltu	r2,r16,1008be8 <__udivdi3+0x55c>
 1008964:	01400404 	movi	r5,16
 1008968:	2805883a 	mov	r2,r5
 100896c:	003f6006 	br	10086f0 <__udivdi3+0x64>
 1008970:	01000044 	movi	r4,1
 1008974:	000b883a 	mov	r5,zero
 1008978:	1009f480 	call	1009f48 <__udivsi3>
 100897c:	1021883a 	mov	r16,r2
 1008980:	00bfffd4 	movui	r2,65535
 1008984:	143ff436 	bltu	r2,r16,1008958 <__udivdi3+0x2cc>
 1008988:	003f5506 	br	10086e0 <__udivdi3+0x54>
 100898c:	00804034 	movhi	r2,256
 1008990:	10bfffc4 	addi	r2,r2,-1
 1008994:	12009a36 	bltu	r2,r8,1008c00 <__udivdi3+0x574>
 1008998:	01400404 	movi	r5,16
 100899c:	2805883a 	mov	r2,r5
 10089a0:	003fae06 	br	100885c <__udivdi3+0x1d0>
 10089a4:	3dc5c83a 	sub	r2,r7,r23
 10089a8:	35c8983a 	sll	r4,r6,r23
 10089ac:	8086d83a 	srl	r3,r16,r2
 10089b0:	a0a2d83a 	srl	r17,r20,r2
 10089b4:	e084d83a 	srl	r2,fp,r2
 10089b8:	20eab03a 	or	r21,r4,r3
 10089bc:	a82cd43a 	srli	r22,r21,16
 10089c0:	a5c6983a 	sll	r3,r20,r23
 10089c4:	8809883a 	mov	r4,r17
 10089c8:	b00b883a 	mov	r5,r22
 10089cc:	1886b03a 	or	r3,r3,r2
 10089d0:	d8c00215 	stw	r3,8(sp)
 10089d4:	1009f480 	call	1009f48 <__udivsi3>
 10089d8:	8809883a 	mov	r4,r17
 10089dc:	b00b883a 	mov	r5,r22
 10089e0:	1029883a 	mov	r20,r2
 10089e4:	1009f500 	call	1009f50 <__umodsi3>
 10089e8:	a8ffffcc 	andi	r3,r21,65535
 10089ec:	d8c00515 	stw	r3,20(sp)
 10089f0:	d9000217 	ldw	r4,8(sp)
 10089f4:	d9400517 	ldw	r5,20(sp)
 10089f8:	1004943a 	slli	r2,r2,16
 10089fc:	2006d43a 	srli	r3,r4,16
 1008a00:	85e0983a 	sll	r16,r16,r23
 1008a04:	2d23383a 	mul	r17,r5,r20
 1008a08:	10c4b03a 	or	r2,r2,r3
 1008a0c:	dc000015 	stw	r16,0(sp)
 1008a10:	1440032e 	bgeu	r2,r17,1008a20 <__udivdi3+0x394>
 1008a14:	1545883a 	add	r2,r2,r21
 1008a18:	a53fffc4 	addi	r20,r20,-1
 1008a1c:	15407f2e 	bgeu	r2,r21,1008c1c <__udivdi3+0x590>
 1008a20:	1463c83a 	sub	r17,r2,r17
 1008a24:	8809883a 	mov	r4,r17
 1008a28:	b00b883a 	mov	r5,r22
 1008a2c:	1009f480 	call	1009f48 <__udivsi3>
 1008a30:	8809883a 	mov	r4,r17
 1008a34:	b00b883a 	mov	r5,r22
 1008a38:	1021883a 	mov	r16,r2
 1008a3c:	1009f500 	call	1009f50 <__umodsi3>
 1008a40:	d8c00517 	ldw	r3,20(sp)
 1008a44:	d9000217 	ldw	r4,8(sp)
 1008a48:	1004943a 	slli	r2,r2,16
 1008a4c:	1c0f383a 	mul	r7,r3,r16
 1008a50:	20ffffcc 	andi	r3,r4,65535
 1008a54:	10e2b03a 	or	r17,r2,r3
 1008a58:	89c0032e 	bgeu	r17,r7,1008a68 <__udivdi3+0x3dc>
 1008a5c:	8d63883a 	add	r17,r17,r21
 1008a60:	843fffc4 	addi	r16,r16,-1
 1008a64:	8d40692e 	bgeu	r17,r21,1008c0c <__udivdi3+0x580>
 1008a68:	a008943a 	slli	r4,r20,16
 1008a6c:	d9400017 	ldw	r5,0(sp)
 1008a70:	89e3c83a 	sub	r17,r17,r7
 1008a74:	8110b03a 	or	r8,r16,r4
 1008a78:	280cd43a 	srli	r6,r5,16
 1008a7c:	28ffffcc 	andi	r3,r5,65535
 1008a80:	40bfffcc 	andi	r2,r8,65535
 1008a84:	400ad43a 	srli	r5,r8,16
 1008a88:	10d3383a 	mul	r9,r2,r3
 1008a8c:	1185383a 	mul	r2,r2,r6
 1008a90:	28c7383a 	mul	r3,r5,r3
 1008a94:	4808d43a 	srli	r4,r9,16
 1008a98:	298b383a 	mul	r5,r5,r6
 1008a9c:	10c5883a 	add	r2,r2,r3
 1008aa0:	2089883a 	add	r4,r4,r2
 1008aa4:	20c0022e 	bgeu	r4,r3,1008ab0 <__udivdi3+0x424>
 1008aa8:	00800074 	movhi	r2,1
 1008aac:	288b883a 	add	r5,r5,r2
 1008ab0:	2004d43a 	srli	r2,r4,16
 1008ab4:	288b883a 	add	r5,r5,r2
 1008ab8:	89403f36 	bltu	r17,r5,1008bb8 <__udivdi3+0x52c>
 1008abc:	89403926 	beq	r17,r5,1008ba4 <__udivdi3+0x518>
 1008ac0:	4005883a 	mov	r2,r8
 1008ac4:	0009883a 	mov	r4,zero
 1008ac8:	003f5106 	br	1008810 <__udivdi3+0x184>
 1008acc:	85a0983a 	sll	r16,r16,r22
 1008ad0:	3585c83a 	sub	r2,r6,r22
 1008ad4:	a0a2d83a 	srl	r17,r20,r2
 1008ad8:	802ad43a 	srli	r21,r16,16
 1008adc:	e084d83a 	srl	r2,fp,r2
 1008ae0:	a586983a 	sll	r3,r20,r22
 1008ae4:	8809883a 	mov	r4,r17
 1008ae8:	a80b883a 	mov	r5,r21
 1008aec:	1886b03a 	or	r3,r3,r2
 1008af0:	d8c00115 	stw	r3,4(sp)
 1008af4:	1009f480 	call	1009f48 <__udivsi3>
 1008af8:	8809883a 	mov	r4,r17
 1008afc:	a80b883a 	mov	r5,r21
 1008b00:	d8800415 	stw	r2,16(sp)
 1008b04:	1009f500 	call	1009f50 <__umodsi3>
 1008b08:	d9000117 	ldw	r4,4(sp)
 1008b0c:	d9400417 	ldw	r5,16(sp)
 1008b10:	1004943a 	slli	r2,r2,16
 1008b14:	85ffffcc 	andi	r23,r16,65535
 1008b18:	2006d43a 	srli	r3,r4,16
 1008b1c:	b963383a 	mul	r17,r23,r5
 1008b20:	10c4b03a 	or	r2,r2,r3
 1008b24:	1440042e 	bgeu	r2,r17,1008b38 <__udivdi3+0x4ac>
 1008b28:	297fffc4 	addi	r5,r5,-1
 1008b2c:	1405883a 	add	r2,r2,r16
 1008b30:	d9400415 	stw	r5,16(sp)
 1008b34:	1400442e 	bgeu	r2,r16,1008c48 <__udivdi3+0x5bc>
 1008b38:	1463c83a 	sub	r17,r2,r17
 1008b3c:	8809883a 	mov	r4,r17
 1008b40:	a80b883a 	mov	r5,r21
 1008b44:	1009f480 	call	1009f48 <__udivsi3>
 1008b48:	8809883a 	mov	r4,r17
 1008b4c:	a80b883a 	mov	r5,r21
 1008b50:	1029883a 	mov	r20,r2
 1008b54:	1009f500 	call	1009f50 <__umodsi3>
 1008b58:	d9400117 	ldw	r5,4(sp)
 1008b5c:	1004943a 	slli	r2,r2,16
 1008b60:	bd09383a 	mul	r4,r23,r20
 1008b64:	28ffffcc 	andi	r3,r5,65535
 1008b68:	10c6b03a 	or	r3,r2,r3
 1008b6c:	1900062e 	bgeu	r3,r4,1008b88 <__udivdi3+0x4fc>
 1008b70:	1c07883a 	add	r3,r3,r16
 1008b74:	a53fffc4 	addi	r20,r20,-1
 1008b78:	1c000336 	bltu	r3,r16,1008b88 <__udivdi3+0x4fc>
 1008b7c:	1900022e 	bgeu	r3,r4,1008b88 <__udivdi3+0x4fc>
 1008b80:	a53fffc4 	addi	r20,r20,-1
 1008b84:	1c07883a 	add	r3,r3,r16
 1008b88:	d9400417 	ldw	r5,16(sp)
 1008b8c:	e5b8983a 	sll	fp,fp,r22
 1008b90:	1923c83a 	sub	r17,r3,r4
 1008b94:	2804943a 	slli	r2,r5,16
 1008b98:	a0a8b03a 	or	r20,r20,r2
 1008b9c:	dd000315 	stw	r20,12(sp)
 1008ba0:	003ee106 	br	1008728 <__udivdi3+0x9c>
 1008ba4:	2004943a 	slli	r2,r4,16
 1008ba8:	e5c8983a 	sll	r4,fp,r23
 1008bac:	48ffffcc 	andi	r3,r9,65535
 1008bb0:	10c5883a 	add	r2,r2,r3
 1008bb4:	20bfc22e 	bgeu	r4,r2,1008ac0 <__udivdi3+0x434>
 1008bb8:	40bfffc4 	addi	r2,r8,-1
 1008bbc:	0009883a 	mov	r4,zero
 1008bc0:	003f1306 	br	1008810 <__udivdi3+0x184>
 1008bc4:	01400204 	movi	r5,8
 1008bc8:	2805883a 	mov	r2,r5
 1008bcc:	003f0306 	br	10087dc <__udivdi3+0x150>
 1008bd0:	01400604 	movi	r5,24
 1008bd4:	2805883a 	mov	r2,r5
 1008bd8:	003f0006 	br	10087dc <__udivdi3+0x150>
 1008bdc:	01400204 	movi	r5,8
 1008be0:	2805883a 	mov	r2,r5
 1008be4:	003ec206 	br	10086f0 <__udivdi3+0x64>
 1008be8:	01400604 	movi	r5,24
 1008bec:	2805883a 	mov	r2,r5
 1008bf0:	003ebf06 	br	10086f0 <__udivdi3+0x64>
 1008bf4:	01400204 	movi	r5,8
 1008bf8:	2805883a 	mov	r2,r5
 1008bfc:	003f1706 	br	100885c <__udivdi3+0x1d0>
 1008c00:	01400604 	movi	r5,24
 1008c04:	2805883a 	mov	r2,r5
 1008c08:	003f1406 	br	100885c <__udivdi3+0x1d0>
 1008c0c:	89ff962e 	bgeu	r17,r7,1008a68 <__udivdi3+0x3dc>
 1008c10:	8d63883a 	add	r17,r17,r21
 1008c14:	843fffc4 	addi	r16,r16,-1
 1008c18:	003f9306 	br	1008a68 <__udivdi3+0x3dc>
 1008c1c:	147f802e 	bgeu	r2,r17,1008a20 <__udivdi3+0x394>
 1008c20:	a53fffc4 	addi	r20,r20,-1
 1008c24:	1545883a 	add	r2,r2,r21
 1008c28:	003f7d06 	br	1008a20 <__udivdi3+0x394>
 1008c2c:	a53fffc4 	addi	r20,r20,-1
 1008c30:	003ede06 	br	10087ac <__udivdi3+0x120>
 1008c34:	b5bfffc4 	addi	r22,r22,-1
 1008c38:	1405883a 	add	r2,r2,r16
 1008c3c:	003f2806 	br	10088e0 <__udivdi3+0x254>
 1008c40:	a53fffc4 	addi	r20,r20,-1
 1008c44:	003f3706 	br	1008924 <__udivdi3+0x298>
 1008c48:	147fbb2e 	bgeu	r2,r17,1008b38 <__udivdi3+0x4ac>
 1008c4c:	297fffc4 	addi	r5,r5,-1
 1008c50:	1405883a 	add	r2,r2,r16
 1008c54:	d9400415 	stw	r5,16(sp)
 1008c58:	003fb706 	br	1008b38 <__udivdi3+0x4ac>
 1008c5c:	b5bfffc4 	addi	r22,r22,-1
 1008c60:	1405883a 	add	r2,r2,r16
 1008c64:	003ec006 	br	1008768 <__udivdi3+0xdc>

01008c68 <__umoddi3>:
 1008c68:	defff104 	addi	sp,sp,-60
 1008c6c:	dd800b15 	stw	r22,44(sp)
 1008c70:	dd000915 	stw	r20,36(sp)
 1008c74:	dc000515 	stw	r16,20(sp)
 1008c78:	dfc00e15 	stw	ra,56(sp)
 1008c7c:	df000d15 	stw	fp,52(sp)
 1008c80:	ddc00c15 	stw	r23,48(sp)
 1008c84:	dd400a15 	stw	r21,40(sp)
 1008c88:	dcc00815 	stw	r19,32(sp)
 1008c8c:	dc800715 	stw	r18,28(sp)
 1008c90:	dc400615 	stw	r17,24(sp)
 1008c94:	3021883a 	mov	r16,r6
 1008c98:	202d883a 	mov	r22,r4
 1008c9c:	2829883a 	mov	r20,r5
 1008ca0:	38002b1e 	bne	r7,zero,1008d50 <__umoddi3+0xe8>
 1008ca4:	29805036 	bltu	r5,r6,1008de8 <__umoddi3+0x180>
 1008ca8:	30008a26 	beq	r6,zero,1008ed4 <__umoddi3+0x26c>
 1008cac:	00bfffd4 	movui	r2,65535
 1008cb0:	14008236 	bltu	r2,r16,1008ebc <__umoddi3+0x254>
 1008cb4:	00803fc4 	movi	r2,255
 1008cb8:	14013636 	bltu	r2,r16,1009194 <__umoddi3+0x52c>
 1008cbc:	000b883a 	mov	r5,zero
 1008cc0:	0005883a 	mov	r2,zero
 1008cc4:	8084d83a 	srl	r2,r16,r2
 1008cc8:	01004074 	movhi	r4,257
 1008ccc:	2134ae04 	addi	r4,r4,-11592
 1008cd0:	01800804 	movi	r6,32
 1008cd4:	1105883a 	add	r2,r2,r4
 1008cd8:	10c00003 	ldbu	r3,0(r2)
 1008cdc:	28c7883a 	add	r3,r5,r3
 1008ce0:	30efc83a 	sub	r23,r6,r3
 1008ce4:	b800941e 	bne	r23,zero,1008f38 <__umoddi3+0x2d0>
 1008ce8:	802ad43a 	srli	r21,r16,16
 1008cec:	a423c83a 	sub	r17,r20,r16
 1008cf0:	0039883a 	mov	fp,zero
 1008cf4:	853fffcc 	andi	r20,r16,65535
 1008cf8:	8809883a 	mov	r4,r17
 1008cfc:	a80b883a 	mov	r5,r21
 1008d00:	1009f480 	call	1009f48 <__udivsi3>
 1008d04:	8809883a 	mov	r4,r17
 1008d08:	a80b883a 	mov	r5,r21
 1008d0c:	a0a3383a 	mul	r17,r20,r2
 1008d10:	1009f500 	call	1009f50 <__umodsi3>
 1008d14:	1004943a 	slli	r2,r2,16
 1008d18:	b006d43a 	srli	r3,r22,16
 1008d1c:	10c4b03a 	or	r2,r2,r3
 1008d20:	1440032e 	bgeu	r2,r17,1008d30 <__umoddi3+0xc8>
 1008d24:	1405883a 	add	r2,r2,r16
 1008d28:	14000136 	bltu	r2,r16,1008d30 <__umoddi3+0xc8>
 1008d2c:	14413536 	bltu	r2,r17,1009204 <__umoddi3+0x59c>
 1008d30:	1463c83a 	sub	r17,r2,r17
 1008d34:	8809883a 	mov	r4,r17
 1008d38:	a80b883a 	mov	r5,r21
 1008d3c:	1009f480 	call	1009f48 <__udivsi3>
 1008d40:	8809883a 	mov	r4,r17
 1008d44:	a0a3383a 	mul	r17,r20,r2
 1008d48:	a80b883a 	mov	r5,r21
 1008d4c:	00004d06 	br	1008e84 <__umoddi3+0x21c>
 1008d50:	380d883a 	mov	r6,r7
 1008d54:	29c0102e 	bgeu	r5,r7,1008d98 <__umoddi3+0x130>
 1008d58:	2011883a 	mov	r8,r4
 1008d5c:	2813883a 	mov	r9,r5
 1008d60:	4005883a 	mov	r2,r8
 1008d64:	4807883a 	mov	r3,r9
 1008d68:	dfc00e17 	ldw	ra,56(sp)
 1008d6c:	df000d17 	ldw	fp,52(sp)
 1008d70:	ddc00c17 	ldw	r23,48(sp)
 1008d74:	dd800b17 	ldw	r22,44(sp)
 1008d78:	dd400a17 	ldw	r21,40(sp)
 1008d7c:	dd000917 	ldw	r20,36(sp)
 1008d80:	dcc00817 	ldw	r19,32(sp)
 1008d84:	dc800717 	ldw	r18,28(sp)
 1008d88:	dc400617 	ldw	r17,24(sp)
 1008d8c:	dc000517 	ldw	r16,20(sp)
 1008d90:	dec00f04 	addi	sp,sp,60
 1008d94:	f800283a 	ret
 1008d98:	00bfffd4 	movui	r2,65535
 1008d9c:	11c05a36 	bltu	r2,r7,1008f08 <__umoddi3+0x2a0>
 1008da0:	00803fc4 	movi	r2,255
 1008da4:	11c0fe36 	bltu	r2,r7,10091a0 <__umoddi3+0x538>
 1008da8:	000b883a 	mov	r5,zero
 1008dac:	0005883a 	mov	r2,zero
 1008db0:	3084d83a 	srl	r2,r6,r2
 1008db4:	01004074 	movhi	r4,257
 1008db8:	2134ae04 	addi	r4,r4,-11592
 1008dbc:	01c00804 	movi	r7,32
 1008dc0:	1105883a 	add	r2,r2,r4
 1008dc4:	10c00003 	ldbu	r3,0(r2)
 1008dc8:	28c7883a 	add	r3,r5,r3
 1008dcc:	38ebc83a 	sub	r21,r7,r3
 1008dd0:	a800851e 	bne	r21,zero,1008fe8 <__umoddi3+0x380>
 1008dd4:	35005236 	bltu	r6,r20,1008f20 <__umoddi3+0x2b8>
 1008dd8:	b400512e 	bgeu	r22,r16,1008f20 <__umoddi3+0x2b8>
 1008ddc:	b011883a 	mov	r8,r22
 1008de0:	a013883a 	mov	r9,r20
 1008de4:	003fde06 	br	1008d60 <__umoddi3+0xf8>
 1008de8:	00bfffd4 	movui	r2,65535
 1008dec:	11804036 	bltu	r2,r6,1008ef0 <__umoddi3+0x288>
 1008df0:	00803fc4 	movi	r2,255
 1008df4:	1180ed36 	bltu	r2,r6,10091ac <__umoddi3+0x544>
 1008df8:	000b883a 	mov	r5,zero
 1008dfc:	0005883a 	mov	r2,zero
 1008e00:	8084d83a 	srl	r2,r16,r2
 1008e04:	01004074 	movhi	r4,257
 1008e08:	2134ae04 	addi	r4,r4,-11592
 1008e0c:	01800804 	movi	r6,32
 1008e10:	1105883a 	add	r2,r2,r4
 1008e14:	10c00003 	ldbu	r3,0(r2)
 1008e18:	28c7883a 	add	r3,r5,r3
 1008e1c:	30c7c83a 	sub	r3,r6,r3
 1008e20:	1800bf1e 	bne	r3,zero,1009120 <__umoddi3+0x4b8>
 1008e24:	0039883a 	mov	fp,zero
 1008e28:	802ad43a 	srli	r21,r16,16
 1008e2c:	a009883a 	mov	r4,r20
 1008e30:	85ffffcc 	andi	r23,r16,65535
 1008e34:	a80b883a 	mov	r5,r21
 1008e38:	1009f480 	call	1009f48 <__udivsi3>
 1008e3c:	a009883a 	mov	r4,r20
 1008e40:	a80b883a 	mov	r5,r21
 1008e44:	b8a3383a 	mul	r17,r23,r2
 1008e48:	1009f500 	call	1009f50 <__umodsi3>
 1008e4c:	1004943a 	slli	r2,r2,16
 1008e50:	b006d43a 	srli	r3,r22,16
 1008e54:	10c4b03a 	or	r2,r2,r3
 1008e58:	1440032e 	bgeu	r2,r17,1008e68 <__umoddi3+0x200>
 1008e5c:	1405883a 	add	r2,r2,r16
 1008e60:	14000136 	bltu	r2,r16,1008e68 <__umoddi3+0x200>
 1008e64:	1440e536 	bltu	r2,r17,10091fc <__umoddi3+0x594>
 1008e68:	1463c83a 	sub	r17,r2,r17
 1008e6c:	8809883a 	mov	r4,r17
 1008e70:	a80b883a 	mov	r5,r21
 1008e74:	1009f480 	call	1009f48 <__udivsi3>
 1008e78:	8809883a 	mov	r4,r17
 1008e7c:	b8a3383a 	mul	r17,r23,r2
 1008e80:	a80b883a 	mov	r5,r21
 1008e84:	1009f500 	call	1009f50 <__umodsi3>
 1008e88:	1004943a 	slli	r2,r2,16
 1008e8c:	b0ffffcc 	andi	r3,r22,65535
 1008e90:	10c4b03a 	or	r2,r2,r3
 1008e94:	1440042e 	bgeu	r2,r17,1008ea8 <__umoddi3+0x240>
 1008e98:	1405883a 	add	r2,r2,r16
 1008e9c:	14000236 	bltu	r2,r16,1008ea8 <__umoddi3+0x240>
 1008ea0:	1440012e 	bgeu	r2,r17,1008ea8 <__umoddi3+0x240>
 1008ea4:	1405883a 	add	r2,r2,r16
 1008ea8:	1445c83a 	sub	r2,r2,r17
 1008eac:	1724d83a 	srl	r18,r2,fp
 1008eb0:	0013883a 	mov	r9,zero
 1008eb4:	9011883a 	mov	r8,r18
 1008eb8:	003fa906 	br	1008d60 <__umoddi3+0xf8>
 1008ebc:	00804034 	movhi	r2,256
 1008ec0:	10bfffc4 	addi	r2,r2,-1
 1008ec4:	1400b036 	bltu	r2,r16,1009188 <__umoddi3+0x520>
 1008ec8:	01400404 	movi	r5,16
 1008ecc:	2805883a 	mov	r2,r5
 1008ed0:	003f7c06 	br	1008cc4 <__umoddi3+0x5c>
 1008ed4:	01000044 	movi	r4,1
 1008ed8:	000b883a 	mov	r5,zero
 1008edc:	1009f480 	call	1009f48 <__udivsi3>
 1008ee0:	1021883a 	mov	r16,r2
 1008ee4:	00bfffd4 	movui	r2,65535
 1008ee8:	143ff436 	bltu	r2,r16,1008ebc <__umoddi3+0x254>
 1008eec:	003f7106 	br	1008cb4 <__umoddi3+0x4c>
 1008ef0:	00804034 	movhi	r2,256
 1008ef4:	10bfffc4 	addi	r2,r2,-1
 1008ef8:	1180af36 	bltu	r2,r6,10091b8 <__umoddi3+0x550>
 1008efc:	01400404 	movi	r5,16
 1008f00:	2805883a 	mov	r2,r5
 1008f04:	003fbe06 	br	1008e00 <__umoddi3+0x198>
 1008f08:	00804034 	movhi	r2,256
 1008f0c:	10bfffc4 	addi	r2,r2,-1
 1008f10:	11c0ac36 	bltu	r2,r7,10091c4 <__umoddi3+0x55c>
 1008f14:	01400404 	movi	r5,16
 1008f18:	2805883a 	mov	r2,r5
 1008f1c:	003fa406 	br	1008db0 <__umoddi3+0x148>
 1008f20:	b409c83a 	sub	r4,r22,r16
 1008f24:	b105803a 	cmpltu	r2,r22,r4
 1008f28:	a187c83a 	sub	r3,r20,r6
 1008f2c:	18a9c83a 	sub	r20,r3,r2
 1008f30:	202d883a 	mov	r22,r4
 1008f34:	003fa906 	br	1008ddc <__umoddi3+0x174>
 1008f38:	85e0983a 	sll	r16,r16,r23
 1008f3c:	35c5c83a 	sub	r2,r6,r23
 1008f40:	a0a2d83a 	srl	r17,r20,r2
 1008f44:	802ad43a 	srli	r21,r16,16
 1008f48:	b084d83a 	srl	r2,r22,r2
 1008f4c:	a5c6983a 	sll	r3,r20,r23
 1008f50:	8809883a 	mov	r4,r17
 1008f54:	a80b883a 	mov	r5,r21
 1008f58:	1886b03a 	or	r3,r3,r2
 1008f5c:	d8c00115 	stw	r3,4(sp)
 1008f60:	853fffcc 	andi	r20,r16,65535
 1008f64:	1009f480 	call	1009f48 <__udivsi3>
 1008f68:	8809883a 	mov	r4,r17
 1008f6c:	a80b883a 	mov	r5,r21
 1008f70:	a0a3383a 	mul	r17,r20,r2
 1008f74:	1009f500 	call	1009f50 <__umodsi3>
 1008f78:	d9000117 	ldw	r4,4(sp)
 1008f7c:	1004943a 	slli	r2,r2,16
 1008f80:	b839883a 	mov	fp,r23
 1008f84:	2006d43a 	srli	r3,r4,16
 1008f88:	10c4b03a 	or	r2,r2,r3
 1008f8c:	1440022e 	bgeu	r2,r17,1008f98 <__umoddi3+0x330>
 1008f90:	1405883a 	add	r2,r2,r16
 1008f94:	1400962e 	bgeu	r2,r16,10091f0 <__umoddi3+0x588>
 1008f98:	1463c83a 	sub	r17,r2,r17
 1008f9c:	8809883a 	mov	r4,r17
 1008fa0:	a80b883a 	mov	r5,r21
 1008fa4:	1009f480 	call	1009f48 <__udivsi3>
 1008fa8:	8809883a 	mov	r4,r17
 1008fac:	a80b883a 	mov	r5,r21
 1008fb0:	a0a3383a 	mul	r17,r20,r2
 1008fb4:	1009f500 	call	1009f50 <__umodsi3>
 1008fb8:	d9400117 	ldw	r5,4(sp)
 1008fbc:	1004943a 	slli	r2,r2,16
 1008fc0:	28ffffcc 	andi	r3,r5,65535
 1008fc4:	10c4b03a 	or	r2,r2,r3
 1008fc8:	1440042e 	bgeu	r2,r17,1008fdc <__umoddi3+0x374>
 1008fcc:	1405883a 	add	r2,r2,r16
 1008fd0:	14000236 	bltu	r2,r16,1008fdc <__umoddi3+0x374>
 1008fd4:	1440012e 	bgeu	r2,r17,1008fdc <__umoddi3+0x374>
 1008fd8:	1405883a 	add	r2,r2,r16
 1008fdc:	b5ec983a 	sll	r22,r22,r23
 1008fe0:	1463c83a 	sub	r17,r2,r17
 1008fe4:	003f4406 	br	1008cf8 <__umoddi3+0x90>
 1008fe8:	3d4fc83a 	sub	r7,r7,r21
 1008fec:	3546983a 	sll	r3,r6,r21
 1008ff0:	81c4d83a 	srl	r2,r16,r7
 1008ff4:	a1e2d83a 	srl	r17,r20,r7
 1008ff8:	a54c983a 	sll	r6,r20,r21
 1008ffc:	18aeb03a 	or	r23,r3,r2
 1009000:	b828d43a 	srli	r20,r23,16
 1009004:	b1c4d83a 	srl	r2,r22,r7
 1009008:	8809883a 	mov	r4,r17
 100900c:	a00b883a 	mov	r5,r20
 1009010:	308cb03a 	or	r6,r6,r2
 1009014:	d9c00315 	stw	r7,12(sp)
 1009018:	d9800215 	stw	r6,8(sp)
 100901c:	1009f480 	call	1009f48 <__udivsi3>
 1009020:	8809883a 	mov	r4,r17
 1009024:	a00b883a 	mov	r5,r20
 1009028:	1039883a 	mov	fp,r2
 100902c:	1009f500 	call	1009f50 <__umodsi3>
 1009030:	b8ffffcc 	andi	r3,r23,65535
 1009034:	d8c00415 	stw	r3,16(sp)
 1009038:	d9000217 	ldw	r4,8(sp)
 100903c:	d9400417 	ldw	r5,16(sp)
 1009040:	1004943a 	slli	r2,r2,16
 1009044:	2006d43a 	srli	r3,r4,16
 1009048:	8560983a 	sll	r16,r16,r21
 100904c:	2f23383a 	mul	r17,r5,fp
 1009050:	10c4b03a 	or	r2,r2,r3
 1009054:	dc000015 	stw	r16,0(sp)
 1009058:	b56c983a 	sll	r22,r22,r21
 100905c:	1440032e 	bgeu	r2,r17,100906c <__umoddi3+0x404>
 1009060:	15c5883a 	add	r2,r2,r23
 1009064:	e73fffc4 	addi	fp,fp,-1
 1009068:	15c05d2e 	bgeu	r2,r23,10091e0 <__umoddi3+0x578>
 100906c:	1463c83a 	sub	r17,r2,r17
 1009070:	8809883a 	mov	r4,r17
 1009074:	a00b883a 	mov	r5,r20
 1009078:	1009f480 	call	1009f48 <__udivsi3>
 100907c:	8809883a 	mov	r4,r17
 1009080:	a00b883a 	mov	r5,r20
 1009084:	1021883a 	mov	r16,r2
 1009088:	1009f500 	call	1009f50 <__umodsi3>
 100908c:	d8c00417 	ldw	r3,16(sp)
 1009090:	d9000217 	ldw	r4,8(sp)
 1009094:	1004943a 	slli	r2,r2,16
 1009098:	1c23383a 	mul	r17,r3,r16
 100909c:	20ffffcc 	andi	r3,r4,65535
 10090a0:	10ceb03a 	or	r7,r2,r3
 10090a4:	3c40032e 	bgeu	r7,r17,10090b4 <__umoddi3+0x44c>
 10090a8:	3dcf883a 	add	r7,r7,r23
 10090ac:	843fffc4 	addi	r16,r16,-1
 10090b0:	3dc0472e 	bgeu	r7,r23,10091d0 <__umoddi3+0x568>
 10090b4:	e004943a 	slli	r2,fp,16
 10090b8:	d9400017 	ldw	r5,0(sp)
 10090bc:	3c4fc83a 	sub	r7,r7,r17
 10090c0:	8084b03a 	or	r2,r16,r2
 10090c4:	28ffffcc 	andi	r3,r5,65535
 10090c8:	280cd43a 	srli	r6,r5,16
 10090cc:	100ad43a 	srli	r5,r2,16
 10090d0:	10bfffcc 	andi	r2,r2,65535
 10090d4:	10d1383a 	mul	r8,r2,r3
 10090d8:	28c7383a 	mul	r3,r5,r3
 10090dc:	1185383a 	mul	r2,r2,r6
 10090e0:	4008d43a 	srli	r4,r8,16
 10090e4:	298b383a 	mul	r5,r5,r6
 10090e8:	10c5883a 	add	r2,r2,r3
 10090ec:	2089883a 	add	r4,r4,r2
 10090f0:	20c0022e 	bgeu	r4,r3,10090fc <__umoddi3+0x494>
 10090f4:	00800074 	movhi	r2,1
 10090f8:	288b883a 	add	r5,r5,r2
 10090fc:	2004d43a 	srli	r2,r4,16
 1009100:	2008943a 	slli	r4,r4,16
 1009104:	40ffffcc 	andi	r3,r8,65535
 1009108:	288b883a 	add	r5,r5,r2
 100910c:	20c9883a 	add	r4,r4,r3
 1009110:	39400b36 	bltu	r7,r5,1009140 <__umoddi3+0x4d8>
 1009114:	39403d26 	beq	r7,r5,100920c <__umoddi3+0x5a4>
 1009118:	394bc83a 	sub	r5,r7,r5
 100911c:	00000f06 	br	100915c <__umoddi3+0x4f4>
 1009120:	30c5c83a 	sub	r2,r6,r3
 1009124:	1839883a 	mov	fp,r3
 1009128:	b084d83a 	srl	r2,r22,r2
 100912c:	a0c6983a 	sll	r3,r20,r3
 1009130:	8720983a 	sll	r16,r16,fp
 1009134:	b72c983a 	sll	r22,r22,fp
 1009138:	18a8b03a 	or	r20,r3,r2
 100913c:	003f3a06 	br	1008e28 <__umoddi3+0x1c0>
 1009140:	d8c00017 	ldw	r3,0(sp)
 1009144:	20c5c83a 	sub	r2,r4,r3
 1009148:	2089803a 	cmpltu	r4,r4,r2
 100914c:	2dc7c83a 	sub	r3,r5,r23
 1009150:	1907c83a 	sub	r3,r3,r4
 1009154:	38cbc83a 	sub	r5,r7,r3
 1009158:	1009883a 	mov	r4,r2
 100915c:	b105c83a 	sub	r2,r22,r4
 1009160:	b087803a 	cmpltu	r3,r22,r2
 1009164:	28c7c83a 	sub	r3,r5,r3
 1009168:	d9400317 	ldw	r5,12(sp)
 100916c:	1544d83a 	srl	r2,r2,r21
 1009170:	1948983a 	sll	r4,r3,r5
 1009174:	1d46d83a 	srl	r3,r3,r21
 1009178:	20a4b03a 	or	r18,r4,r2
 100917c:	9011883a 	mov	r8,r18
 1009180:	1813883a 	mov	r9,r3
 1009184:	003ef606 	br	1008d60 <__umoddi3+0xf8>
 1009188:	01400604 	movi	r5,24
 100918c:	2805883a 	mov	r2,r5
 1009190:	003ecc06 	br	1008cc4 <__umoddi3+0x5c>
 1009194:	01400204 	movi	r5,8
 1009198:	2805883a 	mov	r2,r5
 100919c:	003ec906 	br	1008cc4 <__umoddi3+0x5c>
 10091a0:	01400204 	movi	r5,8
 10091a4:	2805883a 	mov	r2,r5
 10091a8:	003f0106 	br	1008db0 <__umoddi3+0x148>
 10091ac:	01400204 	movi	r5,8
 10091b0:	2805883a 	mov	r2,r5
 10091b4:	003f1206 	br	1008e00 <__umoddi3+0x198>
 10091b8:	01400604 	movi	r5,24
 10091bc:	2805883a 	mov	r2,r5
 10091c0:	003f0f06 	br	1008e00 <__umoddi3+0x198>
 10091c4:	01400604 	movi	r5,24
 10091c8:	2805883a 	mov	r2,r5
 10091cc:	003ef806 	br	1008db0 <__umoddi3+0x148>
 10091d0:	3c7fb82e 	bgeu	r7,r17,10090b4 <__umoddi3+0x44c>
 10091d4:	843fffc4 	addi	r16,r16,-1
 10091d8:	3dcf883a 	add	r7,r7,r23
 10091dc:	003fb506 	br	10090b4 <__umoddi3+0x44c>
 10091e0:	147fa22e 	bgeu	r2,r17,100906c <__umoddi3+0x404>
 10091e4:	e73fffc4 	addi	fp,fp,-1
 10091e8:	15c5883a 	add	r2,r2,r23
 10091ec:	003f9f06 	br	100906c <__umoddi3+0x404>
 10091f0:	147f692e 	bgeu	r2,r17,1008f98 <__umoddi3+0x330>
 10091f4:	1405883a 	add	r2,r2,r16
 10091f8:	003f6706 	br	1008f98 <__umoddi3+0x330>
 10091fc:	1405883a 	add	r2,r2,r16
 1009200:	003f1906 	br	1008e68 <__umoddi3+0x200>
 1009204:	1405883a 	add	r2,r2,r16
 1009208:	003ec906 	br	1008d30 <__umoddi3+0xc8>
 100920c:	b13fcc36 	bltu	r22,r4,1009140 <__umoddi3+0x4d8>
 1009210:	000b883a 	mov	r5,zero
 1009214:	003fd106 	br	100915c <__umoddi3+0x4f4>

01009218 <_fpadd_parts>:
 1009218:	defff804 	addi	sp,sp,-32
 100921c:	dcc00315 	stw	r19,12(sp)
 1009220:	2027883a 	mov	r19,r4
 1009224:	21000017 	ldw	r4,0(r4)
 1009228:	00c00044 	movi	r3,1
 100922c:	dd400515 	stw	r21,20(sp)
 1009230:	dd000415 	stw	r20,16(sp)
 1009234:	ddc00715 	stw	r23,28(sp)
 1009238:	dd800615 	stw	r22,24(sp)
 100923c:	dc800215 	stw	r18,8(sp)
 1009240:	dc400115 	stw	r17,4(sp)
 1009244:	dc000015 	stw	r16,0(sp)
 1009248:	282b883a 	mov	r21,r5
 100924c:	3029883a 	mov	r20,r6
 1009250:	1900632e 	bgeu	r3,r4,10093e0 <_fpadd_parts+0x1c8>
 1009254:	28800017 	ldw	r2,0(r5)
 1009258:	1880812e 	bgeu	r3,r2,1009460 <_fpadd_parts+0x248>
 100925c:	00c00104 	movi	r3,4
 1009260:	20c0dc26 	beq	r4,r3,10095d4 <_fpadd_parts+0x3bc>
 1009264:	10c07e26 	beq	r2,r3,1009460 <_fpadd_parts+0x248>
 1009268:	00c00084 	movi	r3,2
 100926c:	10c06726 	beq	r2,r3,100940c <_fpadd_parts+0x1f4>
 1009270:	20c07b26 	beq	r4,r3,1009460 <_fpadd_parts+0x248>
 1009274:	9dc00217 	ldw	r23,8(r19)
 1009278:	28c00217 	ldw	r3,8(r5)
 100927c:	9c400317 	ldw	r17,12(r19)
 1009280:	2bc00317 	ldw	r15,12(r5)
 1009284:	b8cdc83a 	sub	r6,r23,r3
 1009288:	9c800417 	ldw	r18,16(r19)
 100928c:	2c000417 	ldw	r16,16(r5)
 1009290:	3009883a 	mov	r4,r6
 1009294:	30009716 	blt	r6,zero,10094f4 <_fpadd_parts+0x2dc>
 1009298:	00800fc4 	movi	r2,63
 100929c:	11806b16 	blt	r2,r6,100944c <_fpadd_parts+0x234>
 10092a0:	0100a40e 	bge	zero,r4,1009534 <_fpadd_parts+0x31c>
 10092a4:	35bff804 	addi	r22,r6,-32
 10092a8:	b000bc16 	blt	r22,zero,100959c <_fpadd_parts+0x384>
 10092ac:	8596d83a 	srl	r11,r16,r22
 10092b0:	0019883a 	mov	r12,zero
 10092b4:	0013883a 	mov	r9,zero
 10092b8:	01000044 	movi	r4,1
 10092bc:	0015883a 	mov	r10,zero
 10092c0:	b000be16 	blt	r22,zero,10095bc <_fpadd_parts+0x3a4>
 10092c4:	2590983a 	sll	r8,r4,r22
 10092c8:	000f883a 	mov	r7,zero
 10092cc:	00bfffc4 	movi	r2,-1
 10092d0:	3889883a 	add	r4,r7,r2
 10092d4:	408b883a 	add	r5,r8,r2
 10092d8:	21cd803a 	cmpltu	r6,r4,r7
 10092dc:	314b883a 	add	r5,r6,r5
 10092e0:	7904703a 	and	r2,r15,r4
 10092e4:	8146703a 	and	r3,r16,r5
 10092e8:	10c4b03a 	or	r2,r2,r3
 10092ec:	10000226 	beq	r2,zero,10092f8 <_fpadd_parts+0xe0>
 10092f0:	02400044 	movi	r9,1
 10092f4:	0015883a 	mov	r10,zero
 10092f8:	5a5eb03a 	or	r15,r11,r9
 10092fc:	62a0b03a 	or	r16,r12,r10
 1009300:	99400117 	ldw	r5,4(r19)
 1009304:	a8800117 	ldw	r2,4(r21)
 1009308:	28806e26 	beq	r5,r2,10094c4 <_fpadd_parts+0x2ac>
 100930c:	28006626 	beq	r5,zero,10094a8 <_fpadd_parts+0x290>
 1009310:	7c45c83a 	sub	r2,r15,r17
 1009314:	7889803a 	cmpltu	r4,r15,r2
 1009318:	8487c83a 	sub	r3,r16,r18
 100931c:	1909c83a 	sub	r4,r3,r4
 1009320:	100d883a 	mov	r6,r2
 1009324:	200f883a 	mov	r7,r4
 1009328:	38007716 	blt	r7,zero,1009508 <_fpadd_parts+0x2f0>
 100932c:	a5c00215 	stw	r23,8(r20)
 1009330:	a1c00415 	stw	r7,16(r20)
 1009334:	a0000115 	stw	zero,4(r20)
 1009338:	a1800315 	stw	r6,12(r20)
 100933c:	a2000317 	ldw	r8,12(r20)
 1009340:	a2400417 	ldw	r9,16(r20)
 1009344:	00bfffc4 	movi	r2,-1
 1009348:	408b883a 	add	r5,r8,r2
 100934c:	2a09803a 	cmpltu	r4,r5,r8
 1009350:	488d883a 	add	r6,r9,r2
 1009354:	01c40034 	movhi	r7,4096
 1009358:	39ffffc4 	addi	r7,r7,-1
 100935c:	218d883a 	add	r6,r4,r6
 1009360:	39801736 	bltu	r7,r6,10093c0 <_fpadd_parts+0x1a8>
 1009364:	31c06526 	beq	r6,r7,10094fc <_fpadd_parts+0x2e4>
 1009368:	a3000217 	ldw	r12,8(r20)
 100936c:	4209883a 	add	r4,r8,r8
 1009370:	00bfffc4 	movi	r2,-1
 1009374:	220f803a 	cmpltu	r7,r4,r8
 1009378:	4a4b883a 	add	r5,r9,r9
 100937c:	394f883a 	add	r7,r7,r5
 1009380:	2095883a 	add	r10,r4,r2
 1009384:	3897883a 	add	r11,r7,r2
 1009388:	510d803a 	cmpltu	r6,r10,r4
 100938c:	6099883a 	add	r12,r12,r2
 1009390:	32d7883a 	add	r11,r6,r11
 1009394:	00840034 	movhi	r2,4096
 1009398:	10bfffc4 	addi	r2,r2,-1
 100939c:	2011883a 	mov	r8,r4
 10093a0:	3813883a 	mov	r9,r7
 10093a4:	a1000315 	stw	r4,12(r20)
 10093a8:	a1c00415 	stw	r7,16(r20)
 10093ac:	a3000215 	stw	r12,8(r20)
 10093b0:	12c00336 	bltu	r2,r11,10093c0 <_fpadd_parts+0x1a8>
 10093b4:	58bfed1e 	bne	r11,r2,100936c <_fpadd_parts+0x154>
 10093b8:	00bfff84 	movi	r2,-2
 10093bc:	12bfeb2e 	bgeu	r2,r10,100936c <_fpadd_parts+0x154>
 10093c0:	a2800417 	ldw	r10,16(r20)
 10093c4:	008000c4 	movi	r2,3
 10093c8:	00c80034 	movhi	r3,8192
 10093cc:	18ffffc4 	addi	r3,r3,-1
 10093d0:	a2400317 	ldw	r9,12(r20)
 10093d4:	a0800015 	stw	r2,0(r20)
 10093d8:	1a802336 	bltu	r3,r10,1009468 <_fpadd_parts+0x250>
 10093dc:	a027883a 	mov	r19,r20
 10093e0:	9805883a 	mov	r2,r19
 10093e4:	ddc00717 	ldw	r23,28(sp)
 10093e8:	dd800617 	ldw	r22,24(sp)
 10093ec:	dd400517 	ldw	r21,20(sp)
 10093f0:	dd000417 	ldw	r20,16(sp)
 10093f4:	dcc00317 	ldw	r19,12(sp)
 10093f8:	dc800217 	ldw	r18,8(sp)
 10093fc:	dc400117 	ldw	r17,4(sp)
 1009400:	dc000017 	ldw	r16,0(sp)
 1009404:	dec00804 	addi	sp,sp,32
 1009408:	f800283a 	ret
 100940c:	20fff41e 	bne	r4,r3,10093e0 <_fpadd_parts+0x1c8>
 1009410:	31000015 	stw	r4,0(r6)
 1009414:	98800117 	ldw	r2,4(r19)
 1009418:	30800115 	stw	r2,4(r6)
 100941c:	98c00217 	ldw	r3,8(r19)
 1009420:	30c00215 	stw	r3,8(r6)
 1009424:	98800317 	ldw	r2,12(r19)
 1009428:	30800315 	stw	r2,12(r6)
 100942c:	98c00417 	ldw	r3,16(r19)
 1009430:	30c00415 	stw	r3,16(r6)
 1009434:	98800117 	ldw	r2,4(r19)
 1009438:	28c00117 	ldw	r3,4(r5)
 100943c:	3027883a 	mov	r19,r6
 1009440:	10c4703a 	and	r2,r2,r3
 1009444:	30800115 	stw	r2,4(r6)
 1009448:	003fe506 	br	10093e0 <_fpadd_parts+0x1c8>
 100944c:	1dc02616 	blt	r3,r23,10094e8 <_fpadd_parts+0x2d0>
 1009450:	0023883a 	mov	r17,zero
 1009454:	182f883a 	mov	r23,r3
 1009458:	0025883a 	mov	r18,zero
 100945c:	003fa806 	br	1009300 <_fpadd_parts+0xe8>
 1009460:	a827883a 	mov	r19,r21
 1009464:	003fde06 	br	10093e0 <_fpadd_parts+0x1c8>
 1009468:	01800044 	movi	r6,1
 100946c:	500497fa 	slli	r2,r10,31
 1009470:	4808d07a 	srli	r4,r9,1
 1009474:	518ad83a 	srl	r5,r10,r6
 1009478:	a2000217 	ldw	r8,8(r20)
 100947c:	1108b03a 	or	r4,r2,r4
 1009480:	0007883a 	mov	r3,zero
 1009484:	4984703a 	and	r2,r9,r6
 1009488:	208cb03a 	or	r6,r4,r2
 100948c:	28ceb03a 	or	r7,r5,r3
 1009490:	42000044 	addi	r8,r8,1
 1009494:	a027883a 	mov	r19,r20
 1009498:	a1c00415 	stw	r7,16(r20)
 100949c:	a2000215 	stw	r8,8(r20)
 10094a0:	a1800315 	stw	r6,12(r20)
 10094a4:	003fce06 	br	10093e0 <_fpadd_parts+0x1c8>
 10094a8:	8bc5c83a 	sub	r2,r17,r15
 10094ac:	8889803a 	cmpltu	r4,r17,r2
 10094b0:	9407c83a 	sub	r3,r18,r16
 10094b4:	1909c83a 	sub	r4,r3,r4
 10094b8:	100d883a 	mov	r6,r2
 10094bc:	200f883a 	mov	r7,r4
 10094c0:	003f9906 	br	1009328 <_fpadd_parts+0x110>
 10094c4:	7c45883a 	add	r2,r15,r17
 10094c8:	13c9803a 	cmpltu	r4,r2,r15
 10094cc:	8487883a 	add	r3,r16,r18
 10094d0:	20c9883a 	add	r4,r4,r3
 10094d4:	a1400115 	stw	r5,4(r20)
 10094d8:	a5c00215 	stw	r23,8(r20)
 10094dc:	a0800315 	stw	r2,12(r20)
 10094e0:	a1000415 	stw	r4,16(r20)
 10094e4:	003fb606 	br	10093c0 <_fpadd_parts+0x1a8>
 10094e8:	001f883a 	mov	r15,zero
 10094ec:	0021883a 	mov	r16,zero
 10094f0:	003f8306 	br	1009300 <_fpadd_parts+0xe8>
 10094f4:	018dc83a 	sub	r6,zero,r6
 10094f8:	003f6706 	br	1009298 <_fpadd_parts+0x80>
 10094fc:	00bfff84 	movi	r2,-2
 1009500:	117faf36 	bltu	r2,r5,10093c0 <_fpadd_parts+0x1a8>
 1009504:	003f9806 	br	1009368 <_fpadd_parts+0x150>
 1009508:	0005883a 	mov	r2,zero
 100950c:	1189c83a 	sub	r4,r2,r6
 1009510:	1105803a 	cmpltu	r2,r2,r4
 1009514:	01cbc83a 	sub	r5,zero,r7
 1009518:	2885c83a 	sub	r2,r5,r2
 100951c:	01800044 	movi	r6,1
 1009520:	a1800115 	stw	r6,4(r20)
 1009524:	a5c00215 	stw	r23,8(r20)
 1009528:	a1000315 	stw	r4,12(r20)
 100952c:	a0800415 	stw	r2,16(r20)
 1009530:	003f8206 	br	100933c <_fpadd_parts+0x124>
 1009534:	203f7226 	beq	r4,zero,1009300 <_fpadd_parts+0xe8>
 1009538:	35bff804 	addi	r22,r6,-32
 100953c:	b9af883a 	add	r23,r23,r6
 1009540:	b0003116 	blt	r22,zero,1009608 <_fpadd_parts+0x3f0>
 1009544:	959ad83a 	srl	r13,r18,r22
 1009548:	001d883a 	mov	r14,zero
 100954c:	000f883a 	mov	r7,zero
 1009550:	01000044 	movi	r4,1
 1009554:	0011883a 	mov	r8,zero
 1009558:	b0002516 	blt	r22,zero,10095f0 <_fpadd_parts+0x3d8>
 100955c:	2594983a 	sll	r10,r4,r22
 1009560:	0013883a 	mov	r9,zero
 1009564:	00bfffc4 	movi	r2,-1
 1009568:	4889883a 	add	r4,r9,r2
 100956c:	508b883a 	add	r5,r10,r2
 1009570:	224d803a 	cmpltu	r6,r4,r9
 1009574:	314b883a 	add	r5,r6,r5
 1009578:	8904703a 	and	r2,r17,r4
 100957c:	9146703a 	and	r3,r18,r5
 1009580:	10c4b03a 	or	r2,r2,r3
 1009584:	10000226 	beq	r2,zero,1009590 <_fpadd_parts+0x378>
 1009588:	01c00044 	movi	r7,1
 100958c:	0011883a 	mov	r8,zero
 1009590:	69e2b03a 	or	r17,r13,r7
 1009594:	7224b03a 	or	r18,r14,r8
 1009598:	003f5906 	br	1009300 <_fpadd_parts+0xe8>
 100959c:	8407883a 	add	r3,r16,r16
 10095a0:	008007c4 	movi	r2,31
 10095a4:	1185c83a 	sub	r2,r2,r6
 10095a8:	1886983a 	sll	r3,r3,r2
 10095ac:	7996d83a 	srl	r11,r15,r6
 10095b0:	8198d83a 	srl	r12,r16,r6
 10095b4:	1ad6b03a 	or	r11,r3,r11
 10095b8:	003f3e06 	br	10092b4 <_fpadd_parts+0x9c>
 10095bc:	2006d07a 	srli	r3,r4,1
 10095c0:	008007c4 	movi	r2,31
 10095c4:	1185c83a 	sub	r2,r2,r6
 10095c8:	1890d83a 	srl	r8,r3,r2
 10095cc:	218e983a 	sll	r7,r4,r6
 10095d0:	003f3e06 	br	10092cc <_fpadd_parts+0xb4>
 10095d4:	113f821e 	bne	r2,r4,10093e0 <_fpadd_parts+0x1c8>
 10095d8:	28c00117 	ldw	r3,4(r5)
 10095dc:	98800117 	ldw	r2,4(r19)
 10095e0:	10ff7f26 	beq	r2,r3,10093e0 <_fpadd_parts+0x1c8>
 10095e4:	04c04074 	movhi	r19,257
 10095e8:	9cf4a904 	addi	r19,r19,-11612
 10095ec:	003f7c06 	br	10093e0 <_fpadd_parts+0x1c8>
 10095f0:	2006d07a 	srli	r3,r4,1
 10095f4:	008007c4 	movi	r2,31
 10095f8:	1185c83a 	sub	r2,r2,r6
 10095fc:	1894d83a 	srl	r10,r3,r2
 1009600:	2192983a 	sll	r9,r4,r6
 1009604:	003fd706 	br	1009564 <_fpadd_parts+0x34c>
 1009608:	9487883a 	add	r3,r18,r18
 100960c:	008007c4 	movi	r2,31
 1009610:	1185c83a 	sub	r2,r2,r6
 1009614:	1886983a 	sll	r3,r3,r2
 1009618:	899ad83a 	srl	r13,r17,r6
 100961c:	919cd83a 	srl	r14,r18,r6
 1009620:	1b5ab03a 	or	r13,r3,r13
 1009624:	003fc906 	br	100954c <_fpadd_parts+0x334>

01009628 <__subdf3>:
 1009628:	deffea04 	addi	sp,sp,-88
 100962c:	dcc01415 	stw	r19,80(sp)
 1009630:	dcc00404 	addi	r19,sp,16
 1009634:	2011883a 	mov	r8,r4
 1009638:	2813883a 	mov	r9,r5
 100963c:	dc401315 	stw	r17,76(sp)
 1009640:	d809883a 	mov	r4,sp
 1009644:	980b883a 	mov	r5,r19
 1009648:	dc400904 	addi	r17,sp,36
 100964c:	dfc01515 	stw	ra,84(sp)
 1009650:	da400115 	stw	r9,4(sp)
 1009654:	d9c00315 	stw	r7,12(sp)
 1009658:	da000015 	stw	r8,0(sp)
 100965c:	d9800215 	stw	r6,8(sp)
 1009660:	10011780 	call	1001178 <__unpack_d>
 1009664:	d9000204 	addi	r4,sp,8
 1009668:	880b883a 	mov	r5,r17
 100966c:	10011780 	call	1001178 <__unpack_d>
 1009670:	d8800a17 	ldw	r2,40(sp)
 1009674:	880b883a 	mov	r5,r17
 1009678:	9809883a 	mov	r4,r19
 100967c:	d9800e04 	addi	r6,sp,56
 1009680:	1080005c 	xori	r2,r2,1
 1009684:	d8800a15 	stw	r2,40(sp)
 1009688:	10092180 	call	1009218 <_fpadd_parts>
 100968c:	1009883a 	mov	r4,r2
 1009690:	1000e640 	call	1000e64 <__pack_d>
 1009694:	dfc01517 	ldw	ra,84(sp)
 1009698:	dcc01417 	ldw	r19,80(sp)
 100969c:	dc401317 	ldw	r17,76(sp)
 10096a0:	dec01604 	addi	sp,sp,88
 10096a4:	f800283a 	ret

010096a8 <__adddf3>:
 10096a8:	deffea04 	addi	sp,sp,-88
 10096ac:	dcc01415 	stw	r19,80(sp)
 10096b0:	dcc00404 	addi	r19,sp,16
 10096b4:	2011883a 	mov	r8,r4
 10096b8:	2813883a 	mov	r9,r5
 10096bc:	dc401315 	stw	r17,76(sp)
 10096c0:	d809883a 	mov	r4,sp
 10096c4:	980b883a 	mov	r5,r19
 10096c8:	dc400904 	addi	r17,sp,36
 10096cc:	dfc01515 	stw	ra,84(sp)
 10096d0:	da400115 	stw	r9,4(sp)
 10096d4:	d9c00315 	stw	r7,12(sp)
 10096d8:	da000015 	stw	r8,0(sp)
 10096dc:	d9800215 	stw	r6,8(sp)
 10096e0:	10011780 	call	1001178 <__unpack_d>
 10096e4:	d9000204 	addi	r4,sp,8
 10096e8:	880b883a 	mov	r5,r17
 10096ec:	10011780 	call	1001178 <__unpack_d>
 10096f0:	d9800e04 	addi	r6,sp,56
 10096f4:	9809883a 	mov	r4,r19
 10096f8:	880b883a 	mov	r5,r17
 10096fc:	10092180 	call	1009218 <_fpadd_parts>
 1009700:	1009883a 	mov	r4,r2
 1009704:	1000e640 	call	1000e64 <__pack_d>
 1009708:	dfc01517 	ldw	ra,84(sp)
 100970c:	dcc01417 	ldw	r19,80(sp)
 1009710:	dc401317 	ldw	r17,76(sp)
 1009714:	dec01604 	addi	sp,sp,88
 1009718:	f800283a 	ret

0100971c <__muldf3>:
 100971c:	deffe004 	addi	sp,sp,-128
 1009720:	dc401815 	stw	r17,96(sp)
 1009724:	dc400404 	addi	r17,sp,16
 1009728:	2011883a 	mov	r8,r4
 100972c:	2813883a 	mov	r9,r5
 1009730:	dc001715 	stw	r16,92(sp)
 1009734:	d809883a 	mov	r4,sp
 1009738:	880b883a 	mov	r5,r17
 100973c:	dc000904 	addi	r16,sp,36
 1009740:	dfc01f15 	stw	ra,124(sp)
 1009744:	da400115 	stw	r9,4(sp)
 1009748:	d9c00315 	stw	r7,12(sp)
 100974c:	da000015 	stw	r8,0(sp)
 1009750:	d9800215 	stw	r6,8(sp)
 1009754:	ddc01e15 	stw	r23,120(sp)
 1009758:	dd801d15 	stw	r22,116(sp)
 100975c:	dd401c15 	stw	r21,112(sp)
 1009760:	dd001b15 	stw	r20,108(sp)
 1009764:	dcc01a15 	stw	r19,104(sp)
 1009768:	dc801915 	stw	r18,100(sp)
 100976c:	10011780 	call	1001178 <__unpack_d>
 1009770:	d9000204 	addi	r4,sp,8
 1009774:	800b883a 	mov	r5,r16
 1009778:	10011780 	call	1001178 <__unpack_d>
 100977c:	d9000417 	ldw	r4,16(sp)
 1009780:	00800044 	movi	r2,1
 1009784:	1100102e 	bgeu	r2,r4,10097c8 <__muldf3+0xac>
 1009788:	d8c00917 	ldw	r3,36(sp)
 100978c:	10c0062e 	bgeu	r2,r3,10097a8 <__muldf3+0x8c>
 1009790:	00800104 	movi	r2,4
 1009794:	20800a26 	beq	r4,r2,10097c0 <__muldf3+0xa4>
 1009798:	1880cc26 	beq	r3,r2,1009acc <__muldf3+0x3b0>
 100979c:	00800084 	movi	r2,2
 10097a0:	20800926 	beq	r4,r2,10097c8 <__muldf3+0xac>
 10097a4:	1880191e 	bne	r3,r2,100980c <__muldf3+0xf0>
 10097a8:	d8c00a17 	ldw	r3,40(sp)
 10097ac:	d8800517 	ldw	r2,20(sp)
 10097b0:	8009883a 	mov	r4,r16
 10097b4:	10c4c03a 	cmpne	r2,r2,r3
 10097b8:	d8800a15 	stw	r2,40(sp)
 10097bc:	00000706 	br	10097dc <__muldf3+0xc0>
 10097c0:	00800084 	movi	r2,2
 10097c4:	1880c326 	beq	r3,r2,1009ad4 <__muldf3+0x3b8>
 10097c8:	d8800517 	ldw	r2,20(sp)
 10097cc:	d8c00a17 	ldw	r3,40(sp)
 10097d0:	8809883a 	mov	r4,r17
 10097d4:	10c4c03a 	cmpne	r2,r2,r3
 10097d8:	d8800515 	stw	r2,20(sp)
 10097dc:	1000e640 	call	1000e64 <__pack_d>
 10097e0:	dfc01f17 	ldw	ra,124(sp)
 10097e4:	ddc01e17 	ldw	r23,120(sp)
 10097e8:	dd801d17 	ldw	r22,116(sp)
 10097ec:	dd401c17 	ldw	r21,112(sp)
 10097f0:	dd001b17 	ldw	r20,108(sp)
 10097f4:	dcc01a17 	ldw	r19,104(sp)
 10097f8:	dc801917 	ldw	r18,100(sp)
 10097fc:	dc401817 	ldw	r17,96(sp)
 1009800:	dc001717 	ldw	r16,92(sp)
 1009804:	dec02004 	addi	sp,sp,128
 1009808:	f800283a 	ret
 100980c:	dd800717 	ldw	r22,28(sp)
 1009810:	dc800c17 	ldw	r18,48(sp)
 1009814:	002b883a 	mov	r21,zero
 1009818:	0023883a 	mov	r17,zero
 100981c:	a80b883a 	mov	r5,r21
 1009820:	b00d883a 	mov	r6,r22
 1009824:	880f883a 	mov	r7,r17
 1009828:	ddc00817 	ldw	r23,32(sp)
 100982c:	dcc00d17 	ldw	r19,52(sp)
 1009830:	9009883a 	mov	r4,r18
 1009834:	1009f580 	call	1009f58 <__muldi3>
 1009838:	001b883a 	mov	r13,zero
 100983c:	680f883a 	mov	r7,r13
 1009840:	b009883a 	mov	r4,r22
 1009844:	000b883a 	mov	r5,zero
 1009848:	980d883a 	mov	r6,r19
 100984c:	b82d883a 	mov	r22,r23
 1009850:	002f883a 	mov	r23,zero
 1009854:	db401615 	stw	r13,88(sp)
 1009858:	d8801315 	stw	r2,76(sp)
 100985c:	d8c01415 	stw	r3,80(sp)
 1009860:	dcc01515 	stw	r19,84(sp)
 1009864:	1009f580 	call	1009f58 <__muldi3>
 1009868:	b00d883a 	mov	r6,r22
 100986c:	000b883a 	mov	r5,zero
 1009870:	9009883a 	mov	r4,r18
 1009874:	b80f883a 	mov	r7,r23
 1009878:	1021883a 	mov	r16,r2
 100987c:	1823883a 	mov	r17,r3
 1009880:	1009f580 	call	1009f58 <__muldi3>
 1009884:	8085883a 	add	r2,r16,r2
 1009888:	140d803a 	cmpltu	r6,r2,r16
 100988c:	88c7883a 	add	r3,r17,r3
 1009890:	30cd883a 	add	r6,r6,r3
 1009894:	1029883a 	mov	r20,r2
 1009898:	302b883a 	mov	r21,r6
 100989c:	da801317 	ldw	r10,76(sp)
 10098a0:	dac01417 	ldw	r11,80(sp)
 10098a4:	db001517 	ldw	r12,84(sp)
 10098a8:	db401617 	ldw	r13,88(sp)
 10098ac:	3440612e 	bgeu	r6,r17,1009a34 <__muldf3+0x318>
 10098b0:	0009883a 	mov	r4,zero
 10098b4:	5105883a 	add	r2,r10,r4
 10098b8:	128d803a 	cmpltu	r6,r2,r10
 10098bc:	5d07883a 	add	r3,r11,r20
 10098c0:	30cd883a 	add	r6,r6,r3
 10098c4:	0021883a 	mov	r16,zero
 10098c8:	04400044 	movi	r17,1
 10098cc:	1025883a 	mov	r18,r2
 10098d0:	3027883a 	mov	r19,r6
 10098d4:	32c06236 	bltu	r6,r11,1009a60 <__muldf3+0x344>
 10098d8:	59807a26 	beq	r11,r6,1009ac4 <__muldf3+0x3a8>
 10098dc:	680b883a 	mov	r5,r13
 10098e0:	b80f883a 	mov	r7,r23
 10098e4:	6009883a 	mov	r4,r12
 10098e8:	b00d883a 	mov	r6,r22
 10098ec:	1009f580 	call	1009f58 <__muldi3>
 10098f0:	1009883a 	mov	r4,r2
 10098f4:	000f883a 	mov	r7,zero
 10098f8:	1545883a 	add	r2,r2,r21
 10098fc:	1111803a 	cmpltu	r8,r2,r4
 1009900:	19c7883a 	add	r3,r3,r7
 1009904:	40c7883a 	add	r3,r8,r3
 1009908:	88cb883a 	add	r5,r17,r3
 100990c:	d8c00617 	ldw	r3,24(sp)
 1009910:	8089883a 	add	r4,r16,r2
 1009914:	d8800b17 	ldw	r2,44(sp)
 1009918:	18c00104 	addi	r3,r3,4
 100991c:	240d803a 	cmpltu	r6,r4,r16
 1009920:	10c7883a 	add	r3,r2,r3
 1009924:	2013883a 	mov	r9,r4
 1009928:	d8800a17 	ldw	r2,40(sp)
 100992c:	d9000517 	ldw	r4,20(sp)
 1009930:	314d883a 	add	r6,r6,r5
 1009934:	3015883a 	mov	r10,r6
 1009938:	2088c03a 	cmpne	r4,r4,r2
 100993c:	00880034 	movhi	r2,8192
 1009940:	10bfffc4 	addi	r2,r2,-1
 1009944:	d9000f15 	stw	r4,60(sp)
 1009948:	d8c01015 	stw	r3,64(sp)
 100994c:	1180162e 	bgeu	r2,r6,10099a8 <__muldf3+0x28c>
 1009950:	1811883a 	mov	r8,r3
 1009954:	101f883a 	mov	r15,r2
 1009958:	980497fa 	slli	r2,r19,31
 100995c:	9016d07a 	srli	r11,r18,1
 1009960:	500697fa 	slli	r3,r10,31
 1009964:	480cd07a 	srli	r6,r9,1
 1009968:	500ed07a 	srli	r7,r10,1
 100996c:	12d6b03a 	or	r11,r2,r11
 1009970:	00800044 	movi	r2,1
 1009974:	198cb03a 	or	r6,r3,r6
 1009978:	4888703a 	and	r4,r9,r2
 100997c:	9818d07a 	srli	r12,r19,1
 1009980:	001b883a 	mov	r13,zero
 1009984:	03a00034 	movhi	r14,32768
 1009988:	3013883a 	mov	r9,r6
 100998c:	3815883a 	mov	r10,r7
 1009990:	4091883a 	add	r8,r8,r2
 1009994:	20000226 	beq	r4,zero,10099a0 <__muldf3+0x284>
 1009998:	5b64b03a 	or	r18,r11,r13
 100999c:	63a6b03a 	or	r19,r12,r14
 10099a0:	7abfed36 	bltu	r15,r10,1009958 <__muldf3+0x23c>
 10099a4:	da001015 	stw	r8,64(sp)
 10099a8:	00840034 	movhi	r2,4096
 10099ac:	10bfffc4 	addi	r2,r2,-1
 10099b0:	12801436 	bltu	r2,r10,1009a04 <__muldf3+0x2e8>
 10099b4:	da001017 	ldw	r8,64(sp)
 10099b8:	101f883a 	mov	r15,r2
 10099bc:	4a45883a 	add	r2,r9,r9
 10099c0:	124d803a 	cmpltu	r6,r2,r9
 10099c4:	5287883a 	add	r3,r10,r10
 10099c8:	9497883a 	add	r11,r18,r18
 10099cc:	5c8f803a 	cmpltu	r7,r11,r18
 10099d0:	9cd9883a 	add	r12,r19,r19
 10099d4:	01000044 	movi	r4,1
 10099d8:	30cd883a 	add	r6,r6,r3
 10099dc:	3b0f883a 	add	r7,r7,r12
 10099e0:	423fffc4 	addi	r8,r8,-1
 10099e4:	1013883a 	mov	r9,r2
 10099e8:	3015883a 	mov	r10,r6
 10099ec:	111ab03a 	or	r13,r2,r4
 10099f0:	98003016 	blt	r19,zero,1009ab4 <__muldf3+0x398>
 10099f4:	5825883a 	mov	r18,r11
 10099f8:	3827883a 	mov	r19,r7
 10099fc:	7abfef2e 	bgeu	r15,r10,10099bc <__muldf3+0x2a0>
 1009a00:	da001015 	stw	r8,64(sp)
 1009a04:	00803fc4 	movi	r2,255
 1009a08:	488e703a 	and	r7,r9,r2
 1009a0c:	00802004 	movi	r2,128
 1009a10:	0007883a 	mov	r3,zero
 1009a14:	0011883a 	mov	r8,zero
 1009a18:	38801826 	beq	r7,r2,1009a7c <__muldf3+0x360>
 1009a1c:	008000c4 	movi	r2,3
 1009a20:	d9000e04 	addi	r4,sp,56
 1009a24:	da801215 	stw	r10,72(sp)
 1009a28:	d8800e15 	stw	r2,56(sp)
 1009a2c:	da401115 	stw	r9,68(sp)
 1009a30:	003f6a06 	br	10097dc <__muldf3+0xc0>
 1009a34:	89802126 	beq	r17,r6,1009abc <__muldf3+0x3a0>
 1009a38:	0009883a 	mov	r4,zero
 1009a3c:	5105883a 	add	r2,r10,r4
 1009a40:	128d803a 	cmpltu	r6,r2,r10
 1009a44:	5d07883a 	add	r3,r11,r20
 1009a48:	30cd883a 	add	r6,r6,r3
 1009a4c:	0021883a 	mov	r16,zero
 1009a50:	0023883a 	mov	r17,zero
 1009a54:	1025883a 	mov	r18,r2
 1009a58:	3027883a 	mov	r19,r6
 1009a5c:	32ff9e2e 	bgeu	r6,r11,10098d8 <__muldf3+0x1bc>
 1009a60:	00800044 	movi	r2,1
 1009a64:	8089883a 	add	r4,r16,r2
 1009a68:	240d803a 	cmpltu	r6,r4,r16
 1009a6c:	344d883a 	add	r6,r6,r17
 1009a70:	2021883a 	mov	r16,r4
 1009a74:	3023883a 	mov	r17,r6
 1009a78:	003f9806 	br	10098dc <__muldf3+0x1c0>
 1009a7c:	403fe71e 	bne	r8,zero,1009a1c <__muldf3+0x300>
 1009a80:	01004004 	movi	r4,256
 1009a84:	4904703a 	and	r2,r9,r4
 1009a88:	10c4b03a 	or	r2,r2,r3
 1009a8c:	103fe31e 	bne	r2,zero,1009a1c <__muldf3+0x300>
 1009a90:	94c4b03a 	or	r2,r18,r19
 1009a94:	103fe126 	beq	r2,zero,1009a1c <__muldf3+0x300>
 1009a98:	49c5883a 	add	r2,r9,r7
 1009a9c:	1251803a 	cmpltu	r8,r2,r9
 1009aa0:	4291883a 	add	r8,r8,r10
 1009aa4:	013fc004 	movi	r4,-256
 1009aa8:	1112703a 	and	r9,r2,r4
 1009aac:	4015883a 	mov	r10,r8
 1009ab0:	003fda06 	br	1009a1c <__muldf3+0x300>
 1009ab4:	6813883a 	mov	r9,r13
 1009ab8:	003fce06 	br	10099f4 <__muldf3+0x2d8>
 1009abc:	143f7c36 	bltu	r2,r16,10098b0 <__muldf3+0x194>
 1009ac0:	003fdd06 	br	1009a38 <__muldf3+0x31c>
 1009ac4:	12bf852e 	bgeu	r2,r10,10098dc <__muldf3+0x1c0>
 1009ac8:	003fe506 	br	1009a60 <__muldf3+0x344>
 1009acc:	00800084 	movi	r2,2
 1009ad0:	20bf351e 	bne	r4,r2,10097a8 <__muldf3+0x8c>
 1009ad4:	01004074 	movhi	r4,257
 1009ad8:	2134a904 	addi	r4,r4,-11612
 1009adc:	003f3f06 	br	10097dc <__muldf3+0xc0>

01009ae0 <__eqdf2>:
 1009ae0:	deffef04 	addi	sp,sp,-68
 1009ae4:	dc400f15 	stw	r17,60(sp)
 1009ae8:	dc400404 	addi	r17,sp,16
 1009aec:	2005883a 	mov	r2,r4
 1009af0:	2807883a 	mov	r3,r5
 1009af4:	dc000e15 	stw	r16,56(sp)
 1009af8:	d809883a 	mov	r4,sp
 1009afc:	880b883a 	mov	r5,r17
 1009b00:	dc000904 	addi	r16,sp,36
 1009b04:	d8c00115 	stw	r3,4(sp)
 1009b08:	d8800015 	stw	r2,0(sp)
 1009b0c:	d9800215 	stw	r6,8(sp)
 1009b10:	dfc01015 	stw	ra,64(sp)
 1009b14:	d9c00315 	stw	r7,12(sp)
 1009b18:	10011780 	call	1001178 <__unpack_d>
 1009b1c:	d9000204 	addi	r4,sp,8
 1009b20:	800b883a 	mov	r5,r16
 1009b24:	10011780 	call	1001178 <__unpack_d>
 1009b28:	d8800417 	ldw	r2,16(sp)
 1009b2c:	00c00044 	movi	r3,1
 1009b30:	180d883a 	mov	r6,r3
 1009b34:	1880062e 	bgeu	r3,r2,1009b50 <__eqdf2+0x70>
 1009b38:	d8800917 	ldw	r2,36(sp)
 1009b3c:	8809883a 	mov	r4,r17
 1009b40:	800b883a 	mov	r5,r16
 1009b44:	1880022e 	bgeu	r3,r2,1009b50 <__eqdf2+0x70>
 1009b48:	10012b00 	call	10012b0 <__fpcmp_parts_d>
 1009b4c:	100d883a 	mov	r6,r2
 1009b50:	3005883a 	mov	r2,r6
 1009b54:	dfc01017 	ldw	ra,64(sp)
 1009b58:	dc400f17 	ldw	r17,60(sp)
 1009b5c:	dc000e17 	ldw	r16,56(sp)
 1009b60:	dec01104 	addi	sp,sp,68
 1009b64:	f800283a 	ret

01009b68 <__nedf2>:
 1009b68:	deffef04 	addi	sp,sp,-68
 1009b6c:	dc400f15 	stw	r17,60(sp)
 1009b70:	dc400404 	addi	r17,sp,16
 1009b74:	2005883a 	mov	r2,r4
 1009b78:	2807883a 	mov	r3,r5
 1009b7c:	dc000e15 	stw	r16,56(sp)
 1009b80:	d809883a 	mov	r4,sp
 1009b84:	880b883a 	mov	r5,r17
 1009b88:	dc000904 	addi	r16,sp,36
 1009b8c:	d8c00115 	stw	r3,4(sp)
 1009b90:	d8800015 	stw	r2,0(sp)
 1009b94:	d9800215 	stw	r6,8(sp)
 1009b98:	dfc01015 	stw	ra,64(sp)
 1009b9c:	d9c00315 	stw	r7,12(sp)
 1009ba0:	10011780 	call	1001178 <__unpack_d>
 1009ba4:	d9000204 	addi	r4,sp,8
 1009ba8:	800b883a 	mov	r5,r16
 1009bac:	10011780 	call	1001178 <__unpack_d>
 1009bb0:	d8800417 	ldw	r2,16(sp)
 1009bb4:	00c00044 	movi	r3,1
 1009bb8:	180d883a 	mov	r6,r3
 1009bbc:	1880062e 	bgeu	r3,r2,1009bd8 <__nedf2+0x70>
 1009bc0:	d8800917 	ldw	r2,36(sp)
 1009bc4:	8809883a 	mov	r4,r17
 1009bc8:	800b883a 	mov	r5,r16
 1009bcc:	1880022e 	bgeu	r3,r2,1009bd8 <__nedf2+0x70>
 1009bd0:	10012b00 	call	10012b0 <__fpcmp_parts_d>
 1009bd4:	100d883a 	mov	r6,r2
 1009bd8:	3005883a 	mov	r2,r6
 1009bdc:	dfc01017 	ldw	ra,64(sp)
 1009be0:	dc400f17 	ldw	r17,60(sp)
 1009be4:	dc000e17 	ldw	r16,56(sp)
 1009be8:	dec01104 	addi	sp,sp,68
 1009bec:	f800283a 	ret

01009bf0 <__gedf2>:
 1009bf0:	deffef04 	addi	sp,sp,-68
 1009bf4:	dc400f15 	stw	r17,60(sp)
 1009bf8:	dc400404 	addi	r17,sp,16
 1009bfc:	2005883a 	mov	r2,r4
 1009c00:	2807883a 	mov	r3,r5
 1009c04:	dc000e15 	stw	r16,56(sp)
 1009c08:	d809883a 	mov	r4,sp
 1009c0c:	880b883a 	mov	r5,r17
 1009c10:	dc000904 	addi	r16,sp,36
 1009c14:	d8c00115 	stw	r3,4(sp)
 1009c18:	d8800015 	stw	r2,0(sp)
 1009c1c:	d9800215 	stw	r6,8(sp)
 1009c20:	dfc01015 	stw	ra,64(sp)
 1009c24:	d9c00315 	stw	r7,12(sp)
 1009c28:	10011780 	call	1001178 <__unpack_d>
 1009c2c:	d9000204 	addi	r4,sp,8
 1009c30:	800b883a 	mov	r5,r16
 1009c34:	10011780 	call	1001178 <__unpack_d>
 1009c38:	d8800417 	ldw	r2,16(sp)
 1009c3c:	00c00044 	movi	r3,1
 1009c40:	01bfffc4 	movi	r6,-1
 1009c44:	1880062e 	bgeu	r3,r2,1009c60 <__gedf2+0x70>
 1009c48:	d8800917 	ldw	r2,36(sp)
 1009c4c:	8809883a 	mov	r4,r17
 1009c50:	800b883a 	mov	r5,r16
 1009c54:	1880022e 	bgeu	r3,r2,1009c60 <__gedf2+0x70>
 1009c58:	10012b00 	call	10012b0 <__fpcmp_parts_d>
 1009c5c:	100d883a 	mov	r6,r2
 1009c60:	3005883a 	mov	r2,r6
 1009c64:	dfc01017 	ldw	ra,64(sp)
 1009c68:	dc400f17 	ldw	r17,60(sp)
 1009c6c:	dc000e17 	ldw	r16,56(sp)
 1009c70:	dec01104 	addi	sp,sp,68
 1009c74:	f800283a 	ret

01009c78 <__floatunsidf>:
 1009c78:	defff204 	addi	sp,sp,-56
 1009c7c:	dfc00d15 	stw	ra,52(sp)
 1009c80:	ddc00c15 	stw	r23,48(sp)
 1009c84:	dd800b15 	stw	r22,44(sp)
 1009c88:	dd400a15 	stw	r21,40(sp)
 1009c8c:	dd000915 	stw	r20,36(sp)
 1009c90:	dcc00815 	stw	r19,32(sp)
 1009c94:	dc800715 	stw	r18,28(sp)
 1009c98:	dc400615 	stw	r17,24(sp)
 1009c9c:	dc000515 	stw	r16,20(sp)
 1009ca0:	d8000115 	stw	zero,4(sp)
 1009ca4:	20000f1e 	bne	r4,zero,1009ce4 <__floatunsidf+0x6c>
 1009ca8:	00800084 	movi	r2,2
 1009cac:	d8800015 	stw	r2,0(sp)
 1009cb0:	d809883a 	mov	r4,sp
 1009cb4:	1000e640 	call	1000e64 <__pack_d>
 1009cb8:	dfc00d17 	ldw	ra,52(sp)
 1009cbc:	ddc00c17 	ldw	r23,48(sp)
 1009cc0:	dd800b17 	ldw	r22,44(sp)
 1009cc4:	dd400a17 	ldw	r21,40(sp)
 1009cc8:	dd000917 	ldw	r20,36(sp)
 1009ccc:	dcc00817 	ldw	r19,32(sp)
 1009cd0:	dc800717 	ldw	r18,28(sp)
 1009cd4:	dc400617 	ldw	r17,24(sp)
 1009cd8:	dc000517 	ldw	r16,20(sp)
 1009cdc:	dec00e04 	addi	sp,sp,56
 1009ce0:	f800283a 	ret
 1009ce4:	008000c4 	movi	r2,3
 1009ce8:	00c00f04 	movi	r3,60
 1009cec:	002f883a 	mov	r23,zero
 1009cf0:	202d883a 	mov	r22,r4
 1009cf4:	d8800015 	stw	r2,0(sp)
 1009cf8:	d8c00215 	stw	r3,8(sp)
 1009cfc:	d9000315 	stw	r4,12(sp)
 1009d00:	ddc00415 	stw	r23,16(sp)
 1009d04:	1000de40 	call	1000de4 <__clzsi2>
 1009d08:	12400744 	addi	r9,r2,29
 1009d0c:	48000b16 	blt	r9,zero,1009d3c <__floatunsidf+0xc4>
 1009d10:	483fe726 	beq	r9,zero,1009cb0 <__floatunsidf+0x38>
 1009d14:	10bfff44 	addi	r2,r2,-3
 1009d18:	10002e16 	blt	r2,zero,1009dd4 <__floatunsidf+0x15c>
 1009d1c:	b0a2983a 	sll	r17,r22,r2
 1009d20:	0021883a 	mov	r16,zero
 1009d24:	d8800217 	ldw	r2,8(sp)
 1009d28:	dc400415 	stw	r17,16(sp)
 1009d2c:	dc000315 	stw	r16,12(sp)
 1009d30:	1245c83a 	sub	r2,r2,r9
 1009d34:	d8800215 	stw	r2,8(sp)
 1009d38:	003fdd06 	br	1009cb0 <__floatunsidf+0x38>
 1009d3c:	0255c83a 	sub	r10,zero,r9
 1009d40:	51bff804 	addi	r6,r10,-32
 1009d44:	30001b16 	blt	r6,zero,1009db4 <__floatunsidf+0x13c>
 1009d48:	b9a8d83a 	srl	r20,r23,r6
 1009d4c:	002b883a 	mov	r21,zero
 1009d50:	000f883a 	mov	r7,zero
 1009d54:	01000044 	movi	r4,1
 1009d58:	0011883a 	mov	r8,zero
 1009d5c:	30002516 	blt	r6,zero,1009df4 <__floatunsidf+0x17c>
 1009d60:	21a6983a 	sll	r19,r4,r6
 1009d64:	0025883a 	mov	r18,zero
 1009d68:	00bfffc4 	movi	r2,-1
 1009d6c:	9089883a 	add	r4,r18,r2
 1009d70:	988b883a 	add	r5,r19,r2
 1009d74:	248d803a 	cmpltu	r6,r4,r18
 1009d78:	314b883a 	add	r5,r6,r5
 1009d7c:	b104703a 	and	r2,r22,r4
 1009d80:	b946703a 	and	r3,r23,r5
 1009d84:	10c4b03a 	or	r2,r2,r3
 1009d88:	10000226 	beq	r2,zero,1009d94 <__floatunsidf+0x11c>
 1009d8c:	01c00044 	movi	r7,1
 1009d90:	0011883a 	mov	r8,zero
 1009d94:	d9000217 	ldw	r4,8(sp)
 1009d98:	a1c4b03a 	or	r2,r20,r7
 1009d9c:	aa06b03a 	or	r3,r21,r8
 1009da0:	2249c83a 	sub	r4,r4,r9
 1009da4:	d8c00415 	stw	r3,16(sp)
 1009da8:	d9000215 	stw	r4,8(sp)
 1009dac:	d8800315 	stw	r2,12(sp)
 1009db0:	003fbf06 	br	1009cb0 <__floatunsidf+0x38>
 1009db4:	bdc7883a 	add	r3,r23,r23
 1009db8:	008007c4 	movi	r2,31
 1009dbc:	1285c83a 	sub	r2,r2,r10
 1009dc0:	1886983a 	sll	r3,r3,r2
 1009dc4:	b2a8d83a 	srl	r20,r22,r10
 1009dc8:	baaad83a 	srl	r21,r23,r10
 1009dcc:	1d28b03a 	or	r20,r3,r20
 1009dd0:	003fdf06 	br	1009d50 <__floatunsidf+0xd8>
 1009dd4:	b006d07a 	srli	r3,r22,1
 1009dd8:	008007c4 	movi	r2,31
 1009ddc:	1245c83a 	sub	r2,r2,r9
 1009de0:	1886d83a 	srl	r3,r3,r2
 1009de4:	ba62983a 	sll	r17,r23,r9
 1009de8:	b260983a 	sll	r16,r22,r9
 1009dec:	1c62b03a 	or	r17,r3,r17
 1009df0:	003fcc06 	br	1009d24 <__floatunsidf+0xac>
 1009df4:	2006d07a 	srli	r3,r4,1
 1009df8:	008007c4 	movi	r2,31
 1009dfc:	1285c83a 	sub	r2,r2,r10
 1009e00:	18a6d83a 	srl	r19,r3,r2
 1009e04:	22a4983a 	sll	r18,r4,r10
 1009e08:	003fd706 	br	1009d68 <__floatunsidf+0xf0>

01009e0c <udivmodsi4>:
 1009e0c:	29001b2e 	bgeu	r5,r4,1009e7c <udivmodsi4+0x70>
 1009e10:	28001a16 	blt	r5,zero,1009e7c <udivmodsi4+0x70>
 1009e14:	00800044 	movi	r2,1
 1009e18:	0007883a 	mov	r3,zero
 1009e1c:	01c007c4 	movi	r7,31
 1009e20:	00000306 	br	1009e30 <udivmodsi4+0x24>
 1009e24:	19c01326 	beq	r3,r7,1009e74 <udivmodsi4+0x68>
 1009e28:	18c00044 	addi	r3,r3,1
 1009e2c:	28000416 	blt	r5,zero,1009e40 <udivmodsi4+0x34>
 1009e30:	294b883a 	add	r5,r5,r5
 1009e34:	1085883a 	add	r2,r2,r2
 1009e38:	293ffa36 	bltu	r5,r4,1009e24 <udivmodsi4+0x18>
 1009e3c:	10000d26 	beq	r2,zero,1009e74 <udivmodsi4+0x68>
 1009e40:	0007883a 	mov	r3,zero
 1009e44:	21400236 	bltu	r4,r5,1009e50 <udivmodsi4+0x44>
 1009e48:	2149c83a 	sub	r4,r4,r5
 1009e4c:	1886b03a 	or	r3,r3,r2
 1009e50:	1004d07a 	srli	r2,r2,1
 1009e54:	280ad07a 	srli	r5,r5,1
 1009e58:	103ffa1e 	bne	r2,zero,1009e44 <udivmodsi4+0x38>
 1009e5c:	30000226 	beq	r6,zero,1009e68 <udivmodsi4+0x5c>
 1009e60:	2005883a 	mov	r2,r4
 1009e64:	f800283a 	ret
 1009e68:	1809883a 	mov	r4,r3
 1009e6c:	2005883a 	mov	r2,r4
 1009e70:	f800283a 	ret
 1009e74:	0007883a 	mov	r3,zero
 1009e78:	003ff806 	br	1009e5c <udivmodsi4+0x50>
 1009e7c:	00800044 	movi	r2,1
 1009e80:	0007883a 	mov	r3,zero
 1009e84:	003fef06 	br	1009e44 <udivmodsi4+0x38>

01009e88 <__divsi3>:
 1009e88:	defffe04 	addi	sp,sp,-8
 1009e8c:	dc000015 	stw	r16,0(sp)
 1009e90:	dfc00115 	stw	ra,4(sp)
 1009e94:	0021883a 	mov	r16,zero
 1009e98:	20000c16 	blt	r4,zero,1009ecc <__divsi3+0x44>
 1009e9c:	000d883a 	mov	r6,zero
 1009ea0:	28000e16 	blt	r5,zero,1009edc <__divsi3+0x54>
 1009ea4:	1009e0c0 	call	1009e0c <udivmodsi4>
 1009ea8:	1007883a 	mov	r3,r2
 1009eac:	8005003a 	cmpeq	r2,r16,zero
 1009eb0:	1000011e 	bne	r2,zero,1009eb8 <__divsi3+0x30>
 1009eb4:	00c7c83a 	sub	r3,zero,r3
 1009eb8:	1805883a 	mov	r2,r3
 1009ebc:	dfc00117 	ldw	ra,4(sp)
 1009ec0:	dc000017 	ldw	r16,0(sp)
 1009ec4:	dec00204 	addi	sp,sp,8
 1009ec8:	f800283a 	ret
 1009ecc:	0109c83a 	sub	r4,zero,r4
 1009ed0:	04000044 	movi	r16,1
 1009ed4:	000d883a 	mov	r6,zero
 1009ed8:	283ff20e 	bge	r5,zero,1009ea4 <__divsi3+0x1c>
 1009edc:	014bc83a 	sub	r5,zero,r5
 1009ee0:	8021003a 	cmpeq	r16,r16,zero
 1009ee4:	003fef06 	br	1009ea4 <__divsi3+0x1c>

01009ee8 <__modsi3>:
 1009ee8:	deffff04 	addi	sp,sp,-4
 1009eec:	dfc00015 	stw	ra,0(sp)
 1009ef0:	01800044 	movi	r6,1
 1009ef4:	2807883a 	mov	r3,r5
 1009ef8:	20000416 	blt	r4,zero,1009f0c <__modsi3+0x24>
 1009efc:	28000c16 	blt	r5,zero,1009f30 <__modsi3+0x48>
 1009f00:	dfc00017 	ldw	ra,0(sp)
 1009f04:	dec00104 	addi	sp,sp,4
 1009f08:	1009e0c1 	jmpi	1009e0c <udivmodsi4>
 1009f0c:	0109c83a 	sub	r4,zero,r4
 1009f10:	28000b16 	blt	r5,zero,1009f40 <__modsi3+0x58>
 1009f14:	180b883a 	mov	r5,r3
 1009f18:	01800044 	movi	r6,1
 1009f1c:	1009e0c0 	call	1009e0c <udivmodsi4>
 1009f20:	0085c83a 	sub	r2,zero,r2
 1009f24:	dfc00017 	ldw	ra,0(sp)
 1009f28:	dec00104 	addi	sp,sp,4
 1009f2c:	f800283a 	ret
 1009f30:	014bc83a 	sub	r5,zero,r5
 1009f34:	dfc00017 	ldw	ra,0(sp)
 1009f38:	dec00104 	addi	sp,sp,4
 1009f3c:	1009e0c1 	jmpi	1009e0c <udivmodsi4>
 1009f40:	0147c83a 	sub	r3,zero,r5
 1009f44:	003ff306 	br	1009f14 <__modsi3+0x2c>

01009f48 <__udivsi3>:
 1009f48:	000d883a 	mov	r6,zero
 1009f4c:	1009e0c1 	jmpi	1009e0c <udivmodsi4>

01009f50 <__umodsi3>:
 1009f50:	01800044 	movi	r6,1
 1009f54:	1009e0c1 	jmpi	1009e0c <udivmodsi4>

01009f58 <__muldi3>:
 1009f58:	2011883a 	mov	r8,r4
 1009f5c:	427fffcc 	andi	r9,r8,65535
 1009f60:	4018d43a 	srli	r12,r8,16
 1009f64:	32bfffcc 	andi	r10,r6,65535
 1009f68:	3016d43a 	srli	r11,r6,16
 1009f6c:	4a85383a 	mul	r2,r9,r10
 1009f70:	6295383a 	mul	r10,r12,r10
 1009f74:	4ad3383a 	mul	r9,r9,r11
 1009f78:	113fffcc 	andi	r4,r2,65535
 1009f7c:	1004d43a 	srli	r2,r2,16
 1009f80:	4a93883a 	add	r9,r9,r10
 1009f84:	3807883a 	mov	r3,r7
 1009f88:	1245883a 	add	r2,r2,r9
 1009f8c:	280f883a 	mov	r7,r5
 1009f90:	180b883a 	mov	r5,r3
 1009f94:	1006943a 	slli	r3,r2,16
 1009f98:	defffd04 	addi	sp,sp,-12
 1009f9c:	dc800215 	stw	r18,8(sp)
 1009fa0:	1907883a 	add	r3,r3,r4
 1009fa4:	dc400115 	stw	r17,4(sp)
 1009fa8:	dc000015 	stw	r16,0(sp)
 1009fac:	4165383a 	mul	r18,r8,r5
 1009fb0:	31e3383a 	mul	r17,r6,r7
 1009fb4:	1012d43a 	srli	r9,r2,16
 1009fb8:	62d9383a 	mul	r12,r12,r11
 1009fbc:	181f883a 	mov	r15,r3
 1009fc0:	1280022e 	bgeu	r2,r10,1009fcc <__muldi3+0x74>
 1009fc4:	00800074 	movhi	r2,1
 1009fc8:	6099883a 	add	r12,r12,r2
 1009fcc:	624d883a 	add	r6,r12,r9
 1009fd0:	9187883a 	add	r3,r18,r6
 1009fd4:	88c7883a 	add	r3,r17,r3
 1009fd8:	7805883a 	mov	r2,r15
 1009fdc:	dc800217 	ldw	r18,8(sp)
 1009fe0:	dc400117 	ldw	r17,4(sp)
 1009fe4:	dc000017 	ldw	r16,0(sp)
 1009fe8:	dec00304 	addi	sp,sp,12
 1009fec:	f800283a 	ret

01009ff0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 1009ff0:	defff804 	addi	sp,sp,-32
 1009ff4:	dfc00715 	stw	ra,28(sp)
 1009ff8:	df000615 	stw	fp,24(sp)
 1009ffc:	df000604 	addi	fp,sp,24
 100a000:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 100a004:	e0bffc17 	ldw	r2,-16(fp)
 100a008:	1004803a 	cmplt	r2,r2,zero
 100a00c:	1000081e 	bne	r2,zero,100a030 <close+0x40>
 100a010:	e0bffc17 	ldw	r2,-16(fp)
 100a014:	10800324 	muli	r2,r2,12
 100a018:	1007883a 	mov	r3,r2
 100a01c:	00804074 	movhi	r2,257
 100a020:	10b79e04 	addi	r2,r2,-8584
 100a024:	1887883a 	add	r3,r3,r2
 100a028:	e0ffff15 	stw	r3,-4(fp)
 100a02c:	00000106 	br	100a034 <close+0x44>
 100a030:	e03fff15 	stw	zero,-4(fp)
 100a034:	e0bfff17 	ldw	r2,-4(fp)
 100a038:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 100a03c:	e0bffb17 	ldw	r2,-20(fp)
 100a040:	1005003a 	cmpeq	r2,r2,zero
 100a044:	10001d1e 	bne	r2,zero,100a0bc <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 100a048:	e0bffb17 	ldw	r2,-20(fp)
 100a04c:	10800017 	ldw	r2,0(r2)
 100a050:	10800417 	ldw	r2,16(r2)
 100a054:	1005003a 	cmpeq	r2,r2,zero
 100a058:	1000071e 	bne	r2,zero,100a078 <close+0x88>
 100a05c:	e0bffb17 	ldw	r2,-20(fp)
 100a060:	10800017 	ldw	r2,0(r2)
 100a064:	10800417 	ldw	r2,16(r2)
 100a068:	e13ffb17 	ldw	r4,-20(fp)
 100a06c:	103ee83a 	callr	r2
 100a070:	e0bffe15 	stw	r2,-8(fp)
 100a074:	00000106 	br	100a07c <close+0x8c>
 100a078:	e03ffe15 	stw	zero,-8(fp)
 100a07c:	e0bffe17 	ldw	r2,-8(fp)
 100a080:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 100a084:	e13ffc17 	ldw	r4,-16(fp)
 100a088:	100a8340 	call	100a834 <alt_release_fd>
    if (rval < 0)
 100a08c:	e0bffa17 	ldw	r2,-24(fp)
 100a090:	1004403a 	cmpge	r2,r2,zero
 100a094:	1000071e 	bne	r2,zero,100a0b4 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 100a098:	100a0ec0 	call	100a0ec <alt_get_errno>
 100a09c:	e0fffa17 	ldw	r3,-24(fp)
 100a0a0:	00c7c83a 	sub	r3,zero,r3
 100a0a4:	10c00015 	stw	r3,0(r2)
      return -1;
 100a0a8:	00bfffc4 	movi	r2,-1
 100a0ac:	e0bffd15 	stw	r2,-12(fp)
 100a0b0:	00000806 	br	100a0d4 <close+0xe4>
    }
    return 0;
 100a0b4:	e03ffd15 	stw	zero,-12(fp)
 100a0b8:	00000606 	br	100a0d4 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100a0bc:	100a0ec0 	call	100a0ec <alt_get_errno>
 100a0c0:	1007883a 	mov	r3,r2
 100a0c4:	00801444 	movi	r2,81
 100a0c8:	18800015 	stw	r2,0(r3)
    return -1;
 100a0cc:	00bfffc4 	movi	r2,-1
 100a0d0:	e0bffd15 	stw	r2,-12(fp)
 100a0d4:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 100a0d8:	e037883a 	mov	sp,fp
 100a0dc:	dfc00117 	ldw	ra,4(sp)
 100a0e0:	df000017 	ldw	fp,0(sp)
 100a0e4:	dec00204 	addi	sp,sp,8
 100a0e8:	f800283a 	ret

0100a0ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100a0ec:	defffd04 	addi	sp,sp,-12
 100a0f0:	dfc00215 	stw	ra,8(sp)
 100a0f4:	df000115 	stw	fp,4(sp)
 100a0f8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100a0fc:	00804074 	movhi	r2,257
 100a100:	10bc4204 	addi	r2,r2,-3832
 100a104:	10800017 	ldw	r2,0(r2)
 100a108:	1005003a 	cmpeq	r2,r2,zero
 100a10c:	1000061e 	bne	r2,zero,100a128 <alt_get_errno+0x3c>
 100a110:	00804074 	movhi	r2,257
 100a114:	10bc4204 	addi	r2,r2,-3832
 100a118:	10800017 	ldw	r2,0(r2)
 100a11c:	103ee83a 	callr	r2
 100a120:	e0bfff15 	stw	r2,-4(fp)
 100a124:	00000306 	br	100a134 <alt_get_errno+0x48>
 100a128:	00804074 	movhi	r2,257
 100a12c:	10830504 	addi	r2,r2,3092
 100a130:	e0bfff15 	stw	r2,-4(fp)
 100a134:	e0bfff17 	ldw	r2,-4(fp)
}
 100a138:	e037883a 	mov	sp,fp
 100a13c:	dfc00117 	ldw	ra,4(sp)
 100a140:	df000017 	ldw	fp,0(sp)
 100a144:	dec00204 	addi	sp,sp,8
 100a148:	f800283a 	ret

0100a14c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 100a14c:	defffc04 	addi	sp,sp,-16
 100a150:	df000315 	stw	fp,12(sp)
 100a154:	df000304 	addi	fp,sp,12
 100a158:	e13ffd15 	stw	r4,-12(fp)
 100a15c:	e17ffe15 	stw	r5,-8(fp)
 100a160:	e1bfff15 	stw	r6,-4(fp)
  return len;
 100a164:	e0bfff17 	ldw	r2,-4(fp)
}
 100a168:	e037883a 	mov	sp,fp
 100a16c:	df000017 	ldw	fp,0(sp)
 100a170:	dec00104 	addi	sp,sp,4
 100a174:	f800283a 	ret

0100a178 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 100a178:	defff904 	addi	sp,sp,-28
 100a17c:	dfc00615 	stw	ra,24(sp)
 100a180:	df000515 	stw	fp,20(sp)
 100a184:	df000504 	addi	fp,sp,20
 100a188:	e13ffc15 	stw	r4,-16(fp)
 100a18c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100a190:	e0bffc17 	ldw	r2,-16(fp)
 100a194:	1004803a 	cmplt	r2,r2,zero
 100a198:	1000081e 	bne	r2,zero,100a1bc <fstat+0x44>
 100a19c:	e0bffc17 	ldw	r2,-16(fp)
 100a1a0:	10800324 	muli	r2,r2,12
 100a1a4:	1007883a 	mov	r3,r2
 100a1a8:	00804074 	movhi	r2,257
 100a1ac:	10b79e04 	addi	r2,r2,-8584
 100a1b0:	1887883a 	add	r3,r3,r2
 100a1b4:	e0ffff15 	stw	r3,-4(fp)
 100a1b8:	00000106 	br	100a1c0 <fstat+0x48>
 100a1bc:	e03fff15 	stw	zero,-4(fp)
 100a1c0:	e0bfff17 	ldw	r2,-4(fp)
 100a1c4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 100a1c8:	e0bffb17 	ldw	r2,-20(fp)
 100a1cc:	1005003a 	cmpeq	r2,r2,zero
 100a1d0:	1000121e 	bne	r2,zero,100a21c <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 100a1d4:	e0bffb17 	ldw	r2,-20(fp)
 100a1d8:	10800017 	ldw	r2,0(r2)
 100a1dc:	10800817 	ldw	r2,32(r2)
 100a1e0:	1005003a 	cmpeq	r2,r2,zero
 100a1e4:	1000081e 	bne	r2,zero,100a208 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 100a1e8:	e0bffb17 	ldw	r2,-20(fp)
 100a1ec:	10800017 	ldw	r2,0(r2)
 100a1f0:	10800817 	ldw	r2,32(r2)
 100a1f4:	e13ffb17 	ldw	r4,-20(fp)
 100a1f8:	e17ffd17 	ldw	r5,-12(fp)
 100a1fc:	103ee83a 	callr	r2
 100a200:	e0bffe15 	stw	r2,-8(fp)
 100a204:	00000b06 	br	100a234 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 100a208:	e0fffd17 	ldw	r3,-12(fp)
 100a20c:	00880004 	movi	r2,8192
 100a210:	18800115 	stw	r2,4(r3)
      return 0;
 100a214:	e03ffe15 	stw	zero,-8(fp)
 100a218:	00000606 	br	100a234 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100a21c:	100a24c0 	call	100a24c <alt_get_errno>
 100a220:	1007883a 	mov	r3,r2
 100a224:	00801444 	movi	r2,81
 100a228:	18800015 	stw	r2,0(r3)
    return -1;
 100a22c:	00bfffc4 	movi	r2,-1
 100a230:	e0bffe15 	stw	r2,-8(fp)
 100a234:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 100a238:	e037883a 	mov	sp,fp
 100a23c:	dfc00117 	ldw	ra,4(sp)
 100a240:	df000017 	ldw	fp,0(sp)
 100a244:	dec00204 	addi	sp,sp,8
 100a248:	f800283a 	ret

0100a24c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100a24c:	defffd04 	addi	sp,sp,-12
 100a250:	dfc00215 	stw	ra,8(sp)
 100a254:	df000115 	stw	fp,4(sp)
 100a258:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100a25c:	00804074 	movhi	r2,257
 100a260:	10bc4204 	addi	r2,r2,-3832
 100a264:	10800017 	ldw	r2,0(r2)
 100a268:	1005003a 	cmpeq	r2,r2,zero
 100a26c:	1000061e 	bne	r2,zero,100a288 <alt_get_errno+0x3c>
 100a270:	00804074 	movhi	r2,257
 100a274:	10bc4204 	addi	r2,r2,-3832
 100a278:	10800017 	ldw	r2,0(r2)
 100a27c:	103ee83a 	callr	r2
 100a280:	e0bfff15 	stw	r2,-4(fp)
 100a284:	00000306 	br	100a294 <alt_get_errno+0x48>
 100a288:	00804074 	movhi	r2,257
 100a28c:	10830504 	addi	r2,r2,3092
 100a290:	e0bfff15 	stw	r2,-4(fp)
 100a294:	e0bfff17 	ldw	r2,-4(fp)
}
 100a298:	e037883a 	mov	sp,fp
 100a29c:	dfc00117 	ldw	ra,4(sp)
 100a2a0:	df000017 	ldw	fp,0(sp)
 100a2a4:	dec00204 	addi	sp,sp,8
 100a2a8:	f800283a 	ret

0100a2ac <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 100a2ac:	deffeb04 	addi	sp,sp,-84
 100a2b0:	dfc01415 	stw	ra,80(sp)
 100a2b4:	df001315 	stw	fp,76(sp)
 100a2b8:	df001304 	addi	fp,sp,76
 100a2bc:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100a2c0:	e0bffd17 	ldw	r2,-12(fp)
 100a2c4:	1004803a 	cmplt	r2,r2,zero
 100a2c8:	1000081e 	bne	r2,zero,100a2ec <isatty+0x40>
 100a2cc:	e0bffd17 	ldw	r2,-12(fp)
 100a2d0:	10800324 	muli	r2,r2,12
 100a2d4:	1007883a 	mov	r3,r2
 100a2d8:	00804074 	movhi	r2,257
 100a2dc:	10b79e04 	addi	r2,r2,-8584
 100a2e0:	1887883a 	add	r3,r3,r2
 100a2e4:	e0ffff15 	stw	r3,-4(fp)
 100a2e8:	00000106 	br	100a2f0 <isatty+0x44>
 100a2ec:	e03fff15 	stw	zero,-4(fp)
 100a2f0:	e0bfff17 	ldw	r2,-4(fp)
 100a2f4:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 100a2f8:	e0bfed17 	ldw	r2,-76(fp)
 100a2fc:	1005003a 	cmpeq	r2,r2,zero
 100a300:	10000f1e 	bne	r2,zero,100a340 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 100a304:	e0bfed17 	ldw	r2,-76(fp)
 100a308:	10800017 	ldw	r2,0(r2)
 100a30c:	10800817 	ldw	r2,32(r2)
 100a310:	1004c03a 	cmpne	r2,r2,zero
 100a314:	1000031e 	bne	r2,zero,100a324 <isatty+0x78>
    {
      return 1;
 100a318:	00800044 	movi	r2,1
 100a31c:	e0bffe15 	stw	r2,-8(fp)
 100a320:	00000c06 	br	100a354 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 100a324:	e17fee04 	addi	r5,fp,-72
 100a328:	e13ffd17 	ldw	r4,-12(fp)
 100a32c:	100a1780 	call	100a178 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 100a330:	e0bfef17 	ldw	r2,-68(fp)
 100a334:	10880020 	cmpeqi	r2,r2,8192
 100a338:	e0bffe15 	stw	r2,-8(fp)
 100a33c:	00000506 	br	100a354 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100a340:	100a36c0 	call	100a36c <alt_get_errno>
 100a344:	1007883a 	mov	r3,r2
 100a348:	00801444 	movi	r2,81
 100a34c:	18800015 	stw	r2,0(r3)
    return 0;
 100a350:	e03ffe15 	stw	zero,-8(fp)
 100a354:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 100a358:	e037883a 	mov	sp,fp
 100a35c:	dfc00117 	ldw	ra,4(sp)
 100a360:	df000017 	ldw	fp,0(sp)
 100a364:	dec00204 	addi	sp,sp,8
 100a368:	f800283a 	ret

0100a36c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100a36c:	defffd04 	addi	sp,sp,-12
 100a370:	dfc00215 	stw	ra,8(sp)
 100a374:	df000115 	stw	fp,4(sp)
 100a378:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100a37c:	00804074 	movhi	r2,257
 100a380:	10bc4204 	addi	r2,r2,-3832
 100a384:	10800017 	ldw	r2,0(r2)
 100a388:	1005003a 	cmpeq	r2,r2,zero
 100a38c:	1000061e 	bne	r2,zero,100a3a8 <alt_get_errno+0x3c>
 100a390:	00804074 	movhi	r2,257
 100a394:	10bc4204 	addi	r2,r2,-3832
 100a398:	10800017 	ldw	r2,0(r2)
 100a39c:	103ee83a 	callr	r2
 100a3a0:	e0bfff15 	stw	r2,-4(fp)
 100a3a4:	00000306 	br	100a3b4 <alt_get_errno+0x48>
 100a3a8:	00804074 	movhi	r2,257
 100a3ac:	10830504 	addi	r2,r2,3092
 100a3b0:	e0bfff15 	stw	r2,-4(fp)
 100a3b4:	e0bfff17 	ldw	r2,-4(fp)
}
 100a3b8:	e037883a 	mov	sp,fp
 100a3bc:	dfc00117 	ldw	ra,4(sp)
 100a3c0:	df000017 	ldw	fp,0(sp)
 100a3c4:	dec00204 	addi	sp,sp,8
 100a3c8:	f800283a 	ret

0100a3cc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 100a3cc:	defffe04 	addi	sp,sp,-8
 100a3d0:	dfc00115 	stw	ra,4(sp)
 100a3d4:	df000015 	stw	fp,0(sp)
 100a3d8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 100a3dc:	01004074 	movhi	r4,257
 100a3e0:	213c4704 	addi	r4,r4,-3812
 100a3e4:	01404074 	movhi	r5,257
 100a3e8:	29758f04 	addi	r5,r5,-10692
 100a3ec:	01804074 	movhi	r6,257
 100a3f0:	31bc4704 	addi	r6,r6,-3812
 100a3f4:	100a44c0 	call	100a44c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 100a3f8:	01004034 	movhi	r4,256
 100a3fc:	21000804 	addi	r4,r4,32
 100a400:	01404034 	movhi	r5,256
 100a404:	29400804 	addi	r5,r5,32
 100a408:	01804034 	movhi	r6,256
 100a40c:	31806e04 	addi	r6,r6,440
 100a410:	100a44c0 	call	100a44c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 100a414:	01004074 	movhi	r4,257
 100a418:	21349804 	addi	r4,r4,-11680
 100a41c:	01404074 	movhi	r5,257
 100a420:	29749804 	addi	r5,r5,-11680
 100a424:	01804074 	movhi	r6,257
 100a428:	31b58f04 	addi	r6,r6,-10692
 100a42c:	100a44c0 	call	100a44c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 100a430:	100c1840 	call	100c184 <alt_dcache_flush_all>
  alt_icache_flush_all();
 100a434:	100c4380 	call	100c438 <alt_icache_flush_all>
}
 100a438:	e037883a 	mov	sp,fp
 100a43c:	dfc00117 	ldw	ra,4(sp)
 100a440:	df000017 	ldw	fp,0(sp)
 100a444:	dec00204 	addi	sp,sp,8
 100a448:	f800283a 	ret

0100a44c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 100a44c:	defffc04 	addi	sp,sp,-16
 100a450:	df000315 	stw	fp,12(sp)
 100a454:	df000304 	addi	fp,sp,12
 100a458:	e13ffd15 	stw	r4,-12(fp)
 100a45c:	e17ffe15 	stw	r5,-8(fp)
 100a460:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 100a464:	e0fffe17 	ldw	r3,-8(fp)
 100a468:	e0bffd17 	ldw	r2,-12(fp)
 100a46c:	18800e26 	beq	r3,r2,100a4a8 <alt_load_section+0x5c>
  {
    while( to != end )
 100a470:	00000a06 	br	100a49c <alt_load_section+0x50>
    {
      *to++ = *from++;
 100a474:	e0bffd17 	ldw	r2,-12(fp)
 100a478:	10c00017 	ldw	r3,0(r2)
 100a47c:	e0bffe17 	ldw	r2,-8(fp)
 100a480:	10c00015 	stw	r3,0(r2)
 100a484:	e0bffe17 	ldw	r2,-8(fp)
 100a488:	10800104 	addi	r2,r2,4
 100a48c:	e0bffe15 	stw	r2,-8(fp)
 100a490:	e0bffd17 	ldw	r2,-12(fp)
 100a494:	10800104 	addi	r2,r2,4
 100a498:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 100a49c:	e0fffe17 	ldw	r3,-8(fp)
 100a4a0:	e0bfff17 	ldw	r2,-4(fp)
 100a4a4:	18bff31e 	bne	r3,r2,100a474 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 100a4a8:	e037883a 	mov	sp,fp
 100a4ac:	df000017 	ldw	fp,0(sp)
 100a4b0:	dec00104 	addi	sp,sp,4
 100a4b4:	f800283a 	ret

0100a4b8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 100a4b8:	defff804 	addi	sp,sp,-32
 100a4bc:	dfc00715 	stw	ra,28(sp)
 100a4c0:	df000615 	stw	fp,24(sp)
 100a4c4:	df000604 	addi	fp,sp,24
 100a4c8:	e13ffc15 	stw	r4,-16(fp)
 100a4cc:	e17ffd15 	stw	r5,-12(fp)
 100a4d0:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 100a4d4:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100a4d8:	e0bffc17 	ldw	r2,-16(fp)
 100a4dc:	1004803a 	cmplt	r2,r2,zero
 100a4e0:	1000081e 	bne	r2,zero,100a504 <lseek+0x4c>
 100a4e4:	e0bffc17 	ldw	r2,-16(fp)
 100a4e8:	10800324 	muli	r2,r2,12
 100a4ec:	1007883a 	mov	r3,r2
 100a4f0:	00804074 	movhi	r2,257
 100a4f4:	10b79e04 	addi	r2,r2,-8584
 100a4f8:	1887883a 	add	r3,r3,r2
 100a4fc:	e0ffff15 	stw	r3,-4(fp)
 100a500:	00000106 	br	100a508 <lseek+0x50>
 100a504:	e03fff15 	stw	zero,-4(fp)
 100a508:	e0bfff17 	ldw	r2,-4(fp)
 100a50c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 100a510:	e0bffb17 	ldw	r2,-20(fp)
 100a514:	1005003a 	cmpeq	r2,r2,zero
 100a518:	1000111e 	bne	r2,zero,100a560 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 100a51c:	e0bffb17 	ldw	r2,-20(fp)
 100a520:	10800017 	ldw	r2,0(r2)
 100a524:	10800717 	ldw	r2,28(r2)
 100a528:	1005003a 	cmpeq	r2,r2,zero
 100a52c:	1000091e 	bne	r2,zero,100a554 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 100a530:	e0bffb17 	ldw	r2,-20(fp)
 100a534:	10800017 	ldw	r2,0(r2)
 100a538:	10800717 	ldw	r2,28(r2)
 100a53c:	e13ffb17 	ldw	r4,-20(fp)
 100a540:	e17ffd17 	ldw	r5,-12(fp)
 100a544:	e1bffe17 	ldw	r6,-8(fp)
 100a548:	103ee83a 	callr	r2
 100a54c:	e0bffa15 	stw	r2,-24(fp)
 100a550:	00000506 	br	100a568 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 100a554:	00bfde84 	movi	r2,-134
 100a558:	e0bffa15 	stw	r2,-24(fp)
 100a55c:	00000206 	br	100a568 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 100a560:	00bfebc4 	movi	r2,-81
 100a564:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 100a568:	e0bffa17 	ldw	r2,-24(fp)
 100a56c:	1004403a 	cmpge	r2,r2,zero
 100a570:	1000071e 	bne	r2,zero,100a590 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 100a574:	100a5a80 	call	100a5a8 <alt_get_errno>
 100a578:	1007883a 	mov	r3,r2
 100a57c:	e0bffa17 	ldw	r2,-24(fp)
 100a580:	0085c83a 	sub	r2,zero,r2
 100a584:	18800015 	stw	r2,0(r3)
    rc = -1;
 100a588:	00bfffc4 	movi	r2,-1
 100a58c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 100a590:	e0bffa17 	ldw	r2,-24(fp)
}
 100a594:	e037883a 	mov	sp,fp
 100a598:	dfc00117 	ldw	ra,4(sp)
 100a59c:	df000017 	ldw	fp,0(sp)
 100a5a0:	dec00204 	addi	sp,sp,8
 100a5a4:	f800283a 	ret

0100a5a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100a5a8:	defffd04 	addi	sp,sp,-12
 100a5ac:	dfc00215 	stw	ra,8(sp)
 100a5b0:	df000115 	stw	fp,4(sp)
 100a5b4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100a5b8:	00804074 	movhi	r2,257
 100a5bc:	10bc4204 	addi	r2,r2,-3832
 100a5c0:	10800017 	ldw	r2,0(r2)
 100a5c4:	1005003a 	cmpeq	r2,r2,zero
 100a5c8:	1000061e 	bne	r2,zero,100a5e4 <alt_get_errno+0x3c>
 100a5cc:	00804074 	movhi	r2,257
 100a5d0:	10bc4204 	addi	r2,r2,-3832
 100a5d4:	10800017 	ldw	r2,0(r2)
 100a5d8:	103ee83a 	callr	r2
 100a5dc:	e0bfff15 	stw	r2,-4(fp)
 100a5e0:	00000306 	br	100a5f0 <alt_get_errno+0x48>
 100a5e4:	00804074 	movhi	r2,257
 100a5e8:	10830504 	addi	r2,r2,3092
 100a5ec:	e0bfff15 	stw	r2,-4(fp)
 100a5f0:	e0bfff17 	ldw	r2,-4(fp)
}
 100a5f4:	e037883a 	mov	sp,fp
 100a5f8:	dfc00117 	ldw	ra,4(sp)
 100a5fc:	df000017 	ldw	fp,0(sp)
 100a600:	dec00204 	addi	sp,sp,8
 100a604:	f800283a 	ret

0100a608 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 100a608:	defffd04 	addi	sp,sp,-12
 100a60c:	dfc00215 	stw	ra,8(sp)
 100a610:	df000115 	stw	fp,4(sp)
 100a614:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 100a618:	0009883a 	mov	r4,zero
 100a61c:	100aad00 	call	100aad0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 100a620:	100ab040 	call	100ab04 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 100a624:	01004074 	movhi	r4,257
 100a628:	21357004 	addi	r4,r4,-10816
 100a62c:	01404074 	movhi	r5,257
 100a630:	29757004 	addi	r5,r5,-10816
 100a634:	01804074 	movhi	r6,257
 100a638:	31b57004 	addi	r6,r6,-10816
 100a63c:	100c52c0 	call	100c52c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 100a640:	100c2dc0 	call	100c2dc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 100a644:	01004074 	movhi	r4,257
 100a648:	2130d004 	addi	r4,r4,-15552
 100a64c:	100ce540 	call	100ce54 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 100a650:	d126cf17 	ldw	r4,-25796(gp)
 100a654:	d166d017 	ldw	r5,-25792(gp)
 100a658:	d1a6d117 	ldw	r6,-25788(gp)
 100a65c:	10008800 	call	1000880 <main>
 100a660:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 100a664:	01000044 	movi	r4,1
 100a668:	1009ff00 	call	1009ff0 <close>
  exit (result);
 100a66c:	e13fff17 	ldw	r4,-4(fp)
 100a670:	100ce680 	call	100ce68 <exit>

0100a674 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 100a674:	defffe04 	addi	sp,sp,-8
 100a678:	df000115 	stw	fp,4(sp)
 100a67c:	df000104 	addi	fp,sp,4
 100a680:	e13fff15 	stw	r4,-4(fp)
}
 100a684:	e037883a 	mov	sp,fp
 100a688:	df000017 	ldw	fp,0(sp)
 100a68c:	dec00104 	addi	sp,sp,4
 100a690:	f800283a 	ret

0100a694 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 100a694:	defffe04 	addi	sp,sp,-8
 100a698:	df000115 	stw	fp,4(sp)
 100a69c:	df000104 	addi	fp,sp,4
 100a6a0:	e13fff15 	stw	r4,-4(fp)
}
 100a6a4:	e037883a 	mov	sp,fp
 100a6a8:	df000017 	ldw	fp,0(sp)
 100a6ac:	dec00104 	addi	sp,sp,4
 100a6b0:	f800283a 	ret

0100a6b4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 100a6b4:	defff704 	addi	sp,sp,-36
 100a6b8:	dfc00815 	stw	ra,32(sp)
 100a6bc:	df000715 	stw	fp,28(sp)
 100a6c0:	df000704 	addi	fp,sp,28
 100a6c4:	e13ffb15 	stw	r4,-20(fp)
 100a6c8:	e17ffc15 	stw	r5,-16(fp)
 100a6cc:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100a6d0:	e0bffb17 	ldw	r2,-20(fp)
 100a6d4:	1004803a 	cmplt	r2,r2,zero
 100a6d8:	1000081e 	bne	r2,zero,100a6fc <read+0x48>
 100a6dc:	e0bffb17 	ldw	r2,-20(fp)
 100a6e0:	10800324 	muli	r2,r2,12
 100a6e4:	1007883a 	mov	r3,r2
 100a6e8:	00804074 	movhi	r2,257
 100a6ec:	10b79e04 	addi	r2,r2,-8584
 100a6f0:	1887883a 	add	r3,r3,r2
 100a6f4:	e0ffff15 	stw	r3,-4(fp)
 100a6f8:	00000106 	br	100a700 <read+0x4c>
 100a6fc:	e03fff15 	stw	zero,-4(fp)
 100a700:	e0bfff17 	ldw	r2,-4(fp)
 100a704:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 100a708:	e0bffa17 	ldw	r2,-24(fp)
 100a70c:	1005003a 	cmpeq	r2,r2,zero
 100a710:	1000241e 	bne	r2,zero,100a7a4 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 100a714:	e0bffa17 	ldw	r2,-24(fp)
 100a718:	10800217 	ldw	r2,8(r2)
 100a71c:	108000cc 	andi	r2,r2,3
 100a720:	10800060 	cmpeqi	r2,r2,1
 100a724:	10001a1e 	bne	r2,zero,100a790 <read+0xdc>
 100a728:	e0bffa17 	ldw	r2,-24(fp)
 100a72c:	10800017 	ldw	r2,0(r2)
 100a730:	10800517 	ldw	r2,20(r2)
 100a734:	1005003a 	cmpeq	r2,r2,zero
 100a738:	1000151e 	bne	r2,zero,100a790 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 100a73c:	e0bffa17 	ldw	r2,-24(fp)
 100a740:	10800017 	ldw	r2,0(r2)
 100a744:	10800517 	ldw	r2,20(r2)
 100a748:	e17ffc17 	ldw	r5,-16(fp)
 100a74c:	e1bffd17 	ldw	r6,-12(fp)
 100a750:	e13ffa17 	ldw	r4,-24(fp)
 100a754:	103ee83a 	callr	r2
 100a758:	e0bff915 	stw	r2,-28(fp)
 100a75c:	e0bff917 	ldw	r2,-28(fp)
 100a760:	1004403a 	cmpge	r2,r2,zero
 100a764:	1000071e 	bne	r2,zero,100a784 <read+0xd0>
        {
          ALT_ERRNO = -rval;
 100a768:	100a7d40 	call	100a7d4 <alt_get_errno>
 100a76c:	e0fff917 	ldw	r3,-28(fp)
 100a770:	00c7c83a 	sub	r3,zero,r3
 100a774:	10c00015 	stw	r3,0(r2)
          return -1;
 100a778:	00bfffc4 	movi	r2,-1
 100a77c:	e0bffe15 	stw	r2,-8(fp)
 100a780:	00000e06 	br	100a7bc <read+0x108>
        }
        return rval;
 100a784:	e0bff917 	ldw	r2,-28(fp)
 100a788:	e0bffe15 	stw	r2,-8(fp)
 100a78c:	00000b06 	br	100a7bc <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 100a790:	100a7d40 	call	100a7d4 <alt_get_errno>
 100a794:	1007883a 	mov	r3,r2
 100a798:	00800344 	movi	r2,13
 100a79c:	18800015 	stw	r2,0(r3)
 100a7a0:	00000406 	br	100a7b4 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 100a7a4:	100a7d40 	call	100a7d4 <alt_get_errno>
 100a7a8:	1007883a 	mov	r3,r2
 100a7ac:	00801444 	movi	r2,81
 100a7b0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100a7b4:	00bfffc4 	movi	r2,-1
 100a7b8:	e0bffe15 	stw	r2,-8(fp)
 100a7bc:	e0bffe17 	ldw	r2,-8(fp)
}
 100a7c0:	e037883a 	mov	sp,fp
 100a7c4:	dfc00117 	ldw	ra,4(sp)
 100a7c8:	df000017 	ldw	fp,0(sp)
 100a7cc:	dec00204 	addi	sp,sp,8
 100a7d0:	f800283a 	ret

0100a7d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100a7d4:	defffd04 	addi	sp,sp,-12
 100a7d8:	dfc00215 	stw	ra,8(sp)
 100a7dc:	df000115 	stw	fp,4(sp)
 100a7e0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100a7e4:	00804074 	movhi	r2,257
 100a7e8:	10bc4204 	addi	r2,r2,-3832
 100a7ec:	10800017 	ldw	r2,0(r2)
 100a7f0:	1005003a 	cmpeq	r2,r2,zero
 100a7f4:	1000061e 	bne	r2,zero,100a810 <alt_get_errno+0x3c>
 100a7f8:	00804074 	movhi	r2,257
 100a7fc:	10bc4204 	addi	r2,r2,-3832
 100a800:	10800017 	ldw	r2,0(r2)
 100a804:	103ee83a 	callr	r2
 100a808:	e0bfff15 	stw	r2,-4(fp)
 100a80c:	00000306 	br	100a81c <alt_get_errno+0x48>
 100a810:	00804074 	movhi	r2,257
 100a814:	10830504 	addi	r2,r2,3092
 100a818:	e0bfff15 	stw	r2,-4(fp)
 100a81c:	e0bfff17 	ldw	r2,-4(fp)
}
 100a820:	e037883a 	mov	sp,fp
 100a824:	dfc00117 	ldw	ra,4(sp)
 100a828:	df000017 	ldw	fp,0(sp)
 100a82c:	dec00204 	addi	sp,sp,8
 100a830:	f800283a 	ret

0100a834 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 100a834:	defffe04 	addi	sp,sp,-8
 100a838:	df000115 	stw	fp,4(sp)
 100a83c:	df000104 	addi	fp,sp,4
 100a840:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 100a844:	e0bfff17 	ldw	r2,-4(fp)
 100a848:	108000d0 	cmplti	r2,r2,3
 100a84c:	10000d1e 	bne	r2,zero,100a884 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 100a850:	e0bfff17 	ldw	r2,-4(fp)
 100a854:	00c04074 	movhi	r3,257
 100a858:	18f79e04 	addi	r3,r3,-8584
 100a85c:	10800324 	muli	r2,r2,12
 100a860:	10c5883a 	add	r2,r2,r3
 100a864:	10800204 	addi	r2,r2,8
 100a868:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 100a86c:	e0bfff17 	ldw	r2,-4(fp)
 100a870:	00c04074 	movhi	r3,257
 100a874:	18f79e04 	addi	r3,r3,-8584
 100a878:	10800324 	muli	r2,r2,12
 100a87c:	10c5883a 	add	r2,r2,r3
 100a880:	10000015 	stw	zero,0(r2)
  }
}
 100a884:	e037883a 	mov	sp,fp
 100a888:	df000017 	ldw	fp,0(sp)
 100a88c:	dec00104 	addi	sp,sp,4
 100a890:	f800283a 	ret

0100a894 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 100a894:	defff804 	addi	sp,sp,-32
 100a898:	df000715 	stw	fp,28(sp)
 100a89c:	df000704 	addi	fp,sp,28
 100a8a0:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100a8a4:	0005303a 	rdctl	r2,status
 100a8a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100a8ac:	e0fffb17 	ldw	r3,-20(fp)
 100a8b0:	00bfff84 	movi	r2,-2
 100a8b4:	1884703a 	and	r2,r3,r2
 100a8b8:	1001703a 	wrctl	status,r2
  
  return context;
 100a8bc:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 100a8c0:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 100a8c4:	d0a00c17 	ldw	r2,-32720(gp)
 100a8c8:	10c000c4 	addi	r3,r2,3
 100a8cc:	00bfff04 	movi	r2,-4
 100a8d0:	1884703a 	and	r2,r3,r2
 100a8d4:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 100a8d8:	d0e00c17 	ldw	r3,-32720(gp)
 100a8dc:	e0bffe17 	ldw	r2,-8(fp)
 100a8e0:	1887883a 	add	r3,r3,r2
 100a8e4:	00806034 	movhi	r2,384
 100a8e8:	10800004 	addi	r2,r2,0
 100a8ec:	10c0072e 	bgeu	r2,r3,100a90c <sbrk+0x78>
 100a8f0:	e0bffd17 	ldw	r2,-12(fp)
 100a8f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100a8f8:	e0bffa17 	ldw	r2,-24(fp)
 100a8fc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 100a900:	00bfffc4 	movi	r2,-1
 100a904:	e0bfff15 	stw	r2,-4(fp)
 100a908:	00000c06 	br	100a93c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 100a90c:	d0a00c17 	ldw	r2,-32720(gp)
 100a910:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 100a914:	d0e00c17 	ldw	r3,-32720(gp)
 100a918:	e0bffe17 	ldw	r2,-8(fp)
 100a91c:	1885883a 	add	r2,r3,r2
 100a920:	d0a00c15 	stw	r2,-32720(gp)
 100a924:	e0bffd17 	ldw	r2,-12(fp)
 100a928:	e0bff915 	stw	r2,-28(fp)
 100a92c:	e0bff917 	ldw	r2,-28(fp)
 100a930:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 100a934:	e0bffc17 	ldw	r2,-16(fp)
 100a938:	e0bfff15 	stw	r2,-4(fp)
 100a93c:	e0bfff17 	ldw	r2,-4(fp)
} 
 100a940:	e037883a 	mov	sp,fp
 100a944:	df000017 	ldw	fp,0(sp)
 100a948:	dec00104 	addi	sp,sp,4
 100a94c:	f800283a 	ret

0100a950 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 100a950:	defff704 	addi	sp,sp,-36
 100a954:	dfc00815 	stw	ra,32(sp)
 100a958:	df000715 	stw	fp,28(sp)
 100a95c:	df000704 	addi	fp,sp,28
 100a960:	e13ffb15 	stw	r4,-20(fp)
 100a964:	e17ffc15 	stw	r5,-16(fp)
 100a968:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100a96c:	e0bffb17 	ldw	r2,-20(fp)
 100a970:	1004803a 	cmplt	r2,r2,zero
 100a974:	1000081e 	bne	r2,zero,100a998 <write+0x48>
 100a978:	e0bffb17 	ldw	r2,-20(fp)
 100a97c:	10800324 	muli	r2,r2,12
 100a980:	1007883a 	mov	r3,r2
 100a984:	00804074 	movhi	r2,257
 100a988:	10b79e04 	addi	r2,r2,-8584
 100a98c:	1887883a 	add	r3,r3,r2
 100a990:	e0ffff15 	stw	r3,-4(fp)
 100a994:	00000106 	br	100a99c <write+0x4c>
 100a998:	e03fff15 	stw	zero,-4(fp)
 100a99c:	e0bfff17 	ldw	r2,-4(fp)
 100a9a0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 100a9a4:	e0bffa17 	ldw	r2,-24(fp)
 100a9a8:	1005003a 	cmpeq	r2,r2,zero
 100a9ac:	1000241e 	bne	r2,zero,100aa40 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 100a9b0:	e0bffa17 	ldw	r2,-24(fp)
 100a9b4:	10800217 	ldw	r2,8(r2)
 100a9b8:	108000cc 	andi	r2,r2,3
 100a9bc:	1005003a 	cmpeq	r2,r2,zero
 100a9c0:	10001a1e 	bne	r2,zero,100aa2c <write+0xdc>
 100a9c4:	e0bffa17 	ldw	r2,-24(fp)
 100a9c8:	10800017 	ldw	r2,0(r2)
 100a9cc:	10800617 	ldw	r2,24(r2)
 100a9d0:	1005003a 	cmpeq	r2,r2,zero
 100a9d4:	1000151e 	bne	r2,zero,100aa2c <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 100a9d8:	e0bffa17 	ldw	r2,-24(fp)
 100a9dc:	10800017 	ldw	r2,0(r2)
 100a9e0:	10800617 	ldw	r2,24(r2)
 100a9e4:	e17ffc17 	ldw	r5,-16(fp)
 100a9e8:	e1bffd17 	ldw	r6,-12(fp)
 100a9ec:	e13ffa17 	ldw	r4,-24(fp)
 100a9f0:	103ee83a 	callr	r2
 100a9f4:	e0bff915 	stw	r2,-28(fp)
 100a9f8:	e0bff917 	ldw	r2,-28(fp)
 100a9fc:	1004403a 	cmpge	r2,r2,zero
 100aa00:	1000071e 	bne	r2,zero,100aa20 <write+0xd0>
      {
        ALT_ERRNO = -rval;
 100aa04:	100aa700 	call	100aa70 <alt_get_errno>
 100aa08:	e0fff917 	ldw	r3,-28(fp)
 100aa0c:	00c7c83a 	sub	r3,zero,r3
 100aa10:	10c00015 	stw	r3,0(r2)
        return -1;
 100aa14:	00bfffc4 	movi	r2,-1
 100aa18:	e0bffe15 	stw	r2,-8(fp)
 100aa1c:	00000e06 	br	100aa58 <write+0x108>
      }
      return rval;
 100aa20:	e0bff917 	ldw	r2,-28(fp)
 100aa24:	e0bffe15 	stw	r2,-8(fp)
 100aa28:	00000b06 	br	100aa58 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 100aa2c:	100aa700 	call	100aa70 <alt_get_errno>
 100aa30:	1007883a 	mov	r3,r2
 100aa34:	00800344 	movi	r2,13
 100aa38:	18800015 	stw	r2,0(r3)
 100aa3c:	00000406 	br	100aa50 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 100aa40:	100aa700 	call	100aa70 <alt_get_errno>
 100aa44:	1007883a 	mov	r3,r2
 100aa48:	00801444 	movi	r2,81
 100aa4c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100aa50:	00bfffc4 	movi	r2,-1
 100aa54:	e0bffe15 	stw	r2,-8(fp)
 100aa58:	e0bffe17 	ldw	r2,-8(fp)
}
 100aa5c:	e037883a 	mov	sp,fp
 100aa60:	dfc00117 	ldw	ra,4(sp)
 100aa64:	df000017 	ldw	fp,0(sp)
 100aa68:	dec00204 	addi	sp,sp,8
 100aa6c:	f800283a 	ret

0100aa70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100aa70:	defffd04 	addi	sp,sp,-12
 100aa74:	dfc00215 	stw	ra,8(sp)
 100aa78:	df000115 	stw	fp,4(sp)
 100aa7c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100aa80:	00804074 	movhi	r2,257
 100aa84:	10bc4204 	addi	r2,r2,-3832
 100aa88:	10800017 	ldw	r2,0(r2)
 100aa8c:	1005003a 	cmpeq	r2,r2,zero
 100aa90:	1000061e 	bne	r2,zero,100aaac <alt_get_errno+0x3c>
 100aa94:	00804074 	movhi	r2,257
 100aa98:	10bc4204 	addi	r2,r2,-3832
 100aa9c:	10800017 	ldw	r2,0(r2)
 100aaa0:	103ee83a 	callr	r2
 100aaa4:	e0bfff15 	stw	r2,-4(fp)
 100aaa8:	00000306 	br	100aab8 <alt_get_errno+0x48>
 100aaac:	00804074 	movhi	r2,257
 100aab0:	10830504 	addi	r2,r2,3092
 100aab4:	e0bfff15 	stw	r2,-4(fp)
 100aab8:	e0bfff17 	ldw	r2,-4(fp)
}
 100aabc:	e037883a 	mov	sp,fp
 100aac0:	dfc00117 	ldw	ra,4(sp)
 100aac4:	df000017 	ldw	fp,0(sp)
 100aac8:	dec00204 	addi	sp,sp,8
 100aacc:	f800283a 	ret

0100aad0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 100aad0:	defffd04 	addi	sp,sp,-12
 100aad4:	dfc00215 	stw	ra,8(sp)
 100aad8:	df000115 	stw	fp,4(sp)
 100aadc:	df000104 	addi	fp,sp,4
 100aae0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 100aae4:	100cbcc0 	call	100cbcc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 100aae8:	00800044 	movi	r2,1
 100aaec:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 100aaf0:	e037883a 	mov	sp,fp
 100aaf4:	dfc00117 	ldw	ra,4(sp)
 100aaf8:	df000017 	ldw	fp,0(sp)
 100aafc:	dec00204 	addi	sp,sp,8
 100ab00:	f800283a 	ret

0100ab04 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 100ab04:	defffe04 	addi	sp,sp,-8
 100ab08:	dfc00115 	stw	ra,4(sp)
 100ab0c:	df000015 	stw	fp,0(sp)
 100ab10:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 100ab14:	01043804 	movi	r4,4320
 100ab18:	000b883a 	mov	r5,zero
 100ab1c:	018000c4 	movi	r6,3
 100ab20:	01c0fa04 	movi	r7,1000
 100ab24:	100b6e00 	call	100b6e0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 100ab28:	01004074 	movhi	r4,257
 100ab2c:	21380804 	addi	r4,r4,-8160
 100ab30:	000b883a 	mov	r5,zero
 100ab34:	000d883a 	mov	r6,zero
 100ab38:	100ad0c0 	call	100ad0c <altera_avalon_jtag_uart_init>
 100ab3c:	01004074 	movhi	r4,257
 100ab40:	2137fe04 	addi	r4,r4,-8200
 100ab44:	100ab8c0 	call	100ab8c <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 100ab48:	01004074 	movhi	r4,257
 100ab4c:	213c1604 	addi	r4,r4,-4008
 100ab50:	100b8180 	call	100b818 <alt_up_character_lcd_init>
 100ab54:	01004074 	movhi	r4,257
 100ab58:	213c1604 	addi	r4,r4,-4008
 100ab5c:	100ab8c0 	call	100ab8c <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( RS232_0, rs232_0);
 100ab60:	01004074 	movhi	r4,257
 100ab64:	213c2104 	addi	r4,r4,-3964
 100ab68:	100ab8c0 	call	100ab8c <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
 100ab6c:	01004074 	movhi	r4,257
 100ab70:	213c2c04 	addi	r4,r4,-3920
 100ab74:	100ab8c0 	call	100ab8c <alt_dev_reg>
}
 100ab78:	e037883a 	mov	sp,fp
 100ab7c:	dfc00117 	ldw	ra,4(sp)
 100ab80:	df000017 	ldw	fp,0(sp)
 100ab84:	dec00204 	addi	sp,sp,8
 100ab88:	f800283a 	ret

0100ab8c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 100ab8c:	defffd04 	addi	sp,sp,-12
 100ab90:	dfc00215 	stw	ra,8(sp)
 100ab94:	df000115 	stw	fp,4(sp)
 100ab98:	df000104 	addi	fp,sp,4
 100ab9c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 100aba0:	e13fff17 	ldw	r4,-4(fp)
 100aba4:	01404074 	movhi	r5,257
 100aba8:	297c3f04 	addi	r5,r5,-3844
 100abac:	100c1c80 	call	100c1c8 <alt_dev_llist_insert>
}
 100abb0:	e037883a 	mov	sp,fp
 100abb4:	dfc00117 	ldw	ra,4(sp)
 100abb8:	df000017 	ldw	fp,0(sp)
 100abbc:	dec00204 	addi	sp,sp,8
 100abc0:	f800283a 	ret

0100abc4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 100abc4:	defffa04 	addi	sp,sp,-24
 100abc8:	dfc00515 	stw	ra,20(sp)
 100abcc:	df000415 	stw	fp,16(sp)
 100abd0:	df000404 	addi	fp,sp,16
 100abd4:	e13ffd15 	stw	r4,-12(fp)
 100abd8:	e17ffe15 	stw	r5,-8(fp)
 100abdc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100abe0:	e0bffd17 	ldw	r2,-12(fp)
 100abe4:	10800017 	ldw	r2,0(r2)
 100abe8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 100abec:	e0bffc17 	ldw	r2,-16(fp)
 100abf0:	11000a04 	addi	r4,r2,40
 100abf4:	e0bffd17 	ldw	r2,-12(fp)
 100abf8:	11c00217 	ldw	r7,8(r2)
 100abfc:	e17ffe17 	ldw	r5,-8(fp)
 100ac00:	e1bfff17 	ldw	r6,-4(fp)
 100ac04:	100b2080 	call	100b208 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 100ac08:	e037883a 	mov	sp,fp
 100ac0c:	dfc00117 	ldw	ra,4(sp)
 100ac10:	df000017 	ldw	fp,0(sp)
 100ac14:	dec00204 	addi	sp,sp,8
 100ac18:	f800283a 	ret

0100ac1c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 100ac1c:	defffa04 	addi	sp,sp,-24
 100ac20:	dfc00515 	stw	ra,20(sp)
 100ac24:	df000415 	stw	fp,16(sp)
 100ac28:	df000404 	addi	fp,sp,16
 100ac2c:	e13ffd15 	stw	r4,-12(fp)
 100ac30:	e17ffe15 	stw	r5,-8(fp)
 100ac34:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100ac38:	e0bffd17 	ldw	r2,-12(fp)
 100ac3c:	10800017 	ldw	r2,0(r2)
 100ac40:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 100ac44:	e0bffc17 	ldw	r2,-16(fp)
 100ac48:	11000a04 	addi	r4,r2,40
 100ac4c:	e0bffd17 	ldw	r2,-12(fp)
 100ac50:	11c00217 	ldw	r7,8(r2)
 100ac54:	e17ffe17 	ldw	r5,-8(fp)
 100ac58:	e1bfff17 	ldw	r6,-4(fp)
 100ac5c:	100b42c0 	call	100b42c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 100ac60:	e037883a 	mov	sp,fp
 100ac64:	dfc00117 	ldw	ra,4(sp)
 100ac68:	df000017 	ldw	fp,0(sp)
 100ac6c:	dec00204 	addi	sp,sp,8
 100ac70:	f800283a 	ret

0100ac74 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 100ac74:	defffc04 	addi	sp,sp,-16
 100ac78:	dfc00315 	stw	ra,12(sp)
 100ac7c:	df000215 	stw	fp,8(sp)
 100ac80:	df000204 	addi	fp,sp,8
 100ac84:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100ac88:	e0bfff17 	ldw	r2,-4(fp)
 100ac8c:	10800017 	ldw	r2,0(r2)
 100ac90:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 100ac94:	e0bffe17 	ldw	r2,-8(fp)
 100ac98:	11000a04 	addi	r4,r2,40
 100ac9c:	e0bfff17 	ldw	r2,-4(fp)
 100aca0:	11400217 	ldw	r5,8(r2)
 100aca4:	100b0a00 	call	100b0a0 <altera_avalon_jtag_uart_close>
}
 100aca8:	e037883a 	mov	sp,fp
 100acac:	dfc00117 	ldw	ra,4(sp)
 100acb0:	df000017 	ldw	fp,0(sp)
 100acb4:	dec00204 	addi	sp,sp,8
 100acb8:	f800283a 	ret

0100acbc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 100acbc:	defffa04 	addi	sp,sp,-24
 100acc0:	dfc00515 	stw	ra,20(sp)
 100acc4:	df000415 	stw	fp,16(sp)
 100acc8:	df000404 	addi	fp,sp,16
 100accc:	e13ffd15 	stw	r4,-12(fp)
 100acd0:	e17ffe15 	stw	r5,-8(fp)
 100acd4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 100acd8:	e0bffd17 	ldw	r2,-12(fp)
 100acdc:	10800017 	ldw	r2,0(r2)
 100ace0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 100ace4:	e0bffc17 	ldw	r2,-16(fp)
 100ace8:	11000a04 	addi	r4,r2,40
 100acec:	e17ffe17 	ldw	r5,-8(fp)
 100acf0:	e1bfff17 	ldw	r6,-4(fp)
 100acf4:	100b1140 	call	100b114 <altera_avalon_jtag_uart_ioctl>
}
 100acf8:	e037883a 	mov	sp,fp
 100acfc:	dfc00117 	ldw	ra,4(sp)
 100ad00:	df000017 	ldw	fp,0(sp)
 100ad04:	dec00204 	addi	sp,sp,8
 100ad08:	f800283a 	ret

0100ad0c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 100ad0c:	defffb04 	addi	sp,sp,-20
 100ad10:	dfc00415 	stw	ra,16(sp)
 100ad14:	df000315 	stw	fp,12(sp)
 100ad18:	df000304 	addi	fp,sp,12
 100ad1c:	e13ffd15 	stw	r4,-12(fp)
 100ad20:	e17ffe15 	stw	r5,-8(fp)
 100ad24:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100ad28:	e0fffd17 	ldw	r3,-12(fp)
 100ad2c:	00800044 	movi	r2,1
 100ad30:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 100ad34:	e0bffd17 	ldw	r2,-12(fp)
 100ad38:	10800017 	ldw	r2,0(r2)
 100ad3c:	11000104 	addi	r4,r2,4
 100ad40:	e0bffd17 	ldw	r2,-12(fp)
 100ad44:	10800817 	ldw	r2,32(r2)
 100ad48:	1007883a 	mov	r3,r2
 100ad4c:	2005883a 	mov	r2,r4
 100ad50:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 100ad54:	e13fff17 	ldw	r4,-4(fp)
 100ad58:	e17ffd17 	ldw	r5,-12(fp)
 100ad5c:	01804074 	movhi	r6,257
 100ad60:	31ab7104 	addi	r6,r6,-21052
 100ad64:	100c5a40 	call	100c5a4 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 100ad68:	e0bffd17 	ldw	r2,-12(fp)
 100ad6c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 100ad70:	e0bffd17 	ldw	r2,-12(fp)
 100ad74:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 100ad78:	00804074 	movhi	r2,257
 100ad7c:	10830a04 	addi	r2,r2,3112
 100ad80:	10800017 	ldw	r2,0(r2)
 100ad84:	100b883a 	mov	r5,r2
 100ad88:	01804074 	movhi	r6,257
 100ad8c:	31abfc04 	addi	r6,r6,-20496
 100ad90:	e1fffd17 	ldw	r7,-12(fp)
 100ad94:	100c0300 	call	100c030 <alt_alarm_start>
 100ad98:	1004403a 	cmpge	r2,r2,zero
 100ad9c:	1000041e 	bne	r2,zero,100adb0 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 100ada0:	e0fffd17 	ldw	r3,-12(fp)
 100ada4:	00a00034 	movhi	r2,32768
 100ada8:	10bfffc4 	addi	r2,r2,-1
 100adac:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 100adb0:	e037883a 	mov	sp,fp
 100adb4:	dfc00117 	ldw	ra,4(sp)
 100adb8:	df000017 	ldw	fp,0(sp)
 100adbc:	dec00204 	addi	sp,sp,8
 100adc0:	f800283a 	ret

0100adc4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 100adc4:	defff704 	addi	sp,sp,-36
 100adc8:	df000815 	stw	fp,32(sp)
 100adcc:	df000804 	addi	fp,sp,32
 100add0:	e13ffe15 	stw	r4,-8(fp)
 100add4:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 100add8:	e0bffe17 	ldw	r2,-8(fp)
 100addc:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 100ade0:	e0bffd17 	ldw	r2,-12(fp)
 100ade4:	10800017 	ldw	r2,0(r2)
 100ade8:	e0bffc15 	stw	r2,-16(fp)
 100adec:	00000006 	br	100adf0 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100adf0:	e0bffc17 	ldw	r2,-16(fp)
 100adf4:	10800104 	addi	r2,r2,4
 100adf8:	10800037 	ldwio	r2,0(r2)
 100adfc:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 100ae00:	e0bffb17 	ldw	r2,-20(fp)
 100ae04:	1080c00c 	andi	r2,r2,768
 100ae08:	1005003a 	cmpeq	r2,r2,zero
 100ae0c:	1000741e 	bne	r2,zero,100afe0 <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 100ae10:	e0bffb17 	ldw	r2,-20(fp)
 100ae14:	1080400c 	andi	r2,r2,256
 100ae18:	1005003a 	cmpeq	r2,r2,zero
 100ae1c:	1000351e 	bne	r2,zero,100aef4 <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 100ae20:	00800074 	movhi	r2,1
 100ae24:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100ae28:	e0bffd17 	ldw	r2,-12(fp)
 100ae2c:	10800a17 	ldw	r2,40(r2)
 100ae30:	10800044 	addi	r2,r2,1
 100ae34:	1081ffcc 	andi	r2,r2,2047
 100ae38:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 100ae3c:	e0bffd17 	ldw	r2,-12(fp)
 100ae40:	10c00b17 	ldw	r3,44(r2)
 100ae44:	e0bff917 	ldw	r2,-28(fp)
 100ae48:	18801626 	beq	r3,r2,100aea4 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 100ae4c:	e0bffc17 	ldw	r2,-16(fp)
 100ae50:	10800037 	ldwio	r2,0(r2)
 100ae54:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 100ae58:	e0bffa17 	ldw	r2,-24(fp)
 100ae5c:	10a0000c 	andi	r2,r2,32768
 100ae60:	1005003a 	cmpeq	r2,r2,zero
 100ae64:	10000f1e 	bne	r2,zero,100aea4 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 100ae68:	e0bffd17 	ldw	r2,-12(fp)
 100ae6c:	10c00a17 	ldw	r3,40(r2)
 100ae70:	e0bffa17 	ldw	r2,-24(fp)
 100ae74:	1009883a 	mov	r4,r2
 100ae78:	e0bffd17 	ldw	r2,-12(fp)
 100ae7c:	1885883a 	add	r2,r3,r2
 100ae80:	10800e04 	addi	r2,r2,56
 100ae84:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100ae88:	e0bffd17 	ldw	r2,-12(fp)
 100ae8c:	10800a17 	ldw	r2,40(r2)
 100ae90:	10800044 	addi	r2,r2,1
 100ae94:	10c1ffcc 	andi	r3,r2,2047
 100ae98:	e0bffd17 	ldw	r2,-12(fp)
 100ae9c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 100aea0:	003fe106 	br	100ae28 <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 100aea4:	e0bffa17 	ldw	r2,-24(fp)
 100aea8:	10bfffec 	andhi	r2,r2,65535
 100aeac:	1005003a 	cmpeq	r2,r2,zero
 100aeb0:	1000101e 	bne	r2,zero,100aef4 <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100aeb4:	e0bffd17 	ldw	r2,-12(fp)
 100aeb8:	10c00817 	ldw	r3,32(r2)
 100aebc:	00bfff84 	movi	r2,-2
 100aec0:	1886703a 	and	r3,r3,r2
 100aec4:	e0bffd17 	ldw	r2,-12(fp)
 100aec8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 100aecc:	e0bffc17 	ldw	r2,-16(fp)
 100aed0:	11000104 	addi	r4,r2,4
 100aed4:	e0bffd17 	ldw	r2,-12(fp)
 100aed8:	10800817 	ldw	r2,32(r2)
 100aedc:	1007883a 	mov	r3,r2
 100aee0:	2005883a 	mov	r2,r4
 100aee4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100aee8:	e0bffc17 	ldw	r2,-16(fp)
 100aeec:	10800104 	addi	r2,r2,4
 100aef0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 100aef4:	e0bffb17 	ldw	r2,-20(fp)
 100aef8:	1080800c 	andi	r2,r2,512
 100aefc:	1005003a 	cmpeq	r2,r2,zero
 100af00:	103fbb1e 	bne	r2,zero,100adf0 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 100af04:	e0bffb17 	ldw	r2,-20(fp)
 100af08:	10bfffec 	andhi	r2,r2,65535
 100af0c:	1004d43a 	srli	r2,r2,16
 100af10:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 100af14:	00001506 	br	100af6c <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 100af18:	e13ffc17 	ldw	r4,-16(fp)
 100af1c:	e0bffd17 	ldw	r2,-12(fp)
 100af20:	10c00d17 	ldw	r3,52(r2)
 100af24:	e0bffd17 	ldw	r2,-12(fp)
 100af28:	1885883a 	add	r2,r3,r2
 100af2c:	10820e04 	addi	r2,r2,2104
 100af30:	10800003 	ldbu	r2,0(r2)
 100af34:	10c03fcc 	andi	r3,r2,255
 100af38:	18c0201c 	xori	r3,r3,128
 100af3c:	18ffe004 	addi	r3,r3,-128
 100af40:	2005883a 	mov	r2,r4
 100af44:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100af48:	e0bffd17 	ldw	r2,-12(fp)
 100af4c:	10800d17 	ldw	r2,52(r2)
 100af50:	10800044 	addi	r2,r2,1
 100af54:	10c1ffcc 	andi	r3,r2,2047
 100af58:	e0bffd17 	ldw	r2,-12(fp)
 100af5c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 100af60:	e0bff817 	ldw	r2,-32(fp)
 100af64:	10bfffc4 	addi	r2,r2,-1
 100af68:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 100af6c:	e0bff817 	ldw	r2,-32(fp)
 100af70:	1005003a 	cmpeq	r2,r2,zero
 100af74:	1000051e 	bne	r2,zero,100af8c <altera_avalon_jtag_uart_irq+0x1c8>
 100af78:	e0bffd17 	ldw	r2,-12(fp)
 100af7c:	10c00d17 	ldw	r3,52(r2)
 100af80:	e0bffd17 	ldw	r2,-12(fp)
 100af84:	10800c17 	ldw	r2,48(r2)
 100af88:	18bfe31e 	bne	r3,r2,100af18 <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 100af8c:	e0bff817 	ldw	r2,-32(fp)
 100af90:	1005003a 	cmpeq	r2,r2,zero
 100af94:	103f961e 	bne	r2,zero,100adf0 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100af98:	e0bffd17 	ldw	r2,-12(fp)
 100af9c:	10c00817 	ldw	r3,32(r2)
 100afa0:	00bfff44 	movi	r2,-3
 100afa4:	1886703a 	and	r3,r3,r2
 100afa8:	e0bffd17 	ldw	r2,-12(fp)
 100afac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100afb0:	e0bffd17 	ldw	r2,-12(fp)
 100afb4:	10800017 	ldw	r2,0(r2)
 100afb8:	11000104 	addi	r4,r2,4
 100afbc:	e0bffd17 	ldw	r2,-12(fp)
 100afc0:	10800817 	ldw	r2,32(r2)
 100afc4:	1007883a 	mov	r3,r2
 100afc8:	2005883a 	mov	r2,r4
 100afcc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100afd0:	e0bffc17 	ldw	r2,-16(fp)
 100afd4:	10800104 	addi	r2,r2,4
 100afd8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 100afdc:	003f8406 	br	100adf0 <altera_avalon_jtag_uart_irq+0x2c>
}
 100afe0:	e037883a 	mov	sp,fp
 100afe4:	df000017 	ldw	fp,0(sp)
 100afe8:	dec00104 	addi	sp,sp,4
 100afec:	f800283a 	ret

0100aff0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 100aff0:	defffc04 	addi	sp,sp,-16
 100aff4:	df000315 	stw	fp,12(sp)
 100aff8:	df000304 	addi	fp,sp,12
 100affc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 100b000:	e0bfff17 	ldw	r2,-4(fp)
 100b004:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 100b008:	e0bffe17 	ldw	r2,-8(fp)
 100b00c:	10800017 	ldw	r2,0(r2)
 100b010:	10800104 	addi	r2,r2,4
 100b014:	10800037 	ldwio	r2,0(r2)
 100b018:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 100b01c:	e0bffd17 	ldw	r2,-12(fp)
 100b020:	1081000c 	andi	r2,r2,1024
 100b024:	1005003a 	cmpeq	r2,r2,zero
 100b028:	10000c1e 	bne	r2,zero,100b05c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 100b02c:	e0bffe17 	ldw	r2,-8(fp)
 100b030:	10800017 	ldw	r2,0(r2)
 100b034:	11000104 	addi	r4,r2,4
 100b038:	e0bffe17 	ldw	r2,-8(fp)
 100b03c:	10800817 	ldw	r2,32(r2)
 100b040:	10810014 	ori	r2,r2,1024
 100b044:	1007883a 	mov	r3,r2
 100b048:	2005883a 	mov	r2,r4
 100b04c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 100b050:	e0bffe17 	ldw	r2,-8(fp)
 100b054:	10000915 	stw	zero,36(r2)
 100b058:	00000a06 	br	100b084 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 100b05c:	e0bffe17 	ldw	r2,-8(fp)
 100b060:	10c00917 	ldw	r3,36(r2)
 100b064:	00a00034 	movhi	r2,32768
 100b068:	10bfff04 	addi	r2,r2,-4
 100b06c:	10c00536 	bltu	r2,r3,100b084 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 100b070:	e0bffe17 	ldw	r2,-8(fp)
 100b074:	10800917 	ldw	r2,36(r2)
 100b078:	10c00044 	addi	r3,r2,1
 100b07c:	e0bffe17 	ldw	r2,-8(fp)
 100b080:	10c00915 	stw	r3,36(r2)
 100b084:	00804074 	movhi	r2,257
 100b088:	10830a04 	addi	r2,r2,3112
 100b08c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 100b090:	e037883a 	mov	sp,fp
 100b094:	df000017 	ldw	fp,0(sp)
 100b098:	dec00104 	addi	sp,sp,4
 100b09c:	f800283a 	ret

0100b0a0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 100b0a0:	defffc04 	addi	sp,sp,-16
 100b0a4:	df000315 	stw	fp,12(sp)
 100b0a8:	df000304 	addi	fp,sp,12
 100b0ac:	e13ffd15 	stw	r4,-12(fp)
 100b0b0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 100b0b4:	00000706 	br	100b0d4 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 100b0b8:	e0bffe17 	ldw	r2,-8(fp)
 100b0bc:	1090000c 	andi	r2,r2,16384
 100b0c0:	1005003a 	cmpeq	r2,r2,zero
 100b0c4:	1000031e 	bne	r2,zero,100b0d4 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 100b0c8:	00bffd44 	movi	r2,-11
 100b0cc:	e0bfff15 	stw	r2,-4(fp)
 100b0d0:	00000b06 	br	100b100 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 100b0d4:	e0bffd17 	ldw	r2,-12(fp)
 100b0d8:	10c00d17 	ldw	r3,52(r2)
 100b0dc:	e0bffd17 	ldw	r2,-12(fp)
 100b0e0:	10800c17 	ldw	r2,48(r2)
 100b0e4:	18800526 	beq	r3,r2,100b0fc <altera_avalon_jtag_uart_close+0x5c>
 100b0e8:	e0bffd17 	ldw	r2,-12(fp)
 100b0ec:	10c00917 	ldw	r3,36(r2)
 100b0f0:	e0bffd17 	ldw	r2,-12(fp)
 100b0f4:	10800117 	ldw	r2,4(r2)
 100b0f8:	18bfef36 	bltu	r3,r2,100b0b8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 100b0fc:	e03fff15 	stw	zero,-4(fp)
 100b100:	e0bfff17 	ldw	r2,-4(fp)
}
 100b104:	e037883a 	mov	sp,fp
 100b108:	df000017 	ldw	fp,0(sp)
 100b10c:	dec00104 	addi	sp,sp,4
 100b110:	f800283a 	ret

0100b114 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 100b114:	defff804 	addi	sp,sp,-32
 100b118:	df000715 	stw	fp,28(sp)
 100b11c:	df000704 	addi	fp,sp,28
 100b120:	e13ffb15 	stw	r4,-20(fp)
 100b124:	e17ffc15 	stw	r5,-16(fp)
 100b128:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 100b12c:	00bff9c4 	movi	r2,-25
 100b130:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 100b134:	e0bffc17 	ldw	r2,-16(fp)
 100b138:	e0bfff15 	stw	r2,-4(fp)
 100b13c:	e0ffff17 	ldw	r3,-4(fp)
 100b140:	189a8060 	cmpeqi	r2,r3,27137
 100b144:	1000041e 	bne	r2,zero,100b158 <altera_avalon_jtag_uart_ioctl+0x44>
 100b148:	e0ffff17 	ldw	r3,-4(fp)
 100b14c:	189a80a0 	cmpeqi	r2,r3,27138
 100b150:	10001b1e 	bne	r2,zero,100b1c0 <altera_avalon_jtag_uart_ioctl+0xac>
 100b154:	00002706 	br	100b1f4 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 100b158:	e0bffb17 	ldw	r2,-20(fp)
 100b15c:	10c00117 	ldw	r3,4(r2)
 100b160:	00a00034 	movhi	r2,32768
 100b164:	10bfffc4 	addi	r2,r2,-1
 100b168:	18802226 	beq	r3,r2,100b1f4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 100b16c:	e0bffd17 	ldw	r2,-12(fp)
 100b170:	10800017 	ldw	r2,0(r2)
 100b174:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 100b178:	e0bff917 	ldw	r2,-28(fp)
 100b17c:	10800090 	cmplti	r2,r2,2
 100b180:	1000071e 	bne	r2,zero,100b1a0 <altera_avalon_jtag_uart_ioctl+0x8c>
 100b184:	e0fff917 	ldw	r3,-28(fp)
 100b188:	00a00034 	movhi	r2,32768
 100b18c:	10bfffc4 	addi	r2,r2,-1
 100b190:	18800326 	beq	r3,r2,100b1a0 <altera_avalon_jtag_uart_ioctl+0x8c>
 100b194:	e0bff917 	ldw	r2,-28(fp)
 100b198:	e0bffe15 	stw	r2,-8(fp)
 100b19c:	00000306 	br	100b1ac <altera_avalon_jtag_uart_ioctl+0x98>
 100b1a0:	00e00034 	movhi	r3,32768
 100b1a4:	18ffff84 	addi	r3,r3,-2
 100b1a8:	e0fffe15 	stw	r3,-8(fp)
 100b1ac:	e0bffb17 	ldw	r2,-20(fp)
 100b1b0:	e0fffe17 	ldw	r3,-8(fp)
 100b1b4:	10c00115 	stw	r3,4(r2)
      rc = 0;
 100b1b8:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 100b1bc:	00000d06 	br	100b1f4 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 100b1c0:	e0bffb17 	ldw	r2,-20(fp)
 100b1c4:	10c00117 	ldw	r3,4(r2)
 100b1c8:	00a00034 	movhi	r2,32768
 100b1cc:	10bfffc4 	addi	r2,r2,-1
 100b1d0:	18800826 	beq	r3,r2,100b1f4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 100b1d4:	e13ffd17 	ldw	r4,-12(fp)
 100b1d8:	e0bffb17 	ldw	r2,-20(fp)
 100b1dc:	10c00917 	ldw	r3,36(r2)
 100b1e0:	e0bffb17 	ldw	r2,-20(fp)
 100b1e4:	10800117 	ldw	r2,4(r2)
 100b1e8:	1885803a 	cmpltu	r2,r3,r2
 100b1ec:	20800015 	stw	r2,0(r4)
      rc = 0;
 100b1f0:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 100b1f4:	e0bffa17 	ldw	r2,-24(fp)
}
 100b1f8:	e037883a 	mov	sp,fp
 100b1fc:	df000017 	ldw	fp,0(sp)
 100b200:	dec00104 	addi	sp,sp,4
 100b204:	f800283a 	ret

0100b208 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 100b208:	defff204 	addi	sp,sp,-56
 100b20c:	dfc00d15 	stw	ra,52(sp)
 100b210:	df000c15 	stw	fp,48(sp)
 100b214:	df000c04 	addi	fp,sp,48
 100b218:	e13ffb15 	stw	r4,-20(fp)
 100b21c:	e17ffc15 	stw	r5,-16(fp)
 100b220:	e1bffd15 	stw	r6,-12(fp)
 100b224:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 100b228:	e0bffc17 	ldw	r2,-16(fp)
 100b22c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100b230:	00004806 	br	100b354 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 100b234:	e0bffb17 	ldw	r2,-20(fp)
 100b238:	10800a17 	ldw	r2,40(r2)
 100b23c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 100b240:	e0bffb17 	ldw	r2,-20(fp)
 100b244:	10800b17 	ldw	r2,44(r2)
 100b248:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 100b24c:	e0fff717 	ldw	r3,-36(fp)
 100b250:	e0bff617 	ldw	r2,-40(fp)
 100b254:	18800536 	bltu	r3,r2,100b26c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 100b258:	e0bff717 	ldw	r2,-36(fp)
 100b25c:	e0fff617 	ldw	r3,-40(fp)
 100b260:	10c5c83a 	sub	r2,r2,r3
 100b264:	e0bff815 	stw	r2,-32(fp)
 100b268:	00000406 	br	100b27c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 100b26c:	00820004 	movi	r2,2048
 100b270:	e0fff617 	ldw	r3,-40(fp)
 100b274:	10c5c83a 	sub	r2,r2,r3
 100b278:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 100b27c:	e0bff817 	ldw	r2,-32(fp)
 100b280:	1005003a 	cmpeq	r2,r2,zero
 100b284:	10001f1e 	bne	r2,zero,100b304 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 100b288:	e0fffd17 	ldw	r3,-12(fp)
 100b28c:	e0bff817 	ldw	r2,-32(fp)
 100b290:	1880022e 	bgeu	r3,r2,100b29c <altera_avalon_jtag_uart_read+0x94>
        n = space;
 100b294:	e0bffd17 	ldw	r2,-12(fp)
 100b298:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 100b29c:	e0bffb17 	ldw	r2,-20(fp)
 100b2a0:	10c00e04 	addi	r3,r2,56
 100b2a4:	e0bff617 	ldw	r2,-40(fp)
 100b2a8:	1887883a 	add	r3,r3,r2
 100b2ac:	e0bffa17 	ldw	r2,-24(fp)
 100b2b0:	1009883a 	mov	r4,r2
 100b2b4:	180b883a 	mov	r5,r3
 100b2b8:	e1bff817 	ldw	r6,-32(fp)
 100b2bc:	10067100 	call	1006710 <memcpy>
      ptr   += n;
 100b2c0:	e0fff817 	ldw	r3,-32(fp)
 100b2c4:	e0bffa17 	ldw	r2,-24(fp)
 100b2c8:	10c5883a 	add	r2,r2,r3
 100b2cc:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 100b2d0:	e0fffd17 	ldw	r3,-12(fp)
 100b2d4:	e0bff817 	ldw	r2,-32(fp)
 100b2d8:	1885c83a 	sub	r2,r3,r2
 100b2dc:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100b2e0:	e0fff617 	ldw	r3,-40(fp)
 100b2e4:	e0bff817 	ldw	r2,-32(fp)
 100b2e8:	1885883a 	add	r2,r3,r2
 100b2ec:	10c1ffcc 	andi	r3,r2,2047
 100b2f0:	e0bffb17 	ldw	r2,-20(fp)
 100b2f4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 100b2f8:	e0bffd17 	ldw	r2,-12(fp)
 100b2fc:	10800048 	cmpgei	r2,r2,1
 100b300:	103fcc1e 	bne	r2,zero,100b234 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 100b304:	e0fffa17 	ldw	r3,-24(fp)
 100b308:	e0bffc17 	ldw	r2,-16(fp)
 100b30c:	1880141e 	bne	r3,r2,100b360 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 100b310:	e0bffe17 	ldw	r2,-8(fp)
 100b314:	1090000c 	andi	r2,r2,16384
 100b318:	1004c03a 	cmpne	r2,r2,zero
 100b31c:	1000101e 	bne	r2,zero,100b360 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 100b320:	e0bffb17 	ldw	r2,-20(fp)
 100b324:	10c00a17 	ldw	r3,40(r2)
 100b328:	e0bff717 	ldw	r2,-36(fp)
 100b32c:	1880051e 	bne	r3,r2,100b344 <altera_avalon_jtag_uart_read+0x13c>
 100b330:	e0bffb17 	ldw	r2,-20(fp)
 100b334:	10c00917 	ldw	r3,36(r2)
 100b338:	e0bffb17 	ldw	r2,-20(fp)
 100b33c:	10800117 	ldw	r2,4(r2)
 100b340:	18bff736 	bltu	r3,r2,100b320 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 100b344:	e0bffb17 	ldw	r2,-20(fp)
 100b348:	10c00a17 	ldw	r3,40(r2)
 100b34c:	e0bff717 	ldw	r2,-36(fp)
 100b350:	18800326 	beq	r3,r2,100b360 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100b354:	e0bffd17 	ldw	r2,-12(fp)
 100b358:	10800048 	cmpgei	r2,r2,1
 100b35c:	103fb51e 	bne	r2,zero,100b234 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 100b360:	e0fffa17 	ldw	r3,-24(fp)
 100b364:	e0bffc17 	ldw	r2,-16(fp)
 100b368:	18801926 	beq	r3,r2,100b3d0 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b36c:	0005303a 	rdctl	r2,status
 100b370:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b374:	e0fff517 	ldw	r3,-44(fp)
 100b378:	00bfff84 	movi	r2,-2
 100b37c:	1884703a 	and	r2,r3,r2
 100b380:	1001703a 	wrctl	status,r2
  
  return context;
 100b384:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 100b388:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100b38c:	e0bffb17 	ldw	r2,-20(fp)
 100b390:	10800817 	ldw	r2,32(r2)
 100b394:	10c00054 	ori	r3,r2,1
 100b398:	e0bffb17 	ldw	r2,-20(fp)
 100b39c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100b3a0:	e0bffb17 	ldw	r2,-20(fp)
 100b3a4:	10800017 	ldw	r2,0(r2)
 100b3a8:	11000104 	addi	r4,r2,4
 100b3ac:	e0bffb17 	ldw	r2,-20(fp)
 100b3b0:	10800817 	ldw	r2,32(r2)
 100b3b4:	1007883a 	mov	r3,r2
 100b3b8:	2005883a 	mov	r2,r4
 100b3bc:	10c00035 	stwio	r3,0(r2)
 100b3c0:	e0bff917 	ldw	r2,-28(fp)
 100b3c4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b3c8:	e0bff417 	ldw	r2,-48(fp)
 100b3cc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 100b3d0:	e0fffa17 	ldw	r3,-24(fp)
 100b3d4:	e0bffc17 	ldw	r2,-16(fp)
 100b3d8:	18800526 	beq	r3,r2,100b3f0 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 100b3dc:	e0fffa17 	ldw	r3,-24(fp)
 100b3e0:	e0bffc17 	ldw	r2,-16(fp)
 100b3e4:	1887c83a 	sub	r3,r3,r2
 100b3e8:	e0ffff15 	stw	r3,-4(fp)
 100b3ec:	00000906 	br	100b414 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 100b3f0:	e0bffe17 	ldw	r2,-8(fp)
 100b3f4:	1090000c 	andi	r2,r2,16384
 100b3f8:	1005003a 	cmpeq	r2,r2,zero
 100b3fc:	1000031e 	bne	r2,zero,100b40c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 100b400:	00bffd44 	movi	r2,-11
 100b404:	e0bfff15 	stw	r2,-4(fp)
 100b408:	00000206 	br	100b414 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 100b40c:	00bffec4 	movi	r2,-5
 100b410:	e0bfff15 	stw	r2,-4(fp)
 100b414:	e0bfff17 	ldw	r2,-4(fp)
}
 100b418:	e037883a 	mov	sp,fp
 100b41c:	dfc00117 	ldw	ra,4(sp)
 100b420:	df000017 	ldw	fp,0(sp)
 100b424:	dec00204 	addi	sp,sp,8
 100b428:	f800283a 	ret

0100b42c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 100b42c:	defff204 	addi	sp,sp,-56
 100b430:	dfc00d15 	stw	ra,52(sp)
 100b434:	df000c15 	stw	fp,48(sp)
 100b438:	df000c04 	addi	fp,sp,48
 100b43c:	e13ffb15 	stw	r4,-20(fp)
 100b440:	e17ffc15 	stw	r5,-16(fp)
 100b444:	e1bffd15 	stw	r6,-12(fp)
 100b448:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 100b44c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 100b450:	e0bffc17 	ldw	r2,-16(fp)
 100b454:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100b458:	00003a06 	br	100b544 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 100b45c:	e0bffb17 	ldw	r2,-20(fp)
 100b460:	10800c17 	ldw	r2,48(r2)
 100b464:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 100b468:	e0bffb17 	ldw	r2,-20(fp)
 100b46c:	10800d17 	ldw	r2,52(r2)
 100b470:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 100b474:	e0fffa17 	ldw	r3,-24(fp)
 100b478:	e0bff917 	ldw	r2,-28(fp)
 100b47c:	1880062e 	bgeu	r3,r2,100b498 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 100b480:	e0fff917 	ldw	r3,-28(fp)
 100b484:	e0bffa17 	ldw	r2,-24(fp)
 100b488:	1885c83a 	sub	r2,r3,r2
 100b48c:	10bfffc4 	addi	r2,r2,-1
 100b490:	e0bff815 	stw	r2,-32(fp)
 100b494:	00000c06 	br	100b4c8 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 100b498:	e0bff917 	ldw	r2,-28(fp)
 100b49c:	1005003a 	cmpeq	r2,r2,zero
 100b4a0:	1000051e 	bne	r2,zero,100b4b8 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 100b4a4:	00820004 	movi	r2,2048
 100b4a8:	e0fffa17 	ldw	r3,-24(fp)
 100b4ac:	10c5c83a 	sub	r2,r2,r3
 100b4b0:	e0bff815 	stw	r2,-32(fp)
 100b4b4:	00000406 	br	100b4c8 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 100b4b8:	0081ffc4 	movi	r2,2047
 100b4bc:	e0fffa17 	ldw	r3,-24(fp)
 100b4c0:	10c5c83a 	sub	r2,r2,r3
 100b4c4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 100b4c8:	e0bff817 	ldw	r2,-32(fp)
 100b4cc:	1005003a 	cmpeq	r2,r2,zero
 100b4d0:	10001f1e 	bne	r2,zero,100b550 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 100b4d4:	e0fffd17 	ldw	r3,-12(fp)
 100b4d8:	e0bff817 	ldw	r2,-32(fp)
 100b4dc:	1880022e 	bgeu	r3,r2,100b4e8 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 100b4e0:	e0bffd17 	ldw	r2,-12(fp)
 100b4e4:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 100b4e8:	e0bffb17 	ldw	r2,-20(fp)
 100b4ec:	10c20e04 	addi	r3,r2,2104
 100b4f0:	e0bffa17 	ldw	r2,-24(fp)
 100b4f4:	1885883a 	add	r2,r3,r2
 100b4f8:	e0fffc17 	ldw	r3,-16(fp)
 100b4fc:	1009883a 	mov	r4,r2
 100b500:	180b883a 	mov	r5,r3
 100b504:	e1bff817 	ldw	r6,-32(fp)
 100b508:	10067100 	call	1006710 <memcpy>
      ptr   += n;
 100b50c:	e0fff817 	ldw	r3,-32(fp)
 100b510:	e0bffc17 	ldw	r2,-16(fp)
 100b514:	10c5883a 	add	r2,r2,r3
 100b518:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 100b51c:	e0fffd17 	ldw	r3,-12(fp)
 100b520:	e0bff817 	ldw	r2,-32(fp)
 100b524:	1885c83a 	sub	r2,r3,r2
 100b528:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100b52c:	e0fffa17 	ldw	r3,-24(fp)
 100b530:	e0bff817 	ldw	r2,-32(fp)
 100b534:	1885883a 	add	r2,r3,r2
 100b538:	10c1ffcc 	andi	r3,r2,2047
 100b53c:	e0bffb17 	ldw	r2,-20(fp)
 100b540:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100b544:	e0bffd17 	ldw	r2,-12(fp)
 100b548:	10800048 	cmpgei	r2,r2,1
 100b54c:	103fc31e 	bne	r2,zero,100b45c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b550:	0005303a 	rdctl	r2,status
 100b554:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b558:	e0fff517 	ldw	r3,-44(fp)
 100b55c:	00bfff84 	movi	r2,-2
 100b560:	1884703a 	and	r2,r3,r2
 100b564:	1001703a 	wrctl	status,r2
  
  return context;
 100b568:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 100b56c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100b570:	e0bffb17 	ldw	r2,-20(fp)
 100b574:	10800817 	ldw	r2,32(r2)
 100b578:	10c00094 	ori	r3,r2,2
 100b57c:	e0bffb17 	ldw	r2,-20(fp)
 100b580:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100b584:	e0bffb17 	ldw	r2,-20(fp)
 100b588:	10800017 	ldw	r2,0(r2)
 100b58c:	11000104 	addi	r4,r2,4
 100b590:	e0bffb17 	ldw	r2,-20(fp)
 100b594:	10800817 	ldw	r2,32(r2)
 100b598:	1007883a 	mov	r3,r2
 100b59c:	2005883a 	mov	r2,r4
 100b5a0:	10c00035 	stwio	r3,0(r2)
 100b5a4:	e0bff717 	ldw	r2,-36(fp)
 100b5a8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b5ac:	e0bff417 	ldw	r2,-48(fp)
 100b5b0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 100b5b4:	e0bffd17 	ldw	r2,-12(fp)
 100b5b8:	10800050 	cmplti	r2,r2,1
 100b5bc:	1000111e 	bne	r2,zero,100b604 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 100b5c0:	e0bffe17 	ldw	r2,-8(fp)
 100b5c4:	1090000c 	andi	r2,r2,16384
 100b5c8:	1004c03a 	cmpne	r2,r2,zero
 100b5cc:	1000101e 	bne	r2,zero,100b610 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 100b5d0:	e0bffb17 	ldw	r2,-20(fp)
 100b5d4:	10c00d17 	ldw	r3,52(r2)
 100b5d8:	e0bff917 	ldw	r2,-28(fp)
 100b5dc:	1880051e 	bne	r3,r2,100b5f4 <altera_avalon_jtag_uart_write+0x1c8>
 100b5e0:	e0bffb17 	ldw	r2,-20(fp)
 100b5e4:	10c00917 	ldw	r3,36(r2)
 100b5e8:	e0bffb17 	ldw	r2,-20(fp)
 100b5ec:	10800117 	ldw	r2,4(r2)
 100b5f0:	18bff736 	bltu	r3,r2,100b5d0 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 100b5f4:	e0bffb17 	ldw	r2,-20(fp)
 100b5f8:	10c00d17 	ldw	r3,52(r2)
 100b5fc:	e0bff917 	ldw	r2,-28(fp)
 100b600:	18800326 	beq	r3,r2,100b610 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 100b604:	e0bffd17 	ldw	r2,-12(fp)
 100b608:	10800048 	cmpgei	r2,r2,1
 100b60c:	103fcd1e 	bne	r2,zero,100b544 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 100b610:	e0fffc17 	ldw	r3,-16(fp)
 100b614:	e0bff617 	ldw	r2,-40(fp)
 100b618:	18800526 	beq	r3,r2,100b630 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 100b61c:	e0fffc17 	ldw	r3,-16(fp)
 100b620:	e0bff617 	ldw	r2,-40(fp)
 100b624:	1887c83a 	sub	r3,r3,r2
 100b628:	e0ffff15 	stw	r3,-4(fp)
 100b62c:	00000906 	br	100b654 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 100b630:	e0bffe17 	ldw	r2,-8(fp)
 100b634:	1090000c 	andi	r2,r2,16384
 100b638:	1005003a 	cmpeq	r2,r2,zero
 100b63c:	1000031e 	bne	r2,zero,100b64c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 100b640:	00bffd44 	movi	r2,-11
 100b644:	e0bfff15 	stw	r2,-4(fp)
 100b648:	00000206 	br	100b654 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 100b64c:	00bffec4 	movi	r2,-5
 100b650:	e0bfff15 	stw	r2,-4(fp)
 100b654:	e0bfff17 	ldw	r2,-4(fp)
}
 100b658:	e037883a 	mov	sp,fp
 100b65c:	dfc00117 	ldw	ra,4(sp)
 100b660:	df000017 	ldw	fp,0(sp)
 100b664:	dec00204 	addi	sp,sp,8
 100b668:	f800283a 	ret

0100b66c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 100b66c:	defff904 	addi	sp,sp,-28
 100b670:	dfc00615 	stw	ra,24(sp)
 100b674:	df000515 	stw	fp,20(sp)
 100b678:	df000504 	addi	fp,sp,20
 100b67c:	e13ffe15 	stw	r4,-8(fp)
 100b680:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 100b684:	e0bffe17 	ldw	r2,-8(fp)
 100b688:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 100b68c:	e0bffe17 	ldw	r2,-8(fp)
 100b690:	10800104 	addi	r2,r2,4
 100b694:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b698:	0005303a 	rdctl	r2,status
 100b69c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b6a0:	e0fffc17 	ldw	r3,-16(fp)
 100b6a4:	00bfff84 	movi	r2,-2
 100b6a8:	1884703a 	and	r2,r3,r2
 100b6ac:	1001703a 	wrctl	status,r2
  
  return context;
 100b6b0:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 100b6b4:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
 100b6b8:	100cac00 	call	100cac0 <alt_tick>
 100b6bc:	e0bffd17 	ldw	r2,-12(fp)
 100b6c0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b6c4:	e0bffb17 	ldw	r2,-20(fp)
 100b6c8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 100b6cc:	e037883a 	mov	sp,fp
 100b6d0:	dfc00117 	ldw	ra,4(sp)
 100b6d4:	df000017 	ldw	fp,0(sp)
 100b6d8:	dec00204 	addi	sp,sp,8
 100b6dc:	f800283a 	ret

0100b6e0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 100b6e0:	defff904 	addi	sp,sp,-28
 100b6e4:	dfc00615 	stw	ra,24(sp)
 100b6e8:	df000515 	stw	fp,20(sp)
 100b6ec:	df000504 	addi	fp,sp,20
 100b6f0:	e13ffc15 	stw	r4,-16(fp)
 100b6f4:	e17ffd15 	stw	r5,-12(fp)
 100b6f8:	e1bffe15 	stw	r6,-8(fp)
 100b6fc:	e1ffff15 	stw	r7,-4(fp)
 100b700:	e0bfff17 	ldw	r2,-4(fp)
 100b704:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 100b708:	00804074 	movhi	r2,257
 100b70c:	10830a04 	addi	r2,r2,3112
 100b710:	10800017 	ldw	r2,0(r2)
 100b714:	1004c03a 	cmpne	r2,r2,zero
 100b718:	1000041e 	bne	r2,zero,100b72c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 100b71c:	00c04074 	movhi	r3,257
 100b720:	18c30a04 	addi	r3,r3,3112
 100b724:	e0bffb17 	ldw	r2,-20(fp)
 100b728:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 100b72c:	e0bffc17 	ldw	r2,-16(fp)
 100b730:	10800104 	addi	r2,r2,4
 100b734:	1007883a 	mov	r3,r2
 100b738:	008001c4 	movi	r2,7
 100b73c:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 100b740:	e13ffe17 	ldw	r4,-8(fp)
 100b744:	e17ffc17 	ldw	r5,-16(fp)
 100b748:	01804074 	movhi	r6,257
 100b74c:	31ad9b04 	addi	r6,r6,-18836
 100b750:	100c5a40 	call	100c5a4 <alt_irq_register>
#endif  
}
 100b754:	e037883a 	mov	sp,fp
 100b758:	dfc00117 	ldw	ra,4(sp)
 100b75c:	df000017 	ldw	fp,0(sp)
 100b760:	dec00204 	addi	sp,sp,8
 100b764:	f800283a 	ret

0100b768 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 100b768:	defffc04 	addi	sp,sp,-16
 100b76c:	df000315 	stw	fp,12(sp)
 100b770:	df000304 	addi	fp,sp,12
 100b774:	e13ffe15 	stw	r4,-8(fp)
 100b778:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 100b77c:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 100b780:	e0bfff17 	ldw	r2,-4(fp)
 100b784:	1004c03a 	cmpne	r2,r2,zero
 100b788:	1000061e 	bne	r2,zero,100b7a4 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
 100b78c:	e0bffe17 	ldw	r2,-8(fp)
 100b790:	1007883a 	mov	r3,r2
 100b794:	e0bffd03 	ldbu	r2,-12(fp)
 100b798:	10c4b03a 	or	r2,r2,r3
 100b79c:	e0bffd05 	stb	r2,-12(fp)
 100b7a0:	00000806 	br	100b7c4 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
 100b7a4:	e0bffe17 	ldw	r2,-8(fp)
 100b7a8:	1007883a 	mov	r3,r2
 100b7ac:	e0bffd03 	ldbu	r2,-12(fp)
 100b7b0:	10c4b03a 	or	r2,r2,r3
 100b7b4:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 100b7b8:	e0bffd03 	ldbu	r2,-12(fp)
 100b7bc:	10801014 	ori	r2,r2,64
 100b7c0:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 100b7c4:	e0fffd03 	ldbu	r3,-12(fp)
 100b7c8:	00bfe004 	movi	r2,-128
 100b7cc:	1884b03a 	or	r2,r3,r2
 100b7d0:	10803fcc 	andi	r2,r2,255
}
 100b7d4:	e037883a 	mov	sp,fp
 100b7d8:	df000017 	ldw	fp,0(sp)
 100b7dc:	dec00104 	addi	sp,sp,4
 100b7e0:	f800283a 	ret

0100b7e4 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 100b7e4:	defffd04 	addi	sp,sp,-12
 100b7e8:	df000215 	stw	fp,8(sp)
 100b7ec:	df000204 	addi	fp,sp,8
 100b7f0:	e13ffe15 	stw	r4,-8(fp)
 100b7f4:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 100b7f8:	e0bffe17 	ldw	r2,-8(fp)
 100b7fc:	10800a17 	ldw	r2,40(r2)
 100b800:	e0ffff03 	ldbu	r3,-4(fp)
 100b804:	10c00025 	stbio	r3,0(r2)
}
 100b808:	e037883a 	mov	sp,fp
 100b80c:	df000017 	ldw	fp,0(sp)
 100b810:	dec00104 	addi	sp,sp,4
 100b814:	f800283a 	ret

0100b818 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 100b818:	defffe04 	addi	sp,sp,-8
 100b81c:	df000115 	stw	fp,4(sp)
 100b820:	df000104 	addi	fp,sp,4
 100b824:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 100b828:	e0bfff17 	ldw	r2,-4(fp)
 100b82c:	10800a17 	ldw	r2,40(r2)
 100b830:	1007883a 	mov	r3,r2
 100b834:	00800044 	movi	r2,1
 100b838:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 100b83c:	e037883a 	mov	sp,fp
 100b840:	df000017 	ldw	fp,0(sp)
 100b844:	dec00104 	addi	sp,sp,4
 100b848:	f800283a 	ret

0100b84c <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 100b84c:	defffc04 	addi	sp,sp,-16
 100b850:	dfc00315 	stw	ra,12(sp)
 100b854:	df000215 	stw	fp,8(sp)
 100b858:	df000204 	addi	fp,sp,8
 100b85c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 100b860:	e13fff17 	ldw	r4,-4(fp)
 100b864:	01404074 	movhi	r5,257
 100b868:	297c3f04 	addi	r5,r5,-3844
 100b86c:	100c3a40 	call	100c3a4 <alt_find_dev>
 100b870:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 100b874:	e0bffe17 	ldw	r2,-8(fp)
}
 100b878:	e037883a 	mov	sp,fp
 100b87c:	dfc00117 	ldw	ra,4(sp)
 100b880:	df000017 	ldw	fp,0(sp)
 100b884:	dec00204 	addi	sp,sp,8
 100b888:	f800283a 	ret

0100b88c <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 100b88c:	defffb04 	addi	sp,sp,-20
 100b890:	df000415 	stw	fp,16(sp)
 100b894:	df000404 	addi	fp,sp,16
 100b898:	e13ffd15 	stw	r4,-12(fp)
 100b89c:	e17ffe15 	stw	r5,-8(fp)
 100b8a0:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 100b8a4:	e03ffc15 	stw	zero,-16(fp)
 100b8a8:	00000f06 	br	100b8e8 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 100b8ac:	e0bffd17 	ldw	r2,-12(fp)
 100b8b0:	10800a17 	ldw	r2,40(r2)
 100b8b4:	11000044 	addi	r4,r2,1
 100b8b8:	e0fffc17 	ldw	r3,-16(fp)
 100b8bc:	e0bffe17 	ldw	r2,-8(fp)
 100b8c0:	1885883a 	add	r2,r3,r2
 100b8c4:	10800003 	ldbu	r2,0(r2)
 100b8c8:	10c03fcc 	andi	r3,r2,255
 100b8cc:	18c0201c 	xori	r3,r3,128
 100b8d0:	18ffe004 	addi	r3,r3,-128
 100b8d4:	2005883a 	mov	r2,r4
 100b8d8:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 100b8dc:	e0bffc17 	ldw	r2,-16(fp)
 100b8e0:	10800044 	addi	r2,r2,1
 100b8e4:	e0bffc15 	stw	r2,-16(fp)
 100b8e8:	e0fffc17 	ldw	r3,-16(fp)
 100b8ec:	e0bfff17 	ldw	r2,-4(fp)
 100b8f0:	18bfee36 	bltu	r3,r2,100b8ac <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 100b8f4:	e037883a 	mov	sp,fp
 100b8f8:	df000017 	ldw	fp,0(sp)
 100b8fc:	dec00104 	addi	sp,sp,4
 100b900:	f800283a 	ret

0100b904 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 100b904:	defffd04 	addi	sp,sp,-12
 100b908:	df000215 	stw	fp,8(sp)
 100b90c:	df000204 	addi	fp,sp,8
 100b910:	e13ffe15 	stw	r4,-8(fp)
 100b914:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 100b918:	00000d06 	br	100b950 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 100b91c:	e0bffe17 	ldw	r2,-8(fp)
 100b920:	10800a17 	ldw	r2,40(r2)
 100b924:	11000044 	addi	r4,r2,1
 100b928:	e0bfff17 	ldw	r2,-4(fp)
 100b92c:	10800003 	ldbu	r2,0(r2)
 100b930:	10c03fcc 	andi	r3,r2,255
 100b934:	18c0201c 	xori	r3,r3,128
 100b938:	18ffe004 	addi	r3,r3,-128
 100b93c:	2005883a 	mov	r2,r4
 100b940:	10c00025 	stbio	r3,0(r2)
		++ptr;
 100b944:	e0bfff17 	ldw	r2,-4(fp)
 100b948:	10800044 	addi	r2,r2,1
 100b94c:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 100b950:	e0bfff17 	ldw	r2,-4(fp)
 100b954:	10800003 	ldbu	r2,0(r2)
 100b958:	10803fcc 	andi	r2,r2,255
 100b95c:	1080201c 	xori	r2,r2,128
 100b960:	10bfe004 	addi	r2,r2,-128
 100b964:	1004c03a 	cmpne	r2,r2,zero
 100b968:	103fec1e 	bne	r2,zero,100b91c <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 100b96c:	e037883a 	mov	sp,fp
 100b970:	df000017 	ldw	fp,0(sp)
 100b974:	dec00104 	addi	sp,sp,4
 100b978:	f800283a 	ret

0100b97c <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 100b97c:	defffb04 	addi	sp,sp,-20
 100b980:	dfc00415 	stw	ra,16(sp)
 100b984:	df000315 	stw	fp,12(sp)
 100b988:	df000304 	addi	fp,sp,12
 100b98c:	e13ffd15 	stw	r4,-12(fp)
 100b990:	e17ffe15 	stw	r5,-8(fp)
 100b994:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 100b998:	e0bffd17 	ldw	r2,-12(fp)
 100b99c:	10800017 	ldw	r2,0(r2)
 100b9a0:	1009883a 	mov	r4,r2
 100b9a4:	e1bfff17 	ldw	r6,-4(fp)
 100b9a8:	e17ffe17 	ldw	r5,-8(fp)
 100b9ac:	100b88c0 	call	100b88c <alt_up_character_lcd_write>
	return 0;
 100b9b0:	0005883a 	mov	r2,zero
}
 100b9b4:	e037883a 	mov	sp,fp
 100b9b8:	dfc00117 	ldw	ra,4(sp)
 100b9bc:	df000017 	ldw	fp,0(sp)
 100b9c0:	dec00204 	addi	sp,sp,8
 100b9c4:	f800283a 	ret

0100b9c8 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 100b9c8:	defff904 	addi	sp,sp,-28
 100b9cc:	dfc00615 	stw	ra,24(sp)
 100b9d0:	df000515 	stw	fp,20(sp)
 100b9d4:	df000504 	addi	fp,sp,20
 100b9d8:	e13ffc15 	stw	r4,-16(fp)
 100b9dc:	e17ffd15 	stw	r5,-12(fp)
 100b9e0:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 100b9e4:	e0bffd17 	ldw	r2,-12(fp)
 100b9e8:	10800a28 	cmpgeui	r2,r2,40
 100b9ec:	1000031e 	bne	r2,zero,100b9fc <alt_up_character_lcd_set_cursor_pos+0x34>
 100b9f0:	e0bffe17 	ldw	r2,-8(fp)
 100b9f4:	108000b0 	cmpltui	r2,r2,2
 100b9f8:	1000031e 	bne	r2,zero,100ba08 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
 100b9fc:	00bfffc4 	movi	r2,-1
 100ba00:	e0bfff15 	stw	r2,-4(fp)
 100ba04:	00000806 	br	100ba28 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 100ba08:	e13ffd17 	ldw	r4,-12(fp)
 100ba0c:	e17ffe17 	ldw	r5,-8(fp)
 100ba10:	100b7680 	call	100b768 <get_DDRAM_addr>
 100ba14:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 100ba18:	e17ffb03 	ldbu	r5,-20(fp)
 100ba1c:	e13ffc17 	ldw	r4,-16(fp)
 100ba20:	100b7e40 	call	100b7e4 <alt_up_character_lcd_send_cmd>
	return 0;
 100ba24:	e03fff15 	stw	zero,-4(fp)
 100ba28:	e0bfff17 	ldw	r2,-4(fp)
}
 100ba2c:	e037883a 	mov	sp,fp
 100ba30:	dfc00117 	ldw	ra,4(sp)
 100ba34:	df000017 	ldw	fp,0(sp)
 100ba38:	dec00204 	addi	sp,sp,8
 100ba3c:	f800283a 	ret

0100ba40 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 100ba40:	defff904 	addi	sp,sp,-28
 100ba44:	dfc00615 	stw	ra,24(sp)
 100ba48:	df000515 	stw	fp,20(sp)
 100ba4c:	df000504 	addi	fp,sp,20
 100ba50:	e13ffc15 	stw	r4,-16(fp)
 100ba54:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 100ba58:	e0bffd17 	ldw	r2,-12(fp)
 100ba5c:	1005003a 	cmpeq	r2,r2,zero
 100ba60:	10001e1e 	bne	r2,zero,100badc <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
 100ba64:	e0bffd17 	ldw	r2,-12(fp)
 100ba68:	10800050 	cmplti	r2,r2,1
 100ba6c:	1000031e 	bne	r2,zero,100ba7c <alt_up_character_lcd_shift_cursor+0x3c>
 100ba70:	00800504 	movi	r2,20
 100ba74:	e0bfff05 	stb	r2,-4(fp)
 100ba78:	00000206 	br	100ba84 <alt_up_character_lcd_shift_cursor+0x44>
 100ba7c:	00c00404 	movi	r3,16
 100ba80:	e0ffff05 	stb	r3,-4(fp)
 100ba84:	e0bfff03 	ldbu	r2,-4(fp)
 100ba88:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 100ba8c:	e0fffd17 	ldw	r3,-12(fp)
 100ba90:	e0fffe15 	stw	r3,-8(fp)
 100ba94:	e0fffe17 	ldw	r3,-8(fp)
 100ba98:	1804403a 	cmpge	r2,r3,zero
 100ba9c:	1000031e 	bne	r2,zero,100baac <alt_up_character_lcd_shift_cursor+0x6c>
 100baa0:	e0bffe17 	ldw	r2,-8(fp)
 100baa4:	0085c83a 	sub	r2,zero,r2
 100baa8:	e0bffe15 	stw	r2,-8(fp)
 100baac:	e0fffe17 	ldw	r3,-8(fp)
 100bab0:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 100bab4:	00000306 	br	100bac4 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 100bab8:	e17ffb43 	ldbu	r5,-19(fp)
 100babc:	e13ffc17 	ldw	r4,-16(fp)
 100bac0:	100b7e40 	call	100b7e4 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 100bac4:	e0bffb03 	ldbu	r2,-20(fp)
 100bac8:	10bfffc4 	addi	r2,r2,-1
 100bacc:	e0bffb05 	stb	r2,-20(fp)
 100bad0:	e0bffb03 	ldbu	r2,-20(fp)
 100bad4:	10803fd8 	cmpnei	r2,r2,255
 100bad8:	103ff71e 	bne	r2,zero,100bab8 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 100badc:	e037883a 	mov	sp,fp
 100bae0:	dfc00117 	ldw	ra,4(sp)
 100bae4:	df000017 	ldw	fp,0(sp)
 100bae8:	dec00204 	addi	sp,sp,8
 100baec:	f800283a 	ret

0100baf0 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 100baf0:	defff904 	addi	sp,sp,-28
 100baf4:	dfc00615 	stw	ra,24(sp)
 100baf8:	df000515 	stw	fp,20(sp)
 100bafc:	df000504 	addi	fp,sp,20
 100bb00:	e13ffc15 	stw	r4,-16(fp)
 100bb04:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 100bb08:	e0bffd17 	ldw	r2,-12(fp)
 100bb0c:	1005003a 	cmpeq	r2,r2,zero
 100bb10:	10001e1e 	bne	r2,zero,100bb8c <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
 100bb14:	e0bffd17 	ldw	r2,-12(fp)
 100bb18:	10800050 	cmplti	r2,r2,1
 100bb1c:	1000031e 	bne	r2,zero,100bb2c <alt_up_character_lcd_shift_display+0x3c>
 100bb20:	00800704 	movi	r2,28
 100bb24:	e0bfff05 	stb	r2,-4(fp)
 100bb28:	00000206 	br	100bb34 <alt_up_character_lcd_shift_display+0x44>
 100bb2c:	00c00604 	movi	r3,24
 100bb30:	e0ffff05 	stb	r3,-4(fp)
 100bb34:	e0bfff03 	ldbu	r2,-4(fp)
 100bb38:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 100bb3c:	e0fffd17 	ldw	r3,-12(fp)
 100bb40:	e0fffe15 	stw	r3,-8(fp)
 100bb44:	e0fffe17 	ldw	r3,-8(fp)
 100bb48:	1804403a 	cmpge	r2,r3,zero
 100bb4c:	1000031e 	bne	r2,zero,100bb5c <alt_up_character_lcd_shift_display+0x6c>
 100bb50:	e0bffe17 	ldw	r2,-8(fp)
 100bb54:	0085c83a 	sub	r2,zero,r2
 100bb58:	e0bffe15 	stw	r2,-8(fp)
 100bb5c:	e0fffe17 	ldw	r3,-8(fp)
 100bb60:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 100bb64:	00000306 	br	100bb74 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 100bb68:	e17ffb43 	ldbu	r5,-19(fp)
 100bb6c:	e13ffc17 	ldw	r4,-16(fp)
 100bb70:	100b7e40 	call	100b7e4 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 100bb74:	e0bffb03 	ldbu	r2,-20(fp)
 100bb78:	10bfffc4 	addi	r2,r2,-1
 100bb7c:	e0bffb05 	stb	r2,-20(fp)
 100bb80:	e0bffb03 	ldbu	r2,-20(fp)
 100bb84:	10803fd8 	cmpnei	r2,r2,255
 100bb88:	103ff71e 	bne	r2,zero,100bb68 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 100bb8c:	e037883a 	mov	sp,fp
 100bb90:	dfc00117 	ldw	ra,4(sp)
 100bb94:	df000017 	ldw	fp,0(sp)
 100bb98:	dec00204 	addi	sp,sp,8
 100bb9c:	f800283a 	ret

0100bba0 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 100bba0:	defff904 	addi	sp,sp,-28
 100bba4:	dfc00615 	stw	ra,24(sp)
 100bba8:	df000515 	stw	fp,20(sp)
 100bbac:	df000504 	addi	fp,sp,20
 100bbb0:	e13ffc15 	stw	r4,-16(fp)
 100bbb4:	e17ffd15 	stw	r5,-12(fp)
 100bbb8:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 100bbbc:	e0bffd17 	ldw	r2,-12(fp)
 100bbc0:	10800a28 	cmpgeui	r2,r2,40
 100bbc4:	1000031e 	bne	r2,zero,100bbd4 <alt_up_character_lcd_erase_pos+0x34>
 100bbc8:	e0bffe17 	ldw	r2,-8(fp)
 100bbcc:	108000b0 	cmpltui	r2,r2,2
 100bbd0:	1000031e 	bne	r2,zero,100bbe0 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
 100bbd4:	00bfffc4 	movi	r2,-1
 100bbd8:	e0bfff15 	stw	r2,-4(fp)
 100bbdc:	00000e06 	br	100bc18 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 100bbe0:	e13ffd17 	ldw	r4,-12(fp)
 100bbe4:	e17ffe17 	ldw	r5,-8(fp)
 100bbe8:	100b7680 	call	100b768 <get_DDRAM_addr>
 100bbec:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 100bbf0:	e17ffb03 	ldbu	r5,-20(fp)
 100bbf4:	e13ffc17 	ldw	r4,-16(fp)
 100bbf8:	100b7e40 	call	100b7e4 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 100bbfc:	e0bffc17 	ldw	r2,-16(fp)
 100bc00:	10800a17 	ldw	r2,40(r2)
 100bc04:	10800044 	addi	r2,r2,1
 100bc08:	1007883a 	mov	r3,r2
 100bc0c:	00800084 	movi	r2,2
 100bc10:	18800025 	stbio	r2,0(r3)
	return 0;
 100bc14:	e03fff15 	stw	zero,-4(fp)
 100bc18:	e0bfff17 	ldw	r2,-4(fp)
}
 100bc1c:	e037883a 	mov	sp,fp
 100bc20:	dfc00117 	ldw	ra,4(sp)
 100bc24:	df000017 	ldw	fp,0(sp)
 100bc28:	dec00204 	addi	sp,sp,8
 100bc2c:	f800283a 	ret

0100bc30 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 100bc30:	defffd04 	addi	sp,sp,-12
 100bc34:	dfc00215 	stw	ra,8(sp)
 100bc38:	df000115 	stw	fp,4(sp)
 100bc3c:	df000104 	addi	fp,sp,4
 100bc40:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 100bc44:	e13fff17 	ldw	r4,-4(fp)
 100bc48:	01400304 	movi	r5,12
 100bc4c:	100b7e40 	call	100b7e4 <alt_up_character_lcd_send_cmd>
}
 100bc50:	e037883a 	mov	sp,fp
 100bc54:	dfc00117 	ldw	ra,4(sp)
 100bc58:	df000017 	ldw	fp,0(sp)
 100bc5c:	dec00204 	addi	sp,sp,8
 100bc60:	f800283a 	ret

0100bc64 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 100bc64:	defffd04 	addi	sp,sp,-12
 100bc68:	dfc00215 	stw	ra,8(sp)
 100bc6c:	df000115 	stw	fp,4(sp)
 100bc70:	df000104 	addi	fp,sp,4
 100bc74:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 100bc78:	e13fff17 	ldw	r4,-4(fp)
 100bc7c:	014003c4 	movi	r5,15
 100bc80:	100b7e40 	call	100b7e4 <alt_up_character_lcd_send_cmd>
}
 100bc84:	e037883a 	mov	sp,fp
 100bc88:	dfc00117 	ldw	ra,4(sp)
 100bc8c:	df000017 	ldw	fp,0(sp)
 100bc90:	dec00204 	addi	sp,sp,8
 100bc94:	f800283a 	ret

0100bc98 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
 100bc98:	defffd04 	addi	sp,sp,-12
 100bc9c:	df000215 	stw	fp,8(sp)
 100bca0:	df000204 	addi	fp,sp,8
 100bca4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 100bca8:	e0bfff17 	ldw	r2,-4(fp)
 100bcac:	10800a17 	ldw	r2,40(r2)
 100bcb0:	10800104 	addi	r2,r2,4
 100bcb4:	10800037 	ldwio	r2,0(r2)
 100bcb8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
 100bcbc:	e0bffe17 	ldw	r2,-8(fp)
 100bcc0:	10800054 	ori	r2,r2,1
 100bcc4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 100bcc8:	e0bfff17 	ldw	r2,-4(fp)
 100bccc:	10800a17 	ldw	r2,40(r2)
 100bcd0:	10800104 	addi	r2,r2,4
 100bcd4:	e0fffe17 	ldw	r3,-8(fp)
 100bcd8:	10c00035 	stwio	r3,0(r2)
}
 100bcdc:	e037883a 	mov	sp,fp
 100bce0:	df000017 	ldw	fp,0(sp)
 100bce4:	dec00104 	addi	sp,sp,4
 100bce8:	f800283a 	ret

0100bcec <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
 100bcec:	defffd04 	addi	sp,sp,-12
 100bcf0:	df000215 	stw	fp,8(sp)
 100bcf4:	df000204 	addi	fp,sp,8
 100bcf8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 100bcfc:	e0bfff17 	ldw	r2,-4(fp)
 100bd00:	10800a17 	ldw	r2,40(r2)
 100bd04:	10800104 	addi	r2,r2,4
 100bd08:	10800037 	ldwio	r2,0(r2)
 100bd0c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
 100bd10:	e0fffe17 	ldw	r3,-8(fp)
 100bd14:	00bfff84 	movi	r2,-2
 100bd18:	1884703a 	and	r2,r3,r2
 100bd1c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 100bd20:	e0bfff17 	ldw	r2,-4(fp)
 100bd24:	10800a17 	ldw	r2,40(r2)
 100bd28:	10800104 	addi	r2,r2,4
 100bd2c:	e0fffe17 	ldw	r3,-8(fp)
 100bd30:	10c00035 	stwio	r3,0(r2)
}
 100bd34:	e037883a 	mov	sp,fp
 100bd38:	df000017 	ldw	fp,0(sp)
 100bd3c:	dec00104 	addi	sp,sp,4
 100bd40:	f800283a 	ret

0100bd44 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
 100bd44:	defffd04 	addi	sp,sp,-12
 100bd48:	df000215 	stw	fp,8(sp)
 100bd4c:	df000204 	addi	fp,sp,8
 100bd50:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
 100bd54:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
 100bd58:	e0bfff17 	ldw	r2,-4(fp)
 100bd5c:	10800a17 	ldw	r2,40(r2)
 100bd60:	10800084 	addi	r2,r2,2
 100bd64:	1080002b 	ldhuio	r2,0(r2)
 100bd68:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
 100bd6c:	e0bffe0b 	ldhu	r2,-8(fp)
}
 100bd70:	e037883a 	mov	sp,fp
 100bd74:	df000017 	ldw	fp,0(sp)
 100bd78:	dec00104 	addi	sp,sp,4
 100bd7c:	f800283a 	ret

0100bd80 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
 100bd80:	defffd04 	addi	sp,sp,-12
 100bd84:	df000215 	stw	fp,8(sp)
 100bd88:	df000204 	addi	fp,sp,8
 100bd8c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 100bd90:	e0bfff17 	ldw	r2,-4(fp)
 100bd94:	10800a17 	ldw	r2,40(r2)
 100bd98:	10800104 	addi	r2,r2,4
 100bd9c:	10800037 	ldwio	r2,0(r2)
 100bda0:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
 100bda4:	e0bffe17 	ldw	r2,-8(fp)
 100bda8:	10bfffec 	andhi	r2,r2,65535
 100bdac:	1004d43a 	srli	r2,r2,16
}
 100bdb0:	e037883a 	mov	sp,fp
 100bdb4:	df000017 	ldw	fp,0(sp)
 100bdb8:	dec00104 	addi	sp,sp,4
 100bdbc:	f800283a 	ret

0100bdc0 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
 100bdc0:	defffc04 	addi	sp,sp,-16
 100bdc4:	df000315 	stw	fp,12(sp)
 100bdc8:	df000304 	addi	fp,sp,12
 100bdcc:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
 100bdd0:	e0bffe17 	ldw	r2,-8(fp)
 100bdd4:	1080800c 	andi	r2,r2,512
 100bdd8:	1004d27a 	srli	r2,r2,9
 100bddc:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
 100bde0:	e0bffd17 	ldw	r2,-12(fp)
 100bde4:	1005003a 	cmpeq	r2,r2,zero
 100bde8:	1000031e 	bne	r2,zero,100bdf8 <alt_up_rs232_check_parity+0x38>
 100bdec:	00bfffc4 	movi	r2,-1
 100bdf0:	e0bfff15 	stw	r2,-4(fp)
 100bdf4:	00000106 	br	100bdfc <alt_up_rs232_check_parity+0x3c>
 100bdf8:	e03fff15 	stw	zero,-4(fp)
 100bdfc:	e0bfff17 	ldw	r2,-4(fp)
}
 100be00:	e037883a 	mov	sp,fp
 100be04:	df000017 	ldw	fp,0(sp)
 100be08:	dec00104 	addi	sp,sp,4
 100be0c:	f800283a 	ret

0100be10 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
 100be10:	defffc04 	addi	sp,sp,-16
 100be14:	df000315 	stw	fp,12(sp)
 100be18:	df000304 	addi	fp,sp,12
 100be1c:	e13ffe15 	stw	r4,-8(fp)
 100be20:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 100be24:	e0bffe17 	ldw	r2,-8(fp)
 100be28:	10800a17 	ldw	r2,40(r2)
 100be2c:	10800037 	ldwio	r2,0(r2)
 100be30:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
 100be34:	e0bffe17 	ldw	r2,-8(fp)
 100be38:	10800a17 	ldw	r2,40(r2)
 100be3c:	e0ffff03 	ldbu	r3,-4(fp)
 100be40:	10c00035 	stwio	r3,0(r2)
	return 0;
 100be44:	0005883a 	mov	r2,zero
}
 100be48:	e037883a 	mov	sp,fp
 100be4c:	df000017 	ldw	fp,0(sp)
 100be50:	dec00104 	addi	sp,sp,4
 100be54:	f800283a 	ret

0100be58 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
 100be58:	defffa04 	addi	sp,sp,-24
 100be5c:	dfc00515 	stw	ra,20(sp)
 100be60:	df000415 	stw	fp,16(sp)
 100be64:	df000404 	addi	fp,sp,16
 100be68:	e13ffd15 	stw	r4,-12(fp)
 100be6c:	e17ffe15 	stw	r5,-8(fp)
 100be70:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 100be74:	e0bffd17 	ldw	r2,-12(fp)
 100be78:	10800a17 	ldw	r2,40(r2)
 100be7c:	10800037 	ldwio	r2,0(r2)
 100be80:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
 100be84:	e0bffc17 	ldw	r2,-16(fp)
 100be88:	1007883a 	mov	r3,r2
 100be8c:	e0bffe17 	ldw	r2,-8(fp)
 100be90:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
 100be94:	e13ffc17 	ldw	r4,-16(fp)
 100be98:	100bdc00 	call	100bdc0 <alt_up_rs232_check_parity>
 100be9c:	1007883a 	mov	r3,r2
 100bea0:	e0bfff17 	ldw	r2,-4(fp)
 100bea4:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
 100bea8:	e0bffc17 	ldw	r2,-16(fp)
 100beac:	10a0000c 	andi	r2,r2,32768
 100beb0:	1004d3fa 	srli	r2,r2,15
 100beb4:	10bfffc4 	addi	r2,r2,-1
}
 100beb8:	e037883a 	mov	sp,fp
 100bebc:	dfc00117 	ldw	ra,4(sp)
 100bec0:	df000017 	ldw	fp,0(sp)
 100bec4:	dec00204 	addi	sp,sp,8
 100bec8:	f800283a 	ret

0100becc <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
 100becc:	defff804 	addi	sp,sp,-32
 100bed0:	dfc00715 	stw	ra,28(sp)
 100bed4:	df000615 	stw	fp,24(sp)
 100bed8:	df000604 	addi	fp,sp,24
 100bedc:	e13ffd15 	stw	r4,-12(fp)
 100bee0:	e17ffe15 	stw	r5,-8(fp)
 100bee4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 100bee8:	e0bffd17 	ldw	r2,-12(fp)
 100beec:	10800017 	ldw	r2,0(r2)
 100bef0:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
 100bef4:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
 100bef8:	00000c06 	br	100bf2c <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
 100befc:	e17ffe17 	ldw	r5,-8(fp)
 100bf00:	e0bffe17 	ldw	r2,-8(fp)
 100bf04:	10800044 	addi	r2,r2,1
 100bf08:	e0bffe15 	stw	r2,-8(fp)
 100bf0c:	e1bffc04 	addi	r6,fp,-16
 100bf10:	e13ffb17 	ldw	r4,-20(fp)
 100bf14:	100be580 	call	100be58 <alt_up_rs232_read_data>
 100bf18:	1004c03a 	cmpne	r2,r2,zero
 100bf1c:	1000091e 	bne	r2,zero,100bf44 <alt_up_rs232_read_fd+0x78>
			count++;
 100bf20:	e0bffa17 	ldw	r2,-24(fp)
 100bf24:	10800044 	addi	r2,r2,1
 100bf28:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
 100bf2c:	e0bfff17 	ldw	r2,-4(fp)
 100bf30:	10bfffc4 	addi	r2,r2,-1
 100bf34:	e0bfff15 	stw	r2,-4(fp)
 100bf38:	e0bfff17 	ldw	r2,-4(fp)
 100bf3c:	10bfffd8 	cmpnei	r2,r2,-1
 100bf40:	103fee1e 	bne	r2,zero,100befc <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
 100bf44:	e0bffa17 	ldw	r2,-24(fp)
}
 100bf48:	e037883a 	mov	sp,fp
 100bf4c:	dfc00117 	ldw	ra,4(sp)
 100bf50:	df000017 	ldw	fp,0(sp)
 100bf54:	dec00204 	addi	sp,sp,8
 100bf58:	f800283a 	ret

0100bf5c <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
 100bf5c:	defff904 	addi	sp,sp,-28
 100bf60:	dfc00615 	stw	ra,24(sp)
 100bf64:	df000515 	stw	fp,20(sp)
 100bf68:	df000504 	addi	fp,sp,20
 100bf6c:	e13ffd15 	stw	r4,-12(fp)
 100bf70:	e17ffe15 	stw	r5,-8(fp)
 100bf74:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 100bf78:	e0bffd17 	ldw	r2,-12(fp)
 100bf7c:	10800017 	ldw	r2,0(r2)
 100bf80:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
 100bf84:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
 100bf88:	00000d06 	br	100bfc0 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
 100bf8c:	e0bffe17 	ldw	r2,-8(fp)
 100bf90:	10800003 	ldbu	r2,0(r2)
 100bf94:	11403fcc 	andi	r5,r2,255
 100bf98:	e13ffc17 	ldw	r4,-16(fp)
 100bf9c:	100be100 	call	100be10 <alt_up_rs232_write_data>
 100bfa0:	1004c03a 	cmpne	r2,r2,zero
 100bfa4:	10000c1e 	bne	r2,zero,100bfd8 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
 100bfa8:	e0bffb17 	ldw	r2,-20(fp)
 100bfac:	10800044 	addi	r2,r2,1
 100bfb0:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
 100bfb4:	e0bffe17 	ldw	r2,-8(fp)
 100bfb8:	10800044 	addi	r2,r2,1
 100bfbc:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
 100bfc0:	e0bfff17 	ldw	r2,-4(fp)
 100bfc4:	10bfffc4 	addi	r2,r2,-1
 100bfc8:	e0bfff15 	stw	r2,-4(fp)
 100bfcc:	e0bfff17 	ldw	r2,-4(fp)
 100bfd0:	10bfffd8 	cmpnei	r2,r2,-1
 100bfd4:	103fed1e 	bne	r2,zero,100bf8c <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
 100bfd8:	e0bffb17 	ldw	r2,-20(fp)
}
 100bfdc:	e037883a 	mov	sp,fp
 100bfe0:	dfc00117 	ldw	ra,4(sp)
 100bfe4:	df000017 	ldw	fp,0(sp)
 100bfe8:	dec00204 	addi	sp,sp,8
 100bfec:	f800283a 	ret

0100bff0 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
 100bff0:	defffc04 	addi	sp,sp,-16
 100bff4:	dfc00315 	stw	ra,12(sp)
 100bff8:	df000215 	stw	fp,8(sp)
 100bffc:	df000204 	addi	fp,sp,8
 100c000:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
 100c004:	e13fff17 	ldw	r4,-4(fp)
 100c008:	01404074 	movhi	r5,257
 100c00c:	297c3f04 	addi	r5,r5,-3844
 100c010:	100c3a40 	call	100c3a4 <alt_find_dev>
 100c014:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 100c018:	e0bffe17 	ldw	r2,-8(fp)
}
 100c01c:	e037883a 	mov	sp,fp
 100c020:	dfc00117 	ldw	ra,4(sp)
 100c024:	df000017 	ldw	fp,0(sp)
 100c028:	dec00204 	addi	sp,sp,8
 100c02c:	f800283a 	ret

0100c030 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 100c030:	defff404 	addi	sp,sp,-48
 100c034:	df000b15 	stw	fp,44(sp)
 100c038:	df000b04 	addi	fp,sp,44
 100c03c:	e13ffb15 	stw	r4,-20(fp)
 100c040:	e17ffc15 	stw	r5,-16(fp)
 100c044:	e1bffd15 	stw	r6,-12(fp)
 100c048:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 100c04c:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 100c050:	00804074 	movhi	r2,257
 100c054:	10830a04 	addi	r2,r2,3112
 100c058:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 100c05c:	1005003a 	cmpeq	r2,r2,zero
 100c060:	1000411e 	bne	r2,zero,100c168 <alt_alarm_start+0x138>
  {
    if (alarm)
 100c064:	e0bffb17 	ldw	r2,-20(fp)
 100c068:	1005003a 	cmpeq	r2,r2,zero
 100c06c:	10003b1e 	bne	r2,zero,100c15c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 100c070:	e0fffb17 	ldw	r3,-20(fp)
 100c074:	e0bffd17 	ldw	r2,-12(fp)
 100c078:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 100c07c:	e0fffb17 	ldw	r3,-20(fp)
 100c080:	e0bffe17 	ldw	r2,-8(fp)
 100c084:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100c088:	0005303a 	rdctl	r2,status
 100c08c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100c090:	e0fff817 	ldw	r3,-32(fp)
 100c094:	00bfff84 	movi	r2,-2
 100c098:	1884703a 	and	r2,r3,r2
 100c09c:	1001703a 	wrctl	status,r2
  
  return context;
 100c0a0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 100c0a4:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 100c0a8:	00804074 	movhi	r2,257
 100c0ac:	10830b04 	addi	r2,r2,3116
 100c0b0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 100c0b4:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 100c0b8:	e0fffc17 	ldw	r3,-16(fp)
 100c0bc:	e0bff917 	ldw	r2,-28(fp)
 100c0c0:	1885883a 	add	r2,r3,r2
 100c0c4:	10c00044 	addi	r3,r2,1
 100c0c8:	e0bffb17 	ldw	r2,-20(fp)
 100c0cc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 100c0d0:	e0bffb17 	ldw	r2,-20(fp)
 100c0d4:	10c00217 	ldw	r3,8(r2)
 100c0d8:	e0bff917 	ldw	r2,-28(fp)
 100c0dc:	1880042e 	bgeu	r3,r2,100c0f0 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 100c0e0:	e0fffb17 	ldw	r3,-20(fp)
 100c0e4:	00800044 	movi	r2,1
 100c0e8:	18800405 	stb	r2,16(r3)
 100c0ec:	00000206 	br	100c0f8 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 100c0f0:	e0bffb17 	ldw	r2,-20(fp)
 100c0f4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 100c0f8:	e0fffb17 	ldw	r3,-20(fp)
 100c0fc:	00804074 	movhi	r2,257
 100c100:	10bc4504 	addi	r2,r2,-3820
 100c104:	e0bff615 	stw	r2,-40(fp)
 100c108:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 100c10c:	e0fff717 	ldw	r3,-36(fp)
 100c110:	e0bff617 	ldw	r2,-40(fp)
 100c114:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 100c118:	e0bff617 	ldw	r2,-40(fp)
 100c11c:	10c00017 	ldw	r3,0(r2)
 100c120:	e0bff717 	ldw	r2,-36(fp)
 100c124:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 100c128:	e0bff617 	ldw	r2,-40(fp)
 100c12c:	10c00017 	ldw	r3,0(r2)
 100c130:	e0bff717 	ldw	r2,-36(fp)
 100c134:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 100c138:	e0fff617 	ldw	r3,-40(fp)
 100c13c:	e0bff717 	ldw	r2,-36(fp)
 100c140:	18800015 	stw	r2,0(r3)
 100c144:	e0bffa17 	ldw	r2,-24(fp)
 100c148:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100c14c:	e0bff517 	ldw	r2,-44(fp)
 100c150:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 100c154:	e03fff15 	stw	zero,-4(fp)
 100c158:	00000506 	br	100c170 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 100c15c:	00bffa84 	movi	r2,-22
 100c160:	e0bfff15 	stw	r2,-4(fp)
 100c164:	00000206 	br	100c170 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 100c168:	00bfde84 	movi	r2,-134
 100c16c:	e0bfff15 	stw	r2,-4(fp)
 100c170:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 100c174:	e037883a 	mov	sp,fp
 100c178:	df000017 	ldw	fp,0(sp)
 100c17c:	dec00104 	addi	sp,sp,4
 100c180:	f800283a 	ret

0100c184 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 100c184:	defffe04 	addi	sp,sp,-8
 100c188:	df000115 	stw	fp,4(sp)
 100c18c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 100c190:	e03fff15 	stw	zero,-4(fp)
 100c194:	00000506 	br	100c1ac <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 100c198:	e0bfff17 	ldw	r2,-4(fp)
 100c19c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 100c1a0:	e0bfff17 	ldw	r2,-4(fp)
 100c1a4:	10800804 	addi	r2,r2,32
 100c1a8:	e0bfff15 	stw	r2,-4(fp)
 100c1ac:	e0bfff17 	ldw	r2,-4(fp)
 100c1b0:	10820030 	cmpltui	r2,r2,2048
 100c1b4:	103ff81e 	bne	r2,zero,100c198 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 100c1b8:	e037883a 	mov	sp,fp
 100c1bc:	df000017 	ldw	fp,0(sp)
 100c1c0:	dec00104 	addi	sp,sp,4
 100c1c4:	f800283a 	ret

0100c1c8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 100c1c8:	defff904 	addi	sp,sp,-28
 100c1cc:	dfc00615 	stw	ra,24(sp)
 100c1d0:	df000515 	stw	fp,20(sp)
 100c1d4:	df000504 	addi	fp,sp,20
 100c1d8:	e13ffd15 	stw	r4,-12(fp)
 100c1dc:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 100c1e0:	e0bffd17 	ldw	r2,-12(fp)
 100c1e4:	1005003a 	cmpeq	r2,r2,zero
 100c1e8:	1000041e 	bne	r2,zero,100c1fc <alt_dev_llist_insert+0x34>
 100c1ec:	e0bffd17 	ldw	r2,-12(fp)
 100c1f0:	10800217 	ldw	r2,8(r2)
 100c1f4:	1004c03a 	cmpne	r2,r2,zero
 100c1f8:	1000071e 	bne	r2,zero,100c218 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 100c1fc:	100c27c0 	call	100c27c <alt_get_errno>
 100c200:	1007883a 	mov	r3,r2
 100c204:	00800584 	movi	r2,22
 100c208:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 100c20c:	00bffa84 	movi	r2,-22
 100c210:	e0bfff15 	stw	r2,-4(fp)
 100c214:	00001306 	br	100c264 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 100c218:	e0fffd17 	ldw	r3,-12(fp)
 100c21c:	e0bffe17 	ldw	r2,-8(fp)
 100c220:	e0bffb15 	stw	r2,-20(fp)
 100c224:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 100c228:	e0fffc17 	ldw	r3,-16(fp)
 100c22c:	e0bffb17 	ldw	r2,-20(fp)
 100c230:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 100c234:	e0bffb17 	ldw	r2,-20(fp)
 100c238:	10c00017 	ldw	r3,0(r2)
 100c23c:	e0bffc17 	ldw	r2,-16(fp)
 100c240:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 100c244:	e0bffb17 	ldw	r2,-20(fp)
 100c248:	10c00017 	ldw	r3,0(r2)
 100c24c:	e0bffc17 	ldw	r2,-16(fp)
 100c250:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 100c254:	e0fffb17 	ldw	r3,-20(fp)
 100c258:	e0bffc17 	ldw	r2,-16(fp)
 100c25c:	18800015 	stw	r2,0(r3)

  return 0;  
 100c260:	e03fff15 	stw	zero,-4(fp)
 100c264:	e0bfff17 	ldw	r2,-4(fp)
}
 100c268:	e037883a 	mov	sp,fp
 100c26c:	dfc00117 	ldw	ra,4(sp)
 100c270:	df000017 	ldw	fp,0(sp)
 100c274:	dec00204 	addi	sp,sp,8
 100c278:	f800283a 	ret

0100c27c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100c27c:	defffd04 	addi	sp,sp,-12
 100c280:	dfc00215 	stw	ra,8(sp)
 100c284:	df000115 	stw	fp,4(sp)
 100c288:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100c28c:	00804074 	movhi	r2,257
 100c290:	10bc4204 	addi	r2,r2,-3832
 100c294:	10800017 	ldw	r2,0(r2)
 100c298:	1005003a 	cmpeq	r2,r2,zero
 100c29c:	1000061e 	bne	r2,zero,100c2b8 <alt_get_errno+0x3c>
 100c2a0:	00804074 	movhi	r2,257
 100c2a4:	10bc4204 	addi	r2,r2,-3832
 100c2a8:	10800017 	ldw	r2,0(r2)
 100c2ac:	103ee83a 	callr	r2
 100c2b0:	e0bfff15 	stw	r2,-4(fp)
 100c2b4:	00000306 	br	100c2c4 <alt_get_errno+0x48>
 100c2b8:	00804074 	movhi	r2,257
 100c2bc:	10830504 	addi	r2,r2,3092
 100c2c0:	e0bfff15 	stw	r2,-4(fp)
 100c2c4:	e0bfff17 	ldw	r2,-4(fp)
}
 100c2c8:	e037883a 	mov	sp,fp
 100c2cc:	dfc00117 	ldw	ra,4(sp)
 100c2d0:	df000017 	ldw	fp,0(sp)
 100c2d4:	dec00204 	addi	sp,sp,8
 100c2d8:	f800283a 	ret

0100c2dc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 100c2dc:	defffd04 	addi	sp,sp,-12
 100c2e0:	dfc00215 	stw	ra,8(sp)
 100c2e4:	df000115 	stw	fp,4(sp)
 100c2e8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 100c2ec:	00bfff04 	movi	r2,-4
 100c2f0:	00c04074 	movhi	r3,257
 100c2f4:	18f49804 	addi	r3,r3,-11680
 100c2f8:	1885883a 	add	r2,r3,r2
 100c2fc:	e0bfff15 	stw	r2,-4(fp)
 100c300:	00000606 	br	100c31c <_do_ctors+0x40>
        (*ctor) (); 
 100c304:	e0bfff17 	ldw	r2,-4(fp)
 100c308:	10800017 	ldw	r2,0(r2)
 100c30c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 100c310:	e0bfff17 	ldw	r2,-4(fp)
 100c314:	10bfff04 	addi	r2,r2,-4
 100c318:	e0bfff15 	stw	r2,-4(fp)
 100c31c:	e0ffff17 	ldw	r3,-4(fp)
 100c320:	00804074 	movhi	r2,257
 100c324:	10b49704 	addi	r2,r2,-11684
 100c328:	18bff62e 	bgeu	r3,r2,100c304 <_do_ctors+0x28>
        (*ctor) (); 
}
 100c32c:	e037883a 	mov	sp,fp
 100c330:	dfc00117 	ldw	ra,4(sp)
 100c334:	df000017 	ldw	fp,0(sp)
 100c338:	dec00204 	addi	sp,sp,8
 100c33c:	f800283a 	ret

0100c340 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 100c340:	defffd04 	addi	sp,sp,-12
 100c344:	dfc00215 	stw	ra,8(sp)
 100c348:	df000115 	stw	fp,4(sp)
 100c34c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 100c350:	00bfff04 	movi	r2,-4
 100c354:	00c04074 	movhi	r3,257
 100c358:	18f49804 	addi	r3,r3,-11680
 100c35c:	1885883a 	add	r2,r3,r2
 100c360:	e0bfff15 	stw	r2,-4(fp)
 100c364:	00000606 	br	100c380 <_do_dtors+0x40>
        (*dtor) (); 
 100c368:	e0bfff17 	ldw	r2,-4(fp)
 100c36c:	10800017 	ldw	r2,0(r2)
 100c370:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 100c374:	e0bfff17 	ldw	r2,-4(fp)
 100c378:	10bfff04 	addi	r2,r2,-4
 100c37c:	e0bfff15 	stw	r2,-4(fp)
 100c380:	e0ffff17 	ldw	r3,-4(fp)
 100c384:	00804074 	movhi	r2,257
 100c388:	10b49804 	addi	r2,r2,-11680
 100c38c:	18bff62e 	bgeu	r3,r2,100c368 <_do_dtors+0x28>
        (*dtor) (); 
}
 100c390:	e037883a 	mov	sp,fp
 100c394:	dfc00117 	ldw	ra,4(sp)
 100c398:	df000017 	ldw	fp,0(sp)
 100c39c:	dec00204 	addi	sp,sp,8
 100c3a0:	f800283a 	ret

0100c3a4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 100c3a4:	defff904 	addi	sp,sp,-28
 100c3a8:	dfc00615 	stw	ra,24(sp)
 100c3ac:	df000515 	stw	fp,20(sp)
 100c3b0:	df000504 	addi	fp,sp,20
 100c3b4:	e13ffd15 	stw	r4,-12(fp)
 100c3b8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 100c3bc:	e0bffe17 	ldw	r2,-8(fp)
 100c3c0:	10800017 	ldw	r2,0(r2)
 100c3c4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 100c3c8:	e13ffd17 	ldw	r4,-12(fp)
 100c3cc:	10014a40 	call	10014a4 <strlen>
 100c3d0:	10800044 	addi	r2,r2,1
 100c3d4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 100c3d8:	00000d06 	br	100c410 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 100c3dc:	e0bffc17 	ldw	r2,-16(fp)
 100c3e0:	11000217 	ldw	r4,8(r2)
 100c3e4:	e1bffb17 	ldw	r6,-20(fp)
 100c3e8:	e17ffd17 	ldw	r5,-12(fp)
 100c3ec:	100cea00 	call	100cea0 <memcmp>
 100c3f0:	1004c03a 	cmpne	r2,r2,zero
 100c3f4:	1000031e 	bne	r2,zero,100c404 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 100c3f8:	e0bffc17 	ldw	r2,-16(fp)
 100c3fc:	e0bfff15 	stw	r2,-4(fp)
 100c400:	00000706 	br	100c420 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 100c404:	e0bffc17 	ldw	r2,-16(fp)
 100c408:	10800017 	ldw	r2,0(r2)
 100c40c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 100c410:	e0fffe17 	ldw	r3,-8(fp)
 100c414:	e0bffc17 	ldw	r2,-16(fp)
 100c418:	10fff01e 	bne	r2,r3,100c3dc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 100c41c:	e03fff15 	stw	zero,-4(fp)
 100c420:	e0bfff17 	ldw	r2,-4(fp)
}
 100c424:	e037883a 	mov	sp,fp
 100c428:	dfc00117 	ldw	ra,4(sp)
 100c42c:	df000017 	ldw	fp,0(sp)
 100c430:	dec00204 	addi	sp,sp,8
 100c434:	f800283a 	ret

0100c438 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 100c438:	defffe04 	addi	sp,sp,-8
 100c43c:	dfc00115 	stw	ra,4(sp)
 100c440:	df000015 	stw	fp,0(sp)
 100c444:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 100c448:	0009883a 	mov	r4,zero
 100c44c:	01500004 	movi	r5,16384
 100c450:	100cdc40 	call	100cdc4 <alt_icache_flush>
#endif
}
 100c454:	e037883a 	mov	sp,fp
 100c458:	dfc00117 	ldw	ra,4(sp)
 100c45c:	df000017 	ldw	fp,0(sp)
 100c460:	dec00204 	addi	sp,sp,8
 100c464:	f800283a 	ret

0100c468 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 100c468:	defff904 	addi	sp,sp,-28
 100c46c:	dfc00615 	stw	ra,24(sp)
 100c470:	df000515 	stw	fp,20(sp)
 100c474:	df000504 	addi	fp,sp,20
 100c478:	e13ffc15 	stw	r4,-16(fp)
 100c47c:	e17ffd15 	stw	r5,-12(fp)
 100c480:	e1bffe15 	stw	r6,-8(fp)
 100c484:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 100c488:	e13ffd17 	ldw	r4,-12(fp)
 100c48c:	e17ffe17 	ldw	r5,-8(fp)
 100c490:	e1bfff17 	ldw	r6,-4(fp)
 100c494:	100c8400 	call	100c840 <open>
 100c498:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 100c49c:	e0bffb17 	ldw	r2,-20(fp)
 100c4a0:	1004803a 	cmplt	r2,r2,zero
 100c4a4:	10001c1e 	bne	r2,zero,100c518 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 100c4a8:	e0bffb17 	ldw	r2,-20(fp)
 100c4ac:	00c04074 	movhi	r3,257
 100c4b0:	18f79e04 	addi	r3,r3,-8584
 100c4b4:	10800324 	muli	r2,r2,12
 100c4b8:	10c5883a 	add	r2,r2,r3
 100c4bc:	10c00017 	ldw	r3,0(r2)
 100c4c0:	e0bffc17 	ldw	r2,-16(fp)
 100c4c4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 100c4c8:	e0bffb17 	ldw	r2,-20(fp)
 100c4cc:	00c04074 	movhi	r3,257
 100c4d0:	18f79e04 	addi	r3,r3,-8584
 100c4d4:	10800324 	muli	r2,r2,12
 100c4d8:	10c5883a 	add	r2,r2,r3
 100c4dc:	10800104 	addi	r2,r2,4
 100c4e0:	10c00017 	ldw	r3,0(r2)
 100c4e4:	e0bffc17 	ldw	r2,-16(fp)
 100c4e8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 100c4ec:	e0bffb17 	ldw	r2,-20(fp)
 100c4f0:	00c04074 	movhi	r3,257
 100c4f4:	18f79e04 	addi	r3,r3,-8584
 100c4f8:	10800324 	muli	r2,r2,12
 100c4fc:	10c5883a 	add	r2,r2,r3
 100c500:	10800204 	addi	r2,r2,8
 100c504:	10c00017 	ldw	r3,0(r2)
 100c508:	e0bffc17 	ldw	r2,-16(fp)
 100c50c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 100c510:	e13ffb17 	ldw	r4,-20(fp)
 100c514:	100a8340 	call	100a834 <alt_release_fd>
  }
} 
 100c518:	e037883a 	mov	sp,fp
 100c51c:	dfc00117 	ldw	ra,4(sp)
 100c520:	df000017 	ldw	fp,0(sp)
 100c524:	dec00204 	addi	sp,sp,8
 100c528:	f800283a 	ret

0100c52c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 100c52c:	defffb04 	addi	sp,sp,-20
 100c530:	dfc00415 	stw	ra,16(sp)
 100c534:	df000315 	stw	fp,12(sp)
 100c538:	df000304 	addi	fp,sp,12
 100c53c:	e13ffd15 	stw	r4,-12(fp)
 100c540:	e17ffe15 	stw	r5,-8(fp)
 100c544:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 100c548:	01004074 	movhi	r4,257
 100c54c:	2137a104 	addi	r4,r4,-8572
 100c550:	e17ffd17 	ldw	r5,-12(fp)
 100c554:	01800044 	movi	r6,1
 100c558:	01c07fc4 	movi	r7,511
 100c55c:	100c4680 	call	100c468 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 100c560:	01004074 	movhi	r4,257
 100c564:	21379e04 	addi	r4,r4,-8584
 100c568:	e17ffe17 	ldw	r5,-8(fp)
 100c56c:	000d883a 	mov	r6,zero
 100c570:	01c07fc4 	movi	r7,511
 100c574:	100c4680 	call	100c468 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 100c578:	01004074 	movhi	r4,257
 100c57c:	2137a404 	addi	r4,r4,-8560
 100c580:	e17fff17 	ldw	r5,-4(fp)
 100c584:	01800044 	movi	r6,1
 100c588:	01c07fc4 	movi	r7,511
 100c58c:	100c4680 	call	100c468 <alt_open_fd>
}  
 100c590:	e037883a 	mov	sp,fp
 100c594:	dfc00117 	ldw	ra,4(sp)
 100c598:	df000017 	ldw	fp,0(sp)
 100c59c:	dec00204 	addi	sp,sp,8
 100c5a0:	f800283a 	ret

0100c5a4 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 100c5a4:	deffef04 	addi	sp,sp,-68
 100c5a8:	df001015 	stw	fp,64(sp)
 100c5ac:	df001004 	addi	fp,sp,64
 100c5b0:	e13ffc15 	stw	r4,-16(fp)
 100c5b4:	e17ffd15 	stw	r5,-12(fp)
 100c5b8:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
 100c5bc:	00bffa84 	movi	r2,-22
 100c5c0:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 100c5c4:	e0bffc17 	ldw	r2,-16(fp)
 100c5c8:	10800828 	cmpgeui	r2,r2,32
 100c5cc:	1000601e 	bne	r2,zero,100c750 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100c5d0:	0005303a 	rdctl	r2,status
 100c5d4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100c5d8:	e0fff917 	ldw	r3,-28(fp)
 100c5dc:	00bfff84 	movi	r2,-2
 100c5e0:	1884703a 	and	r2,r3,r2
 100c5e4:	1001703a 	wrctl	status,r2
  
  return context;
 100c5e8:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 100c5ec:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
 100c5f0:	e0bffc17 	ldw	r2,-16(fp)
 100c5f4:	00c04074 	movhi	r3,257
 100c5f8:	18c31604 	addi	r3,r3,3160
 100c5fc:	100490fa 	slli	r2,r2,3
 100c600:	10c7883a 	add	r3,r2,r3
 100c604:	e0bffe17 	ldw	r2,-8(fp)
 100c608:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
 100c60c:	e0bffc17 	ldw	r2,-16(fp)
 100c610:	00c04074 	movhi	r3,257
 100c614:	18c31604 	addi	r3,r3,3160
 100c618:	100490fa 	slli	r2,r2,3
 100c61c:	10c5883a 	add	r2,r2,r3
 100c620:	10c00104 	addi	r3,r2,4
 100c624:	e0bffd17 	ldw	r2,-12(fp)
 100c628:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 100c62c:	e0bffe17 	ldw	r2,-8(fp)
 100c630:	1005003a 	cmpeq	r2,r2,zero
 100c634:	1000201e 	bne	r2,zero,100c6b8 <alt_irq_register+0x114>
 100c638:	e0bffc17 	ldw	r2,-16(fp)
 100c63c:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100c640:	0005303a 	rdctl	r2,status
 100c644:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100c648:	e0fff617 	ldw	r3,-40(fp)
 100c64c:	00bfff84 	movi	r2,-2
 100c650:	1884703a 	and	r2,r3,r2
 100c654:	1001703a 	wrctl	status,r2
  
  return context;
 100c658:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 100c65c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 100c660:	e0fff717 	ldw	r3,-36(fp)
 100c664:	00800044 	movi	r2,1
 100c668:	10c4983a 	sll	r2,r2,r3
 100c66c:	1007883a 	mov	r3,r2
 100c670:	00804074 	movhi	r2,257
 100c674:	10830904 	addi	r2,r2,3108
 100c678:	10800017 	ldw	r2,0(r2)
 100c67c:	1886b03a 	or	r3,r3,r2
 100c680:	00804074 	movhi	r2,257
 100c684:	10830904 	addi	r2,r2,3108
 100c688:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 100c68c:	00804074 	movhi	r2,257
 100c690:	10830904 	addi	r2,r2,3108
 100c694:	10800017 	ldw	r2,0(r2)
 100c698:	100170fa 	wrctl	ienable,r2
 100c69c:	e0bff817 	ldw	r2,-32(fp)
 100c6a0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100c6a4:	e0bff517 	ldw	r2,-44(fp)
 100c6a8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 100c6ac:	0005883a 	mov	r2,zero
 100c6b0:	e0bfff15 	stw	r2,-4(fp)
 100c6b4:	00002006 	br	100c738 <alt_irq_register+0x194>
 100c6b8:	e0bffc17 	ldw	r2,-16(fp)
 100c6bc:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100c6c0:	0005303a 	rdctl	r2,status
 100c6c4:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100c6c8:	e0fff217 	ldw	r3,-56(fp)
 100c6cc:	00bfff84 	movi	r2,-2
 100c6d0:	1884703a 	and	r2,r3,r2
 100c6d4:	1001703a 	wrctl	status,r2
  
  return context;
 100c6d8:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 100c6dc:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
 100c6e0:	e0fff317 	ldw	r3,-52(fp)
 100c6e4:	00800044 	movi	r2,1
 100c6e8:	10c4983a 	sll	r2,r2,r3
 100c6ec:	0084303a 	nor	r2,zero,r2
 100c6f0:	1007883a 	mov	r3,r2
 100c6f4:	00804074 	movhi	r2,257
 100c6f8:	10830904 	addi	r2,r2,3108
 100c6fc:	10800017 	ldw	r2,0(r2)
 100c700:	1886703a 	and	r3,r3,r2
 100c704:	00804074 	movhi	r2,257
 100c708:	10830904 	addi	r2,r2,3108
 100c70c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 100c710:	00804074 	movhi	r2,257
 100c714:	10830904 	addi	r2,r2,3108
 100c718:	10800017 	ldw	r2,0(r2)
 100c71c:	100170fa 	wrctl	ienable,r2
 100c720:	e0bff417 	ldw	r2,-48(fp)
 100c724:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100c728:	e0bff117 	ldw	r2,-60(fp)
 100c72c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 100c730:	0005883a 	mov	r2,zero
 100c734:	e0bfff15 	stw	r2,-4(fp)
 100c738:	e0bfff17 	ldw	r2,-4(fp)
 100c73c:	e0bffb15 	stw	r2,-20(fp)
 100c740:	e0bffa17 	ldw	r2,-24(fp)
 100c744:	e0bff015 	stw	r2,-64(fp)
 100c748:	e0bff017 	ldw	r2,-64(fp)
 100c74c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 100c750:	e0bffb17 	ldw	r2,-20(fp)
}
 100c754:	e037883a 	mov	sp,fp
 100c758:	df000017 	ldw	fp,0(sp)
 100c75c:	dec00104 	addi	sp,sp,4
 100c760:	f800283a 	ret

0100c764 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 100c764:	defffc04 	addi	sp,sp,-16
 100c768:	df000315 	stw	fp,12(sp)
 100c76c:	df000304 	addi	fp,sp,12
 100c770:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 100c774:	e0bffe17 	ldw	r2,-8(fp)
 100c778:	10800217 	ldw	r2,8(r2)
 100c77c:	10d00034 	orhi	r3,r2,16384
 100c780:	e0bffe17 	ldw	r2,-8(fp)
 100c784:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 100c788:	e03ffd15 	stw	zero,-12(fp)
 100c78c:	00002006 	br	100c810 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 100c790:	e0bffd17 	ldw	r2,-12(fp)
 100c794:	00c04074 	movhi	r3,257
 100c798:	18f79e04 	addi	r3,r3,-8584
 100c79c:	10800324 	muli	r2,r2,12
 100c7a0:	10c5883a 	add	r2,r2,r3
 100c7a4:	10c00017 	ldw	r3,0(r2)
 100c7a8:	e0bffe17 	ldw	r2,-8(fp)
 100c7ac:	10800017 	ldw	r2,0(r2)
 100c7b0:	1880141e 	bne	r3,r2,100c804 <alt_file_locked+0xa0>
 100c7b4:	e0bffd17 	ldw	r2,-12(fp)
 100c7b8:	00c04074 	movhi	r3,257
 100c7bc:	18f79e04 	addi	r3,r3,-8584
 100c7c0:	10800324 	muli	r2,r2,12
 100c7c4:	10c5883a 	add	r2,r2,r3
 100c7c8:	10800204 	addi	r2,r2,8
 100c7cc:	10800017 	ldw	r2,0(r2)
 100c7d0:	1004403a 	cmpge	r2,r2,zero
 100c7d4:	10000b1e 	bne	r2,zero,100c804 <alt_file_locked+0xa0>
 100c7d8:	e0bffd17 	ldw	r2,-12(fp)
 100c7dc:	10800324 	muli	r2,r2,12
 100c7e0:	1007883a 	mov	r3,r2
 100c7e4:	00804074 	movhi	r2,257
 100c7e8:	10b79e04 	addi	r2,r2,-8584
 100c7ec:	1887883a 	add	r3,r3,r2
 100c7f0:	e0bffe17 	ldw	r2,-8(fp)
 100c7f4:	18800326 	beq	r3,r2,100c804 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 100c7f8:	00bffcc4 	movi	r2,-13
 100c7fc:	e0bfff15 	stw	r2,-4(fp)
 100c800:	00000a06 	br	100c82c <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 100c804:	e0bffd17 	ldw	r2,-12(fp)
 100c808:	10800044 	addi	r2,r2,1
 100c80c:	e0bffd15 	stw	r2,-12(fp)
 100c810:	00804074 	movhi	r2,257
 100c814:	10bc4104 	addi	r2,r2,-3836
 100c818:	10800017 	ldw	r2,0(r2)
 100c81c:	1007883a 	mov	r3,r2
 100c820:	e0bffd17 	ldw	r2,-12(fp)
 100c824:	18bfda2e 	bgeu	r3,r2,100c790 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 100c828:	e03fff15 	stw	zero,-4(fp)
 100c82c:	e0bfff17 	ldw	r2,-4(fp)
}
 100c830:	e037883a 	mov	sp,fp
 100c834:	df000017 	ldw	fp,0(sp)
 100c838:	dec00104 	addi	sp,sp,4
 100c83c:	f800283a 	ret

0100c840 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 100c840:	defff404 	addi	sp,sp,-48
 100c844:	dfc00b15 	stw	ra,44(sp)
 100c848:	df000a15 	stw	fp,40(sp)
 100c84c:	df000a04 	addi	fp,sp,40
 100c850:	e13ffb15 	stw	r4,-20(fp)
 100c854:	e17ffc15 	stw	r5,-16(fp)
 100c858:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 100c85c:	00bfffc4 	movi	r2,-1
 100c860:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 100c864:	00bffb44 	movi	r2,-19
 100c868:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 100c86c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 100c870:	e13ffb17 	ldw	r4,-20(fp)
 100c874:	01404074 	movhi	r5,257
 100c878:	297c3f04 	addi	r5,r5,-3844
 100c87c:	100c3a40 	call	100c3a4 <alt_find_dev>
 100c880:	e0bffa15 	stw	r2,-24(fp)
 100c884:	e0bffa17 	ldw	r2,-24(fp)
 100c888:	1004c03a 	cmpne	r2,r2,zero
 100c88c:	1000051e 	bne	r2,zero,100c8a4 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 100c890:	e13ffb17 	ldw	r4,-20(fp)
 100c894:	100cbec0 	call	100cbec <alt_find_file>
 100c898:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 100c89c:	00800044 	movi	r2,1
 100c8a0:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 100c8a4:	e0bffa17 	ldw	r2,-24(fp)
 100c8a8:	1005003a 	cmpeq	r2,r2,zero
 100c8ac:	1000301e 	bne	r2,zero,100c970 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 100c8b0:	e13ffa17 	ldw	r4,-24(fp)
 100c8b4:	100cd0c0 	call	100cd0c <alt_get_fd>
 100c8b8:	e0bff815 	stw	r2,-32(fp)
 100c8bc:	e0bff817 	ldw	r2,-32(fp)
 100c8c0:	1004403a 	cmpge	r2,r2,zero
 100c8c4:	1000031e 	bne	r2,zero,100c8d4 <open+0x94>
    {
      status = index;
 100c8c8:	e0bff817 	ldw	r2,-32(fp)
 100c8cc:	e0bff715 	stw	r2,-36(fp)
 100c8d0:	00002906 	br	100c978 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 100c8d4:	e0bff817 	ldw	r2,-32(fp)
 100c8d8:	10800324 	muli	r2,r2,12
 100c8dc:	1007883a 	mov	r3,r2
 100c8e0:	00804074 	movhi	r2,257
 100c8e4:	10b79e04 	addi	r2,r2,-8584
 100c8e8:	1885883a 	add	r2,r3,r2
 100c8ec:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 100c8f0:	e0fffc17 	ldw	r3,-16(fp)
 100c8f4:	00900034 	movhi	r2,16384
 100c8f8:	10bfffc4 	addi	r2,r2,-1
 100c8fc:	1886703a 	and	r3,r3,r2
 100c900:	e0bff917 	ldw	r2,-28(fp)
 100c904:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 100c908:	e0bff617 	ldw	r2,-40(fp)
 100c90c:	1004c03a 	cmpne	r2,r2,zero
 100c910:	1000061e 	bne	r2,zero,100c92c <open+0xec>
 100c914:	e13ff917 	ldw	r4,-28(fp)
 100c918:	100c7640 	call	100c764 <alt_file_locked>
 100c91c:	e0bff715 	stw	r2,-36(fp)
 100c920:	e0bff717 	ldw	r2,-36(fp)
 100c924:	1004803a 	cmplt	r2,r2,zero
 100c928:	1000131e 	bne	r2,zero,100c978 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 100c92c:	e0bffa17 	ldw	r2,-24(fp)
 100c930:	10800317 	ldw	r2,12(r2)
 100c934:	1005003a 	cmpeq	r2,r2,zero
 100c938:	1000091e 	bne	r2,zero,100c960 <open+0x120>
 100c93c:	e0bffa17 	ldw	r2,-24(fp)
 100c940:	10800317 	ldw	r2,12(r2)
 100c944:	e13ff917 	ldw	r4,-28(fp)
 100c948:	e17ffb17 	ldw	r5,-20(fp)
 100c94c:	e1bffc17 	ldw	r6,-16(fp)
 100c950:	e1fffd17 	ldw	r7,-12(fp)
 100c954:	103ee83a 	callr	r2
 100c958:	e0bfff15 	stw	r2,-4(fp)
 100c95c:	00000106 	br	100c964 <open+0x124>
 100c960:	e03fff15 	stw	zero,-4(fp)
 100c964:	e0bfff17 	ldw	r2,-4(fp)
 100c968:	e0bff715 	stw	r2,-36(fp)
 100c96c:	00000206 	br	100c978 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 100c970:	00bffb44 	movi	r2,-19
 100c974:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 100c978:	e0bff717 	ldw	r2,-36(fp)
 100c97c:	1004403a 	cmpge	r2,r2,zero
 100c980:	1000091e 	bne	r2,zero,100c9a8 <open+0x168>
  {
    alt_release_fd (index);  
 100c984:	e13ff817 	ldw	r4,-32(fp)
 100c988:	100a8340 	call	100a834 <alt_release_fd>
    ALT_ERRNO = -status;
 100c98c:	100c9c80 	call	100c9c8 <alt_get_errno>
 100c990:	e0fff717 	ldw	r3,-36(fp)
 100c994:	00c7c83a 	sub	r3,zero,r3
 100c998:	10c00015 	stw	r3,0(r2)
    return -1;
 100c99c:	00bfffc4 	movi	r2,-1
 100c9a0:	e0bffe15 	stw	r2,-8(fp)
 100c9a4:	00000206 	br	100c9b0 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 100c9a8:	e0bff817 	ldw	r2,-32(fp)
 100c9ac:	e0bffe15 	stw	r2,-8(fp)
 100c9b0:	e0bffe17 	ldw	r2,-8(fp)
}
 100c9b4:	e037883a 	mov	sp,fp
 100c9b8:	dfc00117 	ldw	ra,4(sp)
 100c9bc:	df000017 	ldw	fp,0(sp)
 100c9c0:	dec00204 	addi	sp,sp,8
 100c9c4:	f800283a 	ret

0100c9c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100c9c8:	defffd04 	addi	sp,sp,-12
 100c9cc:	dfc00215 	stw	ra,8(sp)
 100c9d0:	df000115 	stw	fp,4(sp)
 100c9d4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100c9d8:	00804074 	movhi	r2,257
 100c9dc:	10bc4204 	addi	r2,r2,-3832
 100c9e0:	10800017 	ldw	r2,0(r2)
 100c9e4:	1005003a 	cmpeq	r2,r2,zero
 100c9e8:	1000061e 	bne	r2,zero,100ca04 <alt_get_errno+0x3c>
 100c9ec:	00804074 	movhi	r2,257
 100c9f0:	10bc4204 	addi	r2,r2,-3832
 100c9f4:	10800017 	ldw	r2,0(r2)
 100c9f8:	103ee83a 	callr	r2
 100c9fc:	e0bfff15 	stw	r2,-4(fp)
 100ca00:	00000306 	br	100ca10 <alt_get_errno+0x48>
 100ca04:	00804074 	movhi	r2,257
 100ca08:	10830504 	addi	r2,r2,3092
 100ca0c:	e0bfff15 	stw	r2,-4(fp)
 100ca10:	e0bfff17 	ldw	r2,-4(fp)
}
 100ca14:	e037883a 	mov	sp,fp
 100ca18:	dfc00117 	ldw	ra,4(sp)
 100ca1c:	df000017 	ldw	fp,0(sp)
 100ca20:	dec00204 	addi	sp,sp,8
 100ca24:	f800283a 	ret

0100ca28 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 100ca28:	defffa04 	addi	sp,sp,-24
 100ca2c:	df000515 	stw	fp,20(sp)
 100ca30:	df000504 	addi	fp,sp,20
 100ca34:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ca38:	0005303a 	rdctl	r2,status
 100ca3c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ca40:	e0fffd17 	ldw	r3,-12(fp)
 100ca44:	00bfff84 	movi	r2,-2
 100ca48:	1884703a 	and	r2,r3,r2
 100ca4c:	1001703a 	wrctl	status,r2
  
  return context;
 100ca50:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 100ca54:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 100ca58:	e0bfff17 	ldw	r2,-4(fp)
 100ca5c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 100ca60:	e0bffc17 	ldw	r2,-16(fp)
 100ca64:	10c00017 	ldw	r3,0(r2)
 100ca68:	e0bffc17 	ldw	r2,-16(fp)
 100ca6c:	10800117 	ldw	r2,4(r2)
 100ca70:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 100ca74:	e0bffc17 	ldw	r2,-16(fp)
 100ca78:	10c00117 	ldw	r3,4(r2)
 100ca7c:	e0bffc17 	ldw	r2,-16(fp)
 100ca80:	10800017 	ldw	r2,0(r2)
 100ca84:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 100ca88:	e0fffc17 	ldw	r3,-16(fp)
 100ca8c:	e0bffc17 	ldw	r2,-16(fp)
 100ca90:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 100ca94:	e0fffc17 	ldw	r3,-16(fp)
 100ca98:	e0bffc17 	ldw	r2,-16(fp)
 100ca9c:	18800015 	stw	r2,0(r3)
 100caa0:	e0bffe17 	ldw	r2,-8(fp)
 100caa4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100caa8:	e0bffb17 	ldw	r2,-20(fp)
 100caac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 100cab0:	e037883a 	mov	sp,fp
 100cab4:	df000017 	ldw	fp,0(sp)
 100cab8:	dec00104 	addi	sp,sp,4
 100cabc:	f800283a 	ret

0100cac0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 100cac0:	defffb04 	addi	sp,sp,-20
 100cac4:	dfc00415 	stw	ra,16(sp)
 100cac8:	df000315 	stw	fp,12(sp)
 100cacc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 100cad0:	d0a00e17 	ldw	r2,-32712(gp)
 100cad4:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 100cad8:	d0a6d417 	ldw	r2,-25776(gp)
 100cadc:	10800044 	addi	r2,r2,1
 100cae0:	d0a6d415 	stw	r2,-25776(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 100cae4:	00003106 	br	100cbac <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 100cae8:	e0bffe17 	ldw	r2,-8(fp)
 100caec:	10800017 	ldw	r2,0(r2)
 100caf0:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 100caf4:	e0bffe17 	ldw	r2,-8(fp)
 100caf8:	10800403 	ldbu	r2,16(r2)
 100cafc:	10803fcc 	andi	r2,r2,255
 100cb00:	1005003a 	cmpeq	r2,r2,zero
 100cb04:	1000051e 	bne	r2,zero,100cb1c <alt_tick+0x5c>
 100cb08:	d0a6d417 	ldw	r2,-25776(gp)
 100cb0c:	1004c03a 	cmpne	r2,r2,zero
 100cb10:	1000021e 	bne	r2,zero,100cb1c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 100cb14:	e0bffe17 	ldw	r2,-8(fp)
 100cb18:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 100cb1c:	e0bffe17 	ldw	r2,-8(fp)
 100cb20:	10c00217 	ldw	r3,8(r2)
 100cb24:	d0a6d417 	ldw	r2,-25776(gp)
 100cb28:	10c01e36 	bltu	r2,r3,100cba4 <alt_tick+0xe4>
 100cb2c:	e0bffe17 	ldw	r2,-8(fp)
 100cb30:	10800403 	ldbu	r2,16(r2)
 100cb34:	10803fcc 	andi	r2,r2,255
 100cb38:	1004c03a 	cmpne	r2,r2,zero
 100cb3c:	1000191e 	bne	r2,zero,100cba4 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 100cb40:	e0bffe17 	ldw	r2,-8(fp)
 100cb44:	10c00317 	ldw	r3,12(r2)
 100cb48:	e0bffe17 	ldw	r2,-8(fp)
 100cb4c:	11000517 	ldw	r4,20(r2)
 100cb50:	183ee83a 	callr	r3
 100cb54:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 100cb58:	e0bffd17 	ldw	r2,-12(fp)
 100cb5c:	1004c03a 	cmpne	r2,r2,zero
 100cb60:	1000031e 	bne	r2,zero,100cb70 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 100cb64:	e13ffe17 	ldw	r4,-8(fp)
 100cb68:	100ca280 	call	100ca28 <alt_alarm_stop>
 100cb6c:	00000d06 	br	100cba4 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 100cb70:	e0bffe17 	ldw	r2,-8(fp)
 100cb74:	10c00217 	ldw	r3,8(r2)
 100cb78:	e0bffd17 	ldw	r2,-12(fp)
 100cb7c:	1887883a 	add	r3,r3,r2
 100cb80:	e0bffe17 	ldw	r2,-8(fp)
 100cb84:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 100cb88:	e0bffe17 	ldw	r2,-8(fp)
 100cb8c:	10c00217 	ldw	r3,8(r2)
 100cb90:	d0a6d417 	ldw	r2,-25776(gp)
 100cb94:	1880032e 	bgeu	r3,r2,100cba4 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 100cb98:	e0fffe17 	ldw	r3,-8(fp)
 100cb9c:	00800044 	movi	r2,1
 100cba0:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 100cba4:	e0bfff17 	ldw	r2,-4(fp)
 100cba8:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 100cbac:	d0e00e04 	addi	r3,gp,-32712
 100cbb0:	e0bffe17 	ldw	r2,-8(fp)
 100cbb4:	10ffcc1e 	bne	r2,r3,100cae8 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 100cbb8:	e037883a 	mov	sp,fp
 100cbbc:	dfc00117 	ldw	ra,4(sp)
 100cbc0:	df000017 	ldw	fp,0(sp)
 100cbc4:	dec00204 	addi	sp,sp,8
 100cbc8:	f800283a 	ret

0100cbcc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 100cbcc:	deffff04 	addi	sp,sp,-4
 100cbd0:	df000015 	stw	fp,0(sp)
 100cbd4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 100cbd8:	000170fa 	wrctl	ienable,zero
}
 100cbdc:	e037883a 	mov	sp,fp
 100cbe0:	df000017 	ldw	fp,0(sp)
 100cbe4:	dec00104 	addi	sp,sp,4
 100cbe8:	f800283a 	ret

0100cbec <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 100cbec:	defffa04 	addi	sp,sp,-24
 100cbf0:	dfc00515 	stw	ra,20(sp)
 100cbf4:	df000415 	stw	fp,16(sp)
 100cbf8:	df000404 	addi	fp,sp,16
 100cbfc:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 100cc00:	00804074 	movhi	r2,257
 100cc04:	10bc3d04 	addi	r2,r2,-3852
 100cc08:	10800017 	ldw	r2,0(r2)
 100cc0c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 100cc10:	00003306 	br	100cce0 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 100cc14:	e0bffd17 	ldw	r2,-12(fp)
 100cc18:	11000217 	ldw	r4,8(r2)
 100cc1c:	10014a40 	call	10014a4 <strlen>
 100cc20:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 100cc24:	e0bffd17 	ldw	r2,-12(fp)
 100cc28:	10c00217 	ldw	r3,8(r2)
 100cc2c:	e0bffc17 	ldw	r2,-16(fp)
 100cc30:	1885883a 	add	r2,r3,r2
 100cc34:	10bfffc4 	addi	r2,r2,-1
 100cc38:	10800003 	ldbu	r2,0(r2)
 100cc3c:	10803fcc 	andi	r2,r2,255
 100cc40:	1080201c 	xori	r2,r2,128
 100cc44:	10bfe004 	addi	r2,r2,-128
 100cc48:	10800bd8 	cmpnei	r2,r2,47
 100cc4c:	1000031e 	bne	r2,zero,100cc5c <alt_find_file+0x70>
    {
      len -= 1;
 100cc50:	e0bffc17 	ldw	r2,-16(fp)
 100cc54:	10bfffc4 	addi	r2,r2,-1
 100cc58:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 100cc5c:	e0bffc17 	ldw	r2,-16(fp)
 100cc60:	1007883a 	mov	r3,r2
 100cc64:	e0bffe17 	ldw	r2,-8(fp)
 100cc68:	1885883a 	add	r2,r3,r2
 100cc6c:	10800003 	ldbu	r2,0(r2)
 100cc70:	10803fcc 	andi	r2,r2,255
 100cc74:	1080201c 	xori	r2,r2,128
 100cc78:	10bfe004 	addi	r2,r2,-128
 100cc7c:	10800be0 	cmpeqi	r2,r2,47
 100cc80:	10000a1e 	bne	r2,zero,100ccac <alt_find_file+0xc0>
 100cc84:	e0bffc17 	ldw	r2,-16(fp)
 100cc88:	1007883a 	mov	r3,r2
 100cc8c:	e0bffe17 	ldw	r2,-8(fp)
 100cc90:	1885883a 	add	r2,r3,r2
 100cc94:	10800003 	ldbu	r2,0(r2)
 100cc98:	10803fcc 	andi	r2,r2,255
 100cc9c:	1080201c 	xori	r2,r2,128
 100cca0:	10bfe004 	addi	r2,r2,-128
 100cca4:	1004c03a 	cmpne	r2,r2,zero
 100cca8:	10000a1e 	bne	r2,zero,100ccd4 <alt_find_file+0xe8>
 100ccac:	e0bffd17 	ldw	r2,-12(fp)
 100ccb0:	11000217 	ldw	r4,8(r2)
 100ccb4:	e1bffc17 	ldw	r6,-16(fp)
 100ccb8:	e17ffe17 	ldw	r5,-8(fp)
 100ccbc:	100cea00 	call	100cea0 <memcmp>
 100ccc0:	1004c03a 	cmpne	r2,r2,zero
 100ccc4:	1000031e 	bne	r2,zero,100ccd4 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 100ccc8:	e0bffd17 	ldw	r2,-12(fp)
 100cccc:	e0bfff15 	stw	r2,-4(fp)
 100ccd0:	00000806 	br	100ccf4 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 100ccd4:	e0bffd17 	ldw	r2,-12(fp)
 100ccd8:	10800017 	ldw	r2,0(r2)
 100ccdc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 100cce0:	00c04074 	movhi	r3,257
 100cce4:	18fc3d04 	addi	r3,r3,-3852
 100cce8:	e0bffd17 	ldw	r2,-12(fp)
 100ccec:	10ffc91e 	bne	r2,r3,100cc14 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 100ccf0:	e03fff15 	stw	zero,-4(fp)
 100ccf4:	e0bfff17 	ldw	r2,-4(fp)
}
 100ccf8:	e037883a 	mov	sp,fp
 100ccfc:	dfc00117 	ldw	ra,4(sp)
 100cd00:	df000017 	ldw	fp,0(sp)
 100cd04:	dec00204 	addi	sp,sp,8
 100cd08:	f800283a 	ret

0100cd0c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 100cd0c:	defffc04 	addi	sp,sp,-16
 100cd10:	df000315 	stw	fp,12(sp)
 100cd14:	df000304 	addi	fp,sp,12
 100cd18:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 100cd1c:	00bffa04 	movi	r2,-24
 100cd20:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 100cd24:	e03ffe15 	stw	zero,-8(fp)
 100cd28:	00001e06 	br	100cda4 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 100cd2c:	e0bffe17 	ldw	r2,-8(fp)
 100cd30:	00c04074 	movhi	r3,257
 100cd34:	18f79e04 	addi	r3,r3,-8584
 100cd38:	10800324 	muli	r2,r2,12
 100cd3c:	10c5883a 	add	r2,r2,r3
 100cd40:	10800017 	ldw	r2,0(r2)
 100cd44:	1004c03a 	cmpne	r2,r2,zero
 100cd48:	1000131e 	bne	r2,zero,100cd98 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 100cd4c:	e0bffe17 	ldw	r2,-8(fp)
 100cd50:	00c04074 	movhi	r3,257
 100cd54:	18f79e04 	addi	r3,r3,-8584
 100cd58:	10800324 	muli	r2,r2,12
 100cd5c:	10c7883a 	add	r3,r2,r3
 100cd60:	e0bfff17 	ldw	r2,-4(fp)
 100cd64:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 100cd68:	00804074 	movhi	r2,257
 100cd6c:	10bc4104 	addi	r2,r2,-3836
 100cd70:	10c00017 	ldw	r3,0(r2)
 100cd74:	e0bffe17 	ldw	r2,-8(fp)
 100cd78:	1880040e 	bge	r3,r2,100cd8c <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 100cd7c:	00c04074 	movhi	r3,257
 100cd80:	18fc4104 	addi	r3,r3,-3836
 100cd84:	e0bffe17 	ldw	r2,-8(fp)
 100cd88:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 100cd8c:	e0bffe17 	ldw	r2,-8(fp)
 100cd90:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 100cd94:	00000606 	br	100cdb0 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 100cd98:	e0bffe17 	ldw	r2,-8(fp)
 100cd9c:	10800044 	addi	r2,r2,1
 100cda0:	e0bffe15 	stw	r2,-8(fp)
 100cda4:	e0bffe17 	ldw	r2,-8(fp)
 100cda8:	10800810 	cmplti	r2,r2,32
 100cdac:	103fdf1e 	bne	r2,zero,100cd2c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 100cdb0:	e0bffd17 	ldw	r2,-12(fp)
}
 100cdb4:	e037883a 	mov	sp,fp
 100cdb8:	df000017 	ldw	fp,0(sp)
 100cdbc:	dec00104 	addi	sp,sp,4
 100cdc0:	f800283a 	ret

0100cdc4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 100cdc4:	defffb04 	addi	sp,sp,-20
 100cdc8:	df000415 	stw	fp,16(sp)
 100cdcc:	df000404 	addi	fp,sp,16
 100cdd0:	e13ffe15 	stw	r4,-8(fp)
 100cdd4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 100cdd8:	e0bfff17 	ldw	r2,-4(fp)
 100cddc:	10900070 	cmpltui	r2,r2,16385
 100cde0:	1000021e 	bne	r2,zero,100cdec <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 100cde4:	00900004 	movi	r2,16384
 100cde8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 100cdec:	e0fffe17 	ldw	r3,-8(fp)
 100cdf0:	e0bfff17 	ldw	r2,-4(fp)
 100cdf4:	1885883a 	add	r2,r3,r2
 100cdf8:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 100cdfc:	e0bffe17 	ldw	r2,-8(fp)
 100ce00:	e0bffd15 	stw	r2,-12(fp)
 100ce04:	00000506 	br	100ce1c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 100ce08:	e0bffd17 	ldw	r2,-12(fp)
 100ce0c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 100ce10:	e0bffd17 	ldw	r2,-12(fp)
 100ce14:	10800804 	addi	r2,r2,32
 100ce18:	e0bffd15 	stw	r2,-12(fp)
 100ce1c:	e0fffd17 	ldw	r3,-12(fp)
 100ce20:	e0bffc17 	ldw	r2,-16(fp)
 100ce24:	18bff836 	bltu	r3,r2,100ce08 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 100ce28:	e0bffe17 	ldw	r2,-8(fp)
 100ce2c:	108007cc 	andi	r2,r2,31
 100ce30:	1005003a 	cmpeq	r2,r2,zero
 100ce34:	1000021e 	bne	r2,zero,100ce40 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 100ce38:	e0bffd17 	ldw	r2,-12(fp)
 100ce3c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 100ce40:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 100ce44:	e037883a 	mov	sp,fp
 100ce48:	df000017 	ldw	fp,0(sp)
 100ce4c:	dec00104 	addi	sp,sp,4
 100ce50:	f800283a 	ret

0100ce54 <atexit>:
 100ce54:	200b883a 	mov	r5,r4
 100ce58:	000d883a 	mov	r6,zero
 100ce5c:	0009883a 	mov	r4,zero
 100ce60:	000f883a 	mov	r7,zero
 100ce64:	100cf141 	jmpi	100cf14 <__register_exitproc>

0100ce68 <exit>:
 100ce68:	defffe04 	addi	sp,sp,-8
 100ce6c:	000b883a 	mov	r5,zero
 100ce70:	dc000015 	stw	r16,0(sp)
 100ce74:	dfc00115 	stw	ra,4(sp)
 100ce78:	2021883a 	mov	r16,r4
 100ce7c:	100d04c0 	call	100d04c <__call_exitprocs>
 100ce80:	00804074 	movhi	r2,257
 100ce84:	10bc3804 	addi	r2,r2,-3872
 100ce88:	11000017 	ldw	r4,0(r2)
 100ce8c:	20800f17 	ldw	r2,60(r4)
 100ce90:	10000126 	beq	r2,zero,100ce98 <exit+0x30>
 100ce94:	103ee83a 	callr	r2
 100ce98:	8009883a 	mov	r4,r16
 100ce9c:	100d23c0 	call	100d23c <_exit>

0100cea0 <memcmp>:
 100cea0:	00c000c4 	movi	r3,3
 100cea4:	1980032e 	bgeu	r3,r6,100ceb4 <memcmp+0x14>
 100cea8:	2144b03a 	or	r2,r4,r5
 100ceac:	10c4703a 	and	r2,r2,r3
 100ceb0:	10000f26 	beq	r2,zero,100cef0 <memcmp+0x50>
 100ceb4:	31ffffc4 	addi	r7,r6,-1
 100ceb8:	3000061e 	bne	r6,zero,100ced4 <memcmp+0x34>
 100cebc:	00000a06 	br	100cee8 <memcmp+0x48>
 100cec0:	39ffffc4 	addi	r7,r7,-1
 100cec4:	00bfffc4 	movi	r2,-1
 100cec8:	21000044 	addi	r4,r4,1
 100cecc:	29400044 	addi	r5,r5,1
 100ced0:	38800526 	beq	r7,r2,100cee8 <memcmp+0x48>
 100ced4:	20c00003 	ldbu	r3,0(r4)
 100ced8:	28800003 	ldbu	r2,0(r5)
 100cedc:	18bff826 	beq	r3,r2,100cec0 <memcmp+0x20>
 100cee0:	1885c83a 	sub	r2,r3,r2
 100cee4:	f800283a 	ret
 100cee8:	0005883a 	mov	r2,zero
 100ceec:	f800283a 	ret
 100cef0:	180f883a 	mov	r7,r3
 100cef4:	20c00017 	ldw	r3,0(r4)
 100cef8:	28800017 	ldw	r2,0(r5)
 100cefc:	18bfed1e 	bne	r3,r2,100ceb4 <memcmp+0x14>
 100cf00:	31bfff04 	addi	r6,r6,-4
 100cf04:	21000104 	addi	r4,r4,4
 100cf08:	29400104 	addi	r5,r5,4
 100cf0c:	39bff936 	bltu	r7,r6,100cef4 <memcmp+0x54>
 100cf10:	003fe806 	br	100ceb4 <memcmp+0x14>

0100cf14 <__register_exitproc>:
 100cf14:	defffa04 	addi	sp,sp,-24
 100cf18:	00804074 	movhi	r2,257
 100cf1c:	10bc3804 	addi	r2,r2,-3872
 100cf20:	dc000015 	stw	r16,0(sp)
 100cf24:	14000017 	ldw	r16,0(r2)
 100cf28:	dd000415 	stw	r20,16(sp)
 100cf2c:	2829883a 	mov	r20,r5
 100cf30:	81405217 	ldw	r5,328(r16)
 100cf34:	dcc00315 	stw	r19,12(sp)
 100cf38:	dc800215 	stw	r18,8(sp)
 100cf3c:	dc400115 	stw	r17,4(sp)
 100cf40:	dfc00515 	stw	ra,20(sp)
 100cf44:	2023883a 	mov	r17,r4
 100cf48:	3027883a 	mov	r19,r6
 100cf4c:	3825883a 	mov	r18,r7
 100cf50:	28002526 	beq	r5,zero,100cfe8 <__register_exitproc+0xd4>
 100cf54:	29000117 	ldw	r4,4(r5)
 100cf58:	008007c4 	movi	r2,31
 100cf5c:	11002716 	blt	r2,r4,100cffc <__register_exitproc+0xe8>
 100cf60:	8800101e 	bne	r17,zero,100cfa4 <__register_exitproc+0x90>
 100cf64:	2105883a 	add	r2,r4,r4
 100cf68:	1085883a 	add	r2,r2,r2
 100cf6c:	20c00044 	addi	r3,r4,1
 100cf70:	1145883a 	add	r2,r2,r5
 100cf74:	0009883a 	mov	r4,zero
 100cf78:	15000215 	stw	r20,8(r2)
 100cf7c:	28c00115 	stw	r3,4(r5)
 100cf80:	2005883a 	mov	r2,r4
 100cf84:	dfc00517 	ldw	ra,20(sp)
 100cf88:	dd000417 	ldw	r20,16(sp)
 100cf8c:	dcc00317 	ldw	r19,12(sp)
 100cf90:	dc800217 	ldw	r18,8(sp)
 100cf94:	dc400117 	ldw	r17,4(sp)
 100cf98:	dc000017 	ldw	r16,0(sp)
 100cf9c:	dec00604 	addi	sp,sp,24
 100cfa0:	f800283a 	ret
 100cfa4:	29802204 	addi	r6,r5,136
 100cfa8:	00800044 	movi	r2,1
 100cfac:	110e983a 	sll	r7,r2,r4
 100cfb0:	30c04017 	ldw	r3,256(r6)
 100cfb4:	2105883a 	add	r2,r4,r4
 100cfb8:	1085883a 	add	r2,r2,r2
 100cfbc:	1185883a 	add	r2,r2,r6
 100cfc0:	19c6b03a 	or	r3,r3,r7
 100cfc4:	14802015 	stw	r18,128(r2)
 100cfc8:	14c00015 	stw	r19,0(r2)
 100cfcc:	00800084 	movi	r2,2
 100cfd0:	30c04015 	stw	r3,256(r6)
 100cfd4:	88bfe31e 	bne	r17,r2,100cf64 <__register_exitproc+0x50>
 100cfd8:	30804117 	ldw	r2,260(r6)
 100cfdc:	11c4b03a 	or	r2,r2,r7
 100cfe0:	30804115 	stw	r2,260(r6)
 100cfe4:	003fdf06 	br	100cf64 <__register_exitproc+0x50>
 100cfe8:	00804074 	movhi	r2,257
 100cfec:	10835604 	addi	r2,r2,3416
 100cff0:	100b883a 	mov	r5,r2
 100cff4:	80805215 	stw	r2,328(r16)
 100cff8:	003fd606 	br	100cf54 <__register_exitproc+0x40>
 100cffc:	00800034 	movhi	r2,0
 100d000:	10800004 	addi	r2,r2,0
 100d004:	1000021e 	bne	r2,zero,100d010 <__register_exitproc+0xfc>
 100d008:	013fffc4 	movi	r4,-1
 100d00c:	003fdc06 	br	100cf80 <__register_exitproc+0x6c>
 100d010:	01006404 	movi	r4,400
 100d014:	103ee83a 	callr	r2
 100d018:	1007883a 	mov	r3,r2
 100d01c:	103ffa26 	beq	r2,zero,100d008 <__register_exitproc+0xf4>
 100d020:	80805217 	ldw	r2,328(r16)
 100d024:	180b883a 	mov	r5,r3
 100d028:	18000115 	stw	zero,4(r3)
 100d02c:	18800015 	stw	r2,0(r3)
 100d030:	80c05215 	stw	r3,328(r16)
 100d034:	18006215 	stw	zero,392(r3)
 100d038:	18006315 	stw	zero,396(r3)
 100d03c:	0009883a 	mov	r4,zero
 100d040:	883fc826 	beq	r17,zero,100cf64 <__register_exitproc+0x50>
 100d044:	003fd706 	br	100cfa4 <__register_exitproc+0x90>

0100d048 <register_fini>:
 100d048:	f800283a 	ret

0100d04c <__call_exitprocs>:
 100d04c:	00804074 	movhi	r2,257
 100d050:	10bc3804 	addi	r2,r2,-3872
 100d054:	10800017 	ldw	r2,0(r2)
 100d058:	defff304 	addi	sp,sp,-52
 100d05c:	df000b15 	stw	fp,44(sp)
 100d060:	d8800115 	stw	r2,4(sp)
 100d064:	00800034 	movhi	r2,0
 100d068:	10800004 	addi	r2,r2,0
 100d06c:	1005003a 	cmpeq	r2,r2,zero
 100d070:	d8800215 	stw	r2,8(sp)
 100d074:	d8800117 	ldw	r2,4(sp)
 100d078:	dd400815 	stw	r21,32(sp)
 100d07c:	dd000715 	stw	r20,28(sp)
 100d080:	10805204 	addi	r2,r2,328
 100d084:	dfc00c15 	stw	ra,48(sp)
 100d088:	ddc00a15 	stw	r23,40(sp)
 100d08c:	dd800915 	stw	r22,36(sp)
 100d090:	dcc00615 	stw	r19,24(sp)
 100d094:	dc800515 	stw	r18,20(sp)
 100d098:	dc400415 	stw	r17,16(sp)
 100d09c:	dc000315 	stw	r16,12(sp)
 100d0a0:	282b883a 	mov	r21,r5
 100d0a4:	2039883a 	mov	fp,r4
 100d0a8:	d8800015 	stw	r2,0(sp)
 100d0ac:	2829003a 	cmpeq	r20,r5,zero
 100d0b0:	d8800117 	ldw	r2,4(sp)
 100d0b4:	14405217 	ldw	r17,328(r2)
 100d0b8:	88001026 	beq	r17,zero,100d0fc <__call_exitprocs+0xb0>
 100d0bc:	ddc00017 	ldw	r23,0(sp)
 100d0c0:	88800117 	ldw	r2,4(r17)
 100d0c4:	8c802204 	addi	r18,r17,136
 100d0c8:	143fffc4 	addi	r16,r2,-1
 100d0cc:	80000916 	blt	r16,zero,100d0f4 <__call_exitprocs+0xa8>
 100d0d0:	05bfffc4 	movi	r22,-1
 100d0d4:	a000151e 	bne	r20,zero,100d12c <__call_exitprocs+0xe0>
 100d0d8:	8409883a 	add	r4,r16,r16
 100d0dc:	2105883a 	add	r2,r4,r4
 100d0e0:	1485883a 	add	r2,r2,r18
 100d0e4:	10c02017 	ldw	r3,128(r2)
 100d0e8:	a8c01126 	beq	r21,r3,100d130 <__call_exitprocs+0xe4>
 100d0ec:	843fffc4 	addi	r16,r16,-1
 100d0f0:	85bff81e 	bne	r16,r22,100d0d4 <__call_exitprocs+0x88>
 100d0f4:	d8800217 	ldw	r2,8(sp)
 100d0f8:	10003126 	beq	r2,zero,100d1c0 <__call_exitprocs+0x174>
 100d0fc:	dfc00c17 	ldw	ra,48(sp)
 100d100:	df000b17 	ldw	fp,44(sp)
 100d104:	ddc00a17 	ldw	r23,40(sp)
 100d108:	dd800917 	ldw	r22,36(sp)
 100d10c:	dd400817 	ldw	r21,32(sp)
 100d110:	dd000717 	ldw	r20,28(sp)
 100d114:	dcc00617 	ldw	r19,24(sp)
 100d118:	dc800517 	ldw	r18,20(sp)
 100d11c:	dc400417 	ldw	r17,16(sp)
 100d120:	dc000317 	ldw	r16,12(sp)
 100d124:	dec00d04 	addi	sp,sp,52
 100d128:	f800283a 	ret
 100d12c:	8409883a 	add	r4,r16,r16
 100d130:	88c00117 	ldw	r3,4(r17)
 100d134:	2105883a 	add	r2,r4,r4
 100d138:	1445883a 	add	r2,r2,r17
 100d13c:	18ffffc4 	addi	r3,r3,-1
 100d140:	11800217 	ldw	r6,8(r2)
 100d144:	1c001526 	beq	r3,r16,100d19c <__call_exitprocs+0x150>
 100d148:	10000215 	stw	zero,8(r2)
 100d14c:	303fe726 	beq	r6,zero,100d0ec <__call_exitprocs+0xa0>
 100d150:	00c00044 	movi	r3,1
 100d154:	1c06983a 	sll	r3,r3,r16
 100d158:	90804017 	ldw	r2,256(r18)
 100d15c:	8cc00117 	ldw	r19,4(r17)
 100d160:	1884703a 	and	r2,r3,r2
 100d164:	10001426 	beq	r2,zero,100d1b8 <__call_exitprocs+0x16c>
 100d168:	90804117 	ldw	r2,260(r18)
 100d16c:	1884703a 	and	r2,r3,r2
 100d170:	10000c1e 	bne	r2,zero,100d1a4 <__call_exitprocs+0x158>
 100d174:	2105883a 	add	r2,r4,r4
 100d178:	1485883a 	add	r2,r2,r18
 100d17c:	11400017 	ldw	r5,0(r2)
 100d180:	e009883a 	mov	r4,fp
 100d184:	303ee83a 	callr	r6
 100d188:	88800117 	ldw	r2,4(r17)
 100d18c:	98bfc81e 	bne	r19,r2,100d0b0 <__call_exitprocs+0x64>
 100d190:	b8800017 	ldw	r2,0(r23)
 100d194:	147fd526 	beq	r2,r17,100d0ec <__call_exitprocs+0xa0>
 100d198:	003fc506 	br	100d0b0 <__call_exitprocs+0x64>
 100d19c:	8c000115 	stw	r16,4(r17)
 100d1a0:	003fea06 	br	100d14c <__call_exitprocs+0x100>
 100d1a4:	2105883a 	add	r2,r4,r4
 100d1a8:	1485883a 	add	r2,r2,r18
 100d1ac:	11000017 	ldw	r4,0(r2)
 100d1b0:	303ee83a 	callr	r6
 100d1b4:	003ff406 	br	100d188 <__call_exitprocs+0x13c>
 100d1b8:	303ee83a 	callr	r6
 100d1bc:	003ff206 	br	100d188 <__call_exitprocs+0x13c>
 100d1c0:	88800117 	ldw	r2,4(r17)
 100d1c4:	1000081e 	bne	r2,zero,100d1e8 <__call_exitprocs+0x19c>
 100d1c8:	89000017 	ldw	r4,0(r17)
 100d1cc:	20000726 	beq	r4,zero,100d1ec <__call_exitprocs+0x1a0>
 100d1d0:	b9000015 	stw	r4,0(r23)
 100d1d4:	8809883a 	mov	r4,r17
 100d1d8:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 100d1dc:	bc400017 	ldw	r17,0(r23)
 100d1e0:	883fb71e 	bne	r17,zero,100d0c0 <__call_exitprocs+0x74>
 100d1e4:	003fc506 	br	100d0fc <__call_exitprocs+0xb0>
 100d1e8:	89000017 	ldw	r4,0(r17)
 100d1ec:	882f883a 	mov	r23,r17
 100d1f0:	2023883a 	mov	r17,r4
 100d1f4:	883fb21e 	bne	r17,zero,100d0c0 <__call_exitprocs+0x74>
 100d1f8:	003fc006 	br	100d0fc <__call_exitprocs+0xb0>

0100d1fc <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 100d1fc:	defffd04 	addi	sp,sp,-12
 100d200:	df000215 	stw	fp,8(sp)
 100d204:	df000204 	addi	fp,sp,8
 100d208:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 100d20c:	e0bfff17 	ldw	r2,-4(fp)
 100d210:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 100d214:	e0bffe17 	ldw	r2,-8(fp)
 100d218:	1005003a 	cmpeq	r2,r2,zero
 100d21c:	1000021e 	bne	r2,zero,100d228 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 100d220:	002af070 	cmpltui	zero,zero,43969
 100d224:	00000106 	br	100d22c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 100d228:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 100d22c:	e037883a 	mov	sp,fp
 100d230:	df000017 	ldw	fp,0(sp)
 100d234:	dec00104 	addi	sp,sp,4
 100d238:	f800283a 	ret

0100d23c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 100d23c:	defffd04 	addi	sp,sp,-12
 100d240:	dfc00215 	stw	ra,8(sp)
 100d244:	df000115 	stw	fp,4(sp)
 100d248:	df000104 	addi	fp,sp,4
 100d24c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 100d250:	e13fff17 	ldw	r4,-4(fp)
 100d254:	100d1fc0 	call	100d1fc <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 100d258:	003fff06 	br	100d258 <_exit+0x1c>
 100d25c:	0100d048 	cmpgei	r4,zero,833
